begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.embedded
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|SolrDispatchFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Connector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|HttpConfiguration
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|HttpConnectionFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|LowResourceMonitor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|SecureRequestCustomizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ServerConnector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|SslConnectionFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|session
operator|.
name|HashSessionIdManager
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|BaseHolder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|FilterHolder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletContextHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlets
operator|.
name|GzipFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|component
operator|.
name|LifeCycle
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ssl
operator|.
name|SslContextFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|thread
operator|.
name|QueuedThreadPool
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|MDC
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|DispatcherType
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import
begin_comment
comment|/**  * Run solr using jetty  *   * @since solr 1.3  */
end_comment
begin_class
DECL|class|JettySolrRunner
specifier|public
class|class
name|JettySolrRunner
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JettySolrRunner
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|server
name|Server
name|server
decl_stmt|;
DECL|field|dispatchFilter
name|FilterHolder
name|dispatchFilter
decl_stmt|;
DECL|field|debugFilter
name|FilterHolder
name|debugFilter
decl_stmt|;
DECL|field|waitOnSolr
specifier|private
name|boolean
name|waitOnSolr
init|=
literal|false
decl_stmt|;
DECL|field|lastPort
specifier|private
name|int
name|lastPort
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|config
specifier|private
specifier|final
name|JettyConfig
name|config
decl_stmt|;
DECL|field|solrHome
specifier|private
specifier|final
name|String
name|solrHome
decl_stmt|;
DECL|field|nodeProperties
specifier|private
specifier|final
name|Properties
name|nodeProperties
decl_stmt|;
DECL|field|startedBefore
specifier|private
specifier|volatile
name|boolean
name|startedBefore
init|=
literal|false
decl_stmt|;
DECL|field|extraFilters
specifier|private
name|LinkedList
argument_list|<
name|FilterHolder
argument_list|>
name|extraFilters
decl_stmt|;
DECL|field|excludePatterns
specifier|private
specifier|static
specifier|final
name|String
name|excludePatterns
init|=
literal|"/css/.+,/js/.+,/img/.+,/tpl/.+"
decl_stmt|;
DECL|field|proxyPort
specifier|private
name|int
name|proxyPort
init|=
operator|-
literal|1
decl_stmt|;
DECL|class|DebugFilter
specifier|public
specifier|static
class|class
name|DebugFilter
implements|implements
name|Filter
block|{
DECL|field|nRequests
specifier|private
name|AtomicLong
name|nRequests
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|method|getTotalRequests
specifier|public
name|long
name|getTotalRequests
parameter_list|()
block|{
return|return
name|nRequests
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{ }
annotation|@
name|Override
DECL|method|doFilter
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|servletRequest
parameter_list|,
name|ServletResponse
name|servletResponse
parameter_list|,
name|FilterChain
name|filterChain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|nRequests
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|filterChain
operator|.
name|doFilter
argument_list|(
name|servletRequest
argument_list|,
name|servletResponse
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|destroy
specifier|public
name|void
name|destroy
parameter_list|()
block|{ }
block|}
DECL|method|defaultNodeProperties
specifier|private
specifier|static
name|Properties
name|defaultNodeProperties
parameter_list|(
name|String
name|solrconfigFilename
parameter_list|,
name|String
name|schemaFilename
parameter_list|)
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"solrconfig"
argument_list|,
name|solrconfigFilename
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"schema"
argument_list|,
name|schemaFilename
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
comment|/**    * Create a new JettySolrRunner.    *    * After construction, you must start the jetty with {@link #start()}    *    * @param solrHome the solr home directory to use    * @param context the context to run in    * @param port the port to run on    */
DECL|method|JettySolrRunner
specifier|public
name|JettySolrRunner
parameter_list|(
name|String
name|solrHome
parameter_list|,
name|String
name|context
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|this
argument_list|(
name|solrHome
argument_list|,
name|JettyConfig
operator|.
name|builder
argument_list|()
operator|.
name|setContext
argument_list|(
name|context
argument_list|)
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * @deprecated use {@link #JettySolrRunner(String,Properties,JettyConfig)}    */
annotation|@
name|Deprecated
DECL|method|JettySolrRunner
specifier|public
name|JettySolrRunner
parameter_list|(
name|String
name|solrHome
parameter_list|,
name|String
name|context
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|solrConfigFilename
parameter_list|,
name|String
name|schemaFileName
parameter_list|)
block|{
name|this
argument_list|(
name|solrHome
argument_list|,
name|defaultNodeProperties
argument_list|(
name|solrConfigFilename
argument_list|,
name|schemaFileName
argument_list|)
argument_list|,
name|JettyConfig
operator|.
name|builder
argument_list|()
operator|.
name|setContext
argument_list|(
name|context
argument_list|)
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * @deprecated use {@link #JettySolrRunner(String,Properties,JettyConfig)}    */
annotation|@
name|Deprecated
DECL|method|JettySolrRunner
specifier|public
name|JettySolrRunner
parameter_list|(
name|String
name|solrHome
parameter_list|,
name|String
name|context
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|solrConfigFilename
parameter_list|,
name|String
name|schemaFileName
parameter_list|,
name|boolean
name|stopAtShutdown
parameter_list|)
block|{
name|this
argument_list|(
name|solrHome
argument_list|,
name|defaultNodeProperties
argument_list|(
name|solrConfigFilename
argument_list|,
name|schemaFileName
argument_list|)
argument_list|,
name|JettyConfig
operator|.
name|builder
argument_list|()
operator|.
name|setContext
argument_list|(
name|context
argument_list|)
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
operator|.
name|stopAtShutdown
argument_list|(
name|stopAtShutdown
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor taking an ordered list of additional (servlet holder -&gt; path spec) mappings    * to add to the servlet context    * @deprecated use {@link JettySolrRunner#JettySolrRunner(String,Properties,JettyConfig)}    */
annotation|@
name|Deprecated
DECL|method|JettySolrRunner
specifier|public
name|JettySolrRunner
parameter_list|(
name|String
name|solrHome
parameter_list|,
name|String
name|context
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|solrConfigFilename
parameter_list|,
name|String
name|schemaFileName
parameter_list|,
name|boolean
name|stopAtShutdown
parameter_list|,
name|SortedMap
argument_list|<
name|ServletHolder
argument_list|,
name|String
argument_list|>
name|extraServlets
parameter_list|)
block|{
name|this
argument_list|(
name|solrHome
argument_list|,
name|defaultNodeProperties
argument_list|(
name|solrConfigFilename
argument_list|,
name|schemaFileName
argument_list|)
argument_list|,
name|JettyConfig
operator|.
name|builder
argument_list|()
operator|.
name|setContext
argument_list|(
name|context
argument_list|)
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
operator|.
name|stopAtShutdown
argument_list|(
name|stopAtShutdown
argument_list|)
operator|.
name|withServlets
argument_list|(
name|extraServlets
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * @deprecated use {@link #JettySolrRunner(String,Properties,JettyConfig)}    */
annotation|@
name|Deprecated
DECL|method|JettySolrRunner
specifier|public
name|JettySolrRunner
parameter_list|(
name|String
name|solrHome
parameter_list|,
name|String
name|context
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|solrConfigFilename
parameter_list|,
name|String
name|schemaFileName
parameter_list|,
name|boolean
name|stopAtShutdown
parameter_list|,
name|SortedMap
argument_list|<
name|ServletHolder
argument_list|,
name|String
argument_list|>
name|extraServlets
parameter_list|,
name|SSLConfig
name|sslConfig
parameter_list|)
block|{
name|this
argument_list|(
name|solrHome
argument_list|,
name|defaultNodeProperties
argument_list|(
name|solrConfigFilename
argument_list|,
name|schemaFileName
argument_list|)
argument_list|,
name|JettyConfig
operator|.
name|builder
argument_list|()
operator|.
name|setContext
argument_list|(
name|context
argument_list|)
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
operator|.
name|stopAtShutdown
argument_list|(
name|stopAtShutdown
argument_list|)
operator|.
name|withServlets
argument_list|(
name|extraServlets
argument_list|)
operator|.
name|withSSLConfig
argument_list|(
name|sslConfig
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * @deprecated use {@link #JettySolrRunner(String,Properties,JettyConfig)}    */
annotation|@
name|Deprecated
DECL|method|JettySolrRunner
specifier|public
name|JettySolrRunner
parameter_list|(
name|String
name|solrHome
parameter_list|,
name|String
name|context
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|solrConfigFilename
parameter_list|,
name|String
name|schemaFileName
parameter_list|,
name|boolean
name|stopAtShutdown
parameter_list|,
name|SortedMap
argument_list|<
name|ServletHolder
argument_list|,
name|String
argument_list|>
name|extraServlets
parameter_list|,
name|SSLConfig
name|sslConfig
parameter_list|,
name|SortedMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Filter
argument_list|>
argument_list|,
name|String
argument_list|>
name|extraRequestFilters
parameter_list|)
block|{
name|this
argument_list|(
name|solrHome
argument_list|,
name|defaultNodeProperties
argument_list|(
name|solrConfigFilename
argument_list|,
name|schemaFileName
argument_list|)
argument_list|,
name|JettyConfig
operator|.
name|builder
argument_list|()
operator|.
name|setContext
argument_list|(
name|context
argument_list|)
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
operator|.
name|stopAtShutdown
argument_list|(
name|stopAtShutdown
argument_list|)
operator|.
name|withServlets
argument_list|(
name|extraServlets
argument_list|)
operator|.
name|withFilters
argument_list|(
name|extraRequestFilters
argument_list|)
operator|.
name|withSSLConfig
argument_list|(
name|sslConfig
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a JettySolrRunner    *    * After construction, you must start the jetty with {@link #start()}    *    * @param solrHome    the base path to run from    * @param config the configuration    */
DECL|method|JettySolrRunner
specifier|public
name|JettySolrRunner
parameter_list|(
name|String
name|solrHome
parameter_list|,
name|JettyConfig
name|config
parameter_list|)
block|{
name|this
argument_list|(
name|solrHome
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a JettySolrRunner    *    * After construction, you must start the jetty with {@link #start()}    *    * @param solrHome            the solrHome to use    * @param nodeProperties      the container properties    * @param config         the configuration    */
DECL|method|JettySolrRunner
specifier|public
name|JettySolrRunner
parameter_list|(
name|String
name|solrHome
parameter_list|,
name|Properties
name|nodeProperties
parameter_list|,
name|JettyConfig
name|config
parameter_list|)
block|{
name|this
operator|.
name|solrHome
operator|=
name|solrHome
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|nodeProperties
operator|=
name|nodeProperties
expr_stmt|;
name|this
operator|.
name|init
argument_list|(
name|this
operator|.
name|config
operator|.
name|port
argument_list|)
expr_stmt|;
block|}
DECL|method|init
specifier|private
name|void
name|init
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|QueuedThreadPool
name|qtp
init|=
operator|new
name|QueuedThreadPool
argument_list|()
decl_stmt|;
name|qtp
operator|.
name|setMaxThreads
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|qtp
operator|.
name|setIdleTimeout
argument_list|(
operator|(
name|int
operator|)
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|qtp
operator|.
name|setStopTimeout
argument_list|(
operator|(
name|int
operator|)
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|Server
argument_list|(
name|qtp
argument_list|)
expr_stmt|;
name|server
operator|.
name|manage
argument_list|(
name|qtp
argument_list|)
expr_stmt|;
name|server
operator|.
name|setStopAtShutdown
argument_list|(
name|config
operator|.
name|stopAtShutdown
argument_list|)
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"jetty.testMode"
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// if this property is true, then jetty will be configured to use SSL
comment|// leveraging the same system properties as java to specify
comment|// the keystore/truststore if they are set unless specific config
comment|// is passed via the constructor.
comment|//
comment|// This means we will use the same truststore, keystore (and keys) for
comment|// the server as well as any client actions taken by this JVM in
comment|// talking to that server, but for the purposes of testing that should
comment|// be good enough
specifier|final
name|SslContextFactory
name|sslcontext
init|=
name|SSLConfig
operator|.
name|createContextFactory
argument_list|(
name|config
operator|.
name|sslConfig
argument_list|)
decl_stmt|;
name|ServerConnector
name|connector
decl_stmt|;
if|if
condition|(
name|sslcontext
operator|!=
literal|null
condition|)
block|{
name|HttpConfiguration
name|configuration
init|=
operator|new
name|HttpConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setSecureScheme
argument_list|(
literal|"https"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|addCustomizer
argument_list|(
operator|new
name|SecureRequestCustomizer
argument_list|()
argument_list|)
expr_stmt|;
name|connector
operator|=
operator|new
name|ServerConnector
argument_list|(
name|server
argument_list|,
operator|new
name|SslConnectionFactory
argument_list|(
name|sslcontext
argument_list|,
literal|"http/1.1"
argument_list|)
argument_list|,
operator|new
name|HttpConnectionFactory
argument_list|(
name|configuration
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connector
operator|=
operator|new
name|ServerConnector
argument_list|(
name|server
argument_list|,
operator|new
name|HttpConnectionFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|connector
operator|.
name|setReuseAddress
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setSoLingerTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setHost
argument_list|(
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
comment|// Enable Low Resources Management
name|LowResourceMonitor
name|lowResources
init|=
operator|new
name|LowResourceMonitor
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|lowResources
operator|.
name|setLowResourcesIdleTimeout
argument_list|(
literal|1500
argument_list|)
expr_stmt|;
name|lowResources
operator|.
name|setMaxConnections
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|server
operator|.
name|addBean
argument_list|(
name|lowResources
argument_list|)
expr_stmt|;
name|server
operator|.
name|setConnectors
argument_list|(
operator|new
name|Connector
index|[]
block|{
name|connector
block|}
argument_list|)
expr_stmt|;
name|server
operator|.
name|setSessionIdManager
argument_list|(
operator|new
name|HashSessionIdManager
argument_list|(
operator|new
name|Random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ServerConnector
name|connector
init|=
operator|new
name|ServerConnector
argument_list|(
name|server
argument_list|,
operator|new
name|HttpConnectionFactory
argument_list|()
argument_list|)
decl_stmt|;
name|connector
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|server
operator|.
name|setConnectors
argument_list|(
operator|new
name|Connector
index|[]
block|{
name|connector
block|}
argument_list|)
expr_stmt|;
block|}
comment|// Initialize the servlets
specifier|final
name|ServletContextHandler
name|root
init|=
operator|new
name|ServletContextHandler
argument_list|(
name|server
argument_list|,
name|config
operator|.
name|context
argument_list|,
name|ServletContextHandler
operator|.
name|SESSIONS
argument_list|)
decl_stmt|;
name|root
operator|.
name|addFilter
argument_list|(
name|GzipFilter
operator|.
name|class
argument_list|,
literal|"*"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|DispatcherType
operator|.
name|REQUEST
argument_list|)
argument_list|)
expr_stmt|;
name|server
operator|.
name|addLifeCycleListener
argument_list|(
operator|new
name|LifeCycle
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|lifeCycleStopping
parameter_list|(
name|LifeCycle
name|arg0
parameter_list|)
block|{       }
annotation|@
name|Override
specifier|public
name|void
name|lifeCycleStopped
parameter_list|(
name|LifeCycle
name|arg0
parameter_list|)
block|{}
annotation|@
name|Override
specifier|public
name|void
name|lifeCycleStarting
parameter_list|(
name|LifeCycle
name|arg0
parameter_list|)
block|{
synchronized|synchronized
init|(
name|JettySolrRunner
operator|.
name|this
init|)
block|{
name|waitOnSolr
operator|=
literal|true
expr_stmt|;
name|JettySolrRunner
operator|.
name|this
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|lifeCycleStarted
parameter_list|(
name|LifeCycle
name|arg0
parameter_list|)
block|{
name|lastPort
operator|=
name|getFirstConnectorPort
argument_list|()
expr_stmt|;
name|nodeProperties
operator|.
name|setProperty
argument_list|(
literal|"hostPort"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|lastPort
argument_list|)
argument_list|)
expr_stmt|;
name|nodeProperties
operator|.
name|setProperty
argument_list|(
literal|"hostContext"
argument_list|,
name|config
operator|.
name|context
argument_list|)
expr_stmt|;
name|root
operator|.
name|getServletContext
argument_list|()
operator|.
name|setAttribute
argument_list|(
name|SolrDispatchFilter
operator|.
name|PROPERTIES_ATTRIBUTE
argument_list|,
name|nodeProperties
argument_list|)
expr_stmt|;
name|root
operator|.
name|getServletContext
argument_list|()
operator|.
name|setAttribute
argument_list|(
name|SolrDispatchFilter
operator|.
name|SOLRHOME_ATTRIBUTE
argument_list|,
name|solrHome
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Jetty properties: {}"
argument_list|,
name|nodeProperties
argument_list|)
expr_stmt|;
name|debugFilter
operator|=
name|root
operator|.
name|addFilter
argument_list|(
name|DebugFilter
operator|.
name|class
argument_list|,
literal|"*"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|DispatcherType
operator|.
name|REQUEST
argument_list|)
argument_list|)
expr_stmt|;
name|extraFilters
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|Filter
argument_list|>
name|filterClass
range|:
name|config
operator|.
name|extraFilters
operator|.
name|keySet
argument_list|()
control|)
block|{
name|extraFilters
operator|.
name|add
argument_list|(
name|root
operator|.
name|addFilter
argument_list|(
name|filterClass
argument_list|,
name|config
operator|.
name|extraFilters
operator|.
name|get
argument_list|(
name|filterClass
argument_list|)
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|DispatcherType
operator|.
name|REQUEST
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ServletHolder
name|servletHolder
range|:
name|config
operator|.
name|extraServlets
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|pathSpec
init|=
name|config
operator|.
name|extraServlets
operator|.
name|get
argument_list|(
name|servletHolder
argument_list|)
decl_stmt|;
name|root
operator|.
name|addServlet
argument_list|(
name|servletHolder
argument_list|,
name|pathSpec
argument_list|)
expr_stmt|;
block|}
name|dispatchFilter
operator|=
name|root
operator|.
name|getServletHandler
argument_list|()
operator|.
name|newFilterHolder
argument_list|(
name|BaseHolder
operator|.
name|Source
operator|.
name|EMBEDDED
argument_list|)
expr_stmt|;
name|dispatchFilter
operator|.
name|setHeldClass
argument_list|(
name|SolrDispatchFilter
operator|.
name|class
argument_list|)
expr_stmt|;
name|dispatchFilter
operator|.
name|setInitParameter
argument_list|(
literal|"excludePatterns"
argument_list|,
name|excludePatterns
argument_list|)
expr_stmt|;
name|root
operator|.
name|addFilter
argument_list|(
name|dispatchFilter
argument_list|,
literal|"*"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|DispatcherType
operator|.
name|REQUEST
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|lifeCycleFailure
parameter_list|(
name|LifeCycle
name|arg0
parameter_list|,
name|Throwable
name|arg1
parameter_list|)
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"hostPort"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// for some reason, there must be a servlet for this to get applied
name|root
operator|.
name|addServlet
argument_list|(
name|Servlet404
operator|.
name|class
argument_list|,
literal|"/*"
argument_list|)
expr_stmt|;
block|}
DECL|method|getDispatchFilter
specifier|public
name|FilterHolder
name|getDispatchFilter
parameter_list|()
block|{
return|return
name|dispatchFilter
return|;
block|}
DECL|method|isRunning
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|server
operator|.
name|isRunning
argument_list|()
return|;
block|}
DECL|method|isStopped
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|server
operator|.
name|isStopped
argument_list|()
return|;
block|}
comment|// ------------------------------------------------------------------------------------------------
comment|// ------------------------------------------------------------------------------------------------
comment|/**    * Start the Jetty server    *    * @throws Exception if an error occurs on startup    */
DECL|method|start
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Do not let Jetty/Solr pollute the MDC for this thread
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|prevContext
init|=
name|MDC
operator|.
name|getCopyOfContextMap
argument_list|()
decl_stmt|;
name|MDC
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
comment|// if started before, make a new server
if|if
condition|(
name|startedBefore
condition|)
block|{
name|waitOnSolr
operator|=
literal|false
expr_stmt|;
name|init
argument_list|(
name|lastPort
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|startedBefore
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|server
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|JettySolrRunner
operator|.
name|this
init|)
block|{
name|int
name|cnt
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|waitOnSolr
condition|)
block|{
name|this
operator|.
name|wait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
name|cnt
operator|++
operator|==
literal|5
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Jetty/Solr unresponsive"
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|config
operator|.
name|waitForLoadingCoresToFinishMs
operator|!=
literal|null
operator|&&
name|config
operator|.
name|waitForLoadingCoresToFinishMs
operator|>
literal|0L
condition|)
name|waitForLoadingCoresToFinish
argument_list|(
name|config
operator|.
name|waitForLoadingCoresToFinishMs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|prevContext
operator|!=
literal|null
condition|)
block|{
name|MDC
operator|.
name|setContextMap
argument_list|(
name|prevContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MDC
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Stop the Jetty server    *    * @throws Exception if an error occurs on shutdown    */
DECL|method|stop
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Do not let Jetty/Solr pollute the MDC for this thread
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|prevContext
init|=
name|MDC
operator|.
name|getCopyOfContextMap
argument_list|()
decl_stmt|;
name|MDC
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|Filter
name|filter
init|=
name|dispatchFilter
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|server
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|Server
operator|.
name|FAILED
argument_list|)
condition|)
block|{
name|filter
operator|.
name|destroy
argument_list|()
expr_stmt|;
if|if
condition|(
name|extraFilters
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FilterHolder
name|f
range|:
name|extraFilters
control|)
block|{
name|f
operator|.
name|getFilter
argument_list|()
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|server
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|prevContext
operator|!=
literal|null
condition|)
block|{
name|MDC
operator|.
name|setContextMap
argument_list|(
name|prevContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MDC
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Returns the Local Port of the jetty Server.    *     * @exception RuntimeException if there is no Connector    */
DECL|method|getFirstConnectorPort
specifier|private
name|int
name|getFirstConnectorPort
parameter_list|()
block|{
name|Connector
index|[]
name|conns
init|=
name|server
operator|.
name|getConnectors
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|conns
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Jetty Server has no Connectors"
argument_list|)
throw|;
block|}
return|return
operator|(
name|proxyPort
operator|!=
operator|-
literal|1
operator|)
condition|?
name|proxyPort
else|:
operator|(
operator|(
name|ServerConnector
operator|)
name|conns
index|[
literal|0
index|]
operator|)
operator|.
name|getLocalPort
argument_list|()
return|;
block|}
comment|/**    * Returns the Local Port of the jetty Server.    *     * @exception RuntimeException if there is no Connector    */
DECL|method|getLocalPort
specifier|public
name|int
name|getLocalPort
parameter_list|()
block|{
if|if
condition|(
name|lastPort
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"You cannot get the port until this instance has started"
argument_list|)
throw|;
block|}
return|return
operator|(
name|proxyPort
operator|!=
operator|-
literal|1
operator|)
condition|?
name|proxyPort
else|:
name|lastPort
return|;
block|}
comment|/**    * Sets the port of a local socket proxy that sits infront of this server; if set    * then all client traffic will flow through the proxy, giving us the ability to    * simulate network partitions very easily.    */
DECL|method|setProxyPort
specifier|public
name|void
name|setProxyPort
parameter_list|(
name|int
name|proxyPort
parameter_list|)
block|{
name|this
operator|.
name|proxyPort
operator|=
name|proxyPort
expr_stmt|;
block|}
comment|/**    * Returns a base URL consisting of the protocol, host, and port for a    * Connector in use by the Jetty Server contained in this runner.    */
DECL|method|getBaseUrl
specifier|public
name|URL
name|getBaseUrl
parameter_list|()
block|{
name|String
name|protocol
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Connector
index|[]
name|conns
init|=
name|server
operator|.
name|getConnectors
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|conns
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Jetty Server has no Connectors"
argument_list|)
throw|;
block|}
name|ServerConnector
name|c
init|=
operator|(
name|ServerConnector
operator|)
name|conns
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getLocalPort
argument_list|()
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Jetty Connector is not open: "
operator|+
name|c
operator|.
name|getLocalPort
argument_list|()
argument_list|)
throw|;
block|}
name|protocol
operator|=
name|c
operator|.
name|getDefaultProtocol
argument_list|()
operator|.
name|equals
argument_list|(
literal|"SSL-http/1.1"
argument_list|)
condition|?
literal|"https"
else|:
literal|"http"
expr_stmt|;
return|return
operator|new
name|URL
argument_list|(
name|protocol
argument_list|,
name|c
operator|.
name|getHost
argument_list|()
argument_list|,
name|c
operator|.
name|getLocalPort
argument_list|()
argument_list|,
name|config
operator|.
name|context
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Java could not make sense of protocol: "
operator|+
name|protocol
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getDebugFilter
specifier|public
name|DebugFilter
name|getDebugFilter
parameter_list|()
block|{
return|return
operator|(
name|DebugFilter
operator|)
name|debugFilter
operator|.
name|getFilter
argument_list|()
return|;
block|}
comment|// --------------------------------------------------------------
comment|// --------------------------------------------------------------
comment|/**    * This is a stupid hack to give jetty something to attach to    */
DECL|class|Servlet404
specifier|public
specifier|static
class|class
name|Servlet404
extends|extends
name|HttpServlet
block|{
annotation|@
name|Override
DECL|method|service
specifier|public
name|void
name|service
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|IOException
block|{
name|res
operator|.
name|sendError
argument_list|(
literal|404
argument_list|,
literal|"Can not find: "
operator|+
name|req
operator|.
name|getRequestURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A main class that starts jetty+solr This is useful for debugging    */
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|JettySolrRunner
name|jetty
init|=
operator|new
name|JettySolrRunner
argument_list|(
literal|"."
argument_list|,
literal|"/solr"
argument_list|,
literal|8983
argument_list|)
decl_stmt|;
name|jetty
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @deprecated set properties in the Properties passed to the constructor    */
annotation|@
name|Deprecated
DECL|method|setShards
specifier|public
name|void
name|setShards
parameter_list|(
name|String
name|shardList
parameter_list|)
block|{
name|nodeProperties
operator|.
name|setProperty
argument_list|(
literal|"shard"
argument_list|,
name|shardList
argument_list|)
expr_stmt|;
block|}
comment|/**    * @deprecated set properties in the Properties passed to the constructor    */
annotation|@
name|Deprecated
DECL|method|setDataDir
specifier|public
name|void
name|setDataDir
parameter_list|(
name|String
name|dataDir
parameter_list|)
block|{
name|nodeProperties
operator|.
name|setProperty
argument_list|(
literal|"solr.data.dir"
argument_list|,
name|dataDir
argument_list|)
expr_stmt|;
block|}
comment|/**    * @deprecated set properties in the Properties passed to the constructor    */
annotation|@
name|Deprecated
DECL|method|setUlogDir
specifier|public
name|void
name|setUlogDir
parameter_list|(
name|String
name|ulogDir
parameter_list|)
block|{
name|nodeProperties
operator|.
name|setProperty
argument_list|(
literal|"solr.ulog.dir"
argument_list|,
name|ulogDir
argument_list|)
expr_stmt|;
block|}
comment|/**    * @deprecated set properties in the Properties passed to the constructor    */
annotation|@
name|Deprecated
DECL|method|setCoreNodeName
specifier|public
name|void
name|setCoreNodeName
parameter_list|(
name|String
name|coreNodeName
parameter_list|)
block|{
name|nodeProperties
operator|.
name|setProperty
argument_list|(
literal|"coreNodeName"
argument_list|,
name|coreNodeName
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return the Solr home directory of this JettySolrRunner    */
DECL|method|getSolrHome
specifier|public
name|String
name|getSolrHome
parameter_list|()
block|{
return|return
name|solrHome
return|;
block|}
DECL|method|waitForLoadingCoresToFinish
specifier|private
name|void
name|waitForLoadingCoresToFinish
parameter_list|(
name|long
name|timeoutMs
parameter_list|)
block|{
if|if
condition|(
name|dispatchFilter
operator|!=
literal|null
condition|)
block|{
name|SolrDispatchFilter
name|solrFilter
init|=
operator|(
name|SolrDispatchFilter
operator|)
name|dispatchFilter
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|CoreContainer
name|cores
init|=
name|solrFilter
operator|.
name|getCores
argument_list|()
decl_stmt|;
if|if
condition|(
name|cores
operator|!=
literal|null
condition|)
block|{
name|cores
operator|.
name|waitForLoadingCoresToFinish
argument_list|(
name|timeoutMs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
