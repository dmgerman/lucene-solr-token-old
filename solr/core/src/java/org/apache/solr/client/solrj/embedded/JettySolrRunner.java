begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.embedded
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|DispatcherType
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|SolrDispatchFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Connector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|bio
operator|.
name|SocketConnector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|GzipHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|nio
operator|.
name|SelectChannelConnector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|session
operator|.
name|HashSessionIdManager
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ssl
operator|.
name|SslConnector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ssl
operator|.
name|SslSelectChannelConnector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ssl
operator|.
name|SslSocketConnector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|FilterHolder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletContextHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|component
operator|.
name|LifeCycle
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|log
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ssl
operator|.
name|SslContextFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|thread
operator|.
name|QueuedThreadPool
import|;
end_import
begin_comment
comment|/**  * Run solr using jetty  *   * @since solr 1.3  */
end_comment
begin_class
DECL|class|JettySolrRunner
specifier|public
class|class
name|JettySolrRunner
block|{
DECL|field|server
name|Server
name|server
decl_stmt|;
DECL|field|dispatchFilter
name|FilterHolder
name|dispatchFilter
decl_stmt|;
DECL|field|debugFilter
name|FilterHolder
name|debugFilter
decl_stmt|;
DECL|field|context
name|String
name|context
decl_stmt|;
DECL|field|solrConfigFilename
specifier|private
name|String
name|solrConfigFilename
decl_stmt|;
DECL|field|schemaFilename
specifier|private
name|String
name|schemaFilename
decl_stmt|;
DECL|field|waitOnSolr
specifier|private
name|boolean
name|waitOnSolr
init|=
literal|false
decl_stmt|;
DECL|field|lastPort
specifier|private
name|int
name|lastPort
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|shards
specifier|private
name|String
name|shards
decl_stmt|;
DECL|field|dataDir
specifier|private
name|String
name|dataDir
decl_stmt|;
DECL|field|solrUlogDir
specifier|private
name|String
name|solrUlogDir
decl_stmt|;
DECL|field|startedBefore
specifier|private
specifier|volatile
name|boolean
name|startedBefore
init|=
literal|false
decl_stmt|;
DECL|field|solrHome
specifier|private
name|String
name|solrHome
decl_stmt|;
DECL|field|stopAtShutdown
specifier|private
name|boolean
name|stopAtShutdown
decl_stmt|;
DECL|field|coreNodeName
specifier|private
name|String
name|coreNodeName
decl_stmt|;
comment|/** Maps servlet holders (i.e. factories: class + init params) to path specs */
DECL|field|extraServlets
specifier|private
name|SortedMap
argument_list|<
name|ServletHolder
argument_list|,
name|String
argument_list|>
name|extraServlets
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|extraRequestFilters
specifier|private
name|SortedMap
argument_list|<
name|Class
argument_list|,
name|String
argument_list|>
name|extraRequestFilters
decl_stmt|;
DECL|field|extraFilters
specifier|private
name|LinkedList
argument_list|<
name|FilterHolder
argument_list|>
name|extraFilters
decl_stmt|;
DECL|field|sslConfig
specifier|private
name|SSLConfig
name|sslConfig
decl_stmt|;
DECL|field|proxyPort
specifier|private
name|int
name|proxyPort
init|=
operator|-
literal|1
decl_stmt|;
DECL|class|DebugFilter
specifier|public
specifier|static
class|class
name|DebugFilter
implements|implements
name|Filter
block|{
DECL|field|requestsToKeep
specifier|public
name|int
name|requestsToKeep
init|=
literal|10
decl_stmt|;
DECL|field|nRequests
specifier|private
name|AtomicLong
name|nRequests
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|method|getTotalRequests
specifier|public
name|long
name|getTotalRequests
parameter_list|()
block|{
return|return
name|nRequests
operator|.
name|get
argument_list|()
return|;
block|}
comment|// TODO: keep track of certain number of last requests
DECL|field|requests
specifier|private
name|LinkedList
argument_list|<
name|HttpServletRequest
argument_list|>
name|requests
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{     }
annotation|@
name|Override
DECL|method|doFilter
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|servletRequest
parameter_list|,
name|ServletResponse
name|servletResponse
parameter_list|,
name|FilterChain
name|filterChain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|nRequests
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
comment|/***       HttpServletRequest req = (HttpServletRequest)servletRequest;       HttpServletResponse resp = (HttpServletResponse)servletResponse;        String path = req.getServletPath();       if( req.getPathInfo() != null ) {         // this lets you handle /update/commit when /update is a servlet         path += req.getPathInfo();       }       System.out.println("###################### FILTER request " + servletRequest);       System.out.println("\t\tgetServletPath="+req.getServletPath());       System.out.println("\t\tgetPathInfo="+req.getPathInfo());       ***/
name|filterChain
operator|.
name|doFilter
argument_list|(
name|servletRequest
argument_list|,
name|servletResponse
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|destroy
specifier|public
name|void
name|destroy
parameter_list|()
block|{     }
block|}
DECL|method|JettySolrRunner
specifier|public
name|JettySolrRunner
parameter_list|(
name|String
name|solrHome
parameter_list|,
name|String
name|context
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|init
argument_list|(
name|solrHome
argument_list|,
name|context
argument_list|,
name|port
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|JettySolrRunner
specifier|public
name|JettySolrRunner
parameter_list|(
name|String
name|solrHome
parameter_list|,
name|String
name|context
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|solrConfigFilename
parameter_list|,
name|String
name|schemaFileName
parameter_list|)
block|{
name|this
operator|.
name|init
argument_list|(
name|solrHome
argument_list|,
name|context
argument_list|,
name|port
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|solrConfigFilename
operator|=
name|solrConfigFilename
expr_stmt|;
name|this
operator|.
name|schemaFilename
operator|=
name|schemaFileName
expr_stmt|;
block|}
DECL|method|JettySolrRunner
specifier|public
name|JettySolrRunner
parameter_list|(
name|String
name|solrHome
parameter_list|,
name|String
name|context
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|solrConfigFilename
parameter_list|,
name|String
name|schemaFileName
parameter_list|,
name|boolean
name|stopAtShutdown
parameter_list|)
block|{
name|this
operator|.
name|init
argument_list|(
name|solrHome
argument_list|,
name|context
argument_list|,
name|port
argument_list|,
name|stopAtShutdown
argument_list|)
expr_stmt|;
name|this
operator|.
name|solrConfigFilename
operator|=
name|solrConfigFilename
expr_stmt|;
name|this
operator|.
name|schemaFilename
operator|=
name|schemaFileName
expr_stmt|;
block|}
comment|/**    * Constructor taking an ordered list of additional (servlet holder -> path spec) mappings    * to add to the servlet context    */
DECL|method|JettySolrRunner
specifier|public
name|JettySolrRunner
parameter_list|(
name|String
name|solrHome
parameter_list|,
name|String
name|context
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|solrConfigFilename
parameter_list|,
name|String
name|schemaFileName
parameter_list|,
name|boolean
name|stopAtShutdown
parameter_list|,
name|SortedMap
argument_list|<
name|ServletHolder
argument_list|,
name|String
argument_list|>
name|extraServlets
parameter_list|)
block|{
name|this
argument_list|(
name|solrHome
argument_list|,
name|context
argument_list|,
name|port
argument_list|,
name|solrConfigFilename
argument_list|,
name|schemaFileName
argument_list|,
name|stopAtShutdown
argument_list|,
name|extraServlets
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|JettySolrRunner
specifier|public
name|JettySolrRunner
parameter_list|(
name|String
name|solrHome
parameter_list|,
name|String
name|context
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|solrConfigFilename
parameter_list|,
name|String
name|schemaFileName
parameter_list|,
name|boolean
name|stopAtShutdown
parameter_list|,
name|SortedMap
argument_list|<
name|ServletHolder
argument_list|,
name|String
argument_list|>
name|extraServlets
parameter_list|,
name|SSLConfig
name|sslConfig
parameter_list|)
block|{
name|this
argument_list|(
name|solrHome
argument_list|,
name|context
argument_list|,
name|port
argument_list|,
name|solrConfigFilename
argument_list|,
name|schemaFileName
argument_list|,
name|stopAtShutdown
argument_list|,
name|extraServlets
argument_list|,
name|sslConfig
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor taking an ordered list of additional (filter holder -> path spec) mappings.    * Filters are placed after the DebugFilter but before the SolrDispatchFilter.    */
DECL|method|JettySolrRunner
specifier|public
name|JettySolrRunner
parameter_list|(
name|String
name|solrHome
parameter_list|,
name|String
name|context
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|solrConfigFilename
parameter_list|,
name|String
name|schemaFileName
parameter_list|,
name|boolean
name|stopAtShutdown
parameter_list|,
name|SortedMap
argument_list|<
name|ServletHolder
argument_list|,
name|String
argument_list|>
name|extraServlets
parameter_list|,
name|SSLConfig
name|sslConfig
parameter_list|,
name|SortedMap
argument_list|<
name|Class
argument_list|,
name|String
argument_list|>
name|extraRequestFilters
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|extraServlets
condition|)
block|{
name|this
operator|.
name|extraServlets
operator|.
name|putAll
argument_list|(
name|extraServlets
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|extraRequestFilters
condition|)
block|{
name|this
operator|.
name|extraRequestFilters
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|extraRequestFilters
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|extraRequestFilters
operator|.
name|putAll
argument_list|(
name|extraRequestFilters
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|solrConfigFilename
operator|=
name|solrConfigFilename
expr_stmt|;
name|this
operator|.
name|schemaFilename
operator|=
name|schemaFileName
expr_stmt|;
name|this
operator|.
name|sslConfig
operator|=
name|sslConfig
expr_stmt|;
name|this
operator|.
name|init
argument_list|(
name|solrHome
argument_list|,
name|context
argument_list|,
name|port
argument_list|,
name|stopAtShutdown
argument_list|)
expr_stmt|;
block|}
DECL|method|init
specifier|private
name|void
name|init
parameter_list|(
name|String
name|solrHome
parameter_list|,
name|String
name|context
parameter_list|,
name|int
name|port
parameter_list|,
name|boolean
name|stopAtShutdown
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|server
operator|=
operator|new
name|Server
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|this
operator|.
name|solrHome
operator|=
name|solrHome
expr_stmt|;
name|this
operator|.
name|stopAtShutdown
operator|=
name|stopAtShutdown
expr_stmt|;
name|server
operator|.
name|setStopAtShutdown
argument_list|(
name|stopAtShutdown
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|stopAtShutdown
condition|)
block|{
name|server
operator|.
name|setGracefulShutdown
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.solr.home"
argument_list|,
name|solrHome
argument_list|)
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"jetty.testMode"
argument_list|)
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|connectorName
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"tests.jettyConnector"
argument_list|,
literal|"SelectChannel"
argument_list|)
decl_stmt|;
comment|// if this property is true, then jetty will be configured to use SSL
comment|// leveraging the same system properties as java to specify
comment|// the keystore/truststore if they are set unless specific config
comment|// is passed via the constructor.
comment|//
comment|// This means we will use the same truststore, keystore (and keys) for
comment|// the server as well as any client actions taken by this JVM in
comment|// talking to that server, but for the purposes of testing that should
comment|// be good enough
specifier|final
name|boolean
name|useSsl
init|=
name|sslConfig
operator|==
literal|null
condition|?
literal|false
else|:
name|sslConfig
operator|.
name|isSSLMode
argument_list|()
decl_stmt|;
specifier|final
name|SslContextFactory
name|sslcontext
init|=
operator|new
name|SslContextFactory
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|sslInit
argument_list|(
name|useSsl
argument_list|,
name|sslcontext
argument_list|)
expr_stmt|;
specifier|final
name|Connector
name|connector
decl_stmt|;
specifier|final
name|QueuedThreadPool
name|threadPool
decl_stmt|;
if|if
condition|(
literal|"SelectChannel"
operator|.
name|equals
argument_list|(
name|connectorName
argument_list|)
condition|)
block|{
specifier|final
name|SelectChannelConnector
name|c
init|=
name|useSsl
condition|?
operator|new
name|SslSelectChannelConnector
argument_list|(
name|sslcontext
argument_list|)
else|:
operator|new
name|SelectChannelConnector
argument_list|()
decl_stmt|;
name|c
operator|.
name|setReuseAddress
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|c
operator|.
name|setLowResourcesMaxIdleTime
argument_list|(
literal|1500
argument_list|)
expr_stmt|;
name|c
operator|.
name|setSoLingerTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|connector
operator|=
name|c
expr_stmt|;
name|threadPool
operator|=
operator|(
name|QueuedThreadPool
operator|)
name|c
operator|.
name|getThreadPool
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"Socket"
operator|.
name|equals
argument_list|(
name|connectorName
argument_list|)
condition|)
block|{
specifier|final
name|SocketConnector
name|c
init|=
name|useSsl
condition|?
operator|new
name|SslSocketConnector
argument_list|(
name|sslcontext
argument_list|)
else|:
operator|new
name|SocketConnector
argument_list|()
decl_stmt|;
name|c
operator|.
name|setReuseAddress
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|c
operator|.
name|setSoLingerTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|connector
operator|=
name|c
expr_stmt|;
name|threadPool
operator|=
operator|(
name|QueuedThreadPool
operator|)
name|c
operator|.
name|getThreadPool
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal value for system property 'tests.jettyConnector': "
operator|+
name|connectorName
argument_list|)
throw|;
block|}
name|connector
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setHost
argument_list|(
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
if|if
condition|(
name|threadPool
operator|!=
literal|null
condition|)
block|{
name|threadPool
operator|.
name|setMaxThreads
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|setMaxIdleTimeMs
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|setMaxStopTimeMs
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|setConnectors
argument_list|(
operator|new
name|Connector
index|[]
block|{
name|connector
block|}
argument_list|)
expr_stmt|;
name|server
operator|.
name|setSessionIdManager
argument_list|(
operator|new
name|HashSessionIdManager
argument_list|(
operator|new
name|Random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Connector
name|connector
range|:
name|server
operator|.
name|getConnectors
argument_list|()
control|)
block|{
name|QueuedThreadPool
name|threadPool
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|connector
operator|instanceof
name|SocketConnector
condition|)
block|{
name|threadPool
operator|=
call|(
name|QueuedThreadPool
call|)
argument_list|(
operator|(
name|SocketConnector
operator|)
name|connector
argument_list|)
operator|.
name|getThreadPool
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|connector
operator|instanceof
name|SelectChannelConnector
condition|)
block|{
name|threadPool
operator|=
call|(
name|QueuedThreadPool
call|)
argument_list|(
operator|(
name|SelectChannelConnector
operator|)
name|connector
argument_list|)
operator|.
name|getThreadPool
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|threadPool
operator|!=
literal|null
condition|)
block|{
name|threadPool
operator|.
name|setMaxThreads
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|setMaxIdleTimeMs
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|stopAtShutdown
condition|)
block|{
name|threadPool
operator|.
name|setMaxStopTimeMs
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Initialize the servlets
specifier|final
name|ServletContextHandler
name|root
init|=
operator|new
name|ServletContextHandler
argument_list|(
name|server
argument_list|,
name|context
argument_list|,
name|ServletContextHandler
operator|.
name|SESSIONS
argument_list|)
decl_stmt|;
name|root
operator|.
name|setHandler
argument_list|(
operator|new
name|GzipHandler
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|addLifeCycleListener
argument_list|(
operator|new
name|LifeCycle
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|lifeCycleStopping
parameter_list|(
name|LifeCycle
name|arg0
parameter_list|)
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"hostPort"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|lifeCycleStopped
parameter_list|(
name|LifeCycle
name|arg0
parameter_list|)
block|{}
annotation|@
name|Override
specifier|public
name|void
name|lifeCycleStarting
parameter_list|(
name|LifeCycle
name|arg0
parameter_list|)
block|{
synchronized|synchronized
init|(
name|JettySolrRunner
operator|.
name|this
init|)
block|{
name|waitOnSolr
operator|=
literal|true
expr_stmt|;
name|JettySolrRunner
operator|.
name|this
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|lifeCycleStarted
parameter_list|(
name|LifeCycle
name|arg0
parameter_list|)
block|{
name|lastPort
operator|=
name|getFirstConnectorPort
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"hostPort"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|lastPort
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|solrConfigFilename
operator|!=
literal|null
condition|)
name|System
operator|.
name|setProperty
argument_list|(
literal|"solrconfig"
argument_list|,
name|solrConfigFilename
argument_list|)
expr_stmt|;
if|if
condition|(
name|schemaFilename
operator|!=
literal|null
condition|)
name|System
operator|.
name|setProperty
argument_list|(
literal|"schema"
argument_list|,
name|schemaFilename
argument_list|)
expr_stmt|;
comment|//        SolrDispatchFilter filter = new SolrDispatchFilter();
comment|//        FilterHolder fh = new FilterHolder(filter);
name|debugFilter
operator|=
name|root
operator|.
name|addFilter
argument_list|(
name|DebugFilter
operator|.
name|class
argument_list|,
literal|"*"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|DispatcherType
operator|.
name|REQUEST
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|extraRequestFilters
operator|!=
literal|null
condition|)
block|{
name|extraFilters
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Class
name|filterClass
range|:
name|extraRequestFilters
operator|.
name|keySet
argument_list|()
control|)
block|{
name|extraFilters
operator|.
name|add
argument_list|(
name|root
operator|.
name|addFilter
argument_list|(
name|filterClass
argument_list|,
name|extraRequestFilters
operator|.
name|get
argument_list|(
name|filterClass
argument_list|)
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|DispatcherType
operator|.
name|REQUEST
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|dispatchFilter
operator|=
name|root
operator|.
name|addFilter
argument_list|(
name|SolrDispatchFilter
operator|.
name|class
argument_list|,
literal|"*"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|DispatcherType
operator|.
name|REQUEST
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ServletHolder
name|servletHolder
range|:
name|extraServlets
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|pathSpec
init|=
name|extraServlets
operator|.
name|get
argument_list|(
name|servletHolder
argument_list|)
decl_stmt|;
name|root
operator|.
name|addServlet
argument_list|(
name|servletHolder
argument_list|,
name|pathSpec
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|solrConfigFilename
operator|!=
literal|null
condition|)
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solrconfig"
argument_list|)
expr_stmt|;
if|if
condition|(
name|schemaFilename
operator|!=
literal|null
condition|)
name|System
operator|.
name|clearProperty
argument_list|(
literal|"schema"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.solr.home"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|lifeCycleFailure
parameter_list|(
name|LifeCycle
name|arg0
parameter_list|,
name|Throwable
name|arg1
parameter_list|)
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"hostPort"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// for some reason, there must be a servlet for this to get applied
name|root
operator|.
name|addServlet
argument_list|(
name|Servlet404
operator|.
name|class
argument_list|,
literal|"/*"
argument_list|)
expr_stmt|;
block|}
DECL|method|sslInit
specifier|private
name|void
name|sslInit
parameter_list|(
specifier|final
name|boolean
name|useSsl
parameter_list|,
specifier|final
name|SslContextFactory
name|sslcontext
parameter_list|)
block|{
if|if
condition|(
name|useSsl
operator|&&
name|sslConfig
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|null
operator|!=
name|sslConfig
operator|.
name|getKeyStore
argument_list|()
condition|)
block|{
name|sslcontext
operator|.
name|setKeyStorePath
argument_list|(
name|sslConfig
operator|.
name|getKeyStore
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|sslConfig
operator|.
name|getKeyStorePassword
argument_list|()
condition|)
block|{
name|sslcontext
operator|.
name|setKeyStorePassword
argument_list|(
name|sslConfig
operator|.
name|getKeyStorePassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|sslConfig
operator|.
name|getTrustStore
argument_list|()
condition|)
block|{
name|sslcontext
operator|.
name|setTrustStore
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|sslConfig
operator|.
name|getTrustStore
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|sslConfig
operator|.
name|getTrustStorePassword
argument_list|()
condition|)
block|{
name|sslcontext
operator|.
name|setTrustStorePassword
argument_list|(
name|sslConfig
operator|.
name|getTrustStorePassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sslcontext
operator|.
name|setNeedClientAuth
argument_list|(
name|sslConfig
operator|.
name|isClientAuthMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|jettySsl
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"tests.jettySsl"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|jettySsl
condition|)
block|{
if|if
condition|(
literal|null
operator|!=
name|System
operator|.
name|getProperty
argument_list|(
literal|"javax.net.ssl.keyStore"
argument_list|)
condition|)
block|{
name|sslcontext
operator|.
name|setKeyStorePath
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"javax.net.ssl.keyStore"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|System
operator|.
name|getProperty
argument_list|(
literal|"javax.net.ssl.keyStorePassword"
argument_list|)
condition|)
block|{
name|sslcontext
operator|.
name|setKeyStorePassword
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"javax.net.ssl.keyStorePassword"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|System
operator|.
name|getProperty
argument_list|(
literal|"javax.net.ssl.trustStore"
argument_list|)
condition|)
block|{
name|sslcontext
operator|.
name|setTrustStore
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"javax.net.ssl.trustStore"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|System
operator|.
name|getProperty
argument_list|(
literal|"javax.net.ssl.trustStorePassword"
argument_list|)
condition|)
block|{
name|sslcontext
operator|.
name|setTrustStorePassword
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"javax.net.ssl.trustStorePassword"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sslcontext
operator|.
name|setNeedClientAuth
argument_list|(
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"tests.jettySsl.clientAuth"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getDispatchFilter
specifier|public
name|FilterHolder
name|getDispatchFilter
parameter_list|()
block|{
return|return
name|dispatchFilter
return|;
block|}
DECL|method|isRunning
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|server
operator|.
name|isRunning
argument_list|()
return|;
block|}
DECL|method|isStopped
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|server
operator|.
name|isStopped
argument_list|()
return|;
block|}
comment|// ------------------------------------------------------------------------------------------------
comment|// ------------------------------------------------------------------------------------------------
DECL|method|start
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|start
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|start
specifier|public
name|void
name|start
parameter_list|(
name|boolean
name|waitForSolr
parameter_list|)
throws|throws
name|Exception
block|{
comment|// if started before, make a new server
if|if
condition|(
name|startedBefore
condition|)
block|{
name|waitOnSolr
operator|=
literal|false
expr_stmt|;
name|init
argument_list|(
name|solrHome
argument_list|,
name|context
argument_list|,
name|lastPort
argument_list|,
name|stopAtShutdown
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|startedBefore
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|dataDir
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.data.dir"
argument_list|,
name|dataDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|solrUlogDir
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.ulog.dir"
argument_list|,
name|solrUlogDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shards
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"shard"
argument_list|,
name|shards
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|coreNodeName
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"coreNodeName"
argument_list|,
name|coreNodeName
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
operator|!
name|server
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|JettySolrRunner
operator|.
name|this
init|)
block|{
name|int
name|cnt
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|waitOnSolr
condition|)
block|{
name|this
operator|.
name|wait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
name|cnt
operator|++
operator|==
literal|5
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Jetty/Solr unresponsive"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"shard"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.data.dir"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"coreNodeName"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.ulog.dir"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|stop
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|Filter
name|filter
init|=
name|dispatchFilter
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|//server.destroy();
if|if
condition|(
name|server
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|Server
operator|.
name|FAILED
argument_list|)
condition|)
block|{
name|filter
operator|.
name|destroy
argument_list|()
expr_stmt|;
if|if
condition|(
name|extraFilters
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FilterHolder
name|f
range|:
name|extraFilters
control|)
block|{
name|f
operator|.
name|getFilter
argument_list|()
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|server
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns the Local Port of the jetty Server.    *     * @exception RuntimeException if there is no Connector    */
DECL|method|getFirstConnectorPort
specifier|private
name|int
name|getFirstConnectorPort
parameter_list|()
block|{
name|Connector
index|[]
name|conns
init|=
name|server
operator|.
name|getConnectors
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|conns
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Jetty Server has no Connectors"
argument_list|)
throw|;
block|}
return|return
operator|(
name|proxyPort
operator|!=
operator|-
literal|1
operator|)
condition|?
name|proxyPort
else|:
name|conns
index|[
literal|0
index|]
operator|.
name|getLocalPort
argument_list|()
return|;
block|}
comment|/**    * Returns the Local Port of the jetty Server.    *     * @exception RuntimeException if there is no Connector    */
DECL|method|getLocalPort
specifier|public
name|int
name|getLocalPort
parameter_list|()
block|{
if|if
condition|(
name|lastPort
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"You cannot get the port until this instance has started"
argument_list|)
throw|;
block|}
return|return
operator|(
name|proxyPort
operator|!=
operator|-
literal|1
operator|)
condition|?
name|proxyPort
else|:
name|lastPort
return|;
block|}
comment|/**    * Sets the port of a local socket proxy that sits infront of this server; if set    * then all client traffic will flow through the proxy, giving us the ability to    * simulate network partitions very easily.    */
DECL|method|setProxyPort
specifier|public
name|void
name|setProxyPort
parameter_list|(
name|int
name|proxyPort
parameter_list|)
block|{
name|this
operator|.
name|proxyPort
operator|=
name|proxyPort
expr_stmt|;
block|}
comment|/**    * Returns a base URL consisting of the protocal, host, and port for a     * Connector in use by the Jetty Server contained in this runner.    */
DECL|method|getBaseUrl
specifier|public
name|URL
name|getBaseUrl
parameter_list|()
block|{
name|String
name|protocol
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Connector
index|[]
name|conns
init|=
name|server
operator|.
name|getConnectors
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|conns
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Jetty Server has no Connectors"
argument_list|)
throw|;
block|}
name|Connector
name|c
init|=
name|conns
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getLocalPort
argument_list|()
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Jetty Connector is not open: "
operator|+
name|c
operator|.
name|getLocalPort
argument_list|()
argument_list|)
throw|;
block|}
name|protocol
operator|=
operator|(
name|c
operator|instanceof
name|SslConnector
operator|)
condition|?
literal|"https"
else|:
literal|"http"
expr_stmt|;
return|return
operator|new
name|URL
argument_list|(
name|protocol
argument_list|,
name|c
operator|.
name|getHost
argument_list|()
argument_list|,
name|c
operator|.
name|getLocalPort
argument_list|()
argument_list|,
name|context
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Java could not make sense of protocol: "
operator|+
name|protocol
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getDebugFilter
specifier|public
name|DebugFilter
name|getDebugFilter
parameter_list|()
block|{
return|return
operator|(
name|DebugFilter
operator|)
name|debugFilter
operator|.
name|getFilter
argument_list|()
return|;
block|}
comment|// --------------------------------------------------------------
comment|// --------------------------------------------------------------
comment|/**    * This is a stupid hack to give jetty something to attach to    */
DECL|class|Servlet404
specifier|public
specifier|static
class|class
name|Servlet404
extends|extends
name|HttpServlet
block|{
annotation|@
name|Override
DECL|method|service
specifier|public
name|void
name|service
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|IOException
block|{
name|res
operator|.
name|sendError
argument_list|(
literal|404
argument_list|,
literal|"Can not find: "
operator|+
name|req
operator|.
name|getRequestURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A main class that starts jetty+solr This is useful for debugging    */
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|JettySolrRunner
name|jetty
init|=
operator|new
name|JettySolrRunner
argument_list|(
literal|"."
argument_list|,
literal|"/solr"
argument_list|,
literal|8983
argument_list|)
decl_stmt|;
name|jetty
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setShards
specifier|public
name|void
name|setShards
parameter_list|(
name|String
name|shardList
parameter_list|)
block|{
name|this
operator|.
name|shards
operator|=
name|shardList
expr_stmt|;
block|}
DECL|method|setDataDir
specifier|public
name|void
name|setDataDir
parameter_list|(
name|String
name|dataDir
parameter_list|)
block|{
name|this
operator|.
name|dataDir
operator|=
name|dataDir
expr_stmt|;
block|}
DECL|method|setUlogDir
specifier|public
name|void
name|setUlogDir
parameter_list|(
name|String
name|ulogDir
parameter_list|)
block|{
name|this
operator|.
name|solrUlogDir
operator|=
name|ulogDir
expr_stmt|;
block|}
DECL|method|setCoreNodeName
specifier|public
name|void
name|setCoreNodeName
parameter_list|(
name|String
name|coreNodeName
parameter_list|)
block|{
name|this
operator|.
name|coreNodeName
operator|=
name|coreNodeName
expr_stmt|;
block|}
DECL|method|getSolrHome
specifier|public
name|String
name|getSolrHome
parameter_list|()
block|{
return|return
name|solrHome
return|;
block|}
block|}
end_class
begin_class
DECL|class|NoLog
class|class
name|NoLog
implements|implements
name|Logger
block|{
DECL|field|debug
specifier|private
specifier|static
name|boolean
name|debug
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"DEBUG"
argument_list|,
literal|null
argument_list|)
operator|!=
literal|null
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|NoLog
specifier|public
name|NoLog
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|NoLog
specifier|public
name|NoLog
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
operator|==
literal|null
condition|?
literal|""
else|:
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isDebugEnabled
specifier|public
name|boolean
name|isDebugEnabled
parameter_list|()
block|{
return|return
name|debug
return|;
block|}
annotation|@
name|Override
DECL|method|setDebugEnabled
specifier|public
name|void
name|setDebugEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|debug
operator|=
name|enabled
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|debug
specifier|public
name|void
name|debug
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|th
parameter_list|)
block|{   }
annotation|@
name|Override
DECL|method|getLogger
specifier|public
name|Logger
name|getLogger
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
operator|(
name|name
operator|==
literal|null
operator|&&
name|this
operator|.
name|name
operator|==
literal|null
operator|)
operator|||
operator|(
name|name
operator|!=
literal|null
operator|&&
name|name
operator|.
name|equals
argument_list|(
name|this
operator|.
name|name
argument_list|)
operator|)
condition|)
return|return
name|this
return|;
return|return
operator|new
name|NoLog
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"NOLOG["
operator|+
name|name
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
DECL|method|debug
specifier|public
name|void
name|debug
parameter_list|(
name|Throwable
name|arg0
parameter_list|)
block|{        }
annotation|@
name|Override
DECL|method|debug
specifier|public
name|void
name|debug
parameter_list|(
name|String
name|arg0
parameter_list|,
name|Object
modifier|...
name|arg1
parameter_list|)
block|{        }
annotation|@
name|Override
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|ignore
specifier|public
name|void
name|ignore
parameter_list|(
name|Throwable
name|arg0
parameter_list|)
block|{        }
annotation|@
name|Override
DECL|method|info
specifier|public
name|void
name|info
parameter_list|(
name|Throwable
name|arg0
parameter_list|)
block|{        }
annotation|@
name|Override
DECL|method|info
specifier|public
name|void
name|info
parameter_list|(
name|String
name|arg0
parameter_list|,
name|Object
modifier|...
name|arg1
parameter_list|)
block|{        }
annotation|@
name|Override
DECL|method|info
specifier|public
name|void
name|info
parameter_list|(
name|String
name|arg0
parameter_list|,
name|Throwable
name|arg1
parameter_list|)
block|{        }
annotation|@
name|Override
DECL|method|warn
specifier|public
name|void
name|warn
parameter_list|(
name|Throwable
name|arg0
parameter_list|)
block|{        }
annotation|@
name|Override
DECL|method|warn
specifier|public
name|void
name|warn
parameter_list|(
name|String
name|arg0
parameter_list|,
name|Object
modifier|...
name|arg1
parameter_list|)
block|{        }
annotation|@
name|Override
DECL|method|warn
specifier|public
name|void
name|warn
parameter_list|(
name|String
name|arg0
parameter_list|,
name|Throwable
name|arg1
parameter_list|)
block|{   }
block|}
end_class
end_unit
