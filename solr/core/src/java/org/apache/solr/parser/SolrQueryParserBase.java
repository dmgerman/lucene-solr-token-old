begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.parser
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|parser
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|TokenFilterFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|AutomatonQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FuzzyQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiPhraseQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiTermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PhraseQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|RegexpQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|WildcardQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|QueryBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ToStringUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Automata
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Automaton
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Operations
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
operator|.
name|ReversedWildcardFilterFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
operator|.
name|TokenizerChain
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|parser
operator|.
name|QueryParser
operator|.
name|Operator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|QParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SyntaxError
import|;
end_import
begin_comment
comment|/** This class is overridden by QueryParser in QueryParser.jj  * and acts to separate the majority of the Java code from the .jj grammar file.   */
end_comment
begin_class
DECL|class|SolrQueryParserBase
specifier|public
specifier|abstract
class|class
name|SolrQueryParserBase
extends|extends
name|QueryBuilder
block|{
DECL|field|CONJ_NONE
specifier|static
specifier|final
name|int
name|CONJ_NONE
init|=
literal|0
decl_stmt|;
DECL|field|CONJ_AND
specifier|static
specifier|final
name|int
name|CONJ_AND
init|=
literal|1
decl_stmt|;
DECL|field|CONJ_OR
specifier|static
specifier|final
name|int
name|CONJ_OR
init|=
literal|2
decl_stmt|;
DECL|field|MOD_NONE
specifier|static
specifier|final
name|int
name|MOD_NONE
init|=
literal|0
decl_stmt|;
DECL|field|MOD_NOT
specifier|static
specifier|final
name|int
name|MOD_NOT
init|=
literal|10
decl_stmt|;
DECL|field|MOD_REQ
specifier|static
specifier|final
name|int
name|MOD_REQ
init|=
literal|11
decl_stmt|;
comment|// make it possible to call setDefaultOperator() without accessing
comment|// the nested class:
comment|/** Alternative form of QueryParser.Operator.AND */
DECL|field|AND_OPERATOR
specifier|public
specifier|static
specifier|final
name|Operator
name|AND_OPERATOR
init|=
name|Operator
operator|.
name|AND
decl_stmt|;
comment|/** Alternative form of QueryParser.Operator.OR */
DECL|field|OR_OPERATOR
specifier|public
specifier|static
specifier|final
name|Operator
name|OR_OPERATOR
init|=
name|Operator
operator|.
name|OR
decl_stmt|;
comment|/** The default operator that parser uses to combine query terms */
DECL|field|operator
name|Operator
name|operator
init|=
name|OR_OPERATOR
decl_stmt|;
DECL|field|multiTermRewriteMethod
name|MultiTermQuery
operator|.
name|RewriteMethod
name|multiTermRewriteMethod
init|=
name|MultiTermQuery
operator|.
name|CONSTANT_SCORE_REWRITE
decl_stmt|;
DECL|field|allowLeadingWildcard
name|boolean
name|allowLeadingWildcard
init|=
literal|true
decl_stmt|;
DECL|field|defaultField
name|String
name|defaultField
decl_stmt|;
DECL|field|phraseSlop
name|int
name|phraseSlop
init|=
literal|0
decl_stmt|;
comment|// default slop for phrase queries
DECL|field|fuzzyMinSim
name|float
name|fuzzyMinSim
init|=
name|FuzzyQuery
operator|.
name|defaultMinSimilarity
decl_stmt|;
DECL|field|fuzzyPrefixLength
name|int
name|fuzzyPrefixLength
init|=
name|FuzzyQuery
operator|.
name|defaultPrefixLength
decl_stmt|;
DECL|field|autoGeneratePhraseQueries
name|boolean
name|autoGeneratePhraseQueries
init|=
literal|false
decl_stmt|;
DECL|field|schema
specifier|protected
name|IndexSchema
name|schema
decl_stmt|;
DECL|field|parser
specifier|protected
name|QParser
name|parser
decl_stmt|;
comment|// implementation detail - caching ReversedWildcardFilterFactory based on type
DECL|field|leadingWildcards
specifier|private
name|Map
argument_list|<
name|FieldType
argument_list|,
name|ReversedWildcardFilterFactory
argument_list|>
name|leadingWildcards
decl_stmt|;
comment|/**    * Identifies the list of all known "magic fields" that trigger    * special parsing behavior    */
DECL|enum|MagicFieldName
specifier|public
specifier|static
enum|enum
name|MagicFieldName
block|{
DECL|enum constant|VAL
DECL|enum constant|QUERY
name|VAL
argument_list|(
literal|"_val_"
argument_list|,
literal|"func"
argument_list|)
block|,
name|QUERY
argument_list|(
literal|"_query_"
argument_list|,
literal|null
argument_list|)
block|;
DECL|field|field
specifier|public
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|subParser
specifier|public
specifier|final
name|String
name|subParser
decl_stmt|;
DECL|method|MagicFieldName
name|MagicFieldName
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
specifier|final
name|String
name|subParser
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|subParser
operator|=
name|subParser
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|field
return|;
block|}
DECL|field|lookup
specifier|private
specifier|final
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|MagicFieldName
argument_list|>
name|lookup
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|MagicFieldName
name|s
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|MagicFieldName
operator|.
name|class
argument_list|)
control|)
name|lookup
operator|.
name|put
argument_list|(
name|s
operator|.
name|toString
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|get
specifier|public
specifier|static
name|MagicFieldName
name|get
parameter_list|(
specifier|final
name|String
name|field
parameter_list|)
block|{
return|return
name|lookup
operator|.
name|get
argument_list|(
name|field
argument_list|)
return|;
block|}
block|}
comment|// So the generated QueryParser(CharStream) won't error out
DECL|method|SolrQueryParserBase
specifier|protected
name|SolrQueryParserBase
parameter_list|()
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// the generated parser will create these in QueryParser
DECL|method|ReInit
specifier|public
specifier|abstract
name|void
name|ReInit
parameter_list|(
name|CharStream
name|stream
parameter_list|)
function_decl|;
DECL|method|TopLevelQuery
specifier|public
specifier|abstract
name|Query
name|TopLevelQuery
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|ParseException
throws|,
name|SyntaxError
function_decl|;
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|Version
name|matchVersion
parameter_list|,
name|String
name|defaultField
parameter_list|,
name|QParser
name|parser
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|parser
operator|.
name|getReq
argument_list|()
operator|.
name|getSchema
argument_list|()
expr_stmt|;
name|this
operator|.
name|parser
operator|=
name|parser
expr_stmt|;
name|this
operator|.
name|defaultField
operator|=
name|defaultField
expr_stmt|;
name|setAnalyzer
argument_list|(
name|schema
operator|.
name|getQueryAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Parses a query string, returning a {@link org.apache.lucene.search.Query}.     *  @param query  the query string to be parsed.     */
DECL|method|parse
specifier|public
name|Query
name|parse
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|ReInit
argument_list|(
operator|new
name|FastCharStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|query
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
comment|// TopLevelQuery is a Query followed by the end-of-input (EOF)
name|Query
name|res
init|=
name|TopLevelQuery
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// pass null so we can tell later if an explicit field was provided or not
return|return
name|res
operator|!=
literal|null
condition|?
name|res
else|:
name|newBooleanQuery
argument_list|(
literal|false
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
decl||
name|TokenMgrError
name|tme
parameter_list|)
block|{
throw|throw
operator|new
name|SyntaxError
argument_list|(
literal|"Cannot parse '"
operator|+
name|query
operator|+
literal|"': "
operator|+
name|tme
operator|.
name|getMessage
argument_list|()
argument_list|,
name|tme
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|BooleanQuery
operator|.
name|TooManyClauses
name|tmc
parameter_list|)
block|{
throw|throw
operator|new
name|SyntaxError
argument_list|(
literal|"Cannot parse '"
operator|+
name|query
operator|+
literal|"': too many boolean clauses"
argument_list|,
name|tmc
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return Returns the default field.    */
DECL|method|getDefaultField
specifier|public
name|String
name|getDefaultField
parameter_list|()
block|{
return|return
name|this
operator|.
name|defaultField
return|;
block|}
DECL|field|explicitField
specifier|protected
name|String
name|explicitField
decl_stmt|;
comment|/** Handles the default field if null is passed */
DECL|method|getField
specifier|public
name|String
name|getField
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|explicitField
operator|=
name|fieldName
expr_stmt|;
return|return
name|fieldName
operator|!=
literal|null
condition|?
name|fieldName
else|:
name|this
operator|.
name|defaultField
return|;
block|}
comment|/** For a fielded query, returns the actual field specified (i.e. null if default is being used)    * myfield:A or myfield:(A B C) will both return "myfield"    */
DECL|method|getExplicitField
specifier|public
name|String
name|getExplicitField
parameter_list|()
block|{
return|return
name|explicitField
return|;
block|}
comment|/**    * @see #setAutoGeneratePhraseQueries(boolean)    */
DECL|method|getAutoGeneratePhraseQueries
specifier|public
specifier|final
name|boolean
name|getAutoGeneratePhraseQueries
parameter_list|()
block|{
return|return
name|autoGeneratePhraseQueries
return|;
block|}
comment|/**    * Set to true if phrase queries will be automatically generated    * when the analyzer returns more than one term from whitespace    * delimited text.    * NOTE: this behavior may not be suitable for all languages.    *<p>    * Set to false if phrase queries should only be generated when    * surrounded by double quotes.    */
DECL|method|setAutoGeneratePhraseQueries
specifier|public
specifier|final
name|void
name|setAutoGeneratePhraseQueries
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|this
operator|.
name|autoGeneratePhraseQueries
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Get the minimal similarity for fuzzy queries.    */
DECL|method|getFuzzyMinSim
specifier|public
name|float
name|getFuzzyMinSim
parameter_list|()
block|{
return|return
name|fuzzyMinSim
return|;
block|}
comment|/**    * Set the minimum similarity for fuzzy queries.    * Default is 2f.    */
DECL|method|setFuzzyMinSim
specifier|public
name|void
name|setFuzzyMinSim
parameter_list|(
name|float
name|fuzzyMinSim
parameter_list|)
block|{
name|this
operator|.
name|fuzzyMinSim
operator|=
name|fuzzyMinSim
expr_stmt|;
block|}
comment|/**    * Get the prefix length for fuzzy queries.    * @return Returns the fuzzyPrefixLength.    */
DECL|method|getFuzzyPrefixLength
specifier|public
name|int
name|getFuzzyPrefixLength
parameter_list|()
block|{
return|return
name|fuzzyPrefixLength
return|;
block|}
comment|/**    * Set the prefix length for fuzzy queries. Default is 0.    * @param fuzzyPrefixLength The fuzzyPrefixLength to set.    */
DECL|method|setFuzzyPrefixLength
specifier|public
name|void
name|setFuzzyPrefixLength
parameter_list|(
name|int
name|fuzzyPrefixLength
parameter_list|)
block|{
name|this
operator|.
name|fuzzyPrefixLength
operator|=
name|fuzzyPrefixLength
expr_stmt|;
block|}
comment|/**    * Sets the default slop for phrases.  If zero, then exact phrase matches    * are required.  Default value is zero.    */
DECL|method|setPhraseSlop
specifier|public
name|void
name|setPhraseSlop
parameter_list|(
name|int
name|phraseSlop
parameter_list|)
block|{
name|this
operator|.
name|phraseSlop
operator|=
name|phraseSlop
expr_stmt|;
block|}
comment|/**    * Gets the default slop for phrases.    */
DECL|method|getPhraseSlop
specifier|public
name|int
name|getPhraseSlop
parameter_list|()
block|{
return|return
name|phraseSlop
return|;
block|}
comment|/**    * Set to<code>true</code> to allow leading wildcard characters.    *<p>    * When set,<code>*</code> or<code>?</code> are allowed as    * the first character of a PrefixQuery and WildcardQuery.    * Note that this can produce very slow    * queries on big indexes.    *<p>    * Default: false.    */
DECL|method|setAllowLeadingWildcard
specifier|public
name|void
name|setAllowLeadingWildcard
parameter_list|(
name|boolean
name|allowLeadingWildcard
parameter_list|)
block|{
name|this
operator|.
name|allowLeadingWildcard
operator|=
name|allowLeadingWildcard
expr_stmt|;
block|}
comment|/**    * @see #setAllowLeadingWildcard(boolean)    */
DECL|method|getAllowLeadingWildcard
specifier|public
name|boolean
name|getAllowLeadingWildcard
parameter_list|()
block|{
return|return
name|allowLeadingWildcard
return|;
block|}
comment|/**    * Sets the boolean operator of the QueryParser.    * In default mode (<code>OR_OPERATOR</code>) terms without any modifiers    * are considered optional: for example<code>capital of Hungary</code> is equal to    *<code>capital OR of OR Hungary</code>.<br>    * In<code>AND_OPERATOR</code> mode terms are considered to be in conjunction: the    * above mentioned query is parsed as<code>capital AND of AND Hungary</code>    */
DECL|method|setDefaultOperator
specifier|public
name|void
name|setDefaultOperator
parameter_list|(
name|Operator
name|op
parameter_list|)
block|{
name|this
operator|.
name|operator
operator|=
name|op
expr_stmt|;
block|}
comment|/**    * Gets implicit operator setting, which will be either AND_OPERATOR    * or OR_OPERATOR.    */
DECL|method|getDefaultOperator
specifier|public
name|Operator
name|getDefaultOperator
parameter_list|()
block|{
return|return
name|operator
return|;
block|}
comment|/**    * By default QueryParser uses {@link org.apache.lucene.search.MultiTermQuery#CONSTANT_SCORE_REWRITE}    * when creating a PrefixQuery, WildcardQuery or RangeQuery. This implementation is generally preferable because it    * a) Runs faster b) Does not have the scarcity of terms unduly influence score    * c) avoids any "TooManyBooleanClauses" exception.    * However, if your application really needs to use the    * old-fashioned BooleanQuery expansion rewriting and the above    * points are not relevant then use this to change    * the rewrite method.    */
DECL|method|setMultiTermRewriteMethod
specifier|public
name|void
name|setMultiTermRewriteMethod
parameter_list|(
name|MultiTermQuery
operator|.
name|RewriteMethod
name|method
parameter_list|)
block|{
name|multiTermRewriteMethod
operator|=
name|method
expr_stmt|;
block|}
comment|/**    * @see #setMultiTermRewriteMethod    */
DECL|method|getMultiTermRewriteMethod
specifier|public
name|MultiTermQuery
operator|.
name|RewriteMethod
name|getMultiTermRewriteMethod
parameter_list|()
block|{
return|return
name|multiTermRewriteMethod
return|;
block|}
DECL|method|addClause
specifier|protected
name|void
name|addClause
parameter_list|(
name|List
argument_list|<
name|BooleanClause
argument_list|>
name|clauses
parameter_list|,
name|int
name|conj
parameter_list|,
name|int
name|mods
parameter_list|,
name|Query
name|q
parameter_list|)
block|{
name|boolean
name|required
decl_stmt|,
name|prohibited
decl_stmt|;
comment|// If this term is introduced by AND, make the preceding term required,
comment|// unless it's already prohibited
if|if
condition|(
name|clauses
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|conj
operator|==
name|CONJ_AND
condition|)
block|{
name|BooleanClause
name|c
init|=
name|clauses
operator|.
name|get
argument_list|(
name|clauses
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|isProhibited
argument_list|()
condition|)
name|c
operator|.
name|setOccur
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clauses
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|operator
operator|==
name|AND_OPERATOR
operator|&&
name|conj
operator|==
name|CONJ_OR
condition|)
block|{
comment|// If this term is introduced by OR, make the preceding term optional,
comment|// unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)
comment|// notice if the input is a OR b, first term is parsed as required; without
comment|// this modification a OR b would parsed as +a OR b
name|BooleanClause
name|c
init|=
name|clauses
operator|.
name|get
argument_list|(
name|clauses
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|isProhibited
argument_list|()
condition|)
name|c
operator|.
name|setOccur
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
comment|// We might have been passed a null query; the term might have been
comment|// filtered away by the analyzer.
if|if
condition|(
name|q
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|operator
operator|==
name|OR_OPERATOR
condition|)
block|{
comment|// We set REQUIRED if we're introduced by AND or +; PROHIBITED if
comment|// introduced by NOT or -; make sure not to set both.
name|prohibited
operator|=
operator|(
name|mods
operator|==
name|MOD_NOT
operator|)
expr_stmt|;
name|required
operator|=
operator|(
name|mods
operator|==
name|MOD_REQ
operator|)
expr_stmt|;
if|if
condition|(
name|conj
operator|==
name|CONJ_AND
operator|&&
operator|!
name|prohibited
condition|)
block|{
name|required
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// We set PROHIBITED if we're introduced by NOT or -; We set REQUIRED
comment|// if not PROHIBITED and not introduced by OR
name|prohibited
operator|=
operator|(
name|mods
operator|==
name|MOD_NOT
operator|)
expr_stmt|;
name|required
operator|=
operator|(
operator|!
name|prohibited
operator|&&
name|conj
operator|!=
name|CONJ_OR
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|required
operator|&&
operator|!
name|prohibited
condition|)
name|clauses
operator|.
name|add
argument_list|(
name|newBooleanClause
argument_list|(
name|q
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|required
operator|&&
operator|!
name|prohibited
condition|)
name|clauses
operator|.
name|add
argument_list|(
name|newBooleanClause
argument_list|(
name|q
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|required
operator|&&
name|prohibited
condition|)
name|clauses
operator|.
name|add
argument_list|(
name|newBooleanClause
argument_list|(
name|q
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
argument_list|)
expr_stmt|;
else|else
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Clause cannot be both required and prohibited"
argument_list|)
throw|;
block|}
DECL|method|newFieldQuery
specifier|protected
name|Query
name|newFieldQuery
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|queryText
parameter_list|,
name|boolean
name|quoted
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|BooleanClause
operator|.
name|Occur
name|occur
init|=
name|operator
operator|==
name|Operator
operator|.
name|AND
condition|?
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
else|:
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
decl_stmt|;
return|return
name|createFieldQuery
argument_list|(
name|analyzer
argument_list|,
name|occur
argument_list|,
name|field
argument_list|,
name|queryText
argument_list|,
name|quoted
operator|||
name|autoGeneratePhraseQueries
argument_list|,
name|phraseSlop
argument_list|)
return|;
block|}
comment|/**    * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.    * This method may be overridden, for example, to return    * a SpanNearQuery instead of a PhraseQuery.    *    */
DECL|method|getFieldQuery
specifier|protected
name|Query
name|getFieldQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|queryText
parameter_list|,
name|int
name|slop
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|Query
name|query
init|=
name|getFieldQuery
argument_list|(
name|field
argument_list|,
name|queryText
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// only set slop of the phrase query was a result of this parser
comment|// and not a sub-parser.
if|if
condition|(
name|subQParser
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|query
operator|instanceof
name|PhraseQuery
condition|)
block|{
name|PhraseQuery
name|pq
init|=
operator|(
name|PhraseQuery
operator|)
name|query
decl_stmt|;
name|Term
index|[]
name|terms
init|=
name|pq
operator|.
name|getTerms
argument_list|()
decl_stmt|;
name|int
index|[]
name|positions
init|=
name|pq
operator|.
name|getPositions
argument_list|()
decl_stmt|;
name|PhraseQuery
operator|.
name|Builder
name|builder
init|=
operator|new
name|PhraseQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|terms
index|[
name|i
index|]
argument_list|,
name|positions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setSlop
argument_list|(
name|slop
argument_list|)
expr_stmt|;
name|query
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|query
operator|.
name|setBoost
argument_list|(
name|pq
operator|.
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|query
operator|instanceof
name|MultiPhraseQuery
condition|)
block|{
operator|(
operator|(
name|MultiPhraseQuery
operator|)
name|query
operator|)
operator|.
name|setSlop
argument_list|(
name|slop
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|query
return|;
block|}
comment|/**   * Builds a new BooleanClause instance   * @param q sub query   * @param occur how this clause should occur when matching documents   * @return new BooleanClause instance   */
DECL|method|newBooleanClause
specifier|protected
name|BooleanClause
name|newBooleanClause
parameter_list|(
name|Query
name|q
parameter_list|,
name|BooleanClause
operator|.
name|Occur
name|occur
parameter_list|)
block|{
return|return
operator|new
name|BooleanClause
argument_list|(
name|q
argument_list|,
name|occur
argument_list|)
return|;
block|}
comment|/**    * Builds a new PrefixQuery instance    * @param prefix Prefix term    * @return new PrefixQuery instance    */
DECL|method|newPrefixQuery
specifier|protected
name|Query
name|newPrefixQuery
parameter_list|(
name|Term
name|prefix
parameter_list|)
block|{
name|SchemaField
name|sf
init|=
name|schema
operator|.
name|getField
argument_list|(
name|prefix
operator|.
name|field
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|sf
operator|.
name|getType
argument_list|()
operator|.
name|getPrefixQuery
argument_list|(
name|parser
argument_list|,
name|sf
argument_list|,
name|prefix
operator|.
name|text
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Builds a new RegexpQuery instance    * @param regexp Regexp term    * @return new RegexpQuery instance    */
DECL|method|newRegexpQuery
specifier|protected
name|Query
name|newRegexpQuery
parameter_list|(
name|Term
name|regexp
parameter_list|)
block|{
name|RegexpQuery
name|query
init|=
operator|new
name|RegexpQuery
argument_list|(
name|regexp
argument_list|)
decl_stmt|;
name|SchemaField
name|sf
init|=
name|schema
operator|.
name|getField
argument_list|(
name|regexp
operator|.
name|field
argument_list|()
argument_list|)
decl_stmt|;
name|query
operator|.
name|setRewriteMethod
argument_list|(
name|sf
operator|.
name|getType
argument_list|()
operator|.
name|getRewriteMethod
argument_list|(
name|parser
argument_list|,
name|sf
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|query
return|;
block|}
comment|/**    * Builds a new FuzzyQuery instance    * @param term Term    * @param minimumSimilarity minimum similarity    * @param prefixLength prefix length    * @return new FuzzyQuery Instance    */
DECL|method|newFuzzyQuery
specifier|protected
name|Query
name|newFuzzyQuery
parameter_list|(
name|Term
name|term
parameter_list|,
name|float
name|minimumSimilarity
parameter_list|,
name|int
name|prefixLength
parameter_list|)
block|{
comment|// FuzzyQuery doesn't yet allow constant score rewrite
name|String
name|text
init|=
name|term
operator|.
name|text
argument_list|()
decl_stmt|;
name|int
name|numEdits
init|=
name|FuzzyQuery
operator|.
name|floatToEdits
argument_list|(
name|minimumSimilarity
argument_list|,
name|text
operator|.
name|codePointCount
argument_list|(
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|FuzzyQuery
argument_list|(
name|term
argument_list|,
name|numEdits
argument_list|,
name|prefixLength
argument_list|)
return|;
block|}
comment|/**    * Builds a new MatchAllDocsQuery instance    * @return new MatchAllDocsQuery instance    */
DECL|method|newMatchAllDocsQuery
specifier|protected
name|Query
name|newMatchAllDocsQuery
parameter_list|()
block|{
return|return
operator|new
name|MatchAllDocsQuery
argument_list|()
return|;
block|}
comment|/**    * Builds a new WildcardQuery instance    * @param t wildcard term    * @return new WildcardQuery instance    */
DECL|method|newWildcardQuery
specifier|protected
name|Query
name|newWildcardQuery
parameter_list|(
name|Term
name|t
parameter_list|)
block|{
name|WildcardQuery
name|query
init|=
operator|new
name|WildcardQuery
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|SchemaField
name|sf
init|=
name|schema
operator|.
name|getField
argument_list|(
name|t
operator|.
name|field
argument_list|()
argument_list|)
decl_stmt|;
name|query
operator|.
name|setRewriteMethod
argument_list|(
name|sf
operator|.
name|getType
argument_list|()
operator|.
name|getRewriteMethod
argument_list|(
name|parser
argument_list|,
name|sf
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|query
return|;
block|}
comment|/**    * Factory method for generating query, given a set of clauses.    * By default creates a boolean query composed of clauses passed in.    *    * Can be overridden by extending classes, to modify query being    * returned.    *    * @param clauses List that contains {@link org.apache.lucene.search.BooleanClause} instances    *    to join.    *    * @return Resulting {@link org.apache.lucene.search.Query} object.    */
DECL|method|getBooleanQuery
specifier|protected
name|Query
name|getBooleanQuery
parameter_list|(
name|List
argument_list|<
name|BooleanClause
argument_list|>
name|clauses
parameter_list|)
throws|throws
name|SyntaxError
block|{
return|return
name|getBooleanQuery
argument_list|(
name|clauses
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Factory method for generating query, given a set of clauses.    * By default creates a boolean query composed of clauses passed in.    *    * Can be overridden by extending classes, to modify query being    * returned.    *    * @param clauses List that contains {@link org.apache.lucene.search.BooleanClause} instances    *    to join.    * @param disableCoord true if coord scoring should be disabled.    *    * @return Resulting {@link org.apache.lucene.search.Query} object.    */
DECL|method|getBooleanQuery
specifier|protected
name|Query
name|getBooleanQuery
parameter_list|(
name|List
argument_list|<
name|BooleanClause
argument_list|>
name|clauses
parameter_list|,
name|boolean
name|disableCoord
parameter_list|)
throws|throws
name|SyntaxError
block|{
if|if
condition|(
name|clauses
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
comment|// all clause words were filtered away by the analyzer.
block|}
name|BooleanQuery
name|query
init|=
name|newBooleanQuery
argument_list|(
name|disableCoord
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|BooleanClause
name|clause
range|:
name|clauses
control|)
block|{
name|query
operator|.
name|add
argument_list|(
name|clause
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
comment|// called from parser
DECL|method|handleBareTokenQuery
name|Query
name|handleBareTokenQuery
parameter_list|(
name|String
name|qfield
parameter_list|,
name|Token
name|term
parameter_list|,
name|Token
name|fuzzySlop
parameter_list|,
name|boolean
name|prefix
parameter_list|,
name|boolean
name|wildcard
parameter_list|,
name|boolean
name|fuzzy
parameter_list|,
name|boolean
name|regexp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|Query
name|q
decl_stmt|;
if|if
condition|(
name|wildcard
condition|)
block|{
name|q
operator|=
name|getWildcardQuery
argument_list|(
name|qfield
argument_list|,
name|term
operator|.
name|image
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|prefix
condition|)
block|{
name|q
operator|=
name|getPrefixQuery
argument_list|(
name|qfield
argument_list|,
name|discardEscapeChar
argument_list|(
name|term
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|term
operator|.
name|image
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|regexp
condition|)
block|{
name|q
operator|=
name|getRegexpQuery
argument_list|(
name|qfield
argument_list|,
name|term
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|term
operator|.
name|image
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fuzzy
condition|)
block|{
name|float
name|fms
init|=
name|fuzzyMinSim
decl_stmt|;
try|try
block|{
name|fms
operator|=
name|Float
operator|.
name|valueOf
argument_list|(
name|fuzzySlop
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{ }
if|if
condition|(
name|fms
operator|<
literal|0.0f
condition|)
block|{
throw|throw
operator|new
name|SyntaxError
argument_list|(
literal|"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|fms
operator|>=
literal|1.0f
operator|&&
name|fms
operator|!=
operator|(
name|int
operator|)
name|fms
condition|)
block|{
throw|throw
operator|new
name|SyntaxError
argument_list|(
literal|"Fractional edit distances are not allowed!"
argument_list|)
throw|;
block|}
name|String
name|termImage
init|=
name|discardEscapeChar
argument_list|(
name|term
operator|.
name|image
argument_list|)
decl_stmt|;
name|q
operator|=
name|getFuzzyQuery
argument_list|(
name|qfield
argument_list|,
name|termImage
argument_list|,
name|fms
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|termImage
init|=
name|discardEscapeChar
argument_list|(
name|term
operator|.
name|image
argument_list|)
decl_stmt|;
name|q
operator|=
name|getFieldQuery
argument_list|(
name|qfield
argument_list|,
name|termImage
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|q
return|;
block|}
comment|// called from parser
DECL|method|handleQuotedTerm
name|Query
name|handleQuotedTerm
parameter_list|(
name|String
name|qfield
parameter_list|,
name|Token
name|term
parameter_list|,
name|Token
name|fuzzySlop
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|int
name|s
init|=
name|phraseSlop
decl_stmt|;
comment|// default
if|if
condition|(
name|fuzzySlop
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|s
operator|=
name|Float
operator|.
name|valueOf
argument_list|(
name|fuzzySlop
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{ }
block|}
return|return
name|getFieldQuery
argument_list|(
name|qfield
argument_list|,
name|discardEscapeChar
argument_list|(
name|term
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|term
operator|.
name|image
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|,
name|s
argument_list|)
return|;
block|}
comment|// called from parser
DECL|method|handleBoost
name|Query
name|handleBoost
parameter_list|(
name|Query
name|q
parameter_list|,
name|Token
name|boost
parameter_list|)
block|{
comment|// q==null check is to avoid boosting null queries, such as those caused by stop words
if|if
condition|(
name|boost
operator|==
literal|null
operator|||
name|boost
operator|.
name|image
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|q
operator|==
literal|null
condition|)
block|{
return|return
name|q
return|;
block|}
if|if
condition|(
name|boost
operator|.
name|image
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'='
condition|)
block|{
comment|// syntax looks like foo:x^=3
name|float
name|val
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|boost
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Query
name|newQ
init|=
name|q
decl_stmt|;
if|if
condition|(
comment|// q instanceof FilterQuery ||  // TODO: fix this when FilterQuery is introduced to avoid needless wrapping: SOLR-7219
name|q
operator|instanceof
name|ConstantScoreQuery
condition|)
block|{
name|newQ
operator|.
name|setBoost
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newQ
operator|=
operator|new
name|ConstantScoreQuery
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|newQ
operator|.
name|setBoost
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|newQ
return|;
block|}
name|float
name|boostVal
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|boost
operator|.
name|image
argument_list|)
decl_stmt|;
name|q
operator|.
name|setBoost
argument_list|(
name|q
operator|.
name|getBoost
argument_list|()
operator|*
name|boostVal
argument_list|)
expr_stmt|;
return|return
name|q
return|;
block|}
comment|/**    * Returns a String where the escape char has been    * removed, or kept only once if there was a double escape.    *    * Supports escaped unicode characters, e. g. translates    *<code>\\u0041</code> to<code>A</code>.    *    */
DECL|method|discardEscapeChar
name|String
name|discardEscapeChar
parameter_list|(
name|String
name|input
parameter_list|)
throws|throws
name|SyntaxError
block|{
comment|// Create char array to hold unescaped char sequence
name|char
index|[]
name|output
init|=
operator|new
name|char
index|[
name|input
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
comment|// The length of the output can be less than the input
comment|// due to discarded escape chars. This variable holds
comment|// the actual length of the output
name|int
name|length
init|=
literal|0
decl_stmt|;
comment|// We remember whether the last processed character was
comment|// an escape character
name|boolean
name|lastCharWasEscapeChar
init|=
literal|false
decl_stmt|;
comment|// The multiplier the current unicode digit must be multiplied with.
comment|// E. g. the first digit must be multiplied with 16^3, the second with 16^2...
name|int
name|codePointMultiplier
init|=
literal|0
decl_stmt|;
comment|// Used to calculate the codepoint of the escaped unicode character
name|int
name|codePoint
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|input
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|curChar
init|=
name|input
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|codePointMultiplier
operator|>
literal|0
condition|)
block|{
name|codePoint
operator|+=
name|hexToInt
argument_list|(
name|curChar
argument_list|)
operator|*
name|codePointMultiplier
expr_stmt|;
name|codePointMultiplier
operator|>>>=
literal|4
expr_stmt|;
if|if
condition|(
name|codePointMultiplier
operator|==
literal|0
condition|)
block|{
name|output
index|[
name|length
operator|++
index|]
operator|=
operator|(
name|char
operator|)
name|codePoint
expr_stmt|;
name|codePoint
operator|=
literal|0
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|lastCharWasEscapeChar
condition|)
block|{
if|if
condition|(
name|curChar
operator|==
literal|'u'
condition|)
block|{
comment|// found an escaped unicode character
name|codePointMultiplier
operator|=
literal|16
operator|*
literal|16
operator|*
literal|16
expr_stmt|;
block|}
else|else
block|{
comment|// this character was escaped
name|output
index|[
name|length
index|]
operator|=
name|curChar
expr_stmt|;
name|length
operator|++
expr_stmt|;
block|}
name|lastCharWasEscapeChar
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|curChar
operator|==
literal|'\\'
condition|)
block|{
name|lastCharWasEscapeChar
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|output
index|[
name|length
index|]
operator|=
name|curChar
expr_stmt|;
name|length
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|codePointMultiplier
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|SyntaxError
argument_list|(
literal|"Truncated unicode escape sequence."
argument_list|)
throw|;
block|}
if|if
condition|(
name|lastCharWasEscapeChar
condition|)
block|{
throw|throw
operator|new
name|SyntaxError
argument_list|(
literal|"Term can not end with escape character."
argument_list|)
throw|;
block|}
return|return
operator|new
name|String
argument_list|(
name|output
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
return|;
block|}
comment|/** Returns the numeric value of the hexadecimal character */
DECL|method|hexToInt
specifier|static
specifier|final
name|int
name|hexToInt
parameter_list|(
name|char
name|c
parameter_list|)
throws|throws
name|SyntaxError
block|{
if|if
condition|(
literal|'0'
operator|<=
name|c
operator|&&
name|c
operator|<=
literal|'9'
condition|)
block|{
return|return
name|c
operator|-
literal|'0'
return|;
block|}
elseif|else
if|if
condition|(
literal|'a'
operator|<=
name|c
operator|&&
name|c
operator|<=
literal|'f'
condition|)
block|{
return|return
name|c
operator|-
literal|'a'
operator|+
literal|10
return|;
block|}
elseif|else
if|if
condition|(
literal|'A'
operator|<=
name|c
operator|&&
name|c
operator|<=
literal|'F'
condition|)
block|{
return|return
name|c
operator|-
literal|'A'
operator|+
literal|10
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|SyntaxError
argument_list|(
literal|"Non-hex character in Unicode escape sequence: "
operator|+
name|c
argument_list|)
throw|;
block|}
block|}
comment|/**    * Returns a String where those characters that QueryParser    * expects to be escaped are escaped by a preceding<code>\</code>.    */
DECL|method|escape
specifier|public
specifier|static
name|String
name|escape
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// These characters are part of the query syntax and must be escaped
if|if
condition|(
name|c
operator|==
literal|'\\'
operator|||
name|c
operator|==
literal|'+'
operator|||
name|c
operator|==
literal|'-'
operator|||
name|c
operator|==
literal|'!'
operator|||
name|c
operator|==
literal|'('
operator|||
name|c
operator|==
literal|')'
operator|||
name|c
operator|==
literal|':'
operator|||
name|c
operator|==
literal|'^'
operator|||
name|c
operator|==
literal|'['
operator|||
name|c
operator|==
literal|']'
operator|||
name|c
operator|==
literal|'\"'
operator|||
name|c
operator|==
literal|'{'
operator|||
name|c
operator|==
literal|'}'
operator|||
name|c
operator|==
literal|'~'
operator|||
name|c
operator|==
literal|'*'
operator|||
name|c
operator|==
literal|'?'
operator|||
name|c
operator|==
literal|'|'
operator|||
name|c
operator|==
literal|'&'
operator|||
name|c
operator|==
literal|'/'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getReversedWildcardFilterFactory
specifier|protected
name|ReversedWildcardFilterFactory
name|getReversedWildcardFilterFactory
parameter_list|(
name|FieldType
name|fieldType
parameter_list|)
block|{
if|if
condition|(
name|leadingWildcards
operator|==
literal|null
condition|)
name|leadingWildcards
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|ReversedWildcardFilterFactory
name|fac
init|=
name|leadingWildcards
operator|.
name|get
argument_list|(
name|fieldType
argument_list|)
decl_stmt|;
if|if
condition|(
name|fac
operator|!=
literal|null
operator|||
name|leadingWildcards
operator|.
name|containsKey
argument_list|(
name|fac
argument_list|)
condition|)
block|{
return|return
name|fac
return|;
block|}
name|Analyzer
name|a
init|=
name|fieldType
operator|.
name|getIndexAnalyzer
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|instanceof
name|TokenizerChain
condition|)
block|{
comment|// examine the indexing analysis chain if it supports leading wildcards
name|TokenizerChain
name|tc
init|=
operator|(
name|TokenizerChain
operator|)
name|a
decl_stmt|;
name|TokenFilterFactory
index|[]
name|factories
init|=
name|tc
operator|.
name|getTokenFilterFactories
argument_list|()
decl_stmt|;
for|for
control|(
name|TokenFilterFactory
name|factory
range|:
name|factories
control|)
block|{
if|if
condition|(
name|factory
operator|instanceof
name|ReversedWildcardFilterFactory
condition|)
block|{
name|fac
operator|=
operator|(
name|ReversedWildcardFilterFactory
operator|)
name|factory
expr_stmt|;
break|break;
block|}
block|}
block|}
name|leadingWildcards
operator|.
name|put
argument_list|(
name|fieldType
argument_list|,
name|fac
argument_list|)
expr_stmt|;
return|return
name|fac
return|;
block|}
DECL|method|checkNullField
specifier|private
name|void
name|checkNullField
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|SolrException
block|{
if|if
condition|(
name|field
operator|==
literal|null
operator|&&
name|defaultField
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"no field name specified in query and no default specified via 'df' param"
argument_list|)
throw|;
block|}
block|}
DECL|method|analyzeIfMultitermTermText
specifier|protected
name|String
name|analyzeIfMultitermTermText
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|part
parameter_list|,
name|FieldType
name|fieldType
parameter_list|)
block|{
if|if
condition|(
name|part
operator|==
literal|null
operator|||
operator|!
operator|(
name|fieldType
operator|instanceof
name|TextField
operator|)
operator|||
operator|(
operator|(
name|TextField
operator|)
name|fieldType
operator|)
operator|.
name|getMultiTermAnalyzer
argument_list|()
operator|==
literal|null
condition|)
return|return
name|part
return|;
name|SchemaField
name|sf
init|=
name|schema
operator|.
name|getFieldOrNull
argument_list|(
operator|(
name|field
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sf
operator|==
literal|null
operator|||
operator|!
operator|(
name|fieldType
operator|instanceof
name|TextField
operator|)
condition|)
return|return
name|part
return|;
name|String
name|out
init|=
name|TextField
operator|.
name|analyzeMultiTerm
argument_list|(
name|field
argument_list|,
name|part
argument_list|,
operator|(
operator|(
name|TextField
operator|)
name|fieldType
operator|)
operator|.
name|getMultiTermAnalyzer
argument_list|()
argument_list|)
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
return|return
name|out
return|;
block|}
DECL|field|subQParser
specifier|private
name|QParser
name|subQParser
init|=
literal|null
decl_stmt|;
DECL|method|getFieldQuery
specifier|protected
name|Query
name|getFieldQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|queryText
parameter_list|,
name|boolean
name|quoted
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|checkNullField
argument_list|(
name|field
argument_list|)
expr_stmt|;
comment|// intercept magic field name of "_" to use as a hook for our
comment|// own functions.
if|if
condition|(
name|field
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'_'
operator|&&
name|parser
operator|!=
literal|null
condition|)
block|{
name|MagicFieldName
name|magic
init|=
name|MagicFieldName
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|magic
condition|)
block|{
name|subQParser
operator|=
name|parser
operator|.
name|subQuery
argument_list|(
name|queryText
argument_list|,
name|magic
operator|.
name|subParser
argument_list|)
expr_stmt|;
return|return
name|subQParser
operator|.
name|getQuery
argument_list|()
return|;
block|}
block|}
name|SchemaField
name|sf
init|=
name|schema
operator|.
name|getFieldOrNull
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|sf
operator|!=
literal|null
condition|)
block|{
name|FieldType
name|ft
init|=
name|sf
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|// delegate to type for everything except tokenized fields
if|if
condition|(
name|ft
operator|.
name|isTokenized
argument_list|()
operator|&&
name|sf
operator|.
name|indexed
argument_list|()
condition|)
block|{
return|return
name|newFieldQuery
argument_list|(
name|getAnalyzer
argument_list|()
argument_list|,
name|field
argument_list|,
name|queryText
argument_list|,
name|quoted
operator|||
operator|(
name|ft
operator|instanceof
name|TextField
operator|&&
operator|(
operator|(
name|TextField
operator|)
name|ft
operator|)
operator|.
name|getAutoGeneratePhraseQueries
argument_list|()
operator|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|sf
operator|.
name|getType
argument_list|()
operator|.
name|getFieldQuery
argument_list|(
name|parser
argument_list|,
name|sf
argument_list|,
name|queryText
argument_list|)
return|;
block|}
block|}
comment|// default to a normal field query
return|return
name|newFieldQuery
argument_list|(
name|getAnalyzer
argument_list|()
argument_list|,
name|field
argument_list|,
name|queryText
argument_list|,
name|quoted
argument_list|)
return|;
block|}
comment|// called from parser
DECL|method|getRangeQuery
specifier|protected
name|Query
name|getRangeQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|part1
parameter_list|,
name|String
name|part2
parameter_list|,
name|boolean
name|startInclusive
parameter_list|,
name|boolean
name|endInclusive
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|checkNullField
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|SchemaField
name|sf
init|=
name|schema
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
name|sf
operator|.
name|getType
argument_list|()
operator|.
name|getRangeQuery
argument_list|(
name|parser
argument_list|,
name|sf
argument_list|,
name|part1
argument_list|,
name|part2
argument_list|,
name|startInclusive
argument_list|,
name|endInclusive
argument_list|)
return|;
block|}
comment|// called from parser
DECL|method|getPrefixQuery
specifier|protected
name|Query
name|getPrefixQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|checkNullField
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|termStr
operator|=
name|analyzeIfMultitermTermText
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|,
name|schema
operator|.
name|getFieldType
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
comment|// Solr has always used constant scoring for prefix queries.  This should return constant scoring by default.
return|return
name|newPrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|)
argument_list|)
return|;
block|}
comment|// called from parser
DECL|method|getWildcardQuery
specifier|protected
name|Query
name|getWildcardQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|checkNullField
argument_list|(
name|field
argument_list|)
expr_stmt|;
comment|// *:* -> MatchAllDocsQuery
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|termStr
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|field
argument_list|)
operator|||
name|getExplicitField
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|newMatchAllDocsQuery
argument_list|()
return|;
block|}
block|}
name|FieldType
name|fieldType
init|=
name|schema
operator|.
name|getFieldType
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|termStr
operator|=
name|analyzeIfMultitermTermText
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|,
name|fieldType
argument_list|)
expr_stmt|;
comment|// can we use reversed wildcards in this field?
name|ReversedWildcardFilterFactory
name|factory
init|=
name|getReversedWildcardFilterFactory
argument_list|(
name|fieldType
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|!=
literal|null
condition|)
block|{
name|Term
name|term
init|=
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|)
decl_stmt|;
comment|// fsa representing the query
name|Automaton
name|automaton
init|=
name|WildcardQuery
operator|.
name|toAutomaton
argument_list|(
name|term
argument_list|)
decl_stmt|;
comment|// TODO: we should likely use the automaton to calculate shouldReverse, too.
if|if
condition|(
name|factory
operator|.
name|shouldReverse
argument_list|(
name|termStr
argument_list|)
condition|)
block|{
name|automaton
operator|=
name|Operations
operator|.
name|concatenate
argument_list|(
name|automaton
argument_list|,
name|Automata
operator|.
name|makeChar
argument_list|(
name|factory
operator|.
name|getMarkerChar
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|automaton
operator|=
name|Operations
operator|.
name|reverse
argument_list|(
name|automaton
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// reverse wildcardfilter is active: remove false positives
comment|// fsa representing false positives (markerChar*)
name|Automaton
name|falsePositives
init|=
name|Operations
operator|.
name|concatenate
argument_list|(
name|Automata
operator|.
name|makeChar
argument_list|(
name|factory
operator|.
name|getMarkerChar
argument_list|()
argument_list|)
argument_list|,
name|Automata
operator|.
name|makeAnyString
argument_list|()
argument_list|)
decl_stmt|;
comment|// subtract these away
name|automaton
operator|=
name|Operations
operator|.
name|minus
argument_list|(
name|automaton
argument_list|,
name|falsePositives
argument_list|,
name|Operations
operator|.
name|DEFAULT_MAX_DETERMINIZED_STATES
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|AutomatonQuery
argument_list|(
name|term
argument_list|,
name|automaton
argument_list|)
block|{
comment|// override toString so it's completely transparent
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|getField
argument_list|()
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|term
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|ToStringUtils
operator|.
name|boost
argument_list|(
name|getBoost
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
return|;
block|}
comment|// Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.
return|return
name|newWildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|)
argument_list|)
return|;
block|}
comment|// called from parser
DECL|method|getRegexpQuery
specifier|protected
name|Query
name|getRegexpQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|termStr
operator|=
name|analyzeIfMultitermTermText
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|,
name|schema
operator|.
name|getFieldType
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|newRegexpQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|)
argument_list|)
return|;
block|}
comment|// called from parser
DECL|method|getFuzzyQuery
specifier|protected
name|Query
name|getFuzzyQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|,
name|float
name|minSimilarity
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|termStr
operator|=
name|analyzeIfMultitermTermText
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|,
name|schema
operator|.
name|getFieldType
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
name|Term
name|t
init|=
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|)
decl_stmt|;
return|return
name|newFuzzyQuery
argument_list|(
name|t
argument_list|,
name|minSimilarity
argument_list|,
name|getFuzzyPrefixLength
argument_list|()
argument_list|)
return|;
block|}
comment|// called from parser
DECL|method|getLocalParams
specifier|protected
name|Query
name|getLocalParams
parameter_list|(
name|String
name|qfield
parameter_list|,
name|String
name|lparams
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|QParser
name|nested
init|=
name|parser
operator|.
name|subQuery
argument_list|(
name|lparams
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|nested
operator|.
name|getQuery
argument_list|()
return|;
block|}
block|}
end_class
end_unit
