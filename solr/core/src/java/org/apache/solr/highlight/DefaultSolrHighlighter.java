begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.highlight
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|highlight
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CachingTokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|StorableField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|StoredDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|Encoder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|Formatter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|Fragmenter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|Highlighter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|InvalidTokenOffsetsException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|OffsetLimitTokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|QueryScorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|QueryTermScorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|Scorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|TextFragment
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|TokenSources
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|vectorhighlight
operator|.
name|BoundaryScanner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|vectorhighlight
operator|.
name|FastVectorHighlighter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|vectorhighlight
operator|.
name|FieldQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|vectorhighlight
operator|.
name|FragListBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|vectorhighlight
operator|.
name|FragmentsBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeSource
operator|.
name|State
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|HighlightParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|PluginInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|DocIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|DocList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|PluginInfoInitialized
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  *  * @since solr 1.3  */
end_comment
begin_class
DECL|class|DefaultSolrHighlighter
specifier|public
class|class
name|DefaultSolrHighlighter
extends|extends
name|SolrHighlighter
implements|implements
name|PluginInfoInitialized
block|{
DECL|field|log
specifier|public
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultSolrHighlighter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|solrCore
specifier|protected
specifier|final
name|SolrCore
name|solrCore
decl_stmt|;
comment|//Will be invoked via reflection
DECL|method|DefaultSolrHighlighter
specifier|public
name|DefaultSolrHighlighter
parameter_list|(
name|SolrCore
name|solrCore
parameter_list|)
block|{
name|this
operator|.
name|solrCore
operator|=
name|solrCore
expr_stmt|;
block|}
comment|// Thread safe registry
DECL|field|formatters
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SolrFormatter
argument_list|>
name|formatters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Thread safe registry
DECL|field|encoders
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SolrEncoder
argument_list|>
name|encoders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Thread safe registry
DECL|field|fragmenters
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SolrFragmenter
argument_list|>
name|fragmenters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Thread safe registry
DECL|field|fragListBuilders
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SolrFragListBuilder
argument_list|>
name|fragListBuilders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Thread safe registry
DECL|field|fragmentsBuilders
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SolrFragmentsBuilder
argument_list|>
name|fragmentsBuilders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Thread safe registry
DECL|field|boundaryScanners
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SolrBoundaryScanner
argument_list|>
name|boundaryScanners
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|PluginInfo
name|info
parameter_list|)
block|{
name|formatters
operator|.
name|clear
argument_list|()
expr_stmt|;
name|encoders
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fragmenters
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fragListBuilders
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fragmentsBuilders
operator|.
name|clear
argument_list|()
expr_stmt|;
name|boundaryScanners
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Load the fragmenters
name|SolrFragmenter
name|frag
init|=
name|solrCore
operator|.
name|initPlugins
argument_list|(
name|info
operator|.
name|getChildren
argument_list|(
literal|"fragmenter"
argument_list|)
argument_list|,
name|fragmenters
argument_list|,
name|SolrFragmenter
operator|.
name|class
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|frag
operator|==
literal|null
condition|)
name|frag
operator|=
operator|new
name|GapFragmenter
argument_list|()
expr_stmt|;
name|fragmenters
operator|.
name|put
argument_list|(
literal|""
argument_list|,
name|frag
argument_list|)
expr_stmt|;
name|fragmenters
operator|.
name|put
argument_list|(
literal|null
argument_list|,
name|frag
argument_list|)
expr_stmt|;
comment|// Load the formatters
name|SolrFormatter
name|fmt
init|=
name|solrCore
operator|.
name|initPlugins
argument_list|(
name|info
operator|.
name|getChildren
argument_list|(
literal|"formatter"
argument_list|)
argument_list|,
name|formatters
argument_list|,
name|SolrFormatter
operator|.
name|class
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|fmt
operator|==
literal|null
condition|)
name|fmt
operator|=
operator|new
name|HtmlFormatter
argument_list|()
expr_stmt|;
name|formatters
operator|.
name|put
argument_list|(
literal|""
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|formatters
operator|.
name|put
argument_list|(
literal|null
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
comment|// Load the encoders
name|SolrEncoder
name|enc
init|=
name|solrCore
operator|.
name|initPlugins
argument_list|(
name|info
operator|.
name|getChildren
argument_list|(
literal|"encoder"
argument_list|)
argument_list|,
name|encoders
argument_list|,
name|SolrEncoder
operator|.
name|class
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|enc
operator|==
literal|null
condition|)
name|enc
operator|=
operator|new
name|DefaultEncoder
argument_list|()
expr_stmt|;
name|encoders
operator|.
name|put
argument_list|(
literal|""
argument_list|,
name|enc
argument_list|)
expr_stmt|;
name|encoders
operator|.
name|put
argument_list|(
literal|null
argument_list|,
name|enc
argument_list|)
expr_stmt|;
comment|// Load the FragListBuilders
name|SolrFragListBuilder
name|fragListBuilder
init|=
name|solrCore
operator|.
name|initPlugins
argument_list|(
name|info
operator|.
name|getChildren
argument_list|(
literal|"fragListBuilder"
argument_list|)
argument_list|,
name|fragListBuilders
argument_list|,
name|SolrFragListBuilder
operator|.
name|class
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|fragListBuilder
operator|==
literal|null
condition|)
name|fragListBuilder
operator|=
operator|new
name|SimpleFragListBuilder
argument_list|()
expr_stmt|;
name|fragListBuilders
operator|.
name|put
argument_list|(
literal|""
argument_list|,
name|fragListBuilder
argument_list|)
expr_stmt|;
name|fragListBuilders
operator|.
name|put
argument_list|(
literal|null
argument_list|,
name|fragListBuilder
argument_list|)
expr_stmt|;
comment|// Load the FragmentsBuilders
name|SolrFragmentsBuilder
name|fragsBuilder
init|=
name|solrCore
operator|.
name|initPlugins
argument_list|(
name|info
operator|.
name|getChildren
argument_list|(
literal|"fragmentsBuilder"
argument_list|)
argument_list|,
name|fragmentsBuilders
argument_list|,
name|SolrFragmentsBuilder
operator|.
name|class
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|fragsBuilder
operator|==
literal|null
condition|)
name|fragsBuilder
operator|=
operator|new
name|ScoreOrderFragmentsBuilder
argument_list|()
expr_stmt|;
name|fragmentsBuilders
operator|.
name|put
argument_list|(
literal|""
argument_list|,
name|fragsBuilder
argument_list|)
expr_stmt|;
name|fragmentsBuilders
operator|.
name|put
argument_list|(
literal|null
argument_list|,
name|fragsBuilder
argument_list|)
expr_stmt|;
comment|// Load the BoundaryScanners
name|SolrBoundaryScanner
name|boundaryScanner
init|=
name|solrCore
operator|.
name|initPlugins
argument_list|(
name|info
operator|.
name|getChildren
argument_list|(
literal|"boundaryScanner"
argument_list|)
argument_list|,
name|boundaryScanners
argument_list|,
name|SolrBoundaryScanner
operator|.
name|class
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|boundaryScanner
operator|==
literal|null
condition|)
name|boundaryScanner
operator|=
operator|new
name|SimpleBoundaryScanner
argument_list|()
expr_stmt|;
name|boundaryScanners
operator|.
name|put
argument_list|(
literal|""
argument_list|,
name|boundaryScanner
argument_list|)
expr_stmt|;
name|boundaryScanners
operator|.
name|put
argument_list|(
literal|null
argument_list|,
name|boundaryScanner
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return a phrase {@link org.apache.lucene.search.highlight.Highlighter} appropriate for this field.    * @param query The current Query    * @param fieldName The name of the field    * @param request The current SolrQueryRequest    * @param tokenStream document text tokenStream that implements reset() efficiently (e.g. CachingTokenFilter).    *                    If it's used, call reset() first.    * @throws IOException If there is a low-level I/O error.    */
DECL|method|getPhraseHighlighter
specifier|protected
name|Highlighter
name|getPhraseHighlighter
parameter_list|(
name|Query
name|query
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|SolrQueryRequest
name|request
parameter_list|,
name|TokenStream
name|tokenStream
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrParams
name|params
init|=
name|request
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
name|getFormatter
argument_list|(
name|fieldName
argument_list|,
name|params
argument_list|)
argument_list|,
name|getEncoder
argument_list|(
name|fieldName
argument_list|,
name|params
argument_list|)
argument_list|,
name|getSpanQueryScorer
argument_list|(
name|query
argument_list|,
name|fieldName
argument_list|,
name|tokenStream
argument_list|,
name|request
argument_list|)
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
name|getFragmenter
argument_list|(
name|fieldName
argument_list|,
name|params
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|highlighter
return|;
block|}
comment|/**    * Return a {@link org.apache.lucene.search.highlight.Highlighter} appropriate for this field.    * @param query The current Query    * @param fieldName The name of the field    * @param request The current SolrQueryRequest    */
DECL|method|getHighlighter
specifier|protected
name|Highlighter
name|getHighlighter
parameter_list|(
name|Query
name|query
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|SolrQueryRequest
name|request
parameter_list|)
block|{
name|SolrParams
name|params
init|=
name|request
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
name|getFormatter
argument_list|(
name|fieldName
argument_list|,
name|params
argument_list|)
argument_list|,
name|getEncoder
argument_list|(
name|fieldName
argument_list|,
name|params
argument_list|)
argument_list|,
name|getQueryScorer
argument_list|(
name|query
argument_list|,
name|fieldName
argument_list|,
name|request
argument_list|)
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setTextFragmenter
argument_list|(
name|getFragmenter
argument_list|(
name|fieldName
argument_list|,
name|params
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|highlighter
return|;
block|}
comment|/**    * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.    * @param query The current query    * @param tokenStream document text tokenStream that implements reset() efficiently (e.g. CachingTokenFilter).    *                    If it's used, call reset() first.    * @param fieldName The name of the field    * @param request The SolrQueryRequest    */
DECL|method|getSpanQueryScorer
specifier|protected
name|QueryScorer
name|getSpanQueryScorer
parameter_list|(
name|Query
name|query
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|TokenStream
name|tokenStream
parameter_list|,
name|SolrQueryRequest
name|request
parameter_list|)
block|{
name|QueryScorer
name|scorer
init|=
operator|new
name|QueryScorer
argument_list|(
name|query
argument_list|,
name|request
operator|.
name|getParams
argument_list|()
operator|.
name|getFieldBool
argument_list|(
name|fieldName
argument_list|,
name|HighlightParams
operator|.
name|FIELD_MATCH
argument_list|,
literal|false
argument_list|)
condition|?
name|fieldName
else|:
literal|null
argument_list|)
decl_stmt|;
name|scorer
operator|.
name|setExpandMultiTermQuery
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
name|HighlightParams
operator|.
name|HIGHLIGHT_MULTI_TERM
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|scorer
operator|.
name|setUsePayloads
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
operator|.
name|getFieldBool
argument_list|(
name|fieldName
argument_list|,
name|HighlightParams
operator|.
name|PAYLOADS
argument_list|,
name|request
operator|.
name|getSearcher
argument_list|()
operator|.
name|getLeafReader
argument_list|()
operator|.
name|getFieldInfos
argument_list|()
operator|.
name|fieldInfo
argument_list|(
name|fieldName
argument_list|)
operator|.
name|hasPayloads
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|scorer
return|;
block|}
comment|/**    * Return a {@link org.apache.lucene.search.highlight.Scorer} suitable for this Query and field.    * @param query The current query    * @param fieldName The name of the field    * @param request The SolrQueryRequest    */
DECL|method|getQueryScorer
specifier|protected
name|Scorer
name|getQueryScorer
parameter_list|(
name|Query
name|query
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|SolrQueryRequest
name|request
parameter_list|)
block|{
name|boolean
name|reqFieldMatch
init|=
name|request
operator|.
name|getParams
argument_list|()
operator|.
name|getFieldBool
argument_list|(
name|fieldName
argument_list|,
name|HighlightParams
operator|.
name|FIELD_MATCH
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|reqFieldMatch
condition|)
block|{
return|return
operator|new
name|QueryTermScorer
argument_list|(
name|query
argument_list|,
name|request
operator|.
name|getSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
argument_list|,
name|fieldName
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|QueryTermScorer
argument_list|(
name|query
argument_list|)
return|;
block|}
block|}
comment|/**    * Return the max number of snippets for this field. If this has not    * been configured for this field, fall back to the configured default    * or the solr default.    * @param fieldName The name of the field    * @param params The params controlling Highlighting    */
DECL|method|getMaxSnippets
specifier|protected
name|int
name|getMaxSnippets
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|SolrParams
name|params
parameter_list|)
block|{
return|return
name|params
operator|.
name|getFieldInt
argument_list|(
name|fieldName
argument_list|,
name|HighlightParams
operator|.
name|SNIPPETS
argument_list|,
literal|1
argument_list|)
return|;
block|}
comment|/**    * Return whether adjacent fragments should be merged.    * @param fieldName The name of the field    * @param params The params controlling Highlighting    */
DECL|method|isMergeContiguousFragments
specifier|protected
name|boolean
name|isMergeContiguousFragments
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|SolrParams
name|params
parameter_list|)
block|{
return|return
name|params
operator|.
name|getFieldBool
argument_list|(
name|fieldName
argument_list|,
name|HighlightParams
operator|.
name|MERGE_CONTIGUOUS_FRAGMENTS
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Return a {@link org.apache.lucene.search.highlight.Formatter} appropriate for this field. If a formatter    * has not been configured for this field, fall back to the configured    * default or the solr default ({@link org.apache.lucene.search.highlight.SimpleHTMLFormatter}).    *    * @param fieldName The name of the field    * @param params The params controlling Highlighting    * @return An appropriate {@link org.apache.lucene.search.highlight.Formatter}.    */
DECL|method|getFormatter
specifier|protected
name|Formatter
name|getFormatter
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|SolrParams
name|params
parameter_list|)
block|{
name|String
name|str
init|=
name|params
operator|.
name|getFieldParam
argument_list|(
name|fieldName
argument_list|,
name|HighlightParams
operator|.
name|FORMATTER
argument_list|)
decl_stmt|;
name|SolrFormatter
name|formatter
init|=
name|formatters
operator|.
name|get
argument_list|(
name|str
argument_list|)
decl_stmt|;
if|if
condition|(
name|formatter
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown formatter: "
operator|+
name|str
argument_list|)
throw|;
block|}
return|return
name|formatter
operator|.
name|getFormatter
argument_list|(
name|fieldName
argument_list|,
name|params
argument_list|)
return|;
block|}
comment|/**    * Return an {@link org.apache.lucene.search.highlight.Encoder} appropriate for this field. If an encoder    * has not been configured for this field, fall back to the configured    * default or the solr default ({@link org.apache.lucene.search.highlight.DefaultEncoder}).    *    * @param fieldName The name of the field    * @param params The params controlling Highlighting    * @return An appropriate {@link org.apache.lucene.search.highlight.Encoder}.    */
DECL|method|getEncoder
specifier|protected
name|Encoder
name|getEncoder
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|SolrParams
name|params
parameter_list|)
block|{
name|String
name|str
init|=
name|params
operator|.
name|getFieldParam
argument_list|(
name|fieldName
argument_list|,
name|HighlightParams
operator|.
name|ENCODER
argument_list|)
decl_stmt|;
name|SolrEncoder
name|encoder
init|=
name|encoders
operator|.
name|get
argument_list|(
name|str
argument_list|)
decl_stmt|;
if|if
condition|(
name|encoder
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown encoder: "
operator|+
name|str
argument_list|)
throw|;
block|}
return|return
name|encoder
operator|.
name|getEncoder
argument_list|(
name|fieldName
argument_list|,
name|params
argument_list|)
return|;
block|}
comment|/**    * Return a {@link org.apache.lucene.search.highlight.Fragmenter} appropriate for this field. If a fragmenter    * has not been configured for this field, fall back to the configured    * default or the solr default ({@link GapFragmenter}).    *    * @param fieldName The name of the field    * @param params The params controlling Highlighting    * @return An appropriate {@link org.apache.lucene.search.highlight.Fragmenter}.    */
DECL|method|getFragmenter
specifier|protected
name|Fragmenter
name|getFragmenter
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|SolrParams
name|params
parameter_list|)
block|{
name|String
name|fmt
init|=
name|params
operator|.
name|getFieldParam
argument_list|(
name|fieldName
argument_list|,
name|HighlightParams
operator|.
name|FRAGMENTER
argument_list|)
decl_stmt|;
name|SolrFragmenter
name|frag
init|=
name|fragmenters
operator|.
name|get
argument_list|(
name|fmt
argument_list|)
decl_stmt|;
if|if
condition|(
name|frag
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown fragmenter: "
operator|+
name|fmt
argument_list|)
throw|;
block|}
return|return
name|frag
operator|.
name|getFragmenter
argument_list|(
name|fieldName
argument_list|,
name|params
argument_list|)
return|;
block|}
DECL|method|getFragListBuilder
specifier|protected
name|FragListBuilder
name|getFragListBuilder
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|SolrParams
name|params
parameter_list|)
block|{
name|String
name|flb
init|=
name|params
operator|.
name|getFieldParam
argument_list|(
name|fieldName
argument_list|,
name|HighlightParams
operator|.
name|FRAG_LIST_BUILDER
argument_list|)
decl_stmt|;
name|SolrFragListBuilder
name|solrFlb
init|=
name|fragListBuilders
operator|.
name|get
argument_list|(
name|flb
argument_list|)
decl_stmt|;
if|if
condition|(
name|solrFlb
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown fragListBuilder: "
operator|+
name|flb
argument_list|)
throw|;
block|}
return|return
name|solrFlb
operator|.
name|getFragListBuilder
argument_list|(
name|params
argument_list|)
return|;
block|}
DECL|method|getFragmentsBuilder
specifier|protected
name|FragmentsBuilder
name|getFragmentsBuilder
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|SolrParams
name|params
parameter_list|)
block|{
name|BoundaryScanner
name|bs
init|=
name|getBoundaryScanner
argument_list|(
name|fieldName
argument_list|,
name|params
argument_list|)
decl_stmt|;
return|return
name|getSolrFragmentsBuilder
argument_list|(
name|fieldName
argument_list|,
name|params
argument_list|)
operator|.
name|getFragmentsBuilder
argument_list|(
name|params
argument_list|,
name|bs
argument_list|)
return|;
block|}
DECL|method|getSolrFragmentsBuilder
specifier|protected
name|SolrFragmentsBuilder
name|getSolrFragmentsBuilder
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|SolrParams
name|params
parameter_list|)
block|{
name|String
name|fb
init|=
name|params
operator|.
name|getFieldParam
argument_list|(
name|fieldName
argument_list|,
name|HighlightParams
operator|.
name|FRAGMENTS_BUILDER
argument_list|)
decl_stmt|;
name|SolrFragmentsBuilder
name|solrFb
init|=
name|fragmentsBuilders
operator|.
name|get
argument_list|(
name|fb
argument_list|)
decl_stmt|;
if|if
condition|(
name|solrFb
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown fragmentsBuilder: "
operator|+
name|fb
argument_list|)
throw|;
block|}
return|return
name|solrFb
return|;
block|}
DECL|method|getBoundaryScanner
specifier|protected
name|BoundaryScanner
name|getBoundaryScanner
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|SolrParams
name|params
parameter_list|)
block|{
name|String
name|bs
init|=
name|params
operator|.
name|getFieldParam
argument_list|(
name|fieldName
argument_list|,
name|HighlightParams
operator|.
name|BOUNDARY_SCANNER
argument_list|)
decl_stmt|;
name|SolrBoundaryScanner
name|solrBs
init|=
name|boundaryScanners
operator|.
name|get
argument_list|(
name|bs
argument_list|)
decl_stmt|;
if|if
condition|(
name|solrBs
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown boundaryScanner: "
operator|+
name|bs
argument_list|)
throw|;
block|}
return|return
name|solrBs
operator|.
name|getBoundaryScanner
argument_list|(
name|fieldName
argument_list|,
name|params
argument_list|)
return|;
block|}
comment|/**    * Generates a list of Highlighted query fragments for each item in a list    * of documents, or returns null if highlighting is disabled.    *    * @param docs query results    * @param query the query    * @param req the current request    * @param defaultFields default list of fields to summarize    *    * @return NamedList containing a NamedList for each document, which in     * turns contains sets (field, summary) pairs.    */
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|doHighlighting
specifier|public
name|NamedList
argument_list|<
name|Object
argument_list|>
name|doHighlighting
parameter_list|(
name|DocList
name|docs
parameter_list|,
name|Query
name|query
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|,
name|String
index|[]
name|defaultFields
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isHighlightingEnabled
argument_list|(
name|params
argument_list|)
condition|)
comment|// also returns early if no unique key field
return|return
literal|null
return|;
name|SolrIndexSearcher
name|searcher
init|=
name|req
operator|.
name|getSearcher
argument_list|()
decl_stmt|;
name|IndexSchema
name|schema
init|=
name|searcher
operator|.
name|getSchema
argument_list|()
decl_stmt|;
comment|// fetch unique key if one exists.
name|SchemaField
name|keyField
init|=
name|schema
operator|.
name|getUniqueKeyField
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyField
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
comment|//exit early; we need a unique key field to populate the response
block|}
name|String
index|[]
name|fieldNames
init|=
name|getHighlightFields
argument_list|(
name|query
argument_list|,
name|req
argument_list|,
name|defaultFields
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|preFetchFieldNames
init|=
name|getDocPrefetchFieldNames
argument_list|(
name|fieldNames
argument_list|,
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
name|preFetchFieldNames
operator|!=
literal|null
condition|)
block|{
name|preFetchFieldNames
operator|.
name|add
argument_list|(
name|keyField
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|FastVectorHighlighter
name|fvh
init|=
literal|null
decl_stmt|;
comment|// lazy
name|FieldQuery
name|fvhFieldQuery
init|=
literal|null
decl_stmt|;
comment|// lazy
comment|// Highlight each document
name|NamedList
name|fragments
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
name|DocIterator
name|iterator
init|=
name|docs
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|docId
init|=
name|iterator
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
name|StoredDocument
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|docId
argument_list|,
name|preFetchFieldNames
argument_list|)
decl_stmt|;
name|NamedList
name|docSummaries
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|fieldNames
control|)
block|{
if|if
condition|(
name|useFastVectorHighlighter
argument_list|(
name|params
argument_list|,
name|schema
argument_list|,
name|fieldName
argument_list|)
condition|)
block|{
if|if
condition|(
name|fvhFieldQuery
operator|==
literal|null
condition|)
block|{
name|fvh
operator|=
operator|new
name|FastVectorHighlighter
argument_list|(
comment|// FVH cannot process hl.usePhraseHighlighter parameter per-field basis
name|params
operator|.
name|getBool
argument_list|(
name|HighlightParams
operator|.
name|USE_PHRASE_HIGHLIGHTER
argument_list|,
literal|true
argument_list|)
argument_list|,
comment|// FVH cannot process hl.requireFieldMatch parameter per-field basis
name|params
operator|.
name|getBool
argument_list|(
name|HighlightParams
operator|.
name|FIELD_MATCH
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|fvh
operator|.
name|setPhraseLimit
argument_list|(
name|params
operator|.
name|getInt
argument_list|(
name|HighlightParams
operator|.
name|PHRASE_LIMIT
argument_list|,
name|SolrHighlighter
operator|.
name|DEFAULT_PHRASE_LIMIT
argument_list|)
argument_list|)
expr_stmt|;
name|fvhFieldQuery
operator|=
name|fvh
operator|.
name|getFieldQuery
argument_list|(
name|query
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|doHighlightingByFastVectorHighlighter
argument_list|(
name|fvh
argument_list|,
name|fvhFieldQuery
argument_list|,
name|req
argument_list|,
name|docSummaries
argument_list|,
name|docId
argument_list|,
name|doc
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doHighlightingByHighlighter
argument_list|(
name|query
argument_list|,
name|req
argument_list|,
name|docSummaries
argument_list|,
name|docId
argument_list|,
name|doc
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// for each field
name|fragments
operator|.
name|add
argument_list|(
name|schema
operator|.
name|printableUniqueKey
argument_list|(
name|doc
argument_list|)
argument_list|,
name|docSummaries
argument_list|)
expr_stmt|;
block|}
comment|// for each doc
return|return
name|fragments
return|;
block|}
comment|/** Returns the field names to be passed to {@link SolrIndexSearcher#doc(int, Set)}.    * Subclasses might over-ride to include fields in search-results and other stored field values needed so as to avoid    * the possibility of extra trips to disk.  The uniqueKey will be added after if the result isn't null. */
DECL|method|getDocPrefetchFieldNames
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|getDocPrefetchFieldNames
parameter_list|(
name|String
index|[]
name|hlFieldNames
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|preFetchFieldNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|hlFieldNames
operator|.
name|length
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|//+1 for uniqueyKey added after
name|Collections
operator|.
name|addAll
argument_list|(
name|preFetchFieldNames
argument_list|,
name|hlFieldNames
argument_list|)
expr_stmt|;
return|return
name|preFetchFieldNames
return|;
block|}
comment|/**    * If fieldName is undefined, this method returns false, then    * doHighlightingByHighlighter() will do nothing for the field.    */
DECL|method|useFastVectorHighlighter
specifier|protected
name|boolean
name|useFastVectorHighlighter
parameter_list|(
name|SolrParams
name|params
parameter_list|,
name|IndexSchema
name|schema
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|SchemaField
name|schemaField
init|=
name|schema
operator|.
name|getFieldOrNull
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemaField
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|useFvhParam
init|=
name|params
operator|.
name|getFieldBool
argument_list|(
name|fieldName
argument_list|,
name|HighlightParams
operator|.
name|USE_FVH
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|useFvhParam
condition|)
return|return
literal|false
return|;
name|boolean
name|termPosOff
init|=
name|schemaField
operator|.
name|storeTermPositions
argument_list|()
operator|&&
name|schemaField
operator|.
name|storeTermOffsets
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|termPosOff
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Solr will use Highlighter instead of FastVectorHighlighter because {} field does not store TermPositions and TermOffsets."
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
block|}
return|return
name|termPosOff
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|doHighlightingByFastVectorHighlighter
specifier|protected
name|void
name|doHighlightingByFastVectorHighlighter
parameter_list|(
name|FastVectorHighlighter
name|highlighter
parameter_list|,
name|FieldQuery
name|fieldQuery
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|,
name|NamedList
name|docSummaries
parameter_list|,
name|int
name|docId
parameter_list|,
name|StoredDocument
name|doc
parameter_list|,
name|String
name|fieldName
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|SolrFragmentsBuilder
name|solrFb
init|=
name|getSolrFragmentsBuilder
argument_list|(
name|fieldName
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|String
index|[]
name|snippets
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|fieldQuery
argument_list|,
name|req
operator|.
name|getSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
argument_list|,
name|docId
argument_list|,
name|fieldName
argument_list|,
name|params
operator|.
name|getFieldInt
argument_list|(
name|fieldName
argument_list|,
name|HighlightParams
operator|.
name|FRAGSIZE
argument_list|,
literal|100
argument_list|)
argument_list|,
name|params
operator|.
name|getFieldInt
argument_list|(
name|fieldName
argument_list|,
name|HighlightParams
operator|.
name|SNIPPETS
argument_list|,
literal|1
argument_list|)
argument_list|,
name|getFragListBuilder
argument_list|(
name|fieldName
argument_list|,
name|params
argument_list|)
argument_list|,
name|getFragmentsBuilder
argument_list|(
name|fieldName
argument_list|,
name|params
argument_list|)
argument_list|,
name|solrFb
operator|.
name|getPreTags
argument_list|(
name|params
argument_list|,
name|fieldName
argument_list|)
argument_list|,
name|solrFb
operator|.
name|getPostTags
argument_list|(
name|params
argument_list|,
name|fieldName
argument_list|)
argument_list|,
name|getEncoder
argument_list|(
name|fieldName
argument_list|,
name|params
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|snippets
operator|!=
literal|null
operator|&&
name|snippets
operator|.
name|length
operator|>
literal|0
condition|)
name|docSummaries
operator|.
name|add
argument_list|(
name|fieldName
argument_list|,
name|snippets
argument_list|)
expr_stmt|;
else|else
name|alternateField
argument_list|(
name|docSummaries
argument_list|,
name|params
argument_list|,
name|doc
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|doHighlightingByHighlighter
specifier|protected
name|void
name|doHighlightingByHighlighter
parameter_list|(
name|Query
name|query
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|,
name|NamedList
name|docSummaries
parameter_list|,
name|int
name|docId
parameter_list|,
name|StoredDocument
name|doc
parameter_list|,
name|String
name|fieldName
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SolrIndexSearcher
name|searcher
init|=
name|req
operator|.
name|getSearcher
argument_list|()
decl_stmt|;
specifier|final
name|IndexSchema
name|schema
init|=
name|searcher
operator|.
name|getSchema
argument_list|()
decl_stmt|;
specifier|final
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
comment|// TODO: highlighting numeric fields is broken (Lucene) - so we disable them until fixed (see LUCENE-3080)!
comment|// BEGIN: Hack
specifier|final
name|SchemaField
name|schemaField
init|=
name|schema
operator|.
name|getFieldOrNull
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemaField
operator|!=
literal|null
operator|&&
name|schemaField
operator|.
name|getType
argument_list|()
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|TrieField
condition|)
return|return;
comment|// END: Hack
specifier|final
name|int
name|mvToExamine
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getFieldInt
argument_list|(
name|fieldName
argument_list|,
name|HighlightParams
operator|.
name|MAX_MULTIVALUED_TO_EXAMINE
argument_list|,
operator|(
name|schemaField
operator|!=
literal|null
operator|&&
name|schemaField
operator|.
name|multiValued
argument_list|()
operator|)
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
literal|1
argument_list|)
decl_stmt|;
comment|// Technically this is the max *fragments* (snippets), not max values:
name|int
name|mvToMatch
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getFieldInt
argument_list|(
name|fieldName
argument_list|,
name|HighlightParams
operator|.
name|MAX_MULTIVALUED_TO_MATCH
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
if|if
condition|(
name|mvToExamine
operator|<=
literal|0
operator|||
name|mvToMatch
operator|<=
literal|0
condition|)
block|{
return|return;
block|}
name|int
name|maxCharsToAnalyze
init|=
name|params
operator|.
name|getFieldInt
argument_list|(
name|fieldName
argument_list|,
name|HighlightParams
operator|.
name|MAX_CHARS
argument_list|,
name|Highlighter
operator|.
name|DEFAULT_MAX_CHARS_TO_ANALYZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxCharsToAnalyze
operator|<
literal|0
condition|)
block|{
comment|//e.g. -1
name|maxCharsToAnalyze
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|fieldValues
init|=
name|getFieldValues
argument_list|(
name|req
argument_list|,
name|doc
argument_list|,
name|fieldName
argument_list|,
name|mvToExamine
argument_list|,
name|maxCharsToAnalyze
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldValues
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// preserve order of values in a multiValued list
name|boolean
name|preserveMulti
init|=
name|params
operator|.
name|getFieldBool
argument_list|(
name|fieldName
argument_list|,
name|HighlightParams
operator|.
name|PRESERVE_MULTI
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|numFragments
init|=
name|getMaxSnippets
argument_list|(
name|fieldName
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|boolean
name|mergeContiguousFragments
init|=
name|isMergeContiguousFragments
argument_list|(
name|fieldName
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TextFragment
argument_list|>
name|frags
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|//Try term vectors, which is faster
specifier|final
name|TokenStream
name|tvStream
init|=
name|TokenSources
operator|.
name|getTokenStreamWithOffsets
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|,
name|docId
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
comment|//  We need to wrap in OffsetWindowTokenFilter if multi-valued
specifier|final
name|OffsetWindowTokenFilter
name|tvWindowStream
decl_stmt|;
if|if
condition|(
name|tvStream
operator|!=
literal|null
operator|&&
name|fieldValues
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|tvWindowStream
operator|=
operator|new
name|OffsetWindowTokenFilter
argument_list|(
name|tvStream
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tvWindowStream
operator|=
literal|null
expr_stmt|;
block|}
for|for
control|(
name|String
name|thisText
range|:
name|fieldValues
control|)
block|{
if|if
condition|(
name|mvToMatch
operator|<=
literal|0
operator|||
name|maxCharsToAnalyze
operator|<=
literal|0
condition|)
block|{
break|break;
block|}
name|TokenStream
name|tstream
decl_stmt|;
if|if
condition|(
name|tvWindowStream
operator|!=
literal|null
condition|)
block|{
comment|// if we have a multi-valued field with term vectors, then get the next offset window
name|tstream
operator|=
name|tvWindowStream
operator|.
name|advanceToNextWindowOfLength
argument_list|(
name|thisText
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tvStream
operator|!=
literal|null
condition|)
block|{
name|tstream
operator|=
name|tvStream
expr_stmt|;
comment|// single-valued with term vectors
block|}
else|else
block|{
comment|// fall back to analyzer
name|tstream
operator|=
name|createAnalyzerTStream
argument_list|(
name|schema
argument_list|,
name|fieldName
argument_list|,
name|thisText
argument_list|)
expr_stmt|;
block|}
name|Highlighter
name|highlighter
decl_stmt|;
if|if
condition|(
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getFieldBool
argument_list|(
name|fieldName
argument_list|,
name|HighlightParams
operator|.
name|USE_PHRASE_HIGHLIGHTER
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// We're going to call getPhraseHighlighter and it might consume the tokenStream. If it does, the tokenStream
comment|// needs to implement reset() efficiently.
comment|//If the tokenStream is right from the term vectors, then CachingTokenFilter is unnecessary.
comment|//  It should be okay if OffsetLimit won't get applied in this case.
specifier|final
name|TokenStream
name|tempTokenStream
decl_stmt|;
if|if
condition|(
name|tstream
operator|!=
name|tvStream
condition|)
block|{
if|if
condition|(
name|maxCharsToAnalyze
operator|>=
name|thisText
operator|.
name|length
argument_list|()
condition|)
block|{
name|tempTokenStream
operator|=
operator|new
name|CachingTokenFilter
argument_list|(
name|tstream
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tempTokenStream
operator|=
operator|new
name|CachingTokenFilter
argument_list|(
operator|new
name|OffsetLimitTokenFilter
argument_list|(
name|tstream
argument_list|,
name|maxCharsToAnalyze
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|tempTokenStream
operator|=
name|tstream
expr_stmt|;
block|}
comment|// get highlighter
name|highlighter
operator|=
name|getPhraseHighlighter
argument_list|(
name|query
argument_list|,
name|fieldName
argument_list|,
name|req
argument_list|,
name|tempTokenStream
argument_list|)
expr_stmt|;
comment|// if the CachingTokenFilter was consumed then use it going forward.
if|if
condition|(
name|tempTokenStream
operator|instanceof
name|CachingTokenFilter
operator|&&
operator|(
operator|(
name|CachingTokenFilter
operator|)
name|tempTokenStream
operator|)
operator|.
name|isCached
argument_list|()
condition|)
block|{
name|tstream
operator|=
name|tempTokenStream
expr_stmt|;
block|}
comment|//tstream.reset(); not needed; getBestTextFragments will reset it.
block|}
else|else
block|{
comment|// use "the old way"
name|highlighter
operator|=
name|getHighlighter
argument_list|(
name|query
argument_list|,
name|fieldName
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
name|highlighter
operator|.
name|setMaxDocCharsToAnalyze
argument_list|(
name|maxCharsToAnalyze
argument_list|)
expr_stmt|;
name|maxCharsToAnalyze
operator|-=
name|thisText
operator|.
name|length
argument_list|()
expr_stmt|;
comment|// Highlight!
try|try
block|{
name|TextFragment
index|[]
name|bestTextFragments
init|=
name|highlighter
operator|.
name|getBestTextFragments
argument_list|(
name|tstream
argument_list|,
name|thisText
argument_list|,
name|mergeContiguousFragments
argument_list|,
name|numFragments
argument_list|)
decl_stmt|;
for|for
control|(
name|TextFragment
name|bestTextFragment
range|:
name|bestTextFragments
control|)
block|{
if|if
condition|(
name|bestTextFragment
operator|==
literal|null
condition|)
comment|//can happen via mergeContiguousFragments
continue|continue;
comment|// normally we want a score (must be highlighted), but if preserveMulti then we return a snippet regardless.
if|if
condition|(
name|bestTextFragment
operator|.
name|getScore
argument_list|()
operator|>
literal|0
operator|||
name|preserveMulti
condition|)
block|{
name|frags
operator|.
name|add
argument_list|(
name|bestTextFragment
argument_list|)
expr_stmt|;
if|if
condition|(
name|bestTextFragment
operator|.
name|getScore
argument_list|()
operator|>
literal|0
condition|)
operator|--
name|mvToMatch
expr_stmt|;
comment|// note: limits fragments (for multi-valued fields), not quite the number of values
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InvalidTokenOffsetsException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|//end field value loop
comment|// Put the fragments onto the Solr response (docSummaries)
if|if
condition|(
name|frags
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// sort such that the fragments with the highest score come first
if|if
condition|(
operator|!
name|preserveMulti
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|frags
argument_list|,
operator|new
name|Comparator
argument_list|<
name|TextFragment
argument_list|>
argument_list|()
block|{
comment|//TODO make TextFragment Comparable
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|TextFragment
name|arg0
parameter_list|,
name|TextFragment
name|arg1
parameter_list|)
block|{
return|return
name|Float
operator|.
name|compare
argument_list|(
name|arg1
operator|.
name|getScore
argument_list|()
argument_list|,
name|arg0
operator|.
name|getScore
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// Truncate list to hl.snippets, but not when hl.preserveMulti
if|if
condition|(
name|frags
operator|.
name|size
argument_list|()
operator|>
name|numFragments
operator|&&
operator|!
name|preserveMulti
condition|)
block|{
name|frags
operator|=
name|frags
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|numFragments
argument_list|)
expr_stmt|;
block|}
name|docSummaries
operator|.
name|add
argument_list|(
name|fieldName
argument_list|,
name|getResponseForFragments
argument_list|(
name|frags
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no summaries made, copy text from alternate field
name|alternateField
argument_list|(
name|docSummaries
argument_list|,
name|params
argument_list|,
name|doc
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Fetches field values to highlight. If the field value should come from an atypical place (or another aliased    * field name, then a subclass could override to implement that.    */
DECL|method|getFieldValues
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getFieldValues
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|StoredDocument
name|doc
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|int
name|maxValues
parameter_list|,
name|int
name|maxCharsToAnalyze
parameter_list|)
block|{
comment|// Collect the Fields we will examine (could be more than one if multi-valued)
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|StorableField
name|thisField
range|:
name|doc
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|thisField
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|value
init|=
name|thisField
operator|.
name|stringValue
argument_list|()
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|maxCharsToAnalyze
operator|-=
name|value
operator|.
name|length
argument_list|()
expr_stmt|;
comment|//we exit early if we'll never get to analyze the value
name|maxValues
operator|--
expr_stmt|;
if|if
condition|(
name|maxValues
operator|<=
literal|0
operator|||
name|maxCharsToAnalyze
operator|<=
literal|0
condition|)
block|{
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/** Given the fragments, return the result to be put in the field {@link NamedList}. This is an extension    * point to allow adding other metadata like the absolute offsets or scores.    */
DECL|method|getResponseForFragments
specifier|protected
name|Object
name|getResponseForFragments
parameter_list|(
name|List
argument_list|<
name|TextFragment
argument_list|>
name|frags
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|)
block|{
comment|// TODO: we can include score and position information in output as snippet attributes
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fragTexts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|TextFragment
name|fragment
range|:
name|frags
control|)
block|{
name|fragTexts
operator|.
name|add
argument_list|(
name|fragment
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|fragTexts
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|fragTexts
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|alternateField
specifier|protected
name|void
name|alternateField
parameter_list|(
name|NamedList
name|docSummaries
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|StoredDocument
name|doc
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|String
name|alternateField
init|=
name|params
operator|.
name|getFieldParam
argument_list|(
name|fieldName
argument_list|,
name|HighlightParams
operator|.
name|ALTERNATE_FIELD
argument_list|)
decl_stmt|;
if|if
condition|(
name|alternateField
operator|!=
literal|null
operator|&&
name|alternateField
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|StorableField
index|[]
name|docFields
init|=
name|doc
operator|.
name|getFields
argument_list|(
name|alternateField
argument_list|)
decl_stmt|;
if|if
condition|(
name|docFields
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// The alternate field did not exist, treat the original field as fallback instead
name|docFields
operator|=
name|doc
operator|.
name|getFields
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|listFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|StorableField
name|field
range|:
name|docFields
control|)
block|{
if|if
condition|(
name|field
operator|.
name|binaryValue
argument_list|()
operator|==
literal|null
condition|)
name|listFields
operator|.
name|add
argument_list|(
name|field
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|altTexts
init|=
name|listFields
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|listFields
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|altTexts
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Encoder
name|encoder
init|=
name|getEncoder
argument_list|(
name|fieldName
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|int
name|alternateFieldLen
init|=
name|params
operator|.
name|getFieldInt
argument_list|(
name|fieldName
argument_list|,
name|HighlightParams
operator|.
name|ALTERNATE_FIELD_LENGTH
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|altList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|altText
range|:
name|altTexts
control|)
block|{
if|if
condition|(
name|alternateFieldLen
operator|<=
literal|0
condition|)
block|{
name|altList
operator|.
name|add
argument_list|(
name|encoder
operator|.
name|encodeText
argument_list|(
name|altText
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//note: seemingly redundant new String(...) releases memory to the larger text
name|altList
operator|.
name|add
argument_list|(
name|len
operator|+
name|altText
operator|.
name|length
argument_list|()
operator|>
name|alternateFieldLen
condition|?
name|encoder
operator|.
name|encodeText
argument_list|(
operator|new
name|String
argument_list|(
name|altText
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|alternateFieldLen
operator|-
name|len
argument_list|)
argument_list|)
argument_list|)
else|:
name|encoder
operator|.
name|encodeText
argument_list|(
name|altText
argument_list|)
argument_list|)
expr_stmt|;
name|len
operator|+=
name|altText
operator|.
name|length
argument_list|()
expr_stmt|;
if|if
condition|(
name|len
operator|>=
name|alternateFieldLen
condition|)
break|break;
block|}
block|}
name|docSummaries
operator|.
name|add
argument_list|(
name|fieldName
argument_list|,
name|altList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createAnalyzerTStream
specifier|protected
name|TokenStream
name|createAnalyzerTStream
parameter_list|(
name|IndexSchema
name|schema
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|String
name|docText
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|TokenOrderingFilter
argument_list|(
name|schema
operator|.
name|getIndexAnalyzer
argument_list|()
operator|.
name|tokenStream
argument_list|(
name|fieldName
argument_list|,
name|docText
argument_list|)
argument_list|,
literal|10
argument_list|)
return|;
block|}
block|}
end_class
begin_comment
comment|/** Orders Tokens in a window first by their startOffset ascending.  * endOffset is currently ignored.  * This is meant to work around fickleness in the highlighter only.  It  * can mess up token positions and should not be used for indexing or querying.  */
end_comment
begin_class
DECL|class|TokenOrderingFilter
specifier|final
class|class
name|TokenOrderingFilter
extends|extends
name|TokenFilter
block|{
DECL|field|windowSize
specifier|private
specifier|final
name|int
name|windowSize
decl_stmt|;
DECL|field|queue
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|OrderedToken
argument_list|>
name|queue
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
comment|//TODO replace with Deque, Array impl
DECL|field|done
specifier|private
name|boolean
name|done
init|=
literal|false
decl_stmt|;
DECL|field|offsetAtt
specifier|private
specifier|final
name|OffsetAttribute
name|offsetAtt
init|=
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|TokenOrderingFilter
specifier|protected
name|TokenOrderingFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|,
name|int
name|windowSize
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|this
operator|.
name|windowSize
operator|=
name|windowSize
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|queue
operator|.
name|clear
argument_list|()
expr_stmt|;
name|done
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
operator|!
name|done
operator|&&
name|queue
operator|.
name|size
argument_list|()
operator|<
name|windowSize
condition|)
block|{
if|if
condition|(
operator|!
name|input
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
break|break;
block|}
comment|// reverse iterating for better efficiency since we know the
comment|// list is already sorted, and most token start offsets will be too.
name|ListIterator
argument_list|<
name|OrderedToken
argument_list|>
name|iter
init|=
name|queue
operator|.
name|listIterator
argument_list|(
name|queue
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasPrevious
argument_list|()
condition|)
block|{
if|if
condition|(
name|offsetAtt
operator|.
name|startOffset
argument_list|()
operator|>=
name|iter
operator|.
name|previous
argument_list|()
operator|.
name|startOffset
condition|)
block|{
comment|// insertion will be before what next() would return (what
comment|// we just compared against), so move back one so the insertion
comment|// will be after.
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|OrderedToken
name|ot
init|=
operator|new
name|OrderedToken
argument_list|()
decl_stmt|;
name|ot
operator|.
name|state
operator|=
name|captureState
argument_list|()
expr_stmt|;
name|ot
operator|.
name|startOffset
operator|=
name|offsetAtt
operator|.
name|startOffset
argument_list|()
expr_stmt|;
name|iter
operator|.
name|add
argument_list|(
name|ot
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|restoreState
argument_list|(
name|queue
operator|.
name|removeFirst
argument_list|()
operator|.
name|state
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
end_class
begin_comment
comment|// for TokenOrderingFilter, so it can easily sort by startOffset
end_comment
begin_class
DECL|class|OrderedToken
class|class
name|OrderedToken
block|{
DECL|field|state
name|State
name|state
decl_stmt|;
DECL|field|startOffset
name|int
name|startOffset
decl_stmt|;
block|}
end_class
begin_comment
comment|/** For use with term vectors of multi-valued fields. We want an offset based window into its TokenStream. */
end_comment
begin_class
DECL|class|OffsetWindowTokenFilter
specifier|final
class|class
name|OffsetWindowTokenFilter
extends|extends
name|TokenFilter
block|{
DECL|field|offsetAtt
specifier|private
specifier|final
name|OffsetAttribute
name|offsetAtt
init|=
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|posIncAtt
specifier|private
specifier|final
name|PositionIncrementAttribute
name|posIncAtt
init|=
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|windowStartOffset
specifier|private
name|int
name|windowStartOffset
decl_stmt|;
DECL|field|windowEndOffset
specifier|private
name|int
name|windowEndOffset
init|=
operator|-
literal|1
decl_stmt|;
comment|//exclusive
DECL|field|windowTokenIncremented
specifier|private
name|boolean
name|windowTokenIncremented
init|=
literal|false
decl_stmt|;
DECL|field|inputWasReset
specifier|private
name|boolean
name|inputWasReset
init|=
literal|false
decl_stmt|;
DECL|field|capturedState
specifier|private
name|State
name|capturedState
decl_stmt|;
comment|//only used for first token of each subsequent window
DECL|method|OffsetWindowTokenFilter
name|OffsetWindowTokenFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
comment|//input should not have been reset already
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
comment|//Called at the start of each value/window
DECL|method|advanceToNextWindowOfLength
name|OffsetWindowTokenFilter
name|advanceToNextWindowOfLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|windowStartOffset
operator|=
name|windowEndOffset
operator|+
literal|1
expr_stmt|;
comment|//unclear why there's a single offset gap between values, but tests show it
name|windowEndOffset
operator|=
name|windowStartOffset
operator|+
name|length
expr_stmt|;
name|windowTokenIncremented
operator|=
literal|false
expr_stmt|;
comment|//thereby permit reset()
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
comment|//we do some state checking to ensure this is being used correctly
if|if
condition|(
name|windowTokenIncremented
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"This TokenStream does not support being subsequently reset()"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|inputWasReset
condition|)
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|inputWasReset
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|inputWasReset
assert|;
name|windowTokenIncremented
operator|=
literal|true
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|//increment Token
if|if
condition|(
name|capturedState
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|input
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
name|restoreState
argument_list|(
name|capturedState
argument_list|)
expr_stmt|;
name|capturedState
operator|=
literal|null
expr_stmt|;
comment|//Set posInc to 1 on first token of subsequent windows. To be thorough, we could subtract posIncGap?
name|posIncAtt
operator|.
name|setPositionIncrement
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|startOffset
init|=
name|offsetAtt
operator|.
name|startOffset
argument_list|()
decl_stmt|;
specifier|final
name|int
name|endOffset
init|=
name|offsetAtt
operator|.
name|endOffset
argument_list|()
decl_stmt|;
if|if
condition|(
name|startOffset
operator|>=
name|windowEndOffset
condition|)
block|{
comment|//end of window
name|capturedState
operator|=
name|captureState
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|startOffset
operator|>=
name|windowStartOffset
condition|)
block|{
comment|//in this window
name|offsetAtt
operator|.
name|setOffset
argument_list|(
name|startOffset
operator|-
name|windowStartOffset
argument_list|,
name|endOffset
operator|-
name|windowStartOffset
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|//otherwise this token is before the window; continue to advance
block|}
block|}
block|}
end_class
end_unit
