begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.servlet
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Aliases
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|MapSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ContentStreamBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|ConfigSolr
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ContentStreamHandlerBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|BinaryQueryResponseWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|QueryResponseWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|cache
operator|.
name|HttpCacheHeaderUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|cache
operator|.
name|Method
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
operator|.
name|DistributingUpdateProcessorFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|FastWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|WeakHashMap
import|;
end_import
begin_comment
comment|/**  * This filter looks at the incoming URL maps them to handlers defined in solrconfig.xml  *  * @since solr 1.2  */
end_comment
begin_class
DECL|class|SolrDispatchFilter
specifier|public
class|class
name|SolrDispatchFilter
implements|implements
name|Filter
block|{
DECL|field|CONNECTION_HEADER
specifier|private
specifier|static
specifier|final
name|String
name|CONNECTION_HEADER
init|=
literal|"Connection"
decl_stmt|;
DECL|field|TRANSFER_ENCODING_HEADER
specifier|private
specifier|static
specifier|final
name|String
name|TRANSFER_ENCODING_HEADER
init|=
literal|"Transfer-Encoding"
decl_stmt|;
DECL|field|log
specifier|final
name|Logger
name|log
decl_stmt|;
DECL|field|cores
specifier|protected
specifier|volatile
name|CoreContainer
name|cores
decl_stmt|;
DECL|field|pathPrefix
specifier|protected
name|String
name|pathPrefix
init|=
literal|null
decl_stmt|;
comment|// strip this from the beginning of a path
DECL|field|abortErrorMessage
specifier|protected
name|String
name|abortErrorMessage
init|=
literal|null
decl_stmt|;
DECL|field|UTF8
specifier|private
specifier|static
specifier|final
name|Charset
name|UTF8
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
DECL|method|SolrDispatchFilter
specifier|public
name|SolrDispatchFilter
parameter_list|()
block|{
try|try
block|{
name|log
operator|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SolrDispatchFilter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoClassDefFoundError
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not find necessary SLF4j logging jars. If using Jetty, the SLF4j logging jars need to go in "
operator|+
literal|"the jetty lib/ext directory. For other containers, the corresponding directory should be used. "
operator|+
literal|"For more information, see: http://wiki.apache.org/solr/SolrLogging"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"SolrDispatchFilter.init()"
argument_list|)
expr_stmt|;
try|try
block|{
comment|// web.xml configuration
name|this
operator|.
name|pathPrefix
operator|=
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"path-prefix"
argument_list|)
expr_stmt|;
name|this
operator|.
name|cores
operator|=
name|createCoreContainer
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"user.dir="
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// catch this so our filter still works
name|log
operator|.
name|error
argument_list|(
literal|"Could not start Solr. Check solr/home property and the logs"
argument_list|)
expr_stmt|;
name|SolrCore
operator|.
name|log
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|t
throw|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"SolrDispatchFilter.init() done"
argument_list|)
expr_stmt|;
block|}
DECL|method|loadConfigSolr
specifier|private
name|ConfigSolr
name|loadConfigSolr
parameter_list|(
name|SolrResourceLoader
name|loader
parameter_list|)
block|{
name|String
name|solrxmlLocation
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"solr.solrxml.location"
argument_list|,
literal|"solrhome"
argument_list|)
decl_stmt|;
if|if
condition|(
name|solrxmlLocation
operator|==
literal|null
operator|||
literal|"solrhome"
operator|.
name|equalsIgnoreCase
argument_list|(
name|solrxmlLocation
argument_list|)
condition|)
return|return
name|ConfigSolr
operator|.
name|fromSolrHome
argument_list|(
name|loader
argument_list|,
name|loader
operator|.
name|getInstanceDir
argument_list|()
argument_list|)
return|;
if|if
condition|(
literal|"zookeeper"
operator|.
name|equalsIgnoreCase
argument_list|(
name|solrxmlLocation
argument_list|)
condition|)
block|{
name|String
name|zkHost
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"zkHost"
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Trying to read solr.xml from "
operator|+
name|zkHost
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|zkHost
argument_list|)
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not load solr.xml from zookeeper: zkHost system property not set"
argument_list|)
throw|;
name|SolrZkClient
name|zkClient
init|=
operator|new
name|SolrZkClient
argument_list|(
name|zkHost
argument_list|,
literal|30000
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|zkClient
operator|.
name|exists
argument_list|(
literal|"/solr.xml"
argument_list|,
literal|true
argument_list|)
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not load solr.xml from zookeeper: node not found"
argument_list|)
throw|;
name|byte
index|[]
name|data
init|=
name|zkClient
operator|.
name|getData
argument_list|(
literal|"/solr.xml"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|ConfigSolr
operator|.
name|fromInputStream
argument_list|(
name|loader
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not load solr.xml from zookeeper"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|zkClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Bad solr.solrxml.location set: "
operator|+
name|solrxmlLocation
operator|+
literal|" - should be 'solrhome' or 'zookeeper'"
argument_list|)
throw|;
block|}
comment|/**    * Override this to change CoreContainer initialization    * @return a CoreContainer to hold this server's cores    */
DECL|method|createCoreContainer
specifier|protected
name|CoreContainer
name|createCoreContainer
parameter_list|()
block|{
name|SolrResourceLoader
name|loader
init|=
operator|new
name|SolrResourceLoader
argument_list|(
name|SolrResourceLoader
operator|.
name|locateSolrHome
argument_list|()
argument_list|)
decl_stmt|;
name|ConfigSolr
name|config
init|=
name|loadConfigSolr
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|CoreContainer
name|cores
init|=
operator|new
name|CoreContainer
argument_list|(
name|loader
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|cores
operator|.
name|load
argument_list|()
expr_stmt|;
return|return
name|cores
return|;
block|}
DECL|method|getCores
specifier|public
name|CoreContainer
name|getCores
parameter_list|()
block|{
return|return
name|cores
return|;
block|}
annotation|@
name|Override
DECL|method|destroy
specifier|public
name|void
name|destroy
parameter_list|()
block|{
if|if
condition|(
name|cores
operator|!=
literal|null
condition|)
block|{
name|cores
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cores
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doFilter
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|request
parameter_list|,
name|ServletResponse
name|response
parameter_list|,
name|FilterChain
name|chain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|chain
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|doFilter
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|request
parameter_list|,
name|ServletResponse
name|response
parameter_list|,
name|FilterChain
name|chain
parameter_list|,
name|boolean
name|retry
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
if|if
condition|(
name|abortErrorMessage
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|HttpServletResponse
operator|)
name|response
operator|)
operator|.
name|sendError
argument_list|(
literal|500
argument_list|,
name|abortErrorMessage
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|this
operator|.
name|cores
operator|==
literal|null
condition|)
block|{
operator|(
operator|(
name|HttpServletResponse
operator|)
name|response
operator|)
operator|.
name|sendError
argument_list|(
literal|503
argument_list|,
literal|"Server is shutting down or failed to initialize"
argument_list|)
expr_stmt|;
return|return;
block|}
name|CoreContainer
name|cores
init|=
name|this
operator|.
name|cores
decl_stmt|;
name|SolrCore
name|core
init|=
literal|null
decl_stmt|;
name|SolrQueryRequest
name|solrReq
init|=
literal|null
decl_stmt|;
name|Aliases
name|aliases
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|instanceof
name|HttpServletRequest
condition|)
block|{
name|HttpServletRequest
name|req
init|=
operator|(
name|HttpServletRequest
operator|)
name|request
decl_stmt|;
name|HttpServletResponse
name|resp
init|=
operator|(
name|HttpServletResponse
operator|)
name|response
decl_stmt|;
name|SolrRequestHandler
name|handler
init|=
literal|null
decl_stmt|;
name|String
name|corename
init|=
literal|""
decl_stmt|;
name|String
name|origCorename
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// put the core container in request attribute
name|req
operator|.
name|setAttribute
argument_list|(
literal|"org.apache.solr.CoreContainer"
argument_list|,
name|cores
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|req
operator|.
name|getServletPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|req
operator|.
name|getPathInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// this lets you handle /update/commit when /update is a servlet
name|path
operator|+=
name|req
operator|.
name|getPathInfo
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pathPrefix
operator|!=
literal|null
operator|&&
name|path
operator|.
name|startsWith
argument_list|(
name|pathPrefix
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
name|pathPrefix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check for management path
name|String
name|alternate
init|=
name|cores
operator|.
name|getManagementPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|alternate
operator|!=
literal|null
operator|&&
name|path
operator|.
name|startsWith
argument_list|(
name|alternate
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|alternate
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// unused feature ?
name|int
name|idx
init|=
name|path
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
comment|// save the portion after the ':' for a 'handler' path parameter
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
comment|// Check for the core admin page
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
name|cores
operator|.
name|getAdminPath
argument_list|()
argument_list|)
condition|)
block|{
name|handler
operator|=
name|cores
operator|.
name|getMultiCoreHandler
argument_list|()
expr_stmt|;
name|solrReq
operator|=
name|SolrRequestParsers
operator|.
name|DEFAULT
operator|.
name|parse
argument_list|(
literal|null
argument_list|,
name|path
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|handleAdminRequest
argument_list|(
name|req
argument_list|,
name|response
argument_list|,
name|handler
argument_list|,
name|solrReq
argument_list|)
expr_stmt|;
return|return;
block|}
name|boolean
name|usingAliases
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|collectionsList
init|=
literal|null
decl_stmt|;
comment|// Check for the core admin collections url
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
literal|"/admin/collections"
argument_list|)
condition|)
block|{
name|handler
operator|=
name|cores
operator|.
name|getCollectionsHandler
argument_list|()
expr_stmt|;
name|solrReq
operator|=
name|SolrRequestParsers
operator|.
name|DEFAULT
operator|.
name|parse
argument_list|(
literal|null
argument_list|,
name|path
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|handleAdminRequest
argument_list|(
name|req
argument_list|,
name|response
argument_list|,
name|handler
argument_list|,
name|solrReq
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Check for the core admin info url
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/admin/info"
argument_list|)
condition|)
block|{
name|handler
operator|=
name|cores
operator|.
name|getInfoHandler
argument_list|()
expr_stmt|;
name|solrReq
operator|=
name|SolrRequestParsers
operator|.
name|DEFAULT
operator|.
name|parse
argument_list|(
literal|null
argument_list|,
name|path
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|handleAdminRequest
argument_list|(
name|req
argument_list|,
name|response
argument_list|,
name|handler
argument_list|,
name|solrReq
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
comment|//otherwise, we should find a core from the path
name|idx
operator|=
name|path
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|>
literal|1
condition|)
block|{
comment|// try to get the corename as a request parameter first
name|corename
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|idx
argument_list|)
expr_stmt|;
comment|// look at aliases
if|if
condition|(
name|cores
operator|.
name|isZooKeeperAware
argument_list|()
condition|)
block|{
name|origCorename
operator|=
name|corename
expr_stmt|;
name|ZkStateReader
name|reader
init|=
name|cores
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|aliases
operator|=
name|reader
operator|.
name|getAliases
argument_list|()
expr_stmt|;
if|if
condition|(
name|aliases
operator|!=
literal|null
operator|&&
name|aliases
operator|.
name|collectionAliasSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|usingAliases
operator|=
literal|true
expr_stmt|;
name|String
name|alias
init|=
name|aliases
operator|.
name|getCollectionAlias
argument_list|(
name|corename
argument_list|)
decl_stmt|;
if|if
condition|(
name|alias
operator|!=
literal|null
condition|)
block|{
name|collectionsList
operator|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|alias
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|corename
operator|=
name|collectionsList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|core
operator|=
name|cores
operator|.
name|getCore
argument_list|(
name|corename
argument_list|)
expr_stmt|;
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|core
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|cores
operator|.
name|isZooKeeperAware
argument_list|()
condition|)
block|{
name|core
operator|=
name|cores
operator|.
name|getCore
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|core
operator|==
literal|null
operator|&&
name|cores
operator|.
name|isZooKeeperAware
argument_list|()
condition|)
block|{
comment|// we couldn't find the core - lets make sure a collection was not specified instead
name|core
operator|=
name|getCoreByCollection
argument_list|(
name|cores
argument_list|,
name|corename
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
comment|// we found a core, update the path
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
comment|// if we couldn't find it locally, look on other nodes
if|if
condition|(
name|core
operator|==
literal|null
operator|&&
name|idx
operator|>
literal|0
condition|)
block|{
name|String
name|coreUrl
init|=
name|getRemotCoreUrl
argument_list|(
name|cores
argument_list|,
name|corename
argument_list|,
name|origCorename
argument_list|)
decl_stmt|;
comment|// don't proxy for internal update requests
name|SolrParams
name|queryParams
init|=
name|SolrRequestParsers
operator|.
name|parseQueryString
argument_list|(
name|req
operator|.
name|getQueryString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|coreUrl
operator|!=
literal|null
operator|&&
name|queryParams
operator|.
name|get
argument_list|(
name|DistributingUpdateProcessorFactory
operator|.
name|DISTRIB_UPDATE_PARAM
argument_list|)
operator|==
literal|null
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|remoteQuery
argument_list|(
name|coreUrl
operator|+
name|path
argument_list|,
name|req
argument_list|,
name|solrReq
argument_list|,
name|resp
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|retry
condition|)
block|{
comment|// we couldn't find a core to work with, try reloading aliases
comment|// TODO: it would be nice if admin ui elements skipped this...
name|ZkStateReader
name|reader
init|=
name|cores
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|reader
operator|.
name|updateAliases
argument_list|()
expr_stmt|;
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|chain
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
comment|// try the default core
if|if
condition|(
name|core
operator|==
literal|null
condition|)
block|{
name|core
operator|=
name|cores
operator|.
name|getCore
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
comment|// With a valid core...
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
specifier|final
name|SolrConfig
name|config
init|=
name|core
operator|.
name|getSolrConfig
argument_list|()
decl_stmt|;
comment|// get or create/cache the parser for the core
name|SolrRequestParsers
name|parser
init|=
name|config
operator|.
name|getRequestParsers
argument_list|()
decl_stmt|;
comment|// Handle /schema/* paths via Restlet
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/schema"
argument_list|)
condition|)
block|{
name|solrReq
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|core
argument_list|,
name|path
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|SolrRequestInfo
operator|.
name|setRequestInfo
argument_list|(
operator|new
name|SolrRequestInfo
argument_list|(
name|solrReq
argument_list|,
operator|new
name|SolrQueryResponse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getServletPath
argument_list|()
argument_list|)
condition|)
block|{
comment|// avoid endless loop - pass through to Restlet via webapp
name|chain
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// forward rewritten URI (without path prefix and core/collection name) to Restlet
name|req
operator|.
name|getRequestDispatcher
argument_list|(
name|path
argument_list|)
operator|.
name|forward
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
comment|// Determine the handler from the url path if not set
comment|// (we might already have selected the cores handler)
if|if
condition|(
name|handler
operator|==
literal|null
operator|&&
name|path
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// don't match "" or "/" as valid path
name|handler
operator|=
name|core
operator|.
name|getRequestHandler
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|// no handler yet but allowed to handle select; let's check
if|if
condition|(
name|handler
operator|==
literal|null
operator|&&
name|parser
operator|.
name|isHandleSelect
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"/select"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
operator|||
literal|"/select/"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|solrReq
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|core
argument_list|,
name|path
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|String
name|qt
init|=
name|solrReq
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|)
decl_stmt|;
name|handler
operator|=
name|core
operator|.
name|getRequestHandler
argument_list|(
name|qt
argument_list|)
expr_stmt|;
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"unknown handler: "
operator|+
name|qt
argument_list|)
throw|;
block|}
if|if
condition|(
name|qt
operator|!=
literal|null
operator|&&
name|qt
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
operator|&&
operator|(
name|handler
operator|instanceof
name|ContentStreamHandlerBase
operator|)
condition|)
block|{
comment|//For security reasons it's a bad idea to allow a leading '/', ex: /select?qt=/update see SOLR-3161
comment|//There was no restriction from Solr 1.4 thru 3.5 and it's not supported for update handlers.
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Invalid Request Handler ('qt').  Do not use /select to access: "
operator|+
name|qt
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|// With a valid handler and a valid core...
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
comment|// if not a /select, create the request
if|if
condition|(
name|solrReq
operator|==
literal|null
condition|)
block|{
name|solrReq
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|core
argument_list|,
name|path
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|usingAliases
condition|)
block|{
name|processAliases
argument_list|(
name|solrReq
argument_list|,
name|aliases
argument_list|,
name|collectionsList
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Method
name|reqMethod
init|=
name|Method
operator|.
name|getMethod
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
decl_stmt|;
name|HttpCacheHeaderUtil
operator|.
name|setCacheControlHeader
argument_list|(
name|config
argument_list|,
name|resp
argument_list|,
name|reqMethod
argument_list|)
expr_stmt|;
comment|// unless we have been explicitly told not to, do cache validation
comment|// if we fail cache validation, execute the query
if|if
condition|(
name|config
operator|.
name|getHttpCachingConfig
argument_list|()
operator|.
name|isNever304
argument_list|()
operator|||
operator|!
name|HttpCacheHeaderUtil
operator|.
name|doCacheHeaderValidation
argument_list|(
name|solrReq
argument_list|,
name|req
argument_list|,
name|reqMethod
argument_list|,
name|resp
argument_list|)
condition|)
block|{
name|SolrQueryResponse
name|solrRsp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
comment|/* even for HEAD requests, we need to execute the handler to                  * ensure we don't get an error (and to make sure the correct                  * QueryResponseWriter is selected and we get the correct                  * Content-Type)                  */
name|SolrRequestInfo
operator|.
name|setRequestInfo
argument_list|(
operator|new
name|SolrRequestInfo
argument_list|(
name|solrReq
argument_list|,
name|solrRsp
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|execute
argument_list|(
name|req
argument_list|,
name|handler
argument_list|,
name|solrReq
argument_list|,
name|solrRsp
argument_list|)
expr_stmt|;
name|HttpCacheHeaderUtil
operator|.
name|checkHttpCachingVeto
argument_list|(
name|solrRsp
argument_list|,
name|resp
argument_list|,
name|reqMethod
argument_list|)
expr_stmt|;
comment|// add info to http headers
comment|//TODO: See SOLR-232 and SOLR-267.
comment|/*try {                   NamedList solrRspHeader = solrRsp.getResponseHeader();                  for (int i=0; i<solrRspHeader.size(); i++) {                    ((javax.servlet.http.HttpServletResponse) response).addHeader(("Solr-" + solrRspHeader.getName(i)), String.valueOf(solrRspHeader.getVal(i)));                  }                 } catch (ClassCastException cce) {                   log.log(Level.WARNING, "exception adding response header log information", cce);                 }*/
name|QueryResponseWriter
name|responseWriter
init|=
name|core
operator|.
name|getQueryResponseWriter
argument_list|(
name|solrReq
argument_list|)
decl_stmt|;
name|writeResponse
argument_list|(
name|solrRsp
argument_list|,
name|response
argument_list|,
name|responseWriter
argument_list|,
name|solrReq
argument_list|,
name|reqMethod
argument_list|)
expr_stmt|;
block|}
return|return;
comment|// we are done with a valid handler
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"no handler or core retrieved for "
operator|+
name|path
operator|+
literal|", follow through..."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|sendError
argument_list|(
name|core
argument_list|,
name|solrReq
argument_list|,
name|request
argument_list|,
operator|(
name|HttpServletResponse
operator|)
name|response
argument_list|,
name|ex
argument_list|)
expr_stmt|;
if|if
condition|(
name|ex
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|ex
throw|;
block|}
return|return;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|solrReq
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Closing out SolrRequest: {}"
argument_list|,
name|solrReq
argument_list|)
expr_stmt|;
name|solrReq
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
name|core
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|SolrRequestInfo
operator|.
name|clearRequestInfo
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Otherwise let the webapp handle the request
name|chain
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
DECL|method|processAliases
specifier|private
name|void
name|processAliases
parameter_list|(
name|SolrQueryRequest
name|solrReq
parameter_list|,
name|Aliases
name|aliases
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|collectionsList
parameter_list|)
block|{
name|String
name|collection
init|=
name|solrReq
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"collection"
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|collectionsList
operator|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|collection
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|collectionsList
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|newCollectionsList
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|collectionsList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|col
range|:
name|collectionsList
control|)
block|{
name|String
name|al
init|=
name|aliases
operator|.
name|getCollectionAlias
argument_list|(
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|al
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|aliasList
init|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|al
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|newCollectionsList
operator|.
name|addAll
argument_list|(
name|aliasList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newCollectionsList
operator|.
name|add
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|newCollectionsList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|StringBuilder
name|collectionString
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|newCollectionsList
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|sz
init|=
name|newCollectionsList
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|collectionString
operator|.
name|append
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|newCollectionsList
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|collectionString
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|solrReq
operator|.
name|getParams
argument_list|()
argument_list|)
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"collection"
argument_list|,
name|collectionString
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|solrReq
operator|.
name|setParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|remoteQuery
specifier|private
name|void
name|remoteQuery
parameter_list|(
name|String
name|coreUrl
parameter_list|,
name|HttpServletRequest
name|req
parameter_list|,
name|SolrQueryRequest
name|solrReq
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|String
name|urlstr
init|=
name|coreUrl
decl_stmt|;
name|String
name|queryString
init|=
name|req
operator|.
name|getQueryString
argument_list|()
decl_stmt|;
name|urlstr
operator|+=
name|queryString
operator|==
literal|null
condition|?
literal|""
else|:
literal|"?"
operator|+
name|queryString
expr_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|urlstr
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|con
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|con
operator|.
name|setRequestMethod
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|con
operator|.
name|setUseCaches
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|boolean
name|isPostOrPutRequest
init|=
literal|"POST"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
operator|||
literal|"PUT"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isPostOrPutRequest
condition|)
block|{
name|con
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|con
operator|.
name|setDoInput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|String
argument_list|>
name|e
init|=
name|req
operator|.
name|getHeaderNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|headerName
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|con
operator|.
name|setRequestProperty
argument_list|(
name|headerName
argument_list|,
name|req
operator|.
name|getHeader
argument_list|(
name|headerName
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|con
operator|.
name|connect
argument_list|()
expr_stmt|;
name|InputStream
name|is
decl_stmt|;
name|OutputStream
name|os
decl_stmt|;
if|if
condition|(
name|isPostOrPutRequest
condition|)
block|{
name|is
operator|=
name|req
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|os
operator|=
name|con
operator|.
name|getOutputStream
argument_list|()
expr_stmt|;
comment|// side effect: method is switched to POST
try|try
block|{
name|IOUtils
operator|.
name|copyLarge
argument_list|(
name|is
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
comment|// TODO: I thought we weren't supposed to explicitly close servlet streams
block|}
block|}
name|resp
operator|.
name|setStatus
argument_list|(
name|con
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|i
init|=
name|con
operator|.
name|getHeaderFields
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|mapEntry
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|header
init|=
name|mapEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|// We pull out these two headers below because they can cause chunked
comment|// encoding issues with Tomcat and certain clients
if|if
condition|(
name|header
operator|!=
literal|null
operator|&&
operator|!
name|header
operator|.
name|equals
argument_list|(
name|TRANSFER_ENCODING_HEADER
argument_list|)
operator|&&
operator|!
name|header
operator|.
name|equals
argument_list|(
name|CONNECTION_HEADER
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|value
range|:
name|mapEntry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|resp
operator|.
name|addHeader
argument_list|(
name|mapEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|resp
operator|.
name|setCharacterEncoding
argument_list|(
name|con
operator|.
name|getContentEncoding
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setContentType
argument_list|(
name|con
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|=
name|con
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|os
operator|=
name|resp
operator|.
name|getOutputStream
argument_list|()
expr_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copyLarge
argument_list|(
name|is
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|os
argument_list|)
expr_stmt|;
comment|// TODO: I thought we weren't supposed to explicitly close servlet streams
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|con
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|sendError
argument_list|(
literal|null
argument_list|,
name|solrReq
argument_list|,
name|req
argument_list|,
name|resp
argument_list|,
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error trying to proxy request for url: "
operator|+
name|coreUrl
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getRemotCoreUrl
specifier|private
name|String
name|getRemotCoreUrl
parameter_list|(
name|CoreContainer
name|cores
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|String
name|origCorename
parameter_list|)
block|{
name|ClusterState
name|clusterState
init|=
name|cores
operator|.
name|getZkController
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Slice
argument_list|>
name|slices
init|=
name|clusterState
operator|.
name|getActiveSlices
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|boolean
name|byCoreName
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|slices
operator|==
literal|null
condition|)
block|{
name|slices
operator|=
operator|new
name|ArrayList
argument_list|<
name|Slice
argument_list|>
argument_list|()
expr_stmt|;
comment|// look by core name
name|byCoreName
operator|=
literal|true
expr_stmt|;
name|slices
operator|=
name|getSlicesForCollections
argument_list|(
name|clusterState
argument_list|,
name|slices
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|slices
operator|==
literal|null
operator|||
name|slices
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|slices
operator|=
name|getSlicesForCollections
argument_list|(
name|clusterState
argument_list|,
name|slices
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|slices
operator|==
literal|null
operator|||
name|slices
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|coreUrl
init|=
name|getCoreUrl
argument_list|(
name|cores
argument_list|,
name|collectionName
argument_list|,
name|origCorename
argument_list|,
name|clusterState
argument_list|,
name|slices
argument_list|,
name|byCoreName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|coreUrl
operator|==
literal|null
condition|)
block|{
name|coreUrl
operator|=
name|getCoreUrl
argument_list|(
name|cores
argument_list|,
name|collectionName
argument_list|,
name|origCorename
argument_list|,
name|clusterState
argument_list|,
name|slices
argument_list|,
name|byCoreName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|coreUrl
return|;
block|}
DECL|method|getCoreUrl
specifier|private
name|String
name|getCoreUrl
parameter_list|(
name|CoreContainer
name|cores
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|String
name|origCorename
parameter_list|,
name|ClusterState
name|clusterState
parameter_list|,
name|Collection
argument_list|<
name|Slice
argument_list|>
name|slices
parameter_list|,
name|boolean
name|byCoreName
parameter_list|,
name|boolean
name|activeReplicas
parameter_list|)
block|{
name|String
name|coreUrl
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|liveNodes
init|=
name|clusterState
operator|.
name|getLiveNodes
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Slice
argument_list|>
name|it
init|=
name|slices
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Slice
name|slice
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|sliceShards
init|=
name|slice
operator|.
name|getReplicasMap
argument_list|()
decl_stmt|;
for|for
control|(
name|ZkNodeProps
name|nodeProps
range|:
name|sliceShards
operator|.
name|values
argument_list|()
control|)
block|{
name|ZkCoreNodeProps
name|coreNodeProps
init|=
operator|new
name|ZkCoreNodeProps
argument_list|(
name|nodeProps
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|activeReplicas
operator|||
operator|(
name|liveNodes
operator|.
name|contains
argument_list|(
name|coreNodeProps
operator|.
name|getNodeName
argument_list|()
argument_list|)
operator|&&
name|coreNodeProps
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|ZkStateReader
operator|.
name|ACTIVE
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|byCoreName
operator|&&
operator|!
name|collectionName
operator|.
name|equals
argument_list|(
name|coreNodeProps
operator|.
name|getCoreName
argument_list|()
argument_list|)
condition|)
block|{
comment|// if it's by core name, make sure they match
continue|continue;
block|}
if|if
condition|(
name|coreNodeProps
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|equals
argument_list|(
name|cores
operator|.
name|getZkController
argument_list|()
operator|.
name|getBaseUrl
argument_list|()
argument_list|)
condition|)
block|{
comment|// don't count a local core
continue|continue;
block|}
if|if
condition|(
name|origCorename
operator|!=
literal|null
condition|)
block|{
name|coreUrl
operator|=
name|coreNodeProps
operator|.
name|getBaseUrl
argument_list|()
operator|+
literal|"/"
operator|+
name|origCorename
expr_stmt|;
block|}
else|else
block|{
name|coreUrl
operator|=
name|coreNodeProps
operator|.
name|getCoreUrl
argument_list|()
expr_stmt|;
if|if
condition|(
name|coreUrl
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|coreUrl
operator|=
name|coreUrl
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|coreUrl
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|coreUrl
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getSlicesForCollections
specifier|private
name|Collection
argument_list|<
name|Slice
argument_list|>
name|getSlicesForCollections
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|Collection
argument_list|<
name|Slice
argument_list|>
name|slices
parameter_list|,
name|boolean
name|activeSlices
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|collections
init|=
name|clusterState
operator|.
name|getCollections
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|collection
range|:
name|collections
control|)
block|{
if|if
condition|(
name|activeSlices
condition|)
block|{
name|slices
operator|.
name|addAll
argument_list|(
name|clusterState
operator|.
name|getActiveSlices
argument_list|(
name|collection
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|slices
operator|.
name|addAll
argument_list|(
name|clusterState
operator|.
name|getSlices
argument_list|(
name|collection
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|slices
return|;
block|}
DECL|method|getCoreByCollection
specifier|private
name|SolrCore
name|getCoreByCollection
parameter_list|(
name|CoreContainer
name|cores
parameter_list|,
name|String
name|corename
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|String
name|collection
init|=
name|corename
decl_stmt|;
name|ZkStateReader
name|zkStateReader
init|=
name|cores
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|clusterState
operator|.
name|getActiveSlicesMap
argument_list|(
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
name|slices
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// look for a core on this node
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
name|entries
init|=
name|slices
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|SolrCore
name|core
init|=
literal|null
decl_stmt|;
name|done
label|:
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
comment|// first see if we have the leader
name|ZkNodeProps
name|leaderProps
init|=
name|clusterState
operator|.
name|getLeader
argument_list|(
name|collection
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|leaderProps
operator|!=
literal|null
condition|)
block|{
name|core
operator|=
name|checkProps
argument_list|(
name|cores
argument_list|,
name|path
argument_list|,
name|leaderProps
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
break|break
name|done
break|;
block|}
comment|// check everyone then
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|shards
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getReplicasMap
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
argument_list|>
name|shardEntries
init|=
name|shards
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|shardEntry
range|:
name|shardEntries
control|)
block|{
name|Replica
name|zkProps
init|=
name|shardEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|core
operator|=
name|checkProps
argument_list|(
name|cores
argument_list|,
name|path
argument_list|,
name|zkProps
argument_list|)
expr_stmt|;
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
break|break
name|done
break|;
block|}
block|}
block|}
return|return
name|core
return|;
block|}
DECL|method|checkProps
specifier|private
name|SolrCore
name|checkProps
parameter_list|(
name|CoreContainer
name|cores
parameter_list|,
name|String
name|path
parameter_list|,
name|ZkNodeProps
name|zkProps
parameter_list|)
block|{
name|String
name|corename
decl_stmt|;
name|SolrCore
name|core
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cores
operator|.
name|getZkController
argument_list|()
operator|.
name|getNodeName
argument_list|()
operator|.
name|equals
argument_list|(
name|zkProps
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
argument_list|)
condition|)
block|{
name|corename
operator|=
name|zkProps
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
expr_stmt|;
name|core
operator|=
name|cores
operator|.
name|getCore
argument_list|(
name|corename
argument_list|)
expr_stmt|;
block|}
return|return
name|core
return|;
block|}
DECL|method|handleAdminRequest
specifier|private
name|void
name|handleAdminRequest
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|ServletResponse
name|response
parameter_list|,
name|SolrRequestHandler
name|handler
parameter_list|,
name|SolrQueryRequest
name|solrReq
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrQueryResponse
name|solrResp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
name|SolrCore
operator|.
name|preDecorateResponse
argument_list|(
name|solrReq
argument_list|,
name|solrResp
argument_list|)
expr_stmt|;
name|handler
operator|.
name|handleRequest
argument_list|(
name|solrReq
argument_list|,
name|solrResp
argument_list|)
expr_stmt|;
name|SolrCore
operator|.
name|postDecorateResponse
argument_list|(
name|handler
argument_list|,
name|solrReq
argument_list|,
name|solrResp
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
operator|&&
name|solrResp
operator|.
name|getToLog
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
name|solrResp
operator|.
name|getToLogAsString
argument_list|(
literal|"[admin] "
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QueryResponseWriter
name|respWriter
init|=
name|SolrCore
operator|.
name|DEFAULT_RESPONSE_WRITERS
operator|.
name|get
argument_list|(
name|solrReq
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|respWriter
operator|==
literal|null
condition|)
name|respWriter
operator|=
name|SolrCore
operator|.
name|DEFAULT_RESPONSE_WRITERS
operator|.
name|get
argument_list|(
literal|"standard"
argument_list|)
expr_stmt|;
name|writeResponse
argument_list|(
name|solrResp
argument_list|,
name|response
argument_list|,
name|respWriter
argument_list|,
name|solrReq
argument_list|,
name|Method
operator|.
name|getMethod
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|writeResponse
specifier|private
name|void
name|writeResponse
parameter_list|(
name|SolrQueryResponse
name|solrRsp
parameter_list|,
name|ServletResponse
name|response
parameter_list|,
name|QueryResponseWriter
name|responseWriter
parameter_list|,
name|SolrQueryRequest
name|solrReq
parameter_list|,
name|Method
name|reqMethod
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Now write it out
specifier|final
name|String
name|ct
init|=
name|responseWriter
operator|.
name|getContentType
argument_list|(
name|solrReq
argument_list|,
name|solrRsp
argument_list|)
decl_stmt|;
comment|// don't call setContentType on null
if|if
condition|(
literal|null
operator|!=
name|ct
condition|)
name|response
operator|.
name|setContentType
argument_list|(
name|ct
argument_list|)
expr_stmt|;
if|if
condition|(
name|solrRsp
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|NamedList
name|info
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
name|int
name|code
init|=
name|ResponseUtils
operator|.
name|getErrorInfo
argument_list|(
name|solrRsp
operator|.
name|getException
argument_list|()
argument_list|,
name|info
argument_list|,
name|log
argument_list|)
decl_stmt|;
name|solrRsp
operator|.
name|add
argument_list|(
literal|"error"
argument_list|,
name|info
argument_list|)
expr_stmt|;
operator|(
operator|(
name|HttpServletResponse
operator|)
name|response
operator|)
operator|.
name|setStatus
argument_list|(
name|code
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Method
operator|.
name|HEAD
operator|!=
name|reqMethod
condition|)
block|{
if|if
condition|(
name|responseWriter
operator|instanceof
name|BinaryQueryResponseWriter
condition|)
block|{
name|BinaryQueryResponseWriter
name|binWriter
init|=
operator|(
name|BinaryQueryResponseWriter
operator|)
name|responseWriter
decl_stmt|;
name|binWriter
operator|.
name|write
argument_list|(
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|solrReq
argument_list|,
name|solrRsp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|charset
init|=
name|ContentStreamBase
operator|.
name|getCharsetFromContentType
argument_list|(
name|ct
argument_list|)
decl_stmt|;
name|Writer
name|out
init|=
operator|(
name|charset
operator|==
literal|null
operator|||
name|charset
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"UTF-8"
argument_list|)
operator|)
condition|?
operator|new
name|OutputStreamWriter
argument_list|(
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|UTF8
argument_list|)
else|:
operator|new
name|OutputStreamWriter
argument_list|(
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|charset
argument_list|)
decl_stmt|;
name|out
operator|=
operator|new
name|FastWriter
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|responseWriter
operator|.
name|write
argument_list|(
name|out
argument_list|,
name|solrReq
argument_list|,
name|solrRsp
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
comment|//else http HEAD request, nothing to write out, waited this long just to get ContentType
block|}
DECL|method|execute
specifier|protected
name|void
name|execute
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|SolrRequestHandler
name|handler
parameter_list|,
name|SolrQueryRequest
name|sreq
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
comment|// a custom filter could add more stuff to the request before passing it on.
comment|// for example: sreq.getContext().put( "HttpServletRequest", req );
comment|// used for logging query stats in SolrCore.execute()
name|sreq
operator|.
name|getContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"webapp"
argument_list|,
name|req
operator|.
name|getContextPath
argument_list|()
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|getCore
argument_list|()
operator|.
name|execute
argument_list|(
name|handler
argument_list|,
name|sreq
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
DECL|method|sendError
specifier|protected
name|void
name|sendError
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|,
name|ServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|Throwable
name|ex
parameter_list|)
throws|throws
name|IOException
block|{
name|Exception
name|exp
init|=
literal|null
decl_stmt|;
name|SolrCore
name|localCore
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SolrQueryResponse
name|solrResp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
if|if
condition|(
name|ex
operator|instanceof
name|Exception
condition|)
block|{
name|solrResp
operator|.
name|setException
argument_list|(
operator|(
name|Exception
operator|)
name|ex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|solrResp
operator|.
name|setException
argument_list|(
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|core
operator|==
literal|null
condition|)
block|{
name|localCore
operator|=
name|cores
operator|.
name|getCore
argument_list|(
literal|""
argument_list|)
expr_stmt|;
comment|// default core
block|}
else|else
block|{
name|localCore
operator|=
name|core
expr_stmt|;
block|}
if|if
condition|(
name|req
operator|==
literal|null
condition|)
block|{
specifier|final
name|SolrParams
name|solrParams
decl_stmt|;
if|if
condition|(
name|request
operator|instanceof
name|HttpServletRequest
condition|)
block|{
comment|// use GET parameters if available:
name|solrParams
operator|=
name|SolrRequestParsers
operator|.
name|parseQueryString
argument_list|(
operator|(
operator|(
name|HttpServletRequest
operator|)
name|request
operator|)
operator|.
name|getQueryString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we have no params at all, use empty ones:
name|solrParams
operator|=
operator|new
name|MapSolrParams
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|req
operator|=
operator|new
name|SolrQueryRequestBase
argument_list|(
name|core
argument_list|,
name|solrParams
argument_list|)
block|{}
expr_stmt|;
block|}
name|QueryResponseWriter
name|writer
init|=
name|core
operator|.
name|getQueryResponseWriter
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|writeResponse
argument_list|(
name|solrResp
argument_list|,
name|response
argument_list|,
name|writer
argument_list|,
name|req
argument_list|,
name|Method
operator|.
name|GET
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// This error really does not matter
name|exp
operator|=
name|e
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|exp
operator|!=
literal|null
condition|)
block|{
name|SimpleOrderedMap
name|info
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
name|int
name|code
init|=
name|ResponseUtils
operator|.
name|getErrorInfo
argument_list|(
name|ex
argument_list|,
name|info
argument_list|,
name|log
argument_list|)
decl_stmt|;
name|response
operator|.
name|sendError
argument_list|(
name|code
argument_list|,
name|info
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|core
operator|==
literal|null
operator|&&
name|localCore
operator|!=
literal|null
condition|)
block|{
name|localCore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//---------------------------------------------------------------------
comment|//---------------------------------------------------------------------
comment|/**    * Set the prefix for all paths.  This is useful if you want to apply the    * filter to something other then /*, perhaps because you are merging this    * filter into a larger web application.    *    * For example, if web.xml specifies:    *<pre class="prettyprint">    * {@code    *<filter-mapping>    *<filter-name>SolrRequestFilter</filter-name>    *<url-pattern>/xxx/*</url-pattern>    *</filter-mapping>}    *</pre>    *    * Make sure to set the PathPrefix to "/xxx" either with this function    * or in web.xml.    *    *<pre class="prettyprint">    * {@code    *<init-param>    *<param-name>path-prefix</param-name>    *<param-value>/xxx</param-value>    *</init-param>}    *</pre>    */
DECL|method|setPathPrefix
specifier|public
name|void
name|setPathPrefix
parameter_list|(
name|String
name|pathPrefix
parameter_list|)
block|{
name|this
operator|.
name|pathPrefix
operator|=
name|pathPrefix
expr_stmt|;
block|}
DECL|method|getPathPrefix
specifier|public
name|String
name|getPathPrefix
parameter_list|()
block|{
return|return
name|pathPrefix
return|;
block|}
block|}
end_class
end_unit
