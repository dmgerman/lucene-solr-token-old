begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.servlet
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|input
operator|.
name|BoundedInputStream
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|fileupload
operator|.
name|FileItem
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|fileupload
operator|.
name|disk
operator|.
name|DiskFileItemFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|fileupload
operator|.
name|servlet
operator|.
name|ServletFileUpload
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|MultiMapSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ContentStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ContentStreamBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|Config
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequestBase
import|;
end_import
begin_class
DECL|class|SolrRequestParsers
specifier|public
class|class
name|SolrRequestParsers
block|{
DECL|field|log
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SolrRequestParsers
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Should these constants be in a more public place?
DECL|field|MULTIPART
specifier|public
specifier|static
specifier|final
name|String
name|MULTIPART
init|=
literal|"multipart"
decl_stmt|;
DECL|field|FORMDATA
specifier|public
specifier|static
specifier|final
name|String
name|FORMDATA
init|=
literal|"formdata"
decl_stmt|;
DECL|field|RAW
specifier|public
specifier|static
specifier|final
name|String
name|RAW
init|=
literal|"raw"
decl_stmt|;
DECL|field|SIMPLE
specifier|public
specifier|static
specifier|final
name|String
name|SIMPLE
init|=
literal|"simple"
decl_stmt|;
DECL|field|STANDARD
specifier|public
specifier|static
specifier|final
name|String
name|STANDARD
init|=
literal|"standard"
decl_stmt|;
DECL|field|parsers
specifier|private
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|SolrRequestParser
argument_list|>
name|parsers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SolrRequestParser
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|enableRemoteStreams
specifier|private
specifier|final
name|boolean
name|enableRemoteStreams
decl_stmt|;
DECL|field|standard
specifier|private
name|StandardRequestParser
name|standard
decl_stmt|;
DECL|field|handleSelect
specifier|private
name|boolean
name|handleSelect
init|=
literal|true
decl_stmt|;
comment|/** Default instance for e.g. admin requests. Limits to 2 MB uploads and does not allow remote streams. */
DECL|field|DEFAULT
specifier|public
specifier|static
specifier|final
name|SolrRequestParsers
name|DEFAULT
init|=
operator|new
name|SolrRequestParsers
argument_list|()
decl_stmt|;
comment|/**    * Pass in an xml configuration.  A null configuration will enable    * everything with maximum values.    */
DECL|method|SolrRequestParsers
specifier|public
name|SolrRequestParsers
parameter_list|(
name|Config
name|globalConfig
parameter_list|)
block|{
specifier|final
name|int
name|multipartUploadLimitKB
decl_stmt|,
name|formUploadLimitKB
decl_stmt|;
if|if
condition|(
name|globalConfig
operator|==
literal|null
condition|)
block|{
name|multipartUploadLimitKB
operator|=
name|formUploadLimitKB
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
name|enableRemoteStreams
operator|=
literal|true
expr_stmt|;
name|handleSelect
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|multipartUploadLimitKB
operator|=
name|globalConfig
operator|.
name|getInt
argument_list|(
literal|"requestDispatcher/requestParsers/@multipartUploadLimitInKB"
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|formUploadLimitKB
operator|=
name|globalConfig
operator|.
name|getInt
argument_list|(
literal|"requestDispatcher/requestParsers/@formdataUploadLimitInKB"
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|enableRemoteStreams
operator|=
name|globalConfig
operator|.
name|getBool
argument_list|(
literal|"requestDispatcher/requestParsers/@enableRemoteStreaming"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Let this filter take care of /select?xxx format
name|handleSelect
operator|=
name|globalConfig
operator|.
name|getBool
argument_list|(
literal|"requestDispatcher/@handleSelect"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|init
argument_list|(
name|multipartUploadLimitKB
argument_list|,
name|formUploadLimitKB
argument_list|)
expr_stmt|;
block|}
DECL|method|SolrRequestParsers
specifier|private
name|SolrRequestParsers
parameter_list|()
block|{
name|enableRemoteStreams
operator|=
literal|false
expr_stmt|;
name|handleSelect
operator|=
literal|false
expr_stmt|;
name|init
argument_list|(
literal|2048
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
block|}
DECL|method|init
specifier|private
name|void
name|init
parameter_list|(
name|int
name|multipartUploadLimitKB
parameter_list|,
name|int
name|formUploadLimitKB
parameter_list|)
block|{
name|MultipartRequestParser
name|multi
init|=
operator|new
name|MultipartRequestParser
argument_list|(
name|multipartUploadLimitKB
argument_list|)
decl_stmt|;
name|RawRequestParser
name|raw
init|=
operator|new
name|RawRequestParser
argument_list|()
decl_stmt|;
name|FormDataRequestParser
name|formdata
init|=
operator|new
name|FormDataRequestParser
argument_list|(
name|formUploadLimitKB
argument_list|)
decl_stmt|;
name|standard
operator|=
operator|new
name|StandardRequestParser
argument_list|(
name|multi
argument_list|,
name|raw
argument_list|,
name|formdata
argument_list|)
expr_stmt|;
comment|// I don't see a need to have this publicly configured just yet
comment|// adding it is trivial
name|parsers
operator|.
name|put
argument_list|(
name|MULTIPART
argument_list|,
name|multi
argument_list|)
expr_stmt|;
name|parsers
operator|.
name|put
argument_list|(
name|FORMDATA
argument_list|,
name|formdata
argument_list|)
expr_stmt|;
name|parsers
operator|.
name|put
argument_list|(
name|RAW
argument_list|,
name|raw
argument_list|)
expr_stmt|;
name|parsers
operator|.
name|put
argument_list|(
name|SIMPLE
argument_list|,
operator|new
name|SimpleRequestParser
argument_list|()
argument_list|)
expr_stmt|;
name|parsers
operator|.
name|put
argument_list|(
name|STANDARD
argument_list|,
name|standard
argument_list|)
expr_stmt|;
name|parsers
operator|.
name|put
argument_list|(
literal|""
argument_list|,
name|standard
argument_list|)
expr_stmt|;
block|}
DECL|method|parse
specifier|public
name|SolrQueryRequest
name|parse
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|String
name|path
parameter_list|,
name|HttpServletRequest
name|req
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrRequestParser
name|parser
init|=
name|standard
decl_stmt|;
comment|// TODO -- in the future, we could pick a different parser based on the request
comment|// Pick the parser from the request...
name|ArrayList
argument_list|<
name|ContentStream
argument_list|>
name|streams
init|=
operator|new
name|ArrayList
argument_list|<
name|ContentStream
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|SolrParams
name|params
init|=
name|parser
operator|.
name|parseParamsAndFillStreams
argument_list|(
name|req
argument_list|,
name|streams
argument_list|)
decl_stmt|;
name|SolrQueryRequest
name|sreq
init|=
name|buildRequestFrom
argument_list|(
name|core
argument_list|,
name|params
argument_list|,
name|streams
argument_list|)
decl_stmt|;
comment|// Handlers and login will want to know the path. If it contains a ':'
comment|// the handler could use it for RESTful URLs
name|sreq
operator|.
name|getContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"path"
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return
name|sreq
return|;
block|}
DECL|method|buildRequestFrom
specifier|public
name|SolrQueryRequest
name|buildRequestFrom
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|Collection
argument_list|<
name|ContentStream
argument_list|>
name|streams
parameter_list|)
throws|throws
name|Exception
block|{
comment|// The content type will be applied to all streaming content
name|String
name|contentType
init|=
name|params
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|STREAM_CONTENTTYPE
argument_list|)
decl_stmt|;
comment|// Handle anything with a remoteURL
name|String
index|[]
name|strs
init|=
name|params
operator|.
name|getParams
argument_list|(
name|CommonParams
operator|.
name|STREAM_URL
argument_list|)
decl_stmt|;
if|if
condition|(
name|strs
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|enableRemoteStreams
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Remote Streaming is disabled."
argument_list|)
throw|;
block|}
for|for
control|(
specifier|final
name|String
name|url
range|:
name|strs
control|)
block|{
name|ContentStreamBase
name|stream
init|=
operator|new
name|ContentStreamBase
operator|.
name|URLStream
argument_list|(
operator|new
name|URL
argument_list|(
name|url
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentType
operator|!=
literal|null
condition|)
block|{
name|stream
operator|.
name|setContentType
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
block|}
name|streams
operator|.
name|add
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Handle streaming files
name|strs
operator|=
name|params
operator|.
name|getParams
argument_list|(
name|CommonParams
operator|.
name|STREAM_FILE
argument_list|)
expr_stmt|;
if|if
condition|(
name|strs
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|enableRemoteStreams
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Remote Streaming is disabled."
argument_list|)
throw|;
block|}
for|for
control|(
specifier|final
name|String
name|file
range|:
name|strs
control|)
block|{
name|ContentStreamBase
name|stream
init|=
operator|new
name|ContentStreamBase
operator|.
name|FileStream
argument_list|(
operator|new
name|File
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentType
operator|!=
literal|null
condition|)
block|{
name|stream
operator|.
name|setContentType
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
block|}
name|streams
operator|.
name|add
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check for streams in the request parameters
name|strs
operator|=
name|params
operator|.
name|getParams
argument_list|(
name|CommonParams
operator|.
name|STREAM_BODY
argument_list|)
expr_stmt|;
if|if
condition|(
name|strs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|String
name|body
range|:
name|strs
control|)
block|{
name|ContentStreamBase
name|stream
init|=
operator|new
name|ContentStreamBase
operator|.
name|StringStream
argument_list|(
name|body
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentType
operator|!=
literal|null
condition|)
block|{
name|stream
operator|.
name|setContentType
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
block|}
name|streams
operator|.
name|add
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
name|SolrQueryRequestBase
name|q
init|=
operator|new
name|SolrQueryRequestBase
argument_list|(
name|core
argument_list|,
name|params
argument_list|)
block|{ }
decl_stmt|;
if|if
condition|(
name|streams
operator|!=
literal|null
operator|&&
name|streams
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|q
operator|.
name|setContentStreams
argument_list|(
name|streams
argument_list|)
expr_stmt|;
block|}
return|return
name|q
return|;
block|}
comment|/**    * Given a url-encoded query string (UTF-8), map it into solr params    */
DECL|method|parseQueryString
specifier|public
specifier|static
name|MultiMapSolrParams
name|parseQueryString
parameter_list|(
name|String
name|queryString
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|parseQueryString
argument_list|(
name|queryString
argument_list|,
literal|"UTF-8"
argument_list|,
name|map
argument_list|)
expr_stmt|;
return|return
operator|new
name|MultiMapSolrParams
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**    * Given a url-encoded query string, map it into the given map    * @param queryString as given from URL    * @param charset to be used to decode %-encoding    * @param map place all parameters in this map    */
DECL|method|parseQueryString
specifier|static
name|void
name|parseQueryString
parameter_list|(
name|String
name|queryString
parameter_list|,
name|String
name|charset
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|map
parameter_list|)
block|{
if|if
condition|(
name|queryString
operator|!=
literal|null
operator|&&
name|queryString
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
for|for
control|(
name|String
name|kv
range|:
name|queryString
operator|.
name|split
argument_list|(
literal|"&"
argument_list|)
control|)
block|{
name|int
name|idx
init|=
name|kv
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
block|{
name|String
name|name
init|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|kv
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
argument_list|,
name|charset
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|kv
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
argument_list|,
name|charset
argument_list|)
decl_stmt|;
name|MultiMapSolrParams
operator|.
name|addParam
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|name
init|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|kv
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|MultiMapSolrParams
operator|.
name|addParam
argument_list|(
name|name
argument_list|,
literal|""
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uex
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|uex
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|isHandleSelect
specifier|public
name|boolean
name|isHandleSelect
parameter_list|()
block|{
return|return
name|handleSelect
return|;
block|}
DECL|method|setHandleSelect
specifier|public
name|void
name|setHandleSelect
parameter_list|(
name|boolean
name|handleSelect
parameter_list|)
block|{
name|this
operator|.
name|handleSelect
operator|=
name|handleSelect
expr_stmt|;
block|}
block|}
end_class
begin_comment
comment|//-----------------------------------------------------------------
end_comment
begin_comment
comment|//-----------------------------------------------------------------
end_comment
begin_comment
comment|// I guess we don't really even need the interface, but i'll keep it here just for kicks
end_comment
begin_interface
DECL|interface|SolrRequestParser
interface|interface
name|SolrRequestParser
block|{
DECL|method|parseParamsAndFillStreams
specifier|public
name|SolrParams
name|parseParamsAndFillStreams
parameter_list|(
specifier|final
name|HttpServletRequest
name|req
parameter_list|,
name|ArrayList
argument_list|<
name|ContentStream
argument_list|>
name|streams
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
end_interface
begin_comment
comment|//-----------------------------------------------------------------
end_comment
begin_comment
comment|//-----------------------------------------------------------------
end_comment
begin_comment
comment|/**  * The simple parser just uses the params directly, does not support POST URL-encoded forms  */
end_comment
begin_class
DECL|class|SimpleRequestParser
class|class
name|SimpleRequestParser
implements|implements
name|SolrRequestParser
block|{
annotation|@
name|Override
DECL|method|parseParamsAndFillStreams
specifier|public
name|SolrParams
name|parseParamsAndFillStreams
parameter_list|(
specifier|final
name|HttpServletRequest
name|req
parameter_list|,
name|ArrayList
argument_list|<
name|ContentStream
argument_list|>
name|streams
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|SolrRequestParsers
operator|.
name|parseQueryString
argument_list|(
name|req
operator|.
name|getQueryString
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class
begin_comment
comment|/**  * Wrap an HttpServletRequest as a ContentStream  */
end_comment
begin_class
DECL|class|HttpRequestContentStream
class|class
name|HttpRequestContentStream
extends|extends
name|ContentStreamBase
block|{
DECL|field|req
specifier|private
specifier|final
name|HttpServletRequest
name|req
decl_stmt|;
DECL|method|HttpRequestContentStream
specifier|public
name|HttpRequestContentStream
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
name|this
operator|.
name|req
operator|=
name|req
expr_stmt|;
name|contentType
operator|=
name|req
operator|.
name|getContentType
argument_list|()
expr_stmt|;
comment|// name = ???
comment|// sourceInfo = ???
name|String
name|v
init|=
name|req
operator|.
name|getHeader
argument_list|(
literal|"Content-Length"
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
block|{
name|size
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getStream
specifier|public
name|InputStream
name|getStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|req
operator|.
name|getInputStream
argument_list|()
return|;
block|}
block|}
end_class
begin_comment
comment|/**  * Wrap a FileItem as a ContentStream  */
end_comment
begin_class
DECL|class|FileItemContentStream
class|class
name|FileItemContentStream
extends|extends
name|ContentStreamBase
block|{
DECL|field|item
specifier|private
specifier|final
name|FileItem
name|item
decl_stmt|;
DECL|method|FileItemContentStream
specifier|public
name|FileItemContentStream
parameter_list|(
name|FileItem
name|f
parameter_list|)
block|{
name|item
operator|=
name|f
expr_stmt|;
name|contentType
operator|=
name|item
operator|.
name|getContentType
argument_list|()
expr_stmt|;
name|name
operator|=
name|item
operator|.
name|getName
argument_list|()
expr_stmt|;
name|sourceInfo
operator|=
name|item
operator|.
name|getFieldName
argument_list|()
expr_stmt|;
name|size
operator|=
name|item
operator|.
name|getSize
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getStream
specifier|public
name|InputStream
name|getStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|item
operator|.
name|getInputStream
argument_list|()
return|;
block|}
block|}
end_class
begin_comment
comment|/**  * The raw parser just uses the params directly  */
end_comment
begin_class
DECL|class|RawRequestParser
class|class
name|RawRequestParser
implements|implements
name|SolrRequestParser
block|{
annotation|@
name|Override
DECL|method|parseParamsAndFillStreams
specifier|public
name|SolrParams
name|parseParamsAndFillStreams
parameter_list|(
specifier|final
name|HttpServletRequest
name|req
parameter_list|,
name|ArrayList
argument_list|<
name|ContentStream
argument_list|>
name|streams
parameter_list|)
throws|throws
name|Exception
block|{
name|streams
operator|.
name|add
argument_list|(
operator|new
name|HttpRequestContentStream
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|SolrRequestParsers
operator|.
name|parseQueryString
argument_list|(
name|req
operator|.
name|getQueryString
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class
begin_comment
comment|/**  * Extract Multipart streams  */
end_comment
begin_class
DECL|class|MultipartRequestParser
class|class
name|MultipartRequestParser
implements|implements
name|SolrRequestParser
block|{
DECL|field|uploadLimitKB
specifier|private
specifier|final
name|int
name|uploadLimitKB
decl_stmt|;
DECL|method|MultipartRequestParser
specifier|public
name|MultipartRequestParser
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
name|uploadLimitKB
operator|=
name|limit
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parseParamsAndFillStreams
specifier|public
name|SolrParams
name|parseParamsAndFillStreams
parameter_list|(
specifier|final
name|HttpServletRequest
name|req
parameter_list|,
name|ArrayList
argument_list|<
name|ContentStream
argument_list|>
name|streams
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|ServletFileUpload
operator|.
name|isMultipartContent
argument_list|(
name|req
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Not multipart content! "
operator|+
name|req
operator|.
name|getContentType
argument_list|()
argument_list|)
throw|;
block|}
name|MultiMapSolrParams
name|params
init|=
name|SolrRequestParsers
operator|.
name|parseQueryString
argument_list|(
name|req
operator|.
name|getQueryString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create a factory for disk-based file items
name|DiskFileItemFactory
name|factory
init|=
operator|new
name|DiskFileItemFactory
argument_list|()
decl_stmt|;
comment|// Set factory constraints
comment|// TODO - configure factory.setSizeThreshold(yourMaxMemorySize);
comment|// TODO - configure factory.setRepository(yourTempDirectory);
comment|// Create a new file upload handler
name|ServletFileUpload
name|upload
init|=
operator|new
name|ServletFileUpload
argument_list|(
name|factory
argument_list|)
decl_stmt|;
name|upload
operator|.
name|setSizeMax
argument_list|(
operator|(
operator|(
name|long
operator|)
name|uploadLimitKB
operator|)
operator|*
literal|1024L
argument_list|)
expr_stmt|;
comment|// Parse the request
name|List
name|items
init|=
name|upload
operator|.
name|parseRequest
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|Iterator
name|iter
init|=
name|items
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileItem
name|item
init|=
operator|(
name|FileItem
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// If its a form field, put it in our parameter map
if|if
condition|(
name|item
operator|.
name|isFormField
argument_list|()
condition|)
block|{
name|MultiMapSolrParams
operator|.
name|addParam
argument_list|(
name|item
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|item
operator|.
name|getString
argument_list|()
argument_list|,
name|params
operator|.
name|getMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Add the stream
else|else
block|{
name|streams
operator|.
name|add
argument_list|(
operator|new
name|FileItemContentStream
argument_list|(
name|item
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|params
return|;
block|}
block|}
end_class
begin_comment
comment|/**  * Extract application/x-www-form-urlencoded form data for POST requests  */
end_comment
begin_class
DECL|class|FormDataRequestParser
class|class
name|FormDataRequestParser
implements|implements
name|SolrRequestParser
block|{
DECL|field|uploadLimitKB
specifier|private
specifier|final
name|int
name|uploadLimitKB
decl_stmt|;
DECL|method|FormDataRequestParser
specifier|public
name|FormDataRequestParser
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
name|uploadLimitKB
operator|=
name|limit
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parseParamsAndFillStreams
specifier|public
name|SolrParams
name|parseParamsAndFillStreams
parameter_list|(
specifier|final
name|HttpServletRequest
name|req
parameter_list|,
name|ArrayList
argument_list|<
name|ContentStream
argument_list|>
name|streams
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|isFormData
argument_list|(
name|req
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Not application/x-www-form-urlencoded content: "
operator|+
name|req
operator|.
name|getContentType
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|charset
init|=
name|ContentStreamBase
operator|.
name|getCharsetFromContentType
argument_list|(
name|req
operator|.
name|getContentType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|charset
operator|==
literal|null
condition|)
name|charset
operator|=
literal|"UTF-8"
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
comment|// also add possible URL parameters and include into the map (parsed using UTF-8):
specifier|final
name|String
name|qs
init|=
name|req
operator|.
name|getQueryString
argument_list|()
decl_stmt|;
if|if
condition|(
name|qs
operator|!=
literal|null
condition|)
block|{
name|SolrRequestParsers
operator|.
name|parseQueryString
argument_list|(
name|qs
argument_list|,
literal|"UTF-8"
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
comment|// may be -1, so we check again later. But if its already greater we can stop processing!
specifier|final
name|long
name|totalLength
init|=
name|req
operator|.
name|getContentLength
argument_list|()
decl_stmt|;
specifier|final
name|long
name|maxLength
init|=
operator|(
operator|(
name|long
operator|)
name|uploadLimitKB
operator|)
operator|*
literal|1024L
decl_stmt|;
if|if
condition|(
name|totalLength
operator|>
name|maxLength
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"application/x-www-form-urlencoded content length ("
operator|+
name|totalLength
operator|+
literal|" bytes) exceeds upload limit of "
operator|+
name|uploadLimitKB
operator|+
literal|" KB"
argument_list|)
throw|;
block|}
comment|// get query String from request body, using the charset given in content-type:
specifier|final
name|InputStream
name|in
decl_stmt|;
try|try
block|{
name|in
operator|=
name|req
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
throw|throw
operator|(
name|SolrException
operator|)
name|getParameterIncompatibilityException
argument_list|()
operator|.
name|initCause
argument_list|(
name|ise
argument_list|)
throw|;
block|}
try|try
block|{
specifier|final
name|String
name|data
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
operator|new
name|BoundedInputStream
argument_list|(
name|in
argument_list|,
name|maxLength
argument_list|)
argument_list|,
name|charset
argument_list|)
decl_stmt|;
comment|// if there is remaining data in the underlying stream, throw exception:
if|if
condition|(
name|in
operator|.
name|read
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// read remaining data and throw away:
while|while
condition|(
name|IOUtils
operator|.
name|skip
argument_list|(
name|in
argument_list|,
literal|1024L
argument_list|)
operator|>
literal|0
condition|)
empty_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"application/x-www-form-urlencoded content exceeds upload limit of "
operator|+
name|uploadLimitKB
operator|+
literal|" KB"
argument_list|)
throw|;
block|}
if|if
condition|(
name|data
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|&&
name|totalLength
operator|>
literal|0L
condition|)
block|{
throw|throw
name|getParameterIncompatibilityException
argument_list|()
throw|;
block|}
name|SolrRequestParsers
operator|.
name|parseQueryString
argument_list|(
name|data
argument_list|,
name|charset
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MultiMapSolrParams
argument_list|(
name|map
argument_list|)
return|;
block|}
DECL|method|getParameterIncompatibilityException
specifier|private
name|SolrException
name|getParameterIncompatibilityException
parameter_list|()
block|{
return|return
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Solr requires that request parameters sent using application/x-www-form-urlencoded "
operator|+
literal|"content-type can be read through the request input stream. Unfortunately, the "
operator|+
literal|"stream was empty / not available. This may be caused by another servlet filter calling "
operator|+
literal|"ServletRequest.getParameter*() before SolrDispatchFilter, please remove it."
argument_list|)
return|;
block|}
DECL|method|isFormData
specifier|public
name|boolean
name|isFormData
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
name|String
name|contentType
init|=
name|req
operator|.
name|getContentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentType
operator|!=
literal|null
condition|)
block|{
name|int
name|idx
init|=
name|contentType
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
comment|// remove the charset definition "; charset=utf-8"
name|contentType
operator|=
name|contentType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
name|contentType
operator|=
name|contentType
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"application/x-www-form-urlencoded"
operator|.
name|equalsIgnoreCase
argument_list|(
name|contentType
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class
begin_comment
comment|/**  * The default Logic  */
end_comment
begin_class
DECL|class|StandardRequestParser
class|class
name|StandardRequestParser
implements|implements
name|SolrRequestParser
block|{
DECL|field|multipart
name|MultipartRequestParser
name|multipart
decl_stmt|;
DECL|field|raw
name|RawRequestParser
name|raw
decl_stmt|;
DECL|field|formdata
name|FormDataRequestParser
name|formdata
decl_stmt|;
DECL|method|StandardRequestParser
name|StandardRequestParser
parameter_list|(
name|MultipartRequestParser
name|multi
parameter_list|,
name|RawRequestParser
name|raw
parameter_list|,
name|FormDataRequestParser
name|formdata
parameter_list|)
block|{
name|this
operator|.
name|multipart
operator|=
name|multi
expr_stmt|;
name|this
operator|.
name|raw
operator|=
name|raw
expr_stmt|;
name|this
operator|.
name|formdata
operator|=
name|formdata
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parseParamsAndFillStreams
specifier|public
name|SolrParams
name|parseParamsAndFillStreams
parameter_list|(
specifier|final
name|HttpServletRequest
name|req
parameter_list|,
name|ArrayList
argument_list|<
name|ContentStream
argument_list|>
name|streams
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|method
init|=
name|req
operator|.
name|getMethod
argument_list|()
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"GET"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
operator|||
literal|"HEAD"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
condition|)
block|{
return|return
name|SolrRequestParsers
operator|.
name|parseQueryString
argument_list|(
name|req
operator|.
name|getQueryString
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
literal|"POST"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
condition|)
block|{
if|if
condition|(
name|formdata
operator|.
name|isFormData
argument_list|(
name|req
argument_list|)
condition|)
block|{
return|return
name|formdata
operator|.
name|parseParamsAndFillStreams
argument_list|(
name|req
argument_list|,
name|streams
argument_list|)
return|;
block|}
if|if
condition|(
name|ServletFileUpload
operator|.
name|isMultipartContent
argument_list|(
name|req
argument_list|)
condition|)
block|{
return|return
name|multipart
operator|.
name|parseParamsAndFillStreams
argument_list|(
name|req
argument_list|,
name|streams
argument_list|)
return|;
block|}
return|return
name|raw
operator|.
name|parseParamsAndFillStreams
argument_list|(
name|req
argument_list|,
name|streams
argument_list|)
return|;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unsupported method: "
operator|+
name|method
argument_list|)
throw|;
block|}
block|}
end_class
end_unit
