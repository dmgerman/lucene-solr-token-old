begin_unit
begin_package
DECL|package|org.apache.solr.servlet
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
package|;
end_package
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|BASE_URL_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|COLLECTION_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|CREATE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|DELETE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|RELOAD
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|SolrDispatchFilter
operator|.
name|Action
operator|.
name|ADMIN
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|SolrDispatchFilter
operator|.
name|Action
operator|.
name|FORWARD
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|SolrDispatchFilter
operator|.
name|Action
operator|.
name|PASSTHROUGH
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|SolrDispatchFilter
operator|.
name|Action
operator|.
name|PROCESS
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|SolrDispatchFilter
operator|.
name|Action
operator|.
name|REMOTEQUERY
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|SolrDispatchFilter
operator|.
name|Action
operator|.
name|RETRY
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|SolrDispatchFilter
operator|.
name|Action
operator|.
name|RETURN
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HeaderIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntityEnclosingRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpDelete
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpEntityEnclosingRequestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpHead
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPost
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPut
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpRequestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|InputStreamEntity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Aliases
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|MapSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|ContentStreamHandlerBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|logging
operator|.
name|MDCLoggingContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|QueryResponseWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|QueryResponseWriterUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
operator|.
name|AuthorizationContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
operator|.
name|AuthorizationContext
operator|.
name|CollectionRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
operator|.
name|AuthorizationContext
operator|.
name|RequestType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
operator|.
name|AuthorizationResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|SolrDispatchFilter
operator|.
name|Action
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|cache
operator|.
name|HttpCacheHeaderUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|cache
operator|.
name|Method
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
operator|.
name|DistributingUpdateProcessorFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RTimer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * This class represents a call made to Solr  **/
end_comment
begin_class
DECL|class|HttpSolrCall
specifier|public
class|class
name|HttpSolrCall
block|{
DECL|field|log
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HttpSolrCall
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|solrDispatchFilter
specifier|private
specifier|final
name|SolrDispatchFilter
name|solrDispatchFilter
decl_stmt|;
DECL|field|cores
specifier|private
specifier|final
name|CoreContainer
name|cores
decl_stmt|;
DECL|field|req
specifier|private
specifier|final
name|HttpServletRequest
name|req
decl_stmt|;
DECL|field|response
specifier|private
specifier|final
name|HttpServletResponse
name|response
decl_stmt|;
DECL|field|retry
specifier|private
specifier|final
name|boolean
name|retry
decl_stmt|;
DECL|field|core
specifier|private
name|SolrCore
name|core
init|=
literal|null
decl_stmt|;
DECL|field|solrReq
specifier|private
name|SolrQueryRequest
name|solrReq
init|=
literal|null
decl_stmt|;
DECL|field|handler
specifier|private
name|SolrRequestHandler
name|handler
init|=
literal|null
decl_stmt|;
DECL|field|queryParams
specifier|private
specifier|final
name|SolrParams
name|queryParams
decl_stmt|;
DECL|field|path
specifier|private
name|String
name|path
decl_stmt|;
DECL|field|action
specifier|private
name|Action
name|action
decl_stmt|;
DECL|field|coreUrl
specifier|private
name|String
name|coreUrl
decl_stmt|;
DECL|field|config
specifier|private
name|SolrConfig
name|config
decl_stmt|;
DECL|field|invalidStates
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|invalidStates
decl_stmt|;
DECL|method|getRequestType
specifier|public
name|RequestType
name|getRequestType
parameter_list|()
block|{
return|return
name|requestType
return|;
block|}
DECL|field|requestType
specifier|private
name|RequestType
name|requestType
decl_stmt|;
DECL|method|getCollectionsList
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getCollectionsList
parameter_list|()
block|{
return|return
name|collectionsList
return|;
block|}
DECL|field|collectionsList
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|collectionsList
decl_stmt|;
DECL|method|HttpSolrCall
name|HttpSolrCall
parameter_list|(
name|SolrDispatchFilter
name|solrDispatchFilter
parameter_list|,
name|CoreContainer
name|cores
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|boolean
name|retry
parameter_list|)
block|{
name|this
operator|.
name|solrDispatchFilter
operator|=
name|solrDispatchFilter
expr_stmt|;
name|this
operator|.
name|cores
operator|=
name|cores
expr_stmt|;
name|this
operator|.
name|req
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
name|this
operator|.
name|retry
operator|=
name|retry
expr_stmt|;
name|this
operator|.
name|requestType
operator|=
name|RequestType
operator|.
name|UNKNOWN
expr_stmt|;
name|queryParams
operator|=
name|SolrRequestParsers
operator|.
name|parseQueryString
argument_list|(
name|req
operator|.
name|getQueryString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getPath
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
DECL|method|getReq
specifier|public
name|HttpServletRequest
name|getReq
parameter_list|()
block|{
return|return
name|req
return|;
block|}
DECL|method|getCore
specifier|public
name|SolrCore
name|getCore
parameter_list|()
block|{
return|return
name|core
return|;
block|}
DECL|method|getQueryParams
specifier|public
name|SolrParams
name|getQueryParams
parameter_list|()
block|{
return|return
name|queryParams
return|;
block|}
DECL|method|init
specifier|private
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
comment|//The states of client that is invalid in this request
name|Aliases
name|aliases
init|=
literal|null
decl_stmt|;
name|String
name|corename
init|=
literal|""
decl_stmt|;
name|String
name|origCorename
init|=
literal|null
decl_stmt|;
comment|// set a request timer which can be reused by requests if needed
name|req
operator|.
name|setAttribute
argument_list|(
name|SolrRequestParsers
operator|.
name|REQUEST_TIMER_SERVLET_ATTRIBUTE
argument_list|,
operator|new
name|RTimer
argument_list|()
argument_list|)
expr_stmt|;
comment|// put the core container in request attribute
name|req
operator|.
name|setAttribute
argument_list|(
literal|"org.apache.solr.CoreContainer"
argument_list|,
name|cores
argument_list|)
expr_stmt|;
name|path
operator|=
name|req
operator|.
name|getServletPath
argument_list|()
expr_stmt|;
if|if
condition|(
name|req
operator|.
name|getPathInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// this lets you handle /update/commit when /update is a servlet
name|path
operator|+=
name|req
operator|.
name|getPathInfo
argument_list|()
expr_stmt|;
block|}
comment|// check for management path
name|String
name|alternate
init|=
name|cores
operator|.
name|getManagementPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|alternate
operator|!=
literal|null
operator|&&
name|path
operator|.
name|startsWith
argument_list|(
name|alternate
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|alternate
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// unused feature ?
name|int
name|idx
init|=
name|path
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
comment|// save the portion after the ':' for a 'handler' path parameter
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
name|boolean
name|usingAliases
init|=
literal|false
decl_stmt|;
comment|// Check for container handlers
name|handler
operator|=
name|cores
operator|.
name|getRequestHandler
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|solrReq
operator|=
name|SolrRequestParsers
operator|.
name|DEFAULT
operator|.
name|parse
argument_list|(
literal|null
argument_list|,
name|path
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|solrReq
operator|.
name|getContext
argument_list|()
operator|.
name|put
argument_list|(
name|CoreContainer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|cores
argument_list|)
expr_stmt|;
name|requestType
operator|=
name|RequestType
operator|.
name|ADMIN
expr_stmt|;
name|action
operator|=
name|ADMIN
expr_stmt|;
return|return;
block|}
else|else
block|{
comment|//otherwise, we should find a core from the path
name|idx
operator|=
name|path
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|>
literal|1
condition|)
block|{
comment|// try to get the corename as a request parameter first
name|corename
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|idx
argument_list|)
expr_stmt|;
comment|// look at aliases
if|if
condition|(
name|cores
operator|.
name|isZooKeeperAware
argument_list|()
condition|)
block|{
name|origCorename
operator|=
name|corename
expr_stmt|;
name|ZkStateReader
name|reader
init|=
name|cores
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|aliases
operator|=
name|reader
operator|.
name|getAliases
argument_list|()
expr_stmt|;
if|if
condition|(
name|aliases
operator|!=
literal|null
operator|&&
name|aliases
operator|.
name|collectionAliasSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|usingAliases
operator|=
literal|true
expr_stmt|;
name|String
name|alias
init|=
name|aliases
operator|.
name|getCollectionAlias
argument_list|(
name|corename
argument_list|)
decl_stmt|;
if|if
condition|(
name|alias
operator|!=
literal|null
condition|)
block|{
name|collectionsList
operator|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|alias
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|corename
operator|=
name|collectionsList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|core
operator|=
name|cores
operator|.
name|getCore
argument_list|(
name|corename
argument_list|)
expr_stmt|;
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|core
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|cores
operator|.
name|isZooKeeperAware
argument_list|()
condition|)
block|{
name|core
operator|=
name|cores
operator|.
name|getCore
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|core
operator|==
literal|null
operator|&&
name|cores
operator|.
name|isZooKeeperAware
argument_list|()
condition|)
block|{
comment|// we couldn't find the core - lets make sure a collection was not specified instead
name|core
operator|=
name|getCoreByCollection
argument_list|(
name|corename
argument_list|)
expr_stmt|;
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
comment|// we found a core, update the path
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
name|idx
argument_list|)
expr_stmt|;
if|if
condition|(
name|collectionsList
operator|==
literal|null
condition|)
name|collectionsList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|collectionsList
operator|.
name|add
argument_list|(
name|corename
argument_list|)
expr_stmt|;
block|}
comment|// if we couldn't find it locally, look on other nodes
name|extractRemotePath
argument_list|(
name|corename
argument_list|,
name|origCorename
argument_list|,
name|idx
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
return|return;
comment|// try the default core
if|if
condition|(
name|core
operator|==
literal|null
condition|)
block|{
name|core
operator|=
name|cores
operator|.
name|getCore
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
comment|// With a valid core...
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
name|MDCLoggingContext
operator|.
name|setCore
argument_list|(
name|core
argument_list|)
expr_stmt|;
name|config
operator|=
name|core
operator|.
name|getSolrConfig
argument_list|()
expr_stmt|;
comment|// get or create/cache the parser for the core
name|SolrRequestParsers
name|parser
init|=
name|config
operator|.
name|getRequestParsers
argument_list|()
decl_stmt|;
comment|// Determine the handler from the url path if not set
comment|// (we might already have selected the cores handler)
name|extractHandlerFromURLPath
argument_list|(
name|parser
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
return|return;
comment|// With a valid handler and a valid core...
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
comment|// if not a /select, create the request
if|if
condition|(
name|solrReq
operator|==
literal|null
condition|)
block|{
name|solrReq
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|core
argument_list|,
name|path
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|usingAliases
condition|)
block|{
name|processAliases
argument_list|(
name|aliases
argument_list|,
name|collectionsList
argument_list|)
expr_stmt|;
block|}
name|action
operator|=
name|PROCESS
expr_stmt|;
return|return;
comment|// we are done with a valid handler
block|}
block|}
name|SolrDispatchFilter
operator|.
name|log
operator|.
name|debug
argument_list|(
literal|"no handler or core retrieved for "
operator|+
name|path
operator|+
literal|", follow through..."
argument_list|)
expr_stmt|;
name|action
operator|=
name|PASSTHROUGH
expr_stmt|;
block|}
comment|/**    * Extract handler from the URL path if not set.    * This returns true if the action is set.    *     */
DECL|method|extractHandlerFromURLPath
specifier|private
name|void
name|extractHandlerFromURLPath
parameter_list|(
name|SolrRequestParsers
name|parser
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|handler
operator|==
literal|null
operator|&&
name|path
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// don't match "" or "/" as valid path
name|handler
operator|=
name|core
operator|.
name|getRequestHandler
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
comment|//may be a restlet path
comment|// Handle /schema/* paths via Restlet
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
literal|"/schema"
argument_list|)
operator|||
name|path
operator|.
name|startsWith
argument_list|(
literal|"/schema/"
argument_list|)
condition|)
block|{
name|solrReq
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|core
argument_list|,
name|path
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|SolrRequestInfo
operator|.
name|setRequestInfo
argument_list|(
operator|new
name|SolrRequestInfo
argument_list|(
name|solrReq
argument_list|,
operator|new
name|SolrQueryResponse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getServletPath
argument_list|()
argument_list|)
condition|)
block|{
comment|// avoid endless loop - pass through to Restlet via webapp
name|action
operator|=
name|PASSTHROUGH
expr_stmt|;
return|return;
block|}
else|else
block|{
comment|// forward rewritten URI (without path prefix and core/collection name) to Restlet
name|action
operator|=
name|FORWARD
expr_stmt|;
return|return;
block|}
block|}
block|}
comment|// no handler yet but allowed to handle select; let's check
if|if
condition|(
name|handler
operator|==
literal|null
operator|&&
name|parser
operator|.
name|isHandleSelect
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"/select"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
operator|||
literal|"/select/"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|solrReq
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|core
argument_list|,
name|path
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|invalidStates
operator|=
name|checkStateIsValid
argument_list|(
name|solrReq
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|CloudSolrClient
operator|.
name|STATE_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|qt
init|=
name|solrReq
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|)
decl_stmt|;
name|handler
operator|=
name|core
operator|.
name|getRequestHandler
argument_list|(
name|qt
argument_list|)
expr_stmt|;
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"unknown handler: "
operator|+
name|qt
argument_list|)
throw|;
block|}
if|if
condition|(
name|qt
operator|!=
literal|null
operator|&&
name|qt
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
operator|&&
operator|(
name|handler
operator|instanceof
name|ContentStreamHandlerBase
operator|)
condition|)
block|{
comment|//For security reasons it's a bad idea to allow a leading '/', ex: /select?qt=/update see SOLR-3161
comment|//There was no restriction from Solr 1.4 thru 3.5 and it's not supported for update handlers.
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Invalid Request Handler ('qt').  Do not use /select to access: "
operator|+
name|qt
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
DECL|method|extractRemotePath
specifier|private
name|void
name|extractRemotePath
parameter_list|(
name|String
name|corename
parameter_list|,
name|String
name|origCorename
parameter_list|,
name|int
name|idx
parameter_list|)
throws|throws
name|UnsupportedEncodingException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|core
operator|==
literal|null
operator|&&
name|idx
operator|>
literal|0
condition|)
block|{
name|coreUrl
operator|=
name|getRemotCoreUrl
argument_list|(
name|corename
argument_list|,
name|origCorename
argument_list|)
expr_stmt|;
comment|// don't proxy for internal update requests
name|invalidStates
operator|=
name|checkStateIsValid
argument_list|(
name|queryParams
operator|.
name|get
argument_list|(
name|CloudSolrClient
operator|.
name|STATE_VERSION
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|coreUrl
operator|!=
literal|null
operator|&&
name|queryParams
operator|.
name|get
argument_list|(
name|DistributingUpdateProcessorFactory
operator|.
name|DISTRIB_UPDATE_PARAM
argument_list|)
operator|==
literal|null
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
name|idx
argument_list|)
expr_stmt|;
if|if
condition|(
name|invalidStates
operator|!=
literal|null
condition|)
block|{
comment|//it does not make sense to send the request to a remote node
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|INVALID_STATE
argument_list|,
operator|new
name|String
argument_list|(
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|invalidStates
argument_list|)
argument_list|,
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
operator|.
name|UTF_8
argument_list|)
argument_list|)
throw|;
block|}
name|action
operator|=
name|REMOTEQUERY
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|retry
condition|)
block|{
comment|// we couldn't find a core to work with, try reloading aliases
comment|// TODO: it would be nice if admin ui elements skipped this...
name|ZkStateReader
name|reader
init|=
name|cores
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|reader
operator|.
name|updateAliases
argument_list|()
expr_stmt|;
name|action
operator|=
name|RETRY
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * This method processes the request.    */
DECL|method|call
specifier|public
name|Action
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|MDCLoggingContext
operator|.
name|reset
argument_list|()
expr_stmt|;
name|MDCLoggingContext
operator|.
name|setNode
argument_list|(
name|cores
argument_list|)
expr_stmt|;
if|if
condition|(
name|cores
operator|==
literal|null
condition|)
block|{
name|sendError
argument_list|(
literal|503
argument_list|,
literal|"Server is shutting down or failed to initialize"
argument_list|)
expr_stmt|;
return|return
name|RETURN
return|;
block|}
if|if
condition|(
name|solrDispatchFilter
operator|.
name|abortErrorMessage
operator|!=
literal|null
condition|)
block|{
name|sendError
argument_list|(
literal|500
argument_list|,
name|solrDispatchFilter
operator|.
name|abortErrorMessage
argument_list|)
expr_stmt|;
return|return
name|RETURN
return|;
block|}
try|try
block|{
name|init
argument_list|()
expr_stmt|;
comment|/* Authorize the request if        1. Authorization is enabled, and        2. The requested resource is not a known static file         */
if|if
condition|(
name|cores
operator|.
name|getAuthorizationPlugin
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|AuthorizationContext
name|context
init|=
name|getAuthCtx
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|context
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|AuthorizationResponse
name|authResponse
init|=
name|cores
operator|.
name|getAuthorizationPlugin
argument_list|()
operator|.
name|authorize
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|authResponse
operator|.
name|statusCode
operator|==
name|HttpStatus
operator|.
name|SC_ACCEPTED
operator|)
operator|&&
operator|!
operator|(
name|authResponse
operator|.
name|statusCode
operator|==
name|HttpStatus
operator|.
name|SC_OK
operator|)
condition|)
block|{
name|sendError
argument_list|(
name|authResponse
operator|.
name|statusCode
argument_list|,
literal|"Unauthorized request, Response code: "
operator|+
name|authResponse
operator|.
name|statusCode
argument_list|)
expr_stmt|;
return|return
name|RETURN
return|;
block|}
block|}
name|HttpServletResponse
name|resp
init|=
name|response
decl_stmt|;
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|ADMIN
case|:
name|handleAdminRequest
argument_list|()
expr_stmt|;
return|return
name|RETURN
return|;
case|case
name|REMOTEQUERY
case|:
name|remoteQuery
argument_list|(
name|coreUrl
operator|+
name|path
argument_list|,
name|resp
argument_list|)
expr_stmt|;
return|return
name|RETURN
return|;
case|case
name|PROCESS
case|:
specifier|final
name|Method
name|reqMethod
init|=
name|Method
operator|.
name|getMethod
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
decl_stmt|;
name|HttpCacheHeaderUtil
operator|.
name|setCacheControlHeader
argument_list|(
name|config
argument_list|,
name|resp
argument_list|,
name|reqMethod
argument_list|)
expr_stmt|;
comment|// unless we have been explicitly told not to, do cache validation
comment|// if we fail cache validation, execute the query
if|if
condition|(
name|config
operator|.
name|getHttpCachingConfig
argument_list|()
operator|.
name|isNever304
argument_list|()
operator|||
operator|!
name|HttpCacheHeaderUtil
operator|.
name|doCacheHeaderValidation
argument_list|(
name|solrReq
argument_list|,
name|req
argument_list|,
name|reqMethod
argument_list|,
name|resp
argument_list|)
condition|)
block|{
name|SolrQueryResponse
name|solrRsp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
comment|/* even for HEAD requests, we need to execute the handler to                * ensure we don't get an error (and to make sure the correct                * QueryResponseWriter is selected and we get the correct                * Content-Type)                */
name|SolrRequestInfo
operator|.
name|setRequestInfo
argument_list|(
operator|new
name|SolrRequestInfo
argument_list|(
name|solrReq
argument_list|,
name|solrRsp
argument_list|)
argument_list|)
expr_stmt|;
name|execute
argument_list|(
name|solrRsp
argument_list|)
expr_stmt|;
name|HttpCacheHeaderUtil
operator|.
name|checkHttpCachingVeto
argument_list|(
name|solrRsp
argument_list|,
name|resp
argument_list|,
name|reqMethod
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|headers
init|=
name|solrRsp
operator|.
name|httpHeaders
argument_list|()
decl_stmt|;
while|while
condition|(
name|headers
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
init|=
name|headers
operator|.
name|next
argument_list|()
decl_stmt|;
name|resp
operator|.
name|addHeader
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QueryResponseWriter
name|responseWriter
init|=
name|core
operator|.
name|getQueryResponseWriter
argument_list|(
name|solrReq
argument_list|)
decl_stmt|;
if|if
condition|(
name|invalidStates
operator|!=
literal|null
condition|)
name|solrReq
operator|.
name|getContext
argument_list|()
operator|.
name|put
argument_list|(
name|CloudSolrClient
operator|.
name|STATE_VERSION
argument_list|,
name|invalidStates
argument_list|)
expr_stmt|;
name|writeResponse
argument_list|(
name|solrRsp
argument_list|,
name|responseWriter
argument_list|,
name|reqMethod
argument_list|)
expr_stmt|;
block|}
return|return
name|RETURN
return|;
default|default:
return|return
name|action
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|sendError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
comment|// walk the the entire cause chain to search for an Error
name|Throwable
name|t
init|=
name|ex
decl_stmt|;
while|while
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|Error
condition|)
block|{
if|if
condition|(
name|t
operator|!=
name|ex
condition|)
block|{
name|SolrDispatchFilter
operator|.
name|log
operator|.
name|error
argument_list|(
literal|"An Error was wrapped in another exception - please report complete stacktrace on SOLR-6161"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|(
name|Error
operator|)
name|t
throw|;
block|}
name|t
operator|=
name|t
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
return|return
name|RETURN
return|;
block|}
finally|finally
block|{
name|MDCLoggingContext
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|destroy
name|void
name|destroy
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|solrReq
operator|!=
literal|null
condition|)
block|{
name|SolrDispatchFilter
operator|.
name|log
operator|.
name|debug
argument_list|(
literal|"Closing out SolrRequest: {}"
argument_list|,
name|solrReq
argument_list|)
expr_stmt|;
name|solrReq
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
name|core
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|SolrRequestInfo
operator|.
name|clearRequestInfo
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|remoteQuery
specifier|private
name|void
name|remoteQuery
parameter_list|(
name|String
name|coreUrl
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpRequestBase
name|method
init|=
literal|null
decl_stmt|;
name|HttpEntity
name|httpEntity
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|String
name|urlstr
init|=
name|coreUrl
decl_stmt|;
name|String
name|queryString
init|=
name|req
operator|.
name|getQueryString
argument_list|()
decl_stmt|;
name|urlstr
operator|+=
name|queryString
operator|==
literal|null
condition|?
literal|""
else|:
literal|"?"
operator|+
name|queryString
expr_stmt|;
name|boolean
name|isPostOrPutRequest
init|=
literal|"POST"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
operator|||
literal|"PUT"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"GET"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
condition|)
block|{
name|method
operator|=
operator|new
name|HttpGet
argument_list|(
name|urlstr
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"HEAD"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
condition|)
block|{
name|method
operator|=
operator|new
name|HttpHead
argument_list|(
name|urlstr
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isPostOrPutRequest
condition|)
block|{
name|HttpEntityEnclosingRequestBase
name|entityRequest
init|=
literal|"POST"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
condition|?
operator|new
name|HttpPost
argument_list|(
name|urlstr
argument_list|)
else|:
operator|new
name|HttpPut
argument_list|(
name|urlstr
argument_list|)
decl_stmt|;
name|HttpEntity
name|entity
init|=
operator|new
name|InputStreamEntity
argument_list|(
name|req
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|req
operator|.
name|getContentLength
argument_list|()
argument_list|)
decl_stmt|;
name|entityRequest
operator|.
name|setEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|method
operator|=
name|entityRequest
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"DELETE"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
condition|)
block|{
name|method
operator|=
operator|new
name|HttpDelete
argument_list|(
name|urlstr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unexpected method type: "
operator|+
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
throw|;
block|}
for|for
control|(
name|Enumeration
argument_list|<
name|String
argument_list|>
name|e
init|=
name|req
operator|.
name|getHeaderNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|headerName
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|"host"
operator|.
name|equalsIgnoreCase
argument_list|(
name|headerName
argument_list|)
operator|&&
operator|!
literal|"authorization"
operator|.
name|equalsIgnoreCase
argument_list|(
name|headerName
argument_list|)
operator|&&
operator|!
literal|"accept"
operator|.
name|equalsIgnoreCase
argument_list|(
name|headerName
argument_list|)
condition|)
block|{
name|method
operator|.
name|addHeader
argument_list|(
name|headerName
argument_list|,
name|req
operator|.
name|getHeader
argument_list|(
name|headerName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// These headers not supported for HttpEntityEnclosingRequests
if|if
condition|(
name|method
operator|instanceof
name|HttpEntityEnclosingRequest
condition|)
block|{
name|method
operator|.
name|removeHeaders
argument_list|(
name|TRANSFER_ENCODING_HEADER
argument_list|)
expr_stmt|;
name|method
operator|.
name|removeHeaders
argument_list|(
name|CONTENT_LENGTH_HEADER
argument_list|)
expr_stmt|;
block|}
specifier|final
name|HttpResponse
name|response
init|=
name|solrDispatchFilter
operator|.
name|httpClient
operator|.
name|execute
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|int
name|httpStatus
init|=
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
name|httpEntity
operator|=
name|response
operator|.
name|getEntity
argument_list|()
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|httpStatus
argument_list|)
expr_stmt|;
for|for
control|(
name|HeaderIterator
name|responseHeaders
init|=
name|response
operator|.
name|headerIterator
argument_list|()
init|;
name|responseHeaders
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Header
name|header
init|=
name|responseHeaders
operator|.
name|nextHeader
argument_list|()
decl_stmt|;
comment|// We pull out these two headers below because they can cause chunked
comment|// encoding issues with Tomcat
if|if
condition|(
name|header
operator|!=
literal|null
operator|&&
operator|!
name|header
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|TRANSFER_ENCODING_HEADER
argument_list|)
operator|&&
operator|!
name|header
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|CONNECTION_HEADER
argument_list|)
condition|)
block|{
name|resp
operator|.
name|addHeader
argument_list|(
name|header
operator|.
name|getName
argument_list|()
argument_list|,
name|header
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|httpEntity
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|httpEntity
operator|.
name|getContentEncoding
argument_list|()
operator|!=
literal|null
condition|)
name|resp
operator|.
name|setCharacterEncoding
argument_list|(
name|httpEntity
operator|.
name|getContentEncoding
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|httpEntity
operator|.
name|getContentType
argument_list|()
operator|!=
literal|null
condition|)
name|resp
operator|.
name|setContentType
argument_list|(
name|httpEntity
operator|.
name|getContentType
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|httpEntity
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|OutputStream
name|os
init|=
name|resp
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copyLarge
argument_list|(
name|is
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|os
argument_list|)
expr_stmt|;
comment|// TODO: I thought we weren't supposed to explicitly close servlet streams
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|sendError
argument_list|(
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error trying to proxy request for url: "
operator|+
name|coreUrl
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|EntityUtils
operator|.
name|consumeQuietly
argument_list|(
name|httpEntity
argument_list|)
expr_stmt|;
if|if
condition|(
name|method
operator|!=
literal|null
operator|&&
operator|!
name|success
condition|)
block|{
name|method
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|sendError
specifier|protected
name|void
name|sendError
parameter_list|(
name|Throwable
name|ex
parameter_list|)
throws|throws
name|IOException
block|{
name|Exception
name|exp
init|=
literal|null
decl_stmt|;
name|SolrCore
name|localCore
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SolrQueryResponse
name|solrResp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
if|if
condition|(
name|ex
operator|instanceof
name|Exception
condition|)
block|{
name|solrResp
operator|.
name|setException
argument_list|(
operator|(
name|Exception
operator|)
name|ex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|solrResp
operator|.
name|setException
argument_list|(
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|core
operator|==
literal|null
condition|)
block|{
name|localCore
operator|=
name|cores
operator|.
name|getCore
argument_list|(
literal|""
argument_list|)
expr_stmt|;
comment|// default core
block|}
else|else
block|{
name|localCore
operator|=
name|core
expr_stmt|;
block|}
if|if
condition|(
name|solrReq
operator|==
literal|null
condition|)
block|{
specifier|final
name|SolrParams
name|solrParams
decl_stmt|;
if|if
condition|(
name|req
operator|!=
literal|null
condition|)
block|{
comment|// use GET parameters if available:
name|solrParams
operator|=
name|SolrRequestParsers
operator|.
name|parseQueryString
argument_list|(
name|req
operator|.
name|getQueryString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we have no params at all, use empty ones:
name|solrParams
operator|=
operator|new
name|MapSolrParams
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|solrReq
operator|=
operator|new
name|SolrQueryRequestBase
argument_list|(
name|core
argument_list|,
name|solrParams
argument_list|)
block|{         }
expr_stmt|;
block|}
name|QueryResponseWriter
name|writer
init|=
name|core
operator|.
name|getQueryResponseWriter
argument_list|(
name|solrReq
argument_list|)
decl_stmt|;
name|writeResponse
argument_list|(
name|solrResp
argument_list|,
name|writer
argument_list|,
name|Method
operator|.
name|GET
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// This error really does not matter
name|exp
operator|=
name|e
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|exp
operator|!=
literal|null
condition|)
block|{
name|SimpleOrderedMap
name|info
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
name|int
name|code
init|=
name|ResponseUtils
operator|.
name|getErrorInfo
argument_list|(
name|ex
argument_list|,
name|info
argument_list|,
name|SolrDispatchFilter
operator|.
name|log
argument_list|)
decl_stmt|;
name|sendError
argument_list|(
name|code
argument_list|,
name|info
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|core
operator|==
literal|null
operator|&&
name|localCore
operator|!=
literal|null
condition|)
block|{
name|localCore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|sendError
name|void
name|sendError
parameter_list|(
name|int
name|code
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|response
operator|.
name|sendError
argument_list|(
name|code
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
name|SolrDispatchFilter
operator|.
name|log
operator|.
name|info
argument_list|(
literal|"Unable to write error response, client closed connection or we are shutting down"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|execute
specifier|protected
name|void
name|execute
parameter_list|(
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
comment|// a custom filter could add more stuff to the request before passing it on.
comment|// for example: sreq.getContext().put( "HttpServletRequest", req );
comment|// used for logging query stats in SolrCore.execute()
name|solrReq
operator|.
name|getContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"webapp"
argument_list|,
name|req
operator|.
name|getContextPath
argument_list|()
argument_list|)
expr_stmt|;
name|solrReq
operator|.
name|getCore
argument_list|()
operator|.
name|execute
argument_list|(
name|handler
argument_list|,
name|solrReq
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
DECL|method|handleAdminRequest
specifier|private
name|void
name|handleAdminRequest
parameter_list|()
throws|throws
name|IOException
block|{
name|SolrQueryResponse
name|solrResp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
name|SolrCore
operator|.
name|preDecorateResponse
argument_list|(
name|solrReq
argument_list|,
name|solrResp
argument_list|)
expr_stmt|;
name|handler
operator|.
name|handleRequest
argument_list|(
name|solrReq
argument_list|,
name|solrResp
argument_list|)
expr_stmt|;
name|SolrCore
operator|.
name|postDecorateResponse
argument_list|(
name|handler
argument_list|,
name|solrReq
argument_list|,
name|solrResp
argument_list|)
expr_stmt|;
if|if
condition|(
name|SolrDispatchFilter
operator|.
name|log
operator|.
name|isInfoEnabled
argument_list|()
operator|&&
name|solrResp
operator|.
name|getToLog
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|SolrDispatchFilter
operator|.
name|log
operator|.
name|info
argument_list|(
name|solrResp
operator|.
name|getToLogAsString
argument_list|(
literal|"[admin] "
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QueryResponseWriter
name|respWriter
init|=
name|SolrCore
operator|.
name|DEFAULT_RESPONSE_WRITERS
operator|.
name|get
argument_list|(
name|solrReq
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|respWriter
operator|==
literal|null
condition|)
name|respWriter
operator|=
name|SolrCore
operator|.
name|DEFAULT_RESPONSE_WRITERS
operator|.
name|get
argument_list|(
literal|"standard"
argument_list|)
expr_stmt|;
name|writeResponse
argument_list|(
name|solrResp
argument_list|,
name|respWriter
argument_list|,
name|Method
operator|.
name|getMethod
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|processAliases
specifier|private
name|void
name|processAliases
parameter_list|(
name|Aliases
name|aliases
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|collectionsList
parameter_list|)
block|{
name|String
name|collection
init|=
name|solrReq
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|collectionsList
operator|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|collection
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|collectionsList
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|newCollectionsList
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|collectionsList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|col
range|:
name|collectionsList
control|)
block|{
name|String
name|al
init|=
name|aliases
operator|.
name|getCollectionAlias
argument_list|(
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|al
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|aliasList
init|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|al
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|newCollectionsList
operator|.
name|addAll
argument_list|(
name|aliasList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newCollectionsList
operator|.
name|add
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|newCollectionsList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|StringBuilder
name|collectionString
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|newCollectionsList
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|sz
init|=
name|newCollectionsList
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|collectionString
operator|.
name|append
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|newCollectionsList
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|collectionString
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|solrReq
operator|.
name|getParams
argument_list|()
argument_list|)
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|COLLECTION_PROP
argument_list|,
name|collectionString
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|solrReq
operator|.
name|setParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|writeResponse
specifier|private
name|void
name|writeResponse
parameter_list|(
name|SolrQueryResponse
name|solrRsp
parameter_list|,
name|QueryResponseWriter
name|responseWriter
parameter_list|,
name|Method
name|reqMethod
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Object
name|invalidStates
init|=
name|solrReq
operator|.
name|getContext
argument_list|()
operator|.
name|get
argument_list|(
name|CloudSolrClient
operator|.
name|STATE_VERSION
argument_list|)
decl_stmt|;
comment|//This is the last item added to the response and the client would expect it that way.
comment|//If that assumption is changed , it would fail. This is done to avoid an O(n) scan on
comment|// the response for each request
if|if
condition|(
name|invalidStates
operator|!=
literal|null
condition|)
name|solrRsp
operator|.
name|add
argument_list|(
name|CloudSolrClient
operator|.
name|STATE_VERSION
argument_list|,
name|invalidStates
argument_list|)
expr_stmt|;
comment|// Now write it out
specifier|final
name|String
name|ct
init|=
name|responseWriter
operator|.
name|getContentType
argument_list|(
name|solrReq
argument_list|,
name|solrRsp
argument_list|)
decl_stmt|;
comment|// don't call setContentType on null
if|if
condition|(
literal|null
operator|!=
name|ct
condition|)
name|response
operator|.
name|setContentType
argument_list|(
name|ct
argument_list|)
expr_stmt|;
if|if
condition|(
name|solrRsp
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|NamedList
name|info
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
name|int
name|code
init|=
name|ResponseUtils
operator|.
name|getErrorInfo
argument_list|(
name|solrRsp
operator|.
name|getException
argument_list|()
argument_list|,
name|info
argument_list|,
name|SolrDispatchFilter
operator|.
name|log
argument_list|)
decl_stmt|;
name|solrRsp
operator|.
name|add
argument_list|(
literal|"error"
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|code
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Method
operator|.
name|HEAD
operator|!=
name|reqMethod
condition|)
block|{
name|QueryResponseWriterUtil
operator|.
name|writeQueryResponse
argument_list|(
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|responseWriter
argument_list|,
name|solrReq
argument_list|,
name|solrRsp
argument_list|,
name|ct
argument_list|)
expr_stmt|;
block|}
comment|//else http HEAD request, nothing to write out, waited this long just to get ContentType
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
name|SolrDispatchFilter
operator|.
name|log
operator|.
name|info
argument_list|(
literal|"Unable to write response, client closed connection or we are shutting down"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkStateIsValid
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|checkStateIsValid
parameter_list|(
name|String
name|stateVer
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|pairs
decl_stmt|;
if|if
condition|(
name|stateVer
operator|!=
literal|null
operator|&&
operator|!
name|stateVer
operator|.
name|isEmpty
argument_list|()
operator|&&
name|cores
operator|.
name|isZooKeeperAware
argument_list|()
condition|)
block|{
comment|// many have multiple collections separated by |
name|pairs
operator|=
name|StringUtils
operator|.
name|split
argument_list|(
name|stateVer
argument_list|,
literal|'|'
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|pair
range|:
name|pairs
control|)
block|{
name|String
index|[]
name|pcs
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|pair
argument_list|,
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|pcs
operator|.
name|length
operator|==
literal|2
operator|&&
operator|!
name|pcs
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|pcs
index|[
literal|1
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Integer
name|status
init|=
name|cores
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|compareStateVersions
argument_list|(
name|pcs
index|[
literal|0
index|]
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|pcs
index|[
literal|1
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|result
operator|==
literal|null
condition|)
name|result
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|pcs
index|[
literal|0
index|]
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|getCoreByCollection
specifier|private
name|SolrCore
name|getCoreByCollection
parameter_list|(
name|String
name|corename
parameter_list|)
block|{
name|ZkStateReader
name|zkStateReader
init|=
name|cores
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|clusterState
operator|.
name|getActiveSlicesMap
argument_list|(
name|corename
argument_list|)
decl_stmt|;
if|if
condition|(
name|slices
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// look for a core on this node
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
name|entries
init|=
name|slices
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|SolrCore
name|core
init|=
literal|null
decl_stmt|;
name|done
label|:
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
comment|// first see if we have the leader
name|ZkNodeProps
name|leaderProps
init|=
name|clusterState
operator|.
name|getLeader
argument_list|(
name|corename
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|leaderProps
operator|!=
literal|null
condition|)
block|{
name|core
operator|=
name|checkProps
argument_list|(
name|leaderProps
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
break|break
name|done
break|;
block|}
comment|// check everyone then
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|shards
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getReplicasMap
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
argument_list|>
name|shardEntries
init|=
name|shards
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|shardEntry
range|:
name|shardEntries
control|)
block|{
name|Replica
name|zkProps
init|=
name|shardEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|core
operator|=
name|checkProps
argument_list|(
name|zkProps
argument_list|)
expr_stmt|;
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
break|break
name|done
break|;
block|}
block|}
block|}
return|return
name|core
return|;
block|}
DECL|method|checkProps
specifier|private
name|SolrCore
name|checkProps
parameter_list|(
name|ZkNodeProps
name|zkProps
parameter_list|)
block|{
name|String
name|corename
decl_stmt|;
name|SolrCore
name|core
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cores
operator|.
name|getZkController
argument_list|()
operator|.
name|getNodeName
argument_list|()
operator|.
name|equals
argument_list|(
name|zkProps
operator|.
name|getStr
argument_list|(
name|NODE_NAME_PROP
argument_list|)
argument_list|)
condition|)
block|{
name|corename
operator|=
name|zkProps
operator|.
name|getStr
argument_list|(
name|CORE_NAME_PROP
argument_list|)
expr_stmt|;
name|core
operator|=
name|cores
operator|.
name|getCore
argument_list|(
name|corename
argument_list|)
expr_stmt|;
block|}
return|return
name|core
return|;
block|}
DECL|method|getSlicesForCollections
specifier|private
name|void
name|getSlicesForCollections
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|Collection
argument_list|<
name|Slice
argument_list|>
name|slices
parameter_list|,
name|boolean
name|activeSlices
parameter_list|)
block|{
if|if
condition|(
name|activeSlices
condition|)
block|{
for|for
control|(
name|String
name|collection
range|:
name|clusterState
operator|.
name|getCollections
argument_list|()
control|)
block|{
specifier|final
name|Collection
argument_list|<
name|Slice
argument_list|>
name|activeCollectionSlices
init|=
name|clusterState
operator|.
name|getActiveSlices
argument_list|(
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
name|activeCollectionSlices
operator|!=
literal|null
condition|)
block|{
name|slices
operator|.
name|addAll
argument_list|(
name|activeCollectionSlices
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|String
name|collection
range|:
name|clusterState
operator|.
name|getCollections
argument_list|()
control|)
block|{
specifier|final
name|Collection
argument_list|<
name|Slice
argument_list|>
name|collectionSlices
init|=
name|clusterState
operator|.
name|getSlices
argument_list|(
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
name|collectionSlices
operator|!=
literal|null
condition|)
block|{
name|slices
operator|.
name|addAll
argument_list|(
name|collectionSlices
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|getRemotCoreUrl
specifier|private
name|String
name|getRemotCoreUrl
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|String
name|origCorename
parameter_list|)
block|{
name|ClusterState
name|clusterState
init|=
name|cores
operator|.
name|getZkController
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Slice
argument_list|>
name|slices
init|=
name|clusterState
operator|.
name|getActiveSlices
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|boolean
name|byCoreName
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|slices
operator|==
literal|null
condition|)
block|{
name|slices
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
comment|// look by core name
name|byCoreName
operator|=
literal|true
expr_stmt|;
name|getSlicesForCollections
argument_list|(
name|clusterState
argument_list|,
name|slices
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|slices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getSlicesForCollections
argument_list|(
name|clusterState
argument_list|,
name|slices
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|slices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|collectionsList
operator|==
literal|null
condition|)
name|collectionsList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|collectionsList
operator|.
name|add
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|String
name|coreUrl
init|=
name|getCoreUrl
argument_list|(
name|collectionName
argument_list|,
name|origCorename
argument_list|,
name|clusterState
argument_list|,
name|slices
argument_list|,
name|byCoreName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|coreUrl
operator|==
literal|null
condition|)
block|{
name|coreUrl
operator|=
name|getCoreUrl
argument_list|(
name|collectionName
argument_list|,
name|origCorename
argument_list|,
name|clusterState
argument_list|,
name|slices
argument_list|,
name|byCoreName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|coreUrl
return|;
block|}
DECL|method|getCoreUrl
specifier|private
name|String
name|getCoreUrl
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|String
name|origCorename
parameter_list|,
name|ClusterState
name|clusterState
parameter_list|,
name|Collection
argument_list|<
name|Slice
argument_list|>
name|slices
parameter_list|,
name|boolean
name|byCoreName
parameter_list|,
name|boolean
name|activeReplicas
parameter_list|)
block|{
name|String
name|coreUrl
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|liveNodes
init|=
name|clusterState
operator|.
name|getLiveNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|Slice
name|slice
range|:
name|slices
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|sliceShards
init|=
name|slice
operator|.
name|getReplicasMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Replica
name|replica
range|:
name|sliceShards
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|activeReplicas
operator|||
operator|(
name|liveNodes
operator|.
name|contains
argument_list|(
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|)
operator|&&
name|replica
operator|.
name|getState
argument_list|()
operator|==
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
operator|)
condition|)
block|{
if|if
condition|(
name|byCoreName
operator|&&
operator|!
name|collectionName
operator|.
name|equals
argument_list|(
name|replica
operator|.
name|getStr
argument_list|(
name|CORE_NAME_PROP
argument_list|)
argument_list|)
condition|)
block|{
comment|// if it's by core name, make sure they match
continue|continue;
block|}
if|if
condition|(
name|replica
operator|.
name|getStr
argument_list|(
name|BASE_URL_PROP
argument_list|)
operator|.
name|equals
argument_list|(
name|cores
operator|.
name|getZkController
argument_list|()
operator|.
name|getBaseUrl
argument_list|()
argument_list|)
condition|)
block|{
comment|// don't count a local core
continue|continue;
block|}
if|if
condition|(
name|origCorename
operator|!=
literal|null
condition|)
block|{
name|coreUrl
operator|=
name|replica
operator|.
name|getStr
argument_list|(
name|BASE_URL_PROP
argument_list|)
operator|+
literal|"/"
operator|+
name|origCorename
expr_stmt|;
block|}
else|else
block|{
name|coreUrl
operator|=
name|replica
operator|.
name|getCoreUrl
argument_list|()
expr_stmt|;
if|if
condition|(
name|coreUrl
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|coreUrl
operator|=
name|coreUrl
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|coreUrl
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|coreUrl
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getAuthCtx
specifier|private
name|AuthorizationContext
name|getAuthCtx
parameter_list|()
block|{
name|String
name|resource
init|=
name|getPath
argument_list|()
decl_stmt|;
name|SolrParams
name|params
init|=
name|getQueryParams
argument_list|()
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|CollectionRequest
argument_list|>
name|collectionRequests
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|getCollectionsList
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|collection
range|:
name|getCollectionsList
argument_list|()
control|)
block|{
name|collectionRequests
operator|.
name|add
argument_list|(
operator|new
name|CollectionRequest
argument_list|(
name|collection
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Extract collection name from the params in case of a Collection Admin request
if|if
condition|(
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/admin/collections"
argument_list|)
condition|)
block|{
if|if
condition|(
name|CREATE
operator|.
name|isEqual
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"action"
argument_list|)
argument_list|)
operator|||
name|RELOAD
operator|.
name|isEqual
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"action"
argument_list|)
argument_list|)
operator|||
name|DELETE
operator|.
name|isEqual
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"action"
argument_list|)
argument_list|)
condition|)
name|collectionRequests
operator|.
name|add
argument_list|(
operator|new
name|CollectionRequest
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|params
operator|.
name|get
argument_list|(
name|COLLECTION_PROP
argument_list|)
operator|!=
literal|null
condition|)
name|collectionRequests
operator|.
name|add
argument_list|(
operator|new
name|CollectionRequest
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|COLLECTION_PROP
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Handle the case when it's a /select request and collections are specified as a param
if|if
condition|(
name|resource
operator|.
name|equals
argument_list|(
literal|"/select"
argument_list|)
operator|&&
name|params
operator|.
name|get
argument_list|(
literal|"collection"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|collectionRequests
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|collection
range|:
name|params
operator|.
name|get
argument_list|(
literal|"collection"
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|collectionRequests
operator|.
name|add
argument_list|(
operator|new
name|CollectionRequest
argument_list|(
name|collection
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Populate the request type if the request is select or update
if|if
condition|(
name|requestType
operator|==
name|RequestType
operator|.
name|UNKNOWN
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|startsWith
argument_list|(
literal|"/select"
argument_list|)
operator|||
name|resource
operator|.
name|startsWith
argument_list|(
literal|"/get"
argument_list|)
condition|)
name|requestType
operator|=
name|RequestType
operator|.
name|READ
expr_stmt|;
if|if
condition|(
name|resource
operator|.
name|startsWith
argument_list|(
literal|"/update"
argument_list|)
condition|)
name|requestType
operator|=
name|RequestType
operator|.
name|WRITE
expr_stmt|;
block|}
comment|// There's no collection explicitly mentioned, let's try and extract it from the core if one exists for
comment|// the purpose of processing this request.
if|if
condition|(
name|getCore
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|getCollectionsList
argument_list|()
operator|==
literal|null
operator|||
name|getCollectionsList
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|collectionRequests
operator|.
name|add
argument_list|(
operator|new
name|CollectionRequest
argument_list|(
name|getCore
argument_list|()
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getQueryParams
argument_list|()
operator|.
name|get
argument_list|(
name|COLLECTION_PROP
argument_list|)
operator|!=
literal|null
condition|)
name|collectionRequests
operator|.
name|add
argument_list|(
operator|new
name|CollectionRequest
argument_list|(
name|getQueryParams
argument_list|()
operator|.
name|get
argument_list|(
name|COLLECTION_PROP
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|AuthorizationContext
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
return|return
name|getQueryParams
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Principal
name|getUserPrincipal
parameter_list|()
block|{
return|return
name|getReq
argument_list|()
operator|.
name|getUserPrincipal
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHttpHeader
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|getReq
argument_list|()
operator|.
name|getHeader
argument_list|(
name|s
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Enumeration
name|getHeaderNames
parameter_list|()
block|{
return|return
name|getReq
argument_list|()
operator|.
name|getHeaderNames
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|CollectionRequest
argument_list|>
name|getCollectionRequests
parameter_list|()
block|{
return|return
name|collectionRequests
return|;
block|}
annotation|@
name|Override
specifier|public
name|RequestType
name|getRequestType
parameter_list|()
block|{
return|return
name|requestType
return|;
block|}
specifier|public
name|String
name|getResource
parameter_list|()
block|{
return|return
name|path
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|response
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"userPrincipal: ["
argument_list|)
operator|.
name|append
argument_list|(
name|getUserPrincipal
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|append
argument_list|(
literal|" type: ["
argument_list|)
operator|.
name|append
argument_list|(
name|requestType
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"], collections: ["
argument_list|)
decl_stmt|;
for|for
control|(
name|CollectionRequest
name|collectionRequest
range|:
name|collectionRequests
control|)
block|{
name|response
operator|.
name|append
argument_list|(
name|collectionRequest
operator|.
name|collectionName
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|collectionRequests
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|response
operator|.
name|delete
argument_list|(
name|response
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|,
name|response
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|append
argument_list|(
literal|"], Path: ["
argument_list|)
operator|.
name|append
argument_list|(
name|resource
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
return|;
block|}
DECL|field|CONNECTION_HEADER
specifier|static
specifier|final
name|String
name|CONNECTION_HEADER
init|=
literal|"Connection"
decl_stmt|;
DECL|field|TRANSFER_ENCODING_HEADER
specifier|static
specifier|final
name|String
name|TRANSFER_ENCODING_HEADER
init|=
literal|"Transfer-Encoding"
decl_stmt|;
DECL|field|CONTENT_LENGTH_HEADER
specifier|static
specifier|final
name|String
name|CONTENT_LENGTH_HEADER
init|=
literal|"Content-Length"
decl_stmt|;
block|}
end_class
end_unit
