begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.servlet
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_comment
comment|/**  * Response helper methods.  */
end_comment
begin_class
DECL|class|ResponseUtils
specifier|public
class|class
name|ResponseUtils
block|{
DECL|method|ResponseUtils
specifier|private
name|ResponseUtils
parameter_list|()
block|{}
comment|/**    * Adds the given Throwable's message to the given NamedList.    *<p>    * If the response code is not a regular code, the Throwable's    * stack trace is both logged and added to the given NamedList.    *<p>    * Status codes less than 100 are adjusted to be 500.    */
DECL|method|getErrorInfo
specifier|public
specifier|static
name|int
name|getErrorInfo
parameter_list|(
name|Throwable
name|ex
parameter_list|,
name|NamedList
name|info
parameter_list|,
name|Logger
name|log
parameter_list|)
block|{
name|int
name|code
init|=
literal|500
decl_stmt|;
if|if
condition|(
name|ex
operator|instanceof
name|SolrException
condition|)
block|{
name|SolrException
name|solrExc
init|=
operator|(
name|SolrException
operator|)
name|ex
decl_stmt|;
name|code
operator|=
name|solrExc
operator|.
name|code
argument_list|()
expr_stmt|;
name|NamedList
argument_list|<
name|String
argument_list|>
name|errorMetadata
init|=
name|solrExc
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
if|if
condition|(
name|errorMetadata
operator|!=
literal|null
condition|)
name|info
operator|.
name|add
argument_list|(
literal|"metadata"
argument_list|,
name|errorMetadata
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Throwable
name|th
init|=
name|ex
init|;
name|th
operator|!=
literal|null
condition|;
name|th
operator|=
name|th
operator|.
name|getCause
argument_list|()
control|)
block|{
name|String
name|msg
init|=
name|th
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|add
argument_list|(
literal|"msg"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// For any regular code, don't include the stack trace
if|if
condition|(
name|code
operator|==
literal|500
operator|||
name|code
operator|<
literal|100
condition|)
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|ex
operator|.
name|printStackTrace
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
argument_list|)
expr_stmt|;
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|info
operator|.
name|add
argument_list|(
literal|"trace"
argument_list|,
name|sw
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// non standard codes have undefined results with various servers
if|if
condition|(
name|code
operator|<
literal|100
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"invalid return code: "
operator|+
name|code
argument_list|)
expr_stmt|;
name|code
operator|=
literal|500
expr_stmt|;
block|}
block|}
name|info
operator|.
name|add
argument_list|(
literal|"code"
argument_list|,
name|code
argument_list|)
expr_stmt|;
return|return
name|code
return|;
block|}
block|}
end_class
end_unit
