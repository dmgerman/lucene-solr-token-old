begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.logging.jul
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|logging
operator|.
name|jul
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|logging
operator|.
name|LoggerInfo
import|;
end_import
begin_class
DECL|class|JulInfo
specifier|public
class|class
name|JulInfo
extends|extends
name|LoggerInfo
block|{
DECL|field|LEVELS
specifier|private
specifier|static
specifier|final
name|Level
index|[]
name|LEVELS
init|=
block|{
literal|null
block|,
comment|// aka unset
name|Level
operator|.
name|FINEST
block|,
name|Level
operator|.
name|FINE
block|,
name|Level
operator|.
name|CONFIG
block|,
name|Level
operator|.
name|INFO
block|,
name|Level
operator|.
name|WARNING
block|,
name|Level
operator|.
name|SEVERE
block|,
name|Level
operator|.
name|OFF
comment|// Level.ALL -- ignore. It is useless.
block|}
decl_stmt|;
DECL|field|logger
specifier|final
name|Logger
name|logger
decl_stmt|;
DECL|method|JulInfo
specifier|public
name|JulInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|Logger
name|logger
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLevel
specifier|public
name|String
name|getLevel
parameter_list|()
block|{
if|if
condition|(
name|logger
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Level
name|level
init|=
name|logger
operator|.
name|getLevel
argument_list|()
decl_stmt|;
if|if
condition|(
name|level
operator|!=
literal|null
condition|)
block|{
return|return
name|level
operator|.
name|getName
argument_list|()
return|;
block|}
for|for
control|(
name|Level
name|l
range|:
name|LEVELS
control|)
block|{
if|if
condition|(
name|l
operator|==
literal|null
condition|)
block|{
comment|// avoid NPE
continue|continue;
block|}
if|if
condition|(
name|logger
operator|.
name|isLoggable
argument_list|(
name|l
argument_list|)
condition|)
block|{
comment|// return first level loggable
return|return
name|l
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
return|return
name|Level
operator|.
name|OFF
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isSet
specifier|public
name|boolean
name|isSet
parameter_list|()
block|{
return|return
operator|(
name|logger
operator|!=
literal|null
operator|&&
name|logger
operator|.
name|getLevel
argument_list|()
operator|!=
literal|null
operator|)
return|;
block|}
block|}
end_class
end_unit
