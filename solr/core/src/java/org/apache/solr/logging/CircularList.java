begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.logging
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|logging
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_comment
comment|/**  * FIFO Circular List.  *   * Once the size is reached, it will overwrite previous entries  *   */
end_comment
begin_class
DECL|class|CircularList
specifier|public
class|class
name|CircularList
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Iterable
argument_list|<
name|T
argument_list|>
block|{
DECL|field|data
specifier|private
name|T
index|[]
name|data
decl_stmt|;
DECL|field|head
specifier|private
name|int
name|head
init|=
literal|0
decl_stmt|;
DECL|field|tail
specifier|private
name|int
name|tail
init|=
literal|0
decl_stmt|;
DECL|field|size
specifier|private
name|int
name|size
init|=
literal|0
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|CircularList
specifier|public
name|CircularList
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|data
operator|=
operator|(
name|T
index|[]
operator|)
operator|new
name|Object
index|[
name|size
index|]
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|resize
specifier|public
specifier|synchronized
name|void
name|resize
parameter_list|(
name|int
name|newsize
parameter_list|)
block|{
if|if
condition|(
name|newsize
operator|==
name|this
operator|.
name|size
condition|)
return|return;
name|T
index|[]
name|vals
init|=
operator|(
name|T
index|[]
operator|)
operator|new
name|Object
index|[
name|newsize
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|newsize
operator|>
name|size
condition|)
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|vals
index|[
name|i
index|]
operator|=
name|data
index|[
name|convert
argument_list|(
name|i
argument_list|)
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|off
init|=
name|size
operator|-
name|newsize
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|newsize
condition|;
name|i
operator|++
control|)
block|{
name|vals
index|[
name|i
index|]
operator|=
name|data
index|[
name|convert
argument_list|(
name|i
operator|+
name|off
argument_list|)
index|]
expr_stmt|;
block|}
block|}
name|data
operator|=
name|vals
expr_stmt|;
name|head
operator|=
literal|0
expr_stmt|;
name|tail
operator|=
name|i
expr_stmt|;
block|}
DECL|method|convert
specifier|private
name|int
name|convert
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|(
name|index
operator|+
name|head
operator|)
operator|%
name|data
operator|.
name|length
return|;
block|}
DECL|method|isEmpty
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|head
operator|==
name|tail
return|;
comment|// or size == 0
block|}
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
DECL|method|getBufferSize
specifier|public
name|int
name|getBufferSize
parameter_list|()
block|{
return|return
name|data
operator|.
name|length
return|;
block|}
DECL|method|checkIndex
specifier|private
name|void
name|checkIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|>=
name|size
operator|||
name|index
operator|<
literal|0
condition|)
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"Index: "
operator|+
name|index
operator|+
literal|", Size: "
operator|+
name|size
argument_list|)
throw|;
block|}
DECL|method|get
specifier|public
name|T
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|checkIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|data
index|[
name|convert
argument_list|(
name|index
argument_list|)
index|]
return|;
block|}
DECL|method|add
specifier|public
specifier|synchronized
name|void
name|add
parameter_list|(
name|T
name|o
parameter_list|)
block|{
name|data
index|[
name|tail
index|]
operator|=
name|o
expr_stmt|;
name|tail
operator|=
operator|(
name|tail
operator|+
literal|1
operator|)
operator|%
name|data
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|size
operator|==
name|data
operator|.
name|length
condition|)
block|{
name|head
operator|=
operator|(
name|head
operator|+
literal|1
operator|)
operator|%
name|data
operator|.
name|length
expr_stmt|;
block|}
name|size
operator|++
expr_stmt|;
if|if
condition|(
name|size
operator|>
name|data
operator|.
name|length
condition|)
block|{
name|size
operator|=
name|data
operator|.
name|length
expr_stmt|;
block|}
block|}
DECL|method|clear
specifier|public
specifier|synchronized
name|void
name|clear
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
comment|// for GC
block|}
name|head
operator|=
name|tail
operator|=
name|size
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|toList
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|toList
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|T
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|data
index|[
name|convert
argument_list|(
name|i
argument_list|)
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|str
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|str
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|str
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|str
operator|.
name|append
argument_list|(
name|data
index|[
name|convert
argument_list|(
name|i
argument_list|)
index|]
argument_list|)
expr_stmt|;
block|}
name|str
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|str
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
name|int
name|idx
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|idx
operator|<
name|size
return|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|next
parameter_list|()
block|{
return|return
name|get
argument_list|(
name|idx
operator|++
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
end_class
end_unit
