begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.logging.log4j
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|logging
operator|.
name|log4j
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|logging
operator|.
name|LoggerInfo
import|;
end_import
begin_class
DECL|class|Log4jInfo
specifier|public
class|class
name|Log4jInfo
extends|extends
name|LoggerInfo
block|{
DECL|field|logger
specifier|final
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
name|logger
decl_stmt|;
DECL|method|Log4jInfo
specifier|public
name|Log4jInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
name|logger
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLevel
specifier|public
name|String
name|getLevel
parameter_list|()
block|{
if|if
condition|(
name|logger
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Object
name|level
init|=
name|logger
operator|.
name|getLevel
argument_list|()
decl_stmt|;
if|if
condition|(
name|level
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|level
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|isSet
specifier|public
name|boolean
name|isSet
parameter_list|()
block|{
return|return
operator|(
name|logger
operator|!=
literal|null
operator|&&
name|logger
operator|.
name|getLevel
argument_list|()
operator|!=
literal|null
operator|)
return|;
block|}
block|}
end_class
end_unit
