begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.logging
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|logging
package|;
end_package
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|COLLECTION_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|REPLICA_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|CloudDescriptor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|ZkController
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreDescriptor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|MDC
import|;
end_import
begin_comment
comment|/**  * Set's per thread context info for logging. Nested calls will use the top level parent for all context. The first  * caller always owns the context until it calls {@link #clear()}. Always call {@link #setCore(SolrCore)} or  * {@link #setCoreDescriptor(CoreDescriptor)} and then {@link #clear()} in a finally block.  */
end_comment
begin_class
DECL|class|MDCLoggingContext
specifier|public
class|class
name|MDCLoggingContext
block|{
comment|// When a thread sets context and finds that the context is already set, we should noop and ignore the finally clear
DECL|field|CALL_DEPTH
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|Integer
argument_list|>
name|CALL_DEPTH
init|=
name|ThreadLocal
operator|.
name|withInitial
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|get
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
argument_list|)
decl_stmt|;
DECL|method|setCollection
specifier|private
specifier|static
name|void
name|setCollection
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|MDC
operator|.
name|put
argument_list|(
name|COLLECTION_PROP
argument_list|,
literal|"c:"
operator|+
name|collection
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MDC
operator|.
name|remove
argument_list|(
name|COLLECTION_PROP
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setShard
specifier|private
specifier|static
name|void
name|setShard
parameter_list|(
name|String
name|shard
parameter_list|)
block|{
if|if
condition|(
name|shard
operator|!=
literal|null
condition|)
block|{
name|MDC
operator|.
name|put
argument_list|(
name|SHARD_ID_PROP
argument_list|,
literal|"s:"
operator|+
name|shard
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MDC
operator|.
name|remove
argument_list|(
name|SHARD_ID_PROP
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setReplica
specifier|private
specifier|static
name|void
name|setReplica
parameter_list|(
name|String
name|replica
parameter_list|)
block|{
if|if
condition|(
name|replica
operator|!=
literal|null
condition|)
block|{
name|MDC
operator|.
name|put
argument_list|(
name|REPLICA_PROP
argument_list|,
literal|"r:"
operator|+
name|replica
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MDC
operator|.
name|remove
argument_list|(
name|REPLICA_PROP
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setCoreName
specifier|private
specifier|static
name|void
name|setCoreName
parameter_list|(
name|String
name|core
parameter_list|)
block|{
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
name|MDC
operator|.
name|put
argument_list|(
name|CORE_NAME_PROP
argument_list|,
literal|"x:"
operator|+
name|core
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MDC
operator|.
name|remove
argument_list|(
name|CORE_NAME_PROP
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setNode
specifier|public
specifier|static
name|void
name|setNode
parameter_list|(
name|CoreContainer
name|cc
parameter_list|)
block|{
if|if
condition|(
name|cc
operator|!=
literal|null
condition|)
block|{
name|ZkController
name|zk
init|=
name|cc
operator|.
name|getZkController
argument_list|()
decl_stmt|;
if|if
condition|(
name|zk
operator|!=
literal|null
condition|)
block|{
name|setNode
argument_list|(
name|zk
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// we allow the host to be set like this because it is the same for any thread
comment|// in the thread pool - we can't do this with the per core properties!
DECL|method|setNode
specifier|public
specifier|static
name|void
name|setNode
parameter_list|(
name|String
name|node
parameter_list|)
block|{
name|int
name|used
init|=
name|CALL_DEPTH
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|used
operator|==
literal|0
condition|)
block|{
name|setNodeName
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setNodeName
specifier|private
specifier|static
name|void
name|setNodeName
parameter_list|(
name|String
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|MDC
operator|.
name|put
argument_list|(
name|NODE_NAME_PROP
argument_list|,
literal|"n:"
operator|+
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MDC
operator|.
name|remove
argument_list|(
name|NODE_NAME_PROP
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setCore
specifier|public
specifier|static
name|void
name|setCore
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
name|CoreDescriptor
name|cd
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
decl_stmt|;
name|setCoreDescriptor
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setCoreDescriptor
specifier|public
specifier|static
name|void
name|setCoreDescriptor
parameter_list|(
name|CoreDescriptor
name|cd
parameter_list|)
block|{
if|if
condition|(
name|cd
operator|!=
literal|null
condition|)
block|{
name|int
name|callDepth
init|=
name|CALL_DEPTH
operator|.
name|get
argument_list|()
decl_stmt|;
name|CALL_DEPTH
operator|.
name|set
argument_list|(
name|callDepth
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|callDepth
operator|>
literal|0
condition|)
block|{
return|return;
block|}
name|setCoreName
argument_list|(
name|cd
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|CoreContainer
name|cc
init|=
name|cd
operator|.
name|getCoreContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|cc
operator|!=
literal|null
condition|)
block|{
name|ZkController
name|zkController
init|=
name|cc
operator|.
name|getZkController
argument_list|()
decl_stmt|;
if|if
condition|(
name|zkController
operator|!=
literal|null
condition|)
block|{
name|setNodeName
argument_list|(
name|zkController
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|CloudDescriptor
name|ccd
init|=
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
decl_stmt|;
if|if
condition|(
name|ccd
operator|!=
literal|null
condition|)
block|{
name|setCollection
argument_list|(
name|ccd
operator|.
name|getCollectionName
argument_list|()
argument_list|)
expr_stmt|;
name|setShard
argument_list|(
name|ccd
operator|.
name|getShardId
argument_list|()
argument_list|)
expr_stmt|;
name|setReplica
argument_list|(
name|ccd
operator|.
name|getCoreNodeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|clear
specifier|public
specifier|static
name|void
name|clear
parameter_list|()
block|{
name|int
name|used
init|=
name|CALL_DEPTH
operator|.
name|get
argument_list|()
decl_stmt|;
name|CALL_DEPTH
operator|.
name|set
argument_list|(
name|used
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|used
operator|==
literal|0
condition|)
block|{
name|MDC
operator|.
name|remove
argument_list|(
name|COLLECTION_PROP
argument_list|)
expr_stmt|;
name|MDC
operator|.
name|remove
argument_list|(
name|CORE_NAME_PROP
argument_list|)
expr_stmt|;
name|MDC
operator|.
name|remove
argument_list|(
name|REPLICA_PROP
argument_list|)
expr_stmt|;
name|MDC
operator|.
name|remove
argument_list|(
name|SHARD_ID_PROP
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removeAll
specifier|private
specifier|static
name|void
name|removeAll
parameter_list|()
block|{
name|MDC
operator|.
name|remove
argument_list|(
name|COLLECTION_PROP
argument_list|)
expr_stmt|;
name|MDC
operator|.
name|remove
argument_list|(
name|CORE_NAME_PROP
argument_list|)
expr_stmt|;
name|MDC
operator|.
name|remove
argument_list|(
name|REPLICA_PROP
argument_list|)
expr_stmt|;
name|MDC
operator|.
name|remove
argument_list|(
name|SHARD_ID_PROP
argument_list|)
expr_stmt|;
name|MDC
operator|.
name|remove
argument_list|(
name|NODE_NAME_PROP
argument_list|)
expr_stmt|;
block|}
DECL|method|reset
specifier|public
specifier|static
name|void
name|reset
parameter_list|()
block|{
name|CALL_DEPTH
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|removeAll
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
