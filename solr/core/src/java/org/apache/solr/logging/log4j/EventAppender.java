begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.logging.log4j
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|logging
operator|.
name|log4j
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|AppenderSkeleton
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggingEvent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|logging
operator|.
name|LogWatcher
import|;
end_import
begin_class
DECL|class|EventAppender
specifier|public
specifier|final
class|class
name|EventAppender
extends|extends
name|AppenderSkeleton
block|{
DECL|field|watcher
specifier|final
name|LogWatcher
argument_list|<
name|LoggingEvent
argument_list|>
name|watcher
decl_stmt|;
DECL|method|EventAppender
specifier|public
name|EventAppender
parameter_list|(
name|LogWatcher
argument_list|<
name|LoggingEvent
argument_list|>
name|framework
parameter_list|)
block|{
name|this
operator|.
name|watcher
operator|=
name|framework
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|append
specifier|public
name|void
name|append
parameter_list|(
name|LoggingEvent
name|event
parameter_list|)
block|{
name|watcher
operator|.
name|add
argument_list|(
name|event
argument_list|,
name|event
operator|.
name|timeStamp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|watcher
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|requiresLayout
specifier|public
name|boolean
name|requiresLayout
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class
end_unit
