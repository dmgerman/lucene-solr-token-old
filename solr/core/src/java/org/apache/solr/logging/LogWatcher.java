begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.logging
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|logging
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import
begin_comment
comment|/**  * A Class to monitor Logging events and hold N events in memory  *   * This is abstract so we can support both JUL and Log4j (and other logging platforms)  */
end_comment
begin_class
DECL|class|LogWatcher
specifier|public
specifier|abstract
class|class
name|LogWatcher
parameter_list|<
name|E
parameter_list|>
block|{
DECL|field|history
specifier|protected
name|CircularList
argument_list|<
name|E
argument_list|>
name|history
decl_stmt|;
DECL|field|last
specifier|protected
name|long
name|last
init|=
operator|-
literal|1
decl_stmt|;
comment|/**    * @return The implementation name    */
DECL|method|getName
specifier|public
specifier|abstract
name|String
name|getName
parameter_list|()
function_decl|;
comment|/**    * @return The valid level names for this framework    */
DECL|method|getAllLevels
specifier|public
specifier|abstract
name|List
argument_list|<
name|String
argument_list|>
name|getAllLevels
parameter_list|()
function_decl|;
comment|/**    * Sets the log level within this framework    */
DECL|method|setLogLevel
specifier|public
specifier|abstract
name|void
name|setLogLevel
parameter_list|(
name|String
name|category
parameter_list|,
name|String
name|level
parameter_list|)
function_decl|;
comment|/**    * @return all registered loggers    */
DECL|method|getAllLoggers
specifier|public
specifier|abstract
name|Collection
argument_list|<
name|LoggerInfo
argument_list|>
name|getAllLoggers
parameter_list|()
function_decl|;
DECL|method|setThreshold
specifier|public
specifier|abstract
name|void
name|setThreshold
parameter_list|(
name|String
name|level
parameter_list|)
function_decl|;
DECL|method|getThreshold
specifier|public
specifier|abstract
name|String
name|getThreshold
parameter_list|()
function_decl|;
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|E
name|event
parameter_list|,
name|long
name|timstamp
parameter_list|)
block|{
name|history
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|last
operator|=
name|timstamp
expr_stmt|;
block|}
DECL|method|getLastEvent
specifier|public
name|long
name|getLastEvent
parameter_list|()
block|{
return|return
name|last
return|;
block|}
DECL|method|getHistorySize
specifier|public
name|int
name|getHistorySize
parameter_list|()
block|{
return|return
operator|(
name|history
operator|==
literal|null
operator|)
condition|?
operator|-
literal|1
else|:
name|history
operator|.
name|getBufferSize
argument_list|()
return|;
block|}
DECL|method|getHistory
specifier|public
name|SolrDocumentList
name|getHistory
parameter_list|(
name|long
name|since
parameter_list|,
name|AtomicBoolean
name|found
parameter_list|)
block|{
if|if
condition|(
name|history
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SolrDocumentList
name|docs
init|=
operator|new
name|SolrDocumentList
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|E
argument_list|>
name|iter
init|=
name|history
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|E
name|e
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|long
name|ts
init|=
name|getTimestamp
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|ts
operator|==
name|since
condition|)
block|{
if|if
condition|(
name|found
operator|!=
literal|null
condition|)
block|{
name|found
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ts
operator|>
name|since
condition|)
block|{
name|docs
operator|.
name|add
argument_list|(
name|toSolrDocument
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|docs
operator|.
name|setNumFound
argument_list|(
name|docs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// make it not look too funny
return|return
name|docs
return|;
block|}
DECL|method|getTimestamp
specifier|public
specifier|abstract
name|long
name|getTimestamp
parameter_list|(
name|E
name|event
parameter_list|)
function_decl|;
DECL|method|toSolrDocument
specifier|public
specifier|abstract
name|SolrDocument
name|toSolrDocument
parameter_list|(
name|E
name|event
parameter_list|)
function_decl|;
DECL|method|registerListener
specifier|public
specifier|abstract
name|void
name|registerListener
parameter_list|(
name|ListenerConfig
name|cfg
parameter_list|,
name|CoreContainer
name|container
parameter_list|)
function_decl|;
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|history
operator|.
name|clear
argument_list|()
expr_stmt|;
name|last
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
end_class
end_unit
