begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.logging.jul
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|logging
operator|.
name|jul
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|LogRecord
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|logging
operator|.
name|LogWatcher
import|;
end_import
begin_class
DECL|class|RecordHandler
specifier|public
specifier|final
class|class
name|RecordHandler
extends|extends
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Handler
block|{
DECL|field|framework
specifier|final
name|LogWatcher
argument_list|<
name|LogRecord
argument_list|>
name|framework
decl_stmt|;
DECL|method|RecordHandler
specifier|public
name|RecordHandler
parameter_list|(
name|LogWatcher
argument_list|<
name|LogRecord
argument_list|>
name|framework
parameter_list|)
block|{
name|this
operator|.
name|framework
operator|=
name|framework
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|SecurityException
block|{
comment|//history.reset();
block|}
annotation|@
name|Override
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|()
block|{
comment|// nothing
block|}
annotation|@
name|Override
DECL|method|publish
specifier|public
name|void
name|publish
parameter_list|(
name|LogRecord
name|r
parameter_list|)
block|{
if|if
condition|(
name|isLoggable
argument_list|(
name|r
argument_list|)
condition|)
block|{
name|framework
operator|.
name|add
argument_list|(
name|r
argument_list|,
name|r
operator|.
name|getMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
