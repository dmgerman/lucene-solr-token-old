begin_unit
begin_package
DECL|package|org.apache.solr.search.join
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|join
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiDocValues
operator|.
name|OrdinalMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CharsRefBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LongValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|DocValuesFacets
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|DocIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_comment
comment|/**  * This class is responsible for collecting block join facet counts for particular field  */
end_comment
begin_class
DECL|class|BlockJoinFieldFacetAccumulator
class|class
name|BlockJoinFieldFacetAccumulator
block|{
DECL|field|fieldName
specifier|private
name|String
name|fieldName
decl_stmt|;
DECL|field|fieldType
specifier|private
name|FieldType
name|fieldType
decl_stmt|;
DECL|field|currentSegment
specifier|private
name|int
name|currentSegment
init|=
operator|-
literal|1
decl_stmt|;
comment|// for term lookups only
DECL|field|topSSDV
specifier|private
name|SortedSetDocValues
name|topSSDV
decl_stmt|;
DECL|field|globalCounts
specifier|private
name|int
index|[]
name|globalCounts
decl_stmt|;
DECL|field|segmentSSDV
specifier|private
name|SortedSetDocValues
name|segmentSSDV
decl_stmt|;
comment|// elems are : facet value counter<<32 | last parent doc num
DECL|field|segmentAccums
specifier|private
name|long
index|[]
name|segmentAccums
init|=
operator|new
name|long
index|[
literal|0
index|]
decl_stmt|;
comment|// for mapping per-segment ords to global ones
DECL|field|ordinalMap
specifier|private
name|MultiDocValues
operator|.
name|OrdinalMap
name|ordinalMap
decl_stmt|;
DECL|field|schemaField
specifier|private
name|SchemaField
name|schemaField
decl_stmt|;
DECL|field|segmentSDV
specifier|private
name|SortedDocValues
name|segmentSDV
decl_stmt|;
DECL|method|BlockJoinFieldFacetAccumulator
name|BlockJoinFieldFacetAccumulator
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|SolrIndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
name|schemaField
operator|=
name|searcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|fieldType
operator|=
name|schemaField
operator|.
name|getType
argument_list|()
expr_stmt|;
name|ordinalMap
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|schemaField
operator|.
name|multiValued
argument_list|()
condition|)
block|{
name|topSSDV
operator|=
name|searcher
operator|.
name|getLeafReader
argument_list|()
operator|.
name|getSortedSetDocValues
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
if|if
condition|(
name|topSSDV
operator|instanceof
name|MultiDocValues
operator|.
name|MultiSortedSetDocValues
condition|)
block|{
name|ordinalMap
operator|=
operator|(
operator|(
name|MultiDocValues
operator|.
name|MultiSortedSetDocValues
operator|)
name|topSSDV
operator|)
operator|.
name|mapping
expr_stmt|;
block|}
block|}
else|else
block|{
name|SortedDocValues
name|single
init|=
name|searcher
operator|.
name|getLeafReader
argument_list|()
operator|.
name|getSortedDocValues
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|topSSDV
operator|=
name|single
operator|==
literal|null
condition|?
literal|null
else|:
name|DocValues
operator|.
name|singleton
argument_list|(
name|single
argument_list|)
expr_stmt|;
comment|// npe friendly code
if|if
condition|(
name|single
operator|instanceof
name|MultiDocValues
operator|.
name|MultiSortedDocValues
condition|)
block|{
name|ordinalMap
operator|=
operator|(
operator|(
name|MultiDocValues
operator|.
name|MultiSortedDocValues
operator|)
name|single
operator|)
operator|.
name|mapping
expr_stmt|;
block|}
block|}
block|}
DECL|method|initSegmentData
specifier|private
name|boolean
name|initSegmentData
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|LeafReaderContext
name|leaf
parameter_list|)
throws|throws
name|IOException
block|{
name|segmentSSDV
operator|=
name|DocValues
operator|.
name|getSortedSet
argument_list|(
name|leaf
operator|.
name|reader
argument_list|()
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
name|segmentAccums
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|segmentAccums
argument_list|,
operator|(
name|int
operator|)
name|segmentSSDV
operator|.
name|getValueCount
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|//+1
comment|// zero counts, -1 parent
name|Arrays
operator|.
name|fill
argument_list|(
name|segmentAccums
argument_list|,
literal|0
argument_list|,
operator|(
name|int
operator|)
name|segmentSSDV
operator|.
name|getValueCount
argument_list|()
operator|+
literal|1
argument_list|,
literal|0x00000000ffffffffL
argument_list|)
expr_stmt|;
name|segmentSDV
operator|=
name|DocValues
operator|.
name|unwrapSingleton
argument_list|(
name|segmentSSDV
argument_list|)
expr_stmt|;
return|return
name|segmentSSDV
operator|.
name|getValueCount
argument_list|()
operator|!=
literal|0
return|;
comment|// perhaps we need to count "missings"??
block|}
DECL|interface|AggregatableDocIter
interface|interface
name|AggregatableDocIter
extends|extends
name|DocIterator
block|{
DECL|method|reset
name|void
name|reset
parameter_list|()
function_decl|;
comment|/** a key to aggregate the current document */
DECL|method|getAggKey
name|int
name|getAggKey
parameter_list|()
function_decl|;
block|}
DECL|class|SortedIntsAggDocIterator
specifier|static
class|class
name|SortedIntsAggDocIterator
implements|implements
name|AggregatableDocIter
block|{
DECL|field|childDocs
specifier|private
name|int
index|[]
name|childDocs
decl_stmt|;
DECL|field|childCount
specifier|private
name|int
name|childCount
decl_stmt|;
DECL|field|parentDoc
specifier|private
name|int
name|parentDoc
decl_stmt|;
DECL|field|pos
specifier|private
name|int
name|pos
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|SortedIntsAggDocIterator
specifier|public
name|SortedIntsAggDocIterator
parameter_list|(
name|int
index|[]
name|childDocs
parameter_list|,
name|int
name|childCount
parameter_list|,
name|int
name|parentDoc
parameter_list|)
block|{
name|this
operator|.
name|childDocs
operator|=
name|childDocs
expr_stmt|;
name|this
operator|.
name|childCount
operator|=
name|childCount
expr_stmt|;
name|this
operator|.
name|parentDoc
operator|=
name|parentDoc
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|pos
operator|<
name|childCount
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|Integer
name|next
parameter_list|()
block|{
return|return
name|nextDoc
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
block|{
return|return
name|childDocs
index|[
name|pos
operator|++
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|pos
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAggKey
specifier|public
name|int
name|getAggKey
parameter_list|()
block|{
return|return
name|parentDoc
return|;
block|}
block|}
DECL|method|updateCountsWithMatchedBlock
name|void
name|updateCountsWithMatchedBlock
parameter_list|(
name|AggregatableDocIter
name|iter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|segmentSDV
operator|!=
literal|null
condition|)
block|{
comment|// some codecs may optimize SORTED_SET storage for single-valued fields
for|for
control|(
name|iter
operator|.
name|reset
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|int
name|docNum
init|=
name|iter
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
name|int
name|term
init|=
name|segmentSDV
operator|.
name|getOrd
argument_list|(
name|docNum
argument_list|)
decl_stmt|;
name|accumulateTermOrd
argument_list|(
name|term
argument_list|,
name|iter
operator|.
name|getAggKey
argument_list|()
argument_list|)
expr_stmt|;
comment|//System.out.println("doc# "+docNum+" "+fieldName+" term# "+term+" tick "+Long.toHexString(segmentAccums[1+term]));
block|}
block|}
else|else
block|{
for|for
control|(
name|iter
operator|.
name|reset
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|int
name|docNum
init|=
name|iter
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
name|segmentSSDV
operator|.
name|setDocument
argument_list|(
name|docNum
argument_list|)
expr_stmt|;
name|int
name|term
init|=
operator|(
name|int
operator|)
name|segmentSSDV
operator|.
name|nextOrd
argument_list|()
decl_stmt|;
do|do
block|{
comment|// absent values are designated by term=-1, first iteration counts [0] as "missing", and exit, otherwise it spins
name|accumulateTermOrd
argument_list|(
name|term
argument_list|,
name|iter
operator|.
name|getAggKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|term
operator|>=
literal|0
operator|&&
operator|(
name|term
operator|=
operator|(
name|int
operator|)
name|segmentSSDV
operator|.
name|nextOrd
argument_list|()
operator|)
operator|>=
literal|0
condition|)
do|;
block|}
block|}
block|}
DECL|method|getFieldName
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|fieldName
return|;
block|}
comment|/** copy paste from {@link DocValuesFacets} */
DECL|method|getFacetValue
name|NamedList
argument_list|<
name|Integer
argument_list|>
name|getFacetValue
parameter_list|()
block|{
name|NamedList
argument_list|<
name|Integer
argument_list|>
name|facetValue
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|CharsRefBuilder
name|charsRef
init|=
operator|new
name|CharsRefBuilder
argument_list|()
decl_stmt|;
comment|// if there is no globs, take segment's ones
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
operator|(
name|globalCounts
operator|!=
literal|null
condition|?
name|globalCounts
operator|.
name|length
else|:
name|segmentAccums
operator|.
name|length
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|int
name|count
init|=
name|globalCounts
operator|!=
literal|null
condition|?
name|globalCounts
index|[
name|i
index|]
else|:
call|(
name|int
call|)
argument_list|(
name|segmentAccums
index|[
name|i
index|]
operator|>>
literal|32
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|BytesRef
name|term
init|=
name|topSSDV
operator|.
name|lookupOrd
argument_list|(
operator|-
literal|1
operator|+
name|i
argument_list|)
decl_stmt|;
name|fieldType
operator|.
name|indexedToReadable
argument_list|(
name|term
argument_list|,
name|charsRef
argument_list|)
expr_stmt|;
name|facetValue
operator|.
name|add
argument_list|(
name|charsRef
operator|.
name|toString
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|facetValue
return|;
block|}
comment|// @todo we can track in max term nums to loop only changed range while migrating and labeling
DECL|method|accumulateTermOrd
specifier|private
name|void
name|accumulateTermOrd
parameter_list|(
name|int
name|term
parameter_list|,
name|int
name|parentDoc
parameter_list|)
block|{
name|long
name|accum
init|=
name|segmentAccums
index|[
literal|1
operator|+
name|term
index|]
decl_stmt|;
if|if
condition|(
operator|(
call|(
name|int
call|)
argument_list|(
name|accum
operator|&
literal|0xffffffffL
argument_list|)
operator|)
operator|!=
name|parentDoc
condition|)
block|{
comment|// incrementing older 32, reset smaller 32, set them to the new parent
name|segmentAccums
index|[
literal|1
operator|+
name|term
index|]
operator|=
operator|(
operator|(
name|accum
operator|+
operator|(
literal|0x1L
operator|<<
literal|32
operator|)
operator|)
operator|&
literal|0xffffffffL
operator|<<
literal|32
operator|)
operator||
name|parentDoc
expr_stmt|;
block|}
block|}
DECL|method|setNextReader
name|void
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|initSegmentData
argument_list|(
name|fieldName
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|currentSegment
operator|=
name|context
operator|.
name|ord
expr_stmt|;
block|}
DECL|method|migrateGlobal
name|void
name|migrateGlobal
parameter_list|()
block|{
if|if
condition|(
name|currentSegment
operator|<
literal|0
comment|// no hits
operator|||
name|segmentAccums
operator|.
name|length
operator|==
literal|0
operator|||
name|ordinalMap
operator|==
literal|null
condition|)
block|{
comment|// single segment
return|return;
block|}
if|if
condition|(
name|globalCounts
operator|==
literal|null
condition|)
block|{
comment|// it might be just a single segment
name|globalCounts
operator|=
operator|new
name|int
index|[
operator|(
name|int
operator|)
name|ordinalMap
operator|.
name|getValueCount
argument_list|()
operator|+
comment|/*[0] for missing*/
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|currentSegment
operator|>=
literal|0
assert|;
block|}
name|migrateGlobal
argument_list|(
name|globalCounts
argument_list|,
name|segmentAccums
argument_list|,
name|currentSegment
argument_list|,
name|ordinalMap
argument_list|)
expr_stmt|;
block|}
comment|/** folds counts in segment ordinal space (segCounts) into global ordinal space (counts)     * copy paste-from {@link DocValuesFacets#migrateGlobal(int[], int[], int, OrdinalMap)}*/
DECL|method|migrateGlobal
name|void
name|migrateGlobal
parameter_list|(
name|int
name|counts
index|[]
parameter_list|,
name|long
name|segCounts
index|[]
parameter_list|,
name|int
name|subIndex
parameter_list|,
name|OrdinalMap
name|map
parameter_list|)
block|{
specifier|final
name|LongValues
name|ordMap
init|=
name|map
operator|.
name|getGlobalOrds
argument_list|(
name|subIndex
argument_list|)
decl_stmt|;
comment|// missing count
name|counts
index|[
literal|0
index|]
operator|+=
call|(
name|int
call|)
argument_list|(
name|segCounts
index|[
literal|0
index|]
operator|>>
literal|32
argument_list|)
expr_stmt|;
comment|// migrate actual ordinals
for|for
control|(
name|int
name|ord
init|=
literal|1
init|;
name|ord
operator|<=
name|segmentSSDV
operator|.
name|getValueCount
argument_list|()
condition|;
name|ord
operator|++
control|)
block|{
name|int
name|count
init|=
call|(
name|int
call|)
argument_list|(
name|segCounts
index|[
name|ord
index|]
operator|>>
literal|32
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|!=
literal|0
condition|)
block|{
name|counts
index|[
literal|1
operator|+
operator|(
name|int
operator|)
name|ordMap
operator|.
name|get
argument_list|(
name|ord
operator|-
literal|1
argument_list|)
index|]
operator|+=
name|count
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
