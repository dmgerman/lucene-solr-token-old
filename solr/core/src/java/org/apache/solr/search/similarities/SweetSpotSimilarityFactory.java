begin_unit
begin_package
DECL|package|org.apache.solr.search.similarities
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|similarities
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|misc
operator|.
name|SweetSpotSimilarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|DefaultSimilarity
import|;
end_import
begin_comment
comment|// jdoc
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|Similarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SimilarityFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  *<p>Factory for {@link SweetSpotSimilarity}.</p>  *<p>  *<code>SweetSpotSimilarity</code> is an extension of   * {@link DefaultSimilarity} that provides additional tuning options for   * specifying the "sweetspot" of optimal<code>tf</code> and   *<code>lengthNorm</code> values in the source data.  *</p>  *<p>  * In addition to the<code>discountOverlaps</code> init param supported by   * {@link DefaultSimilarityFactory} The following sets of init params are   * supported by this factory:  *</p>  *<ul>  *<li>Length Norm Settings:<ul>  *<li><code>lengthNormMin</code> (int)</li>  *<li><code>lengthNormMax</code> (int)</li>  *<li><code>lengthNormSteepness</code> (float)</li>  *</ul></li>  *<li>Baseline TF Settings:<ul>  *<li><code>baselineTfBase</code> (float)</li>  *<li><code>baselineTfMin</code> (float)</li>  *</ul></li>  *<li>Hyperbolic TF Settings:<ul>  *<li><code>hyperbolicTfMin</code> (float)</li>  *<li><code>hyperbolicTfMax</code> (float)</li>  *<li><code>hyperbolicTfBase</code> (double)</li>  *<li><code>hyperbolicTfOffset</code> (float)</li>  *</ul></li>  *</ul>  *<p>  * Note:  *</p>  *<ul>  *<li>If any individual settings from one of the above mentioned sets   *      are specified, then all settings from that set must be specified.  *</li>  *<li>If Baseline TF settings are spcified, then Hyperbolic TF settings   *      are not permitted, and vice versa. (The settings specified will   *      determine wether {@link SweetSpotSimilarity#baselineTf} or   *      {@link SweetSpotSimilarity#hyperbolicTf} will be used.  *</li>  *</ul>  *<p>  * Example usage...  *</p>  *<pre class="prettyprint">  *&lt;!-- using baseline TF --&gt;  *&lt;fieldType name="text_baseline" class="solr.TextField"  *            indexed="true" stored="false"&gt;  *&lt;analyzer class="org.apache.lucene.analysis.standard.StandardAnalyzer"/&gt;  *&lt;similarity class="solr.SweetSpotSimilarityFactory"&gt;  *&lt;!-- TF --&gt;  *&lt;float name="baselineTfMin"&gt;6.0&lt;/float&gt;  *&lt;float name="baselineTfBase"&gt;1.5&lt;/float&gt;  *&lt;!-- plateau norm --&gt;  *&lt;int name="lengthNormMin"&gt;3&lt;/int&gt;  *&lt;int name="lengthNormMax"&gt;5&lt;/int&gt;  *&lt;float name="lengthNormSteepness"&gt;0.5&lt;/float&gt;  *&lt;/similarity&gt;  *&lt;/fieldType&gt;  *   *&lt;!-- using hyperbolic TF --&gt;  *&lt;fieldType name="text_hyperbolic" class="solr.TextField"  *            indexed="true" stored="false"&gt;  *&lt;analyzer class="org.apache.lucene.analysis.standard.StandardAnalyzer"/&gt;  *&lt;similarity class="solr.SweetSpotSimilarityFactory"&gt;  *&lt;float name="hyperbolicTfMin"&gt;3.3&lt;/float&gt;  *&lt;float name="hyperbolicTfMax"&gt;7.7&lt;/float&gt;  *&lt;double name="hyperbolicTfBase"&gt;2.718281828459045&lt;/double&gt;&lt;!-- e --&gt;  *&lt;float name="hyperbolicTfOffset"&gt;5.0&lt;/float&gt;  *&lt;!-- plateau norm, shallower slope --&gt;  *&lt;int name="lengthNormMin"&gt;1&lt;/int&gt;  *&lt;int name="lengthNormMax"&gt;5&lt;/int&gt;  *&lt;float name="lengthNormSteepness"&gt;0.2&lt;/float&gt;  *&lt;/similarity&gt;  *&lt;/fieldType&gt;  *</pre>  * @see SweetSpotSimilarity The javadocs for the individual methods in   *<code>SweetSpotSimilarity</code> for SVG diagrams showing how the   *      each function behaves with various settings/inputs.  */
end_comment
begin_class
DECL|class|SweetSpotSimilarityFactory
specifier|public
class|class
name|SweetSpotSimilarityFactory
extends|extends
name|DefaultSimilarityFactory
block|{
DECL|field|sim
specifier|private
name|SweetSpotSimilarity
name|sim
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|SolrParams
name|params
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|Integer
name|ln_min
init|=
name|params
operator|.
name|getInt
argument_list|(
literal|"lengthNormMin"
argument_list|)
decl_stmt|;
name|Integer
name|ln_max
init|=
name|params
operator|.
name|getInt
argument_list|(
literal|"lengthNormMax"
argument_list|)
decl_stmt|;
name|Float
name|ln_steep
init|=
name|params
operator|.
name|getFloat
argument_list|(
literal|"lengthNormSteepness"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|allOrNoneNull
argument_list|(
name|ln_min
argument_list|,
name|ln_max
argument_list|,
name|ln_steep
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SERVER_ERROR
argument_list|,
literal|"Overriding default lengthNorm settings requires all to be specified: lengthNormMin, lengthNormMax, lengthNormSteepness"
argument_list|)
throw|;
block|}
name|Float
name|hyper_min
init|=
name|params
operator|.
name|getFloat
argument_list|(
literal|"hyperbolicTfMin"
argument_list|)
decl_stmt|;
name|Float
name|hyper_max
init|=
name|params
operator|.
name|getFloat
argument_list|(
literal|"hyperbolicTfMax"
argument_list|)
decl_stmt|;
name|Double
name|hyper_base
init|=
name|params
operator|.
name|getDouble
argument_list|(
literal|"hyperbolicTfBase"
argument_list|)
decl_stmt|;
name|Float
name|hyper_offset
init|=
name|params
operator|.
name|getFloat
argument_list|(
literal|"hyperbolicTfOffset"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|allOrNoneNull
argument_list|(
name|hyper_min
argument_list|,
name|hyper_max
argument_list|,
name|hyper_base
argument_list|,
name|hyper_offset
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SERVER_ERROR
argument_list|,
literal|"Overriding default hyperbolicTf settings requires all to be specified: hyperbolicTfMin, hyperbolicTfMax, hyperbolicTfBase, hyperbolicTfOffset"
argument_list|)
throw|;
block|}
name|Float
name|baseline_base
init|=
name|params
operator|.
name|getFloat
argument_list|(
literal|"baselineTfBase"
argument_list|)
decl_stmt|;
name|Float
name|baseline_min
init|=
name|params
operator|.
name|getFloat
argument_list|(
literal|"baselineTfMin"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|allOrNoneNull
argument_list|(
name|baseline_min
argument_list|,
name|baseline_base
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SERVER_ERROR
argument_list|,
literal|"Overriding default baselineTf settings requires all to be specified: baselineTfBase, baselineTfMin"
argument_list|)
throw|;
block|}
comment|// sanity check that they aren't trying to use two diff tf impls
if|if
condition|(
operator|(
literal|null
operator|!=
name|hyper_min
operator|)
operator|&&
operator|(
literal|null
operator|!=
name|baseline_min
operator|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SERVER_ERROR
argument_list|,
literal|"Can not mix hyperbolicTf settings with baselineTf settings"
argument_list|)
throw|;
block|}
comment|// pick Similarity impl based on wether hyper tf settings are set
name|sim
operator|=
operator|(
literal|null
operator|!=
name|hyper_min
operator|)
condition|?
operator|new
name|HyperbolicSweetSpotSimilarity
argument_list|()
else|:
operator|new
name|SweetSpotSimilarity
argument_list|()
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|ln_min
condition|)
block|{
comment|// overlaps already handled by super factory
name|sim
operator|.
name|setLengthNormFactors
argument_list|(
name|ln_min
argument_list|,
name|ln_max
argument_list|,
name|ln_steep
argument_list|,
name|this
operator|.
name|discountOverlaps
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|hyper_min
condition|)
block|{
name|sim
operator|.
name|setHyperbolicTfFactors
argument_list|(
name|hyper_min
argument_list|,
name|hyper_max
argument_list|,
name|hyper_base
argument_list|,
name|hyper_offset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|baseline_min
condition|)
block|{
name|sim
operator|.
name|setBaselineTfFactors
argument_list|(
name|baseline_base
argument_list|,
name|baseline_min
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getSimilarity
specifier|public
name|Similarity
name|getSimilarity
parameter_list|()
block|{
assert|assert
name|sim
operator|!=
literal|null
operator|:
literal|"SweetSpotSimilarityFactory was not initalized"
assert|;
return|return
name|sim
return|;
block|}
comment|/**     * Returns true if either: all of the specified arguments are null;    * or none of the specified arguments are null    */
DECL|method|allOrNoneNull
specifier|private
specifier|static
name|boolean
name|allOrNoneNull
parameter_list|(
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|int
name|nulls
init|=
literal|0
decl_stmt|;
name|int
name|objs
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|args
control|)
block|{
name|objs
operator|++
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|o
condition|)
name|nulls
operator|++
expr_stmt|;
block|}
return|return
operator|(
literal|0
operator|==
name|nulls
operator|||
name|nulls
operator|==
name|objs
operator|)
return|;
block|}
DECL|class|HyperbolicSweetSpotSimilarity
specifier|private
specifier|static
specifier|final
class|class
name|HyperbolicSweetSpotSimilarity
extends|extends
name|SweetSpotSimilarity
block|{
annotation|@
name|Override
DECL|method|tf
specifier|public
name|float
name|tf
parameter_list|(
name|float
name|freq
parameter_list|)
block|{
return|return
name|hyperbolicTf
argument_list|(
name|freq
argument_list|)
return|;
block|}
block|}
empty_stmt|;
block|}
end_class
end_unit
