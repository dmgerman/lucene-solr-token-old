begin_unit
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FilteredDocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_comment
comment|/**  * Abstract decorator class for a DocIdSet implementation  * that provides on-demand filtering/validation  * mechanism on a given DocIdSet.  *  *<p>  * Technically, this same functionality could be achieved  * with ChainedFilter (under queries/), however the  * benefit of this class is it never materializes the full  * bitset for the filter.  Instead, the {@link #match}  * method is invoked on-demand, per docID visited during  * searching.  If you know few docIDs will be visited, and  * the logic behind {@link #match} is relatively costly,  * this may be a better way to filter than ChainedFilter.  *  * @see DocIdSet  */
end_comment
begin_class
DECL|class|FilteredDocIdSet
specifier|public
specifier|abstract
class|class
name|FilteredDocIdSet
extends|extends
name|DocIdSet
block|{
DECL|field|_innerSet
specifier|private
specifier|final
name|DocIdSet
name|_innerSet
decl_stmt|;
comment|/**    * Constructor.    * @param innerSet Underlying DocIdSet    */
DECL|method|FilteredDocIdSet
specifier|public
name|FilteredDocIdSet
parameter_list|(
name|DocIdSet
name|innerSet
parameter_list|)
block|{
name|_innerSet
operator|=
name|innerSet
expr_stmt|;
block|}
comment|/** Return the wrapped {@link DocIdSet}. */
DECL|method|getDelegate
specifier|public
name|DocIdSet
name|getDelegate
parameter_list|()
block|{
return|return
name|_innerSet
return|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_REF
operator|+
name|_innerSet
operator|.
name|ramBytesUsed
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getChildResources
specifier|public
name|Collection
argument_list|<
name|Accountable
argument_list|>
name|getChildResources
parameter_list|()
block|{
return|return
name|_innerSet
operator|.
name|getChildResources
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|bits
specifier|public
name|Bits
name|bits
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Bits
name|bits
init|=
name|_innerSet
operator|.
name|bits
argument_list|()
decl_stmt|;
return|return
operator|(
name|bits
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|new
name|Bits
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|get
parameter_list|(
name|int
name|docid
parameter_list|)
block|{
return|return
name|bits
operator|.
name|get
argument_list|(
name|docid
argument_list|)
operator|&&
name|FilteredDocIdSet
operator|.
name|this
operator|.
name|match
argument_list|(
name|docid
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|bits
operator|.
name|length
argument_list|()
return|;
block|}
block|}
return|;
block|}
comment|/**    * Validation method to determine whether a docid should be in the result set.    * @param docid docid to be tested    * @return true if input docid should be in the result set, false otherwise.    */
DECL|method|match
specifier|protected
specifier|abstract
name|boolean
name|match
parameter_list|(
name|int
name|docid
parameter_list|)
function_decl|;
comment|/**    * Implementation of the contract to build a DocIdSetIterator.    * @see DocIdSetIterator    * @see FilteredDocIdSetIterator    */
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|DocIdSetIterator
name|iterator
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|DocIdSetIterator
name|iterator
init|=
name|_innerSet
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|iterator
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|FilteredDocIdSetIterator
argument_list|(
name|iterator
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|match
parameter_list|(
name|int
name|docid
parameter_list|)
block|{
return|return
name|FilteredDocIdSet
operator|.
name|this
operator|.
name|match
argument_list|(
name|docid
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
end_class
end_unit
