begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_comment
comment|/**  *<code>DocSlice</code> implements DocList as an array of docids and optional scores.  *  *  * @since solr 0.9  */
end_comment
begin_class
DECL|class|DocSlice
specifier|public
class|class
name|DocSlice
extends|extends
name|DocSetBase
implements|implements
name|DocList
block|{
DECL|field|BASE_RAM_BYTES_USED
specifier|private
specifier|static
specifier|final
name|long
name|BASE_RAM_BYTES_USED
init|=
name|RamUsageEstimator
operator|.
name|shallowSizeOfInstance
argument_list|(
name|DocSlice
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|offset
specifier|final
name|int
name|offset
decl_stmt|;
comment|// starting position of the docs (zero based)
DECL|field|len
specifier|final
name|int
name|len
decl_stmt|;
comment|// number of positions used in arrays
DECL|field|docs
specifier|final
name|int
index|[]
name|docs
decl_stmt|;
comment|// a slice of documents (docs 0-100 of the query)
DECL|field|scores
specifier|final
name|float
index|[]
name|scores
decl_stmt|;
comment|// optional score list
DECL|field|matches
specifier|final
name|int
name|matches
decl_stmt|;
DECL|field|maxScore
specifier|final
name|float
name|maxScore
decl_stmt|;
DECL|field|ramBytesUsed
specifier|final
name|long
name|ramBytesUsed
decl_stmt|;
comment|/**    * Primary constructor for a DocSlice instance.    *    * @param offset  starting offset for this range of docs    * @param len     length of results    * @param docs    array of docids starting at position 0    * @param scores  array of scores that corresponds to docs, may be null    * @param matches total number of matches for the query    */
DECL|method|DocSlice
specifier|public
name|DocSlice
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|,
name|int
index|[]
name|docs
parameter_list|,
name|float
index|[]
name|scores
parameter_list|,
name|int
name|matches
parameter_list|,
name|float
name|maxScore
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|len
operator|=
name|len
expr_stmt|;
name|this
operator|.
name|docs
operator|=
name|docs
expr_stmt|;
name|this
operator|.
name|scores
operator|=
name|scores
expr_stmt|;
name|this
operator|.
name|matches
operator|=
name|matches
expr_stmt|;
name|this
operator|.
name|maxScore
operator|=
name|maxScore
expr_stmt|;
name|this
operator|.
name|ramBytesUsed
operator|=
name|BASE_RAM_BYTES_USED
operator|+
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|docs
argument_list|)
operator|+
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|scores
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|subset
specifier|public
name|DocList
name|subset
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|offset
operator|==
name|offset
operator|&&
name|this
operator|.
name|len
operator|==
name|len
condition|)
return|return
name|this
return|;
comment|// if we didn't store enough (and there was more to store)
comment|// then we can't take a subset.
name|int
name|requestedEnd
init|=
name|offset
operator|+
name|len
decl_stmt|;
if|if
condition|(
name|requestedEnd
operator|>
name|docs
operator|.
name|length
operator|&&
name|this
operator|.
name|matches
operator|>
name|docs
operator|.
name|length
condition|)
return|return
literal|null
return|;
name|int
name|realEndDoc
init|=
name|Math
operator|.
name|min
argument_list|(
name|requestedEnd
argument_list|,
name|docs
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|realLen
init|=
name|Math
operator|.
name|max
argument_list|(
name|realEndDoc
operator|-
name|offset
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|offset
operator|==
name|offset
operator|&&
name|this
operator|.
name|len
operator|==
name|realLen
condition|)
return|return
name|this
return|;
return|return
operator|new
name|DocSlice
argument_list|(
name|offset
argument_list|,
name|realLen
argument_list|,
name|docs
argument_list|,
name|scores
argument_list|,
name|matches
argument_list|,
name|maxScore
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hasScores
specifier|public
name|boolean
name|hasScores
parameter_list|()
block|{
return|return
name|scores
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|maxScore
specifier|public
name|float
name|maxScore
parameter_list|()
block|{
return|return
name|maxScore
return|;
block|}
annotation|@
name|Override
DECL|method|offset
specifier|public
name|int
name|offset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|len
return|;
block|}
annotation|@
name|Override
DECL|method|matches
specifier|public
name|int
name|matches
parameter_list|()
block|{
return|return
name|matches
return|;
block|}
annotation|@
name|Override
DECL|method|exists
specifier|public
name|boolean
name|exists
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|int
name|end
init|=
name|offset
operator|+
name|len
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|docs
index|[
name|i
index|]
operator|==
name|doc
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|// Hmmm, maybe I could have reused the scorer interface here...
comment|// except that it carries Similarity baggage...
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|DocIterator
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|DocIterator
argument_list|()
block|{
name|int
name|pos
init|=
name|offset
decl_stmt|;
specifier|final
name|int
name|end
init|=
name|offset
operator|+
name|len
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|pos
operator|<
name|end
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|next
parameter_list|()
block|{
return|return
name|nextDoc
argument_list|()
return|;
block|}
comment|/**        * The remove  operation is not supported by this Iterator.        */
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"The remove  operation is not supported by this Iterator."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|nextDoc
parameter_list|()
block|{
return|return
name|docs
index|[
name|pos
operator|++
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|score
parameter_list|()
block|{
return|return
name|scores
index|[
name|pos
operator|-
literal|1
index|]
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|intersection
specifier|public
name|DocSet
name|intersection
parameter_list|(
name|DocSet
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|SortedIntDocSet
operator|||
name|other
operator|instanceof
name|HashDocSet
condition|)
block|{
return|return
name|other
operator|.
name|intersection
argument_list|(
name|this
argument_list|)
return|;
block|}
name|HashDocSet
name|h
init|=
operator|new
name|HashDocSet
argument_list|(
name|docs
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
return|return
name|h
operator|.
name|intersection
argument_list|(
name|other
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|intersectionSize
specifier|public
name|int
name|intersectionSize
parameter_list|(
name|DocSet
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|SortedIntDocSet
operator|||
name|other
operator|instanceof
name|HashDocSet
condition|)
block|{
return|return
name|other
operator|.
name|intersectionSize
argument_list|(
name|this
argument_list|)
return|;
block|}
name|HashDocSet
name|h
init|=
operator|new
name|HashDocSet
argument_list|(
name|docs
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
return|return
name|h
operator|.
name|intersectionSize
argument_list|(
name|other
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|intersects
specifier|public
name|boolean
name|intersects
parameter_list|(
name|DocSet
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|SortedIntDocSet
operator|||
name|other
operator|instanceof
name|HashDocSet
condition|)
block|{
return|return
name|other
operator|.
name|intersects
argument_list|(
name|this
argument_list|)
return|;
block|}
name|HashDocSet
name|h
init|=
operator|new
name|HashDocSet
argument_list|(
name|docs
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
return|return
name|h
operator|.
name|intersects
argument_list|(
name|other
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clone
specifier|protected
name|DocSlice
name|clone
parameter_list|()
block|{
try|try
block|{
comment|// DocSlice is not currently mutable
name|DocSlice
name|slice
init|=
operator|(
name|DocSlice
operator|)
name|super
operator|.
name|clone
argument_list|()
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|ramBytesUsed
return|;
block|}
annotation|@
name|Override
DECL|method|getChildResources
specifier|public
name|Collection
argument_list|<
name|Accountable
argument_list|>
name|getChildResources
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
end_class
end_unit
