begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Fields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BulkScorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreScorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreWeight
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchNoDocsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|DocIdSetBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_comment
comment|/**  *  The GraphTermsQuery builds a disjunction query from a list of terms. The terms are first filtered by the maxDocFreq parameter.  *  This allows graph traversals to skip traversing high frequency nodes which is often desirable from a performance standpoint.  *  *   Syntax: {!graphTerms f=field maxDocFreq=10000}term1,term2,term3  **/
end_comment
begin_class
DECL|class|GraphTermsQParserPlugin
specifier|public
class|class
name|GraphTermsQParserPlugin
extends|extends
name|QParserPlugin
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"graphTerms"
decl_stmt|;
annotation|@
name|Override
DECL|method|createParser
specifier|public
name|QParser
name|createParser
parameter_list|(
name|String
name|qstr
parameter_list|,
name|SolrParams
name|localParams
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|)
block|{
return|return
operator|new
name|QParser
argument_list|(
name|qstr
argument_list|,
name|localParams
argument_list|,
name|params
argument_list|,
name|req
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Query
name|parse
parameter_list|()
throws|throws
name|SyntaxError
block|{
name|String
name|fname
init|=
name|localParams
operator|.
name|get
argument_list|(
name|QueryParsing
operator|.
name|F
argument_list|)
decl_stmt|;
name|FieldType
name|ft
init|=
name|req
operator|.
name|getSchema
argument_list|()
operator|.
name|getFieldTypeNoEx
argument_list|(
name|fname
argument_list|)
decl_stmt|;
name|int
name|maxDocFreq
init|=
name|localParams
operator|.
name|getInt
argument_list|(
literal|"maxDocFreq"
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|String
name|qstr
init|=
name|localParams
operator|.
name|get
argument_list|(
name|QueryParsing
operator|.
name|V
argument_list|)
decl_stmt|;
comment|//never null
if|if
condition|(
name|qstr
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|MatchNoDocsQuery
argument_list|()
return|;
block|}
specifier|final
name|String
index|[]
name|splitVals
init|=
name|qstr
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|Term
index|[]
name|terms
init|=
operator|new
name|Term
index|[
name|splitVals
operator|.
name|length
index|]
decl_stmt|;
name|BytesRefBuilder
name|term
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splitVals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|stringVal
init|=
name|splitVals
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|ft
operator|!=
literal|null
condition|)
block|{
name|ft
operator|.
name|readableToIndexed
argument_list|(
name|stringVal
argument_list|,
name|term
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|term
operator|.
name|copyChars
argument_list|(
name|stringVal
argument_list|)
expr_stmt|;
block|}
name|BytesRef
name|ref
init|=
name|term
operator|.
name|toBytesRef
argument_list|()
decl_stmt|;
name|terms
index|[
name|i
index|]
operator|=
operator|new
name|Term
argument_list|(
name|fname
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
name|ArrayUtil
operator|.
name|timSort
argument_list|(
name|terms
argument_list|)
expr_stmt|;
return|return
operator|new
name|ConstantScoreQuery
argument_list|(
operator|new
name|GraphTermsQuery
argument_list|(
name|fname
argument_list|,
name|terms
argument_list|,
name|maxDocFreq
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|class|GraphTermsQuery
specifier|private
class|class
name|GraphTermsQuery
extends|extends
name|Query
implements|implements
name|ExtendedQuery
block|{
DECL|field|queryTerms
specifier|private
name|Term
index|[]
name|queryTerms
decl_stmt|;
DECL|field|field
specifier|private
name|String
name|field
decl_stmt|;
DECL|field|maxDocFreq
specifier|private
name|int
name|maxDocFreq
decl_stmt|;
DECL|field|id
specifier|private
name|Object
name|id
decl_stmt|;
DECL|method|GraphTermsQuery
specifier|public
name|GraphTermsQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Term
index|[]
name|terms
parameter_list|,
name|int
name|maxDocFreq
parameter_list|)
block|{
name|this
operator|.
name|maxDocFreq
operator|=
name|maxDocFreq
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|queryTerms
operator|=
name|terms
expr_stmt|;
name|this
operator|.
name|id
operator|=
operator|new
name|Object
argument_list|()
expr_stmt|;
block|}
comment|//Just for cloning
DECL|method|GraphTermsQuery
specifier|private
name|GraphTermsQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Term
index|[]
name|terms
parameter_list|,
name|int
name|maxDocFreq
parameter_list|,
name|Object
name|id
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|queryTerms
operator|=
name|terms
expr_stmt|;
name|this
operator|.
name|maxDocFreq
operator|=
name|maxDocFreq
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|getCache
specifier|public
name|boolean
name|getCache
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|getCacheSep
specifier|public
name|boolean
name|getCacheSep
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|setCacheSep
specifier|public
name|void
name|setCacheSep
parameter_list|(
name|boolean
name|sep
parameter_list|)
block|{      }
DECL|method|setCache
specifier|public
name|void
name|setCache
parameter_list|(
name|boolean
name|cache
parameter_list|)
block|{      }
DECL|method|getCost
specifier|public
name|int
name|getCost
parameter_list|()
block|{
return|return
literal|1
return|;
comment|// Not a post filter. The GraphTermsQuery will typically be used as the main query.
block|}
DECL|method|setCost
specifier|public
name|void
name|setCost
parameter_list|(
name|int
name|cost
parameter_list|)
block|{      }
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
return|;
block|}
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|31
operator|*
name|super
operator|.
name|hashCode
argument_list|()
operator|+
name|id
operator|.
name|hashCode
argument_list|()
return|;
block|}
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
name|GraphTermsQuery
name|q
init|=
operator|(
name|GraphTermsQuery
operator|)
name|o
decl_stmt|;
return|return
name|id
operator|==
name|q
operator|.
name|id
return|;
block|}
DECL|method|clone
specifier|public
name|GraphTermsQuery
name|clone
parameter_list|()
block|{
name|GraphTermsQuery
name|clone
init|=
operator|new
name|GraphTermsQuery
argument_list|(
name|this
operator|.
name|field
argument_list|,
name|this
operator|.
name|queryTerms
argument_list|,
name|this
operator|.
name|maxDocFreq
argument_list|,
name|this
operator|.
name|id
argument_list|)
decl_stmt|;
return|return
name|clone
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|defaultField
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Term
name|term
range|:
name|this
operator|.
name|queryTerms
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|term
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|class|WeightOrDocIdSet
specifier|private
class|class
name|WeightOrDocIdSet
block|{
DECL|field|weight
specifier|final
name|Weight
name|weight
decl_stmt|;
DECL|field|set
specifier|final
name|DocIdSet
name|set
decl_stmt|;
DECL|method|WeightOrDocIdSet
name|WeightOrDocIdSet
parameter_list|(
name|DocIdSet
name|bitset
parameter_list|)
block|{
name|this
operator|.
name|set
operator|=
name|bitset
expr_stmt|;
name|this
operator|.
name|weight
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createWeight
specifier|public
name|Weight
name|createWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|boolean
name|needsScores
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|TermContext
argument_list|>
name|finalContexts
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Term
argument_list|>
name|finalTerms
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LeafReaderContext
argument_list|>
name|contexts
init|=
name|searcher
operator|.
name|getTopReaderContext
argument_list|()
operator|.
name|leaves
argument_list|()
decl_stmt|;
name|TermContext
index|[]
name|termContexts
init|=
operator|new
name|TermContext
index|[
name|this
operator|.
name|queryTerms
operator|.
name|length
index|]
decl_stmt|;
name|collectTermContext
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|,
name|contexts
argument_list|,
name|termContexts
argument_list|,
name|this
operator|.
name|queryTerms
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|termContexts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|TermContext
name|termContext
init|=
name|termContexts
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|termContext
operator|!=
literal|null
operator|&&
name|termContext
operator|.
name|docFreq
argument_list|()
operator|<=
name|this
operator|.
name|maxDocFreq
condition|)
block|{
name|finalContexts
operator|.
name|add
argument_list|(
name|termContext
argument_list|)
expr_stmt|;
name|finalTerms
operator|.
name|add
argument_list|(
name|queryTerms
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|ConstantScoreWeight
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|extractTerms
parameter_list|(
name|Set
argument_list|<
name|Term
argument_list|>
name|terms
parameter_list|)
block|{
comment|// no-op
comment|// This query is for abuse cases when the number of terms is too high to
comment|// run efficiently as a BooleanQuery. So likewise we hide its terms in
comment|// order to protect highlighters
block|}
specifier|private
name|WeightOrDocIdSet
name|rewrite
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|LeafReader
name|reader
init|=
name|context
operator|.
name|reader
argument_list|()
decl_stmt|;
specifier|final
name|Fields
name|fields
init|=
name|reader
operator|.
name|fields
argument_list|()
decl_stmt|;
name|Terms
name|terms
init|=
name|fields
operator|.
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|PostingsEnum
name|docs
init|=
literal|null
decl_stmt|;
name|DocIdSetBuilder
name|builder
init|=
operator|new
name|DocIdSetBuilder
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|finalContexts
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|TermContext
name|termContext
init|=
name|finalContexts
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|TermState
name|termState
init|=
name|termContext
operator|.
name|get
argument_list|(
name|context
operator|.
name|ord
argument_list|)
decl_stmt|;
if|if
condition|(
name|termState
operator|!=
literal|null
condition|)
block|{
name|Term
name|term
init|=
name|finalTerms
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|termsEnum
operator|.
name|seekExact
argument_list|(
name|term
operator|.
name|bytes
argument_list|()
argument_list|,
name|termContext
operator|.
name|get
argument_list|(
name|context
operator|.
name|ord
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|docs
argument_list|,
name|PostingsEnum
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|docs
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|WeightOrDocIdSet
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Scorer
name|scorer
parameter_list|(
name|DocIdSet
name|set
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|set
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|DocIdSetIterator
name|disi
init|=
name|set
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|disi
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|ConstantScoreScorer
argument_list|(
name|this
argument_list|,
name|score
argument_list|()
argument_list|,
name|disi
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|BulkScorer
name|bulkScorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|WeightOrDocIdSet
name|weightOrBitSet
init|=
name|rewrite
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|weightOrBitSet
operator|.
name|weight
operator|!=
literal|null
condition|)
block|{
return|return
name|weightOrBitSet
operator|.
name|weight
operator|.
name|bulkScorer
argument_list|(
name|context
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|Scorer
name|scorer
init|=
name|scorer
argument_list|(
name|weightOrBitSet
operator|.
name|set
argument_list|)
decl_stmt|;
if|if
condition|(
name|scorer
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|DefaultBulkScorer
argument_list|(
name|scorer
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Scorer
name|scorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|WeightOrDocIdSet
name|weightOrBitSet
init|=
name|rewrite
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|weightOrBitSet
operator|.
name|weight
operator|!=
literal|null
condition|)
block|{
return|return
name|weightOrBitSet
operator|.
name|weight
operator|.
name|scorer
argument_list|(
name|context
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|scorer
argument_list|(
name|weightOrBitSet
operator|.
name|set
argument_list|)
return|;
block|}
block|}
block|}
return|;
block|}
DECL|method|collectTermContext
specifier|private
name|void
name|collectTermContext
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|List
argument_list|<
name|LeafReaderContext
argument_list|>
name|leaves
parameter_list|,
name|TermContext
index|[]
name|contextArray
parameter_list|,
name|Term
index|[]
name|queryTerms
parameter_list|)
throws|throws
name|IOException
block|{
name|TermsEnum
name|termsEnum
init|=
literal|null
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|context
range|:
name|leaves
control|)
block|{
specifier|final
name|Fields
name|fields
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|fields
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queryTerms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Term
name|term
init|=
name|queryTerms
index|[
name|i
index|]
decl_stmt|;
name|TermContext
name|termContext
init|=
name|contextArray
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|Terms
name|terms
init|=
name|fields
operator|.
name|terms
argument_list|(
name|term
operator|.
name|field
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|==
literal|null
condition|)
block|{
comment|// field does not exist
continue|continue;
block|}
name|termsEnum
operator|=
name|terms
operator|.
name|iterator
argument_list|()
expr_stmt|;
assert|assert
name|termsEnum
operator|!=
literal|null
assert|;
if|if
condition|(
name|termsEnum
operator|==
name|TermsEnum
operator|.
name|EMPTY
condition|)
continue|continue;
if|if
condition|(
name|termsEnum
operator|.
name|seekExact
argument_list|(
name|term
operator|.
name|bytes
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|termContext
operator|==
literal|null
condition|)
block|{
name|contextArray
index|[
name|i
index|]
operator|=
operator|new
name|TermContext
argument_list|(
name|reader
operator|.
name|getContext
argument_list|()
argument_list|,
name|termsEnum
operator|.
name|termState
argument_list|()
argument_list|,
name|context
operator|.
name|ord
argument_list|,
name|termsEnum
operator|.
name|docFreq
argument_list|()
argument_list|,
name|termsEnum
operator|.
name|totalTermFreq
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|termContext
operator|.
name|register
argument_list|(
name|termsEnum
operator|.
name|termState
argument_list|()
argument_list|,
name|context
operator|.
name|ord
argument_list|,
name|termsEnum
operator|.
name|docFreq
argument_list|()
argument_list|,
name|termsEnum
operator|.
name|totalTermFreq
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
end_class
end_unit
