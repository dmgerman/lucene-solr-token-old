begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ResponseBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|MergeStrategy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestInfo
import|;
end_import
begin_comment
comment|/**  *<b>Note: This API is experimental and may change in non backward-compatible ways in the future</b>  **/
end_comment
begin_class
DECL|class|AnalyticsQuery
specifier|public
specifier|abstract
class|class
name|AnalyticsQuery
extends|extends
name|ExtendedQueryBase
implements|implements
name|PostFilter
block|{
DECL|method|getCache
specifier|public
name|boolean
name|getCache
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|getCost
specifier|public
name|int
name|getCost
parameter_list|()
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
name|super
operator|.
name|getCost
argument_list|()
argument_list|,
literal|100
argument_list|)
return|;
block|}
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|this
operator|==
name|o
return|;
block|}
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|System
operator|.
name|identityHashCode
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**   *  Use this constructor for single node analytics.   * */
DECL|method|AnalyticsQuery
specifier|public
name|AnalyticsQuery
parameter_list|()
block|{    }
comment|/**    * Use this constructor for distributed analytics.    * @param mergeStrategy defines the distributed merge strategy for this AnalyticsQuery    **/
DECL|method|AnalyticsQuery
specifier|public
name|AnalyticsQuery
parameter_list|(
name|MergeStrategy
name|mergeStrategy
parameter_list|)
block|{
name|SolrRequestInfo
name|info
init|=
name|SolrRequestInfo
operator|.
name|getRequestInfo
argument_list|()
decl_stmt|;
name|ResponseBuilder
name|rb
init|=
name|info
operator|.
name|getResponseBuilder
argument_list|()
decl_stmt|;
name|rb
operator|.
name|addMergeStrategy
argument_list|(
name|mergeStrategy
argument_list|)
expr_stmt|;
block|}
DECL|method|getFilterCollector
specifier|public
name|DelegatingCollector
name|getFilterCollector
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|)
block|{
name|SolrRequestInfo
name|info
init|=
name|SolrRequestInfo
operator|.
name|getRequestInfo
argument_list|()
decl_stmt|;
name|ResponseBuilder
name|rb
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|rb
operator|=
name|info
operator|.
name|getResponseBuilder
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rb
operator|==
literal|null
condition|)
block|{
comment|//This is the autowarming case.
return|return
operator|new
name|DelegatingCollector
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|getAnalyticsCollector
argument_list|(
name|rb
argument_list|,
name|searcher
argument_list|)
return|;
block|}
block|}
DECL|method|getAnalyticsCollector
specifier|public
specifier|abstract
name|DelegatingCollector
name|getAnalyticsCollector
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|)
function_decl|;
block|}
end_class
end_unit
