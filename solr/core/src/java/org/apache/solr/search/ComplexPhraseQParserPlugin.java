begin_unit
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|classic
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|complexPhrase
operator|.
name|ComplexPhraseQueryParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|parser
operator|.
name|QueryParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_comment
comment|/**  * Parse Solr's variant on the Lucene {@link org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser} syntax.  *<p/>  * Modified from {@link org.apache.solr.search.LuceneQParserPlugin} and {@link org.apache.solr.search.SurroundQParserPlugin}  */
end_comment
begin_class
DECL|class|ComplexPhraseQParserPlugin
specifier|public
class|class
name|ComplexPhraseQParserPlugin
extends|extends
name|QParserPlugin
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"complexphrase"
decl_stmt|;
DECL|field|inOrder
specifier|private
name|boolean
name|inOrder
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|!=
literal|null
condition|)
block|{
name|Object
name|val
init|=
name|args
operator|.
name|get
argument_list|(
literal|"inOrder"
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|inOrder
operator|=
name|StrUtils
operator|.
name|parseBool
argument_list|(
name|val
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|createParser
specifier|public
name|QParser
name|createParser
parameter_list|(
name|String
name|qstr
parameter_list|,
name|SolrParams
name|localParams
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|)
block|{
name|ComplexPhraseQParser
name|qParser
init|=
operator|new
name|ComplexPhraseQParser
argument_list|(
name|qstr
argument_list|,
name|localParams
argument_list|,
name|params
argument_list|,
name|req
argument_list|)
decl_stmt|;
name|qParser
operator|.
name|setInOrder
argument_list|(
name|inOrder
argument_list|)
expr_stmt|;
return|return
name|qParser
return|;
block|}
block|}
end_class
begin_comment
comment|/**  * Modified from {@link org.apache.solr.search.LuceneQParser} and {@link org.apache.solr.search.SurroundQParser}  */
end_comment
begin_class
DECL|class|ComplexPhraseQParser
class|class
name|ComplexPhraseQParser
extends|extends
name|QParser
block|{
DECL|field|lparser
name|ComplexPhraseQueryParser
name|lparser
decl_stmt|;
DECL|field|inOrder
name|boolean
name|inOrder
init|=
literal|true
decl_stmt|;
comment|/**    * When<code>inOrder</code> is true, the search terms must    * exists in the documents as the same order as in query.    *    * @param inOrder parameter to choose between ordered or un-ordered proximity search    */
DECL|method|setInOrder
specifier|public
name|void
name|setInOrder
parameter_list|(
specifier|final
name|boolean
name|inOrder
parameter_list|)
block|{
name|this
operator|.
name|inOrder
operator|=
name|inOrder
expr_stmt|;
block|}
DECL|method|ComplexPhraseQParser
specifier|public
name|ComplexPhraseQParser
parameter_list|(
name|String
name|qstr
parameter_list|,
name|SolrParams
name|localParams
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|)
block|{
name|super
argument_list|(
name|qstr
argument_list|,
name|localParams
argument_list|,
name|params
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parse
specifier|public
name|Query
name|parse
parameter_list|()
throws|throws
name|SyntaxError
block|{
name|String
name|qstr
init|=
name|getString
argument_list|()
decl_stmt|;
name|String
name|defaultField
init|=
name|getParam
argument_list|(
name|CommonParams
operator|.
name|DF
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultField
operator|==
literal|null
condition|)
block|{
name|defaultField
operator|=
name|getReq
argument_list|()
operator|.
name|getSchema
argument_list|()
operator|.
name|getDefaultSearchFieldName
argument_list|()
expr_stmt|;
block|}
name|lparser
operator|=
operator|new
name|ComplexPhraseQueryParser
argument_list|(
name|getReq
argument_list|()
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|luceneMatchVersion
argument_list|,
name|defaultField
argument_list|,
name|getReq
argument_list|()
operator|.
name|getSchema
argument_list|()
operator|.
name|getQueryAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|localParams
operator|!=
literal|null
condition|)
name|inOrder
operator|=
name|localParams
operator|.
name|getBool
argument_list|(
literal|"inOrder"
argument_list|,
name|inOrder
argument_list|)
expr_stmt|;
name|lparser
operator|.
name|setInOrder
argument_list|(
name|inOrder
argument_list|)
expr_stmt|;
name|QueryParser
operator|.
name|Operator
name|defaultOperator
init|=
name|QueryParsing
operator|.
name|getQueryParserDefaultOperator
argument_list|(
name|getReq
argument_list|()
operator|.
name|getSchema
argument_list|()
argument_list|,
name|getParam
argument_list|(
name|QueryParsing
operator|.
name|OP
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|QueryParser
operator|.
name|Operator
operator|.
name|AND
operator|.
name|equals
argument_list|(
name|defaultOperator
argument_list|)
condition|)
name|lparser
operator|.
name|setDefaultOperator
argument_list|(
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|classic
operator|.
name|QueryParser
operator|.
name|Operator
operator|.
name|AND
argument_list|)
expr_stmt|;
else|else
name|lparser
operator|.
name|setDefaultOperator
argument_list|(
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|classic
operator|.
name|QueryParser
operator|.
name|Operator
operator|.
name|OR
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|lparser
operator|.
name|parse
argument_list|(
name|qstr
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
throw|throw
operator|new
name|SyntaxError
argument_list|(
name|pe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDefaultHighlightFields
specifier|public
name|String
index|[]
name|getDefaultHighlightFields
parameter_list|()
block|{
return|return
name|lparser
operator|==
literal|null
condition|?
operator|new
name|String
index|[]
block|{}
else|:
operator|new
name|String
index|[]
block|{
name|lparser
operator|.
name|getField
argument_list|()
block|}
return|;
block|}
block|}
end_class
end_unit
