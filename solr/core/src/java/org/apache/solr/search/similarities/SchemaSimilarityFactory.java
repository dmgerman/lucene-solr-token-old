begin_unit
begin_package
DECL|package|org.apache.solr.search.similarities
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|similarities
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|ClassicSimilarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|PerFieldSimilarityWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|Similarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SimilarityFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|SolrCoreAware
import|;
end_import
begin_comment
comment|/**  * SimilarityFactory that returns a {@link PerFieldSimilarityWrapper}  * that delegates to the field type, if it's configured, otherwise  * {@link ClassicSimilarity}.  *  *<p>  *<b>NOTE:</b> Users should be aware that in addition to supporting   *<code>Similarity</code> configurations specified on individual   * field types, this factory also differs in behavior from   * {@link ClassicSimilarityFactory} because of other differences in the   * implementations of<code>PerFieldSimilarityWrapper</code> and   * {@link ClassicSimilarity} - notably in methods such as   * {@link Similarity#coord} and {@link Similarity#queryNorm}.    *</p>  *  * @see FieldType#getSimilarity  */
end_comment
begin_class
DECL|class|SchemaSimilarityFactory
specifier|public
class|class
name|SchemaSimilarityFactory
extends|extends
name|SimilarityFactory
implements|implements
name|SolrCoreAware
block|{
DECL|field|similarity
specifier|private
name|Similarity
name|similarity
decl_stmt|;
DECL|field|defaultSimilarity
specifier|private
name|Similarity
name|defaultSimilarity
init|=
operator|new
name|ClassicSimilarity
argument_list|()
decl_stmt|;
DECL|field|core
specifier|private
specifier|volatile
name|SolrCore
name|core
decl_stmt|;
annotation|@
name|Override
DECL|method|inform
specifier|public
name|void
name|inform
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|this
operator|.
name|core
operator|=
name|core
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|SolrParams
name|args
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|similarity
operator|=
operator|new
name|PerFieldSimilarityWrapper
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Similarity
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|FieldType
name|fieldType
init|=
name|core
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getFieldTypeNoEx
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldType
operator|==
literal|null
condition|)
block|{
return|return
name|defaultSimilarity
return|;
block|}
else|else
block|{
name|Similarity
name|similarity
init|=
name|fieldType
operator|.
name|getSimilarity
argument_list|()
decl_stmt|;
return|return
name|similarity
operator|==
literal|null
condition|?
name|defaultSimilarity
else|:
name|similarity
return|;
block|}
block|}
block|}
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSimilarity
specifier|public
name|Similarity
name|getSimilarity
parameter_list|()
block|{
assert|assert
name|core
operator|!=
literal|null
operator|:
literal|"inform must be called first"
assert|;
return|return
name|similarity
return|;
block|}
block|}
end_class
end_unit
