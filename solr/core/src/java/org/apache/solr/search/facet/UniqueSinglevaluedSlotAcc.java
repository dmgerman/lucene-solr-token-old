begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search.facet
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|facet
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LongValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_class
DECL|class|UniqueSinglevaluedSlotAcc
class|class
name|UniqueSinglevaluedSlotAcc
extends|extends
name|UniqueSlotAcc
block|{
DECL|field|topLevel
specifier|final
name|SortedDocValues
name|topLevel
decl_stmt|;
DECL|field|subDvs
specifier|final
name|SortedDocValues
index|[]
name|subDvs
decl_stmt|;
DECL|field|ordMap
specifier|final
name|MultiDocValues
operator|.
name|OrdinalMap
name|ordMap
decl_stmt|;
DECL|field|toGlobal
name|LongValues
name|toGlobal
decl_stmt|;
DECL|field|subDv
name|SortedDocValues
name|subDv
decl_stmt|;
DECL|method|UniqueSinglevaluedSlotAcc
specifier|public
name|UniqueSinglevaluedSlotAcc
parameter_list|(
name|FacetContext
name|fcontext
parameter_list|,
name|String
name|field
parameter_list|,
name|int
name|numSlots
parameter_list|,
name|HLLAgg
operator|.
name|HLLFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|fcontext
argument_list|,
name|field
argument_list|,
name|numSlots
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|SolrIndexSearcher
name|searcher
init|=
name|fcontext
operator|.
name|qcontext
operator|.
name|searcher
argument_list|()
decl_stmt|;
name|topLevel
operator|=
name|FieldUtil
operator|.
name|getSortedDocValues
argument_list|(
name|fcontext
operator|.
name|qcontext
argument_list|,
name|searcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|nTerms
operator|=
name|topLevel
operator|.
name|getValueCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|topLevel
operator|instanceof
name|MultiDocValues
operator|.
name|MultiSortedDocValues
condition|)
block|{
name|ordMap
operator|=
operator|(
operator|(
name|MultiDocValues
operator|.
name|MultiSortedDocValues
operator|)
name|topLevel
operator|)
operator|.
name|mapping
expr_stmt|;
name|subDvs
operator|=
operator|(
operator|(
name|MultiDocValues
operator|.
name|MultiSortedDocValues
operator|)
name|topLevel
operator|)
operator|.
name|values
expr_stmt|;
block|}
else|else
block|{
name|ordMap
operator|=
literal|null
expr_stmt|;
name|subDvs
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|lookupOrd
specifier|protected
name|BytesRef
name|lookupOrd
parameter_list|(
name|int
name|ord
parameter_list|)
block|{
return|return
name|topLevel
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|readerContext
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|setNextReader
argument_list|(
name|readerContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|subDvs
operator|!=
literal|null
condition|)
block|{
name|subDv
operator|=
name|subDvs
index|[
name|readerContext
operator|.
name|ord
index|]
expr_stmt|;
name|toGlobal
operator|=
name|ordMap
operator|.
name|getGlobalOrds
argument_list|(
name|readerContext
operator|.
name|ord
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|readerContext
operator|.
name|ord
operator|==
literal|0
operator|||
name|topLevel
operator|.
name|getValueCount
argument_list|()
operator|==
literal|0
assert|;
name|subDv
operator|=
name|topLevel
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|,
name|int
name|slotNum
parameter_list|)
block|{
name|int
name|segOrd
init|=
name|subDv
operator|.
name|getOrd
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|segOrd
operator|<
literal|0
condition|)
return|return;
comment|// -1 means missing
name|int
name|ord
init|=
name|toGlobal
operator|==
literal|null
condition|?
name|segOrd
else|:
operator|(
name|int
operator|)
name|toGlobal
operator|.
name|get
argument_list|(
name|segOrd
argument_list|)
decl_stmt|;
name|FixedBitSet
name|bits
init|=
name|arr
index|[
name|slotNum
index|]
decl_stmt|;
if|if
condition|(
name|bits
operator|==
literal|null
condition|)
block|{
name|bits
operator|=
operator|new
name|FixedBitSet
argument_list|(
name|nTerms
argument_list|)
expr_stmt|;
name|arr
index|[
name|slotNum
index|]
operator|=
name|bits
expr_stmt|;
block|}
name|bits
operator|.
name|set
argument_list|(
name|ord
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
