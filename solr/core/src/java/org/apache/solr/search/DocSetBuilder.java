begin_unit
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LSBRadixSorter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_comment
comment|/**  * Adapted from DocIdSetBuilder to build DocSets  *  * @lucene.internal  */
end_comment
begin_class
DECL|class|DocSetBuilder
specifier|public
specifier|final
class|class
name|DocSetBuilder
block|{
DECL|field|maxDoc
specifier|private
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|field|threshold
specifier|private
specifier|final
name|int
name|threshold
decl_stmt|;
DECL|field|buffer
specifier|private
name|int
index|[]
name|buffer
decl_stmt|;
DECL|field|pos
specifier|private
name|int
name|pos
decl_stmt|;
DECL|field|bitSet
specifier|private
name|FixedBitSet
name|bitSet
decl_stmt|;
DECL|method|DocSetBuilder
specifier|public
name|DocSetBuilder
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|long
name|costEst
parameter_list|)
block|{
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
comment|// For ridiculously small sets, we'll just use a sorted int[]
comment|// maxDoc>>> 7 is a good value if you want to save memory, lower values
comment|// such as maxDoc>>> 11 should provide faster building but at the expense
comment|// of using a full bitset even for quite sparse data
name|this
operator|.
name|threshold
operator|=
operator|(
name|maxDoc
operator|>>>
literal|7
operator|)
operator|+
literal|4
expr_stmt|;
comment|// the +4 is for better testing on small indexes
if|if
condition|(
name|costEst
operator|>
name|threshold
condition|)
block|{
name|bitSet
operator|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|buffer
operator|=
operator|new
name|int
index|[
name|Math
operator|.
name|max
argument_list|(
operator|(
name|int
operator|)
name|costEst
argument_list|,
literal|1
argument_list|)
index|]
expr_stmt|;
block|}
block|}
DECL|method|upgradeToBitSet
specifier|private
name|void
name|upgradeToBitSet
parameter_list|()
block|{
assert|assert
name|bitSet
operator|==
literal|null
assert|;
name|bitSet
operator|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pos
condition|;
operator|++
name|i
control|)
block|{
name|bitSet
operator|.
name|set
argument_list|(
name|buffer
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|buffer
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|pos
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|growBuffer
specifier|private
name|void
name|growBuffer
parameter_list|(
name|int
name|minSize
parameter_list|)
block|{
if|if
condition|(
name|minSize
operator|<
name|buffer
operator|.
name|length
condition|)
return|return;
name|int
name|newSize
init|=
name|buffer
operator|.
name|length
decl_stmt|;
while|while
condition|(
name|newSize
operator|<
name|minSize
condition|)
block|{
name|newSize
operator|=
name|newSize
operator|<<
literal|1
expr_stmt|;
block|}
name|newSize
operator|=
name|Math
operator|.
name|min
argument_list|(
name|newSize
argument_list|,
name|threshold
argument_list|)
expr_stmt|;
name|int
index|[]
name|newBuffer
init|=
operator|new
name|int
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|newBuffer
argument_list|,
literal|0
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|buffer
operator|=
name|newBuffer
expr_stmt|;
block|}
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|DocIdSetIterator
name|iter
parameter_list|,
name|int
name|base
parameter_list|)
throws|throws
name|IOException
block|{
name|grow
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|iter
operator|.
name|cost
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|bitSet
operator|!=
literal|null
condition|)
block|{
name|add
argument_list|(
name|bitSet
argument_list|,
name|iter
argument_list|,
name|base
argument_list|)
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
literal|true
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|pos
init|;
name|i
operator|<
name|buffer
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|doc
init|=
name|iter
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|pos
operator|=
name|i
expr_stmt|;
comment|// update pos
return|return;
block|}
name|buffer
index|[
name|i
index|]
operator|=
name|doc
operator|+
name|base
expr_stmt|;
comment|// using the loop counter may help with removal of bounds checking
block|}
name|pos
operator|=
name|buffer
operator|.
name|length
expr_stmt|;
comment|// update pos
if|if
condition|(
name|pos
operator|+
literal|1
operator|>=
name|threshold
condition|)
block|{
break|break;
block|}
name|growBuffer
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|upgradeToBitSet
argument_list|()
expr_stmt|;
name|add
argument_list|(
name|bitSet
argument_list|,
name|iter
argument_list|,
name|base
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|add
specifier|public
specifier|static
name|void
name|add
parameter_list|(
name|FixedBitSet
name|bitSet
parameter_list|,
name|DocIdSetIterator
name|iter
parameter_list|,
name|int
name|base
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|doc
init|=
name|iter
operator|.
name|nextDoc
argument_list|()
init|;
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|doc
operator|=
name|iter
operator|.
name|nextDoc
argument_list|()
control|)
block|{
name|bitSet
operator|.
name|set
argument_list|(
name|doc
operator|+
name|base
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Returns the number of terms visited */
DECL|method|add
specifier|public
name|int
name|add
parameter_list|(
name|TermsEnum
name|te
parameter_list|,
name|int
name|base
parameter_list|)
throws|throws
name|IOException
block|{
name|PostingsEnum
name|postings
init|=
literal|null
decl_stmt|;
name|int
name|termCount
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|BytesRef
name|term
init|=
name|te
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|==
literal|null
condition|)
break|break;
name|termCount
operator|++
expr_stmt|;
name|postings
operator|=
name|te
operator|.
name|postings
argument_list|(
name|postings
argument_list|,
name|PostingsEnum
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|postings
argument_list|,
name|base
argument_list|)
expr_stmt|;
block|}
return|return
name|termCount
return|;
block|}
DECL|method|grow
specifier|public
name|void
name|grow
parameter_list|(
name|int
name|numDocs
parameter_list|)
block|{
if|if
condition|(
name|bitSet
operator|==
literal|null
condition|)
block|{
specifier|final
name|long
name|newLength
init|=
name|pos
operator|+
name|numDocs
decl_stmt|;
if|if
condition|(
name|newLength
operator|<
name|threshold
condition|)
block|{
name|growBuffer
argument_list|(
operator|(
name|int
operator|)
name|newLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|upgradeToBitSet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
if|if
condition|(
name|bitSet
operator|!=
literal|null
condition|)
block|{
name|bitSet
operator|.
name|set
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|pos
operator|>=
name|buffer
operator|.
name|length
condition|)
block|{
if|if
condition|(
name|pos
operator|+
literal|1
operator|>=
name|threshold
condition|)
block|{
name|upgradeToBitSet
argument_list|()
expr_stmt|;
name|bitSet
operator|.
name|set
argument_list|(
name|doc
argument_list|)
expr_stmt|;
return|return;
block|}
name|growBuffer
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|buffer
index|[
name|pos
operator|++
index|]
operator|=
name|doc
expr_stmt|;
block|}
block|}
DECL|method|dedup
specifier|private
specifier|static
name|int
name|dedup
parameter_list|(
name|int
index|[]
name|arr
parameter_list|,
name|int
name|length
parameter_list|,
name|FixedBitSet
name|acceptDocs
parameter_list|)
block|{
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|l
init|=
literal|1
decl_stmt|;
name|int
name|previous
init|=
name|arr
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|value
init|=
name|arr
index|[
name|i
index|]
decl_stmt|;
assert|assert
name|value
operator|>=
name|previous
assert|;
if|if
condition|(
name|value
operator|!=
name|previous
condition|)
block|{
if|if
condition|(
name|acceptDocs
operator|==
literal|null
operator|||
name|acceptDocs
operator|.
name|get
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|arr
index|[
name|l
operator|++
index|]
operator|=
name|value
expr_stmt|;
name|previous
operator|=
name|value
expr_stmt|;
block|}
block|}
block|}
return|return
name|l
return|;
block|}
DECL|method|build
specifier|public
name|DocSet
name|build
parameter_list|(
name|FixedBitSet
name|filter
parameter_list|)
block|{
if|if
condition|(
name|bitSet
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|bitSet
operator|.
name|and
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|BitDocSet
argument_list|(
name|bitSet
argument_list|)
return|;
comment|// TODO - if this set will be cached, should we make it smaller if it's below DocSetUtil.smallSetSize?
block|}
else|else
block|{
name|LSBRadixSorter
name|sorter
init|=
operator|new
name|LSBRadixSorter
argument_list|()
decl_stmt|;
name|sorter
operator|.
name|sort
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|pos
argument_list|)
expr_stmt|;
specifier|final
name|int
name|l
init|=
name|dedup
argument_list|(
name|buffer
argument_list|,
name|pos
argument_list|,
name|filter
argument_list|)
decl_stmt|;
assert|assert
name|l
operator|<=
name|pos
assert|;
return|return
operator|new
name|SortedIntDocSet
argument_list|(
name|buffer
argument_list|,
name|l
argument_list|)
return|;
comment|// TODO: have option to not shrink in the future if it will be a temporary set
block|}
block|}
comment|/** Only use this if you know there were no duplicates and that docs were collected in-order! */
DECL|method|buildUniqueInOrder
specifier|public
name|DocSet
name|buildUniqueInOrder
parameter_list|(
name|FixedBitSet
name|filter
parameter_list|)
block|{
if|if
condition|(
name|bitSet
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|bitSet
operator|.
name|and
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|BitDocSet
argument_list|(
name|bitSet
argument_list|)
return|;
block|}
else|else
block|{
comment|// don't need to sort, but still need to remove non accepted docs
name|int
name|l
init|=
name|pos
decl_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|l
operator|=
name|dedup
argument_list|(
name|buffer
argument_list|,
name|pos
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SortedIntDocSet
argument_list|(
name|buffer
argument_list|,
name|l
argument_list|)
return|;
comment|// TODO: have option to not shrink in the future if it will be a temporary set
block|}
block|}
block|}
end_class
end_unit
