begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import
begin_comment
comment|/**  * A query request command to avoid having to change the method signatures if we want to pass additional information  * to the searcher.  */
end_comment
begin_class
DECL|class|QueryCommand
specifier|public
class|class
name|QueryCommand
block|{
DECL|field|query
specifier|private
name|Query
name|query
decl_stmt|;
DECL|field|filterList
specifier|private
name|List
argument_list|<
name|Query
argument_list|>
name|filterList
decl_stmt|;
DECL|field|filter
specifier|private
name|DocSet
name|filter
decl_stmt|;
DECL|field|sort
specifier|private
name|Sort
name|sort
decl_stmt|;
DECL|field|offset
specifier|private
name|int
name|offset
decl_stmt|;
DECL|field|len
specifier|private
name|int
name|len
decl_stmt|;
DECL|field|supersetMaxDoc
specifier|private
name|int
name|supersetMaxDoc
decl_stmt|;
DECL|field|flags
specifier|private
name|int
name|flags
decl_stmt|;
DECL|field|timeAllowed
specifier|private
name|long
name|timeAllowed
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|cursorMark
specifier|private
name|CursorMark
name|cursorMark
decl_stmt|;
DECL|method|getCursorMark
specifier|public
name|CursorMark
name|getCursorMark
parameter_list|()
block|{
return|return
name|cursorMark
return|;
block|}
DECL|method|setCursorMark
specifier|public
name|QueryCommand
name|setCursorMark
parameter_list|(
name|CursorMark
name|cursorMark
parameter_list|)
block|{
name|this
operator|.
name|cursorMark
operator|=
name|cursorMark
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|cursorMark
condition|)
block|{
comment|// If we're using a cursor then we can't allow queryResult caching because the
comment|// cache keys don't know anything about the collector used.
comment|//
comment|// in theory, we could enhance the cache keys to be aware of the searchAfter
comment|// FieldDoc but then there would still be complexity around things like the cache
comment|// window size that would need to be worked out
comment|//
comment|// we *can* however allow the use of checking the filterCache for non-score based
comment|// sorts, because that still runs our paging collector over the entire DocSet
name|this
operator|.
name|flags
operator||=
operator|(
name|SolrIndexSearcher
operator|.
name|NO_CHECK_QCACHE
operator||
name|SolrIndexSearcher
operator|.
name|NO_SET_QCACHE
operator|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|getQuery
specifier|public
name|Query
name|getQuery
parameter_list|()
block|{
return|return
name|query
return|;
block|}
DECL|method|setQuery
specifier|public
name|QueryCommand
name|setQuery
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getFilterList
specifier|public
name|List
argument_list|<
name|Query
argument_list|>
name|getFilterList
parameter_list|()
block|{
return|return
name|filterList
return|;
block|}
comment|/**    * @throws IllegalArgumentException    *           if filter is not null.    */
DECL|method|setFilterList
specifier|public
name|QueryCommand
name|setFilterList
parameter_list|(
name|List
argument_list|<
name|Query
argument_list|>
name|filterList
parameter_list|)
block|{
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Either filter or filterList may be set in the QueryCommand, but not both."
argument_list|)
throw|;
block|}
name|this
operator|.
name|filterList
operator|=
name|filterList
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * A simple setter to build a filterList from a query    *     * @throws IllegalArgumentException    *           if filter is not null.    */
DECL|method|setFilterList
specifier|public
name|QueryCommand
name|setFilterList
parameter_list|(
name|Query
name|f
parameter_list|)
block|{
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Either filter or filterList may be set in the QueryCommand, but not both."
argument_list|)
throw|;
block|}
name|filterList
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
name|filterList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|filterList
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|getFilter
specifier|public
name|DocSet
name|getFilter
parameter_list|()
block|{
return|return
name|filter
return|;
block|}
comment|/**    * @throws IllegalArgumentException    *           if filterList is not null.    */
DECL|method|setFilter
specifier|public
name|QueryCommand
name|setFilter
parameter_list|(
name|DocSet
name|filter
parameter_list|)
block|{
if|if
condition|(
name|filterList
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Either filter or filterList may be set in the QueryCommand, but not both."
argument_list|)
throw|;
block|}
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getSort
specifier|public
name|Sort
name|getSort
parameter_list|()
block|{
return|return
name|sort
return|;
block|}
DECL|method|setSort
specifier|public
name|QueryCommand
name|setSort
parameter_list|(
name|Sort
name|sort
parameter_list|)
block|{
name|this
operator|.
name|sort
operator|=
name|sort
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getOffset
specifier|public
name|int
name|getOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
DECL|method|setOffset
specifier|public
name|QueryCommand
name|setOffset
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getLen
specifier|public
name|int
name|getLen
parameter_list|()
block|{
return|return
name|len
return|;
block|}
DECL|method|setLen
specifier|public
name|QueryCommand
name|setLen
parameter_list|(
name|int
name|len
parameter_list|)
block|{
name|this
operator|.
name|len
operator|=
name|len
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getSupersetMaxDoc
specifier|public
name|int
name|getSupersetMaxDoc
parameter_list|()
block|{
return|return
name|supersetMaxDoc
return|;
block|}
DECL|method|setSupersetMaxDoc
specifier|public
name|QueryCommand
name|setSupersetMaxDoc
parameter_list|(
name|int
name|supersetMaxDoc
parameter_list|)
block|{
name|this
operator|.
name|supersetMaxDoc
operator|=
name|supersetMaxDoc
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getFlags
specifier|public
name|int
name|getFlags
parameter_list|()
block|{
return|return
name|flags
return|;
block|}
DECL|method|replaceFlags
specifier|public
name|QueryCommand
name|replaceFlags
parameter_list|(
name|int
name|flags
parameter_list|)
block|{
name|this
operator|.
name|flags
operator|=
name|flags
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setFlags
specifier|public
name|QueryCommand
name|setFlags
parameter_list|(
name|int
name|flags
parameter_list|)
block|{
name|this
operator|.
name|flags
operator||=
name|flags
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|clearFlags
specifier|public
name|QueryCommand
name|clearFlags
parameter_list|(
name|int
name|flags
parameter_list|)
block|{
name|this
operator|.
name|flags
operator|&=
operator|~
name|flags
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getTimeAllowed
specifier|public
name|long
name|getTimeAllowed
parameter_list|()
block|{
return|return
name|timeAllowed
return|;
block|}
DECL|method|setTimeAllowed
specifier|public
name|QueryCommand
name|setTimeAllowed
parameter_list|(
name|long
name|timeAllowed
parameter_list|)
block|{
name|this
operator|.
name|timeAllowed
operator|=
name|timeAllowed
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|isNeedDocSet
specifier|public
name|boolean
name|isNeedDocSet
parameter_list|()
block|{
return|return
operator|(
name|flags
operator|&
name|SolrIndexSearcher
operator|.
name|GET_DOCSET
operator|)
operator|!=
literal|0
return|;
block|}
DECL|method|setNeedDocSet
specifier|public
name|QueryCommand
name|setNeedDocSet
parameter_list|(
name|boolean
name|needDocSet
parameter_list|)
block|{
if|if
condition|(
name|needDocSet
condition|)
block|{
return|return
name|setFlags
argument_list|(
name|SolrIndexSearcher
operator|.
name|GET_DOCSET
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|clearFlags
argument_list|(
name|SolrIndexSearcher
operator|.
name|GET_DOCSET
argument_list|)
return|;
block|}
block|}
DECL|method|getTerminateEarly
specifier|public
name|boolean
name|getTerminateEarly
parameter_list|()
block|{
return|return
operator|(
name|flags
operator|&
name|SolrIndexSearcher
operator|.
name|TERMINATE_EARLY
operator|)
operator|!=
literal|0
return|;
block|}
DECL|method|setTerminateEarly
specifier|public
name|QueryCommand
name|setTerminateEarly
parameter_list|(
name|boolean
name|segmentTerminateEarly
parameter_list|)
block|{
if|if
condition|(
name|segmentTerminateEarly
condition|)
block|{
return|return
name|setFlags
argument_list|(
name|SolrIndexSearcher
operator|.
name|TERMINATE_EARLY
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|clearFlags
argument_list|(
name|SolrIndexSearcher
operator|.
name|TERMINATE_EARLY
argument_list|)
return|;
block|}
block|}
DECL|method|getSegmentTerminateEarly
specifier|public
name|boolean
name|getSegmentTerminateEarly
parameter_list|()
block|{
return|return
operator|(
name|flags
operator|&
name|SolrIndexSearcher
operator|.
name|SEGMENT_TERMINATE_EARLY
operator|)
operator|!=
literal|0
return|;
block|}
DECL|method|setSegmentTerminateEarly
specifier|public
name|QueryCommand
name|setSegmentTerminateEarly
parameter_list|(
name|boolean
name|segmentSegmentTerminateEarly
parameter_list|)
block|{
if|if
condition|(
name|segmentSegmentTerminateEarly
condition|)
block|{
return|return
name|setFlags
argument_list|(
name|SolrIndexSearcher
operator|.
name|SEGMENT_TERMINATE_EARLY
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|clearFlags
argument_list|(
name|SolrIndexSearcher
operator|.
name|SEGMENT_TERMINATE_EARLY
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
