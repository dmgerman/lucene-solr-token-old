begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|FunctionValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSourceScorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|function
operator|.
name|ValueSourceRangeFilter
import|;
end_import
begin_comment
comment|// This class works as either a normal constant score query, or as a PostFilter using a collector
end_comment
begin_class
DECL|class|FunctionRangeQuery
specifier|public
class|class
name|FunctionRangeQuery
extends|extends
name|SolrConstantScoreQuery
implements|implements
name|PostFilter
block|{
DECL|field|rangeFilt
specifier|final
name|ValueSourceRangeFilter
name|rangeFilt
decl_stmt|;
DECL|method|FunctionRangeQuery
specifier|public
name|FunctionRangeQuery
parameter_list|(
name|ValueSourceRangeFilter
name|filter
parameter_list|)
block|{
name|super
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|this
operator|.
name|rangeFilt
operator|=
name|filter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFilterCollector
specifier|public
name|DelegatingCollector
name|getFilterCollector
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|)
block|{
name|Map
name|fcontext
init|=
name|ValueSource
operator|.
name|newContext
argument_list|(
name|searcher
argument_list|)
decl_stmt|;
return|return
operator|new
name|FunctionRangeCollector
argument_list|(
name|fcontext
argument_list|)
return|;
block|}
DECL|class|FunctionRangeCollector
class|class
name|FunctionRangeCollector
extends|extends
name|DelegatingCollector
block|{
DECL|field|fcontext
specifier|final
name|Map
name|fcontext
decl_stmt|;
DECL|field|scorer
name|ValueSourceScorer
name|scorer
decl_stmt|;
DECL|field|maxdoc
name|int
name|maxdoc
decl_stmt|;
DECL|method|FunctionRangeCollector
specifier|public
name|FunctionRangeCollector
parameter_list|(
name|Map
name|fcontext
parameter_list|)
block|{
name|this
operator|.
name|fcontext
operator|=
name|fcontext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|doc
operator|<
name|maxdoc
assert|;
if|if
condition|(
name|scorer
operator|.
name|matches
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|leafDelegate
operator|.
name|collect
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doSetNextReader
specifier|protected
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|doSetNextReader
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|maxdoc
operator|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
name|FunctionValues
name|dv
init|=
name|rangeFilt
operator|.
name|getValueSource
argument_list|()
operator|.
name|getValues
argument_list|(
name|fcontext
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|scorer
operator|=
name|dv
operator|.
name|getRangeScorer
argument_list|(
name|context
argument_list|,
name|rangeFilt
operator|.
name|getLowerVal
argument_list|()
argument_list|,
name|rangeFilt
operator|.
name|getUpperVal
argument_list|()
argument_list|,
name|rangeFilt
operator|.
name|isIncludeLower
argument_list|()
argument_list|,
name|rangeFilt
operator|.
name|isIncludeUpper
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
