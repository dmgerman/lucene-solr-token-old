begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search.facet
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|facet
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ShardParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ResponseBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|SearchComponent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|QueryContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SyntaxError
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RTimer
import|;
end_import
begin_class
DECL|class|FacetModule
specifier|public
class|class
name|FacetModule
extends|extends
name|SearchComponent
block|{
DECL|field|COMPONENT_NAME
specifier|public
specifier|static
specifier|final
name|String
name|COMPONENT_NAME
init|=
literal|"facet_module"
decl_stmt|;
comment|// Ensure these don't overlap with other PURPOSE flags in ShardRequest
comment|// The largest current flag in ShardRequest is 0x00002000
comment|// We'll put our bits in the middle to avoid future ones in ShardRequest and
comment|// custom ones that may start at the top.
DECL|field|PURPOSE_GET_JSON_FACETS
specifier|public
specifier|final
specifier|static
name|int
name|PURPOSE_GET_JSON_FACETS
init|=
literal|0x00100000
decl_stmt|;
DECL|field|PURPOSE_REFINE_JSON_FACETS
specifier|public
specifier|final
specifier|static
name|int
name|PURPOSE_REFINE_JSON_FACETS
init|=
literal|0x00200000
decl_stmt|;
comment|// Internal information passed down from the top level to shards for distributed faceting.
DECL|field|FACET_STATE
specifier|private
specifier|final
specifier|static
name|String
name|FACET_STATE
init|=
literal|"_facet_"
decl_stmt|;
DECL|method|getFacetComponentState
specifier|public
name|FacetComponentState
name|getFacetComponentState
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
comment|// TODO: put a map on ResponseBuilder?
comment|// rb.componentInfo.get(FacetComponentState.class);
return|return
operator|(
name|FacetComponentState
operator|)
name|rb
operator|.
name|req
operator|.
name|getContext
argument_list|()
operator|.
name|get
argument_list|(
name|FacetComponentState
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|process
specifier|public
name|void
name|process
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
comment|// if this is null, faceting is not enabled
name|FacetComponentState
name|facetState
init|=
name|getFacetComponentState
argument_list|(
name|rb
argument_list|)
decl_stmt|;
if|if
condition|(
name|facetState
operator|==
literal|null
condition|)
return|return;
name|boolean
name|isShard
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
name|ShardParams
operator|.
name|IS_SHARD
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|FacetContext
name|fcontext
init|=
operator|new
name|FacetContext
argument_list|()
decl_stmt|;
name|fcontext
operator|.
name|base
operator|=
name|rb
operator|.
name|getResults
argument_list|()
operator|.
name|docSet
expr_stmt|;
name|fcontext
operator|.
name|req
operator|=
name|rb
operator|.
name|req
expr_stmt|;
name|fcontext
operator|.
name|searcher
operator|=
name|rb
operator|.
name|req
operator|.
name|getSearcher
argument_list|()
expr_stmt|;
name|fcontext
operator|.
name|qcontext
operator|=
name|QueryContext
operator|.
name|newContext
argument_list|(
name|fcontext
operator|.
name|searcher
argument_list|)
expr_stmt|;
if|if
condition|(
name|isShard
condition|)
block|{
name|fcontext
operator|.
name|flags
operator||=
name|FacetContext
operator|.
name|IS_SHARD
expr_stmt|;
block|}
name|FacetProcessor
name|fproc
init|=
name|facetState
operator|.
name|facetRequest
operator|.
name|createFacetProcessor
argument_list|(
name|fcontext
argument_list|)
decl_stmt|;
if|if
condition|(
name|rb
operator|.
name|isDebug
argument_list|()
condition|)
block|{
name|FacetDebugInfo
name|fdebug
init|=
operator|new
name|FacetDebugInfo
argument_list|()
decl_stmt|;
name|fcontext
operator|.
name|setDebugInfo
argument_list|(
name|fdebug
argument_list|)
expr_stmt|;
name|fdebug
operator|.
name|setReqDescription
argument_list|(
name|facetState
operator|.
name|facetRequest
operator|.
name|getFacetDescription
argument_list|()
argument_list|)
expr_stmt|;
name|fdebug
operator|.
name|setProcessor
argument_list|(
name|fproc
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|RTimer
name|timer
init|=
operator|new
name|RTimer
argument_list|()
decl_stmt|;
name|fproc
operator|.
name|process
argument_list|()
expr_stmt|;
name|long
name|timeElapsed
init|=
operator|(
name|long
operator|)
name|timer
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|fdebug
operator|.
name|setElapse
argument_list|(
name|timeElapsed
argument_list|)
expr_stmt|;
name|fdebug
operator|.
name|putInfoItem
argument_list|(
literal|"domainSize"
argument_list|,
operator|(
name|long
operator|)
name|fcontext
operator|.
name|base
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rb
operator|.
name|req
operator|.
name|getContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"FacetDebugInfo"
argument_list|,
name|fdebug
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fproc
operator|.
name|process
argument_list|()
expr_stmt|;
block|}
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"facets"
argument_list|,
name|fproc
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prepare
specifier|public
name|void
name|prepare
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
init|=
name|rb
operator|.
name|req
operator|.
name|getJSON
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jsonFacet
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
name|int
name|version
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"facet.version"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|<=
literal|1
condition|)
return|return;
name|boolean
name|facetsEnabled
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
name|FacetParams
operator|.
name|FACET
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|facetsEnabled
condition|)
return|return;
name|jsonFacet
operator|=
operator|new
name|LegacyFacet
argument_list|(
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
argument_list|)
operator|.
name|getLegacy
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jsonFacet
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|json
operator|.
name|get
argument_list|(
literal|"facet"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jsonFacet
operator|==
literal|null
condition|)
return|return;
name|SolrParams
name|params
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|boolean
name|isShard
init|=
name|params
operator|.
name|getBool
argument_list|(
name|ShardParams
operator|.
name|IS_SHARD
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|isShard
condition|)
block|{
name|String
name|jfacet
init|=
name|params
operator|.
name|get
argument_list|(
name|FACET_STATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|jfacet
operator|==
literal|null
condition|)
block|{
comment|// if this is a shard request, but there is no facet state, then don't do anything.
return|return;
block|}
block|}
comment|// At this point, we know we need to do something.  Create and save the state.
name|rb
operator|.
name|setNeedDocSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Parse the facet in the prepare phase?
name|FacetParser
name|parser
init|=
operator|new
name|FacetTopParser
argument_list|(
name|rb
operator|.
name|req
argument_list|)
decl_stmt|;
name|FacetRequest
name|facetRequest
init|=
literal|null
decl_stmt|;
try|try
block|{
name|facetRequest
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|jsonFacet
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SyntaxError
name|syntaxError
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|syntaxError
argument_list|)
throw|;
block|}
name|FacetComponentState
name|fcState
init|=
operator|new
name|FacetComponentState
argument_list|()
decl_stmt|;
name|fcState
operator|.
name|rb
operator|=
name|rb
expr_stmt|;
name|fcState
operator|.
name|isShard
operator|=
name|isShard
expr_stmt|;
name|fcState
operator|.
name|facetCommands
operator|=
name|jsonFacet
expr_stmt|;
name|fcState
operator|.
name|facetRequest
operator|=
name|facetRequest
expr_stmt|;
name|rb
operator|.
name|req
operator|.
name|getContext
argument_list|()
operator|.
name|put
argument_list|(
name|FacetComponentState
operator|.
name|class
argument_list|,
name|fcState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|distributedProcess
specifier|public
name|int
name|distributedProcess
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
name|FacetComponentState
name|facetState
init|=
name|getFacetComponentState
argument_list|(
name|rb
argument_list|)
decl_stmt|;
if|if
condition|(
name|facetState
operator|==
literal|null
condition|)
return|return
name|ResponseBuilder
operator|.
name|STAGE_DONE
return|;
return|return
name|ResponseBuilder
operator|.
name|STAGE_DONE
return|;
block|}
annotation|@
name|Override
DECL|method|modifyRequest
specifier|public
name|void
name|modifyRequest
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|SearchComponent
name|who
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|)
block|{
name|FacetComponentState
name|facetState
init|=
name|getFacetComponentState
argument_list|(
name|rb
argument_list|)
decl_stmt|;
if|if
condition|(
name|facetState
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
operator|(
name|sreq
operator|.
name|purpose
operator|&
name|ShardRequest
operator|.
name|PURPOSE_GET_TOP_IDS
operator|)
operator|!=
literal|0
condition|)
block|{
name|sreq
operator|.
name|purpose
operator||=
name|FacetModule
operator|.
name|PURPOSE_GET_JSON_FACETS
expr_stmt|;
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|FACET_STATE
argument_list|,
literal|"{}"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// turn off faceting on other requests
name|sreq
operator|.
name|params
operator|.
name|remove
argument_list|(
literal|"json.facet"
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|params
operator|.
name|remove
argument_list|(
name|FACET_STATE
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|handleResponses
specifier|public
name|void
name|handleResponses
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|)
block|{
name|FacetComponentState
name|facetState
init|=
name|getFacetComponentState
argument_list|(
name|rb
argument_list|)
decl_stmt|;
if|if
condition|(
name|facetState
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|ShardResponse
name|shardRsp
range|:
name|sreq
operator|.
name|responses
control|)
block|{
name|SolrResponse
name|rsp
init|=
name|shardRsp
operator|.
name|getSolrResponse
argument_list|()
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|top
init|=
name|rsp
operator|.
name|getResponse
argument_list|()
decl_stmt|;
if|if
condition|(
name|top
operator|==
literal|null
condition|)
continue|continue;
comment|// shards.tolerant=true will cause this to happen on exceptions/errors
name|Object
name|facet
init|=
name|top
operator|.
name|get
argument_list|(
literal|"facets"
argument_list|)
decl_stmt|;
if|if
condition|(
name|facet
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|facetState
operator|.
name|merger
operator|==
literal|null
condition|)
block|{
name|facetState
operator|.
name|merger
operator|=
name|facetState
operator|.
name|facetRequest
operator|.
name|createFacetMerger
argument_list|(
name|facet
argument_list|)
expr_stmt|;
block|}
name|facetState
operator|.
name|merger
operator|.
name|merge
argument_list|(
name|facet
argument_list|,
operator|new
name|FacetMerger
operator|.
name|Context
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|finishStage
specifier|public
name|void
name|finishStage
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
if|if
condition|(
name|rb
operator|.
name|stage
operator|!=
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
condition|)
return|return;
name|FacetComponentState
name|facetState
init|=
name|getFacetComponentState
argument_list|(
name|rb
argument_list|)
decl_stmt|;
if|if
condition|(
name|facetState
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|facetState
operator|.
name|merger
operator|!=
literal|null
condition|)
block|{
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"facets"
argument_list|,
name|facetState
operator|.
name|merger
operator|.
name|getMergedResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Facet Module"
return|;
block|}
annotation|@
name|Override
DECL|method|getSource
specifier|public
name|String
name|getSource
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
end_class
begin_class
DECL|class|FacetComponentState
class|class
name|FacetComponentState
block|{
DECL|field|rb
name|ResponseBuilder
name|rb
decl_stmt|;
DECL|field|facetCommands
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|facetCommands
decl_stmt|;
DECL|field|facetRequest
name|FacetRequest
name|facetRequest
decl_stmt|;
DECL|field|isShard
name|boolean
name|isShard
decl_stmt|;
comment|//
comment|// Only used for distributed search
comment|//
DECL|field|merger
name|FacetMerger
name|merger
decl_stmt|;
block|}
end_class
begin_class
DECL|class|FacetSortableMerger
specifier|abstract
class|class
name|FacetSortableMerger
extends|extends
name|FacetMerger
block|{
DECL|method|prepareSort
specifier|public
name|void
name|prepareSort
parameter_list|()
block|{   }
comment|/** Return the normal comparison sort order.  The sort direction is only to be used in special circumstances (such as making NaN sort    * last regardless of sort order.)  Normal sorters do not need to pay attention to direction.    */
DECL|method|compareTo
specifier|public
specifier|abstract
name|int
name|compareTo
parameter_list|(
name|FacetSortableMerger
name|other
parameter_list|,
name|FacetField
operator|.
name|SortDirection
name|direction
parameter_list|)
function_decl|;
block|}
end_class
begin_class
DECL|class|FacetDoubleMerger
specifier|abstract
class|class
name|FacetDoubleMerger
extends|extends
name|FacetSortableMerger
block|{
annotation|@
name|Override
DECL|method|merge
specifier|public
specifier|abstract
name|void
name|merge
parameter_list|(
name|Object
name|facetResult
parameter_list|,
name|Context
name|mcontext
parameter_list|)
function_decl|;
DECL|method|getDouble
specifier|protected
specifier|abstract
name|double
name|getDouble
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|getMergedResult
specifier|public
name|Object
name|getMergedResult
parameter_list|()
block|{
return|return
name|getDouble
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|FacetSortableMerger
name|other
parameter_list|,
name|FacetField
operator|.
name|SortDirection
name|direction
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|getDouble
argument_list|()
argument_list|,
operator|(
operator|(
name|FacetDoubleMerger
operator|)
name|other
operator|)
operator|.
name|getDouble
argument_list|()
argument_list|,
name|direction
argument_list|)
return|;
block|}
DECL|method|compare
specifier|public
specifier|static
name|int
name|compare
parameter_list|(
name|double
name|a
parameter_list|,
name|double
name|b
parameter_list|,
name|FacetField
operator|.
name|SortDirection
name|direction
parameter_list|)
block|{
if|if
condition|(
name|a
operator|<
name|b
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|a
operator|>
name|b
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|a
operator|!=
name|a
condition|)
block|{
comment|// a==NaN
if|if
condition|(
name|b
operator|!=
name|b
condition|)
block|{
return|return
literal|0
return|;
comment|// both NaN
block|}
return|return
operator|-
literal|1
operator|*
name|direction
operator|.
name|getMultiplier
argument_list|()
return|;
comment|// asc==-1, so this will put NaN at end of sort
block|}
if|if
condition|(
name|b
operator|!=
name|b
condition|)
block|{
comment|// b is NaN so a is greater
return|return
literal|1
operator|*
name|direction
operator|.
name|getMultiplier
argument_list|()
return|;
comment|// if sorting asc, make a less so NaN is at end
block|}
comment|// consider +-0 to be equal
return|return
literal|0
return|;
block|}
block|}
end_class
begin_class
DECL|class|FacetLongMerger
class|class
name|FacetLongMerger
extends|extends
name|FacetSortableMerger
block|{
DECL|field|val
name|long
name|val
decl_stmt|;
annotation|@
name|Override
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|Object
name|facetResult
parameter_list|,
name|Context
name|mcontext
parameter_list|)
block|{
name|val
operator|+=
operator|(
operator|(
name|Number
operator|)
name|facetResult
operator|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMergedResult
specifier|public
name|Object
name|getMergedResult
parameter_list|()
block|{
return|return
name|val
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|FacetSortableMerger
name|other
parameter_list|,
name|FacetField
operator|.
name|SortDirection
name|direction
parameter_list|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|val
argument_list|,
operator|(
operator|(
name|FacetLongMerger
operator|)
name|other
operator|)
operator|.
name|val
argument_list|)
return|;
block|}
block|}
end_class
begin_comment
comment|// base class for facets that create buckets (and can hence have sub-facets)
end_comment
begin_class
DECL|class|FacetBucketMerger
specifier|abstract
class|class
name|FacetBucketMerger
parameter_list|<
name|FacetRequestT
extends|extends
name|FacetRequest
parameter_list|>
extends|extends
name|FacetMerger
block|{
DECL|field|freq
name|FacetRequestT
name|freq
decl_stmt|;
DECL|field|bucketNumber
name|int
name|bucketNumber
decl_stmt|;
DECL|method|FacetBucketMerger
specifier|public
name|FacetBucketMerger
parameter_list|(
name|FacetRequestT
name|freq
parameter_list|)
block|{
name|this
operator|.
name|freq
operator|=
name|freq
expr_stmt|;
block|}
comment|/** Bucketval is the representative value for the bucket.  Only applicable to terms and range queries to distinguish buckets. */
DECL|method|newBucket
name|FacetBucket
name|newBucket
parameter_list|(
name|Comparable
name|bucketVal
parameter_list|)
block|{
return|return
operator|new
name|FacetBucket
argument_list|(
name|this
argument_list|,
name|bucketVal
argument_list|,
name|bucketNumber
operator|++
argument_list|)
return|;
block|}
comment|// do subs...
comment|// callback stuff for buckets?
comment|// passing object gives us a chance to specialize based on value
DECL|method|createFacetMerger
name|FacetMerger
name|createFacetMerger
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|val
parameter_list|)
block|{
name|FacetRequest
name|sub
init|=
name|freq
operator|.
name|getSubFacets
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|!=
literal|null
condition|)
block|{
return|return
name|sub
operator|.
name|createFacetMerger
argument_list|(
name|val
argument_list|)
return|;
block|}
name|AggValueSource
name|subStat
init|=
name|freq
operator|.
name|getFacetStats
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|subStat
operator|!=
literal|null
condition|)
block|{
return|return
name|subStat
operator|.
name|createFacetMerger
argument_list|(
name|val
argument_list|)
return|;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"no merger for key="
operator|+
name|key
operator|+
literal|" , val="
operator|+
name|val
argument_list|)
throw|;
block|}
block|}
end_class
begin_class
DECL|class|FacetQueryMerger
class|class
name|FacetQueryMerger
extends|extends
name|FacetBucketMerger
argument_list|<
name|FacetQuery
argument_list|>
block|{
DECL|field|bucket
name|FacetBucket
name|bucket
decl_stmt|;
DECL|method|FacetQueryMerger
specifier|public
name|FacetQueryMerger
parameter_list|(
name|FacetQuery
name|freq
parameter_list|)
block|{
name|super
argument_list|(
name|freq
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|Object
name|facet
parameter_list|,
name|Context
name|mcontext
parameter_list|)
block|{
if|if
condition|(
name|bucket
operator|==
literal|null
condition|)
block|{
name|bucket
operator|=
name|newBucket
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|bucket
operator|.
name|mergeBucket
argument_list|(
operator|(
name|SimpleOrderedMap
operator|)
name|facet
argument_list|,
name|mcontext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMergedResult
specifier|public
name|Object
name|getMergedResult
parameter_list|()
block|{
return|return
name|bucket
operator|.
name|getMergedBucket
argument_list|()
return|;
block|}
block|}
end_class
begin_class
DECL|class|FacetBucket
class|class
name|FacetBucket
block|{
DECL|field|parent
specifier|final
name|FacetBucketMerger
name|parent
decl_stmt|;
DECL|field|bucketValue
specifier|final
name|Comparable
name|bucketValue
decl_stmt|;
DECL|field|bucketNumber
specifier|final
name|int
name|bucketNumber
decl_stmt|;
comment|// this is just for internal correlation (the first bucket created is bucket 0, the next bucket 1, etc)
DECL|field|count
name|long
name|count
decl_stmt|;
DECL|field|subs
name|Map
argument_list|<
name|String
argument_list|,
name|FacetMerger
argument_list|>
name|subs
decl_stmt|;
DECL|method|FacetBucket
specifier|public
name|FacetBucket
parameter_list|(
name|FacetBucketMerger
name|parent
parameter_list|,
name|Comparable
name|bucketValue
parameter_list|,
name|int
name|bucketNumber
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|bucketValue
operator|=
name|bucketValue
expr_stmt|;
name|this
operator|.
name|bucketNumber
operator|=
name|bucketNumber
expr_stmt|;
block|}
DECL|method|getCount
specifier|public
name|long
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
comment|/** returns the existing merger for the given key, or null if none yet exists */
DECL|method|getExistingMerger
name|FacetMerger
name|getExistingMerger
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|subs
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|subs
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|getMerger
specifier|private
name|FacetMerger
name|getMerger
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|prototype
parameter_list|)
block|{
name|FacetMerger
name|merger
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|subs
operator|!=
literal|null
condition|)
block|{
name|merger
operator|=
name|subs
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|merger
operator|!=
literal|null
condition|)
return|return
name|merger
return|;
block|}
name|merger
operator|=
name|parent
operator|.
name|createFacetMerger
argument_list|(
name|key
argument_list|,
name|prototype
argument_list|)
expr_stmt|;
if|if
condition|(
name|merger
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|subs
operator|==
literal|null
condition|)
block|{
name|subs
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|subs
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|merger
argument_list|)
expr_stmt|;
block|}
return|return
name|merger
return|;
block|}
DECL|method|mergeBucket
specifier|public
name|void
name|mergeBucket
parameter_list|(
name|SimpleOrderedMap
name|bucket
parameter_list|,
name|FacetMerger
operator|.
name|Context
name|mcontext
parameter_list|)
block|{
comment|// todo: for refinements, we want to recurse, but not re-do stats for intermediate buckets
comment|// drive merging off the received bucket?
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bucket
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|bucket
operator|.
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
name|val
init|=
name|bucket
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"count"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|count
operator|+=
operator|(
operator|(
name|Number
operator|)
name|val
operator|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
literal|"val"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|// this is taken care of at a higher level...
continue|continue;
block|}
name|FacetMerger
name|merger
init|=
name|getMerger
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
name|merger
operator|!=
literal|null
condition|)
block|{
name|merger
operator|.
name|merge
argument_list|(
name|val
argument_list|,
name|mcontext
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getMergedBucket
specifier|public
name|SimpleOrderedMap
name|getMergedBucket
parameter_list|()
block|{
name|SimpleOrderedMap
name|out
init|=
operator|new
name|SimpleOrderedMap
argument_list|(
operator|(
name|subs
operator|==
literal|null
condition|?
literal|0
else|:
name|subs
operator|.
name|size
argument_list|()
operator|)
operator|+
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|bucketValue
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|add
argument_list|(
literal|"val"
argument_list|,
name|bucketValue
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|add
argument_list|(
literal|"count"
argument_list|,
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|subs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FacetMerger
argument_list|>
name|mergerEntry
range|:
name|subs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|FacetMerger
name|subMerger
init|=
name|mergerEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|out
operator|.
name|add
argument_list|(
name|mergerEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|subMerger
operator|.
name|getMergedResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|out
return|;
block|}
block|}
end_class
begin_class
DECL|class|FacetFieldMerger
class|class
name|FacetFieldMerger
extends|extends
name|FacetBucketMerger
argument_list|<
name|FacetField
argument_list|>
block|{
DECL|field|missingBucket
name|FacetBucket
name|missingBucket
decl_stmt|;
DECL|field|allBuckets
name|FacetBucket
name|allBuckets
decl_stmt|;
DECL|field|numBuckets
name|FacetMerger
name|numBuckets
decl_stmt|;
DECL|field|buckets
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|FacetBucket
argument_list|>
name|buckets
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|sortedBuckets
name|List
argument_list|<
name|FacetBucket
argument_list|>
name|sortedBuckets
decl_stmt|;
DECL|field|numReturnedBuckets
name|int
name|numReturnedBuckets
decl_stmt|;
comment|// the number of buckets in the bucket lists returned from all of the shards
DECL|class|SortVal
specifier|private
specifier|static
class|class
name|SortVal
implements|implements
name|Comparable
argument_list|<
name|SortVal
argument_list|>
block|{
DECL|field|bucket
name|FacetBucket
name|bucket
decl_stmt|;
DECL|field|merger
name|FacetSortableMerger
name|merger
decl_stmt|;
comment|// make this class inner and access merger , direction in parent?
DECL|field|direction
name|FacetField
operator|.
name|SortDirection
name|direction
decl_stmt|;
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|SortVal
name|o
parameter_list|)
block|{
name|int
name|c
init|=
operator|-
name|merger
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|merger
argument_list|,
name|direction
argument_list|)
operator|*
name|direction
operator|.
name|getMultiplier
argument_list|()
decl_stmt|;
return|return
name|c
operator|==
literal|0
condition|?
name|bucket
operator|.
name|bucketValue
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|bucket
operator|.
name|bucketValue
argument_list|)
else|:
name|c
return|;
block|}
block|}
DECL|method|FacetFieldMerger
specifier|public
name|FacetFieldMerger
parameter_list|(
name|FacetField
name|freq
parameter_list|)
block|{
name|super
argument_list|(
name|freq
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|Object
name|facetResult
parameter_list|,
name|Context
name|mcontext
parameter_list|)
block|{
name|merge
argument_list|(
operator|(
name|SimpleOrderedMap
operator|)
name|facetResult
argument_list|,
name|mcontext
argument_list|)
expr_stmt|;
block|}
DECL|method|merge
specifier|protected
name|void
name|merge
parameter_list|(
name|SimpleOrderedMap
name|facetResult
parameter_list|,
name|Context
name|mcontext
parameter_list|)
block|{
if|if
condition|(
name|freq
operator|.
name|missing
condition|)
block|{
name|Object
name|o
init|=
name|facetResult
operator|.
name|get
argument_list|(
literal|"missing"
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|missingBucket
operator|==
literal|null
condition|)
block|{
name|missingBucket
operator|=
name|newBucket
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|missingBucket
operator|.
name|mergeBucket
argument_list|(
operator|(
name|SimpleOrderedMap
operator|)
name|o
argument_list|,
name|mcontext
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|freq
operator|.
name|allBuckets
condition|)
block|{
name|Object
name|o
init|=
name|facetResult
operator|.
name|get
argument_list|(
literal|"allBuckets"
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|allBuckets
operator|==
literal|null
condition|)
block|{
name|allBuckets
operator|=
name|newBucket
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|allBuckets
operator|.
name|mergeBucket
argument_list|(
operator|(
name|SimpleOrderedMap
operator|)
name|o
argument_list|,
name|mcontext
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|>
name|bucketList
init|=
operator|(
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|>
operator|)
name|facetResult
operator|.
name|get
argument_list|(
literal|"buckets"
argument_list|)
decl_stmt|;
name|numReturnedBuckets
operator|+=
name|bucketList
operator|.
name|size
argument_list|()
expr_stmt|;
name|mergeBucketList
argument_list|(
name|bucketList
argument_list|,
name|mcontext
argument_list|)
expr_stmt|;
if|if
condition|(
name|freq
operator|.
name|numBuckets
condition|)
block|{
name|Object
name|nb
init|=
name|facetResult
operator|.
name|get
argument_list|(
literal|"numBuckets"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nb
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|numBuckets
operator|==
literal|null
condition|)
block|{
name|numBuckets
operator|=
operator|new
name|FacetNumBucketsMerger
argument_list|()
expr_stmt|;
block|}
name|numBuckets
operator|.
name|merge
argument_list|(
name|nb
argument_list|,
name|mcontext
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|mergeBucketList
specifier|public
name|void
name|mergeBucketList
parameter_list|(
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|>
name|bucketList
parameter_list|,
name|Context
name|mcontext
parameter_list|)
block|{
for|for
control|(
name|SimpleOrderedMap
name|bucketRes
range|:
name|bucketList
control|)
block|{
name|Comparable
name|bucketVal
init|=
operator|(
name|Comparable
operator|)
name|bucketRes
operator|.
name|get
argument_list|(
literal|"val"
argument_list|)
decl_stmt|;
name|FacetBucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|bucketVal
argument_list|)
decl_stmt|;
if|if
condition|(
name|bucket
operator|==
literal|null
condition|)
block|{
name|bucket
operator|=
name|newBucket
argument_list|(
name|bucketVal
argument_list|)
expr_stmt|;
name|buckets
operator|.
name|put
argument_list|(
name|bucketVal
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
block|}
name|bucket
operator|.
name|mergeBucket
argument_list|(
name|bucketRes
argument_list|,
name|mcontext
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sortBuckets
specifier|public
name|void
name|sortBuckets
parameter_list|()
block|{
name|sortedBuckets
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|buckets
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|Comparator
argument_list|<
name|FacetBucket
argument_list|>
name|comparator
init|=
literal|null
decl_stmt|;
specifier|final
name|FacetField
operator|.
name|SortDirection
name|direction
init|=
name|freq
operator|.
name|sortDirection
decl_stmt|;
specifier|final
name|int
name|sortMul
init|=
name|direction
operator|.
name|getMultiplier
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"count"
operator|.
name|equals
argument_list|(
name|freq
operator|.
name|sortVariable
argument_list|)
condition|)
block|{
name|comparator
operator|=
parameter_list|(
name|o1
parameter_list|,
name|o2
parameter_list|)
lambda|->
block|{
name|int
name|v
init|=
operator|-
name|Long
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|count
argument_list|,
name|o2
operator|.
name|count
argument_list|)
operator|*
name|sortMul
decl_stmt|;
return|return
name|v
operator|==
literal|0
condition|?
name|o1
operator|.
name|bucketValue
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|bucketValue
argument_list|)
else|:
name|v
return|;
block|}
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedBuckets
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"index"
operator|.
name|equals
argument_list|(
name|freq
operator|.
name|sortVariable
argument_list|)
condition|)
block|{
name|comparator
operator|=
parameter_list|(
name|o1
parameter_list|,
name|o2
parameter_list|)
lambda|->
operator|-
name|o1
operator|.
name|bucketValue
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|bucketValue
argument_list|)
operator|*
name|sortMul
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedBuckets
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|String
name|key
init|=
name|freq
operator|.
name|sortVariable
decl_stmt|;
comment|/**       final FacetSortableMerger[] arr = new FacetSortableMerger[buckets.size()];       final int[] index = new int[arr.length];       int start = 0;       int nullStart = index.length;       int i=0;       for (FacetBucket bucket : buckets.values()) {         FacetMerger merger = bucket.getExistingMerger(key);         if (merger == null) {           index[--nullStart] = i;         }         if (merger != null) {           arr[start] = (FacetSortableMerger)merger;           index[start] = i;           start++;         }         i++;       }        PrimUtils.sort(0, nullStart, index, new PrimUtils.IntComparator() {         @Override         public int compare(int a, int b) {           return arr[index[a]].compareTo(arr[index[b]], direction);         }       });       **/
comment|// timsort may do better here given that the lists may be partially sorted.
name|List
argument_list|<
name|SortVal
argument_list|>
name|lst
init|=
operator|new
name|ArrayList
argument_list|<
name|SortVal
argument_list|>
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FacetBucket
argument_list|>
name|nulls
init|=
operator|new
name|ArrayList
argument_list|<
name|FacetBucket
argument_list|>
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
operator|>>
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortedBuckets
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FacetBucket
name|bucket
init|=
name|sortedBuckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|FacetMerger
name|merger
init|=
name|bucket
operator|.
name|getExistingMerger
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|merger
operator|==
literal|null
condition|)
block|{
name|nulls
operator|.
name|add
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|merger
operator|!=
literal|null
condition|)
block|{
name|SortVal
name|sv
init|=
operator|new
name|SortVal
argument_list|()
decl_stmt|;
name|sv
operator|.
name|bucket
operator|=
name|bucket
expr_stmt|;
name|sv
operator|.
name|merger
operator|=
operator|(
name|FacetSortableMerger
operator|)
name|merger
expr_stmt|;
name|sv
operator|.
name|direction
operator|=
name|direction
expr_stmt|;
comment|// sv.pos = i;  // if we need position in the future...
name|lst
operator|.
name|add
argument_list|(
name|sv
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|lst
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|nulls
argument_list|,
parameter_list|(
name|o1
parameter_list|,
name|o2
parameter_list|)
lambda|->
name|o1
operator|.
name|bucketValue
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|bucketValue
argument_list|)
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FacetBucket
argument_list|>
name|out
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SortVal
name|sv
range|:
name|lst
control|)
block|{
name|out
operator|.
name|add
argument_list|(
name|sv
operator|.
name|bucket
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|addAll
argument_list|(
name|nulls
argument_list|)
expr_stmt|;
name|sortedBuckets
operator|=
name|out
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getMergedResult
specifier|public
name|Object
name|getMergedResult
parameter_list|()
block|{
name|SimpleOrderedMap
name|result
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|numBuckets
operator|!=
literal|null
condition|)
block|{
name|int
name|removed
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|freq
operator|.
name|mincount
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|FacetBucket
name|bucket
range|:
name|buckets
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|bucket
operator|.
name|count
operator|<
name|freq
operator|.
name|mincount
condition|)
name|removed
operator|++
expr_stmt|;
block|}
block|}
name|result
operator|.
name|add
argument_list|(
literal|"numBuckets"
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|numBuckets
operator|.
name|getMergedResult
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
operator|-
name|removed
argument_list|)
expr_stmt|;
comment|// TODO: we can further increase this estimate.
comment|// If not sorting by count, use a simple ratio to scale
comment|// If sorting by count desc, then add up the highest_possible_missing_count from each shard
block|}
name|sortBuckets
argument_list|()
expr_stmt|;
name|int
name|first
init|=
operator|(
name|int
operator|)
name|freq
operator|.
name|offset
decl_stmt|;
name|int
name|end
init|=
name|freq
operator|.
name|limit
operator|>=
literal|0
condition|?
name|first
operator|+
operator|(
name|int
operator|)
name|freq
operator|.
name|limit
else|:
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|int
name|last
init|=
name|Math
operator|.
name|min
argument_list|(
name|sortedBuckets
operator|.
name|size
argument_list|()
argument_list|,
name|end
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|>
name|resultBuckets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
operator|(
name|last
operator|-
name|first
operator|)
argument_list|)
argument_list|)
decl_stmt|;
comment|/** this only works if there are no filters (like mincount)     for (int i=first; i<last; i++) {       FacetBucket bucket = sortedBuckets.get(i);       resultBuckets.add( bucket.getMergedBucket() );     }     ***/
comment|// TODO: change effective offsets + limits at shards...
name|int
name|off
init|=
operator|(
name|int
operator|)
name|freq
operator|.
name|offset
decl_stmt|;
name|int
name|lim
init|=
name|freq
operator|.
name|limit
operator|>=
literal|0
condition|?
operator|(
name|int
operator|)
name|freq
operator|.
name|limit
else|:
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|FacetBucket
name|bucket
range|:
name|sortedBuckets
control|)
block|{
if|if
condition|(
name|bucket
operator|.
name|getCount
argument_list|()
operator|<
name|freq
operator|.
name|mincount
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|off
operator|>
literal|0
condition|)
block|{
operator|--
name|off
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|resultBuckets
operator|.
name|size
argument_list|()
operator|>=
name|lim
condition|)
block|{
break|break;
block|}
name|resultBuckets
operator|.
name|add
argument_list|(
name|bucket
operator|.
name|getMergedBucket
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
literal|"buckets"
argument_list|,
name|resultBuckets
argument_list|)
expr_stmt|;
if|if
condition|(
name|missingBucket
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
literal|"missing"
argument_list|,
name|missingBucket
operator|.
name|getMergedBucket
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allBuckets
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
literal|"allBuckets"
argument_list|,
name|allBuckets
operator|.
name|getMergedBucket
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|class|FacetNumBucketsMerger
specifier|private
class|class
name|FacetNumBucketsMerger
extends|extends
name|FacetMerger
block|{
DECL|field|sumBuckets
name|long
name|sumBuckets
decl_stmt|;
DECL|field|shardsMissingSum
name|long
name|shardsMissingSum
decl_stmt|;
DECL|field|shardsTruncatedSum
name|long
name|shardsTruncatedSum
decl_stmt|;
DECL|field|values
name|Set
argument_list|<
name|Object
argument_list|>
name|values
decl_stmt|;
annotation|@
name|Override
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|Object
name|facetResult
parameter_list|,
name|Context
name|mcontext
parameter_list|)
block|{
name|SimpleOrderedMap
name|map
init|=
operator|(
name|SimpleOrderedMap
operator|)
name|facetResult
decl_stmt|;
name|long
name|numBuckets
init|=
operator|(
operator|(
name|Number
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"numBuckets"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|sumBuckets
operator|+=
name|numBuckets
expr_stmt|;
name|List
name|vals
init|=
operator|(
name|List
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"vals"
argument_list|)
decl_stmt|;
if|if
condition|(
name|vals
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|values
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|vals
operator|.
name|size
argument_list|()
operator|*
literal|4
argument_list|)
expr_stmt|;
block|}
name|values
operator|.
name|addAll
argument_list|(
name|vals
argument_list|)
expr_stmt|;
if|if
condition|(
name|numBuckets
operator|>
name|values
operator|.
name|size
argument_list|()
condition|)
block|{
name|shardsTruncatedSum
operator|+=
name|numBuckets
operator|-
name|values
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|shardsMissingSum
operator|+=
name|numBuckets
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getMergedResult
specifier|public
name|Object
name|getMergedResult
parameter_list|()
block|{
name|long
name|exactCount
init|=
name|values
operator|==
literal|null
condition|?
literal|0
else|:
name|values
operator|.
name|size
argument_list|()
decl_stmt|;
return|return
name|exactCount
operator|+
name|shardsMissingSum
operator|+
name|shardsTruncatedSum
return|;
comment|// TODO: reduce count by (at least) number of buckets that fail to hit mincount (after merging)
comment|// that should make things match for most of the small tests at least
block|}
block|}
block|}
end_class
begin_class
DECL|class|FacetRangeMerger
class|class
name|FacetRangeMerger
extends|extends
name|FacetBucketMerger
argument_list|<
name|FacetRange
argument_list|>
block|{
DECL|field|beforeBucket
name|FacetBucket
name|beforeBucket
decl_stmt|;
DECL|field|afterBucket
name|FacetBucket
name|afterBucket
decl_stmt|;
DECL|field|betweenBucket
name|FacetBucket
name|betweenBucket
decl_stmt|;
DECL|field|buckets
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|FacetBucket
argument_list|>
name|buckets
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|FacetBucket
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|FacetRangeMerger
specifier|public
name|FacetRangeMerger
parameter_list|(
name|FacetRange
name|freq
parameter_list|)
block|{
name|super
argument_list|(
name|freq
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createFacetMerger
name|FacetMerger
name|createFacetMerger
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|val
parameter_list|)
block|{
return|return
name|super
operator|.
name|createFacetMerger
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|Object
name|facetResult
parameter_list|,
name|Context
name|mcontext
parameter_list|)
block|{
name|merge
argument_list|(
operator|(
name|SimpleOrderedMap
operator|)
name|facetResult
argument_list|,
name|mcontext
argument_list|)
expr_stmt|;
block|}
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|SimpleOrderedMap
name|facetResult
parameter_list|,
name|Context
name|mcontext
parameter_list|)
block|{
name|boolean
name|all
init|=
name|freq
operator|.
name|others
operator|.
name|contains
argument_list|(
name|FacetParams
operator|.
name|FacetRangeOther
operator|.
name|ALL
argument_list|)
decl_stmt|;
if|if
condition|(
name|all
operator|||
name|freq
operator|.
name|others
operator|.
name|contains
argument_list|(
name|FacetParams
operator|.
name|FacetRangeOther
operator|.
name|BEFORE
argument_list|)
condition|)
block|{
name|Object
name|o
init|=
name|facetResult
operator|.
name|get
argument_list|(
literal|"before"
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|beforeBucket
operator|==
literal|null
condition|)
block|{
name|beforeBucket
operator|=
name|newBucket
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|beforeBucket
operator|.
name|mergeBucket
argument_list|(
operator|(
name|SimpleOrderedMap
operator|)
name|o
argument_list|,
name|mcontext
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|all
operator|||
name|freq
operator|.
name|others
operator|.
name|contains
argument_list|(
name|FacetParams
operator|.
name|FacetRangeOther
operator|.
name|AFTER
argument_list|)
condition|)
block|{
name|Object
name|o
init|=
name|facetResult
operator|.
name|get
argument_list|(
literal|"after"
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|afterBucket
operator|==
literal|null
condition|)
block|{
name|afterBucket
operator|=
name|newBucket
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|afterBucket
operator|.
name|mergeBucket
argument_list|(
operator|(
name|SimpleOrderedMap
operator|)
name|o
argument_list|,
name|mcontext
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|all
operator|||
name|freq
operator|.
name|others
operator|.
name|contains
argument_list|(
name|FacetParams
operator|.
name|FacetRangeOther
operator|.
name|BETWEEN
argument_list|)
condition|)
block|{
name|Object
name|o
init|=
name|facetResult
operator|.
name|get
argument_list|(
literal|"between"
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|betweenBucket
operator|==
literal|null
condition|)
block|{
name|betweenBucket
operator|=
name|newBucket
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|betweenBucket
operator|.
name|mergeBucket
argument_list|(
operator|(
name|SimpleOrderedMap
operator|)
name|o
argument_list|,
name|mcontext
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|>
name|bucketList
init|=
operator|(
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|>
operator|)
name|facetResult
operator|.
name|get
argument_list|(
literal|"buckets"
argument_list|)
decl_stmt|;
name|mergeBucketList
argument_list|(
name|bucketList
argument_list|,
name|mcontext
argument_list|)
expr_stmt|;
block|}
comment|// TODO: share more merging with field faceting
DECL|method|mergeBucketList
specifier|public
name|void
name|mergeBucketList
parameter_list|(
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|>
name|bucketList
parameter_list|,
name|Context
name|mcontext
parameter_list|)
block|{
for|for
control|(
name|SimpleOrderedMap
name|bucketRes
range|:
name|bucketList
control|)
block|{
name|Comparable
name|bucketVal
init|=
operator|(
name|Comparable
operator|)
name|bucketRes
operator|.
name|get
argument_list|(
literal|"val"
argument_list|)
decl_stmt|;
name|FacetBucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|bucketVal
argument_list|)
decl_stmt|;
if|if
condition|(
name|bucket
operator|==
literal|null
condition|)
block|{
name|bucket
operator|=
name|newBucket
argument_list|(
name|bucketVal
argument_list|)
expr_stmt|;
name|buckets
operator|.
name|put
argument_list|(
name|bucketVal
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
block|}
name|bucket
operator|.
name|mergeBucket
argument_list|(
name|bucketRes
argument_list|,
name|mcontext
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getMergedResult
specifier|public
name|Object
name|getMergedResult
parameter_list|()
block|{
name|SimpleOrderedMap
name|result
init|=
operator|new
name|SimpleOrderedMap
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|>
name|resultBuckets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FacetBucket
name|bucket
range|:
name|buckets
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|bucket
operator|.
name|getCount
argument_list|()
operator|<
name|freq
operator|.
name|mincount
condition|)
block|{
continue|continue;
block|}
name|resultBuckets
operator|.
name|add
argument_list|(
name|bucket
operator|.
name|getMergedBucket
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
literal|"buckets"
argument_list|,
name|resultBuckets
argument_list|)
expr_stmt|;
if|if
condition|(
name|beforeBucket
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
literal|"before"
argument_list|,
name|beforeBucket
operator|.
name|getMergedBucket
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|afterBucket
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
literal|"after"
argument_list|,
name|afterBucket
operator|.
name|getMergedBucket
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|betweenBucket
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
literal|"between"
argument_list|,
name|betweenBucket
operator|.
name|getMergedBucket
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class
end_unit
