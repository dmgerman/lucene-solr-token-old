begin_unit
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|FunctionQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|valuesource
operator|.
name|QueryValueSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|SortSpecParsing
specifier|public
class|class
name|SortSpecParsing
block|{
DECL|field|DOCID
specifier|public
specifier|static
specifier|final
name|String
name|DOCID
init|=
literal|"_docid_"
decl_stmt|;
DECL|field|SCORE
specifier|public
specifier|static
specifier|final
name|String
name|SCORE
init|=
literal|"score"
decl_stmt|;
comment|/**    *<p>    * The form of the sort specification string currently parsed is:    *</p>    *<pre>    * SortSpec ::= SingleSort [, SingleSort]*    * SingleSort ::=&lt;fieldname|function&gt; SortDirection    * SortDirection ::= top | desc | bottom | asc    *</pre>    * Examples:    *<pre>    *   score desc               #normal sort by score (will return null)    *   weight bottom            #sort by weight ascending    *   weight desc              #sort by weight descending    *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties    *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker    *</pre>    * @return a SortSpec object populated with the appropriate Sort (which may be null if     *         default score sort is used) and SchemaFields (where applicable) using     *         hardcoded default count&amp; offset values.    */
DECL|method|parseSortSpec
specifier|public
specifier|static
name|SortSpec
name|parseSortSpec
parameter_list|(
name|String
name|sortSpec
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|)
block|{
if|if
condition|(
name|sortSpec
operator|==
literal|null
operator|||
name|sortSpec
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
name|newEmptySortSpec
argument_list|()
return|;
name|List
argument_list|<
name|SortField
argument_list|>
name|sorts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SchemaField
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
try|try
block|{
name|StrParser
name|sp
init|=
operator|new
name|StrParser
argument_list|(
name|sortSpec
argument_list|)
decl_stmt|;
while|while
condition|(
name|sp
operator|.
name|pos
operator|<
name|sp
operator|.
name|end
condition|)
block|{
name|sp
operator|.
name|eatws
argument_list|()
expr_stmt|;
specifier|final
name|int
name|start
init|=
name|sp
operator|.
name|pos
decl_stmt|;
comment|// short circuit test for a really simple field name
name|String
name|field
init|=
name|sp
operator|.
name|getId
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Exception
name|qParserException
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
operator|||
operator|!
name|Character
operator|.
name|isWhitespace
argument_list|(
name|sp
operator|.
name|peekChar
argument_list|()
argument_list|)
condition|)
block|{
comment|// let's try it as a function instead
name|field
operator|=
literal|null
expr_stmt|;
name|String
name|funcStr
init|=
name|sp
operator|.
name|val
operator|.
name|substring
argument_list|(
name|start
argument_list|)
decl_stmt|;
name|QParser
name|parser
init|=
name|QParser
operator|.
name|getParser
argument_list|(
name|funcStr
argument_list|,
name|FunctionQParserPlugin
operator|.
name|NAME
argument_list|,
name|req
argument_list|)
decl_stmt|;
name|Query
name|q
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|parser
operator|instanceof
name|FunctionQParser
condition|)
block|{
name|FunctionQParser
name|fparser
init|=
operator|(
name|FunctionQParser
operator|)
name|parser
decl_stmt|;
name|fparser
operator|.
name|setParseMultipleSources
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fparser
operator|.
name|setParseToEnd
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|q
operator|=
name|fparser
operator|.
name|getQuery
argument_list|()
expr_stmt|;
if|if
condition|(
name|fparser
operator|.
name|localParams
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fparser
operator|.
name|valFollowedParams
condition|)
block|{
comment|// need to find the end of the function query via the string parser
name|int
name|leftOver
init|=
name|fparser
operator|.
name|sp
operator|.
name|end
operator|-
name|fparser
operator|.
name|sp
operator|.
name|pos
decl_stmt|;
name|sp
operator|.
name|pos
operator|=
name|sp
operator|.
name|end
operator|-
name|leftOver
expr_stmt|;
comment|// reset our parser to the same amount of leftover
block|}
else|else
block|{
comment|// the value was via the "v" param in localParams, so we need to find
comment|// the end of the local params themselves to pick up where we left off
name|sp
operator|.
name|pos
operator|=
name|start
operator|+
name|fparser
operator|.
name|localParamsEnd
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// need to find the end of the function query via the string parser
name|int
name|leftOver
init|=
name|fparser
operator|.
name|sp
operator|.
name|end
operator|-
name|fparser
operator|.
name|sp
operator|.
name|pos
decl_stmt|;
name|sp
operator|.
name|pos
operator|=
name|sp
operator|.
name|end
operator|-
name|leftOver
expr_stmt|;
comment|// reset our parser to the same amount of leftover
block|}
block|}
else|else
block|{
comment|// A QParser that's not for function queries.
comment|// It must have been specified via local params.
name|q
operator|=
name|parser
operator|.
name|getQuery
argument_list|()
expr_stmt|;
assert|assert
name|parser
operator|.
name|getLocalParams
argument_list|()
operator|!=
literal|null
assert|;
name|sp
operator|.
name|pos
operator|=
name|start
operator|+
name|parser
operator|.
name|localParamsEnd
expr_stmt|;
block|}
name|Boolean
name|top
init|=
name|sp
operator|.
name|getSortDirection
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|top
condition|)
block|{
comment|// we have a Query and a valid direction
if|if
condition|(
name|q
operator|instanceof
name|FunctionQuery
condition|)
block|{
name|sorts
operator|.
name|add
argument_list|(
operator|(
operator|(
name|FunctionQuery
operator|)
name|q
operator|)
operator|.
name|getValueSource
argument_list|()
operator|.
name|getSortField
argument_list|(
name|top
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sorts
operator|.
name|add
argument_list|(
operator|(
operator|new
name|QueryValueSource
argument_list|(
name|q
argument_list|,
literal|0.0f
argument_list|)
operator|)
operator|.
name|getSortField
argument_list|(
name|top
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fields
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// hang onto this in case the string isn't a full field name either
name|qParserException
operator|=
name|e
expr_stmt|;
block|}
block|}
comment|// if we made it here, we either have a "simple" field name,
comment|// or there was a problem parsing the string as a complex func/quer
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
comment|// try again, simple rules for a field name with no whitespace
name|sp
operator|.
name|pos
operator|=
name|start
expr_stmt|;
name|field
operator|=
name|sp
operator|.
name|getSimpleString
argument_list|()
expr_stmt|;
block|}
name|Boolean
name|top
init|=
name|sp
operator|.
name|getSortDirection
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|top
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Can't determine a Sort Order (asc or desc) in sort spec "
operator|+
name|sp
argument_list|)
throw|;
block|}
if|if
condition|(
name|SCORE
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
if|if
condition|(
name|top
condition|)
block|{
name|sorts
operator|.
name|add
argument_list|(
name|SortField
operator|.
name|FIELD_SCORE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sorts
operator|.
name|add
argument_list|(
operator|new
name|SortField
argument_list|(
literal|null
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|SCORE
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fields
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|DOCID
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|sorts
operator|.
name|add
argument_list|(
operator|new
name|SortField
argument_list|(
literal|null
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|DOC
argument_list|,
name|top
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// try to find the field
name|SchemaField
name|sf
init|=
name|req
operator|.
name|getSchema
argument_list|()
operator|.
name|getFieldOrNull
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|sf
condition|)
block|{
if|if
condition|(
literal|null
operator|!=
name|qParserException
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"sort param could not be parsed as a query, and is not a "
operator|+
literal|"field that exists in the index: "
operator|+
name|field
argument_list|,
name|qParserException
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"sort param field can't be found: "
operator|+
name|field
argument_list|)
throw|;
block|}
name|sorts
operator|.
name|add
argument_list|(
name|sf
operator|.
name|getSortField
argument_list|(
name|top
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
name|sf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SyntaxError
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"error in sort: "
operator|+
name|sortSpec
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// normalize a sort on score desc to null
if|if
condition|(
name|sorts
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|sorts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|==
name|SortField
operator|.
name|FIELD_SCORE
condition|)
block|{
return|return
name|newEmptySortSpec
argument_list|()
return|;
block|}
name|Sort
name|s
init|=
operator|new
name|Sort
argument_list|(
name|sorts
operator|.
name|toArray
argument_list|(
operator|new
name|SortField
index|[
name|sorts
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|SortSpec
argument_list|(
name|s
argument_list|,
name|fields
argument_list|)
return|;
block|}
DECL|method|newEmptySortSpec
specifier|private
specifier|static
name|SortSpec
name|newEmptySortSpec
parameter_list|()
block|{
return|return
operator|new
name|SortSpec
argument_list|(
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|SchemaField
operator|>
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class
end_unit
