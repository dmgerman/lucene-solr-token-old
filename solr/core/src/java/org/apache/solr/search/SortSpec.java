begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import
begin_comment
comment|/***  * SortSpec encapsulates a Lucene Sort and a count of the number of documents  * to return.  */
end_comment
begin_class
DECL|class|SortSpec
specifier|public
class|class
name|SortSpec
block|{
DECL|field|sort
name|Sort
name|sort
decl_stmt|;
DECL|field|num
name|int
name|num
decl_stmt|;
DECL|field|offset
name|int
name|offset
decl_stmt|;
DECL|method|SortSpec
specifier|public
name|SortSpec
parameter_list|(
name|Sort
name|sort
parameter_list|,
name|int
name|num
parameter_list|)
block|{
name|this
argument_list|(
name|sort
argument_list|,
literal|0
argument_list|,
name|num
argument_list|)
expr_stmt|;
block|}
DECL|method|SortSpec
specifier|public
name|SortSpec
parameter_list|(
name|Sort
name|sort
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|num
parameter_list|)
block|{
name|this
operator|.
name|sort
operator|=
name|sort
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|num
operator|=
name|num
expr_stmt|;
block|}
DECL|method|setSort
specifier|public
name|void
name|setSort
parameter_list|(
name|Sort
name|s
parameter_list|)
block|{
name|sort
operator|=
name|s
expr_stmt|;
block|}
DECL|method|includesScore
specifier|public
specifier|static
name|boolean
name|includesScore
parameter_list|(
name|Sort
name|sort
parameter_list|)
block|{
if|if
condition|(
name|sort
operator|==
literal|null
condition|)
return|return
literal|true
return|;
for|for
control|(
name|SortField
name|sf
range|:
name|sort
operator|.
name|getSort
argument_list|()
control|)
block|{
if|if
condition|(
name|sf
operator|.
name|getType
argument_list|()
operator|==
name|SortField
operator|.
name|Type
operator|.
name|SCORE
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|includesScore
specifier|public
name|boolean
name|includesScore
parameter_list|()
block|{
return|return
name|includesScore
argument_list|(
name|sort
argument_list|)
return|;
block|}
comment|/**    * Gets the Lucene Sort object, or null for the default sort    * by score descending.    */
DECL|method|getSort
specifier|public
name|Sort
name|getSort
parameter_list|()
block|{
return|return
name|sort
return|;
block|}
comment|/**    * Offset into the list of results.    */
DECL|method|getOffset
specifier|public
name|int
name|getOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
comment|/**    * Gets the number of documents to return after sorting.    *    * @return number of docs to return, or -1 for no cut off (just sort)    */
DECL|method|getCount
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|num
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"start="
operator|+
name|offset
operator|+
literal|"&rows="
operator|+
name|num
operator|+
operator|(
name|sort
operator|==
literal|null
condition|?
literal|""
else|:
literal|"&sort="
operator|+
name|sort
operator|)
return|;
block|}
block|}
end_class
end_unit
