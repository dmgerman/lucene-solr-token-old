begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|classic
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|Similarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|OpenBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ResponseBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|TrieField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_class
DECL|class|JoinQParserPlugin
specifier|public
class|class
name|JoinQParserPlugin
extends|extends
name|QParserPlugin
block|{
DECL|field|NAME
specifier|public
specifier|static
name|String
name|NAME
init|=
literal|"join"
decl_stmt|;
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{   }
DECL|method|createParser
specifier|public
name|QParser
name|createParser
parameter_list|(
name|String
name|qstr
parameter_list|,
name|SolrParams
name|localParams
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|)
block|{
return|return
operator|new
name|QParser
argument_list|(
name|qstr
argument_list|,
name|localParams
argument_list|,
name|params
argument_list|,
name|req
argument_list|)
block|{
specifier|public
name|Query
name|parse
parameter_list|()
throws|throws
name|ParseException
block|{
name|String
name|fromField
init|=
name|getParam
argument_list|(
literal|"from"
argument_list|)
decl_stmt|;
name|String
name|fromIndex
init|=
name|getParam
argument_list|(
literal|"fromIndex"
argument_list|)
decl_stmt|;
name|String
name|toField
init|=
name|getParam
argument_list|(
literal|"to"
argument_list|)
decl_stmt|;
name|String
name|v
init|=
name|localParams
operator|.
name|get
argument_list|(
literal|"v"
argument_list|)
decl_stmt|;
name|QParser
name|fromQueryParser
init|=
name|subQuery
argument_list|(
name|v
argument_list|,
literal|"lucene"
argument_list|)
decl_stmt|;
name|Query
name|fromQuery
init|=
name|fromQueryParser
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|JoinQuery
name|jq
init|=
operator|new
name|JoinQuery
argument_list|(
name|fromField
argument_list|,
name|toField
argument_list|,
name|fromIndex
argument_list|,
name|fromQuery
argument_list|)
decl_stmt|;
return|return
name|jq
return|;
block|}
block|}
return|;
block|}
block|}
end_class
begin_class
DECL|class|JoinQuery
class|class
name|JoinQuery
extends|extends
name|Query
block|{
DECL|field|fromField
name|String
name|fromField
decl_stmt|;
DECL|field|toField
name|String
name|toField
decl_stmt|;
DECL|field|fromIndex
name|String
name|fromIndex
decl_stmt|;
DECL|field|q
name|Query
name|q
decl_stmt|;
DECL|method|JoinQuery
specifier|public
name|JoinQuery
parameter_list|(
name|String
name|fromField
parameter_list|,
name|String
name|toField
parameter_list|,
name|String
name|fromIndex
parameter_list|,
name|Query
name|subQuery
parameter_list|)
block|{
name|this
operator|.
name|fromField
operator|=
name|fromField
expr_stmt|;
name|this
operator|.
name|toField
operator|=
name|toField
expr_stmt|;
name|this
operator|.
name|fromIndex
operator|=
name|fromIndex
expr_stmt|;
name|this
operator|.
name|q
operator|=
name|subQuery
expr_stmt|;
block|}
DECL|method|getQuery
specifier|public
name|Query
name|getQuery
parameter_list|()
block|{
return|return
name|q
return|;
block|}
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|Query
name|newQ
init|=
name|q
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|newQ
operator|==
name|q
condition|)
return|return
name|this
return|;
name|JoinQuery
name|nq
init|=
operator|(
name|JoinQuery
operator|)
name|this
operator|.
name|clone
argument_list|()
decl_stmt|;
name|nq
operator|.
name|q
operator|=
name|newQ
expr_stmt|;
return|return
name|nq
return|;
block|}
annotation|@
name|Override
DECL|method|extractTerms
specifier|public
name|void
name|extractTerms
parameter_list|(
name|Set
name|terms
parameter_list|)
block|{
name|q
operator|.
name|extractTerms
argument_list|(
name|terms
argument_list|)
expr_stmt|;
block|}
DECL|method|createWeight
specifier|public
name|Weight
name|createWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|JoinQueryWeight
argument_list|(
operator|(
name|SolrIndexSearcher
operator|)
name|searcher
argument_list|)
return|;
block|}
DECL|class|JoinQueryWeight
specifier|private
class|class
name|JoinQueryWeight
extends|extends
name|Weight
block|{
DECL|field|fromSearcher
name|SolrIndexSearcher
name|fromSearcher
decl_stmt|;
DECL|field|fromRef
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|fromRef
decl_stmt|;
DECL|field|toSearcher
name|SolrIndexSearcher
name|toSearcher
decl_stmt|;
DECL|field|similarity
specifier|private
name|Similarity
name|similarity
decl_stmt|;
DECL|field|queryNorm
specifier|private
name|float
name|queryNorm
decl_stmt|;
DECL|field|queryWeight
specifier|private
name|float
name|queryWeight
decl_stmt|;
DECL|field|rb
name|ResponseBuilder
name|rb
decl_stmt|;
DECL|method|JoinQueryWeight
specifier|public
name|JoinQueryWeight
parameter_list|(
name|SolrIndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|fromSearcher
operator|=
name|searcher
expr_stmt|;
name|SolrRequestInfo
name|info
init|=
name|SolrRequestInfo
operator|.
name|getRequestInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|rb
operator|=
name|info
operator|.
name|getResponseBuilder
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fromIndex
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|fromSearcher
operator|=
name|searcher
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Cross-core join must have SolrRequestInfo"
argument_list|)
throw|;
block|}
name|CoreContainer
name|container
init|=
name|searcher
operator|.
name|getCore
argument_list|()
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
decl_stmt|;
specifier|final
name|SolrCore
name|fromCore
init|=
name|container
operator|.
name|getCore
argument_list|(
name|fromIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromCore
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Cross-core join: no such core "
argument_list|)
throw|;
block|}
if|if
condition|(
name|info
operator|.
name|getReq
argument_list|()
operator|.
name|getCore
argument_list|()
operator|==
name|fromCore
condition|)
block|{
comment|// if this is the same core, use the searcher passed in... otherwise we could be warming and
comment|// get an older searcher from the core.
name|fromSearcher
operator|=
name|searcher
expr_stmt|;
block|}
else|else
block|{
comment|// This could block if there is a static warming query with a join in it, and if useColdSearcher is true.
comment|// Deadlock could result if two cores both had useColdSearcher and had joins that used eachother.
comment|// This would be very predictable though (should happen every time if misconfigured)
name|fromRef
operator|=
name|fromCore
operator|.
name|getSearcher
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// be careful not to do anything with this searcher that requires the thread local
comment|// SolrRequestInfo in a manner that requires the core in the request to match
name|fromSearcher
operator|=
name|fromRef
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fromRef
operator|!=
literal|null
condition|)
block|{
specifier|final
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|ref
init|=
name|fromRef
decl_stmt|;
name|info
operator|.
name|addCloseHook
argument_list|(
operator|new
name|Closeable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|ref
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|addCloseHook
argument_list|(
operator|new
name|Closeable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|fromCore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|toSearcher
operator|=
name|searcher
expr_stmt|;
block|}
DECL|method|getQuery
specifier|public
name|Query
name|getQuery
parameter_list|()
block|{
return|return
name|JoinQuery
operator|.
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|getValueForNormalization
specifier|public
name|float
name|getValueForNormalization
parameter_list|()
throws|throws
name|IOException
block|{
name|queryWeight
operator|=
name|getBoost
argument_list|()
expr_stmt|;
return|return
name|queryWeight
operator|*
name|queryWeight
return|;
block|}
annotation|@
name|Override
DECL|method|normalize
specifier|public
name|void
name|normalize
parameter_list|(
name|float
name|norm
parameter_list|,
name|float
name|topLevelBoost
parameter_list|)
block|{
name|this
operator|.
name|queryNorm
operator|=
name|norm
operator|*
name|topLevelBoost
expr_stmt|;
name|queryWeight
operator|*=
name|this
operator|.
name|queryNorm
expr_stmt|;
block|}
DECL|field|resultSet
name|DocSet
name|resultSet
decl_stmt|;
DECL|field|filter
name|Filter
name|filter
decl_stmt|;
annotation|@
name|Override
DECL|method|scorer
specifier|public
name|Scorer
name|scorer
parameter_list|(
name|IndexReader
operator|.
name|AtomicReaderContext
name|context
parameter_list|,
name|ScorerContext
name|scorerContext
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
name|boolean
name|debug
init|=
name|rb
operator|!=
literal|null
operator|&&
name|rb
operator|.
name|isDebug
argument_list|()
decl_stmt|;
name|long
name|start
init|=
name|debug
condition|?
name|System
operator|.
name|currentTimeMillis
argument_list|()
else|:
literal|0
decl_stmt|;
name|resultSet
operator|=
name|getDocSet
argument_list|()
expr_stmt|;
name|long
name|end
init|=
name|debug
condition|?
name|System
operator|.
name|currentTimeMillis
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|debug
condition|)
block|{
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|dbg
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|dbg
operator|.
name|add
argument_list|(
literal|"time"
argument_list|,
operator|(
name|end
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
name|dbg
operator|.
name|add
argument_list|(
literal|"fromSetSize"
argument_list|,
name|fromSetSize
argument_list|)
expr_stmt|;
comment|// the input
name|dbg
operator|.
name|add
argument_list|(
literal|"toSetSize"
argument_list|,
name|resultSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// the output
name|dbg
operator|.
name|add
argument_list|(
literal|"fromTermCount"
argument_list|,
name|fromTermCount
argument_list|)
expr_stmt|;
name|dbg
operator|.
name|add
argument_list|(
literal|"fromTermTotalDf"
argument_list|,
name|fromTermTotalDf
argument_list|)
expr_stmt|;
name|dbg
operator|.
name|add
argument_list|(
literal|"fromTermDirectCount"
argument_list|,
name|fromTermDirectCount
argument_list|)
expr_stmt|;
name|dbg
operator|.
name|add
argument_list|(
literal|"fromTermHits"
argument_list|,
name|fromTermHits
argument_list|)
expr_stmt|;
name|dbg
operator|.
name|add
argument_list|(
literal|"fromTermHitsTotalDf"
argument_list|,
name|fromTermHitsTotalDf
argument_list|)
expr_stmt|;
name|dbg
operator|.
name|add
argument_list|(
literal|"toTermHits"
argument_list|,
name|toTermHits
argument_list|)
expr_stmt|;
name|dbg
operator|.
name|add
argument_list|(
literal|"toTermHitsTotalDf"
argument_list|,
name|toTermHitsTotalDf
argument_list|)
expr_stmt|;
name|dbg
operator|.
name|add
argument_list|(
literal|"toTermDirectCount"
argument_list|,
name|toTermDirectCount
argument_list|)
expr_stmt|;
name|dbg
operator|.
name|add
argument_list|(
literal|"smallSetsDeferred"
argument_list|,
name|smallSetsDeferred
argument_list|)
expr_stmt|;
name|dbg
operator|.
name|add
argument_list|(
literal|"toSetDocsAdded"
argument_list|,
name|resultListDocs
argument_list|)
expr_stmt|;
comment|// TODO: perhaps synchronize  addDebug in the future...
name|rb
operator|.
name|addDebug
argument_list|(
name|dbg
argument_list|,
literal|"join"
argument_list|,
name|JoinQuery
operator|.
name|this
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|filter
operator|=
name|resultSet
operator|.
name|getTopFilter
argument_list|()
expr_stmt|;
block|}
name|DocIdSet
name|readerSet
init|=
name|filter
operator|.
name|getDocIdSet
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|readerSet
operator|==
literal|null
condition|)
name|readerSet
operator|=
name|DocIdSet
operator|.
name|EMPTY_DOCIDSET
expr_stmt|;
return|return
operator|new
name|JoinScorer
argument_list|(
name|this
argument_list|,
name|readerSet
operator|.
name|iterator
argument_list|()
argument_list|,
name|getBoost
argument_list|()
argument_list|)
return|;
block|}
DECL|field|fromSetSize
name|int
name|fromSetSize
decl_stmt|;
comment|// number of docs in the fromSet (that match the from query)
DECL|field|resultListDocs
name|long
name|resultListDocs
decl_stmt|;
comment|// total number of docs collected
DECL|field|fromTermCount
name|int
name|fromTermCount
decl_stmt|;
DECL|field|fromTermTotalDf
name|long
name|fromTermTotalDf
decl_stmt|;
DECL|field|fromTermDirectCount
name|int
name|fromTermDirectCount
decl_stmt|;
comment|// number of fromTerms that were too small to use the filter cache
DECL|field|fromTermHits
name|int
name|fromTermHits
decl_stmt|;
comment|// number of fromTerms that intersected the from query
DECL|field|fromTermHitsTotalDf
name|long
name|fromTermHitsTotalDf
decl_stmt|;
comment|// sum of the df of the matching terms
DECL|field|toTermHits
name|int
name|toTermHits
decl_stmt|;
comment|// num if intersecting from terms that match a term in the to field
DECL|field|toTermHitsTotalDf
name|long
name|toTermHitsTotalDf
decl_stmt|;
comment|// sum of the df for the toTermHits
DECL|field|toTermDirectCount
name|int
name|toTermDirectCount
decl_stmt|;
comment|// number of toTerms that we set directly on a bitset rather than doing set intersections
DECL|field|smallSetsDeferred
name|int
name|smallSetsDeferred
decl_stmt|;
comment|// number of small sets collected to be used later to intersect w/ bitset or create another small set
DECL|method|getDocSet
specifier|public
name|DocSet
name|getDocSet
parameter_list|()
throws|throws
name|IOException
block|{
name|OpenBitSet
name|resultBits
init|=
literal|null
decl_stmt|;
comment|// minimum docFreq to use the cache
name|int
name|minDocFreqFrom
init|=
name|Math
operator|.
name|max
argument_list|(
literal|5
argument_list|,
name|fromSearcher
operator|.
name|maxDoc
argument_list|()
operator|>>
literal|13
argument_list|)
decl_stmt|;
name|int
name|minDocFreqTo
init|=
name|Math
operator|.
name|max
argument_list|(
literal|5
argument_list|,
name|toSearcher
operator|.
name|maxDoc
argument_list|()
operator|>>
literal|13
argument_list|)
decl_stmt|;
comment|// use a smaller size than normal since we will need to sort and dedup the results
name|int
name|maxSortedIntSize
init|=
name|Math
operator|.
name|max
argument_list|(
literal|10
argument_list|,
name|toSearcher
operator|.
name|maxDoc
argument_list|()
operator|>>
literal|10
argument_list|)
decl_stmt|;
name|DocSet
name|fromSet
init|=
name|fromSearcher
operator|.
name|getDocSet
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|fromSetSize
operator|=
name|fromSet
operator|.
name|size
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|DocSet
argument_list|>
name|resultList
init|=
operator|new
name|ArrayList
argument_list|<
name|DocSet
argument_list|>
argument_list|(
literal|10
argument_list|)
decl_stmt|;
comment|// make sure we have a set that is fast for random access, if we will use it for that
name|DocSet
name|fastForRandomSet
init|=
name|fromSet
decl_stmt|;
if|if
condition|(
name|minDocFreqFrom
operator|>
literal|0
operator|&&
name|fromSet
operator|instanceof
name|SortedIntDocSet
condition|)
block|{
name|SortedIntDocSet
name|sset
init|=
operator|(
name|SortedIntDocSet
operator|)
name|fromSet
decl_stmt|;
name|fastForRandomSet
operator|=
operator|new
name|HashDocSet
argument_list|(
name|sset
operator|.
name|getDocs
argument_list|()
argument_list|,
literal|0
argument_list|,
name|sset
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Fields
name|fromFields
init|=
name|MultiFields
operator|.
name|getFields
argument_list|(
name|fromSearcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
decl_stmt|;
name|Fields
name|toFields
init|=
name|fromSearcher
operator|==
name|toSearcher
condition|?
name|fromFields
else|:
name|MultiFields
operator|.
name|getFields
argument_list|(
name|toSearcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromFields
operator|==
literal|null
condition|)
return|return
name|DocSet
operator|.
name|EMPTY
return|;
name|Terms
name|terms
init|=
name|fromFields
operator|.
name|terms
argument_list|(
name|fromField
argument_list|)
decl_stmt|;
name|Terms
name|toTerms
init|=
name|toFields
operator|.
name|terms
argument_list|(
name|toField
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|==
literal|null
operator|||
name|toTerms
operator|==
literal|null
condition|)
return|return
name|DocSet
operator|.
name|EMPTY
return|;
name|String
name|prefixStr
init|=
name|TrieField
operator|.
name|getMainValuePrefix
argument_list|(
name|fromSearcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getFieldType
argument_list|(
name|fromField
argument_list|)
argument_list|)
decl_stmt|;
name|BytesRef
name|prefix
init|=
name|prefixStr
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|BytesRef
argument_list|(
name|prefixStr
argument_list|)
decl_stmt|;
name|BytesRef
name|term
init|=
literal|null
decl_stmt|;
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|TermsEnum
name|toTermsEnum
init|=
name|toTerms
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|SolrIndexSearcher
operator|.
name|DocsEnumState
name|fromDeState
init|=
literal|null
decl_stmt|;
name|SolrIndexSearcher
operator|.
name|DocsEnumState
name|toDeState
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
name|term
operator|=
name|termsEnum
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|termsEnum
operator|.
name|seekCeil
argument_list|(
name|prefix
argument_list|,
literal|true
argument_list|)
operator|!=
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|END
condition|)
block|{
name|term
operator|=
name|termsEnum
operator|.
name|term
argument_list|()
expr_stmt|;
block|}
block|}
name|Bits
name|fromLiveDocs
init|=
name|MultiFields
operator|.
name|getLiveDocs
argument_list|(
name|fromSearcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
decl_stmt|;
name|Bits
name|toLiveDocs
init|=
name|fromSearcher
operator|==
name|toSearcher
condition|?
name|fromLiveDocs
else|:
name|MultiFields
operator|.
name|getLiveDocs
argument_list|(
name|toSearcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
decl_stmt|;
name|fromDeState
operator|=
operator|new
name|SolrIndexSearcher
operator|.
name|DocsEnumState
argument_list|()
expr_stmt|;
name|fromDeState
operator|.
name|fieldName
operator|=
name|fromField
expr_stmt|;
name|fromDeState
operator|.
name|liveDocs
operator|=
name|fromLiveDocs
expr_stmt|;
name|fromDeState
operator|.
name|termsEnum
operator|=
name|termsEnum
expr_stmt|;
name|fromDeState
operator|.
name|docsEnum
operator|=
literal|null
expr_stmt|;
name|fromDeState
operator|.
name|minSetSizeCached
operator|=
name|minDocFreqFrom
expr_stmt|;
name|toDeState
operator|=
operator|new
name|SolrIndexSearcher
operator|.
name|DocsEnumState
argument_list|()
expr_stmt|;
name|toDeState
operator|.
name|fieldName
operator|=
name|toField
expr_stmt|;
name|toDeState
operator|.
name|liveDocs
operator|=
name|toLiveDocs
expr_stmt|;
name|toDeState
operator|.
name|termsEnum
operator|=
name|toTermsEnum
expr_stmt|;
name|toDeState
operator|.
name|docsEnum
operator|=
literal|null
expr_stmt|;
name|toDeState
operator|.
name|minSetSizeCached
operator|=
name|minDocFreqTo
expr_stmt|;
while|while
condition|(
name|term
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|prefix
operator|!=
literal|null
operator|&&
operator|!
name|term
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
break|break;
name|fromTermCount
operator|++
expr_stmt|;
name|boolean
name|intersects
init|=
literal|false
decl_stmt|;
name|int
name|freq
init|=
name|termsEnum
operator|.
name|docFreq
argument_list|()
decl_stmt|;
name|fromTermTotalDf
operator|++
expr_stmt|;
if|if
condition|(
name|freq
operator|<
name|minDocFreqFrom
condition|)
block|{
name|fromTermDirectCount
operator|++
expr_stmt|;
comment|// OK to skip liveDocs, since we check for intersection with docs matching query
name|fromDeState
operator|.
name|docsEnum
operator|=
name|fromDeState
operator|.
name|termsEnum
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
name|fromDeState
operator|.
name|docsEnum
argument_list|)
expr_stmt|;
name|DocsEnum
name|docsEnum
init|=
name|fromDeState
operator|.
name|docsEnum
decl_stmt|;
if|if
condition|(
name|docsEnum
operator|instanceof
name|MultiDocsEnum
condition|)
block|{
name|MultiDocsEnum
operator|.
name|EnumWithSlice
index|[]
name|subs
init|=
operator|(
operator|(
name|MultiDocsEnum
operator|)
name|docsEnum
operator|)
operator|.
name|getSubs
argument_list|()
decl_stmt|;
name|int
name|numSubs
init|=
operator|(
operator|(
name|MultiDocsEnum
operator|)
name|docsEnum
operator|)
operator|.
name|getNumSubs
argument_list|()
decl_stmt|;
name|outer
label|:
for|for
control|(
name|int
name|subindex
init|=
literal|0
init|;
name|subindex
operator|<
name|numSubs
condition|;
name|subindex
operator|++
control|)
block|{
name|MultiDocsEnum
operator|.
name|EnumWithSlice
name|sub
init|=
name|subs
index|[
name|subindex
index|]
decl_stmt|;
if|if
condition|(
name|sub
operator|.
name|docsEnum
operator|==
literal|null
condition|)
continue|continue;
name|DocsEnum
operator|.
name|BulkReadResult
name|bulk
init|=
name|sub
operator|.
name|docsEnum
operator|.
name|getBulkResult
argument_list|()
decl_stmt|;
name|int
name|base
init|=
name|sub
operator|.
name|slice
operator|.
name|start
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|nDocs
init|=
name|sub
operator|.
name|docsEnum
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|nDocs
operator|==
literal|0
condition|)
break|break;
name|int
index|[]
name|docArr
init|=
name|bulk
operator|.
name|docs
operator|.
name|ints
decl_stmt|;
comment|// this might be movable outside the loop, but perhaps not worth the risk.
name|int
name|end
init|=
name|bulk
operator|.
name|docs
operator|.
name|offset
operator|+
name|nDocs
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|bulk
operator|.
name|docs
operator|.
name|offset
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fastForRandomSet
operator|.
name|exists
argument_list|(
name|docArr
index|[
name|i
index|]
operator|+
name|base
argument_list|)
condition|)
block|{
name|intersects
operator|=
literal|true
expr_stmt|;
break|break
name|outer
break|;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
comment|// this should be the same bulk result object if sharing of the docsEnum succeeded
name|DocsEnum
operator|.
name|BulkReadResult
name|bulk
init|=
name|docsEnum
operator|.
name|getBulkResult
argument_list|()
decl_stmt|;
name|outer
label|:
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|nDocs
init|=
name|docsEnum
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|nDocs
operator|==
literal|0
condition|)
break|break;
name|int
index|[]
name|docArr
init|=
name|bulk
operator|.
name|docs
operator|.
name|ints
decl_stmt|;
comment|// this might be movable outside the loop, but perhaps not worth the risk.
name|int
name|end
init|=
name|bulk
operator|.
name|docs
operator|.
name|offset
operator|+
name|nDocs
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|bulk
operator|.
name|docs
operator|.
name|offset
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fastForRandomSet
operator|.
name|exists
argument_list|(
name|docArr
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|intersects
operator|=
literal|true
expr_stmt|;
break|break
name|outer
break|;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
comment|// use the filter cache
name|DocSet
name|fromTermSet
init|=
name|fromSearcher
operator|.
name|getDocSet
argument_list|(
name|fromDeState
argument_list|)
decl_stmt|;
name|intersects
operator|=
name|fromSet
operator|.
name|intersects
argument_list|(
name|fromTermSet
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|intersects
condition|)
block|{
name|fromTermHits
operator|++
expr_stmt|;
name|fromTermHitsTotalDf
operator|++
expr_stmt|;
name|TermsEnum
operator|.
name|SeekStatus
name|status
init|=
name|toTermsEnum
operator|.
name|seekCeil
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|END
condition|)
break|break;
if|if
condition|(
name|status
operator|==
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|FOUND
condition|)
block|{
name|toTermHits
operator|++
expr_stmt|;
name|int
name|df
init|=
name|toTermsEnum
operator|.
name|docFreq
argument_list|()
decl_stmt|;
name|toTermHitsTotalDf
operator|+=
name|df
expr_stmt|;
if|if
condition|(
name|resultBits
operator|==
literal|null
operator|&&
name|df
operator|+
name|resultListDocs
operator|>
name|maxSortedIntSize
operator|&&
name|resultList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|resultBits
operator|=
operator|new
name|OpenBitSet
argument_list|(
name|toSearcher
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// if we don't have a bitset yet, or if the resulting set will be too large
comment|// use the filterCache to get a DocSet
if|if
condition|(
name|toTermsEnum
operator|.
name|docFreq
argument_list|()
operator|>=
name|minDocFreqTo
operator|||
name|resultBits
operator|==
literal|null
condition|)
block|{
comment|// use filter cache
name|DocSet
name|toTermSet
init|=
name|toSearcher
operator|.
name|getDocSet
argument_list|(
name|toDeState
argument_list|)
decl_stmt|;
name|resultListDocs
operator|+=
name|toTermSet
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|resultBits
operator|!=
literal|null
condition|)
block|{
name|toTermSet
operator|.
name|setBitsOn
argument_list|(
name|resultBits
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|toTermSet
operator|instanceof
name|BitDocSet
condition|)
block|{
name|resultBits
operator|=
call|(
name|OpenBitSet
call|)
argument_list|(
operator|(
name|BitDocSet
operator|)
name|toTermSet
argument_list|)
operator|.
name|bits
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|resultList
operator|.
name|add
argument_list|(
name|toTermSet
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|toTermDirectCount
operator|++
expr_stmt|;
comment|// need to use liveDocs here so we don't map to any deleted ones
name|toDeState
operator|.
name|docsEnum
operator|=
name|toDeState
operator|.
name|termsEnum
operator|.
name|docs
argument_list|(
name|toDeState
operator|.
name|liveDocs
argument_list|,
name|toDeState
operator|.
name|docsEnum
argument_list|)
expr_stmt|;
name|DocsEnum
name|docsEnum
init|=
name|toDeState
operator|.
name|docsEnum
decl_stmt|;
if|if
condition|(
name|docsEnum
operator|instanceof
name|MultiDocsEnum
condition|)
block|{
name|MultiDocsEnum
operator|.
name|EnumWithSlice
index|[]
name|subs
init|=
operator|(
operator|(
name|MultiDocsEnum
operator|)
name|docsEnum
operator|)
operator|.
name|getSubs
argument_list|()
decl_stmt|;
name|int
name|numSubs
init|=
operator|(
operator|(
name|MultiDocsEnum
operator|)
name|docsEnum
operator|)
operator|.
name|getNumSubs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|subindex
init|=
literal|0
init|;
name|subindex
operator|<
name|numSubs
condition|;
name|subindex
operator|++
control|)
block|{
name|MultiDocsEnum
operator|.
name|EnumWithSlice
name|sub
init|=
name|subs
index|[
name|subindex
index|]
decl_stmt|;
if|if
condition|(
name|sub
operator|.
name|docsEnum
operator|==
literal|null
condition|)
continue|continue;
name|DocsEnum
operator|.
name|BulkReadResult
name|bulk
init|=
name|sub
operator|.
name|docsEnum
operator|.
name|getBulkResult
argument_list|()
decl_stmt|;
name|int
name|base
init|=
name|sub
operator|.
name|slice
operator|.
name|start
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|nDocs
init|=
name|sub
operator|.
name|docsEnum
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|nDocs
operator|==
literal|0
condition|)
break|break;
name|resultListDocs
operator|+=
name|nDocs
expr_stmt|;
name|int
index|[]
name|docArr
init|=
name|bulk
operator|.
name|docs
operator|.
name|ints
decl_stmt|;
comment|// this might be movable outside the loop, but perhaps not worth the risk.
name|int
name|end
init|=
name|bulk
operator|.
name|docs
operator|.
name|offset
operator|+
name|nDocs
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|bulk
operator|.
name|docs
operator|.
name|offset
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|resultBits
operator|.
name|fastSet
argument_list|(
name|docArr
index|[
name|i
index|]
operator|+
name|base
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// this should be the same bulk result object if sharing of the docsEnum succeeded
name|DocsEnum
operator|.
name|BulkReadResult
name|bulk
init|=
name|docsEnum
operator|.
name|getBulkResult
argument_list|()
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|nDocs
init|=
name|docsEnum
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|nDocs
operator|==
literal|0
condition|)
break|break;
name|resultListDocs
operator|+=
name|nDocs
expr_stmt|;
name|int
index|[]
name|docArr
init|=
name|bulk
operator|.
name|docs
operator|.
name|ints
decl_stmt|;
comment|// this might be movable outside the loop, but perhaps not worth the risk.
name|int
name|end
init|=
name|bulk
operator|.
name|docs
operator|.
name|offset
operator|+
name|nDocs
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|bulk
operator|.
name|docs
operator|.
name|offset
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|resultBits
operator|.
name|fastSet
argument_list|(
name|docArr
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
name|term
operator|=
name|termsEnum
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|smallSetsDeferred
operator|=
name|resultList
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|resultBits
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DocSet
name|set
range|:
name|resultList
control|)
block|{
name|set
operator|.
name|setBitsOn
argument_list|(
name|resultBits
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|BitDocSet
argument_list|(
name|resultBits
argument_list|)
return|;
block|}
if|if
condition|(
name|resultList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|DocSet
operator|.
name|EMPTY
return|;
block|}
if|if
condition|(
name|resultList
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|resultList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
name|int
name|sz
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DocSet
name|set
range|:
name|resultList
control|)
name|sz
operator|+=
name|set
operator|.
name|size
argument_list|()
expr_stmt|;
name|int
index|[]
name|docs
init|=
operator|new
name|int
index|[
name|sz
index|]
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DocSet
name|set
range|:
name|resultList
control|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
operator|(
operator|(
name|SortedIntDocSet
operator|)
name|set
operator|)
operator|.
name|getDocs
argument_list|()
argument_list|,
literal|0
argument_list|,
name|docs
argument_list|,
name|pos
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|set
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|int
index|[]
name|dedup
init|=
operator|new
name|int
index|[
name|sz
index|]
decl_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
name|int
name|last
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|doc
range|:
name|docs
control|)
block|{
if|if
condition|(
name|doc
operator|!=
name|last
condition|)
name|dedup
index|[
name|pos
operator|++
index|]
operator|=
name|doc
expr_stmt|;
name|last
operator|=
name|doc
expr_stmt|;
block|}
if|if
condition|(
name|pos
operator|!=
name|dedup
operator|.
name|length
condition|)
block|{
name|dedup
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|dedup
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SortedIntDocSet
argument_list|(
name|dedup
argument_list|,
name|dedup
operator|.
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|explain
specifier|public
name|Explanation
name|explain
parameter_list|(
name|IndexReader
operator|.
name|AtomicReaderContext
name|context
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|Scorer
name|scorer
init|=
name|scorer
argument_list|(
name|context
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|exists
init|=
name|scorer
operator|.
name|advance
argument_list|(
name|doc
argument_list|)
operator|==
name|doc
decl_stmt|;
name|ComplexExplanation
name|result
init|=
operator|new
name|ComplexExplanation
argument_list|()
decl_stmt|;
if|if
condition|(
name|exists
condition|)
block|{
name|result
operator|.
name|setDescription
argument_list|(
name|this
operator|.
name|toString
argument_list|()
operator|+
literal|" , product of:"
argument_list|)
expr_stmt|;
name|result
operator|.
name|setValue
argument_list|(
name|queryWeight
argument_list|)
expr_stmt|;
name|result
operator|.
name|setMatch
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|result
operator|.
name|addDetail
argument_list|(
operator|new
name|Explanation
argument_list|(
name|getBoost
argument_list|()
argument_list|,
literal|"boost"
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|addDetail
argument_list|(
operator|new
name|Explanation
argument_list|(
name|queryNorm
argument_list|,
literal|"queryNorm"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|setDescription
argument_list|(
name|this
operator|.
name|toString
argument_list|()
operator|+
literal|" doesn't match id "
operator|+
name|doc
argument_list|)
expr_stmt|;
name|result
operator|.
name|setValue
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|setMatch
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
DECL|class|JoinScorer
specifier|protected
specifier|static
class|class
name|JoinScorer
extends|extends
name|Scorer
block|{
DECL|field|iter
specifier|final
name|DocIdSetIterator
name|iter
decl_stmt|;
DECL|field|score
specifier|final
name|float
name|score
decl_stmt|;
DECL|field|doc
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|JoinScorer
specifier|public
name|JoinScorer
parameter_list|(
name|Weight
name|w
parameter_list|,
name|DocIdSetIterator
name|iter
parameter_list|,
name|float
name|score
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|this
operator|.
name|score
operator|=
name|score
expr_stmt|;
name|this
operator|.
name|iter
operator|=
name|iter
operator|==
literal|null
condition|?
name|DocIdSet
operator|.
name|EMPTY_DOCIDSET
operator|.
name|iterator
argument_list|()
else|:
name|iter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|iter
operator|.
name|nextDoc
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|iter
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|score
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|iter
operator|.
name|advance
argument_list|(
name|target
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
literal|"{!join from="
operator|+
name|fromField
operator|+
literal|" to="
operator|+
name|toField
operator|+
operator|(
name|fromIndex
operator|!=
literal|null
condition|?
literal|" fromIndex="
operator|+
name|fromIndex
else|:
literal|""
operator|)
operator|+
literal|"}"
operator|+
name|q
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|JoinQuery
name|other
init|=
operator|(
name|JoinQuery
operator|)
name|o
decl_stmt|;
return|return
name|this
operator|.
name|fromField
operator|.
name|equals
argument_list|(
name|other
operator|.
name|fromField
argument_list|)
operator|&&
name|this
operator|.
name|toField
operator|.
name|equals
argument_list|(
name|other
operator|.
name|toField
argument_list|)
operator|&&
name|this
operator|.
name|getBoost
argument_list|()
operator|==
name|other
operator|.
name|getBoost
argument_list|()
operator|&&
name|this
operator|.
name|q
operator|.
name|equals
argument_list|(
name|other
operator|.
name|q
argument_list|)
operator|&&
operator|(
name|this
operator|.
name|fromIndex
operator|==
name|other
operator|.
name|fromIndex
operator|||
name|this
operator|.
name|fromIndex
operator|!=
literal|null
operator|&&
name|this
operator|.
name|fromIndex
operator|.
name|equals
argument_list|(
name|other
operator|.
name|fromIndex
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|h
init|=
name|q
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|h
operator|=
name|h
operator|*
literal|31
operator|+
name|fromField
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|h
operator|=
name|h
operator|*
literal|31
operator|+
name|toField
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|h
return|;
block|}
block|}
end_class
end_unit
