begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search.stats
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|stats
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermStatistics
import|;
end_import
begin_comment
comment|/**  * Modifiable version of {@link TermStatistics} useful for aggregation of  * per-shard stats.  */
end_comment
begin_class
DECL|class|TermStats
specifier|public
class|class
name|TermStats
block|{
DECL|field|term
specifier|final
specifier|public
name|String
name|term
decl_stmt|;
DECL|field|docFreq
specifier|public
name|long
name|docFreq
decl_stmt|;
DECL|field|totalTermFreq
specifier|public
name|long
name|totalTermFreq
decl_stmt|;
DECL|field|t
specifier|private
specifier|final
name|Term
name|t
decl_stmt|;
DECL|method|TermStats
specifier|public
name|TermStats
parameter_list|(
name|String
name|term
parameter_list|)
block|{
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
name|t
operator|=
name|makeTerm
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTerm
specifier|private
name|Term
name|makeTerm
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|int
name|idx
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Term
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
argument_list|,
name|s
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
argument_list|)
return|;
block|}
DECL|method|TermStats
specifier|public
name|TermStats
parameter_list|(
name|String
name|term
parameter_list|,
name|long
name|docFreq
parameter_list|,
name|long
name|totalTermFreq
parameter_list|)
block|{
name|this
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|this
operator|.
name|docFreq
operator|=
name|docFreq
expr_stmt|;
name|this
operator|.
name|totalTermFreq
operator|=
name|totalTermFreq
expr_stmt|;
block|}
DECL|method|TermStats
specifier|public
name|TermStats
parameter_list|(
name|String
name|field
parameter_list|,
name|TermStatistics
name|stats
parameter_list|)
block|{
name|this
operator|.
name|term
operator|=
name|field
operator|+
literal|":"
operator|+
name|stats
operator|.
name|term
argument_list|()
operator|.
name|utf8ToString
argument_list|()
expr_stmt|;
name|this
operator|.
name|t
operator|=
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|stats
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|docFreq
operator|=
name|stats
operator|.
name|docFreq
argument_list|()
expr_stmt|;
name|this
operator|.
name|totalTermFreq
operator|=
name|stats
operator|.
name|totalTermFreq
argument_list|()
expr_stmt|;
block|}
comment|/*    * If any of the stats is -1 then reset total stats to -1.    */
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|TermStats
name|stats
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|docFreq
operator|<
literal|0
operator|||
name|stats
operator|.
name|docFreq
operator|<
literal|0
condition|)
block|{
name|this
operator|.
name|docFreq
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|docFreq
operator|+=
name|stats
operator|.
name|docFreq
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|totalTermFreq
operator|<
literal|0
operator|||
name|stats
operator|.
name|totalTermFreq
operator|<
literal|0
condition|)
block|{
name|this
operator|.
name|totalTermFreq
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|totalTermFreq
operator|+=
name|stats
operator|.
name|totalTermFreq
expr_stmt|;
block|}
block|}
DECL|method|toTermStatistics
specifier|public
name|TermStatistics
name|toTermStatistics
parameter_list|()
block|{
return|return
operator|new
name|TermStatistics
argument_list|(
name|t
operator|.
name|bytes
argument_list|()
argument_list|,
name|docFreq
argument_list|,
name|totalTermFreq
argument_list|)
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|StatsUtil
operator|.
name|termStatsToString
argument_list|(
name|this
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
end_class
end_unit
