begin_unit
begin_package
DECL|package|org.apache.solr.search.similarities
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|similarities
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|Distribution
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|DistributionLL
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|DistributionSPL
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|IBSimilarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|Lambda
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|LambdaDF
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|LambdaTTF
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|Normalization
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|Similarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SimilarityFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|similarities
operator|.
name|DFRSimilarityFactory
import|;
end_import
begin_comment
comment|// javadoc
end_comment
begin_comment
comment|/**  * Factory for {@link IBSimilarity}  *<p>  * You must specify the implementations for all three components of the  * Information-Based model (strings).  *<ol>  *<li>{@link Distribution distribution}: Probabilistic distribution used to  *         model term occurrence  *<ul>  *<li>{@link DistributionLL LL}: Log-logistic</li>  *<li>{@link DistributionLL SPL}: Smoothed power-law</li>  *</ul>  *</li>  *<li>{@link Lambda lambda}:&lambda;<sub>w</sub> parameter of the  *         probability distribution  *<ul>  *<li>{@link LambdaDF DF}:<code>N<sub>w</sub>/N</code> or average  *                 number of documents where w occurs</li>  *<li>{@link LambdaTTF TTF}:<code>F<sub>w</sub>/N</code> or  *                 average number of occurrences of w in the collection</li>  *</ul>  *</li>  *<li>{@link Normalization normalization}: Term frequency normalization   *<blockquote>Any supported DFR normalization listed in                        {@link DFRSimilarityFactory}</blockquote></li>  *</ol>  *<p>  * Optional settings:  *<ul>  *<li>discountOverlaps (bool): Sets  *       {@link IBSimilarity#setDiscountOverlaps(boolean)}</li>  *</ul>  * @lucene.experimental  */
end_comment
begin_class
DECL|class|IBSimilarityFactory
specifier|public
class|class
name|IBSimilarityFactory
extends|extends
name|SimilarityFactory
block|{
DECL|field|discountOverlaps
specifier|private
name|boolean
name|discountOverlaps
decl_stmt|;
DECL|field|distribution
specifier|private
name|Distribution
name|distribution
decl_stmt|;
DECL|field|lambda
specifier|private
name|Lambda
name|lambda
decl_stmt|;
DECL|field|normalization
specifier|private
name|Normalization
name|normalization
decl_stmt|;
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|SolrParams
name|params
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|discountOverlaps
operator|=
name|params
operator|.
name|getBool
argument_list|(
literal|"discountOverlaps"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|distribution
operator|=
name|parseDistribution
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"distribution"
argument_list|)
argument_list|)
expr_stmt|;
name|lambda
operator|=
name|parseLambda
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"lambda"
argument_list|)
argument_list|)
expr_stmt|;
name|normalization
operator|=
name|DFRSimilarityFactory
operator|.
name|parseNormalization
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"normalization"
argument_list|)
argument_list|,
name|params
operator|.
name|get
argument_list|(
literal|"mu"
argument_list|)
argument_list|,
name|params
operator|.
name|get
argument_list|(
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|parseDistribution
specifier|private
name|Distribution
name|parseDistribution
parameter_list|(
name|String
name|expr
parameter_list|)
block|{
if|if
condition|(
literal|"LL"
operator|.
name|equals
argument_list|(
name|expr
argument_list|)
condition|)
block|{
return|return
operator|new
name|DistributionLL
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
literal|"SPL"
operator|.
name|equals
argument_list|(
name|expr
argument_list|)
condition|)
block|{
return|return
operator|new
name|DistributionSPL
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid distribution: "
operator|+
name|expr
argument_list|)
throw|;
block|}
block|}
DECL|method|parseLambda
specifier|private
name|Lambda
name|parseLambda
parameter_list|(
name|String
name|expr
parameter_list|)
block|{
if|if
condition|(
literal|"DF"
operator|.
name|equals
argument_list|(
name|expr
argument_list|)
condition|)
block|{
return|return
operator|new
name|LambdaDF
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
literal|"TTF"
operator|.
name|equals
argument_list|(
name|expr
argument_list|)
condition|)
block|{
return|return
operator|new
name|LambdaTTF
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid lambda: "
operator|+
name|expr
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getSimilarity
specifier|public
name|Similarity
name|getSimilarity
parameter_list|()
block|{
name|IBSimilarity
name|sim
init|=
operator|new
name|IBSimilarity
argument_list|(
name|distribution
argument_list|,
name|lambda
argument_list|,
name|normalization
argument_list|)
decl_stmt|;
name|sim
operator|.
name|setDiscountOverlaps
argument_list|(
name|discountOverlaps
argument_list|)
expr_stmt|;
return|return
name|sim
return|;
block|}
block|}
end_class
end_unit
