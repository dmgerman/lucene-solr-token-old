begin_unit
begin_package
DECL|package|org.apache.solr.search.stats
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|stats
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|PluginInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ResponseBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import
begin_class
DECL|class|ExactSharedStatsCache
specifier|public
class|class
name|ExactSharedStatsCache
extends|extends
name|ExactStatsCache
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ExactSharedStatsCache
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// local stats obtained from shard servers
DECL|field|perShardTermStats
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|TermStats
argument_list|>
argument_list|>
name|perShardTermStats
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|perShardColStats
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|CollectionStats
argument_list|>
argument_list|>
name|perShardColStats
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// global stats synchronized from the master
DECL|field|currentGlobalTermStats
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TermStats
argument_list|>
name|currentGlobalTermStats
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|currentGlobalColStats
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CollectionStats
argument_list|>
name|currentGlobalColStats
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|get
specifier|public
name|StatsSource
name|get
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"total={}, cache {}"
argument_list|,
name|currentGlobalColStats
argument_list|,
name|currentGlobalTermStats
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|ExactStatsSource
argument_list|(
name|currentGlobalTermStats
argument_list|,
name|currentGlobalColStats
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|PluginInfo
name|info
parameter_list|)
block|{}
annotation|@
name|Override
DECL|method|addToPerShardColStats
specifier|protected
name|void
name|addToPerShardColStats
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|String
name|shard
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|CollectionStats
argument_list|>
name|colStats
parameter_list|)
block|{
name|perShardColStats
operator|.
name|put
argument_list|(
name|shard
argument_list|,
name|colStats
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|printStats
specifier|protected
name|void
name|printStats
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"perShardColStats={}, perShardTermStats={}"
argument_list|,
name|perShardColStats
argument_list|,
name|perShardTermStats
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addToPerShardTermStats
specifier|protected
name|void
name|addToPerShardTermStats
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|String
name|shard
parameter_list|,
name|String
name|termStatsString
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|TermStats
argument_list|>
name|termStats
init|=
name|StatsUtil
operator|.
name|termStatsMapFromString
argument_list|(
name|termStatsString
argument_list|)
decl_stmt|;
if|if
condition|(
name|termStats
operator|!=
literal|null
condition|)
block|{
name|perShardTermStats
operator|.
name|put
argument_list|(
name|shard
argument_list|,
name|termStats
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPerShardColStats
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|CollectionStats
argument_list|>
name|getPerShardColStats
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|String
name|shard
parameter_list|)
block|{
return|return
name|perShardColStats
operator|.
name|get
argument_list|(
name|shard
argument_list|)
return|;
block|}
DECL|method|getPerShardTermStats
specifier|protected
name|TermStats
name|getPerShardTermStats
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|String
name|t
parameter_list|,
name|String
name|shard
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|TermStats
argument_list|>
name|cache
init|=
name|perShardTermStats
operator|.
name|get
argument_list|(
name|shard
argument_list|)
decl_stmt|;
return|return
name|cache
operator|.
name|get
argument_list|(
name|t
argument_list|)
return|;
block|}
DECL|method|addToGlobalColStats
specifier|protected
name|void
name|addToGlobalColStats
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|Entry
argument_list|<
name|String
argument_list|,
name|CollectionStats
argument_list|>
name|e
parameter_list|)
block|{
name|currentGlobalColStats
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addToGlobalTermStats
specifier|protected
name|void
name|addToGlobalTermStats
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|Entry
argument_list|<
name|String
argument_list|,
name|TermStats
argument_list|>
name|e
parameter_list|)
block|{
name|currentGlobalTermStats
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
