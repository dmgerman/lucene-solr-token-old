begin_unit
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FilterLeafReader
operator|.
name|FilterPostingsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_class
DECL|class|BitsFilteredPostingsEnum
specifier|public
class|class
name|BitsFilteredPostingsEnum
extends|extends
name|FilterPostingsEnum
block|{
DECL|method|wrap
specifier|public
specifier|static
name|PostingsEnum
name|wrap
parameter_list|(
name|PostingsEnum
name|in
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
block|{
if|if
condition|(
name|in
operator|==
literal|null
operator|||
name|acceptDocs
operator|==
literal|null
condition|)
block|{
return|return
name|in
return|;
block|}
return|return
operator|new
name|BitsFilteredPostingsEnum
argument_list|(
name|in
argument_list|,
name|acceptDocs
argument_list|)
return|;
block|}
DECL|field|acceptDocs
specifier|private
specifier|final
name|Bits
name|acceptDocs
decl_stmt|;
DECL|method|BitsFilteredPostingsEnum
specifier|private
name|BitsFilteredPostingsEnum
parameter_list|(
name|PostingsEnum
name|in
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|acceptDocs
operator|=
name|acceptDocs
expr_stmt|;
block|}
DECL|method|doNext
specifier|private
name|int
name|doNext
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|doc
operator|!=
name|NO_MORE_DOCS
operator|&&
name|acceptDocs
operator|.
name|get
argument_list|(
name|doc
argument_list|)
operator|==
literal|false
condition|)
block|{
name|doc
operator|=
name|super
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|doNext
argument_list|(
name|super
operator|.
name|nextDoc
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|doNext
argument_list|(
name|super
operator|.
name|advance
argument_list|(
name|target
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class
end_unit
