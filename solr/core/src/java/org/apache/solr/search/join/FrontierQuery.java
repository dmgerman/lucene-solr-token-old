begin_unit
begin_package
DECL|package|org.apache.solr.search.join
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|join
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_comment
comment|/**  * Frontier Query represents the next hop of a GraphTraversal.  * It contains the query to execute and the number of edges to traverse.  * @lucene.internal  */
end_comment
begin_class
DECL|class|FrontierQuery
class|class
name|FrontierQuery
block|{
DECL|field|query
specifier|private
specifier|final
name|Query
name|query
decl_stmt|;
DECL|field|frontierSize
specifier|private
specifier|final
name|Integer
name|frontierSize
decl_stmt|;
DECL|method|FrontierQuery
specifier|public
name|FrontierQuery
parameter_list|(
name|Query
name|query
parameter_list|,
name|Integer
name|frontierSize
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
name|this
operator|.
name|frontierSize
operator|=
name|frontierSize
expr_stmt|;
block|}
comment|/**    * Return the query that represents the frontier at the current level.    */
DECL|method|getQuery
specifier|public
name|Query
name|getQuery
parameter_list|()
block|{
return|return
name|query
return|;
block|}
comment|/**    * Return the number of edges in the frontier query.    */
DECL|method|getFrontierSize
specifier|public
name|Integer
name|getFrontierSize
parameter_list|()
block|{
return|return
name|frontierSize
return|;
block|}
block|}
end_class
end_unit
