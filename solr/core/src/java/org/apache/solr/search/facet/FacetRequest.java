begin_unit
begin_package
DECL|package|org.apache.solr.search.facet
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|facet
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ResponseBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|BitDocSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|DocIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|DocSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|FunctionQParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|FunctionQParserPlugin
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|QParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|QueryContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SyntaxError
import|;
end_import
begin_class
DECL|class|FacetRequest
specifier|public
specifier|abstract
class|class
name|FacetRequest
block|{
DECL|field|facetStats
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|AggValueSource
argument_list|>
name|facetStats
decl_stmt|;
comment|// per-bucket statistics
DECL|field|subFacets
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|FacetRequest
argument_list|>
name|subFacets
decl_stmt|;
comment|// list of facets
DECL|field|filters
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|filters
decl_stmt|;
DECL|field|processEmpty
specifier|protected
name|boolean
name|processEmpty
decl_stmt|;
DECL|field|domain
specifier|protected
name|Domain
name|domain
decl_stmt|;
comment|// domain changes
DECL|class|Domain
specifier|public
specifier|static
class|class
name|Domain
block|{
DECL|field|excludeTags
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|excludeTags
decl_stmt|;
DECL|field|toParent
specifier|public
name|boolean
name|toParent
decl_stmt|;
DECL|field|toChildren
specifier|public
name|boolean
name|toChildren
decl_stmt|;
DECL|field|parents
specifier|public
name|String
name|parents
decl_stmt|;
block|}
DECL|method|FacetRequest
specifier|public
name|FacetRequest
parameter_list|()
block|{
name|facetStats
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|subFacets
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|getFacetStats
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|AggValueSource
argument_list|>
name|getFacetStats
parameter_list|()
block|{
return|return
name|facetStats
return|;
block|}
DECL|method|getSubFacets
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|FacetRequest
argument_list|>
name|getSubFacets
parameter_list|()
block|{
return|return
name|subFacets
return|;
block|}
DECL|method|addStat
specifier|public
name|void
name|addStat
parameter_list|(
name|String
name|key
parameter_list|,
name|AggValueSource
name|stat
parameter_list|)
block|{
name|facetStats
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|stat
argument_list|)
expr_stmt|;
block|}
DECL|method|addSubFacet
specifier|public
name|void
name|addSubFacet
parameter_list|(
name|String
name|key
parameter_list|,
name|FacetRequest
name|facetRequest
parameter_list|)
block|{
name|subFacets
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|facetRequest
argument_list|)
expr_stmt|;
block|}
DECL|method|createFacetProcessor
specifier|public
specifier|abstract
name|FacetProcessor
name|createFacetProcessor
parameter_list|(
name|FacetContext
name|fcontext
parameter_list|)
function_decl|;
DECL|method|createFacetMerger
specifier|public
specifier|abstract
name|FacetMerger
name|createFacetMerger
parameter_list|(
name|Object
name|prototype
parameter_list|)
function_decl|;
block|}
end_class
begin_class
DECL|class|FacetContext
class|class
name|FacetContext
block|{
comment|// Context info for actually executing a local facet command
DECL|field|IS_SHARD
specifier|public
specifier|static
specifier|final
name|int
name|IS_SHARD
init|=
literal|0x01
decl_stmt|;
DECL|field|qcontext
name|QueryContext
name|qcontext
decl_stmt|;
DECL|field|req
name|SolrQueryRequest
name|req
decl_stmt|;
comment|// TODO: replace with params?
DECL|field|searcher
name|SolrIndexSearcher
name|searcher
decl_stmt|;
DECL|field|filter
name|Query
name|filter
decl_stmt|;
comment|// TODO: keep track of as a DocSet or as a Query?
DECL|field|base
name|DocSet
name|base
decl_stmt|;
DECL|field|parent
name|FacetContext
name|parent
decl_stmt|;
DECL|field|flags
name|int
name|flags
decl_stmt|;
DECL|method|isShard
specifier|public
name|boolean
name|isShard
parameter_list|()
block|{
return|return
operator|(
name|flags
operator|&
name|IS_SHARD
operator|)
operator|!=
literal|0
return|;
block|}
comment|/**    * @param filter The filter for the bucket that resulted in this context/domain.  Can be null if this is the root context.    * @param domain The resulting set of documents for this facet.    */
DECL|method|sub
specifier|public
name|FacetContext
name|sub
parameter_list|(
name|Query
name|filter
parameter_list|,
name|DocSet
name|domain
parameter_list|)
block|{
name|FacetContext
name|ctx
init|=
operator|new
name|FacetContext
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|parent
operator|=
name|this
expr_stmt|;
name|ctx
operator|.
name|base
operator|=
name|domain
expr_stmt|;
name|ctx
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
comment|// carry over from parent
name|ctx
operator|.
name|flags
operator|=
name|flags
expr_stmt|;
name|ctx
operator|.
name|qcontext
operator|=
name|qcontext
expr_stmt|;
name|ctx
operator|.
name|req
operator|=
name|req
expr_stmt|;
name|ctx
operator|.
name|searcher
operator|=
name|searcher
expr_stmt|;
return|return
name|ctx
return|;
block|}
block|}
end_class
begin_class
DECL|class|FacetParser
specifier|abstract
class|class
name|FacetParser
parameter_list|<
name|FacetRequestT
extends|extends
name|FacetRequest
parameter_list|>
block|{
DECL|field|facet
specifier|protected
name|FacetRequestT
name|facet
decl_stmt|;
DECL|field|parent
specifier|protected
name|FacetParser
name|parent
decl_stmt|;
DECL|field|key
specifier|protected
name|String
name|key
decl_stmt|;
DECL|method|FacetParser
specifier|public
name|FacetParser
parameter_list|(
name|FacetParser
name|parent
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
DECL|method|getKey
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
DECL|method|getPathStr
specifier|public
name|String
name|getPathStr
parameter_list|()
block|{
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
return|return
literal|"/"
operator|+
name|key
return|;
block|}
return|return
name|parent
operator|.
name|getKey
argument_list|()
operator|+
literal|"/"
operator|+
name|key
return|;
block|}
DECL|method|err
specifier|protected
name|RuntimeException
name|err
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
return|return
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|msg
operator|+
literal|" ,path="
operator|+
name|getPathStr
argument_list|()
argument_list|)
return|;
block|}
DECL|method|parse
specifier|public
specifier|abstract
name|FacetRequest
name|parse
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|SyntaxError
function_decl|;
comment|// TODO: put the FacetRequest on the parser object?
DECL|method|parseSubs
specifier|public
name|void
name|parseSubs
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|SyntaxError
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|o
operator|instanceof
name|Map
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|o
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|m
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"processEmpty"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|facet
operator|.
name|processEmpty
operator|=
name|getBoolean
argument_list|(
name|m
argument_list|,
literal|"processEmpty"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// "my_prices" : { "range" : { "field":...
comment|// key="my_prices", value={"range":..
name|Object
name|parsedValue
init|=
name|parseFacetOrStat
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
comment|// TODO: have parseFacetOrStat directly add instead of return?
if|if
condition|(
name|parsedValue
operator|instanceof
name|FacetRequest
condition|)
block|{
name|facet
operator|.
name|addSubFacet
argument_list|(
name|key
argument_list|,
operator|(
name|FacetRequest
operator|)
name|parsedValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parsedValue
operator|instanceof
name|AggValueSource
condition|)
block|{
name|facet
operator|.
name|addStat
argument_list|(
name|key
argument_list|,
operator|(
name|AggValueSource
operator|)
name|parsedValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Huh? TODO: "
operator|+
name|parsedValue
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
comment|// facet : my_field?
throw|throw
name|err
argument_list|(
literal|"Expected map for facet/stat"
argument_list|)
throw|;
block|}
block|}
DECL|method|parseFacetOrStat
specifier|public
name|Object
name|parseFacetOrStat
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|o
parameter_list|)
throws|throws
name|SyntaxError
block|{
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
return|return
name|parseStringFacetOrStat
argument_list|(
name|key
argument_list|,
operator|(
name|String
operator|)
name|o
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|Map
operator|)
condition|)
block|{
throw|throw
name|err
argument_list|(
literal|"expected Map but got "
operator|+
name|o
argument_list|)
throw|;
block|}
comment|// The type can be in a one element map, or inside the args as the "type" field
comment|// { "query" : "foo:bar" }
comment|// { "range" : { "field":... } }
comment|// { "type"  : range, field : myfield, ... }
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|o
decl_stmt|;
name|String
name|type
decl_stmt|;
name|Object
name|args
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|m
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|type
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|args
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
comment|// throw err("expected facet/stat type name, like {range:{... but got " + m);
block|}
else|else
block|{
comment|// type should be inside the map as a parameter
name|Object
name|typeObj
init|=
name|m
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|typeObj
operator|instanceof
name|String
operator|)
condition|)
block|{
throw|throw
name|err
argument_list|(
literal|"expected facet/stat type name, like {type:range, field:price, ...} but got "
operator|+
name|typeObj
argument_list|)
throw|;
block|}
name|type
operator|=
operator|(
name|String
operator|)
name|typeObj
expr_stmt|;
name|args
operator|=
name|m
expr_stmt|;
block|}
return|return
name|parseFacetOrStat
argument_list|(
name|key
argument_list|,
name|type
argument_list|,
name|args
argument_list|)
return|;
block|}
DECL|method|parseFacetOrStat
specifier|public
name|Object
name|parseFacetOrStat
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|type
parameter_list|,
name|Object
name|args
parameter_list|)
throws|throws
name|SyntaxError
block|{
comment|// TODO: a place to register all these facet types?
if|if
condition|(
literal|"field"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
literal|"terms"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|parseFieldFacet
argument_list|(
name|key
argument_list|,
name|args
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"query"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|parseQueryFacet
argument_list|(
name|key
argument_list|,
name|args
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"range"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|parseRangeFacet
argument_list|(
name|key
argument_list|,
name|args
argument_list|)
return|;
block|}
return|return
name|parseStat
argument_list|(
name|key
argument_list|,
name|type
argument_list|,
name|args
argument_list|)
return|;
block|}
DECL|method|parseFieldFacet
name|FacetField
name|parseFieldFacet
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|args
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|FacetFieldParser
name|parser
init|=
operator|new
name|FacetFieldParser
argument_list|(
name|this
argument_list|,
name|key
argument_list|)
decl_stmt|;
return|return
name|parser
operator|.
name|parse
argument_list|(
name|args
argument_list|)
return|;
block|}
DECL|method|parseQueryFacet
name|FacetQuery
name|parseQueryFacet
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|args
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|FacetQueryParser
name|parser
init|=
operator|new
name|FacetQueryParser
argument_list|(
name|this
argument_list|,
name|key
argument_list|)
decl_stmt|;
return|return
name|parser
operator|.
name|parse
argument_list|(
name|args
argument_list|)
return|;
block|}
DECL|method|parseRangeFacet
name|FacetRange
name|parseRangeFacet
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|args
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|FacetRangeParser
name|parser
init|=
operator|new
name|FacetRangeParser
argument_list|(
name|this
argument_list|,
name|key
argument_list|)
decl_stmt|;
return|return
name|parser
operator|.
name|parse
argument_list|(
name|args
argument_list|)
return|;
block|}
DECL|method|parseStringFacetOrStat
specifier|public
name|Object
name|parseStringFacetOrStat
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|s
parameter_list|)
throws|throws
name|SyntaxError
block|{
comment|// "avg(myfield)"
return|return
name|parseStringStat
argument_list|(
name|key
argument_list|,
name|s
argument_list|)
return|;
comment|// TODO - simple string representation of facets
block|}
comment|// parses avg(x)
DECL|method|parseStringStat
specifier|private
name|AggValueSource
name|parseStringStat
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|stat
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|FunctionQParser
name|parser
init|=
operator|(
name|FunctionQParser
operator|)
name|QParser
operator|.
name|getParser
argument_list|(
name|stat
argument_list|,
name|FunctionQParserPlugin
operator|.
name|NAME
argument_list|,
name|getSolrRequest
argument_list|()
argument_list|)
decl_stmt|;
name|AggValueSource
name|agg
init|=
name|parser
operator|.
name|parseAgg
argument_list|(
name|FunctionQParser
operator|.
name|FLAG_DEFAULT
argument_list|)
decl_stmt|;
return|return
name|agg
return|;
block|}
DECL|method|parseStat
specifier|public
name|AggValueSource
name|parseStat
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|type
parameter_list|,
name|Object
name|args
parameter_list|)
throws|throws
name|SyntaxError
block|{
return|return
literal|null
return|;
block|}
DECL|method|getDomain
specifier|private
name|FacetRequest
operator|.
name|Domain
name|getDomain
parameter_list|()
block|{
if|if
condition|(
name|facet
operator|.
name|domain
operator|==
literal|null
condition|)
block|{
name|facet
operator|.
name|domain
operator|=
operator|new
name|FacetRequest
operator|.
name|Domain
argument_list|()
expr_stmt|;
block|}
return|return
name|facet
operator|.
name|domain
return|;
block|}
DECL|method|parseCommonParams
specifier|protected
name|void
name|parseCommonParams
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Map
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|o
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|excludeTags
init|=
name|getStringList
argument_list|(
name|m
argument_list|,
literal|"excludeTags"
argument_list|)
decl_stmt|;
if|if
condition|(
name|excludeTags
operator|!=
literal|null
condition|)
block|{
name|getDomain
argument_list|()
operator|.
name|excludeTags
operator|=
name|excludeTags
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|domainMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"domain"
argument_list|)
decl_stmt|;
if|if
condition|(
name|domainMap
operator|!=
literal|null
condition|)
block|{
name|excludeTags
operator|=
name|getStringList
argument_list|(
name|domainMap
argument_list|,
literal|"excludeTags"
argument_list|)
expr_stmt|;
if|if
condition|(
name|excludeTags
operator|!=
literal|null
condition|)
block|{
name|getDomain
argument_list|()
operator|.
name|excludeTags
operator|=
name|excludeTags
expr_stmt|;
block|}
name|String
name|blockParent
init|=
operator|(
name|String
operator|)
name|domainMap
operator|.
name|get
argument_list|(
literal|"blockParent"
argument_list|)
decl_stmt|;
name|String
name|blockChildren
init|=
operator|(
name|String
operator|)
name|domainMap
operator|.
name|get
argument_list|(
literal|"blockChildren"
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockParent
operator|!=
literal|null
condition|)
block|{
name|getDomain
argument_list|()
operator|.
name|toParent
operator|=
literal|true
expr_stmt|;
name|getDomain
argument_list|()
operator|.
name|parents
operator|=
name|blockParent
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|blockChildren
operator|!=
literal|null
condition|)
block|{
name|getDomain
argument_list|()
operator|.
name|toChildren
operator|=
literal|true
expr_stmt|;
name|getDomain
argument_list|()
operator|.
name|parents
operator|=
name|blockChildren
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|getField
specifier|public
name|String
name|getField
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|args
parameter_list|)
block|{
name|Object
name|fieldName
init|=
name|args
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
comment|// TODO: pull out into defined constant
if|if
condition|(
name|fieldName
operator|==
literal|null
condition|)
block|{
name|fieldName
operator|=
name|args
operator|.
name|get
argument_list|(
literal|"f"
argument_list|)
expr_stmt|;
comment|// short form
block|}
if|if
condition|(
name|fieldName
operator|==
literal|null
condition|)
block|{
throw|throw
name|err
argument_list|(
literal|"Missing 'field'"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|fieldName
operator|instanceof
name|String
operator|)
condition|)
block|{
throw|throw
name|err
argument_list|(
literal|"Expected string for 'field', got"
operator|+
name|fieldName
argument_list|)
throw|;
block|}
return|return
operator|(
name|String
operator|)
name|fieldName
return|;
block|}
DECL|method|getLongOrNull
specifier|public
name|Long
name|getLongOrNull
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|args
parameter_list|,
name|String
name|paramName
parameter_list|,
name|boolean
name|required
parameter_list|)
block|{
name|Object
name|o
init|=
name|args
operator|.
name|get
argument_list|(
name|paramName
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|required
condition|)
block|{
throw|throw
name|err
argument_list|(
literal|"Missing required parameter '"
operator|+
name|paramName
operator|+
literal|"'"
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|Long
operator|||
name|o
operator|instanceof
name|Integer
operator|||
name|o
operator|instanceof
name|Short
operator|||
name|o
operator|instanceof
name|Byte
operator|)
condition|)
block|{
throw|throw
name|err
argument_list|(
literal|"Expected integer type for param '"
operator|+
name|paramName
operator|+
literal|"' but got "
operator|+
name|o
argument_list|)
throw|;
block|}
return|return
operator|(
operator|(
name|Number
operator|)
name|o
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
DECL|method|getLong
specifier|public
name|long
name|getLong
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|args
parameter_list|,
name|String
name|paramName
parameter_list|,
name|long
name|defVal
parameter_list|)
block|{
name|Object
name|o
init|=
name|args
operator|.
name|get
argument_list|(
name|paramName
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
name|defVal
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|Long
operator|||
name|o
operator|instanceof
name|Integer
operator|||
name|o
operator|instanceof
name|Short
operator|||
name|o
operator|instanceof
name|Byte
operator|)
condition|)
block|{
throw|throw
name|err
argument_list|(
literal|"Expected integer type for param '"
operator|+
name|paramName
operator|+
literal|"' but got "
operator|+
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" = "
operator|+
name|o
argument_list|)
throw|;
block|}
return|return
operator|(
operator|(
name|Number
operator|)
name|o
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
DECL|method|getBoolean
specifier|public
name|boolean
name|getBoolean
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|args
parameter_list|,
name|String
name|paramName
parameter_list|,
name|boolean
name|defVal
parameter_list|)
block|{
name|Object
name|o
init|=
name|args
operator|.
name|get
argument_list|(
name|paramName
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
name|defVal
return|;
block|}
comment|// TODO: should we be more flexible and accept things like "true" (strings)?
comment|// Perhaps wait until the use case comes up.
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|Boolean
operator|)
condition|)
block|{
throw|throw
name|err
argument_list|(
literal|"Expected boolean type for param '"
operator|+
name|paramName
operator|+
literal|"' but got "
operator|+
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" = "
operator|+
name|o
argument_list|)
throw|;
block|}
return|return
operator|(
name|Boolean
operator|)
name|o
return|;
block|}
DECL|method|getString
specifier|public
name|String
name|getString
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|args
parameter_list|,
name|String
name|paramName
parameter_list|,
name|String
name|defVal
parameter_list|)
block|{
name|Object
name|o
init|=
name|args
operator|.
name|get
argument_list|(
name|paramName
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
name|defVal
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|String
operator|)
condition|)
block|{
throw|throw
name|err
argument_list|(
literal|"Expected string type for param '"
operator|+
name|paramName
operator|+
literal|"' but got "
operator|+
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" = "
operator|+
name|o
argument_list|)
throw|;
block|}
return|return
operator|(
name|String
operator|)
name|o
return|;
block|}
DECL|method|getStringList
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getStringList
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|args
parameter_list|,
name|String
name|paramName
parameter_list|)
block|{
name|Object
name|o
init|=
name|args
operator|.
name|get
argument_list|(
name|paramName
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|List
condition|)
block|{
return|return
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|o
return|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
return|return
name|StrUtils
operator|.
name|splitSmart
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|)
return|;
block|}
throw|throw
name|err
argument_list|(
literal|"Expected list of string or comma separated string values."
argument_list|)
throw|;
block|}
DECL|method|getSchema
specifier|public
name|IndexSchema
name|getSchema
parameter_list|()
block|{
return|return
name|parent
operator|.
name|getSchema
argument_list|()
return|;
block|}
DECL|method|getSolrRequest
specifier|public
name|SolrQueryRequest
name|getSolrRequest
parameter_list|()
block|{
return|return
name|parent
operator|.
name|getSolrRequest
argument_list|()
return|;
block|}
block|}
end_class
begin_class
DECL|class|FacetTopParser
class|class
name|FacetTopParser
extends|extends
name|FacetParser
argument_list|<
name|FacetQuery
argument_list|>
block|{
DECL|field|req
specifier|private
name|SolrQueryRequest
name|req
decl_stmt|;
DECL|method|FacetTopParser
specifier|public
name|FacetTopParser
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|,
literal|"facet"
argument_list|)
expr_stmt|;
name|this
operator|.
name|facet
operator|=
operator|new
name|FacetQuery
argument_list|()
expr_stmt|;
name|this
operator|.
name|req
operator|=
name|req
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parse
specifier|public
name|FacetQuery
name|parse
parameter_list|(
name|Object
name|args
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|parseSubs
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|facet
return|;
block|}
annotation|@
name|Override
DECL|method|getSolrRequest
specifier|public
name|SolrQueryRequest
name|getSolrRequest
parameter_list|()
block|{
return|return
name|req
return|;
block|}
annotation|@
name|Override
DECL|method|getSchema
specifier|public
name|IndexSchema
name|getSchema
parameter_list|()
block|{
return|return
name|req
operator|.
name|getSchema
argument_list|()
return|;
block|}
block|}
end_class
begin_class
DECL|class|FacetQueryParser
class|class
name|FacetQueryParser
extends|extends
name|FacetParser
argument_list|<
name|FacetQuery
argument_list|>
block|{
DECL|method|FacetQueryParser
specifier|public
name|FacetQueryParser
parameter_list|(
name|FacetParser
name|parent
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|facet
operator|=
operator|new
name|FacetQuery
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parse
specifier|public
name|FacetQuery
name|parse
parameter_list|(
name|Object
name|arg
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|parseCommonParams
argument_list|(
name|arg
argument_list|)
expr_stmt|;
name|String
name|qstring
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|arg
operator|instanceof
name|String
condition|)
block|{
comment|// just the field name...
name|qstring
operator|=
operator|(
name|String
operator|)
name|arg
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|instanceof
name|Map
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|arg
decl_stmt|;
name|qstring
operator|=
name|getString
argument_list|(
name|m
argument_list|,
literal|"q"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|qstring
operator|==
literal|null
condition|)
block|{
name|qstring
operator|=
name|getString
argument_list|(
name|m
argument_list|,
literal|"query"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// OK to parse subs before we have parsed our own query?
comment|// as long as subs don't need to know about it.
name|parseSubs
argument_list|(
name|m
operator|.
name|get
argument_list|(
literal|"facet"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO: substats that are from defaults!!!
if|if
condition|(
name|qstring
operator|!=
literal|null
condition|)
block|{
name|QParser
name|parser
init|=
name|QParser
operator|.
name|getParser
argument_list|(
name|qstring
argument_list|,
literal|null
argument_list|,
name|getSolrRequest
argument_list|()
argument_list|)
decl_stmt|;
name|facet
operator|.
name|q
operator|=
name|parser
operator|.
name|getQuery
argument_list|()
expr_stmt|;
block|}
return|return
name|facet
return|;
block|}
block|}
end_class
begin_comment
comment|/*** not a separate type of parser for now... class FacetBlockParentParser extends FacetParser<FacetBlockParent> {   public FacetBlockParentParser(FacetParser parent, String key) {     super(parent, key);     facet = new FacetBlockParent();   }    @Override   public FacetBlockParent parse(Object arg) throws SyntaxError {     parseCommonParams(arg);      if (arg instanceof String) {       // just the field name...       facet.parents = (String)arg;      } else if (arg instanceof Map) {       Map<String, Object> m = (Map<String, Object>) arg;       facet.parents = getString(m, "parents", null);        parseSubs( m.get("facet") );     }      return facet;   } } ***/
end_comment
begin_class
DECL|class|FacetFieldParser
class|class
name|FacetFieldParser
extends|extends
name|FacetParser
argument_list|<
name|FacetField
argument_list|>
block|{
DECL|method|FacetFieldParser
specifier|public
name|FacetFieldParser
parameter_list|(
name|FacetParser
name|parent
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|facet
operator|=
operator|new
name|FacetField
argument_list|()
expr_stmt|;
block|}
DECL|method|parse
specifier|public
name|FacetField
name|parse
parameter_list|(
name|Object
name|arg
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|parseCommonParams
argument_list|(
name|arg
argument_list|)
expr_stmt|;
if|if
condition|(
name|arg
operator|instanceof
name|String
condition|)
block|{
comment|// just the field name...
name|facet
operator|.
name|field
operator|=
operator|(
name|String
operator|)
name|arg
expr_stmt|;
name|parseSort
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// TODO: defaults
block|}
elseif|else
if|if
condition|(
name|arg
operator|instanceof
name|Map
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|arg
decl_stmt|;
name|facet
operator|.
name|field
operator|=
name|getField
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|facet
operator|.
name|offset
operator|=
name|getLong
argument_list|(
name|m
argument_list|,
literal|"offset"
argument_list|,
name|facet
operator|.
name|offset
argument_list|)
expr_stmt|;
name|facet
operator|.
name|limit
operator|=
name|getLong
argument_list|(
name|m
argument_list|,
literal|"limit"
argument_list|,
name|facet
operator|.
name|limit
argument_list|)
expr_stmt|;
if|if
condition|(
name|facet
operator|.
name|limit
operator|==
literal|0
condition|)
name|facet
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
comment|// normalize.  an offset with a limit of non-zero isn't useful.
name|facet
operator|.
name|mincount
operator|=
name|getLong
argument_list|(
name|m
argument_list|,
literal|"mincount"
argument_list|,
name|facet
operator|.
name|mincount
argument_list|)
expr_stmt|;
name|facet
operator|.
name|missing
operator|=
name|getBoolean
argument_list|(
name|m
argument_list|,
literal|"missing"
argument_list|,
name|facet
operator|.
name|missing
argument_list|)
expr_stmt|;
name|facet
operator|.
name|numBuckets
operator|=
name|getBoolean
argument_list|(
name|m
argument_list|,
literal|"numBuckets"
argument_list|,
name|facet
operator|.
name|numBuckets
argument_list|)
expr_stmt|;
name|facet
operator|.
name|prefix
operator|=
name|getString
argument_list|(
name|m
argument_list|,
literal|"prefix"
argument_list|,
name|facet
operator|.
name|prefix
argument_list|)
expr_stmt|;
name|facet
operator|.
name|allBuckets
operator|=
name|getBoolean
argument_list|(
name|m
argument_list|,
literal|"allBuckets"
argument_list|,
name|facet
operator|.
name|allBuckets
argument_list|)
expr_stmt|;
name|facet
operator|.
name|method
operator|=
name|FacetField
operator|.
name|FacetMethod
operator|.
name|fromString
argument_list|(
name|getString
argument_list|(
name|m
argument_list|,
literal|"method"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|facet
operator|.
name|cacheDf
operator|=
operator|(
name|int
operator|)
name|getLong
argument_list|(
name|m
argument_list|,
literal|"cacheDf"
argument_list|,
name|facet
operator|.
name|cacheDf
argument_list|)
expr_stmt|;
name|facet
operator|.
name|perSeg
operator|=
operator|(
name|Boolean
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"perSeg"
argument_list|)
expr_stmt|;
comment|// facet.sort may depend on a facet stat...
comment|// should we be parsing / validating this here, or in the execution environment?
name|Object
name|o
init|=
name|m
operator|.
name|get
argument_list|(
literal|"facet"
argument_list|)
decl_stmt|;
name|parseSubs
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|parseSort
argument_list|(
name|m
operator|.
name|get
argument_list|(
literal|"sort"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|facet
return|;
block|}
comment|// Sort specification is currently
comment|// sort : 'mystat desc'
comment|// OR
comment|// sort : { mystat : 'desc' }
DECL|method|parseSort
specifier|private
name|void
name|parseSort
parameter_list|(
name|Object
name|sort
parameter_list|)
block|{
if|if
condition|(
name|sort
operator|==
literal|null
condition|)
block|{
name|facet
operator|.
name|sortVariable
operator|=
literal|"count"
expr_stmt|;
name|facet
operator|.
name|sortDirection
operator|=
name|FacetField
operator|.
name|SortDirection
operator|.
name|desc
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|instanceof
name|String
condition|)
block|{
name|String
name|sortStr
init|=
operator|(
name|String
operator|)
name|sort
decl_stmt|;
if|if
condition|(
name|sortStr
operator|.
name|endsWith
argument_list|(
literal|" asc"
argument_list|)
condition|)
block|{
name|facet
operator|.
name|sortVariable
operator|=
name|sortStr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sortStr
operator|.
name|length
argument_list|()
operator|-
literal|" asc"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|facet
operator|.
name|sortDirection
operator|=
name|FacetField
operator|.
name|SortDirection
operator|.
name|asc
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sortStr
operator|.
name|endsWith
argument_list|(
literal|" desc"
argument_list|)
condition|)
block|{
name|facet
operator|.
name|sortVariable
operator|=
name|sortStr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sortStr
operator|.
name|length
argument_list|()
operator|-
literal|" desc"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|facet
operator|.
name|sortDirection
operator|=
name|FacetField
operator|.
name|SortDirection
operator|.
name|desc
expr_stmt|;
block|}
else|else
block|{
name|facet
operator|.
name|sortVariable
operator|=
name|sortStr
expr_stmt|;
name|facet
operator|.
name|sortDirection
operator|=
literal|"index"
operator|.
name|equals
argument_list|(
name|facet
operator|.
name|sortVariable
argument_list|)
condition|?
name|FacetField
operator|.
name|SortDirection
operator|.
name|asc
else|:
name|FacetField
operator|.
name|SortDirection
operator|.
name|desc
expr_stmt|;
comment|// default direction for "index" is ascending
block|}
block|}
else|else
block|{
comment|// sort : { myvar : 'desc' }
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|sort
decl_stmt|;
comment|// TODO: validate
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|k
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|v
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|facet
operator|.
name|sortVariable
operator|=
name|k
expr_stmt|;
name|facet
operator|.
name|sortDirection
operator|=
name|FacetField
operator|.
name|SortDirection
operator|.
name|valueOf
argument_list|(
name|v
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
begin_class
DECL|class|FacetRangeParser
class|class
name|FacetRangeParser
extends|extends
name|FacetParser
argument_list|<
name|FacetRange
argument_list|>
block|{
DECL|method|FacetRangeParser
specifier|public
name|FacetRangeParser
parameter_list|(
name|FacetParser
name|parent
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|facet
operator|=
operator|new
name|FacetRange
argument_list|()
expr_stmt|;
block|}
DECL|method|parse
specifier|public
name|FacetRange
name|parse
parameter_list|(
name|Object
name|arg
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|parseCommonParams
argument_list|(
name|arg
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|arg
operator|instanceof
name|Map
operator|)
condition|)
block|{
throw|throw
name|err
argument_list|(
literal|"Missing range facet arguments"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|arg
decl_stmt|;
name|facet
operator|.
name|field
operator|=
name|getString
argument_list|(
name|m
argument_list|,
literal|"field"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|facet
operator|.
name|start
operator|=
name|m
operator|.
name|get
argument_list|(
literal|"start"
argument_list|)
expr_stmt|;
name|facet
operator|.
name|end
operator|=
name|m
operator|.
name|get
argument_list|(
literal|"end"
argument_list|)
expr_stmt|;
name|facet
operator|.
name|gap
operator|=
name|m
operator|.
name|get
argument_list|(
literal|"gap"
argument_list|)
expr_stmt|;
name|facet
operator|.
name|hardend
operator|=
name|getBoolean
argument_list|(
name|m
argument_list|,
literal|"hardend"
argument_list|,
name|facet
operator|.
name|hardend
argument_list|)
expr_stmt|;
name|facet
operator|.
name|mincount
operator|=
name|getLong
argument_list|(
name|m
argument_list|,
literal|"mincount"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// TODO: refactor list-of-options code
name|Object
name|o
init|=
name|m
operator|.
name|get
argument_list|(
literal|"include"
argument_list|)
decl_stmt|;
name|String
index|[]
name|includeList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|List
name|lst
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|List
condition|)
block|{
name|lst
operator|=
operator|(
name|List
operator|)
name|o
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|lst
operator|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|,
literal|','
argument_list|)
expr_stmt|;
block|}
name|includeList
operator|=
operator|(
name|String
index|[]
operator|)
name|lst
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|lst
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
name|facet
operator|.
name|include
operator|=
name|FacetParams
operator|.
name|FacetRangeInclude
operator|.
name|parseParam
argument_list|(
name|includeList
argument_list|)
expr_stmt|;
name|facet
operator|.
name|others
operator|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|FacetParams
operator|.
name|FacetRangeOther
operator|.
name|class
argument_list|)
expr_stmt|;
name|o
operator|=
name|m
operator|.
name|get
argument_list|(
literal|"other"
argument_list|)
expr_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|lst
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|List
condition|)
block|{
name|lst
operator|=
operator|(
name|List
operator|)
name|o
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|lst
operator|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|,
literal|','
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|otherStr
range|:
name|lst
control|)
block|{
name|facet
operator|.
name|others
operator|.
name|add
argument_list|(
name|FacetParams
operator|.
name|FacetRangeOther
operator|.
name|get
argument_list|(
name|otherStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Object
name|facetObj
init|=
name|m
operator|.
name|get
argument_list|(
literal|"facet"
argument_list|)
decl_stmt|;
name|parseSubs
argument_list|(
name|facetObj
argument_list|)
expr_stmt|;
return|return
name|facet
return|;
block|}
block|}
end_class
end_unit
