begin_unit
begin_package
DECL|package|org.apache.solr.search.grouping.distributed.command
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|grouping
operator|.
name|distributed
operator|.
name|command
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|GroupDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|SearchGroup
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|TopGroups
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|mutable
operator|.
name|MutableValue
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|mutable
operator|.
name|MutableValueDate
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|mutable
operator|.
name|MutableValueDouble
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|mutable
operator|.
name|MutableValueFloat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|mutable
operator|.
name|MutableValueInt
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|mutable
operator|.
name|MutableValueLong
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|TrieField
import|;
end_import
begin_comment
comment|/**   * this is a transition class: for numeric types we use function-based distributed grouping,  * otherwise term-based. so for now we internally use function-based but pretend like we did   * it all with bytes, to not change any wire serialization etc.  */
end_comment
begin_class
DECL|class|GroupConverter
class|class
name|GroupConverter
block|{
DECL|method|fromMutable
specifier|static
name|Collection
argument_list|<
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
name|fromMutable
parameter_list|(
name|SchemaField
name|field
parameter_list|,
name|Collection
argument_list|<
name|SearchGroup
argument_list|<
name|MutableValue
argument_list|>
argument_list|>
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|FieldType
name|fieldType
init|=
name|field
operator|.
name|getType
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SearchGroup
argument_list|<
name|MutableValue
argument_list|>
name|original
range|:
name|values
control|)
block|{
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
name|converted
init|=
operator|new
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
argument_list|()
decl_stmt|;
name|converted
operator|.
name|sortValues
operator|=
name|original
operator|.
name|sortValues
expr_stmt|;
if|if
condition|(
name|original
operator|.
name|groupValue
operator|.
name|exists
condition|)
block|{
name|BytesRefBuilder
name|binary
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
name|fieldType
operator|.
name|readableToIndexed
argument_list|(
name|original
operator|.
name|groupValue
operator|.
name|toString
argument_list|()
argument_list|,
name|binary
argument_list|)
expr_stmt|;
name|converted
operator|.
name|groupValue
operator|=
name|binary
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|converted
operator|.
name|groupValue
operator|=
literal|null
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|converted
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|toMutable
specifier|static
name|Collection
argument_list|<
name|SearchGroup
argument_list|<
name|MutableValue
argument_list|>
argument_list|>
name|toMutable
parameter_list|(
name|SchemaField
name|field
parameter_list|,
name|Collection
argument_list|<
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
name|values
parameter_list|)
block|{
name|FieldType
name|fieldType
init|=
name|field
operator|.
name|getType
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SearchGroup
argument_list|<
name|MutableValue
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
name|original
range|:
name|values
control|)
block|{
name|SearchGroup
argument_list|<
name|MutableValue
argument_list|>
name|converted
init|=
operator|new
name|SearchGroup
argument_list|<
name|MutableValue
argument_list|>
argument_list|()
decl_stmt|;
name|converted
operator|.
name|sortValues
operator|=
name|original
operator|.
name|sortValues
expr_stmt|;
comment|// ?
name|TrieField
operator|.
name|TrieTypes
name|type
init|=
operator|(
operator|(
name|TrieField
operator|)
name|fieldType
operator|)
operator|.
name|getType
argument_list|()
decl_stmt|;
specifier|final
name|MutableValue
name|v
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|INTEGER
case|:
name|MutableValueInt
name|mutableInt
init|=
operator|new
name|MutableValueInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|original
operator|.
name|groupValue
operator|==
literal|null
condition|)
block|{
name|mutableInt
operator|.
name|value
operator|=
literal|0
expr_stmt|;
name|mutableInt
operator|.
name|exists
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|mutableInt
operator|.
name|value
operator|=
operator|(
name|Integer
operator|)
name|fieldType
operator|.
name|toObject
argument_list|(
name|field
argument_list|,
name|original
operator|.
name|groupValue
argument_list|)
expr_stmt|;
block|}
name|v
operator|=
name|mutableInt
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|MutableValueFloat
name|mutableFloat
init|=
operator|new
name|MutableValueFloat
argument_list|()
decl_stmt|;
if|if
condition|(
name|original
operator|.
name|groupValue
operator|==
literal|null
condition|)
block|{
name|mutableFloat
operator|.
name|value
operator|=
literal|0
expr_stmt|;
name|mutableFloat
operator|.
name|exists
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|mutableFloat
operator|.
name|value
operator|=
operator|(
name|Float
operator|)
name|fieldType
operator|.
name|toObject
argument_list|(
name|field
argument_list|,
name|original
operator|.
name|groupValue
argument_list|)
expr_stmt|;
block|}
name|v
operator|=
name|mutableFloat
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|MutableValueDouble
name|mutableDouble
init|=
operator|new
name|MutableValueDouble
argument_list|()
decl_stmt|;
if|if
condition|(
name|original
operator|.
name|groupValue
operator|==
literal|null
condition|)
block|{
name|mutableDouble
operator|.
name|value
operator|=
literal|0
expr_stmt|;
name|mutableDouble
operator|.
name|exists
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|mutableDouble
operator|.
name|value
operator|=
operator|(
name|Double
operator|)
name|fieldType
operator|.
name|toObject
argument_list|(
name|field
argument_list|,
name|original
operator|.
name|groupValue
argument_list|)
expr_stmt|;
block|}
name|v
operator|=
name|mutableDouble
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|MutableValueLong
name|mutableLong
init|=
operator|new
name|MutableValueLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|original
operator|.
name|groupValue
operator|==
literal|null
condition|)
block|{
name|mutableLong
operator|.
name|value
operator|=
literal|0
expr_stmt|;
name|mutableLong
operator|.
name|exists
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|mutableLong
operator|.
name|value
operator|=
operator|(
name|Long
operator|)
name|fieldType
operator|.
name|toObject
argument_list|(
name|field
argument_list|,
name|original
operator|.
name|groupValue
argument_list|)
expr_stmt|;
block|}
name|v
operator|=
name|mutableLong
expr_stmt|;
break|break;
case|case
name|DATE
case|:
name|MutableValueDate
name|mutableDate
init|=
operator|new
name|MutableValueDate
argument_list|()
decl_stmt|;
if|if
condition|(
name|original
operator|.
name|groupValue
operator|==
literal|null
condition|)
block|{
name|mutableDate
operator|.
name|value
operator|=
literal|0
expr_stmt|;
name|mutableDate
operator|.
name|exists
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|mutableDate
operator|.
name|value
operator|=
operator|(
operator|(
name|Date
operator|)
name|fieldType
operator|.
name|toObject
argument_list|(
name|field
argument_list|,
name|original
operator|.
name|groupValue
argument_list|)
operator|)
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
name|v
operator|=
name|mutableDate
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
name|converted
operator|.
name|groupValue
operator|=
name|v
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|converted
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|fromMutable
specifier|static
name|TopGroups
argument_list|<
name|BytesRef
argument_list|>
name|fromMutable
parameter_list|(
name|SchemaField
name|field
parameter_list|,
name|TopGroups
argument_list|<
name|MutableValue
argument_list|>
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|FieldType
name|fieldType
init|=
name|field
operator|.
name|getType
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|GroupDocs
argument_list|<
name|BytesRef
argument_list|>
name|groupDocs
index|[]
init|=
operator|new
name|GroupDocs
index|[
name|values
operator|.
name|groups
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|groups
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|GroupDocs
argument_list|<
name|MutableValue
argument_list|>
name|original
init|=
name|values
operator|.
name|groups
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|BytesRef
name|groupValue
decl_stmt|;
if|if
condition|(
name|original
operator|.
name|groupValue
operator|.
name|exists
condition|)
block|{
name|BytesRefBuilder
name|binary
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
name|fieldType
operator|.
name|readableToIndexed
argument_list|(
name|original
operator|.
name|groupValue
operator|.
name|toString
argument_list|()
argument_list|,
name|binary
argument_list|)
expr_stmt|;
name|groupValue
operator|=
name|binary
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|groupValue
operator|=
literal|null
expr_stmt|;
block|}
name|groupDocs
index|[
name|i
index|]
operator|=
operator|new
name|GroupDocs
argument_list|<
name|BytesRef
argument_list|>
argument_list|(
name|original
operator|.
name|score
argument_list|,
name|original
operator|.
name|maxScore
argument_list|,
name|original
operator|.
name|totalHits
argument_list|,
name|original
operator|.
name|scoreDocs
argument_list|,
name|groupValue
argument_list|,
name|original
operator|.
name|groupSortValues
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|TopGroups
argument_list|<
name|BytesRef
argument_list|>
argument_list|(
name|values
operator|.
name|groupSort
argument_list|,
name|values
operator|.
name|withinGroupSort
argument_list|,
name|values
operator|.
name|totalHitCount
argument_list|,
name|values
operator|.
name|totalGroupedHitCount
argument_list|,
name|groupDocs
argument_list|,
name|values
operator|.
name|maxScore
argument_list|)
return|;
block|}
block|}
end_class
end_unit
