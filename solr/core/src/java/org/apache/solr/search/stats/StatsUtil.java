begin_unit
begin_package
DECL|package|org.apache.solr.search.stats
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|stats
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Base64
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * Various utilities for de/serialization of term stats and collection stats.  */
end_comment
begin_class
DECL|class|StatsUtil
specifier|public
class|class
name|StatsUtil
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StatsSource
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Make a String representation of {@link CollectionStats}    */
DECL|method|colStatsToString
specifier|public
specifier|static
name|String
name|colStatsToString
parameter_list|(
name|CollectionStats
name|colStats
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|colStats
operator|.
name|field
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|colStats
operator|.
name|maxDoc
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|colStats
operator|.
name|docCount
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|colStats
operator|.
name|sumTotalTermFreq
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|colStats
operator|.
name|sumDocFreq
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|colStatsFromString
specifier|private
specifier|static
name|CollectionStats
name|colStatsFromString
parameter_list|(
name|String
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|data
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid empty collection stats string"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
index|[]
name|vals
init|=
name|data
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|vals
operator|.
name|length
operator|!=
literal|5
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid collection stats string, num fields "
operator|+
name|vals
operator|.
name|length
operator|+
literal|" != 5, '"
operator|+
name|data
operator|+
literal|"'"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
name|field
init|=
name|vals
index|[
literal|0
index|]
decl_stmt|;
try|try
block|{
name|long
name|maxDoc
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|vals
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|long
name|docCount
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|vals
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|long
name|sumTotalTermFreq
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|vals
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
name|long
name|sumDocFreq
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|vals
index|[
literal|4
index|]
argument_list|)
decl_stmt|;
return|return
operator|new
name|CollectionStats
argument_list|(
name|field
argument_list|,
name|maxDoc
argument_list|,
name|docCount
argument_list|,
name|sumTotalTermFreq
argument_list|,
name|sumDocFreq
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid collection stats string '"
operator|+
name|data
operator|+
literal|"': "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|termToString
specifier|public
specifier|static
name|String
name|termToString
parameter_list|(
name|Term
name|t
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|t
operator|.
name|field
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|BytesRef
name|bytes
init|=
name|t
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Base64
operator|.
name|byteArrayToBase64
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|,
name|bytes
operator|.
name|offset
argument_list|,
name|bytes
operator|.
name|offset
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|termFromString
specifier|private
specifier|static
name|Term
name|termFromString
parameter_list|(
name|String
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|data
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid empty term value"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|int
name|idx
init|=
name|data
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
operator|-
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid term data without ':': '"
operator|+
name|data
operator|+
literal|"'"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
name|field
init|=
name|data
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|data
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
return|return
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
return|;
comment|// XXX this would be more correct
comment|// byte[] bytes = Base64.base64ToByteArray(value);
comment|// return new Term(field, new BytesRef(bytes));
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid term value '"
operator|+
name|value
operator|+
literal|"'"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|termStatsToString
specifier|public
specifier|static
name|String
name|termStatsToString
parameter_list|(
name|TermStats
name|termStats
parameter_list|,
name|boolean
name|includeTerm
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeTerm
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|termStats
operator|.
name|term
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|termStats
operator|.
name|docFreq
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|termStats
operator|.
name|totalTermFreq
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|termStatsFromString
specifier|private
specifier|static
name|TermStats
name|termStatsFromString
parameter_list|(
name|String
name|data
parameter_list|,
name|Term
name|t
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|data
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid empty term stats string"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
index|[]
name|vals
init|=
name|data
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|vals
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid term stats string, num fields "
operator|+
name|vals
operator|.
name|length
operator|+
literal|"< 2, '"
operator|+
name|data
operator|+
literal|"'"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Term
name|termToUse
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|vals
operator|.
name|length
operator|==
literal|3
condition|)
block|{
name|idx
operator|++
expr_stmt|;
comment|// with term
name|Term
name|term
init|=
name|termFromString
argument_list|(
name|vals
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|term
operator|!=
literal|null
condition|)
block|{
name|termToUse
operator|=
name|term
expr_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
assert|assert
name|term
operator|.
name|equals
argument_list|(
name|t
argument_list|)
assert|;
block|}
block|}
else|else
block|{
comment|// failed term decoding
name|termToUse
operator|=
name|t
expr_stmt|;
block|}
block|}
else|else
block|{
name|termToUse
operator|=
name|t
expr_stmt|;
block|}
if|if
condition|(
name|termToUse
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Missing term in termStats '"
operator|+
name|data
operator|+
literal|"'"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
try|try
block|{
name|long
name|docFreq
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|vals
index|[
name|idx
operator|++
index|]
argument_list|)
decl_stmt|;
name|long
name|totalTermFreq
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|vals
index|[
name|idx
index|]
argument_list|)
decl_stmt|;
return|return
operator|new
name|TermStats
argument_list|(
name|termToUse
operator|.
name|toString
argument_list|()
argument_list|,
name|docFreq
argument_list|,
name|totalTermFreq
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid termStats string '"
operator|+
name|data
operator|+
literal|"'"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|colStatsMapFromString
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|CollectionStats
argument_list|>
name|colStatsMapFromString
parameter_list|(
name|String
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|data
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|CollectionStats
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CollectionStats
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|entries
init|=
name|data
operator|.
name|split
argument_list|(
literal|"!"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|es
range|:
name|entries
control|)
block|{
name|CollectionStats
name|stats
init|=
name|colStatsFromString
argument_list|(
name|es
argument_list|)
decl_stmt|;
if|if
condition|(
name|stats
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|stats
operator|.
name|field
argument_list|,
name|stats
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
DECL|method|colStatsMapToString
specifier|public
specifier|static
name|String
name|colStatsMapToString
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|CollectionStats
argument_list|>
name|stats
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|==
literal|null
operator|||
name|stats
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|CollectionStats
argument_list|>
name|e
range|:
name|stats
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'!'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|colStatsToString
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|termStatsMapFromString
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|TermStats
argument_list|>
name|termStatsMapFromString
parameter_list|(
name|String
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|data
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|TermStats
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
index|[]
name|entries
init|=
name|data
operator|.
name|split
argument_list|(
literal|"!"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|es
range|:
name|entries
control|)
block|{
name|TermStats
name|termStats
init|=
name|termStatsFromString
argument_list|(
name|es
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|termStats
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|termStats
operator|.
name|term
argument_list|,
name|termStats
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
DECL|method|termStatsMapToString
specifier|public
specifier|static
name|String
name|termStatsMapToString
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|TermStats
argument_list|>
name|stats
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|==
literal|null
operator|||
name|stats
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|TermStats
argument_list|>
name|e
range|:
name|stats
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'!'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|termStatsToString
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class
end_unit
