begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search.facet
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|facet
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_class
DECL|class|FacetDebugInfo
specifier|public
class|class
name|FacetDebugInfo
block|{
DECL|field|processor
name|String
name|processor
decl_stmt|;
DECL|field|elapse
name|long
name|elapse
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|filter
name|String
name|filter
decl_stmt|;
DECL|field|info
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|info
decl_stmt|;
comment|// additional information
DECL|field|children
specifier|final
name|List
argument_list|<
name|FacetDebugInfo
argument_list|>
name|children
decl_stmt|;
DECL|field|reqDescription
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|reqDescription
decl_stmt|;
DECL|method|FacetDebugInfo
specifier|public
name|FacetDebugInfo
parameter_list|()
block|{
name|children
operator|=
operator|new
name|ArrayList
argument_list|<
name|FacetDebugInfo
argument_list|>
argument_list|()
expr_stmt|;
name|info
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|addChild
specifier|public
name|void
name|addChild
parameter_list|(
name|FacetDebugInfo
name|child
parameter_list|)
block|{
name|children
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
DECL|method|setProcessor
specifier|public
name|void
name|setProcessor
parameter_list|(
name|String
name|processor
parameter_list|)
block|{
name|this
operator|.
name|processor
operator|=
name|processor
expr_stmt|;
block|}
DECL|method|setElapse
specifier|public
name|void
name|setElapse
parameter_list|(
name|long
name|elapse
parameter_list|)
block|{
name|this
operator|.
name|elapse
operator|=
name|elapse
expr_stmt|;
block|}
DECL|method|setReqDescription
specifier|public
name|void
name|setReqDescription
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|reqDescription
parameter_list|)
block|{
name|this
operator|.
name|reqDescription
operator|=
name|reqDescription
expr_stmt|;
block|}
DECL|method|setFilter
specifier|public
name|void
name|setFilter
parameter_list|(
name|String
name|filter
parameter_list|)
block|{
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
DECL|method|putInfoItem
specifier|public
name|void
name|putInfoItem
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|info
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|getInfo
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getInfo
parameter_list|()
block|{
return|return
name|info
return|;
block|}
DECL|method|getFacetDebugInfo
specifier|public
name|SimpleOrderedMap
name|getFacetDebugInfo
parameter_list|()
block|{
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|info
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
name|info
operator|.
name|add
argument_list|(
literal|"filter"
argument_list|,
name|filter
argument_list|)
expr_stmt|;
if|if
condition|(
name|processor
operator|!=
literal|null
condition|)
name|info
operator|.
name|add
argument_list|(
literal|"processor"
argument_list|,
name|processor
argument_list|)
expr_stmt|;
if|if
condition|(
name|elapse
operator|!=
operator|-
literal|1
condition|)
name|info
operator|.
name|add
argument_list|(
literal|"elapse"
argument_list|,
name|elapse
argument_list|)
expr_stmt|;
if|if
condition|(
name|reqDescription
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|addAll
argument_list|(
name|reqDescription
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
operator|&&
name|children
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|subfacet
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|info
operator|.
name|add
argument_list|(
literal|"sub-facet"
argument_list|,
name|subfacet
argument_list|)
expr_stmt|;
for|for
control|(
name|FacetDebugInfo
name|child
range|:
name|children
control|)
block|{
name|subfacet
operator|.
name|add
argument_list|(
name|child
operator|.
name|getFacetDebugInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|info
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"facet debug info: processor "
operator|+
name|processor
operator|+
literal|" elapse "
operator|+
name|elapse
operator|+
literal|"ms"
return|;
block|}
block|}
end_class
end_unit
