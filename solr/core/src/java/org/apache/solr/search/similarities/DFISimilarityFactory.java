begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search.similarities
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|similarities
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|DFISimilarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|Independence
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|IndependenceChiSquared
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|IndependenceSaturated
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|IndependenceStandardized
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|Similarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SimilarityFactory
import|;
end_import
begin_comment
comment|/**  * Factory for {@link DFISimilarity}  *<p>  * You must specify the measure of divergence from independence ("independenceMeasure")  *<ul>  *<li>"Standardized": {@link IndependenceStandardized}</li>  *<li>"Saturated": {@link IndependenceSaturated}</li>  *<li>"ChiSquared": {@link IndependenceChiSquared}</li>  *</ul>  * Optional settings:  *<ul>  *<li>discountOverlaps (bool): Sets {@link org.apache.lucene.search.similarities.SimilarityBase#setDiscountOverlaps(boolean)}</li>  *</ul>  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|DFISimilarityFactory
specifier|public
class|class
name|DFISimilarityFactory
extends|extends
name|SimilarityFactory
block|{
DECL|field|discountOverlaps
specifier|private
name|boolean
name|discountOverlaps
decl_stmt|;
DECL|field|independenceMeasure
specifier|private
name|Independence
name|independenceMeasure
decl_stmt|;
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|SolrParams
name|params
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|discountOverlaps
operator|=
name|params
operator|.
name|getBool
argument_list|(
name|ClassicSimilarityFactory
operator|.
name|DISCOUNT_OVERLAPS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|independenceMeasure
operator|=
name|parseIndependenceMeasure
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"independenceMeasure"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSimilarity
specifier|public
name|Similarity
name|getSimilarity
parameter_list|()
block|{
name|DFISimilarity
name|sim
init|=
operator|new
name|DFISimilarity
argument_list|(
name|independenceMeasure
argument_list|)
decl_stmt|;
name|sim
operator|.
name|setDiscountOverlaps
argument_list|(
name|discountOverlaps
argument_list|)
expr_stmt|;
return|return
name|sim
return|;
block|}
DECL|method|parseIndependenceMeasure
specifier|private
name|Independence
name|parseIndependenceMeasure
parameter_list|(
name|String
name|expr
parameter_list|)
block|{
if|if
condition|(
literal|"ChiSquared"
operator|.
name|equals
argument_list|(
name|expr
argument_list|)
condition|)
block|{
return|return
operator|new
name|IndependenceChiSquared
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
literal|"Standardized"
operator|.
name|equals
argument_list|(
name|expr
argument_list|)
condition|)
block|{
return|return
operator|new
name|IndependenceStandardized
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
literal|"Saturated"
operator|.
name|equals
argument_list|(
name|expr
argument_list|)
condition|)
block|{
return|return
operator|new
name|IndependenceSaturated
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid independence measure: "
operator|+
name|expr
argument_list|)
throw|;
block|}
block|}
block|}
end_class
end_unit
