begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search.join
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|join
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValuesType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|JoinUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|ScoreMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|uninverting
operator|.
name|UninvertingReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|LocalSolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|JoinQParserPlugin
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|QParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|QParserPlugin
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SyntaxError
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import
begin_comment
comment|/**  * Create a query-time join query with scoring.   * It just calls  {@link JoinUtil#createJoinQuery(String, boolean, String, Query, org.apache.lucene.search.IndexSearcher, ScoreMode)}.  * It runs subordinate query and collects values of "from"  field and scores, then it lookups these collected values in "to" field, and  * yields aggregated scores.  * Local parameters are similar to {@link JoinQParserPlugin}<a href="http://wiki.apache.org/solr/Join">{!join}</a>  * This plugin doesn't have own name, and is called by specifying local parameter<code>{!join score=...}...</code>.   * Note: this parser is invoked even if you specify<code>score=none</code>.  *<br>Example:<code>q={!join from=manu_id_s to=id score=total}foo</code>  *<ul>  *<li>from - "foreign key" field name to collect values while enumerating subordinate query (denoted as<code>foo</code> in example above).  *             it's better to have this field declared as<code>type="string" docValues="true"</code>.  *             note: if<a href="http://wiki.apache.org/solr/DocValues">docValues</a> are not enabled for this field, it will work anyway,   *             but it costs some memory for {@link UninvertingReader}.   *             Also, numeric doc values are not supported until<a href="https://issues.apache.org/jira/browse/LUCENE-5868">LUCENE-5868</a>.  *             Thus, it only supports {@link DocValuesType#SORTED}, {@link DocValuesType#SORTED_SET}, {@link DocValuesType#BINARY}.</li>  *<li>fromIndex - optional parameter, a core name where subordinate query should run (and<code>from</code> values are collected) rather than current core.  *<br>Example:<code>q={!join from=manu_id_s to=id score=total fromIndex=products}foo</code>   *<br>Follow up<a href="https://issues.apache.org/jira/browse/SOLR-7775">SOLR-7775</a> for SolrCloud collections support.</li>  *<li>to - "primary key" field name which is searched for values collected from subordinate query.   *             it should be declared as<code>indexed="true"</code>. Now it's treated as a single value field.</li>  *<li>score - one of {@link ScoreMode}: None,Avg,Total,Max. Lowercase is also accepted.</li>  *</ul>  */
end_comment
begin_class
DECL|class|ScoreJoinQParserPlugin
specifier|public
class|class
name|ScoreJoinQParserPlugin
extends|extends
name|QParserPlugin
block|{
DECL|field|SCORE
specifier|public
specifier|static
specifier|final
name|String
name|SCORE
init|=
literal|"score"
decl_stmt|;
DECL|class|OtherCoreJoinQuery
specifier|static
class|class
name|OtherCoreJoinQuery
extends|extends
name|SameCoreJoinQuery
block|{
DECL|field|fromIndex
specifier|private
specifier|final
name|String
name|fromIndex
decl_stmt|;
DECL|field|fromCoreOpenTime
specifier|private
specifier|final
name|long
name|fromCoreOpenTime
decl_stmt|;
DECL|method|OtherCoreJoinQuery
specifier|public
name|OtherCoreJoinQuery
parameter_list|(
name|Query
name|fromQuery
parameter_list|,
name|String
name|fromField
parameter_list|,
name|String
name|fromIndex
parameter_list|,
name|long
name|fromCoreOpenTime
parameter_list|,
name|ScoreMode
name|scoreMode
parameter_list|,
name|String
name|toField
parameter_list|)
block|{
name|super
argument_list|(
name|fromQuery
argument_list|,
name|fromField
argument_list|,
name|toField
argument_list|,
name|scoreMode
argument_list|)
expr_stmt|;
name|this
operator|.
name|fromIndex
operator|=
name|fromIndex
expr_stmt|;
name|this
operator|.
name|fromCoreOpenTime
operator|=
name|fromCoreOpenTime
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrRequestInfo
name|info
init|=
name|SolrRequestInfo
operator|.
name|getRequestInfo
argument_list|()
decl_stmt|;
name|CoreContainer
name|container
init|=
name|info
operator|.
name|getReq
argument_list|()
operator|.
name|getCore
argument_list|()
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
decl_stmt|;
specifier|final
name|SolrCore
name|fromCore
init|=
name|container
operator|.
name|getCore
argument_list|(
name|fromIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromCore
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Cross-core join: no such core "
operator|+
name|fromIndex
argument_list|)
throw|;
block|}
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|fromHolder
init|=
literal|null
decl_stmt|;
name|fromHolder
operator|=
name|fromCore
operator|.
name|getRegisteredSearcher
argument_list|()
expr_stmt|;
specifier|final
name|Query
name|joinQuery
decl_stmt|;
try|try
block|{
name|joinQuery
operator|=
name|JoinUtil
operator|.
name|createJoinQuery
argument_list|(
name|fromField
argument_list|,
literal|true
argument_list|,
name|toField
argument_list|,
name|fromQuery
argument_list|,
name|fromHolder
operator|.
name|get
argument_list|()
argument_list|,
name|scoreMode
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fromCore
operator|.
name|close
argument_list|()
expr_stmt|;
name|fromHolder
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
name|joinQuery
operator|.
name|setBoost
argument_list|(
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|joinQuery
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
name|super
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
call|(
name|int
call|)
argument_list|(
name|fromCoreOpenTime
operator|^
operator|(
name|fromCoreOpenTime
operator|>>>
literal|32
operator|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|fromIndex
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|fromIndex
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|OtherCoreJoinQuery
name|other
init|=
operator|(
name|OtherCoreJoinQuery
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|fromCoreOpenTime
operator|!=
name|other
operator|.
name|fromCoreOpenTime
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|fromIndex
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|fromIndex
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|fromIndex
operator|.
name|equals
argument_list|(
name|other
operator|.
name|fromIndex
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
literal|"OtherCoreJoinQuery [fromIndex="
operator|+
name|fromIndex
operator|+
literal|", fromCoreOpenTime="
operator|+
name|fromCoreOpenTime
operator|+
literal|" extends "
operator|+
name|super
operator|.
name|toString
argument_list|(
name|field
argument_list|)
operator|+
literal|"]"
return|;
block|}
block|}
DECL|class|SameCoreJoinQuery
specifier|static
class|class
name|SameCoreJoinQuery
extends|extends
name|Query
block|{
DECL|field|fromQuery
specifier|protected
specifier|final
name|Query
name|fromQuery
decl_stmt|;
DECL|field|scoreMode
specifier|protected
specifier|final
name|ScoreMode
name|scoreMode
decl_stmt|;
DECL|field|fromField
specifier|protected
specifier|final
name|String
name|fromField
decl_stmt|;
DECL|field|toField
specifier|protected
specifier|final
name|String
name|toField
decl_stmt|;
DECL|method|SameCoreJoinQuery
name|SameCoreJoinQuery
parameter_list|(
name|Query
name|fromQuery
parameter_list|,
name|String
name|fromField
parameter_list|,
name|String
name|toField
parameter_list|,
name|ScoreMode
name|scoreMode
parameter_list|)
block|{
name|this
operator|.
name|fromQuery
operator|=
name|fromQuery
expr_stmt|;
name|this
operator|.
name|scoreMode
operator|=
name|scoreMode
expr_stmt|;
name|this
operator|.
name|fromField
operator|=
name|fromField
expr_stmt|;
name|this
operator|.
name|toField
operator|=
name|toField
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrRequestInfo
name|info
init|=
name|SolrRequestInfo
operator|.
name|getRequestInfo
argument_list|()
decl_stmt|;
specifier|final
name|Query
name|jq
init|=
name|JoinUtil
operator|.
name|createJoinQuery
argument_list|(
name|fromField
argument_list|,
literal|true
argument_list|,
name|toField
argument_list|,
name|fromQuery
argument_list|,
name|info
operator|.
name|getReq
argument_list|()
operator|.
name|getSearcher
argument_list|()
argument_list|,
name|scoreMode
argument_list|)
decl_stmt|;
name|jq
operator|.
name|setBoost
argument_list|(
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|jq
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
literal|"SameCoreJoinQuery [fromQuery="
operator|+
name|fromQuery
operator|+
literal|", fromField="
operator|+
name|fromField
operator|+
literal|", toField="
operator|+
name|toField
operator|+
literal|", scoreMode="
operator|+
name|scoreMode
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
name|super
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|fromField
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|fromField
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|fromQuery
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|fromQuery
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|scoreMode
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|scoreMode
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|toField
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|toField
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|SameCoreJoinQuery
name|other
init|=
operator|(
name|SameCoreJoinQuery
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|fromField
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|fromField
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|fromField
operator|.
name|equals
argument_list|(
name|other
operator|.
name|fromField
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|fromQuery
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|fromQuery
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|fromQuery
operator|.
name|equals
argument_list|(
name|other
operator|.
name|fromQuery
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|scoreMode
operator|!=
name|other
operator|.
name|scoreMode
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|toField
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|toField
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|toField
operator|.
name|equals
argument_list|(
name|other
operator|.
name|toField
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{   }
annotation|@
name|Override
DECL|method|createParser
specifier|public
name|QParser
name|createParser
parameter_list|(
name|String
name|qstr
parameter_list|,
name|SolrParams
name|localParams
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|)
block|{
return|return
operator|new
name|QParser
argument_list|(
name|qstr
argument_list|,
name|localParams
argument_list|,
name|params
argument_list|,
name|req
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Query
name|parse
parameter_list|()
throws|throws
name|SyntaxError
block|{
specifier|final
name|String
name|fromField
init|=
name|localParams
operator|.
name|get
argument_list|(
literal|"from"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|fromIndex
init|=
name|localParams
operator|.
name|get
argument_list|(
literal|"fromIndex"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|toField
init|=
name|localParams
operator|.
name|get
argument_list|(
literal|"to"
argument_list|)
decl_stmt|;
specifier|final
name|ScoreMode
name|scoreMode
init|=
name|ScoreModeParser
operator|.
name|parse
argument_list|(
name|getParam
argument_list|(
name|SCORE
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|v
init|=
name|localParams
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|VALUE
argument_list|)
decl_stmt|;
specifier|final
name|Query
name|q
init|=
name|createQuery
argument_list|(
name|fromField
argument_list|,
name|v
argument_list|,
name|fromIndex
argument_list|,
name|toField
argument_list|,
name|scoreMode
argument_list|,
name|CommonParams
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|localParams
operator|.
name|get
argument_list|(
literal|"TESTenforceSameCoreAsAnotherOne"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|q
return|;
block|}
specifier|private
name|Query
name|createQuery
parameter_list|(
specifier|final
name|String
name|fromField
parameter_list|,
specifier|final
name|String
name|fromQueryStr
parameter_list|,
name|String
name|fromIndex
parameter_list|,
specifier|final
name|String
name|toField
parameter_list|,
specifier|final
name|ScoreMode
name|scoreMode
parameter_list|,
name|boolean
name|byPassShortCircutCheck
parameter_list|)
throws|throws
name|SyntaxError
block|{
specifier|final
name|String
name|myCore
init|=
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|fromIndex
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|fromIndex
operator|.
name|equals
argument_list|(
name|myCore
argument_list|)
operator|||
name|byPassShortCircutCheck
operator|)
condition|)
block|{
name|CoreContainer
name|container
init|=
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
decl_stmt|;
specifier|final
name|SolrCore
name|fromCore
init|=
name|container
operator|.
name|getCore
argument_list|(
name|fromIndex
argument_list|)
decl_stmt|;
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|fromHolder
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fromCore
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Cross-core join: no such core "
operator|+
name|fromIndex
argument_list|)
throw|;
block|}
name|long
name|fromCoreOpenTime
init|=
literal|0
decl_stmt|;
name|LocalSolrQueryRequest
name|otherReq
init|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|fromCore
argument_list|,
name|params
argument_list|)
decl_stmt|;
try|try
block|{
name|QParser
name|fromQueryParser
init|=
name|QParser
operator|.
name|getParser
argument_list|(
name|fromQueryStr
argument_list|,
literal|"lucene"
argument_list|,
name|otherReq
argument_list|)
decl_stmt|;
name|Query
name|fromQuery
init|=
name|fromQueryParser
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|fromHolder
operator|=
name|fromCore
operator|.
name|getRegisteredSearcher
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromHolder
operator|!=
literal|null
condition|)
block|{
name|fromCoreOpenTime
operator|=
name|fromHolder
operator|.
name|get
argument_list|()
operator|.
name|getOpenTime
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|OtherCoreJoinQuery
argument_list|(
name|fromQuery
argument_list|,
name|fromField
argument_list|,
name|fromIndex
argument_list|,
name|fromCoreOpenTime
argument_list|,
name|scoreMode
argument_list|,
name|toField
argument_list|)
return|;
block|}
finally|finally
block|{
name|otherReq
operator|.
name|close
argument_list|()
expr_stmt|;
name|fromCore
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromHolder
operator|!=
literal|null
condition|)
name|fromHolder
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|QParser
name|fromQueryParser
init|=
name|subQuery
argument_list|(
name|fromQueryStr
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|Query
name|fromQuery
init|=
name|fromQueryParser
operator|.
name|getQuery
argument_list|()
decl_stmt|;
return|return
operator|new
name|SameCoreJoinQuery
argument_list|(
name|fromQuery
argument_list|,
name|fromField
argument_list|,
name|toField
argument_list|,
name|scoreMode
argument_list|)
return|;
block|}
block|}
block|}
return|;
block|}
block|}
end_class
end_unit
