begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|distance
operator|.
name|DistanceUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|BoostedQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|FunctionValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|docvalues
operator|.
name|BoolDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|docvalues
operator|.
name|DoubleDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|docvalues
operator|.
name|LongDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|valuesource
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|JaroWinklerDistance
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|LevensteinDistance
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|NGramDistance
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|StringDistance
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|function
operator|.
name|distance
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|NamedListInitializedPlugin
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * A factory that parses user queries to generate ValueSource instances.  * Intended usage is to create pluggable, named functions for use in function queries.  */
end_comment
begin_class
DECL|class|ValueSourceParser
specifier|public
specifier|abstract
class|class
name|ValueSourceParser
implements|implements
name|NamedListInitializedPlugin
block|{
comment|/**    * Initialize the plugin.    */
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{}
comment|/**    * Parse the user input into a ValueSource.    */
DECL|method|parse
specifier|public
specifier|abstract
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
function_decl|;
comment|/* standard functions */
DECL|field|standardValueSourceParsers
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|ValueSourceParser
argument_list|>
name|standardValueSourceParsers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ValueSourceParser
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Adds a new parser for the name and returns any existing one that was overriden.    *  This is not thread safe.    */
DECL|method|addParser
specifier|public
specifier|static
name|ValueSourceParser
name|addParser
parameter_list|(
name|String
name|name
parameter_list|,
name|ValueSourceParser
name|p
parameter_list|)
block|{
return|return
name|standardValueSourceParsers
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|p
argument_list|)
return|;
block|}
comment|/** Adds a new parser for the name and returns any existing one that was overriden.    *  This is not thread safe.    */
DECL|method|addParser
specifier|public
specifier|static
name|ValueSourceParser
name|addParser
parameter_list|(
name|NamedParser
name|p
parameter_list|)
block|{
return|return
name|standardValueSourceParsers
operator|.
name|put
argument_list|(
name|p
operator|.
name|name
argument_list|()
argument_list|,
name|p
argument_list|)
return|;
block|}
DECL|method|alias
specifier|private
specifier|static
name|void
name|alias
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|dest
parameter_list|)
block|{
name|standardValueSourceParsers
operator|.
name|put
argument_list|(
name|dest
argument_list|,
name|standardValueSourceParsers
operator|.
name|get
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
static|static
block|{
name|addParser
argument_list|(
literal|"testfunc"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
specifier|final
name|ValueSource
name|source
init|=
name|fp
operator|.
name|parseValueSource
argument_list|()
decl_stmt|;
return|return
operator|new
name|TestValueSource
argument_list|(
name|source
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"ord"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|String
name|field
init|=
name|fp
operator|.
name|parseId
argument_list|()
decl_stmt|;
return|return
operator|new
name|OrdFieldSource
argument_list|(
name|field
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"literal"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
return|return
operator|new
name|LiteralValueSource
argument_list|(
name|fp
operator|.
name|parseArg
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"threadid"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
return|return
operator|new
name|LongConstValueSource
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"sleep"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|int
name|ms
init|=
name|fp
operator|.
name|parseInt
argument_list|()
decl_stmt|;
name|ValueSource
name|source
init|=
name|fp
operator|.
name|parseValueSource
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|ms
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|source
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"rord"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|String
name|field
init|=
name|fp
operator|.
name|parseId
argument_list|()
decl_stmt|;
return|return
operator|new
name|ReverseOrdFieldSource
argument_list|(
name|field
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"top"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
comment|// top(vs) is now a no-op
name|ValueSource
name|source
init|=
name|fp
operator|.
name|parseValueSource
argument_list|()
decl_stmt|;
return|return
name|source
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"linear"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|ValueSource
name|source
init|=
name|fp
operator|.
name|parseValueSource
argument_list|()
decl_stmt|;
name|float
name|slope
init|=
name|fp
operator|.
name|parseFloat
argument_list|()
decl_stmt|;
name|float
name|intercept
init|=
name|fp
operator|.
name|parseFloat
argument_list|()
decl_stmt|;
return|return
operator|new
name|LinearFloatFunction
argument_list|(
name|source
argument_list|,
name|slope
argument_list|,
name|intercept
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"recip"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|ValueSource
name|source
init|=
name|fp
operator|.
name|parseValueSource
argument_list|()
decl_stmt|;
name|float
name|m
init|=
name|fp
operator|.
name|parseFloat
argument_list|()
decl_stmt|;
name|float
name|a
init|=
name|fp
operator|.
name|parseFloat
argument_list|()
decl_stmt|;
name|float
name|b
init|=
name|fp
operator|.
name|parseFloat
argument_list|()
decl_stmt|;
return|return
operator|new
name|ReciprocalFloatFunction
argument_list|(
name|source
argument_list|,
name|m
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"scale"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|ValueSource
name|source
init|=
name|fp
operator|.
name|parseValueSource
argument_list|()
decl_stmt|;
name|float
name|min
init|=
name|fp
operator|.
name|parseFloat
argument_list|()
decl_stmt|;
name|float
name|max
init|=
name|fp
operator|.
name|parseFloat
argument_list|()
decl_stmt|;
return|return
operator|new
name|ScaleFloatFunction
argument_list|(
name|source
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"div"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|ValueSource
name|a
init|=
name|fp
operator|.
name|parseValueSource
argument_list|()
decl_stmt|;
name|ValueSource
name|b
init|=
name|fp
operator|.
name|parseValueSource
argument_list|()
decl_stmt|;
return|return
operator|new
name|DivFloatFunction
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"mod"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|ValueSource
name|a
init|=
name|fp
operator|.
name|parseValueSource
argument_list|()
decl_stmt|;
name|ValueSource
name|b
init|=
name|fp
operator|.
name|parseValueSource
argument_list|()
decl_stmt|;
return|return
operator|new
name|DualFloatFunction
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|String
name|name
parameter_list|()
block|{
return|return
literal|"mod"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|float
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|aVals
parameter_list|,
name|FunctionValues
name|bVals
parameter_list|)
block|{
return|return
name|aVals
operator|.
name|floatVal
argument_list|(
name|doc
argument_list|)
operator|%
name|bVals
operator|.
name|floatVal
argument_list|(
name|doc
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"map"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|ValueSource
name|source
init|=
name|fp
operator|.
name|parseValueSource
argument_list|()
decl_stmt|;
name|float
name|min
init|=
name|fp
operator|.
name|parseFloat
argument_list|()
decl_stmt|;
name|float
name|max
init|=
name|fp
operator|.
name|parseFloat
argument_list|()
decl_stmt|;
name|float
name|target
init|=
name|fp
operator|.
name|parseFloat
argument_list|()
decl_stmt|;
name|Float
name|def
init|=
name|fp
operator|.
name|hasMoreArguments
argument_list|()
condition|?
name|fp
operator|.
name|parseFloat
argument_list|()
else|:
literal|null
decl_stmt|;
return|return
operator|new
name|RangeMapFloatFunction
argument_list|(
name|source
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|target
argument_list|,
name|def
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"abs"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|ValueSource
name|source
init|=
name|fp
operator|.
name|parseValueSource
argument_list|()
decl_stmt|;
return|return
operator|new
name|SimpleFloatFunction
argument_list|(
name|source
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|String
name|name
parameter_list|()
block|{
return|return
literal|"abs"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|float
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|vals
parameter_list|)
block|{
return|return
name|Math
operator|.
name|abs
argument_list|(
name|vals
operator|.
name|floatVal
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"sum"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|List
argument_list|<
name|ValueSource
argument_list|>
name|sources
init|=
name|fp
operator|.
name|parseValueSourceList
argument_list|()
decl_stmt|;
return|return
operator|new
name|SumFloatFunction
argument_list|(
name|sources
operator|.
name|toArray
argument_list|(
operator|new
name|ValueSource
index|[
name|sources
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|alias
argument_list|(
literal|"sum"
argument_list|,
literal|"add"
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"product"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|List
argument_list|<
name|ValueSource
argument_list|>
name|sources
init|=
name|fp
operator|.
name|parseValueSourceList
argument_list|()
decl_stmt|;
return|return
operator|new
name|ProductFloatFunction
argument_list|(
name|sources
operator|.
name|toArray
argument_list|(
operator|new
name|ValueSource
index|[
name|sources
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|alias
argument_list|(
literal|"product"
argument_list|,
literal|"mul"
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"sub"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|ValueSource
name|a
init|=
name|fp
operator|.
name|parseValueSource
argument_list|()
decl_stmt|;
name|ValueSource
name|b
init|=
name|fp
operator|.
name|parseValueSource
argument_list|()
decl_stmt|;
return|return
operator|new
name|DualFloatFunction
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|String
name|name
parameter_list|()
block|{
return|return
literal|"sub"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|float
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|aVals
parameter_list|,
name|FunctionValues
name|bVals
parameter_list|)
block|{
return|return
name|aVals
operator|.
name|floatVal
argument_list|(
name|doc
argument_list|)
operator|-
name|bVals
operator|.
name|floatVal
argument_list|(
name|doc
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"vector"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
return|return
operator|new
name|VectorValueSource
argument_list|(
name|fp
operator|.
name|parseValueSourceList
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"query"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
comment|// boost(query($q),rating)
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|Query
name|q
init|=
name|fp
operator|.
name|parseNestedQuery
argument_list|()
decl_stmt|;
name|float
name|defVal
init|=
literal|0.0f
decl_stmt|;
if|if
condition|(
name|fp
operator|.
name|hasMoreArguments
argument_list|()
condition|)
block|{
name|defVal
operator|=
name|fp
operator|.
name|parseFloat
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|QueryValueSource
argument_list|(
name|q
argument_list|,
name|defVal
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"boost"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|Query
name|q
init|=
name|fp
operator|.
name|parseNestedQuery
argument_list|()
decl_stmt|;
name|ValueSource
name|vs
init|=
name|fp
operator|.
name|parseValueSource
argument_list|()
decl_stmt|;
name|BoostedQuery
name|bq
init|=
operator|new
name|BoostedQuery
argument_list|(
name|q
argument_list|,
name|vs
argument_list|)
decl_stmt|;
return|return
operator|new
name|QueryValueSource
argument_list|(
name|bq
argument_list|,
literal|0.0f
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"joindf"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|String
name|f0
init|=
name|fp
operator|.
name|parseArg
argument_list|()
decl_stmt|;
name|String
name|qf
init|=
name|fp
operator|.
name|parseArg
argument_list|()
decl_stmt|;
return|return
operator|new
name|JoinDocFreqValueSource
argument_list|(
name|f0
argument_list|,
name|qf
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"geodist"
argument_list|,
name|HaversineConstFunction
operator|.
name|parser
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"hsin"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|double
name|radius
init|=
name|fp
operator|.
name|parseDouble
argument_list|()
decl_stmt|;
comment|//SOLR-2114, make the convert flag required, since the parser doesn't support much in the way of lookahead or the ability to convert a String into a ValueSource
name|boolean
name|convert
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|fp
operator|.
name|parseArg
argument_list|()
argument_list|)
decl_stmt|;
name|MultiValueSource
name|pv1
decl_stmt|;
name|MultiValueSource
name|pv2
decl_stmt|;
name|ValueSource
name|one
init|=
name|fp
operator|.
name|parseValueSource
argument_list|()
decl_stmt|;
name|ValueSource
name|two
init|=
name|fp
operator|.
name|parseValueSource
argument_list|()
decl_stmt|;
if|if
condition|(
name|fp
operator|.
name|hasMoreArguments
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ValueSource
argument_list|>
name|s1
init|=
operator|new
name|ArrayList
argument_list|<
name|ValueSource
argument_list|>
argument_list|()
decl_stmt|;
name|s1
operator|.
name|add
argument_list|(
name|one
argument_list|)
expr_stmt|;
name|s1
operator|.
name|add
argument_list|(
name|two
argument_list|)
expr_stmt|;
name|pv1
operator|=
operator|new
name|VectorValueSource
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|ValueSource
name|x2
init|=
name|fp
operator|.
name|parseValueSource
argument_list|()
decl_stmt|;
name|ValueSource
name|y2
init|=
name|fp
operator|.
name|parseValueSource
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ValueSource
argument_list|>
name|s2
init|=
operator|new
name|ArrayList
argument_list|<
name|ValueSource
argument_list|>
argument_list|()
decl_stmt|;
name|s2
operator|.
name|add
argument_list|(
name|x2
argument_list|)
expr_stmt|;
name|s2
operator|.
name|add
argument_list|(
name|y2
argument_list|)
expr_stmt|;
name|pv2
operator|=
operator|new
name|VectorValueSource
argument_list|(
name|s2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//check to see if we have multiValue source
if|if
condition|(
name|one
operator|instanceof
name|MultiValueSource
operator|&&
name|two
operator|instanceof
name|MultiValueSource
condition|)
block|{
name|pv1
operator|=
operator|(
name|MultiValueSource
operator|)
name|one
expr_stmt|;
name|pv2
operator|=
operator|(
name|MultiValueSource
operator|)
name|two
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Input must either be 2 MultiValueSources, or there must be 4 ValueSources"
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|HaversineFunction
argument_list|(
name|pv1
argument_list|,
name|pv2
argument_list|,
name|radius
argument_list|,
name|convert
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"ghhsin"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|double
name|radius
init|=
name|fp
operator|.
name|parseDouble
argument_list|()
decl_stmt|;
name|ValueSource
name|gh1
init|=
name|fp
operator|.
name|parseValueSource
argument_list|()
decl_stmt|;
name|ValueSource
name|gh2
init|=
name|fp
operator|.
name|parseValueSource
argument_list|()
decl_stmt|;
return|return
operator|new
name|GeohashHaversineFunction
argument_list|(
name|gh1
argument_list|,
name|gh2
argument_list|,
name|radius
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"geohash"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|ValueSource
name|lat
init|=
name|fp
operator|.
name|parseValueSource
argument_list|()
decl_stmt|;
name|ValueSource
name|lon
init|=
name|fp
operator|.
name|parseValueSource
argument_list|()
decl_stmt|;
return|return
operator|new
name|GeohashFunction
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"strdist"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|ValueSource
name|str1
init|=
name|fp
operator|.
name|parseValueSource
argument_list|()
decl_stmt|;
name|ValueSource
name|str2
init|=
name|fp
operator|.
name|parseValueSource
argument_list|()
decl_stmt|;
name|String
name|distClass
init|=
name|fp
operator|.
name|parseArg
argument_list|()
decl_stmt|;
name|StringDistance
name|dist
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|distClass
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"jw"
argument_list|)
condition|)
block|{
name|dist
operator|=
operator|new
name|JaroWinklerDistance
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|distClass
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"edit"
argument_list|)
condition|)
block|{
name|dist
operator|=
operator|new
name|LevensteinDistance
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|distClass
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"ngram"
argument_list|)
condition|)
block|{
name|int
name|ngram
init|=
literal|2
decl_stmt|;
if|if
condition|(
name|fp
operator|.
name|hasMoreArguments
argument_list|()
condition|)
block|{
name|ngram
operator|=
name|fp
operator|.
name|parseInt
argument_list|()
expr_stmt|;
block|}
name|dist
operator|=
operator|new
name|NGramDistance
argument_list|(
name|ngram
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dist
operator|=
name|fp
operator|.
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|newInstance
argument_list|(
name|distClass
argument_list|,
name|StringDistance
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|StringDistanceFunction
argument_list|(
name|str1
argument_list|,
name|str2
argument_list|,
name|dist
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"field"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|String
name|fieldName
init|=
name|fp
operator|.
name|parseArg
argument_list|()
decl_stmt|;
name|SchemaField
name|f
init|=
name|fp
operator|.
name|getReq
argument_list|()
operator|.
name|getSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
return|return
name|f
operator|.
name|getType
argument_list|()
operator|.
name|getValueSource
argument_list|(
name|f
argument_list|,
name|fp
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
operator|new
name|DoubleParser
argument_list|(
literal|"rad"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|double
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|vals
parameter_list|)
block|{
return|return
name|vals
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
operator|*
name|DistanceUtils
operator|.
name|DEGREES_TO_RADIANS
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
operator|new
name|DoubleParser
argument_list|(
literal|"deg"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|double
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|vals
parameter_list|)
block|{
return|return
name|vals
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
operator|*
name|DistanceUtils
operator|.
name|RADIANS_TO_DEGREES
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
operator|new
name|DoubleParser
argument_list|(
literal|"sqrt"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|double
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|vals
parameter_list|)
block|{
return|return
name|Math
operator|.
name|sqrt
argument_list|(
name|vals
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
operator|new
name|DoubleParser
argument_list|(
literal|"cbrt"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|double
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|vals
parameter_list|)
block|{
return|return
name|Math
operator|.
name|cbrt
argument_list|(
name|vals
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
operator|new
name|DoubleParser
argument_list|(
literal|"log"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|double
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|vals
parameter_list|)
block|{
return|return
name|Math
operator|.
name|log10
argument_list|(
name|vals
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
operator|new
name|DoubleParser
argument_list|(
literal|"ln"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|double
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|vals
parameter_list|)
block|{
return|return
name|Math
operator|.
name|log
argument_list|(
name|vals
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
operator|new
name|DoubleParser
argument_list|(
literal|"exp"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|double
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|vals
parameter_list|)
block|{
return|return
name|Math
operator|.
name|exp
argument_list|(
name|vals
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
operator|new
name|DoubleParser
argument_list|(
literal|"sin"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|double
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|vals
parameter_list|)
block|{
return|return
name|Math
operator|.
name|sin
argument_list|(
name|vals
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
operator|new
name|DoubleParser
argument_list|(
literal|"cos"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|double
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|vals
parameter_list|)
block|{
return|return
name|Math
operator|.
name|cos
argument_list|(
name|vals
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
operator|new
name|DoubleParser
argument_list|(
literal|"tan"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|double
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|vals
parameter_list|)
block|{
return|return
name|Math
operator|.
name|tan
argument_list|(
name|vals
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
operator|new
name|DoubleParser
argument_list|(
literal|"asin"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|double
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|vals
parameter_list|)
block|{
return|return
name|Math
operator|.
name|asin
argument_list|(
name|vals
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
operator|new
name|DoubleParser
argument_list|(
literal|"acos"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|double
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|vals
parameter_list|)
block|{
return|return
name|Math
operator|.
name|acos
argument_list|(
name|vals
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
operator|new
name|DoubleParser
argument_list|(
literal|"atan"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|double
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|vals
parameter_list|)
block|{
return|return
name|Math
operator|.
name|atan
argument_list|(
name|vals
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
operator|new
name|DoubleParser
argument_list|(
literal|"sinh"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|double
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|vals
parameter_list|)
block|{
return|return
name|Math
operator|.
name|sinh
argument_list|(
name|vals
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
operator|new
name|DoubleParser
argument_list|(
literal|"cosh"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|double
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|vals
parameter_list|)
block|{
return|return
name|Math
operator|.
name|cosh
argument_list|(
name|vals
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
operator|new
name|DoubleParser
argument_list|(
literal|"tanh"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|double
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|vals
parameter_list|)
block|{
return|return
name|Math
operator|.
name|tanh
argument_list|(
name|vals
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
operator|new
name|DoubleParser
argument_list|(
literal|"ceil"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|double
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|vals
parameter_list|)
block|{
return|return
name|Math
operator|.
name|ceil
argument_list|(
name|vals
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
operator|new
name|DoubleParser
argument_list|(
literal|"floor"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|double
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|vals
parameter_list|)
block|{
return|return
name|Math
operator|.
name|floor
argument_list|(
name|vals
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
operator|new
name|DoubleParser
argument_list|(
literal|"rint"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|double
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|vals
parameter_list|)
block|{
return|return
name|Math
operator|.
name|rint
argument_list|(
name|vals
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
operator|new
name|Double2Parser
argument_list|(
literal|"pow"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|double
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|a
parameter_list|,
name|FunctionValues
name|b
parameter_list|)
block|{
return|return
name|Math
operator|.
name|pow
argument_list|(
name|a
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|,
name|b
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
operator|new
name|Double2Parser
argument_list|(
literal|"hypot"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|double
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|a
parameter_list|,
name|FunctionValues
name|b
parameter_list|)
block|{
return|return
name|Math
operator|.
name|hypot
argument_list|(
name|a
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|,
name|b
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
operator|new
name|Double2Parser
argument_list|(
literal|"atan2"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|double
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|a
parameter_list|,
name|FunctionValues
name|b
parameter_list|)
block|{
return|return
name|Math
operator|.
name|atan2
argument_list|(
name|a
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|,
name|b
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"max"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|List
argument_list|<
name|ValueSource
argument_list|>
name|sources
init|=
name|fp
operator|.
name|parseValueSourceList
argument_list|()
decl_stmt|;
return|return
operator|new
name|MaxFloatFunction
argument_list|(
name|sources
operator|.
name|toArray
argument_list|(
operator|new
name|ValueSource
index|[
name|sources
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"min"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|List
argument_list|<
name|ValueSource
argument_list|>
name|sources
init|=
name|fp
operator|.
name|parseValueSourceList
argument_list|()
decl_stmt|;
return|return
operator|new
name|MinFloatFunction
argument_list|(
name|sources
operator|.
name|toArray
argument_list|(
operator|new
name|ValueSource
index|[
name|sources
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"sqedist"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|List
argument_list|<
name|ValueSource
argument_list|>
name|sources
init|=
name|fp
operator|.
name|parseValueSourceList
argument_list|()
decl_stmt|;
name|MVResult
name|mvr
init|=
name|getMultiValueSources
argument_list|(
name|sources
argument_list|)
decl_stmt|;
return|return
operator|new
name|SquaredEuclideanFunction
argument_list|(
name|mvr
operator|.
name|mv1
argument_list|,
name|mvr
operator|.
name|mv2
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"dist"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|float
name|power
init|=
name|fp
operator|.
name|parseFloat
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ValueSource
argument_list|>
name|sources
init|=
name|fp
operator|.
name|parseValueSourceList
argument_list|()
decl_stmt|;
name|MVResult
name|mvr
init|=
name|getMultiValueSources
argument_list|(
name|sources
argument_list|)
decl_stmt|;
return|return
operator|new
name|VectorDistanceFunction
argument_list|(
name|power
argument_list|,
name|mvr
operator|.
name|mv1
argument_list|,
name|mvr
operator|.
name|mv2
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"ms"
argument_list|,
operator|new
name|DateValueSourceParser
argument_list|()
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"pi"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
block|{
return|return
operator|new
name|DoubleConstValueSource
argument_list|(
name|Math
operator|.
name|PI
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"e"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
block|{
return|return
operator|new
name|DoubleConstValueSource
argument_list|(
name|Math
operator|.
name|E
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"docfreq"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|TInfo
name|tinfo
init|=
name|parseTerm
argument_list|(
name|fp
argument_list|)
decl_stmt|;
return|return
operator|new
name|DocFreqValueSource
argument_list|(
name|tinfo
operator|.
name|field
argument_list|,
name|tinfo
operator|.
name|val
argument_list|,
name|tinfo
operator|.
name|indexedField
argument_list|,
name|tinfo
operator|.
name|indexedBytes
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"totaltermfreq"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|TInfo
name|tinfo
init|=
name|parseTerm
argument_list|(
name|fp
argument_list|)
decl_stmt|;
return|return
operator|new
name|TotalTermFreqValueSource
argument_list|(
name|tinfo
operator|.
name|field
argument_list|,
name|tinfo
operator|.
name|val
argument_list|,
name|tinfo
operator|.
name|indexedField
argument_list|,
name|tinfo
operator|.
name|indexedBytes
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|alias
argument_list|(
literal|"totaltermfreq"
argument_list|,
literal|"ttf"
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"sumtotaltermfreq"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|String
name|field
init|=
name|fp
operator|.
name|parseArg
argument_list|()
decl_stmt|;
return|return
operator|new
name|SumTotalTermFreqValueSource
argument_list|(
name|field
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|alias
argument_list|(
literal|"sumtotaltermfreq"
argument_list|,
literal|"sttf"
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"idf"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|TInfo
name|tinfo
init|=
name|parseTerm
argument_list|(
name|fp
argument_list|)
decl_stmt|;
return|return
operator|new
name|IDFValueSource
argument_list|(
name|tinfo
operator|.
name|field
argument_list|,
name|tinfo
operator|.
name|val
argument_list|,
name|tinfo
operator|.
name|indexedField
argument_list|,
name|tinfo
operator|.
name|indexedBytes
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"termfreq"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|TInfo
name|tinfo
init|=
name|parseTerm
argument_list|(
name|fp
argument_list|)
decl_stmt|;
return|return
operator|new
name|TermFreqValueSource
argument_list|(
name|tinfo
operator|.
name|field
argument_list|,
name|tinfo
operator|.
name|val
argument_list|,
name|tinfo
operator|.
name|indexedField
argument_list|,
name|tinfo
operator|.
name|indexedBytes
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"tf"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|TInfo
name|tinfo
init|=
name|parseTerm
argument_list|(
name|fp
argument_list|)
decl_stmt|;
return|return
operator|new
name|TFValueSource
argument_list|(
name|tinfo
operator|.
name|field
argument_list|,
name|tinfo
operator|.
name|val
argument_list|,
name|tinfo
operator|.
name|indexedField
argument_list|,
name|tinfo
operator|.
name|indexedBytes
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"norm"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|String
name|field
init|=
name|fp
operator|.
name|parseArg
argument_list|()
decl_stmt|;
return|return
operator|new
name|NormValueSource
argument_list|(
name|field
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"maxdoc"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
block|{
return|return
operator|new
name|MaxDocValueSource
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"numdocs"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
block|{
return|return
operator|new
name|NumDocsValueSource
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"true"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
block|{
return|return
operator|new
name|BoolConstValueSource
argument_list|(
literal|true
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"false"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
block|{
return|return
operator|new
name|BoolConstValueSource
argument_list|(
literal|false
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"exists"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|ValueSource
name|vs
init|=
name|fp
operator|.
name|parseValueSource
argument_list|()
decl_stmt|;
return|return
operator|new
name|SimpleBoolFunction
argument_list|(
name|vs
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|String
name|name
parameter_list|()
block|{
return|return
literal|"exists"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|vals
parameter_list|)
block|{
return|return
name|vals
operator|.
name|exists
argument_list|(
name|doc
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"not"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|ValueSource
name|vs
init|=
name|fp
operator|.
name|parseValueSource
argument_list|()
decl_stmt|;
return|return
operator|new
name|SimpleBoolFunction
argument_list|(
name|vs
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|vals
parameter_list|)
block|{
return|return
operator|!
name|vals
operator|.
name|boolVal
argument_list|(
name|doc
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|name
parameter_list|()
block|{
return|return
literal|"not"
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"and"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|List
argument_list|<
name|ValueSource
argument_list|>
name|sources
init|=
name|fp
operator|.
name|parseValueSourceList
argument_list|()
decl_stmt|;
return|return
operator|new
name|MultiBoolFunction
argument_list|(
name|sources
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|String
name|name
parameter_list|()
block|{
return|return
literal|"and"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
index|[]
name|vals
parameter_list|)
block|{
for|for
control|(
name|FunctionValues
name|dv
range|:
name|vals
control|)
if|if
condition|(
operator|!
name|dv
operator|.
name|boolVal
argument_list|(
name|doc
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"or"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|List
argument_list|<
name|ValueSource
argument_list|>
name|sources
init|=
name|fp
operator|.
name|parseValueSourceList
argument_list|()
decl_stmt|;
return|return
operator|new
name|MultiBoolFunction
argument_list|(
name|sources
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|String
name|name
parameter_list|()
block|{
return|return
literal|"or"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
index|[]
name|vals
parameter_list|)
block|{
for|for
control|(
name|FunctionValues
name|dv
range|:
name|vals
control|)
if|if
condition|(
name|dv
operator|.
name|boolVal
argument_list|(
name|doc
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"xor"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|List
argument_list|<
name|ValueSource
argument_list|>
name|sources
init|=
name|fp
operator|.
name|parseValueSourceList
argument_list|()
decl_stmt|;
return|return
operator|new
name|MultiBoolFunction
argument_list|(
name|sources
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|String
name|name
parameter_list|()
block|{
return|return
literal|"xor"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
index|[]
name|vals
parameter_list|)
block|{
name|int
name|nTrue
init|=
literal|0
decl_stmt|,
name|nFalse
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FunctionValues
name|dv
range|:
name|vals
control|)
block|{
if|if
condition|(
name|dv
operator|.
name|boolVal
argument_list|(
name|doc
argument_list|)
condition|)
name|nTrue
operator|++
expr_stmt|;
else|else
name|nFalse
operator|++
expr_stmt|;
block|}
return|return
name|nTrue
operator|!=
literal|0
operator|&&
name|nFalse
operator|!=
literal|0
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"if"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|ValueSource
name|ifValueSource
init|=
name|fp
operator|.
name|parseValueSource
argument_list|()
decl_stmt|;
name|ValueSource
name|trueValueSource
init|=
name|fp
operator|.
name|parseValueSource
argument_list|()
decl_stmt|;
name|ValueSource
name|falseValueSource
init|=
name|fp
operator|.
name|parseValueSource
argument_list|()
decl_stmt|;
return|return
operator|new
name|IfFunction
argument_list|(
name|ifValueSource
argument_list|,
name|trueValueSource
argument_list|,
name|falseValueSource
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addParser
argument_list|(
literal|"def"
argument_list|,
operator|new
name|ValueSourceParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
return|return
operator|new
name|DefFunction
argument_list|(
name|fp
operator|.
name|parseValueSourceList
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|parseTerm
specifier|private
specifier|static
name|TInfo
name|parseTerm
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|TInfo
name|tinfo
init|=
operator|new
name|TInfo
argument_list|()
decl_stmt|;
name|tinfo
operator|.
name|indexedField
operator|=
name|tinfo
operator|.
name|field
operator|=
name|fp
operator|.
name|parseArg
argument_list|()
expr_stmt|;
name|tinfo
operator|.
name|val
operator|=
name|fp
operator|.
name|parseArg
argument_list|()
expr_stmt|;
name|tinfo
operator|.
name|indexedBytes
operator|=
operator|new
name|BytesRef
argument_list|()
expr_stmt|;
name|FieldType
name|ft
init|=
name|fp
operator|.
name|getReq
argument_list|()
operator|.
name|getSchema
argument_list|()
operator|.
name|getFieldTypeNoEx
argument_list|(
name|tinfo
operator|.
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|ft
operator|==
literal|null
condition|)
name|ft
operator|=
operator|new
name|StrField
argument_list|()
expr_stmt|;
if|if
condition|(
name|ft
operator|instanceof
name|TextField
condition|)
block|{
comment|// need to do analysis on the term
name|String
name|indexedVal
init|=
name|tinfo
operator|.
name|val
decl_stmt|;
name|Query
name|q
init|=
name|ft
operator|.
name|getFieldQuery
argument_list|(
name|fp
argument_list|,
name|fp
operator|.
name|getReq
argument_list|()
operator|.
name|getSchema
argument_list|()
operator|.
name|getFieldOrNull
argument_list|(
name|tinfo
operator|.
name|field
argument_list|)
argument_list|,
name|tinfo
operator|.
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|instanceof
name|TermQuery
condition|)
block|{
name|Term
name|term
init|=
operator|(
operator|(
name|TermQuery
operator|)
name|q
operator|)
operator|.
name|getTerm
argument_list|()
decl_stmt|;
name|tinfo
operator|.
name|indexedField
operator|=
name|term
operator|.
name|field
argument_list|()
expr_stmt|;
name|indexedVal
operator|=
name|term
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
name|UnicodeUtil
operator|.
name|UTF16toUTF8
argument_list|(
name|indexedVal
argument_list|,
literal|0
argument_list|,
name|indexedVal
operator|.
name|length
argument_list|()
argument_list|,
name|tinfo
operator|.
name|indexedBytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ft
operator|.
name|readableToIndexed
argument_list|(
name|tinfo
operator|.
name|val
argument_list|,
name|tinfo
operator|.
name|indexedBytes
argument_list|)
expr_stmt|;
block|}
return|return
name|tinfo
return|;
block|}
DECL|method|splitSources
specifier|private
specifier|static
name|void
name|splitSources
parameter_list|(
name|int
name|dim
parameter_list|,
name|List
argument_list|<
name|ValueSource
argument_list|>
name|sources
parameter_list|,
name|List
argument_list|<
name|ValueSource
argument_list|>
name|dest1
parameter_list|,
name|List
argument_list|<
name|ValueSource
argument_list|>
name|dest2
parameter_list|)
block|{
comment|//Get dim value sources for the first vector
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dim
condition|;
name|i
operator|++
control|)
block|{
name|dest1
operator|.
name|add
argument_list|(
name|sources
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Get dim value sources for the second vector
for|for
control|(
name|int
name|i
init|=
name|dim
init|;
name|i
operator|<
name|sources
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|dest2
operator|.
name|add
argument_list|(
name|sources
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getMultiValueSources
specifier|private
specifier|static
name|MVResult
name|getMultiValueSources
parameter_list|(
name|List
argument_list|<
name|ValueSource
argument_list|>
name|sources
parameter_list|)
block|{
name|MVResult
name|mvr
init|=
operator|new
name|MVResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|sources
operator|.
name|size
argument_list|()
operator|%
literal|2
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Illegal number of sources.  There must be an even number of sources"
argument_list|)
throw|;
block|}
if|if
condition|(
name|sources
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
comment|//check to see if these are MultiValueSource
name|boolean
name|s1MV
init|=
name|sources
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|MultiValueSource
decl_stmt|;
name|boolean
name|s2MV
init|=
name|sources
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|MultiValueSource
decl_stmt|;
if|if
condition|(
name|s1MV
operator|&&
name|s2MV
condition|)
block|{
name|mvr
operator|.
name|mv1
operator|=
operator|(
name|MultiValueSource
operator|)
name|sources
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|mvr
operator|.
name|mv2
operator|=
operator|(
name|MultiValueSource
operator|)
name|sources
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s1MV
operator|||
name|s2MV
condition|)
block|{
comment|//if one is a MultiValueSource, than the other one needs to be too.
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Illegal number of sources.  There must be an even number of sources"
argument_list|)
throw|;
block|}
else|else
block|{
name|mvr
operator|.
name|mv1
operator|=
operator|new
name|VectorValueSource
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|sources
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mvr
operator|.
name|mv2
operator|=
operator|new
name|VectorValueSource
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|sources
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|dim
init|=
name|sources
operator|.
name|size
argument_list|()
operator|/
literal|2
decl_stmt|;
name|List
argument_list|<
name|ValueSource
argument_list|>
name|sources1
init|=
operator|new
name|ArrayList
argument_list|<
name|ValueSource
argument_list|>
argument_list|(
name|dim
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ValueSource
argument_list|>
name|sources2
init|=
operator|new
name|ArrayList
argument_list|<
name|ValueSource
argument_list|>
argument_list|(
name|dim
argument_list|)
decl_stmt|;
comment|//Get dim value sources for the first vector
name|splitSources
argument_list|(
name|dim
argument_list|,
name|sources
argument_list|,
name|sources1
argument_list|,
name|sources2
argument_list|)
expr_stmt|;
name|mvr
operator|.
name|mv1
operator|=
operator|new
name|VectorValueSource
argument_list|(
name|sources1
argument_list|)
expr_stmt|;
name|mvr
operator|.
name|mv2
operator|=
operator|new
name|VectorValueSource
argument_list|(
name|sources2
argument_list|)
expr_stmt|;
block|}
return|return
name|mvr
return|;
block|}
DECL|class|MVResult
specifier|private
specifier|static
class|class
name|MVResult
block|{
DECL|field|mv1
name|MultiValueSource
name|mv1
decl_stmt|;
DECL|field|mv2
name|MultiValueSource
name|mv2
decl_stmt|;
block|}
DECL|class|TInfo
specifier|private
specifier|static
class|class
name|TInfo
block|{
DECL|field|field
name|String
name|field
decl_stmt|;
DECL|field|val
name|String
name|val
decl_stmt|;
DECL|field|indexedField
name|String
name|indexedField
decl_stmt|;
DECL|field|indexedBytes
name|BytesRef
name|indexedBytes
decl_stmt|;
block|}
block|}
end_class
begin_class
DECL|class|DateValueSourceParser
class|class
name|DateValueSourceParser
extends|extends
name|ValueSourceParser
block|{
DECL|field|df
name|DateField
name|df
init|=
operator|new
name|TrieDateField
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{   }
DECL|method|getDate
specifier|public
name|Date
name|getDate
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|,
name|String
name|arg
parameter_list|)
block|{
if|if
condition|(
name|arg
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
literal|"NOW"
argument_list|)
operator|||
operator|(
name|arg
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|Character
operator|.
name|isDigit
argument_list|(
name|arg
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|)
condition|)
block|{
return|return
name|df
operator|.
name|parseMathLenient
argument_list|(
literal|null
argument_list|,
name|arg
argument_list|,
name|fp
operator|.
name|req
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getValueSource
specifier|public
name|ValueSource
name|getValueSource
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|,
name|String
name|arg
parameter_list|)
block|{
if|if
condition|(
name|arg
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|SchemaField
name|f
init|=
name|fp
operator|.
name|req
operator|.
name|getSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|arg
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|getType
argument_list|()
operator|.
name|getClass
argument_list|()
operator|==
name|DateField
operator|.
name|class
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Can't use ms() function on non-numeric legacy date field "
operator|+
name|arg
argument_list|)
throw|;
block|}
return|return
name|f
operator|.
name|getType
argument_list|()
operator|.
name|getValueSource
argument_list|(
name|f
argument_list|,
name|fp
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|parse
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|String
name|first
init|=
name|fp
operator|.
name|parseArg
argument_list|()
decl_stmt|;
name|String
name|second
init|=
name|fp
operator|.
name|parseArg
argument_list|()
decl_stmt|;
if|if
condition|(
name|first
operator|==
literal|null
condition|)
name|first
operator|=
literal|"NOW"
expr_stmt|;
name|Date
name|d1
init|=
name|getDate
argument_list|(
name|fp
argument_list|,
name|first
argument_list|)
decl_stmt|;
name|ValueSource
name|v1
init|=
name|d1
operator|==
literal|null
condition|?
name|getValueSource
argument_list|(
name|fp
argument_list|,
name|first
argument_list|)
else|:
literal|null
decl_stmt|;
name|Date
name|d2
init|=
name|getDate
argument_list|(
name|fp
argument_list|,
name|second
argument_list|)
decl_stmt|;
name|ValueSource
name|v2
init|=
name|d2
operator|==
literal|null
condition|?
name|getValueSource
argument_list|(
name|fp
argument_list|,
name|second
argument_list|)
else|:
literal|null
decl_stmt|;
comment|// d     constant
comment|// v     field
comment|// dd    constant
comment|// dv    subtract field from constant
comment|// vd    subtract constant from field
comment|// vv    subtract fields
specifier|final
name|long
name|ms1
init|=
operator|(
name|d1
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|d1
operator|.
name|getTime
argument_list|()
decl_stmt|;
specifier|final
name|long
name|ms2
init|=
operator|(
name|d2
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|d2
operator|.
name|getTime
argument_list|()
decl_stmt|;
comment|// "d,dd" handle both constant cases
if|if
condition|(
name|d1
operator|!=
literal|null
operator|&&
name|v2
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|LongConstValueSource
argument_list|(
name|ms1
operator|-
name|ms2
argument_list|)
return|;
block|}
comment|// "v" just the date field
if|if
condition|(
name|v1
operator|!=
literal|null
operator|&&
name|v2
operator|==
literal|null
operator|&&
name|d2
operator|==
literal|null
condition|)
block|{
return|return
name|v1
return|;
block|}
comment|// "dv"
if|if
condition|(
name|d1
operator|!=
literal|null
operator|&&
name|v2
operator|!=
literal|null
condition|)
return|return
operator|new
name|DualFloatFunction
argument_list|(
operator|new
name|LongConstValueSource
argument_list|(
name|ms1
argument_list|)
argument_list|,
name|v2
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|String
name|name
parameter_list|()
block|{
return|return
literal|"ms"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|float
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|aVals
parameter_list|,
name|FunctionValues
name|bVals
parameter_list|)
block|{
return|return
name|ms1
operator|-
name|bVals
operator|.
name|longVal
argument_list|(
name|doc
argument_list|)
return|;
block|}
block|}
return|;
comment|// "vd"
if|if
condition|(
name|v1
operator|!=
literal|null
operator|&&
name|d2
operator|!=
literal|null
condition|)
return|return
operator|new
name|DualFloatFunction
argument_list|(
name|v1
argument_list|,
operator|new
name|LongConstValueSource
argument_list|(
name|ms2
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|String
name|name
parameter_list|()
block|{
return|return
literal|"ms"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|float
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|aVals
parameter_list|,
name|FunctionValues
name|bVals
parameter_list|)
block|{
return|return
name|aVals
operator|.
name|longVal
argument_list|(
name|doc
argument_list|)
operator|-
name|ms2
return|;
block|}
block|}
return|;
comment|// "vv"
if|if
condition|(
name|v1
operator|!=
literal|null
operator|&&
name|v2
operator|!=
literal|null
condition|)
return|return
operator|new
name|DualFloatFunction
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|String
name|name
parameter_list|()
block|{
return|return
literal|"ms"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|float
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|aVals
parameter_list|,
name|FunctionValues
name|bVals
parameter_list|)
block|{
return|return
name|aVals
operator|.
name|longVal
argument_list|(
name|doc
argument_list|)
operator|-
name|bVals
operator|.
name|longVal
argument_list|(
name|doc
argument_list|)
return|;
block|}
block|}
return|;
return|return
literal|null
return|;
comment|// shouldn't happen
block|}
block|}
end_class
begin_comment
comment|// Private for now - we need to revisit how to handle typing in function queries
end_comment
begin_class
DECL|class|LongConstValueSource
class|class
name|LongConstValueSource
extends|extends
name|ConstNumberSource
block|{
DECL|field|constant
specifier|final
name|long
name|constant
decl_stmt|;
DECL|field|dv
specifier|final
name|double
name|dv
decl_stmt|;
DECL|field|fv
specifier|final
name|float
name|fv
decl_stmt|;
DECL|method|LongConstValueSource
specifier|public
name|LongConstValueSource
parameter_list|(
name|long
name|constant
parameter_list|)
block|{
name|this
operator|.
name|constant
operator|=
name|constant
expr_stmt|;
name|this
operator|.
name|dv
operator|=
name|constant
expr_stmt|;
name|this
operator|.
name|fv
operator|=
name|constant
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|description
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
literal|"const("
operator|+
name|constant
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|getValues
specifier|public
name|FunctionValues
name|getValues
parameter_list|(
name|Map
name|context
parameter_list|,
name|AtomicReaderContext
name|readerContext
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|LongDocValues
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|float
name|floatVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|fv
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|intVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|constant
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|longVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|constant
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|doubleVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|dv
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|description
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|constant
operator|+
call|(
name|int
call|)
argument_list|(
name|constant
operator|>>>
literal|32
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|LongConstValueSource
operator|.
name|class
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|LongConstValueSource
name|other
init|=
operator|(
name|LongConstValueSource
operator|)
name|o
decl_stmt|;
return|return
name|this
operator|.
name|constant
operator|==
name|other
operator|.
name|constant
return|;
block|}
annotation|@
name|Override
DECL|method|getInt
specifier|public
name|int
name|getInt
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|constant
return|;
block|}
annotation|@
name|Override
DECL|method|getLong
specifier|public
name|long
name|getLong
parameter_list|()
block|{
return|return
name|constant
return|;
block|}
annotation|@
name|Override
DECL|method|getFloat
specifier|public
name|float
name|getFloat
parameter_list|()
block|{
return|return
name|fv
return|;
block|}
annotation|@
name|Override
DECL|method|getDouble
specifier|public
name|double
name|getDouble
parameter_list|()
block|{
return|return
name|dv
return|;
block|}
annotation|@
name|Override
DECL|method|getNumber
specifier|public
name|Number
name|getNumber
parameter_list|()
block|{
return|return
name|constant
return|;
block|}
annotation|@
name|Override
DECL|method|getBool
specifier|public
name|boolean
name|getBool
parameter_list|()
block|{
return|return
name|constant
operator|!=
literal|0
return|;
block|}
block|}
end_class
begin_class
DECL|class|NamedParser
specifier|abstract
class|class
name|NamedParser
extends|extends
name|ValueSourceParser
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|NamedParser
specifier|public
name|NamedParser
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
end_class
begin_class
DECL|class|DoubleParser
specifier|abstract
class|class
name|DoubleParser
extends|extends
name|NamedParser
block|{
DECL|method|DoubleParser
specifier|public
name|DoubleParser
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|func
specifier|public
specifier|abstract
name|double
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|vals
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|parse
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
return|return
operator|new
name|Function
argument_list|(
name|fp
operator|.
name|parseValueSource
argument_list|()
argument_list|)
return|;
block|}
DECL|class|Function
class|class
name|Function
extends|extends
name|SingleFunction
block|{
DECL|method|Function
specifier|public
name|Function
parameter_list|(
name|ValueSource
name|source
parameter_list|)
block|{
name|super
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|DoubleParser
operator|.
name|this
operator|.
name|name
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getValues
specifier|public
name|FunctionValues
name|getValues
parameter_list|(
name|Map
name|context
parameter_list|,
name|AtomicReaderContext
name|readerContext
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FunctionValues
name|vals
init|=
name|source
operator|.
name|getValues
argument_list|(
name|context
argument_list|,
name|readerContext
argument_list|)
decl_stmt|;
return|return
operator|new
name|DoubleDocValues
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|double
name|doubleVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|func
argument_list|(
name|doc
argument_list|,
name|vals
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|name
argument_list|()
operator|+
literal|'('
operator|+
name|vals
operator|.
name|toString
argument_list|(
name|doc
argument_list|)
operator|+
literal|')'
return|;
block|}
block|}
return|;
block|}
block|}
block|}
end_class
begin_class
DECL|class|Double2Parser
specifier|abstract
class|class
name|Double2Parser
extends|extends
name|NamedParser
block|{
DECL|method|Double2Parser
specifier|public
name|Double2Parser
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|func
specifier|public
specifier|abstract
name|double
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|a
parameter_list|,
name|FunctionValues
name|b
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|parse
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
return|return
operator|new
name|Function
argument_list|(
name|fp
operator|.
name|parseValueSource
argument_list|()
argument_list|,
name|fp
operator|.
name|parseValueSource
argument_list|()
argument_list|)
return|;
block|}
DECL|class|Function
class|class
name|Function
extends|extends
name|ValueSource
block|{
DECL|field|a
specifier|private
specifier|final
name|ValueSource
name|a
decl_stmt|;
DECL|field|b
specifier|private
specifier|final
name|ValueSource
name|b
decl_stmt|;
comment|/**      * @param   a  the base.      * @param   b  the exponent.      */
DECL|method|Function
specifier|public
name|Function
parameter_list|(
name|ValueSource
name|a
parameter_list|,
name|ValueSource
name|b
parameter_list|)
block|{
name|this
operator|.
name|a
operator|=
name|a
expr_stmt|;
name|this
operator|.
name|b
operator|=
name|b
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|description
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
name|name
argument_list|()
operator|+
literal|"("
operator|+
name|a
operator|.
name|description
argument_list|()
operator|+
literal|","
operator|+
name|b
operator|.
name|description
argument_list|()
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|getValues
specifier|public
name|FunctionValues
name|getValues
parameter_list|(
name|Map
name|context
parameter_list|,
name|AtomicReaderContext
name|readerContext
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FunctionValues
name|aVals
init|=
name|a
operator|.
name|getValues
argument_list|(
name|context
argument_list|,
name|readerContext
argument_list|)
decl_stmt|;
specifier|final
name|FunctionValues
name|bVals
init|=
name|b
operator|.
name|getValues
argument_list|(
name|context
argument_list|,
name|readerContext
argument_list|)
decl_stmt|;
return|return
operator|new
name|DoubleDocValues
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|double
name|doubleVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|func
argument_list|(
name|doc
argument_list|,
name|aVals
argument_list|,
name|bVals
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|name
argument_list|()
operator|+
literal|'('
operator|+
name|aVals
operator|.
name|toString
argument_list|(
name|doc
argument_list|)
operator|+
literal|','
operator|+
name|bVals
operator|.
name|toString
argument_list|(
name|doc
argument_list|)
operator|+
literal|')'
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|createWeight
specifier|public
name|void
name|createWeight
parameter_list|(
name|Map
name|context
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|h
init|=
name|a
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|h
operator|^=
operator|(
name|h
operator|<<
literal|13
operator|)
operator||
operator|(
name|h
operator|>>>
literal|20
operator|)
expr_stmt|;
name|h
operator|+=
name|b
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|h
operator|^=
operator|(
name|h
operator|<<
literal|23
operator|)
operator||
operator|(
name|h
operator|>>>
literal|10
operator|)
expr_stmt|;
name|h
operator|+=
name|name
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|h
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Function
name|other
init|=
operator|(
name|Function
operator|)
name|o
decl_stmt|;
return|return
name|this
operator|.
name|a
operator|.
name|equals
argument_list|(
name|other
operator|.
name|a
argument_list|)
operator|&&
name|this
operator|.
name|b
operator|.
name|equals
argument_list|(
name|other
operator|.
name|b
argument_list|)
return|;
block|}
block|}
block|}
end_class
begin_class
DECL|class|BoolConstValueSource
class|class
name|BoolConstValueSource
extends|extends
name|ConstNumberSource
block|{
DECL|field|constant
specifier|final
name|boolean
name|constant
decl_stmt|;
DECL|method|BoolConstValueSource
specifier|public
name|BoolConstValueSource
parameter_list|(
name|boolean
name|constant
parameter_list|)
block|{
name|this
operator|.
name|constant
operator|=
name|constant
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|description
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
literal|"const("
operator|+
name|constant
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|getValues
specifier|public
name|FunctionValues
name|getValues
parameter_list|(
name|Map
name|context
parameter_list|,
name|AtomicReaderContext
name|readerContext
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|BoolDocValues
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|boolVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|constant
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|constant
condition|?
literal|0x12345678
else|:
literal|0x87654321
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|BoolConstValueSource
operator|.
name|class
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|BoolConstValueSource
name|other
init|=
operator|(
name|BoolConstValueSource
operator|)
name|o
decl_stmt|;
return|return
name|this
operator|.
name|constant
operator|==
name|other
operator|.
name|constant
return|;
block|}
annotation|@
name|Override
DECL|method|getInt
specifier|public
name|int
name|getInt
parameter_list|()
block|{
return|return
name|constant
condition|?
literal|1
else|:
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getLong
specifier|public
name|long
name|getLong
parameter_list|()
block|{
return|return
name|constant
condition|?
literal|1
else|:
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getFloat
specifier|public
name|float
name|getFloat
parameter_list|()
block|{
return|return
name|constant
condition|?
literal|1
else|:
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getDouble
specifier|public
name|double
name|getDouble
parameter_list|()
block|{
return|return
name|constant
condition|?
literal|1
else|:
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getNumber
specifier|public
name|Number
name|getNumber
parameter_list|()
block|{
return|return
name|constant
condition|?
literal|1
else|:
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getBool
specifier|public
name|boolean
name|getBool
parameter_list|()
block|{
return|return
name|constant
return|;
block|}
block|}
end_class
begin_class
DECL|class|TestValueSource
class|class
name|TestValueSource
extends|extends
name|ValueSource
block|{
DECL|field|source
name|ValueSource
name|source
decl_stmt|;
DECL|method|TestValueSource
specifier|public
name|TestValueSource
parameter_list|(
name|ValueSource
name|source
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getValues
specifier|public
name|FunctionValues
name|getValues
parameter_list|(
name|Map
name|context
parameter_list|,
name|AtomicReaderContext
name|readerContext
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|context
operator|.
name|get
argument_list|(
name|this
argument_list|)
operator|==
literal|null
condition|)
block|{
name|SolrRequestInfo
name|requestInfo
init|=
name|SolrRequestInfo
operator|.
name|getRequestInfo
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"testfunc: unweighted value source detected.  delegate="
operator|+
name|source
operator|+
literal|" request="
operator|+
operator|(
name|requestInfo
operator|==
literal|null
condition|?
literal|"null"
else|:
name|requestInfo
operator|.
name|getReq
argument_list|()
operator|)
argument_list|)
throw|;
block|}
return|return
name|source
operator|.
name|getValues
argument_list|(
name|context
argument_list|,
name|readerContext
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|TestValueSource
operator|&&
name|source
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|TestValueSource
operator|)
name|o
operator|)
operator|.
name|source
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|source
operator|.
name|hashCode
argument_list|()
operator|+
name|TestValueSource
operator|.
name|class
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|description
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
literal|"testfunc("
operator|+
name|source
operator|.
name|description
argument_list|()
operator|+
literal|')'
return|;
block|}
annotation|@
name|Override
DECL|method|createWeight
specifier|public
name|void
name|createWeight
parameter_list|(
name|Map
name|context
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
name|context
operator|.
name|put
argument_list|(
name|this
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSortField
specifier|public
name|SortField
name|getSortField
parameter_list|(
name|boolean
name|reverse
parameter_list|)
block|{
return|return
name|super
operator|.
name|getSortField
argument_list|(
name|reverse
argument_list|)
return|;
block|}
block|}
end_class
end_unit
