begin_unit
begin_package
DECL|package|org.apache.solr.search.facet
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|facet
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_class
DECL|class|UniqueAgg
specifier|public
class|class
name|UniqueAgg
extends|extends
name|StrAggValueSource
block|{
DECL|field|UNIQUE
specifier|public
specifier|static
name|String
name|UNIQUE
init|=
literal|"unique"
decl_stmt|;
comment|// internal constants used for aggregating values from multiple shards
DECL|field|VALS
specifier|static
name|String
name|VALS
init|=
literal|"vals"
decl_stmt|;
DECL|method|UniqueAgg
specifier|public
name|UniqueAgg
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|super
argument_list|(
name|UNIQUE
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createSlotAcc
specifier|public
name|SlotAcc
name|createSlotAcc
parameter_list|(
name|FacetContext
name|fcontext
parameter_list|,
name|int
name|numDocs
parameter_list|,
name|int
name|numSlots
parameter_list|)
throws|throws
name|IOException
block|{
name|SchemaField
name|sf
init|=
name|fcontext
operator|.
name|qcontext
operator|.
name|searcher
argument_list|()
operator|.
name|getSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|getArg
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sf
operator|.
name|multiValued
argument_list|()
operator|||
name|sf
operator|.
name|getType
argument_list|()
operator|.
name|multiValuedFieldCache
argument_list|()
condition|)
block|{
if|if
condition|(
name|sf
operator|.
name|hasDocValues
argument_list|()
condition|)
block|{
return|return
operator|new
name|UniqueMultiDvSlotAcc
argument_list|(
name|fcontext
argument_list|,
name|getArg
argument_list|()
argument_list|,
name|numSlots
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|UniqueMultivaluedSlotAcc
argument_list|(
name|fcontext
argument_list|,
name|getArg
argument_list|()
argument_list|,
name|numSlots
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
operator|new
name|UniqueSinglevaluedSlotAcc
argument_list|(
name|fcontext
argument_list|,
name|getArg
argument_list|()
argument_list|,
name|numSlots
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|createFacetMerger
specifier|public
name|FacetMerger
name|createFacetMerger
parameter_list|(
name|Object
name|prototype
parameter_list|)
block|{
return|return
operator|new
name|FacetMerger
argument_list|()
block|{
name|long
name|sumUnique
decl_stmt|;
name|Set
argument_list|<
name|Object
argument_list|>
name|values
decl_stmt|;
name|int
name|shardsMissing
decl_stmt|;
name|long
name|shardsMissingSum
decl_stmt|;
name|long
name|shardsMissingMax
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|merge
parameter_list|(
name|Object
name|facetResult
parameter_list|)
block|{
name|SimpleOrderedMap
name|map
init|=
operator|(
name|SimpleOrderedMap
operator|)
name|facetResult
decl_stmt|;
name|long
name|unique
init|=
operator|(
operator|(
name|Number
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"unique"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|sumUnique
operator|+=
name|unique
expr_stmt|;
name|List
name|vals
init|=
operator|(
name|List
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"vals"
argument_list|)
decl_stmt|;
if|if
condition|(
name|vals
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|values
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|vals
operator|.
name|size
argument_list|()
operator|*
literal|4
argument_list|)
expr_stmt|;
block|}
name|values
operator|.
name|addAll
argument_list|(
name|vals
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|shardsMissing
operator|++
expr_stmt|;
name|shardsMissingSum
operator|+=
name|unique
expr_stmt|;
name|shardsMissingMax
operator|=
name|Math
operator|.
name|max
argument_list|(
name|shardsMissingMax
argument_list|,
name|unique
argument_list|)
expr_stmt|;
block|}
comment|// TODO: somehow get& use the count in the bucket?
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getMergedResult
parameter_list|()
block|{
name|long
name|exactCount
init|=
name|values
operator|==
literal|null
condition|?
literal|0
else|:
name|values
operator|.
name|size
argument_list|()
decl_stmt|;
return|return
name|exactCount
operator|+
name|shardsMissingSum
return|;
block|}
block|}
return|;
block|}
block|}
end_class
end_unit
