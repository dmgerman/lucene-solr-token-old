begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|FloatArrayList
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|IntArrayList
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|IntIntHashMap
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|IntLongHashMap
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|IntIntCursor
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|IntLongCursor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValuesType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FilterLeafReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|FunctionQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|FunctionValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|LeafFieldComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|uninverting
operator|.
name|UninvertingReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LongValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ResponseBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|QueryElevationComponent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|LocalSolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|StrField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|TrieFloatField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|TrieIntField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|TrieLongField
import|;
end_import
begin_comment
comment|/**   The<b>CollapsingQParserPlugin</b> is a PostFilter that performs field collapsing.  This is a high performance alternative to standard Solr  field collapsing (with ngroups) when the number of distinct groups  in the result set is high.<p>  Sample syntax:<p>  Collapse based on the highest scoring document:<p>   fq=(!collapse field=field_name}<p>  Collapse based on the min value of a numeric field:<p>  fq={!collapse field=field_name min=field_name}<p>  Collapse based on the max value of a numeric field:<p>  fq={!collapse field=field_name max=field_name}<p>  Collapse with a null policy:<p>  fq={!collapse field=field_name nullPolicy=nullPolicy}<p>  There are three null policies:<br>  ignore : removes docs with a null value in the collapse field (default).<br>  expand : treats each doc with a null value in the collapse field as a separate group.<br>  collapse : collapses all docs with a null value into a single group using either highest score, or min/max.<p>  The CollapsingQParserPlugin fully supports the QueryElevationComponent  **/
end_comment
begin_class
DECL|class|CollapsingQParserPlugin
specifier|public
class|class
name|CollapsingQParserPlugin
extends|extends
name|QParserPlugin
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"collapse"
decl_stmt|;
DECL|field|NULL_COLLAPSE
specifier|public
specifier|static
specifier|final
name|String
name|NULL_COLLAPSE
init|=
literal|"collapse"
decl_stmt|;
DECL|field|NULL_IGNORE
specifier|public
specifier|static
specifier|final
name|String
name|NULL_IGNORE
init|=
literal|"ignore"
decl_stmt|;
DECL|field|NULL_EXPAND
specifier|public
specifier|static
specifier|final
name|String
name|NULL_EXPAND
init|=
literal|"expand"
decl_stmt|;
DECL|field|HINT_TOP_FC
specifier|public
specifier|static
specifier|final
name|String
name|HINT_TOP_FC
init|=
literal|"top_fc"
decl_stmt|;
DECL|field|HINT_MULTI_DOCVALUES
specifier|public
specifier|static
specifier|final
name|String
name|HINT_MULTI_DOCVALUES
init|=
literal|"multi_docvalues"
decl_stmt|;
DECL|method|createParser
specifier|public
name|QParser
name|createParser
parameter_list|(
name|String
name|qstr
parameter_list|,
name|SolrParams
name|localParams
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|SolrQueryRequest
name|request
parameter_list|)
block|{
return|return
operator|new
name|CollapsingQParser
argument_list|(
name|qstr
argument_list|,
name|localParams
argument_list|,
name|params
argument_list|,
name|request
argument_list|)
return|;
block|}
DECL|class|CollapsingQParser
specifier|private
specifier|static
class|class
name|CollapsingQParser
extends|extends
name|QParser
block|{
DECL|method|CollapsingQParser
specifier|public
name|CollapsingQParser
parameter_list|(
name|String
name|qstr
parameter_list|,
name|SolrParams
name|localParams
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|SolrQueryRequest
name|request
parameter_list|)
block|{
name|super
argument_list|(
name|qstr
argument_list|,
name|localParams
argument_list|,
name|params
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
DECL|method|parse
specifier|public
name|Query
name|parse
parameter_list|()
throws|throws
name|SyntaxError
block|{
try|try
block|{
return|return
operator|new
name|CollapsingPostFilter
argument_list|(
name|localParams
argument_list|,
name|params
argument_list|,
name|req
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SyntaxError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|enum|GroupHeadSelectorType
specifier|public
specifier|static
enum|enum
name|GroupHeadSelectorType
block|{
DECL|enum constant|MIN
DECL|enum constant|MAX
DECL|enum constant|SORT
DECL|enum constant|SCORE
name|MIN
block|,
name|MAX
block|,
name|SORT
block|,
name|SCORE
block|;
DECL|field|MIN_MAX
specifier|public
specifier|static
name|EnumSet
argument_list|<
name|GroupHeadSelectorType
argument_list|>
name|MIN_MAX
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|MIN
argument_list|,
name|MAX
argument_list|)
decl_stmt|;
block|}
comment|/**    * Models all the information about how group head documents should be selected    */
DECL|class|GroupHeadSelector
specifier|public
specifier|static
specifier|final
class|class
name|GroupHeadSelector
block|{
comment|/**       * The param value for this selector whose meaning depends on type.        * (ie: a field or valuesource for MIN/MAX, a sort string for SORT, "score" for SCORE).       * Will never be null.      */
DECL|field|selectorText
specifier|public
specifier|final
name|String
name|selectorText
decl_stmt|;
comment|/** The type for this selector, will never be null */
DECL|field|type
specifier|public
specifier|final
name|GroupHeadSelectorType
name|type
decl_stmt|;
DECL|method|GroupHeadSelector
specifier|private
name|GroupHeadSelector
parameter_list|(
name|String
name|s
parameter_list|,
name|GroupHeadSelectorType
name|type
parameter_list|)
block|{
assert|assert
literal|null
operator|!=
name|s
assert|;
assert|assert
literal|null
operator|!=
name|type
assert|;
name|this
operator|.
name|selectorText
operator|=
name|s
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|GroupHeadSelector
condition|)
block|{
specifier|final
name|GroupHeadSelector
name|that
init|=
operator|(
name|GroupHeadSelector
operator|)
name|other
decl_stmt|;
return|return
operator|(
name|this
operator|.
name|type
operator|==
name|that
operator|.
name|type
operator|)
operator|&&
name|this
operator|.
name|selectorText
operator|.
name|equals
argument_list|(
name|that
operator|.
name|selectorText
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|17
operator|*
operator|(
literal|31
operator|+
name|selectorText
operator|.
name|hashCode
argument_list|()
operator|)
operator|*
operator|(
literal|31
operator|+
name|type
operator|.
name|hashCode
argument_list|()
operator|)
return|;
block|}
comment|/**      * returns a new GroupHeadSelector based on the specified local params      */
DECL|method|build
specifier|public
specifier|static
name|GroupHeadSelector
name|build
parameter_list|(
specifier|final
name|SolrParams
name|localParams
parameter_list|)
block|{
specifier|final
name|String
name|sortString
init|=
name|StringUtils
operator|.
name|defaultIfBlank
argument_list|(
name|localParams
operator|.
name|get
argument_list|(
literal|"sort"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|String
name|max
init|=
name|StringUtils
operator|.
name|defaultIfBlank
argument_list|(
name|localParams
operator|.
name|get
argument_list|(
literal|"max"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|String
name|min
init|=
name|StringUtils
operator|.
name|defaultIfBlank
argument_list|(
name|localParams
operator|.
name|get
argument_list|(
literal|"min"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
literal|1
operator|<
name|numNotNull
argument_list|(
name|min
argument_list|,
name|max
argument_list|,
name|sortString
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"At most one localparam for selecting documents (min, max, sort) may be specified: "
operator|+
name|localParams
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
literal|null
operator|!=
name|sortString
condition|)
block|{
return|return
operator|new
name|GroupHeadSelector
argument_list|(
name|sortString
argument_list|,
name|GroupHeadSelectorType
operator|.
name|SORT
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|null
operator|!=
name|min
condition|)
block|{
return|return
operator|new
name|GroupHeadSelector
argument_list|(
name|min
argument_list|,
name|GroupHeadSelectorType
operator|.
name|MIN
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|null
operator|!=
name|max
condition|)
block|{
return|return
operator|new
name|GroupHeadSelector
argument_list|(
name|max
argument_list|,
name|GroupHeadSelectorType
operator|.
name|MAX
argument_list|)
return|;
block|}
comment|// default
return|return
operator|new
name|GroupHeadSelector
argument_list|(
literal|"score"
argument_list|,
name|GroupHeadSelectorType
operator|.
name|SCORE
argument_list|)
return|;
block|}
block|}
DECL|class|CollapsingPostFilter
specifier|public
specifier|static
class|class
name|CollapsingPostFilter
extends|extends
name|ExtendedQueryBase
implements|implements
name|PostFilter
implements|,
name|ScoreFilter
block|{
DECL|field|collapseField
specifier|private
name|String
name|collapseField
decl_stmt|;
DECL|field|groupHeadSelector
specifier|private
specifier|final
name|GroupHeadSelector
name|groupHeadSelector
decl_stmt|;
DECL|field|sortSpec
specifier|private
specifier|final
name|SortSpec
name|sortSpec
decl_stmt|;
comment|// may be null, parsed at most once from groupHeadSelector
DECL|field|hint
specifier|public
name|String
name|hint
decl_stmt|;
DECL|field|needsScores
specifier|private
name|boolean
name|needsScores
init|=
literal|true
decl_stmt|;
DECL|field|nullPolicy
specifier|private
name|int
name|nullPolicy
decl_stmt|;
DECL|field|boosted
specifier|private
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|Integer
argument_list|>
name|boosted
decl_stmt|;
DECL|field|NULL_POLICY_IGNORE
specifier|public
specifier|static
specifier|final
name|int
name|NULL_POLICY_IGNORE
init|=
literal|0
decl_stmt|;
DECL|field|NULL_POLICY_COLLAPSE
specifier|public
specifier|static
specifier|final
name|int
name|NULL_POLICY_COLLAPSE
init|=
literal|1
decl_stmt|;
DECL|field|NULL_POLICY_EXPAND
specifier|public
specifier|static
specifier|final
name|int
name|NULL_POLICY_EXPAND
init|=
literal|2
decl_stmt|;
DECL|field|size
specifier|private
name|int
name|size
decl_stmt|;
DECL|method|getField
specifier|public
name|String
name|getField
parameter_list|()
block|{
return|return
name|this
operator|.
name|collapseField
return|;
block|}
DECL|method|setCache
specifier|public
name|void
name|setCache
parameter_list|(
name|boolean
name|cache
parameter_list|)
block|{      }
DECL|method|setCacheSep
specifier|public
name|void
name|setCacheSep
parameter_list|(
name|boolean
name|cacheSep
parameter_list|)
block|{      }
DECL|method|getCacheSep
specifier|public
name|boolean
name|getCacheSep
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|getCache
specifier|public
name|boolean
name|getCache
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|// Only a subset of fields in hashCode/equals?
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hashCode
init|=
name|classHash
argument_list|()
decl_stmt|;
name|hashCode
operator|=
literal|31
operator|*
name|hashCode
operator|+
name|collapseField
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|hashCode
operator|=
literal|31
operator|*
name|hashCode
operator|+
name|groupHeadSelector
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|hashCode
operator|=
literal|31
operator|*
name|hashCode
operator|+
name|nullPolicy
expr_stmt|;
return|return
name|hashCode
return|;
block|}
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
return|return
name|sameClassAs
argument_list|(
name|other
argument_list|)
operator|&&
name|equalsTo
argument_list|(
name|getClass
argument_list|()
operator|.
name|cast
argument_list|(
name|other
argument_list|)
argument_list|)
return|;
block|}
DECL|method|equalsTo
specifier|private
name|boolean
name|equalsTo
parameter_list|(
name|CollapsingPostFilter
name|other
parameter_list|)
block|{
return|return
name|collapseField
operator|.
name|equals
argument_list|(
name|other
operator|.
name|collapseField
argument_list|)
operator|&&
name|groupHeadSelector
operator|.
name|equals
argument_list|(
name|other
operator|.
name|groupHeadSelector
argument_list|)
operator|&&
name|nullPolicy
operator|==
name|other
operator|.
name|nullPolicy
return|;
block|}
DECL|method|getCost
specifier|public
name|int
name|getCost
parameter_list|()
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
name|super
operator|.
name|getCost
argument_list|()
argument_list|,
literal|100
argument_list|)
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
return|;
block|}
DECL|method|CollapsingPostFilter
specifier|public
name|CollapsingPostFilter
parameter_list|(
name|SolrParams
name|localParams
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|SolrQueryRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|collapseField
operator|=
name|localParams
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|collapseField
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Required 'field' param is missing."
argument_list|)
throw|;
block|}
name|this
operator|.
name|groupHeadSelector
operator|=
name|GroupHeadSelector
operator|.
name|build
argument_list|(
name|localParams
argument_list|)
expr_stmt|;
if|if
condition|(
name|groupHeadSelector
operator|.
name|type
operator|.
name|equals
argument_list|(
name|GroupHeadSelectorType
operator|.
name|SORT
argument_list|)
operator|&&
name|CollapseScore
operator|.
name|wantsCScore
argument_list|(
name|groupHeadSelector
operator|.
name|selectorText
argument_list|)
condition|)
block|{
comment|// we can't support Sorts that wrap functions that include "cscore()" because
comment|// the abstraction layer for Sort/SortField rewriting gives each clause it's own
comment|// context Map which we don't have access to -- so for now, give a useful error
comment|// (as early as possible) if attempted
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Using cscore() as a function in the 'sort' local "
operator|+
literal|"param of the collapse parser is not supported"
argument_list|)
throw|;
block|}
name|this
operator|.
name|sortSpec
operator|=
name|GroupHeadSelectorType
operator|.
name|SORT
operator|.
name|equals
argument_list|(
name|groupHeadSelector
operator|.
name|type
argument_list|)
condition|?
name|SortSpecParsing
operator|.
name|parseSortSpec
argument_list|(
name|groupHeadSelector
operator|.
name|selectorText
argument_list|,
name|request
argument_list|)
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|hint
operator|=
name|localParams
operator|.
name|get
argument_list|(
literal|"hint"
argument_list|)
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|localParams
operator|.
name|getInt
argument_list|(
literal|"size"
argument_list|,
literal|100000
argument_list|)
expr_stmt|;
comment|//Only used for collapsing on int fields.
block|{
specifier|final
name|SolrRequestInfo
name|info
init|=
name|SolrRequestInfo
operator|.
name|getRequestInfo
argument_list|()
decl_stmt|;
assert|assert
literal|null
operator|!=
name|info
assert|;
comment|// may be null in some esoteric corner usages
specifier|final
name|ResponseBuilder
name|rb
init|=
name|info
operator|.
name|getResponseBuilder
argument_list|()
decl_stmt|;
specifier|final
name|SortSpec
name|topSort
init|=
literal|null
operator|==
name|rb
condition|?
literal|null
else|:
name|rb
operator|.
name|getSortSpec
argument_list|()
decl_stmt|;
name|this
operator|.
name|needsScores
operator|=
operator|(
name|info
operator|.
name|getRsp
argument_list|()
operator|.
name|getReturnFields
argument_list|()
operator|.
name|wantsScore
argument_list|()
operator|||
operator|(
literal|null
operator|!=
name|topSort
operator|&&
name|topSort
operator|.
name|includesScore
argument_list|()
operator|)
operator|||
name|GroupHeadSelectorType
operator|.
name|SCORE
operator|.
name|equals
argument_list|(
name|groupHeadSelector
operator|.
name|type
argument_list|)
operator|||
operator|(
name|GroupHeadSelectorType
operator|.
name|SORT
operator|.
name|equals
argument_list|(
name|groupHeadSelector
operator|.
name|type
argument_list|)
operator|&&
name|this
operator|.
name|sortSpec
operator|.
name|includesScore
argument_list|()
operator|)
operator|||
operator|(
name|GroupHeadSelectorType
operator|.
name|MIN_MAX
operator|.
name|contains
argument_list|(
name|groupHeadSelector
operator|.
name|type
argument_list|)
operator|&&
name|CollapseScore
operator|.
name|wantsCScore
argument_list|(
name|groupHeadSelector
operator|.
name|selectorText
argument_list|)
operator|)
operator|||
operator|(
name|this
operator|.
name|boosted
operator|!=
literal|null
operator|)
operator|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|needsScores
operator|&&
literal|null
operator|!=
name|rb
condition|)
block|{
comment|// regardless of why we need scores ensure the IndexSearcher will compute them
comment|// for the "real" docs.  (ie: maybe we need them because we were
comment|// asked to compute them for the collapsed docs, maybe we need them because in
comment|// order to find the groupHead we need them computed for us.
name|rb
operator|.
name|setFieldFlags
argument_list|(
name|rb
operator|.
name|getFieldFlags
argument_list|()
operator||
name|SolrIndexSearcher
operator|.
name|GET_SCORES
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|nPolicy
init|=
name|localParams
operator|.
name|get
argument_list|(
literal|"nullPolicy"
argument_list|,
name|NULL_IGNORE
argument_list|)
decl_stmt|;
if|if
condition|(
name|nPolicy
operator|.
name|equals
argument_list|(
name|NULL_IGNORE
argument_list|)
condition|)
block|{
name|this
operator|.
name|nullPolicy
operator|=
name|NULL_POLICY_IGNORE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nPolicy
operator|.
name|equals
argument_list|(
name|NULL_COLLAPSE
argument_list|)
condition|)
block|{
name|this
operator|.
name|nullPolicy
operator|=
name|NULL_POLICY_COLLAPSE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nPolicy
operator|.
name|equals
argument_list|(
operator|(
name|NULL_EXPAND
operator|)
argument_list|)
condition|)
block|{
name|this
operator|.
name|nullPolicy
operator|=
name|NULL_POLICY_EXPAND
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid nullPolicy:"
operator|+
name|nPolicy
argument_list|)
throw|;
block|}
block|}
DECL|method|getBoostDocs
specifier|private
name|IntIntHashMap
name|getBoostDocs
parameter_list|(
name|SolrIndexSearcher
name|indexSearcher
parameter_list|,
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|Integer
argument_list|>
name|boosted
parameter_list|,
name|Map
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|IntIntHashMap
name|boostDocs
init|=
name|QueryElevationComponent
operator|.
name|getBoostDocs
argument_list|(
name|indexSearcher
argument_list|,
name|boosted
argument_list|,
name|context
argument_list|)
decl_stmt|;
return|return
name|boostDocs
return|;
block|}
DECL|method|getFilterCollector
specifier|public
name|DelegatingCollector
name|getFilterCollector
parameter_list|(
name|IndexSearcher
name|indexSearcher
parameter_list|)
block|{
try|try
block|{
name|SolrIndexSearcher
name|searcher
init|=
operator|(
name|SolrIndexSearcher
operator|)
name|indexSearcher
decl_stmt|;
name|CollectorFactory
name|collectorFactory
init|=
operator|new
name|CollectorFactory
argument_list|()
decl_stmt|;
comment|//Deal with boosted docs.
comment|//We have to deal with it here rather then the constructor because
comment|//because the QueryElevationComponent runs after the Queries are constructed.
name|IntIntHashMap
name|boostDocsMap
init|=
literal|null
decl_stmt|;
name|Map
name|context
init|=
literal|null
decl_stmt|;
name|SolrRequestInfo
name|info
init|=
name|SolrRequestInfo
operator|.
name|getRequestInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|context
operator|=
name|info
operator|.
name|getReq
argument_list|()
operator|.
name|getContext
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|boosted
operator|==
literal|null
operator|&&
name|context
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|boosted
operator|=
operator|(
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|Integer
argument_list|>
operator|)
name|context
operator|.
name|get
argument_list|(
name|QueryElevationComponent
operator|.
name|BOOSTED_PRIORITY
argument_list|)
expr_stmt|;
block|}
name|boostDocsMap
operator|=
name|getBoostDocs
argument_list|(
name|searcher
argument_list|,
name|this
operator|.
name|boosted
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return
name|collectorFactory
operator|.
name|getCollector
argument_list|(
name|this
operator|.
name|collapseField
argument_list|,
name|this
operator|.
name|groupHeadSelector
argument_list|,
name|this
operator|.
name|sortSpec
argument_list|,
name|this
operator|.
name|nullPolicy
argument_list|,
name|this
operator|.
name|hint
argument_list|,
name|this
operator|.
name|needsScores
argument_list|,
name|this
operator|.
name|size
argument_list|,
name|boostDocsMap
argument_list|,
name|searcher
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|class|ReaderWrapper
specifier|private
specifier|static
class|class
name|ReaderWrapper
extends|extends
name|FilterLeafReader
block|{
DECL|field|field
specifier|private
name|String
name|field
decl_stmt|;
DECL|method|ReaderWrapper
specifier|public
name|ReaderWrapper
parameter_list|(
name|LeafReader
name|leafReader
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|super
argument_list|(
name|leafReader
argument_list|)
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
DECL|method|getSortedDocValues
specifier|public
name|SortedDocValues
name|getSortedDocValues
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|getCoreCacheKey
specifier|public
name|Object
name|getCoreCacheKey
parameter_list|()
block|{
return|return
name|in
operator|.
name|getCoreCacheKey
argument_list|()
return|;
block|}
DECL|method|getFieldInfos
specifier|public
name|FieldInfos
name|getFieldInfos
parameter_list|()
block|{
name|Iterator
argument_list|<
name|FieldInfo
argument_list|>
name|it
init|=
name|in
operator|.
name|getFieldInfos
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldInfo
argument_list|>
name|newInfos
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FieldInfo
name|fieldInfo
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldInfo
operator|.
name|name
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|FieldInfo
name|f
init|=
operator|new
name|FieldInfo
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|,
name|fieldInfo
operator|.
name|number
argument_list|,
name|fieldInfo
operator|.
name|hasVectors
argument_list|()
argument_list|,
name|fieldInfo
operator|.
name|hasNorms
argument_list|()
argument_list|,
name|fieldInfo
operator|.
name|hasPayloads
argument_list|()
argument_list|,
name|fieldInfo
operator|.
name|getIndexOptions
argument_list|()
argument_list|,
name|DocValuesType
operator|.
name|NONE
argument_list|,
name|fieldInfo
operator|.
name|getDocValuesGen
argument_list|()
argument_list|,
name|fieldInfo
operator|.
name|attributes
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|newInfos
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newInfos
operator|.
name|add
argument_list|(
name|fieldInfo
argument_list|)
expr_stmt|;
block|}
block|}
name|FieldInfos
name|infos
init|=
operator|new
name|FieldInfos
argument_list|(
name|newInfos
operator|.
name|toArray
argument_list|(
operator|new
name|FieldInfo
index|[
name|newInfos
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|infos
return|;
block|}
block|}
DECL|class|DummyScorer
specifier|private
specifier|static
class|class
name|DummyScorer
extends|extends
name|Scorer
block|{
DECL|field|score
specifier|public
name|float
name|score
decl_stmt|;
DECL|field|docId
specifier|public
name|int
name|docId
decl_stmt|;
DECL|method|DummyScorer
specifier|public
name|DummyScorer
parameter_list|()
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
block|{
return|return
name|score
return|;
block|}
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|docId
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|DocIdSetIterator
name|iterator
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
comment|/*   * Collapses on Ordinal Values using Score to select the group head.   */
DECL|class|OrdScoreCollector
specifier|private
specifier|static
class|class
name|OrdScoreCollector
extends|extends
name|DelegatingCollector
block|{
DECL|field|contexts
specifier|private
name|LeafReaderContext
index|[]
name|contexts
decl_stmt|;
DECL|field|collapsedSet
specifier|private
name|FixedBitSet
name|collapsedSet
decl_stmt|;
DECL|field|collapseValues
specifier|private
name|SortedDocValues
name|collapseValues
decl_stmt|;
DECL|field|ordinalMap
specifier|private
name|MultiDocValues
operator|.
name|OrdinalMap
name|ordinalMap
decl_stmt|;
DECL|field|segmentValues
specifier|private
name|SortedDocValues
name|segmentValues
decl_stmt|;
DECL|field|segmentOrdinalMap
specifier|private
name|LongValues
name|segmentOrdinalMap
decl_stmt|;
DECL|field|multiSortedDocValues
specifier|private
name|MultiDocValues
operator|.
name|MultiSortedDocValues
name|multiSortedDocValues
decl_stmt|;
DECL|field|ords
specifier|private
name|int
index|[]
name|ords
decl_stmt|;
DECL|field|scores
specifier|private
name|float
index|[]
name|scores
decl_stmt|;
DECL|field|maxDoc
specifier|private
name|int
name|maxDoc
decl_stmt|;
DECL|field|nullPolicy
specifier|private
name|int
name|nullPolicy
decl_stmt|;
DECL|field|nullScore
specifier|private
name|float
name|nullScore
init|=
operator|-
name|Float
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|nullDoc
specifier|private
name|int
name|nullDoc
decl_stmt|;
DECL|field|nullScores
specifier|private
name|FloatArrayList
name|nullScores
decl_stmt|;
DECL|field|boostOrds
specifier|private
name|IntArrayList
name|boostOrds
decl_stmt|;
DECL|field|boostDocs
specifier|private
name|IntArrayList
name|boostDocs
decl_stmt|;
DECL|field|mergeBoost
specifier|private
name|MergeBoost
name|mergeBoost
decl_stmt|;
DECL|field|boosts
specifier|private
name|boolean
name|boosts
decl_stmt|;
DECL|method|OrdScoreCollector
specifier|public
name|OrdScoreCollector
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|int
name|segments
parameter_list|,
name|SortedDocValues
name|collapseValues
parameter_list|,
name|int
name|nullPolicy
parameter_list|,
name|IntIntHashMap
name|boostDocsMap
parameter_list|)
block|{
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
name|this
operator|.
name|contexts
operator|=
operator|new
name|LeafReaderContext
index|[
name|segments
index|]
expr_stmt|;
name|this
operator|.
name|collapsedSet
operator|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
expr_stmt|;
name|this
operator|.
name|collapseValues
operator|=
name|collapseValues
expr_stmt|;
name|int
name|valueCount
init|=
name|collapseValues
operator|.
name|getValueCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|collapseValues
operator|instanceof
name|MultiDocValues
operator|.
name|MultiSortedDocValues
condition|)
block|{
name|this
operator|.
name|multiSortedDocValues
operator|=
operator|(
name|MultiDocValues
operator|.
name|MultiSortedDocValues
operator|)
name|collapseValues
expr_stmt|;
name|this
operator|.
name|ordinalMap
operator|=
name|multiSortedDocValues
operator|.
name|mapping
expr_stmt|;
block|}
name|this
operator|.
name|ords
operator|=
operator|new
name|int
index|[
name|valueCount
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|this
operator|.
name|ords
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|scores
operator|=
operator|new
name|float
index|[
name|valueCount
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|this
operator|.
name|scores
argument_list|,
operator|-
name|Float
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|this
operator|.
name|nullPolicy
operator|=
name|nullPolicy
expr_stmt|;
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|nullScores
operator|=
operator|new
name|FloatArrayList
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|boostDocsMap
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|boosts
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|boostOrds
operator|=
operator|new
name|IntArrayList
argument_list|()
expr_stmt|;
name|this
operator|.
name|boostDocs
operator|=
operator|new
name|IntArrayList
argument_list|()
expr_stmt|;
name|int
index|[]
name|bd
init|=
operator|new
name|int
index|[
name|boostDocsMap
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|Iterator
argument_list|<
name|IntIntCursor
argument_list|>
name|it
init|=
name|boostDocsMap
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IntIntCursor
name|cursor
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|bd
index|[
operator|++
name|index
index|]
operator|=
name|cursor
operator|.
name|key
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|bd
argument_list|)
expr_stmt|;
name|this
operator|.
name|mergeBoost
operator|=
operator|new
name|MergeBoost
argument_list|(
name|bd
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doSetNextReader
specifier|protected
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|contexts
index|[
name|context
operator|.
name|ord
index|]
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|docBase
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
if|if
condition|(
name|ordinalMap
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|segmentValues
operator|=
name|this
operator|.
name|multiSortedDocValues
operator|.
name|values
index|[
name|context
operator|.
name|ord
index|]
expr_stmt|;
name|this
operator|.
name|segmentOrdinalMap
operator|=
name|ordinalMap
operator|.
name|getGlobalOrds
argument_list|(
name|context
operator|.
name|ord
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|segmentValues
operator|=
name|collapseValues
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|contextDoc
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|globalDoc
init|=
name|contextDoc
operator|+
name|this
operator|.
name|docBase
decl_stmt|;
name|int
name|ord
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|ordinalMap
operator|!=
literal|null
condition|)
block|{
comment|//Handle ordinalMapping case
name|ord
operator|=
name|segmentValues
operator|.
name|getOrd
argument_list|(
name|contextDoc
argument_list|)
expr_stmt|;
if|if
condition|(
name|ord
operator|>
operator|-
literal|1
condition|)
block|{
name|ord
operator|=
operator|(
name|int
operator|)
name|segmentOrdinalMap
operator|.
name|get
argument_list|(
name|ord
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//Handle top Level FieldCache or Single Segment Case
name|ord
operator|=
name|segmentValues
operator|.
name|getOrd
argument_list|(
name|globalDoc
argument_list|)
expr_stmt|;
block|}
comment|// Check to see if we have documents boosted by the QueryElevationComponent
if|if
condition|(
name|boosts
operator|&&
name|mergeBoost
operator|.
name|boost
argument_list|(
name|globalDoc
argument_list|)
condition|)
block|{
name|boostDocs
operator|.
name|add
argument_list|(
name|globalDoc
argument_list|)
expr_stmt|;
name|boostOrds
operator|.
name|add
argument_list|(
name|ord
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|ord
operator|>
operator|-
literal|1
condition|)
block|{
name|float
name|score
init|=
name|scorer
operator|.
name|score
argument_list|()
decl_stmt|;
if|if
condition|(
name|score
operator|>
name|scores
index|[
name|ord
index|]
condition|)
block|{
name|ords
index|[
name|ord
index|]
operator|=
name|globalDoc
expr_stmt|;
name|scores
index|[
name|ord
index|]
operator|=
name|score
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_COLLAPSE
condition|)
block|{
name|float
name|score
init|=
name|scorer
operator|.
name|score
argument_list|()
decl_stmt|;
if|if
condition|(
name|score
operator|>
name|nullScore
condition|)
block|{
name|nullScore
operator|=
name|score
expr_stmt|;
name|nullDoc
operator|=
name|globalDoc
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|collapsedSet
operator|.
name|set
argument_list|(
name|globalDoc
argument_list|)
expr_stmt|;
name|nullScores
operator|.
name|add
argument_list|(
name|scorer
operator|.
name|score
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|finish
specifier|public
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|contexts
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|nullScore
operator|>
literal|0
condition|)
block|{
name|collapsedSet
operator|.
name|set
argument_list|(
name|nullDoc
argument_list|)
expr_stmt|;
block|}
comment|//Handle the boosted docs.
if|if
condition|(
name|this
operator|.
name|boostOrds
operator|!=
literal|null
condition|)
block|{
name|int
name|s
init|=
name|boostOrds
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
condition|;
name|i
operator|++
control|)
block|{
name|int
name|ord
init|=
name|this
operator|.
name|boostOrds
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|>
operator|-
literal|1
condition|)
block|{
comment|//Remove any group heads that are in the same groups as boosted documents.
name|ords
index|[
name|ord
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|//Add the boosted docs to the collapsedSet
name|this
operator|.
name|collapsedSet
operator|.
name|set
argument_list|(
name|boostDocs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mergeBoost
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// Reset mergeBoost because we're going to use it again.
block|}
comment|//Build the sorted DocSet of group heads.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ords
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|doc
init|=
name|ords
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|doc
operator|>
operator|-
literal|1
condition|)
block|{
name|collapsedSet
operator|.
name|set
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|currentContext
init|=
literal|0
decl_stmt|;
name|int
name|currentDocBase
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|ordinalMap
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|segmentValues
operator|=
name|this
operator|.
name|multiSortedDocValues
operator|.
name|values
index|[
name|currentContext
index|]
expr_stmt|;
name|this
operator|.
name|segmentOrdinalMap
operator|=
name|this
operator|.
name|ordinalMap
operator|.
name|getGlobalOrds
argument_list|(
name|currentContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|segmentValues
operator|=
name|collapseValues
expr_stmt|;
block|}
name|int
name|nextDocBase
init|=
name|currentContext
operator|+
literal|1
operator|<
name|contexts
operator|.
name|length
condition|?
name|contexts
index|[
name|currentContext
operator|+
literal|1
index|]
operator|.
name|docBase
else|:
name|maxDoc
decl_stmt|;
name|leafDelegate
operator|=
name|delegate
operator|.
name|getLeafCollector
argument_list|(
name|contexts
index|[
name|currentContext
index|]
argument_list|)
expr_stmt|;
name|DummyScorer
name|dummy
init|=
operator|new
name|DummyScorer
argument_list|()
decl_stmt|;
name|leafDelegate
operator|.
name|setScorer
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|DocIdSetIterator
name|it
init|=
operator|new
name|BitSetIterator
argument_list|(
name|collapsedSet
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
comment|// cost is not useful here
name|int
name|docId
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|(
name|docId
operator|=
name|it
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
while|while
condition|(
name|docId
operator|>=
name|nextDocBase
condition|)
block|{
name|currentContext
operator|++
expr_stmt|;
name|currentDocBase
operator|=
name|contexts
index|[
name|currentContext
index|]
operator|.
name|docBase
expr_stmt|;
name|nextDocBase
operator|=
name|currentContext
operator|+
literal|1
operator|<
name|contexts
operator|.
name|length
condition|?
name|contexts
index|[
name|currentContext
operator|+
literal|1
index|]
operator|.
name|docBase
else|:
name|maxDoc
expr_stmt|;
name|leafDelegate
operator|=
name|delegate
operator|.
name|getLeafCollector
argument_list|(
name|contexts
index|[
name|currentContext
index|]
argument_list|)
expr_stmt|;
name|leafDelegate
operator|.
name|setScorer
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
if|if
condition|(
name|ordinalMap
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|segmentValues
operator|=
name|this
operator|.
name|multiSortedDocValues
operator|.
name|values
index|[
name|currentContext
index|]
expr_stmt|;
name|this
operator|.
name|segmentOrdinalMap
operator|=
name|this
operator|.
name|ordinalMap
operator|.
name|getGlobalOrds
argument_list|(
name|currentContext
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|contextDoc
init|=
name|docId
operator|-
name|currentDocBase
decl_stmt|;
name|int
name|ord
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|ordinalMap
operator|!=
literal|null
condition|)
block|{
comment|//Handle ordinalMapping case
name|ord
operator|=
name|segmentValues
operator|.
name|getOrd
argument_list|(
name|contextDoc
argument_list|)
expr_stmt|;
if|if
condition|(
name|ord
operator|>
operator|-
literal|1
condition|)
block|{
name|ord
operator|=
operator|(
name|int
operator|)
name|segmentOrdinalMap
operator|.
name|get
argument_list|(
name|ord
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//Handle top Level FieldCache or Single Segment Case
name|ord
operator|=
name|segmentValues
operator|.
name|getOrd
argument_list|(
name|docId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ord
operator|>
operator|-
literal|1
condition|)
block|{
name|dummy
operator|.
name|score
operator|=
name|scores
index|[
name|ord
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|boosts
operator|&&
name|mergeBoost
operator|.
name|boost
argument_list|(
name|docId
argument_list|)
condition|)
block|{
comment|//Ignore so it doesn't mess up the null scoring.
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_COLLAPSE
condition|)
block|{
name|dummy
operator|.
name|score
operator|=
name|nullScore
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|dummy
operator|.
name|score
operator|=
name|nullScores
operator|.
name|get
argument_list|(
operator|++
name|index
argument_list|)
expr_stmt|;
block|}
name|dummy
operator|.
name|docId
operator|=
name|contextDoc
expr_stmt|;
name|leafDelegate
operator|.
name|collect
argument_list|(
name|contextDoc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|delegate
operator|instanceof
name|DelegatingCollector
condition|)
block|{
operator|(
operator|(
name|DelegatingCollector
operator|)
name|delegate
operator|)
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/*   * Collapses on an integer field using the score to select the group head.   */
DECL|class|IntScoreCollector
specifier|private
specifier|static
class|class
name|IntScoreCollector
extends|extends
name|DelegatingCollector
block|{
DECL|field|contexts
specifier|private
name|LeafReaderContext
index|[]
name|contexts
decl_stmt|;
DECL|field|collapsedSet
specifier|private
name|FixedBitSet
name|collapsedSet
decl_stmt|;
DECL|field|collapseValues
specifier|private
name|NumericDocValues
name|collapseValues
decl_stmt|;
DECL|field|cmap
specifier|private
name|IntLongHashMap
name|cmap
decl_stmt|;
DECL|field|maxDoc
specifier|private
name|int
name|maxDoc
decl_stmt|;
DECL|field|nullPolicy
specifier|private
name|int
name|nullPolicy
decl_stmt|;
DECL|field|nullScore
specifier|private
name|float
name|nullScore
init|=
operator|-
name|Float
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|nullDoc
specifier|private
name|int
name|nullDoc
decl_stmt|;
DECL|field|nullScores
specifier|private
name|FloatArrayList
name|nullScores
decl_stmt|;
DECL|field|boostKeys
specifier|private
name|IntArrayList
name|boostKeys
decl_stmt|;
DECL|field|boostDocs
specifier|private
name|IntArrayList
name|boostDocs
decl_stmt|;
DECL|field|mergeBoost
specifier|private
name|MergeBoost
name|mergeBoost
decl_stmt|;
DECL|field|boosts
specifier|private
name|boolean
name|boosts
decl_stmt|;
DECL|field|field
specifier|private
name|String
name|field
decl_stmt|;
DECL|field|nullValue
specifier|private
name|int
name|nullValue
decl_stmt|;
DECL|method|IntScoreCollector
specifier|public
name|IntScoreCollector
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|int
name|segments
parameter_list|,
name|int
name|nullValue
parameter_list|,
name|int
name|nullPolicy
parameter_list|,
name|int
name|size
parameter_list|,
name|String
name|field
parameter_list|,
name|IntIntHashMap
name|boostDocsMap
parameter_list|)
block|{
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
name|this
operator|.
name|contexts
operator|=
operator|new
name|LeafReaderContext
index|[
name|segments
index|]
expr_stmt|;
name|this
operator|.
name|collapsedSet
operator|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
expr_stmt|;
name|this
operator|.
name|nullValue
operator|=
name|nullValue
expr_stmt|;
name|this
operator|.
name|nullPolicy
operator|=
name|nullPolicy
expr_stmt|;
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|nullScores
operator|=
operator|new
name|FloatArrayList
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|cmap
operator|=
operator|new
name|IntLongHashMap
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
if|if
condition|(
name|boostDocsMap
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|boosts
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|boostDocs
operator|=
operator|new
name|IntArrayList
argument_list|()
expr_stmt|;
name|this
operator|.
name|boostKeys
operator|=
operator|new
name|IntArrayList
argument_list|()
expr_stmt|;
name|int
index|[]
name|bd
init|=
operator|new
name|int
index|[
name|boostDocsMap
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|Iterator
argument_list|<
name|IntIntCursor
argument_list|>
name|it
init|=
name|boostDocsMap
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IntIntCursor
name|cursor
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|bd
index|[
operator|++
name|index
index|]
operator|=
name|cursor
operator|.
name|key
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|bd
argument_list|)
expr_stmt|;
name|this
operator|.
name|mergeBoost
operator|=
operator|new
name|MergeBoost
argument_list|(
name|bd
argument_list|)
expr_stmt|;
name|this
operator|.
name|boosts
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doSetNextReader
specifier|protected
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|contexts
index|[
name|context
operator|.
name|ord
index|]
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|docBase
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
name|this
operator|.
name|collapseValues
operator|=
name|DocValues
operator|.
name|getNumeric
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|this
operator|.
name|field
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|contextDoc
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|collapseValue
init|=
operator|(
name|int
operator|)
name|this
operator|.
name|collapseValues
operator|.
name|get
argument_list|(
name|contextDoc
argument_list|)
decl_stmt|;
name|int
name|globalDoc
init|=
name|docBase
operator|+
name|contextDoc
decl_stmt|;
comment|// Check to see of we have documents boosted by the QueryElevationComponent
if|if
condition|(
name|boosts
operator|&&
name|mergeBoost
operator|.
name|boost
argument_list|(
name|globalDoc
argument_list|)
condition|)
block|{
name|boostDocs
operator|.
name|add
argument_list|(
name|globalDoc
argument_list|)
expr_stmt|;
name|boostKeys
operator|.
name|add
argument_list|(
name|collapseValue
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|collapseValue
operator|!=
name|nullValue
condition|)
block|{
name|float
name|score
init|=
name|scorer
operator|.
name|score
argument_list|()
decl_stmt|;
specifier|final
name|int
name|idx
decl_stmt|;
if|if
condition|(
operator|(
name|idx
operator|=
name|cmap
operator|.
name|indexOf
argument_list|(
name|collapseValue
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|long
name|scoreDoc
init|=
name|cmap
operator|.
name|indexGet
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|int
name|testScore
init|=
call|(
name|int
call|)
argument_list|(
name|scoreDoc
operator|>>
literal|32
argument_list|)
decl_stmt|;
name|int
name|currentScore
init|=
name|Float
operator|.
name|floatToRawIntBits
argument_list|(
name|score
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentScore
operator|>
name|testScore
condition|)
block|{
comment|//Current score is higher so replace the old scoreDoc with the current scoreDoc
name|cmap
operator|.
name|indexReplace
argument_list|(
name|idx
argument_list|,
operator|(
operator|(
operator|(
name|long
operator|)
name|currentScore
operator|)
operator|<<
literal|32
operator|)
operator|+
name|globalDoc
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//Combine the score and document into a long.
name|long
name|scoreDoc
init|=
operator|(
operator|(
operator|(
name|long
operator|)
name|Float
operator|.
name|floatToRawIntBits
argument_list|(
name|score
argument_list|)
operator|)
operator|<<
literal|32
operator|)
operator|+
name|globalDoc
decl_stmt|;
name|cmap
operator|.
name|indexInsert
argument_list|(
name|idx
argument_list|,
name|collapseValue
argument_list|,
name|scoreDoc
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_COLLAPSE
condition|)
block|{
name|float
name|score
init|=
name|scorer
operator|.
name|score
argument_list|()
decl_stmt|;
if|if
condition|(
name|score
operator|>
name|this
operator|.
name|nullScore
condition|)
block|{
name|this
operator|.
name|nullScore
operator|=
name|score
expr_stmt|;
name|this
operator|.
name|nullDoc
operator|=
name|globalDoc
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|collapsedSet
operator|.
name|set
argument_list|(
name|globalDoc
argument_list|)
expr_stmt|;
name|nullScores
operator|.
name|add
argument_list|(
name|scorer
operator|.
name|score
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|finish
specifier|public
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|contexts
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|nullScore
operator|>
operator|-
literal|1
condition|)
block|{
name|collapsedSet
operator|.
name|set
argument_list|(
name|nullDoc
argument_list|)
expr_stmt|;
block|}
comment|//Handle the boosted docs.
if|if
condition|(
name|this
operator|.
name|boostKeys
operator|!=
literal|null
condition|)
block|{
name|int
name|s
init|=
name|boostKeys
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
condition|;
name|i
operator|++
control|)
block|{
name|int
name|key
init|=
name|this
operator|.
name|boostKeys
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|!=
name|nullValue
condition|)
block|{
name|cmap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
comment|//Add the boosted docs to the collapsedSet
name|this
operator|.
name|collapsedSet
operator|.
name|set
argument_list|(
name|boostDocs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterator
argument_list|<
name|IntLongCursor
argument_list|>
name|it1
init|=
name|cmap
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IntLongCursor
name|cursor
init|=
name|it1
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|doc
init|=
operator|(
name|int
operator|)
name|cursor
operator|.
name|value
decl_stmt|;
name|collapsedSet
operator|.
name|set
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|int
name|currentContext
init|=
literal|0
decl_stmt|;
name|int
name|currentDocBase
init|=
literal|0
decl_stmt|;
name|collapseValues
operator|=
name|DocValues
operator|.
name|getNumeric
argument_list|(
name|contexts
index|[
name|currentContext
index|]
operator|.
name|reader
argument_list|()
argument_list|,
name|this
operator|.
name|field
argument_list|)
expr_stmt|;
name|int
name|nextDocBase
init|=
name|currentContext
operator|+
literal|1
operator|<
name|contexts
operator|.
name|length
condition|?
name|contexts
index|[
name|currentContext
operator|+
literal|1
index|]
operator|.
name|docBase
else|:
name|maxDoc
decl_stmt|;
name|leafDelegate
operator|=
name|delegate
operator|.
name|getLeafCollector
argument_list|(
name|contexts
index|[
name|currentContext
index|]
argument_list|)
expr_stmt|;
name|DummyScorer
name|dummy
init|=
operator|new
name|DummyScorer
argument_list|()
decl_stmt|;
name|leafDelegate
operator|.
name|setScorer
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|DocIdSetIterator
name|it
init|=
operator|new
name|BitSetIterator
argument_list|(
name|collapsedSet
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
comment|// cost is not useful here
name|int
name|globalDoc
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|nullScoreIndex
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|globalDoc
operator|=
name|it
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
while|while
condition|(
name|globalDoc
operator|>=
name|nextDocBase
condition|)
block|{
name|currentContext
operator|++
expr_stmt|;
name|currentDocBase
operator|=
name|contexts
index|[
name|currentContext
index|]
operator|.
name|docBase
expr_stmt|;
name|nextDocBase
operator|=
name|currentContext
operator|+
literal|1
operator|<
name|contexts
operator|.
name|length
condition|?
name|contexts
index|[
name|currentContext
operator|+
literal|1
index|]
operator|.
name|docBase
else|:
name|maxDoc
expr_stmt|;
name|leafDelegate
operator|=
name|delegate
operator|.
name|getLeafCollector
argument_list|(
name|contexts
index|[
name|currentContext
index|]
argument_list|)
expr_stmt|;
name|leafDelegate
operator|.
name|setScorer
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|collapseValues
operator|=
name|DocValues
operator|.
name|getNumeric
argument_list|(
name|contexts
index|[
name|currentContext
index|]
operator|.
name|reader
argument_list|()
argument_list|,
name|this
operator|.
name|field
argument_list|)
expr_stmt|;
block|}
name|int
name|contextDoc
init|=
name|globalDoc
operator|-
name|currentDocBase
decl_stmt|;
name|int
name|collapseValue
init|=
operator|(
name|int
operator|)
name|collapseValues
operator|.
name|get
argument_list|(
name|contextDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|collapseValue
operator|!=
name|nullValue
condition|)
block|{
name|long
name|scoreDoc
init|=
name|cmap
operator|.
name|get
argument_list|(
name|collapseValue
argument_list|)
decl_stmt|;
name|dummy
operator|.
name|score
operator|=
name|Float
operator|.
name|intBitsToFloat
argument_list|(
call|(
name|int
call|)
argument_list|(
name|scoreDoc
operator|>>
literal|32
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|boosts
operator|&&
name|mergeBoost
operator|.
name|boost
argument_list|(
name|globalDoc
argument_list|)
condition|)
block|{
comment|//Ignore so boosted documents don't mess up the null scoring policies.
block|}
elseif|else
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_COLLAPSE
condition|)
block|{
name|dummy
operator|.
name|score
operator|=
name|nullScore
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|dummy
operator|.
name|score
operator|=
name|nullScores
operator|.
name|get
argument_list|(
name|nullScoreIndex
operator|++
argument_list|)
expr_stmt|;
block|}
name|dummy
operator|.
name|docId
operator|=
name|contextDoc
expr_stmt|;
name|leafDelegate
operator|.
name|collect
argument_list|(
name|contextDoc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|delegate
operator|instanceof
name|DelegatingCollector
condition|)
block|{
operator|(
operator|(
name|DelegatingCollector
operator|)
name|delegate
operator|)
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Collapse on Ordinal value field.    */
DECL|class|OrdFieldValueCollector
specifier|private
specifier|static
class|class
name|OrdFieldValueCollector
extends|extends
name|DelegatingCollector
block|{
DECL|field|contexts
specifier|private
name|LeafReaderContext
index|[]
name|contexts
decl_stmt|;
DECL|field|collapseValues
specifier|private
name|SortedDocValues
name|collapseValues
decl_stmt|;
DECL|field|ordinalMap
specifier|protected
name|MultiDocValues
operator|.
name|OrdinalMap
name|ordinalMap
decl_stmt|;
DECL|field|segmentValues
specifier|protected
name|SortedDocValues
name|segmentValues
decl_stmt|;
DECL|field|segmentOrdinalMap
specifier|protected
name|LongValues
name|segmentOrdinalMap
decl_stmt|;
DECL|field|multiSortedDocValues
specifier|protected
name|MultiDocValues
operator|.
name|MultiSortedDocValues
name|multiSortedDocValues
decl_stmt|;
DECL|field|maxDoc
specifier|private
name|int
name|maxDoc
decl_stmt|;
DECL|field|nullPolicy
specifier|private
name|int
name|nullPolicy
decl_stmt|;
DECL|field|collapseStrategy
specifier|private
name|OrdFieldValueStrategy
name|collapseStrategy
decl_stmt|;
DECL|field|needsScores
specifier|private
name|boolean
name|needsScores
decl_stmt|;
DECL|method|OrdFieldValueCollector
specifier|public
name|OrdFieldValueCollector
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|int
name|segments
parameter_list|,
name|SortedDocValues
name|collapseValues
parameter_list|,
name|int
name|nullPolicy
parameter_list|,
name|GroupHeadSelector
name|groupHeadSelector
parameter_list|,
name|SortSpec
name|sortSpec
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|FieldType
name|fieldType
parameter_list|,
name|IntIntHashMap
name|boostDocs
parameter_list|,
name|FunctionQuery
name|funcQuery
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
operator|!
name|GroupHeadSelectorType
operator|.
name|SCORE
operator|.
name|equals
argument_list|(
name|groupHeadSelector
operator|.
name|type
argument_list|)
assert|;
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
name|this
operator|.
name|contexts
operator|=
operator|new
name|LeafReaderContext
index|[
name|segments
index|]
expr_stmt|;
name|this
operator|.
name|collapseValues
operator|=
name|collapseValues
expr_stmt|;
if|if
condition|(
name|collapseValues
operator|instanceof
name|MultiDocValues
operator|.
name|MultiSortedDocValues
condition|)
block|{
name|this
operator|.
name|multiSortedDocValues
operator|=
operator|(
name|MultiDocValues
operator|.
name|MultiSortedDocValues
operator|)
name|collapseValues
expr_stmt|;
name|this
operator|.
name|ordinalMap
operator|=
name|multiSortedDocValues
operator|.
name|mapping
expr_stmt|;
block|}
name|int
name|valueCount
init|=
name|collapseValues
operator|.
name|getValueCount
argument_list|()
decl_stmt|;
name|this
operator|.
name|nullPolicy
operator|=
name|nullPolicy
expr_stmt|;
name|this
operator|.
name|needsScores
operator|=
name|needsScores
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|sortSpec
condition|)
block|{
name|this
operator|.
name|collapseStrategy
operator|=
operator|new
name|OrdSortSpecStrategy
argument_list|(
name|maxDoc
argument_list|,
name|nullPolicy
argument_list|,
operator|new
name|int
index|[
name|valueCount
index|]
argument_list|,
name|groupHeadSelector
argument_list|,
name|this
operator|.
name|needsScores
argument_list|,
name|boostDocs
argument_list|,
name|sortSpec
argument_list|,
name|searcher
argument_list|,
name|collapseValues
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|funcQuery
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|collapseStrategy
operator|=
operator|new
name|OrdValueSourceStrategy
argument_list|(
name|maxDoc
argument_list|,
name|nullPolicy
argument_list|,
operator|new
name|int
index|[
name|valueCount
index|]
argument_list|,
name|groupHeadSelector
argument_list|,
name|this
operator|.
name|needsScores
argument_list|,
name|boostDocs
argument_list|,
name|funcQuery
argument_list|,
name|searcher
argument_list|,
name|collapseValues
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|fieldType
operator|instanceof
name|TrieIntField
condition|)
block|{
name|this
operator|.
name|collapseStrategy
operator|=
operator|new
name|OrdIntStrategy
argument_list|(
name|maxDoc
argument_list|,
name|nullPolicy
argument_list|,
operator|new
name|int
index|[
name|valueCount
index|]
argument_list|,
name|groupHeadSelector
argument_list|,
name|this
operator|.
name|needsScores
argument_list|,
name|boostDocs
argument_list|,
name|collapseValues
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldType
operator|instanceof
name|TrieFloatField
condition|)
block|{
name|this
operator|.
name|collapseStrategy
operator|=
operator|new
name|OrdFloatStrategy
argument_list|(
name|maxDoc
argument_list|,
name|nullPolicy
argument_list|,
operator|new
name|int
index|[
name|valueCount
index|]
argument_list|,
name|groupHeadSelector
argument_list|,
name|this
operator|.
name|needsScores
argument_list|,
name|boostDocs
argument_list|,
name|collapseValues
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldType
operator|instanceof
name|TrieLongField
condition|)
block|{
name|this
operator|.
name|collapseStrategy
operator|=
operator|new
name|OrdLongStrategy
argument_list|(
name|maxDoc
argument_list|,
name|nullPolicy
argument_list|,
operator|new
name|int
index|[
name|valueCount
index|]
argument_list|,
name|groupHeadSelector
argument_list|,
name|this
operator|.
name|needsScores
argument_list|,
name|boostDocs
argument_list|,
name|collapseValues
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"min/max must be either TrieInt, TrieLong, TrieFloat."
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|acceptsDocsOutOfOrder
specifier|public
name|boolean
name|acceptsDocsOutOfOrder
parameter_list|()
block|{
comment|//Documents must be sent in order to this collector.
return|return
literal|false
return|;
block|}
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{
name|this
operator|.
name|collapseStrategy
operator|.
name|setScorer
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
block|}
DECL|method|doSetNextReader
specifier|public
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|contexts
index|[
name|context
operator|.
name|ord
index|]
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|docBase
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
name|this
operator|.
name|collapseStrategy
operator|.
name|setNextReader
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|ordinalMap
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|segmentValues
operator|=
name|this
operator|.
name|multiSortedDocValues
operator|.
name|values
index|[
name|context
operator|.
name|ord
index|]
expr_stmt|;
name|this
operator|.
name|segmentOrdinalMap
operator|=
name|ordinalMap
operator|.
name|getGlobalOrds
argument_list|(
name|context
operator|.
name|ord
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|segmentValues
operator|=
name|collapseValues
expr_stmt|;
block|}
block|}
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|contextDoc
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|globalDoc
init|=
name|contextDoc
operator|+
name|this
operator|.
name|docBase
decl_stmt|;
name|int
name|ord
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|ordinalMap
operator|!=
literal|null
condition|)
block|{
name|ord
operator|=
name|segmentValues
operator|.
name|getOrd
argument_list|(
name|contextDoc
argument_list|)
expr_stmt|;
if|if
condition|(
name|ord
operator|>
operator|-
literal|1
condition|)
block|{
name|ord
operator|=
operator|(
name|int
operator|)
name|segmentOrdinalMap
operator|.
name|get
argument_list|(
name|ord
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ord
operator|=
name|segmentValues
operator|.
name|getOrd
argument_list|(
name|globalDoc
argument_list|)
expr_stmt|;
block|}
name|collapseStrategy
operator|.
name|collapse
argument_list|(
name|ord
argument_list|,
name|contextDoc
argument_list|,
name|globalDoc
argument_list|)
expr_stmt|;
block|}
DECL|method|finish
specifier|public
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|contexts
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|int
name|currentContext
init|=
literal|0
decl_stmt|;
name|int
name|currentDocBase
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|ordinalMap
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|segmentValues
operator|=
name|this
operator|.
name|multiSortedDocValues
operator|.
name|values
index|[
name|currentContext
index|]
expr_stmt|;
name|this
operator|.
name|segmentOrdinalMap
operator|=
name|this
operator|.
name|ordinalMap
operator|.
name|getGlobalOrds
argument_list|(
name|currentContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|segmentValues
operator|=
name|collapseValues
expr_stmt|;
block|}
name|int
name|nextDocBase
init|=
name|currentContext
operator|+
literal|1
operator|<
name|contexts
operator|.
name|length
condition|?
name|contexts
index|[
name|currentContext
operator|+
literal|1
index|]
operator|.
name|docBase
else|:
name|maxDoc
decl_stmt|;
name|leafDelegate
operator|=
name|delegate
operator|.
name|getLeafCollector
argument_list|(
name|contexts
index|[
name|currentContext
index|]
argument_list|)
expr_stmt|;
name|DummyScorer
name|dummy
init|=
operator|new
name|DummyScorer
argument_list|()
decl_stmt|;
name|leafDelegate
operator|.
name|setScorer
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|DocIdSetIterator
name|it
init|=
operator|new
name|BitSetIterator
argument_list|(
name|collapseStrategy
operator|.
name|getCollapsedSet
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// cost is not useful here
name|int
name|globalDoc
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|nullScoreIndex
init|=
literal|0
decl_stmt|;
name|float
index|[]
name|scores
init|=
name|collapseStrategy
operator|.
name|getScores
argument_list|()
decl_stmt|;
name|FloatArrayList
name|nullScores
init|=
name|collapseStrategy
operator|.
name|getNullScores
argument_list|()
decl_stmt|;
name|float
name|nullScore
init|=
name|collapseStrategy
operator|.
name|getNullScore
argument_list|()
decl_stmt|;
name|MergeBoost
name|mergeBoost
init|=
name|collapseStrategy
operator|.
name|getMergeBoost
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|globalDoc
operator|=
name|it
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
while|while
condition|(
name|globalDoc
operator|>=
name|nextDocBase
condition|)
block|{
name|currentContext
operator|++
expr_stmt|;
name|currentDocBase
operator|=
name|contexts
index|[
name|currentContext
index|]
operator|.
name|docBase
expr_stmt|;
name|nextDocBase
operator|=
name|currentContext
operator|+
literal|1
operator|<
name|contexts
operator|.
name|length
condition|?
name|contexts
index|[
name|currentContext
operator|+
literal|1
index|]
operator|.
name|docBase
else|:
name|maxDoc
expr_stmt|;
name|leafDelegate
operator|=
name|delegate
operator|.
name|getLeafCollector
argument_list|(
name|contexts
index|[
name|currentContext
index|]
argument_list|)
expr_stmt|;
name|leafDelegate
operator|.
name|setScorer
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
if|if
condition|(
name|ordinalMap
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|segmentValues
operator|=
name|this
operator|.
name|multiSortedDocValues
operator|.
name|values
index|[
name|currentContext
index|]
expr_stmt|;
name|this
operator|.
name|segmentOrdinalMap
operator|=
name|this
operator|.
name|ordinalMap
operator|.
name|getGlobalOrds
argument_list|(
name|currentContext
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|contextDoc
init|=
name|globalDoc
operator|-
name|currentDocBase
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|needsScores
condition|)
block|{
name|int
name|ord
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|ordinalMap
operator|!=
literal|null
condition|)
block|{
comment|//Handle ordinalMapping case
name|ord
operator|=
name|segmentValues
operator|.
name|getOrd
argument_list|(
name|contextDoc
argument_list|)
expr_stmt|;
if|if
condition|(
name|ord
operator|>
operator|-
literal|1
condition|)
block|{
name|ord
operator|=
operator|(
name|int
operator|)
name|segmentOrdinalMap
operator|.
name|get
argument_list|(
name|ord
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//Handle top Level FieldCache or Single Segment Case
name|ord
operator|=
name|segmentValues
operator|.
name|getOrd
argument_list|(
name|globalDoc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ord
operator|>
operator|-
literal|1
condition|)
block|{
name|dummy
operator|.
name|score
operator|=
name|scores
index|[
name|ord
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mergeBoost
operator|!=
literal|null
operator|&&
name|mergeBoost
operator|.
name|boost
argument_list|(
name|globalDoc
argument_list|)
condition|)
block|{
comment|//It's an elevated doc so no score is needed
name|dummy
operator|.
name|score
operator|=
literal|0F
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_COLLAPSE
condition|)
block|{
name|dummy
operator|.
name|score
operator|=
name|nullScore
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|dummy
operator|.
name|score
operator|=
name|nullScores
operator|.
name|get
argument_list|(
name|nullScoreIndex
operator|++
argument_list|)
expr_stmt|;
block|}
block|}
name|dummy
operator|.
name|docId
operator|=
name|contextDoc
expr_stmt|;
name|leafDelegate
operator|.
name|collect
argument_list|(
name|contextDoc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|delegate
operator|instanceof
name|DelegatingCollector
condition|)
block|{
operator|(
operator|(
name|DelegatingCollector
operator|)
name|delegate
operator|)
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    *  Collapses on an integer field.    */
DECL|class|IntFieldValueCollector
specifier|private
specifier|static
class|class
name|IntFieldValueCollector
extends|extends
name|DelegatingCollector
block|{
DECL|field|contexts
specifier|private
name|LeafReaderContext
index|[]
name|contexts
decl_stmt|;
DECL|field|collapseValues
specifier|private
name|NumericDocValues
name|collapseValues
decl_stmt|;
DECL|field|maxDoc
specifier|private
name|int
name|maxDoc
decl_stmt|;
DECL|field|nullValue
specifier|private
name|int
name|nullValue
decl_stmt|;
DECL|field|nullPolicy
specifier|private
name|int
name|nullPolicy
decl_stmt|;
DECL|field|collapseStrategy
specifier|private
name|IntFieldValueStrategy
name|collapseStrategy
decl_stmt|;
DECL|field|needsScores
specifier|private
name|boolean
name|needsScores
decl_stmt|;
DECL|field|collapseField
specifier|private
name|String
name|collapseField
decl_stmt|;
DECL|method|IntFieldValueCollector
specifier|public
name|IntFieldValueCollector
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|segments
parameter_list|,
name|int
name|nullValue
parameter_list|,
name|int
name|nullPolicy
parameter_list|,
name|String
name|collapseField
parameter_list|,
name|GroupHeadSelector
name|groupHeadSelector
parameter_list|,
name|SortSpec
name|sortSpec
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|FieldType
name|fieldType
parameter_list|,
name|IntIntHashMap
name|boostDocsMap
parameter_list|,
name|FunctionQuery
name|funcQuery
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
operator|!
name|GroupHeadSelectorType
operator|.
name|SCORE
operator|.
name|equals
argument_list|(
name|groupHeadSelector
operator|.
name|type
argument_list|)
assert|;
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
name|this
operator|.
name|contexts
operator|=
operator|new
name|LeafReaderContext
index|[
name|segments
index|]
expr_stmt|;
name|this
operator|.
name|collapseField
operator|=
name|collapseField
expr_stmt|;
name|this
operator|.
name|nullValue
operator|=
name|nullValue
expr_stmt|;
name|this
operator|.
name|nullPolicy
operator|=
name|nullPolicy
expr_stmt|;
name|this
operator|.
name|needsScores
operator|=
name|needsScores
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|sortSpec
condition|)
block|{
name|this
operator|.
name|collapseStrategy
operator|=
operator|new
name|IntSortSpecStrategy
argument_list|(
name|maxDoc
argument_list|,
name|size
argument_list|,
name|collapseField
argument_list|,
name|nullValue
argument_list|,
name|nullPolicy
argument_list|,
name|groupHeadSelector
argument_list|,
name|this
operator|.
name|needsScores
argument_list|,
name|boostDocsMap
argument_list|,
name|sortSpec
argument_list|,
name|searcher
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|funcQuery
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|collapseStrategy
operator|=
operator|new
name|IntValueSourceStrategy
argument_list|(
name|maxDoc
argument_list|,
name|size
argument_list|,
name|collapseField
argument_list|,
name|nullValue
argument_list|,
name|nullPolicy
argument_list|,
name|groupHeadSelector
argument_list|,
name|this
operator|.
name|needsScores
argument_list|,
name|boostDocsMap
argument_list|,
name|funcQuery
argument_list|,
name|searcher
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|fieldType
operator|instanceof
name|TrieIntField
condition|)
block|{
name|this
operator|.
name|collapseStrategy
operator|=
operator|new
name|IntIntStrategy
argument_list|(
name|maxDoc
argument_list|,
name|size
argument_list|,
name|collapseField
argument_list|,
name|nullValue
argument_list|,
name|nullPolicy
argument_list|,
name|groupHeadSelector
argument_list|,
name|this
operator|.
name|needsScores
argument_list|,
name|boostDocsMap
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldType
operator|instanceof
name|TrieFloatField
condition|)
block|{
name|this
operator|.
name|collapseStrategy
operator|=
operator|new
name|IntFloatStrategy
argument_list|(
name|maxDoc
argument_list|,
name|size
argument_list|,
name|collapseField
argument_list|,
name|nullValue
argument_list|,
name|nullPolicy
argument_list|,
name|groupHeadSelector
argument_list|,
name|this
operator|.
name|needsScores
argument_list|,
name|boostDocsMap
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"min/max must be TrieInt or TrieFloat when collapsing on numeric fields ."
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|acceptsDocsOutOfOrder
specifier|public
name|boolean
name|acceptsDocsOutOfOrder
parameter_list|()
block|{
comment|//Documents must be sent in order to this collector.
return|return
literal|false
return|;
block|}
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{
name|this
operator|.
name|collapseStrategy
operator|.
name|setScorer
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
block|}
DECL|method|doSetNextReader
specifier|public
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|contexts
index|[
name|context
operator|.
name|ord
index|]
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|docBase
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
name|this
operator|.
name|collapseStrategy
operator|.
name|setNextReader
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|collapseValues
operator|=
name|DocValues
operator|.
name|getNumeric
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|this
operator|.
name|collapseField
argument_list|)
expr_stmt|;
block|}
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|contextDoc
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|globalDoc
init|=
name|contextDoc
operator|+
name|this
operator|.
name|docBase
decl_stmt|;
name|int
name|collapseKey
init|=
operator|(
name|int
operator|)
name|this
operator|.
name|collapseValues
operator|.
name|get
argument_list|(
name|contextDoc
argument_list|)
decl_stmt|;
name|collapseStrategy
operator|.
name|collapse
argument_list|(
name|collapseKey
argument_list|,
name|contextDoc
argument_list|,
name|globalDoc
argument_list|)
expr_stmt|;
block|}
DECL|method|finish
specifier|public
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|contexts
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|int
name|currentContext
init|=
literal|0
decl_stmt|;
name|int
name|currentDocBase
init|=
literal|0
decl_stmt|;
name|this
operator|.
name|collapseValues
operator|=
name|DocValues
operator|.
name|getNumeric
argument_list|(
name|contexts
index|[
name|currentContext
index|]
operator|.
name|reader
argument_list|()
argument_list|,
name|this
operator|.
name|collapseField
argument_list|)
expr_stmt|;
name|int
name|nextDocBase
init|=
name|currentContext
operator|+
literal|1
operator|<
name|contexts
operator|.
name|length
condition|?
name|contexts
index|[
name|currentContext
operator|+
literal|1
index|]
operator|.
name|docBase
else|:
name|maxDoc
decl_stmt|;
name|leafDelegate
operator|=
name|delegate
operator|.
name|getLeafCollector
argument_list|(
name|contexts
index|[
name|currentContext
index|]
argument_list|)
expr_stmt|;
name|DummyScorer
name|dummy
init|=
operator|new
name|DummyScorer
argument_list|()
decl_stmt|;
name|leafDelegate
operator|.
name|setScorer
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|DocIdSetIterator
name|it
init|=
operator|new
name|BitSetIterator
argument_list|(
name|collapseStrategy
operator|.
name|getCollapsedSet
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// cost is not useful here
name|int
name|globalDoc
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|nullScoreIndex
init|=
literal|0
decl_stmt|;
name|IntIntHashMap
name|cmap
init|=
name|collapseStrategy
operator|.
name|getCollapseMap
argument_list|()
decl_stmt|;
name|int
index|[]
name|docs
init|=
name|collapseStrategy
operator|.
name|getDocs
argument_list|()
decl_stmt|;
name|float
index|[]
name|scores
init|=
name|collapseStrategy
operator|.
name|getScores
argument_list|()
decl_stmt|;
name|FloatArrayList
name|nullScores
init|=
name|collapseStrategy
operator|.
name|getNullScores
argument_list|()
decl_stmt|;
name|MergeBoost
name|mergeBoost
init|=
name|collapseStrategy
operator|.
name|getMergeBoost
argument_list|()
decl_stmt|;
name|float
name|nullScore
init|=
name|collapseStrategy
operator|.
name|getNullScore
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|globalDoc
operator|=
name|it
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
while|while
condition|(
name|globalDoc
operator|>=
name|nextDocBase
condition|)
block|{
name|currentContext
operator|++
expr_stmt|;
name|currentDocBase
operator|=
name|contexts
index|[
name|currentContext
index|]
operator|.
name|docBase
expr_stmt|;
name|nextDocBase
operator|=
name|currentContext
operator|+
literal|1
operator|<
name|contexts
operator|.
name|length
condition|?
name|contexts
index|[
name|currentContext
operator|+
literal|1
index|]
operator|.
name|docBase
else|:
name|maxDoc
expr_stmt|;
name|leafDelegate
operator|=
name|delegate
operator|.
name|getLeafCollector
argument_list|(
name|contexts
index|[
name|currentContext
index|]
argument_list|)
expr_stmt|;
name|leafDelegate
operator|.
name|setScorer
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|this
operator|.
name|collapseValues
operator|=
name|DocValues
operator|.
name|getNumeric
argument_list|(
name|contexts
index|[
name|currentContext
index|]
operator|.
name|reader
argument_list|()
argument_list|,
name|this
operator|.
name|collapseField
argument_list|)
expr_stmt|;
block|}
name|int
name|contextDoc
init|=
name|globalDoc
operator|-
name|currentDocBase
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|needsScores
condition|)
block|{
name|int
name|collapseValue
init|=
operator|(
name|int
operator|)
name|collapseValues
operator|.
name|get
argument_list|(
name|contextDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|collapseValue
operator|!=
name|nullValue
condition|)
block|{
name|int
name|pointer
init|=
name|cmap
operator|.
name|get
argument_list|(
name|collapseValue
argument_list|)
decl_stmt|;
name|dummy
operator|.
name|score
operator|=
name|scores
index|[
name|pointer
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mergeBoost
operator|!=
literal|null
operator|&&
name|mergeBoost
operator|.
name|boost
argument_list|(
name|globalDoc
argument_list|)
condition|)
block|{
comment|//Its an elevated doc so no score is needed
name|dummy
operator|.
name|score
operator|=
literal|0F
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_COLLAPSE
condition|)
block|{
name|dummy
operator|.
name|score
operator|=
name|nullScore
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|dummy
operator|.
name|score
operator|=
name|nullScores
operator|.
name|get
argument_list|(
name|nullScoreIndex
operator|++
argument_list|)
expr_stmt|;
block|}
block|}
name|dummy
operator|.
name|docId
operator|=
name|contextDoc
expr_stmt|;
name|leafDelegate
operator|.
name|collect
argument_list|(
name|contextDoc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|delegate
operator|instanceof
name|DelegatingCollector
condition|)
block|{
operator|(
operator|(
name|DelegatingCollector
operator|)
name|delegate
operator|)
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|CollectorFactory
specifier|private
specifier|static
class|class
name|CollectorFactory
block|{
DECL|method|getCollector
specifier|public
name|DelegatingCollector
name|getCollector
parameter_list|(
name|String
name|collapseField
parameter_list|,
name|GroupHeadSelector
name|groupHeadSelector
parameter_list|,
name|SortSpec
name|sortSpec
parameter_list|,
name|int
name|nullPolicy
parameter_list|,
name|String
name|hint
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|int
name|size
parameter_list|,
name|IntIntHashMap
name|boostDocs
parameter_list|,
name|SolrIndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedDocValues
name|docValues
init|=
literal|null
decl_stmt|;
name|FunctionQuery
name|funcQuery
init|=
literal|null
decl_stmt|;
name|FieldType
name|collapseFieldType
init|=
name|searcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|collapseField
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|defaultValue
init|=
name|searcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|collapseField
argument_list|)
operator|.
name|getDefaultValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|collapseFieldType
operator|instanceof
name|StrField
condition|)
block|{
if|if
condition|(
name|HINT_TOP_FC
operator|.
name|equals
argument_list|(
name|hint
argument_list|)
condition|)
block|{
comment|/*             * This hint forces the use of the top level field cache for String fields.             * This is VERY fast at query time but slower to warm and causes insanity.             */
name|Map
argument_list|<
name|String
argument_list|,
name|UninvertingReader
operator|.
name|Type
argument_list|>
name|mapping
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|mapping
operator|.
name|put
argument_list|(
name|collapseField
argument_list|,
name|UninvertingReader
operator|.
name|Type
operator|.
name|SORTED
argument_list|)
expr_stmt|;
name|UninvertingReader
name|uninvertingReader
init|=
operator|new
name|UninvertingReader
argument_list|(
operator|new
name|ReaderWrapper
argument_list|(
name|searcher
operator|.
name|getLeafReader
argument_list|()
argument_list|,
name|collapseField
argument_list|)
argument_list|,
name|mapping
argument_list|)
decl_stmt|;
name|docValues
operator|=
name|uninvertingReader
operator|.
name|getSortedDocValues
argument_list|(
name|collapseField
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docValues
operator|=
name|DocValues
operator|.
name|getSorted
argument_list|(
name|searcher
operator|.
name|getLeafReader
argument_list|()
argument_list|,
name|collapseField
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|HINT_TOP_FC
operator|.
name|equals
argument_list|(
name|hint
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"top_fc hint is only supported when collapsing on String Fields"
argument_list|)
throw|;
block|}
block|}
name|FieldType
name|minMaxFieldType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|GroupHeadSelectorType
operator|.
name|MIN_MAX
operator|.
name|contains
argument_list|(
name|groupHeadSelector
operator|.
name|type
argument_list|)
condition|)
block|{
specifier|final
name|String
name|text
init|=
name|groupHeadSelector
operator|.
name|selectorText
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|indexOf
argument_list|(
literal|"("
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|minMaxFieldType
operator|=
name|searcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|text
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LocalSolrQueryRequest
name|request
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|request
operator|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|searcher
operator|.
name|getCore
argument_list|()
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|FunctionQParser
name|functionQParser
init|=
operator|new
name|FunctionQParser
argument_list|(
name|text
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|funcQuery
operator|=
operator|(
name|FunctionQuery
operator|)
name|functionQParser
operator|.
name|parse
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|request
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|int
name|maxDoc
init|=
name|searcher
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
name|int
name|leafCount
init|=
name|searcher
operator|.
name|getTopReaderContext
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|GroupHeadSelectorType
operator|.
name|SCORE
operator|.
name|equals
argument_list|(
name|groupHeadSelector
operator|.
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
name|collapseFieldType
operator|instanceof
name|StrField
condition|)
block|{
return|return
operator|new
name|OrdScoreCollector
argument_list|(
name|maxDoc
argument_list|,
name|leafCount
argument_list|,
name|docValues
argument_list|,
name|nullPolicy
argument_list|,
name|boostDocs
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|collapseFieldType
operator|instanceof
name|TrieIntField
operator|||
name|collapseFieldType
operator|instanceof
name|TrieFloatField
condition|)
block|{
name|int
name|nullValue
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|collapseFieldType
operator|instanceof
name|TrieFloatField
condition|)
block|{
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
block|{
name|nullValue
operator|=
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|Float
operator|.
name|parseFloat
argument_list|(
name|defaultValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nullValue
operator|=
name|Float
operator|.
name|floatToIntBits
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
block|{
name|nullValue
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|IntScoreCollector
argument_list|(
name|maxDoc
argument_list|,
name|leafCount
argument_list|,
name|nullValue
argument_list|,
name|nullPolicy
argument_list|,
name|size
argument_list|,
name|collapseField
argument_list|,
name|boostDocs
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"64 bit numeric collapse fields are not supported"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// min, max, sort, etc.. something other then just "score"
if|if
condition|(
name|collapseFieldType
operator|instanceof
name|StrField
condition|)
block|{
return|return
operator|new
name|OrdFieldValueCollector
argument_list|(
name|maxDoc
argument_list|,
name|leafCount
argument_list|,
name|docValues
argument_list|,
name|nullPolicy
argument_list|,
name|groupHeadSelector
argument_list|,
name|sortSpec
argument_list|,
name|needsScores
argument_list|,
name|minMaxFieldType
argument_list|,
name|boostDocs
argument_list|,
name|funcQuery
argument_list|,
name|searcher
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|collapseFieldType
operator|instanceof
name|TrieIntField
operator|||
name|collapseFieldType
operator|instanceof
name|TrieFloatField
operator|)
condition|)
block|{
name|int
name|nullValue
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|collapseFieldType
operator|instanceof
name|TrieFloatField
condition|)
block|{
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
block|{
name|nullValue
operator|=
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|Float
operator|.
name|parseFloat
argument_list|(
name|defaultValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nullValue
operator|=
name|Float
operator|.
name|floatToIntBits
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
block|{
name|nullValue
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|IntFieldValueCollector
argument_list|(
name|maxDoc
argument_list|,
name|size
argument_list|,
name|leafCount
argument_list|,
name|nullValue
argument_list|,
name|nullPolicy
argument_list|,
name|collapseField
argument_list|,
name|groupHeadSelector
argument_list|,
name|sortSpec
argument_list|,
name|needsScores
argument_list|,
name|minMaxFieldType
argument_list|,
name|boostDocs
argument_list|,
name|funcQuery
argument_list|,
name|searcher
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"64 bit numeric collapse fields are not supported"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
DECL|class|CollapseScore
specifier|public
specifier|static
specifier|final
class|class
name|CollapseScore
block|{
comment|/**       * Inspects the GroupHeadSelector to determine if this CollapseScore is needed.      * If it is, then "this" will be added to the readerContext       * using the "CSCORE" key, and true will be returned.  If not returns false.      */
DECL|method|setupIfNeeded
specifier|public
name|boolean
name|setupIfNeeded
parameter_list|(
specifier|final
name|GroupHeadSelector
name|groupHeadSelector
parameter_list|,
specifier|final
name|Map
name|readerContext
parameter_list|)
block|{
comment|// HACK, but not really any better options until/unless we can recursively
comment|// ask value sources if they depend on score
if|if
condition|(
name|wantsCScore
argument_list|(
name|groupHeadSelector
operator|.
name|selectorText
argument_list|)
condition|)
block|{
name|readerContext
operator|.
name|put
argument_list|(
literal|"CSCORE"
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**       * Huge HACK, but not really any better options until/unless we can recursively       * ask value sources if they depend on score       */
DECL|method|wantsCScore
specifier|public
specifier|static
name|boolean
name|wantsCScore
parameter_list|(
specifier|final
name|String
name|text
parameter_list|)
block|{
return|return
operator|(
literal|0
operator|<=
name|text
operator|.
name|indexOf
argument_list|(
literal|"cscore()"
argument_list|)
operator|)
return|;
block|}
DECL|method|CollapseScore
specifier|private
name|CollapseScore
parameter_list|()
block|{
comment|// No-Op
block|}
DECL|field|score
specifier|public
name|float
name|score
decl_stmt|;
block|}
comment|/*   * Collapse Strategies   */
comment|/**    * The abstract base Strategy for collapse strategies that collapse on an ordinal    * using min/max field value to select the group head.    *    */
DECL|class|OrdFieldValueStrategy
specifier|private
specifier|static
specifier|abstract
class|class
name|OrdFieldValueStrategy
block|{
DECL|field|nullPolicy
specifier|protected
name|int
name|nullPolicy
decl_stmt|;
DECL|field|ords
specifier|protected
name|int
index|[]
name|ords
decl_stmt|;
DECL|field|scorer
specifier|protected
name|Scorer
name|scorer
decl_stmt|;
DECL|field|nullScores
specifier|protected
name|FloatArrayList
name|nullScores
decl_stmt|;
DECL|field|nullScore
specifier|protected
name|float
name|nullScore
decl_stmt|;
DECL|field|scores
specifier|protected
name|float
index|[]
name|scores
decl_stmt|;
DECL|field|collapsedSet
specifier|protected
name|FixedBitSet
name|collapsedSet
decl_stmt|;
DECL|field|nullDoc
specifier|protected
name|int
name|nullDoc
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|needsScores
specifier|protected
name|boolean
name|needsScores
decl_stmt|;
DECL|field|boosts
specifier|protected
name|boolean
name|boosts
decl_stmt|;
DECL|field|boostOrds
specifier|protected
name|IntArrayList
name|boostOrds
decl_stmt|;
DECL|field|boostDocs
specifier|protected
name|IntArrayList
name|boostDocs
decl_stmt|;
DECL|field|mergeBoost
specifier|protected
name|MergeBoost
name|mergeBoost
decl_stmt|;
DECL|field|boosted
specifier|protected
name|boolean
name|boosted
decl_stmt|;
DECL|method|collapse
specifier|public
specifier|abstract
name|void
name|collapse
parameter_list|(
name|int
name|ord
parameter_list|,
name|int
name|contextDoc
parameter_list|,
name|int
name|globalDoc
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|setNextReader
specifier|public
specifier|abstract
name|void
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|OrdFieldValueStrategy
specifier|public
name|OrdFieldValueStrategy
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|int
index|[]
name|ords
parameter_list|,
name|int
name|nullPolicy
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|IntIntHashMap
name|boostDocsMap
parameter_list|,
name|SortedDocValues
name|values
parameter_list|)
block|{
name|this
operator|.
name|ords
operator|=
name|ords
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|ords
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|nullPolicy
operator|=
name|nullPolicy
expr_stmt|;
name|this
operator|.
name|needsScores
operator|=
name|needsScores
expr_stmt|;
name|this
operator|.
name|collapsedSet
operator|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
expr_stmt|;
if|if
condition|(
name|boostDocsMap
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|boosts
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|boostOrds
operator|=
operator|new
name|IntArrayList
argument_list|()
expr_stmt|;
name|this
operator|.
name|boostDocs
operator|=
operator|new
name|IntArrayList
argument_list|()
expr_stmt|;
name|int
index|[]
name|bd
init|=
operator|new
name|int
index|[
name|boostDocsMap
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|Iterator
argument_list|<
name|IntIntCursor
argument_list|>
name|it
init|=
name|boostDocsMap
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IntIntCursor
name|cursor
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|bd
index|[
operator|++
name|index
index|]
operator|=
name|cursor
operator|.
name|key
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|bd
argument_list|)
expr_stmt|;
name|this
operator|.
name|mergeBoost
operator|=
operator|new
name|MergeBoost
argument_list|(
name|bd
argument_list|)
expr_stmt|;
name|this
operator|.
name|boosted
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|getMergeBoost
specifier|public
name|MergeBoost
name|getMergeBoost
parameter_list|()
block|{
return|return
name|this
operator|.
name|mergeBoost
return|;
block|}
DECL|method|getCollapsedSet
specifier|public
name|FixedBitSet
name|getCollapsedSet
parameter_list|()
block|{
if|if
condition|(
name|nullDoc
operator|>
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|collapsedSet
operator|.
name|set
argument_list|(
name|nullDoc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|boostOrds
operator|!=
literal|null
condition|)
block|{
name|int
name|s
init|=
name|boostOrds
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
condition|;
name|i
operator|++
control|)
block|{
name|int
name|ord
init|=
name|boostOrds
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|>
operator|-
literal|1
condition|)
block|{
name|ords
index|[
name|ord
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|collapsedSet
operator|.
name|set
argument_list|(
name|boostDocs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mergeBoost
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ords
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|doc
init|=
name|ords
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|doc
operator|>
operator|-
literal|1
condition|)
block|{
name|collapsedSet
operator|.
name|set
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|collapsedSet
return|;
block|}
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
block|}
DECL|method|getNullScores
specifier|public
name|FloatArrayList
name|getNullScores
parameter_list|()
block|{
return|return
name|nullScores
return|;
block|}
DECL|method|getNullScore
specifier|public
name|float
name|getNullScore
parameter_list|()
block|{
return|return
name|this
operator|.
name|nullScore
return|;
block|}
DECL|method|getScores
specifier|public
name|float
index|[]
name|getScores
parameter_list|()
block|{
return|return
name|scores
return|;
block|}
block|}
comment|/*    * Strategy for collapsing on ordinal using min/max of an int field to select the group head.    */
DECL|class|OrdIntStrategy
specifier|private
specifier|static
class|class
name|OrdIntStrategy
extends|extends
name|OrdFieldValueStrategy
block|{
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|minMaxValues
specifier|private
name|NumericDocValues
name|minMaxValues
decl_stmt|;
DECL|field|comp
specifier|private
name|IntCompare
name|comp
decl_stmt|;
DECL|field|nullVal
specifier|private
name|int
name|nullVal
decl_stmt|;
DECL|field|ordVals
specifier|private
name|int
index|[]
name|ordVals
decl_stmt|;
DECL|method|OrdIntStrategy
specifier|public
name|OrdIntStrategy
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|int
name|nullPolicy
parameter_list|,
name|int
index|[]
name|ords
parameter_list|,
name|GroupHeadSelector
name|groupHeadSelector
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|IntIntHashMap
name|boostDocs
parameter_list|,
name|SortedDocValues
name|values
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|maxDoc
argument_list|,
name|ords
argument_list|,
name|nullPolicy
argument_list|,
name|needsScores
argument_list|,
name|boostDocs
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|groupHeadSelector
operator|.
name|selectorText
expr_stmt|;
name|this
operator|.
name|ordVals
operator|=
operator|new
name|int
index|[
name|ords
operator|.
name|length
index|]
expr_stmt|;
assert|assert
name|GroupHeadSelectorType
operator|.
name|MIN_MAX
operator|.
name|contains
argument_list|(
name|groupHeadSelector
operator|.
name|type
argument_list|)
assert|;
if|if
condition|(
name|GroupHeadSelectorType
operator|.
name|MAX
operator|.
name|equals
argument_list|(
name|groupHeadSelector
operator|.
name|type
argument_list|)
condition|)
block|{
name|comp
operator|=
operator|new
name|MaxIntComp
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|ordVals
argument_list|,
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|comp
operator|=
operator|new
name|MinIntComp
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|ordVals
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|this
operator|.
name|nullVal
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
if|if
condition|(
name|needsScores
condition|)
block|{
name|this
operator|.
name|scores
operator|=
operator|new
name|float
index|[
name|ords
operator|.
name|length
index|]
expr_stmt|;
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|nullScores
operator|=
operator|new
name|FloatArrayList
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|minMaxValues
operator|=
name|DocValues
operator|.
name|getNumeric
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|this
operator|.
name|field
argument_list|)
expr_stmt|;
block|}
DECL|method|collapse
specifier|public
name|void
name|collapse
parameter_list|(
name|int
name|ord
parameter_list|,
name|int
name|contextDoc
parameter_list|,
name|int
name|globalDoc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|boosted
operator|&&
name|mergeBoost
operator|.
name|boost
argument_list|(
name|globalDoc
argument_list|)
condition|)
block|{
name|this
operator|.
name|boostDocs
operator|.
name|add
argument_list|(
name|globalDoc
argument_list|)
expr_stmt|;
name|this
operator|.
name|boostOrds
operator|.
name|add
argument_list|(
name|ord
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|currentVal
init|=
operator|(
name|int
operator|)
name|minMaxValues
operator|.
name|get
argument_list|(
name|contextDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|>
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|comp
operator|.
name|test
argument_list|(
name|currentVal
argument_list|,
name|ordVals
index|[
name|ord
index|]
argument_list|)
condition|)
block|{
name|ords
index|[
name|ord
index|]
operator|=
name|globalDoc
expr_stmt|;
name|ordVals
index|[
name|ord
index|]
operator|=
name|currentVal
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|scores
index|[
name|ord
index|]
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_COLLAPSE
condition|)
block|{
if|if
condition|(
name|comp
operator|.
name|test
argument_list|(
name|currentVal
argument_list|,
name|nullVal
argument_list|)
condition|)
block|{
name|nullVal
operator|=
name|currentVal
expr_stmt|;
name|nullDoc
operator|=
name|globalDoc
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|nullScore
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|this
operator|.
name|collapsedSet
operator|.
name|set
argument_list|(
name|globalDoc
argument_list|)
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|nullScores
operator|.
name|add
argument_list|(
name|scorer
operator|.
name|score
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Strategy for collapsing on ordinal and using the min/max value of a float    * field to select the group head    */
DECL|class|OrdFloatStrategy
specifier|private
specifier|static
class|class
name|OrdFloatStrategy
extends|extends
name|OrdFieldValueStrategy
block|{
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|minMaxValues
specifier|private
name|NumericDocValues
name|minMaxValues
decl_stmt|;
DECL|field|comp
specifier|private
name|FloatCompare
name|comp
decl_stmt|;
DECL|field|nullVal
specifier|private
name|float
name|nullVal
decl_stmt|;
DECL|field|ordVals
specifier|private
name|float
index|[]
name|ordVals
decl_stmt|;
DECL|method|OrdFloatStrategy
specifier|public
name|OrdFloatStrategy
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|int
name|nullPolicy
parameter_list|,
name|int
index|[]
name|ords
parameter_list|,
name|GroupHeadSelector
name|groupHeadSelector
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|IntIntHashMap
name|boostDocs
parameter_list|,
name|SortedDocValues
name|values
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|maxDoc
argument_list|,
name|ords
argument_list|,
name|nullPolicy
argument_list|,
name|needsScores
argument_list|,
name|boostDocs
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|groupHeadSelector
operator|.
name|selectorText
expr_stmt|;
name|this
operator|.
name|ordVals
operator|=
operator|new
name|float
index|[
name|ords
operator|.
name|length
index|]
expr_stmt|;
assert|assert
name|GroupHeadSelectorType
operator|.
name|MIN_MAX
operator|.
name|contains
argument_list|(
name|groupHeadSelector
operator|.
name|type
argument_list|)
assert|;
if|if
condition|(
name|GroupHeadSelectorType
operator|.
name|MAX
operator|.
name|equals
argument_list|(
name|groupHeadSelector
operator|.
name|type
argument_list|)
condition|)
block|{
name|comp
operator|=
operator|new
name|MaxFloatComp
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|ordVals
argument_list|,
operator|-
name|Float
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|this
operator|.
name|nullVal
operator|=
operator|-
name|Float
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
else|else
block|{
name|comp
operator|=
operator|new
name|MinFloatComp
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|ordVals
argument_list|,
name|Float
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|this
operator|.
name|nullVal
operator|=
name|Float
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
if|if
condition|(
name|needsScores
condition|)
block|{
name|this
operator|.
name|scores
operator|=
operator|new
name|float
index|[
name|ords
operator|.
name|length
index|]
expr_stmt|;
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|nullScores
operator|=
operator|new
name|FloatArrayList
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|minMaxValues
operator|=
name|DocValues
operator|.
name|getNumeric
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|this
operator|.
name|field
argument_list|)
expr_stmt|;
block|}
DECL|method|collapse
specifier|public
name|void
name|collapse
parameter_list|(
name|int
name|ord
parameter_list|,
name|int
name|contextDoc
parameter_list|,
name|int
name|globalDoc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|boosted
operator|&&
name|mergeBoost
operator|.
name|boost
argument_list|(
name|globalDoc
argument_list|)
condition|)
block|{
name|this
operator|.
name|boostDocs
operator|.
name|add
argument_list|(
name|globalDoc
argument_list|)
expr_stmt|;
name|this
operator|.
name|boostOrds
operator|.
name|add
argument_list|(
name|ord
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|currentMinMax
init|=
operator|(
name|int
operator|)
name|minMaxValues
operator|.
name|get
argument_list|(
name|contextDoc
argument_list|)
decl_stmt|;
name|float
name|currentVal
init|=
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|currentMinMax
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|>
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|comp
operator|.
name|test
argument_list|(
name|currentVal
argument_list|,
name|ordVals
index|[
name|ord
index|]
argument_list|)
condition|)
block|{
name|ords
index|[
name|ord
index|]
operator|=
name|globalDoc
expr_stmt|;
name|ordVals
index|[
name|ord
index|]
operator|=
name|currentVal
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|scores
index|[
name|ord
index|]
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_COLLAPSE
condition|)
block|{
if|if
condition|(
name|comp
operator|.
name|test
argument_list|(
name|currentVal
argument_list|,
name|nullVal
argument_list|)
condition|)
block|{
name|nullVal
operator|=
name|currentVal
expr_stmt|;
name|nullDoc
operator|=
name|globalDoc
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|nullScore
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|this
operator|.
name|collapsedSet
operator|.
name|set
argument_list|(
name|globalDoc
argument_list|)
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|nullScores
operator|.
name|add
argument_list|(
name|scorer
operator|.
name|score
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*   * Strategy for collapsing on ordinal and using the min/max value of a long   * field to select the group head   */
DECL|class|OrdLongStrategy
specifier|private
specifier|static
class|class
name|OrdLongStrategy
extends|extends
name|OrdFieldValueStrategy
block|{
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|minMaxVals
specifier|private
name|NumericDocValues
name|minMaxVals
decl_stmt|;
DECL|field|comp
specifier|private
name|LongCompare
name|comp
decl_stmt|;
DECL|field|nullVal
specifier|private
name|long
name|nullVal
decl_stmt|;
DECL|field|ordVals
specifier|private
name|long
index|[]
name|ordVals
decl_stmt|;
DECL|method|OrdLongStrategy
specifier|public
name|OrdLongStrategy
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|int
name|nullPolicy
parameter_list|,
name|int
index|[]
name|ords
parameter_list|,
name|GroupHeadSelector
name|groupHeadSelector
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|IntIntHashMap
name|boostDocs
parameter_list|,
name|SortedDocValues
name|values
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|maxDoc
argument_list|,
name|ords
argument_list|,
name|nullPolicy
argument_list|,
name|needsScores
argument_list|,
name|boostDocs
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|groupHeadSelector
operator|.
name|selectorText
expr_stmt|;
name|this
operator|.
name|ordVals
operator|=
operator|new
name|long
index|[
name|ords
operator|.
name|length
index|]
expr_stmt|;
assert|assert
name|GroupHeadSelectorType
operator|.
name|MIN_MAX
operator|.
name|contains
argument_list|(
name|groupHeadSelector
operator|.
name|type
argument_list|)
assert|;
if|if
condition|(
name|GroupHeadSelectorType
operator|.
name|MAX
operator|.
name|equals
argument_list|(
name|groupHeadSelector
operator|.
name|type
argument_list|)
condition|)
block|{
name|comp
operator|=
operator|new
name|MaxLongComp
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|ordVals
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|nullVal
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
name|comp
operator|=
operator|new
name|MinLongComp
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|ordVals
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|needsScores
condition|)
block|{
name|this
operator|.
name|scores
operator|=
operator|new
name|float
index|[
name|ords
operator|.
name|length
index|]
expr_stmt|;
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|nullScores
operator|=
operator|new
name|FloatArrayList
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|minMaxVals
operator|=
name|DocValues
operator|.
name|getNumeric
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|this
operator|.
name|field
argument_list|)
expr_stmt|;
block|}
DECL|method|collapse
specifier|public
name|void
name|collapse
parameter_list|(
name|int
name|ord
parameter_list|,
name|int
name|contextDoc
parameter_list|,
name|int
name|globalDoc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|boosted
operator|&&
name|mergeBoost
operator|.
name|boost
argument_list|(
name|globalDoc
argument_list|)
condition|)
block|{
name|this
operator|.
name|boostOrds
operator|.
name|add
argument_list|(
name|ord
argument_list|)
expr_stmt|;
name|this
operator|.
name|boostDocs
operator|.
name|add
argument_list|(
name|globalDoc
argument_list|)
expr_stmt|;
return|return;
block|}
name|long
name|currentVal
init|=
name|minMaxVals
operator|.
name|get
argument_list|(
name|contextDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|>
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|comp
operator|.
name|test
argument_list|(
name|currentVal
argument_list|,
name|ordVals
index|[
name|ord
index|]
argument_list|)
condition|)
block|{
name|ords
index|[
name|ord
index|]
operator|=
name|globalDoc
expr_stmt|;
name|ordVals
index|[
name|ord
index|]
operator|=
name|currentVal
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|scores
index|[
name|ord
index|]
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_COLLAPSE
condition|)
block|{
if|if
condition|(
name|comp
operator|.
name|test
argument_list|(
name|currentVal
argument_list|,
name|nullVal
argument_list|)
condition|)
block|{
name|nullVal
operator|=
name|currentVal
expr_stmt|;
name|nullDoc
operator|=
name|globalDoc
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|nullScore
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|this
operator|.
name|collapsedSet
operator|.
name|set
argument_list|(
name|globalDoc
argument_list|)
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|nullScores
operator|.
name|add
argument_list|(
name|scorer
operator|.
name|score
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*    * Strategy for collapsing on ordinal and using the min/max value of a value source function    * to select the group head    */
DECL|class|OrdValueSourceStrategy
specifier|private
specifier|static
class|class
name|OrdValueSourceStrategy
extends|extends
name|OrdFieldValueStrategy
block|{
DECL|field|comp
specifier|private
name|FloatCompare
name|comp
decl_stmt|;
DECL|field|nullVal
specifier|private
name|float
name|nullVal
decl_stmt|;
DECL|field|valueSource
specifier|private
name|ValueSource
name|valueSource
decl_stmt|;
DECL|field|functionValues
specifier|private
name|FunctionValues
name|functionValues
decl_stmt|;
DECL|field|ordVals
specifier|private
name|float
index|[]
name|ordVals
decl_stmt|;
DECL|field|rcontext
specifier|private
name|Map
name|rcontext
decl_stmt|;
DECL|field|collapseScore
specifier|private
specifier|final
name|CollapseScore
name|collapseScore
init|=
operator|new
name|CollapseScore
argument_list|()
decl_stmt|;
DECL|field|cscore
specifier|private
specifier|final
name|boolean
name|cscore
decl_stmt|;
DECL|field|score
specifier|private
name|float
name|score
decl_stmt|;
DECL|method|OrdValueSourceStrategy
specifier|public
name|OrdValueSourceStrategy
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|int
name|nullPolicy
parameter_list|,
name|int
index|[]
name|ords
parameter_list|,
name|GroupHeadSelector
name|groupHeadSelector
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|IntIntHashMap
name|boostDocs
parameter_list|,
name|FunctionQuery
name|funcQuery
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|,
name|SortedDocValues
name|values
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|maxDoc
argument_list|,
name|ords
argument_list|,
name|nullPolicy
argument_list|,
name|needsScores
argument_list|,
name|boostDocs
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|this
operator|.
name|valueSource
operator|=
name|funcQuery
operator|.
name|getValueSource
argument_list|()
expr_stmt|;
name|this
operator|.
name|rcontext
operator|=
name|ValueSource
operator|.
name|newContext
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
name|this
operator|.
name|ordVals
operator|=
operator|new
name|float
index|[
name|ords
operator|.
name|length
index|]
expr_stmt|;
assert|assert
name|GroupHeadSelectorType
operator|.
name|MIN_MAX
operator|.
name|contains
argument_list|(
name|groupHeadSelector
operator|.
name|type
argument_list|)
assert|;
if|if
condition|(
name|GroupHeadSelectorType
operator|.
name|MAX
operator|.
name|equals
argument_list|(
name|groupHeadSelector
operator|.
name|type
argument_list|)
condition|)
block|{
name|comp
operator|=
operator|new
name|MaxFloatComp
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|ordVals
argument_list|,
operator|-
name|Float
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|nullVal
operator|=
name|Float
operator|.
name|MAX_VALUE
expr_stmt|;
name|comp
operator|=
operator|new
name|MinFloatComp
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|ordVals
argument_list|,
name|Float
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|cscore
operator|=
name|collapseScore
operator|.
name|setupIfNeeded
argument_list|(
name|groupHeadSelector
argument_list|,
name|rcontext
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|needsScores
condition|)
block|{
name|this
operator|.
name|scores
operator|=
operator|new
name|float
index|[
name|ords
operator|.
name|length
index|]
expr_stmt|;
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|nullScores
operator|=
operator|new
name|FloatArrayList
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|functionValues
operator|=
name|this
operator|.
name|valueSource
operator|.
name|getValues
argument_list|(
name|rcontext
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|collapse
specifier|public
name|void
name|collapse
parameter_list|(
name|int
name|ord
parameter_list|,
name|int
name|contextDoc
parameter_list|,
name|int
name|globalDoc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|boosted
operator|&&
name|mergeBoost
operator|.
name|boost
argument_list|(
name|globalDoc
argument_list|)
condition|)
block|{
name|this
operator|.
name|boostOrds
operator|.
name|add
argument_list|(
name|ord
argument_list|)
expr_stmt|;
name|this
operator|.
name|boostDocs
operator|.
name|add
argument_list|(
name|globalDoc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|needsScores
operator|||
name|cscore
condition|)
block|{
name|this
operator|.
name|score
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
name|this
operator|.
name|collapseScore
operator|.
name|score
operator|=
name|score
expr_stmt|;
block|}
name|float
name|currentVal
init|=
name|functionValues
operator|.
name|floatVal
argument_list|(
name|contextDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|>
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|comp
operator|.
name|test
argument_list|(
name|currentVal
argument_list|,
name|ordVals
index|[
name|ord
index|]
argument_list|)
condition|)
block|{
name|ords
index|[
name|ord
index|]
operator|=
name|globalDoc
expr_stmt|;
name|ordVals
index|[
name|ord
index|]
operator|=
name|currentVal
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|scores
index|[
name|ord
index|]
operator|=
name|score
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_COLLAPSE
condition|)
block|{
if|if
condition|(
name|comp
operator|.
name|test
argument_list|(
name|currentVal
argument_list|,
name|nullVal
argument_list|)
condition|)
block|{
name|nullVal
operator|=
name|currentVal
expr_stmt|;
name|nullDoc
operator|=
name|globalDoc
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|nullScore
operator|=
name|score
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|this
operator|.
name|collapsedSet
operator|.
name|set
argument_list|(
name|globalDoc
argument_list|)
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|nullScores
operator|.
name|add
argument_list|(
name|score
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*    * Strategy for collapsing on ordinal and using the first document according to a complex sort    * as the group head    */
DECL|class|OrdSortSpecStrategy
specifier|private
specifier|static
class|class
name|OrdSortSpecStrategy
extends|extends
name|OrdFieldValueStrategy
block|{
DECL|field|compareState
specifier|private
specifier|final
name|SortFieldsCompare
name|compareState
decl_stmt|;
DECL|field|sortSpec
specifier|private
specifier|final
name|SortSpec
name|sortSpec
decl_stmt|;
DECL|field|sort
specifier|private
specifier|final
name|Sort
name|sort
decl_stmt|;
DECL|field|score
specifier|private
name|float
name|score
decl_stmt|;
DECL|method|OrdSortSpecStrategy
specifier|public
name|OrdSortSpecStrategy
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|int
name|nullPolicy
parameter_list|,
name|int
index|[]
name|ords
parameter_list|,
name|GroupHeadSelector
name|groupHeadSelector
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|IntIntHashMap
name|boostDocs
parameter_list|,
name|SortSpec
name|sortSpec
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|,
name|SortedDocValues
name|values
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|maxDoc
argument_list|,
name|ords
argument_list|,
name|nullPolicy
argument_list|,
name|needsScores
argument_list|,
name|boostDocs
argument_list|,
name|values
argument_list|)
expr_stmt|;
assert|assert
name|GroupHeadSelectorType
operator|.
name|SORT
operator|.
name|equals
argument_list|(
name|groupHeadSelector
operator|.
name|type
argument_list|)
assert|;
name|this
operator|.
name|sortSpec
operator|=
name|sortSpec
expr_stmt|;
name|this
operator|.
name|sort
operator|=
name|rewriteSort
argument_list|(
name|sortSpec
argument_list|,
name|searcher
argument_list|)
expr_stmt|;
name|this
operator|.
name|compareState
operator|=
operator|new
name|SortFieldsCompare
argument_list|(
name|sort
operator|.
name|getSort
argument_list|()
argument_list|,
name|ords
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|needsScores
condition|)
block|{
name|this
operator|.
name|scores
operator|=
operator|new
name|float
index|[
name|ords
operator|.
name|length
index|]
expr_stmt|;
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|nullScores
operator|=
operator|new
name|FloatArrayList
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|compareState
operator|.
name|setNextReader
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|s
parameter_list|)
block|{
name|super
operator|.
name|setScorer
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|this
operator|.
name|compareState
operator|.
name|setScorer
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collapse
specifier|public
name|void
name|collapse
parameter_list|(
name|int
name|ord
parameter_list|,
name|int
name|contextDoc
parameter_list|,
name|int
name|globalDoc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|boosted
operator|&&
name|mergeBoost
operator|.
name|boost
argument_list|(
name|globalDoc
argument_list|)
condition|)
block|{
name|this
operator|.
name|boostOrds
operator|.
name|add
argument_list|(
name|ord
argument_list|)
expr_stmt|;
name|this
operator|.
name|boostDocs
operator|.
name|add
argument_list|(
name|globalDoc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|needsScores
condition|)
block|{
name|this
operator|.
name|score
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ord
operator|>
operator|-
literal|1
condition|)
block|{
comment|// real collapseKey
if|if
condition|(
operator|-
literal|1
operator|==
name|ords
index|[
name|ord
index|]
condition|)
block|{
comment|// we've never seen this ord (aka: collapseKey) before, treat it as group head for now
name|compareState
operator|.
name|setGroupValues
argument_list|(
name|ord
argument_list|,
name|contextDoc
argument_list|)
expr_stmt|;
name|ords
index|[
name|ord
index|]
operator|=
name|globalDoc
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|scores
index|[
name|ord
index|]
operator|=
name|score
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// test this ord to see if it's a new group leader
if|if
condition|(
name|compareState
operator|.
name|testAndSetGroupValues
argument_list|(
name|ord
argument_list|,
name|contextDoc
argument_list|)
condition|)
block|{
name|ords
index|[
name|ord
index|]
operator|=
name|globalDoc
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|scores
index|[
name|ord
index|]
operator|=
name|score
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_COLLAPSE
condition|)
block|{
if|if
condition|(
operator|-
literal|1
operator|==
name|nullDoc
condition|)
block|{
comment|// we've never seen a doc with null collapse key yet, treat it as the null group head for now
name|compareState
operator|.
name|setNullGroupValues
argument_list|(
name|contextDoc
argument_list|)
expr_stmt|;
name|nullDoc
operator|=
name|globalDoc
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|nullScore
operator|=
name|score
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// test this doc to see if it's the new null leader
if|if
condition|(
name|compareState
operator|.
name|testAndSetNullGroupValues
argument_list|(
name|contextDoc
argument_list|)
condition|)
block|{
name|nullDoc
operator|=
name|globalDoc
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|nullScore
operator|=
name|score
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|this
operator|.
name|collapsedSet
operator|.
name|set
argument_list|(
name|globalDoc
argument_list|)
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|nullScores
operator|.
name|add
argument_list|(
name|score
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*   * Base strategy for collapsing on a 32 bit numeric field and selecting a group head   * based on min/max value of a 32 bit numeric field.   */
DECL|class|IntFieldValueStrategy
specifier|private
specifier|static
specifier|abstract
class|class
name|IntFieldValueStrategy
block|{
DECL|field|nullPolicy
specifier|protected
name|int
name|nullPolicy
decl_stmt|;
DECL|field|cmap
specifier|protected
name|IntIntHashMap
name|cmap
decl_stmt|;
DECL|field|scorer
specifier|protected
name|Scorer
name|scorer
decl_stmt|;
DECL|field|nullScores
specifier|protected
name|FloatArrayList
name|nullScores
decl_stmt|;
DECL|field|nullScore
specifier|protected
name|float
name|nullScore
decl_stmt|;
DECL|field|scores
specifier|protected
name|float
index|[]
name|scores
decl_stmt|;
DECL|field|collapsedSet
specifier|protected
name|FixedBitSet
name|collapsedSet
decl_stmt|;
DECL|field|nullDoc
specifier|protected
name|int
name|nullDoc
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|needsScores
specifier|protected
name|boolean
name|needsScores
decl_stmt|;
DECL|field|collapseField
specifier|protected
name|String
name|collapseField
decl_stmt|;
DECL|field|docs
specifier|protected
name|int
index|[]
name|docs
decl_stmt|;
DECL|field|nullValue
specifier|protected
name|int
name|nullValue
decl_stmt|;
DECL|field|boostDocs
specifier|protected
name|IntArrayList
name|boostDocs
decl_stmt|;
DECL|field|boostKeys
specifier|protected
name|IntArrayList
name|boostKeys
decl_stmt|;
DECL|field|boosts
specifier|protected
name|boolean
name|boosts
decl_stmt|;
DECL|field|mergeBoost
specifier|protected
name|MergeBoost
name|mergeBoost
decl_stmt|;
DECL|method|collapse
specifier|public
specifier|abstract
name|void
name|collapse
parameter_list|(
name|int
name|collapseKey
parameter_list|,
name|int
name|contextDoc
parameter_list|,
name|int
name|globalDoc
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|setNextReader
specifier|public
specifier|abstract
name|void
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|IntFieldValueStrategy
specifier|public
name|IntFieldValueStrategy
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|int
name|size
parameter_list|,
name|String
name|collapseField
parameter_list|,
name|int
name|nullValue
parameter_list|,
name|int
name|nullPolicy
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|IntIntHashMap
name|boostDocsMap
parameter_list|)
block|{
name|this
operator|.
name|collapseField
operator|=
name|collapseField
expr_stmt|;
name|this
operator|.
name|nullValue
operator|=
name|nullValue
expr_stmt|;
name|this
operator|.
name|nullPolicy
operator|=
name|nullPolicy
expr_stmt|;
name|this
operator|.
name|needsScores
operator|=
name|needsScores
expr_stmt|;
name|this
operator|.
name|collapsedSet
operator|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
expr_stmt|;
name|this
operator|.
name|cmap
operator|=
operator|new
name|IntIntHashMap
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|this
operator|.
name|docs
operator|=
operator|new
name|int
index|[
name|size
index|]
expr_stmt|;
if|if
condition|(
name|boostDocsMap
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|boosts
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|boostDocs
operator|=
operator|new
name|IntArrayList
argument_list|()
expr_stmt|;
name|this
operator|.
name|boostKeys
operator|=
operator|new
name|IntArrayList
argument_list|()
expr_stmt|;
name|int
index|[]
name|bd
init|=
operator|new
name|int
index|[
name|boostDocsMap
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|Iterator
argument_list|<
name|IntIntCursor
argument_list|>
name|it
init|=
name|boostDocsMap
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IntIntCursor
name|cursor
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|bd
index|[
operator|++
name|index
index|]
operator|=
name|cursor
operator|.
name|key
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|bd
argument_list|)
expr_stmt|;
name|this
operator|.
name|mergeBoost
operator|=
operator|new
name|MergeBoost
argument_list|(
name|bd
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getCollapsedSet
specifier|public
name|FixedBitSet
name|getCollapsedSet
parameter_list|()
block|{
if|if
condition|(
name|nullDoc
operator|>
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|collapsedSet
operator|.
name|set
argument_list|(
name|nullDoc
argument_list|)
expr_stmt|;
block|}
comment|//Handle the boosted docs.
if|if
condition|(
name|this
operator|.
name|boostKeys
operator|!=
literal|null
condition|)
block|{
name|int
name|s
init|=
name|boostKeys
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
condition|;
name|i
operator|++
control|)
block|{
name|int
name|key
init|=
name|this
operator|.
name|boostKeys
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|!=
name|nullValue
condition|)
block|{
name|cmap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
comment|//Add the boosted docs to the collapsedSet
name|this
operator|.
name|collapsedSet
operator|.
name|set
argument_list|(
name|boostDocs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mergeBoost
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|IntIntCursor
argument_list|>
name|it1
init|=
name|cmap
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IntIntCursor
name|cursor
init|=
name|it1
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|pointer
init|=
name|cursor
operator|.
name|value
decl_stmt|;
name|collapsedSet
operator|.
name|set
argument_list|(
name|docs
index|[
name|pointer
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|collapsedSet
return|;
block|}
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
block|}
DECL|method|getNullScores
specifier|public
name|FloatArrayList
name|getNullScores
parameter_list|()
block|{
return|return
name|nullScores
return|;
block|}
DECL|method|getCollapseMap
specifier|public
name|IntIntHashMap
name|getCollapseMap
parameter_list|()
block|{
return|return
name|cmap
return|;
block|}
DECL|method|getNullScore
specifier|public
name|float
name|getNullScore
parameter_list|()
block|{
return|return
name|this
operator|.
name|nullScore
return|;
block|}
DECL|method|getScores
specifier|public
name|float
index|[]
name|getScores
parameter_list|()
block|{
return|return
name|scores
return|;
block|}
DECL|method|getDocs
specifier|public
name|int
index|[]
name|getDocs
parameter_list|()
block|{
return|return
name|docs
return|;
block|}
DECL|method|getMergeBoost
specifier|public
name|MergeBoost
name|getMergeBoost
parameter_list|()
block|{
return|return
name|this
operator|.
name|mergeBoost
return|;
block|}
block|}
comment|/*    *  Strategy for collapsing on a 32 bit numeric field and selecting the group head based    *  on the min/max value of a 32 bit field numeric field.    */
DECL|class|IntIntStrategy
specifier|private
specifier|static
class|class
name|IntIntStrategy
extends|extends
name|IntFieldValueStrategy
block|{
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|minMaxVals
specifier|private
name|NumericDocValues
name|minMaxVals
decl_stmt|;
DECL|field|testValues
specifier|private
name|int
index|[]
name|testValues
decl_stmt|;
DECL|field|comp
specifier|private
name|IntCompare
name|comp
decl_stmt|;
DECL|field|nullCompVal
specifier|private
name|int
name|nullCompVal
decl_stmt|;
DECL|field|index
specifier|private
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|IntIntStrategy
specifier|public
name|IntIntStrategy
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|int
name|size
parameter_list|,
name|String
name|collapseField
parameter_list|,
name|int
name|nullValue
parameter_list|,
name|int
name|nullPolicy
parameter_list|,
name|GroupHeadSelector
name|groupHeadSelector
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|IntIntHashMap
name|boostDocs
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|maxDoc
argument_list|,
name|size
argument_list|,
name|collapseField
argument_list|,
name|nullValue
argument_list|,
name|nullPolicy
argument_list|,
name|needsScores
argument_list|,
name|boostDocs
argument_list|)
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|groupHeadSelector
operator|.
name|selectorText
expr_stmt|;
name|this
operator|.
name|testValues
operator|=
operator|new
name|int
index|[
name|size
index|]
expr_stmt|;
assert|assert
name|GroupHeadSelectorType
operator|.
name|MIN_MAX
operator|.
name|contains
argument_list|(
name|groupHeadSelector
operator|.
name|type
argument_list|)
assert|;
if|if
condition|(
name|GroupHeadSelectorType
operator|.
name|MAX
operator|.
name|equals
argument_list|(
name|groupHeadSelector
operator|.
name|type
argument_list|)
condition|)
block|{
name|comp
operator|=
operator|new
name|MaxIntComp
argument_list|()
expr_stmt|;
name|this
operator|.
name|nullCompVal
operator|=
name|Integer
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
else|else
block|{
name|comp
operator|=
operator|new
name|MinIntComp
argument_list|()
expr_stmt|;
name|this
operator|.
name|nullCompVal
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
if|if
condition|(
name|needsScores
condition|)
block|{
name|this
operator|.
name|scores
operator|=
operator|new
name|float
index|[
name|size
index|]
expr_stmt|;
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|nullScores
operator|=
operator|new
name|FloatArrayList
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|minMaxVals
operator|=
name|DocValues
operator|.
name|getNumeric
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|this
operator|.
name|field
argument_list|)
expr_stmt|;
block|}
DECL|method|collapse
specifier|public
name|void
name|collapse
parameter_list|(
name|int
name|collapseKey
parameter_list|,
name|int
name|contextDoc
parameter_list|,
name|int
name|globalDoc
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check to see if we have documents boosted by the QueryElevationComponent
if|if
condition|(
name|boosts
operator|&&
name|mergeBoost
operator|.
name|boost
argument_list|(
name|globalDoc
argument_list|)
condition|)
block|{
name|boostDocs
operator|.
name|add
argument_list|(
name|globalDoc
argument_list|)
expr_stmt|;
name|boostKeys
operator|.
name|add
argument_list|(
name|collapseKey
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|currentVal
init|=
operator|(
name|int
operator|)
name|minMaxVals
operator|.
name|get
argument_list|(
name|contextDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|collapseKey
operator|!=
name|nullValue
condition|)
block|{
specifier|final
name|int
name|idx
decl_stmt|;
if|if
condition|(
operator|(
name|idx
operator|=
name|cmap
operator|.
name|indexOf
argument_list|(
name|collapseKey
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|int
name|pointer
init|=
name|cmap
operator|.
name|indexGet
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|comp
operator|.
name|test
argument_list|(
name|currentVal
argument_list|,
name|testValues
index|[
name|pointer
index|]
argument_list|)
condition|)
block|{
name|testValues
index|[
name|pointer
index|]
operator|=
name|currentVal
expr_stmt|;
name|docs
index|[
name|pointer
index|]
operator|=
name|globalDoc
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|scores
index|[
name|pointer
index|]
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
operator|++
name|index
expr_stmt|;
name|cmap
operator|.
name|put
argument_list|(
name|collapseKey
argument_list|,
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|==
name|testValues
operator|.
name|length
condition|)
block|{
name|testValues
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|testValues
argument_list|)
expr_stmt|;
name|docs
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|docs
argument_list|)
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|scores
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|scores
argument_list|)
expr_stmt|;
block|}
block|}
name|testValues
index|[
name|index
index|]
operator|=
name|currentVal
expr_stmt|;
name|docs
index|[
name|index
index|]
operator|=
operator|(
name|globalDoc
operator|)
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|scores
index|[
name|index
index|]
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_COLLAPSE
condition|)
block|{
if|if
condition|(
name|comp
operator|.
name|test
argument_list|(
name|currentVal
argument_list|,
name|nullCompVal
argument_list|)
condition|)
block|{
name|nullCompVal
operator|=
name|currentVal
expr_stmt|;
name|nullDoc
operator|=
name|globalDoc
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|nullScore
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|this
operator|.
name|collapsedSet
operator|.
name|set
argument_list|(
name|globalDoc
argument_list|)
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|nullScores
operator|.
name|add
argument_list|(
name|scorer
operator|.
name|score
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|IntFloatStrategy
specifier|private
specifier|static
class|class
name|IntFloatStrategy
extends|extends
name|IntFieldValueStrategy
block|{
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|minMaxVals
specifier|private
name|NumericDocValues
name|minMaxVals
decl_stmt|;
DECL|field|testValues
specifier|private
name|float
index|[]
name|testValues
decl_stmt|;
DECL|field|comp
specifier|private
name|FloatCompare
name|comp
decl_stmt|;
DECL|field|nullCompVal
specifier|private
name|float
name|nullCompVal
decl_stmt|;
DECL|field|index
specifier|private
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|IntFloatStrategy
specifier|public
name|IntFloatStrategy
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|int
name|size
parameter_list|,
name|String
name|collapseField
parameter_list|,
name|int
name|nullValue
parameter_list|,
name|int
name|nullPolicy
parameter_list|,
name|GroupHeadSelector
name|groupHeadSelector
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|IntIntHashMap
name|boostDocs
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|maxDoc
argument_list|,
name|size
argument_list|,
name|collapseField
argument_list|,
name|nullValue
argument_list|,
name|nullPolicy
argument_list|,
name|needsScores
argument_list|,
name|boostDocs
argument_list|)
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|groupHeadSelector
operator|.
name|selectorText
expr_stmt|;
name|this
operator|.
name|testValues
operator|=
operator|new
name|float
index|[
name|size
index|]
expr_stmt|;
assert|assert
name|GroupHeadSelectorType
operator|.
name|MIN_MAX
operator|.
name|contains
argument_list|(
name|groupHeadSelector
operator|.
name|type
argument_list|)
assert|;
if|if
condition|(
name|GroupHeadSelectorType
operator|.
name|MAX
operator|.
name|equals
argument_list|(
name|groupHeadSelector
operator|.
name|type
argument_list|)
condition|)
block|{
name|comp
operator|=
operator|new
name|MaxFloatComp
argument_list|()
expr_stmt|;
name|this
operator|.
name|nullCompVal
operator|=
operator|-
name|Float
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
else|else
block|{
name|comp
operator|=
operator|new
name|MinFloatComp
argument_list|()
expr_stmt|;
name|this
operator|.
name|nullCompVal
operator|=
name|Float
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
if|if
condition|(
name|needsScores
condition|)
block|{
name|this
operator|.
name|scores
operator|=
operator|new
name|float
index|[
name|size
index|]
expr_stmt|;
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|nullScores
operator|=
operator|new
name|FloatArrayList
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|minMaxVals
operator|=
name|DocValues
operator|.
name|getNumeric
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|this
operator|.
name|field
argument_list|)
expr_stmt|;
block|}
DECL|method|collapse
specifier|public
name|void
name|collapse
parameter_list|(
name|int
name|collapseKey
parameter_list|,
name|int
name|contextDoc
parameter_list|,
name|int
name|globalDoc
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check to see if we have documents boosted by the QueryElevationComponent
if|if
condition|(
name|boosts
operator|&&
name|mergeBoost
operator|.
name|boost
argument_list|(
name|globalDoc
argument_list|)
condition|)
block|{
name|boostDocs
operator|.
name|add
argument_list|(
name|globalDoc
argument_list|)
expr_stmt|;
name|boostKeys
operator|.
name|add
argument_list|(
name|collapseKey
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|minMaxVal
init|=
operator|(
name|int
operator|)
name|minMaxVals
operator|.
name|get
argument_list|(
name|contextDoc
argument_list|)
decl_stmt|;
name|float
name|currentVal
init|=
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|minMaxVal
argument_list|)
decl_stmt|;
if|if
condition|(
name|collapseKey
operator|!=
name|nullValue
condition|)
block|{
specifier|final
name|int
name|idx
decl_stmt|;
if|if
condition|(
operator|(
name|idx
operator|=
name|cmap
operator|.
name|indexOf
argument_list|(
name|collapseKey
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|int
name|pointer
init|=
name|cmap
operator|.
name|indexGet
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|comp
operator|.
name|test
argument_list|(
name|currentVal
argument_list|,
name|testValues
index|[
name|pointer
index|]
argument_list|)
condition|)
block|{
name|testValues
index|[
name|pointer
index|]
operator|=
name|currentVal
expr_stmt|;
name|docs
index|[
name|pointer
index|]
operator|=
name|globalDoc
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|scores
index|[
name|pointer
index|]
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
operator|++
name|index
expr_stmt|;
name|cmap
operator|.
name|put
argument_list|(
name|collapseKey
argument_list|,
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|==
name|testValues
operator|.
name|length
condition|)
block|{
name|testValues
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|testValues
argument_list|)
expr_stmt|;
name|docs
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|docs
argument_list|)
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|scores
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|scores
argument_list|)
expr_stmt|;
block|}
block|}
name|testValues
index|[
name|index
index|]
operator|=
name|currentVal
expr_stmt|;
name|docs
index|[
name|index
index|]
operator|=
name|globalDoc
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|scores
index|[
name|index
index|]
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_COLLAPSE
condition|)
block|{
if|if
condition|(
name|comp
operator|.
name|test
argument_list|(
name|currentVal
argument_list|,
name|nullCompVal
argument_list|)
condition|)
block|{
name|nullCompVal
operator|=
name|currentVal
expr_stmt|;
name|nullDoc
operator|=
name|globalDoc
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|nullScore
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|this
operator|.
name|collapsedSet
operator|.
name|set
argument_list|(
name|globalDoc
argument_list|)
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|nullScores
operator|.
name|add
argument_list|(
name|scorer
operator|.
name|score
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*    *  Strategy for collapsing on a 32 bit numeric field and selecting the group head based    *  on the min/max value of a Value Source Function.    */
DECL|class|IntValueSourceStrategy
specifier|private
specifier|static
class|class
name|IntValueSourceStrategy
extends|extends
name|IntFieldValueStrategy
block|{
DECL|field|comp
specifier|private
name|FloatCompare
name|comp
decl_stmt|;
DECL|field|testValues
specifier|private
name|float
index|[]
name|testValues
decl_stmt|;
DECL|field|nullCompVal
specifier|private
name|float
name|nullCompVal
decl_stmt|;
DECL|field|valueSource
specifier|private
name|ValueSource
name|valueSource
decl_stmt|;
DECL|field|functionValues
specifier|private
name|FunctionValues
name|functionValues
decl_stmt|;
DECL|field|rcontext
specifier|private
name|Map
name|rcontext
decl_stmt|;
DECL|field|collapseScore
specifier|private
specifier|final
name|CollapseScore
name|collapseScore
init|=
operator|new
name|CollapseScore
argument_list|()
decl_stmt|;
DECL|field|cscore
specifier|private
specifier|final
name|boolean
name|cscore
decl_stmt|;
DECL|field|score
specifier|private
name|float
name|score
decl_stmt|;
DECL|field|index
specifier|private
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|IntValueSourceStrategy
specifier|public
name|IntValueSourceStrategy
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|int
name|size
parameter_list|,
name|String
name|collapseField
parameter_list|,
name|int
name|nullValue
parameter_list|,
name|int
name|nullPolicy
parameter_list|,
name|GroupHeadSelector
name|groupHeadSelector
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|IntIntHashMap
name|boostDocs
parameter_list|,
name|FunctionQuery
name|funcQuery
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|maxDoc
argument_list|,
name|size
argument_list|,
name|collapseField
argument_list|,
name|nullValue
argument_list|,
name|nullPolicy
argument_list|,
name|needsScores
argument_list|,
name|boostDocs
argument_list|)
expr_stmt|;
name|this
operator|.
name|testValues
operator|=
operator|new
name|float
index|[
name|size
index|]
expr_stmt|;
name|this
operator|.
name|valueSource
operator|=
name|funcQuery
operator|.
name|getValueSource
argument_list|()
expr_stmt|;
name|this
operator|.
name|rcontext
operator|=
name|ValueSource
operator|.
name|newContext
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
assert|assert
name|GroupHeadSelectorType
operator|.
name|MIN_MAX
operator|.
name|contains
argument_list|(
name|groupHeadSelector
operator|.
name|type
argument_list|)
assert|;
if|if
condition|(
name|GroupHeadSelectorType
operator|.
name|MAX
operator|.
name|equals
argument_list|(
name|groupHeadSelector
operator|.
name|type
argument_list|)
condition|)
block|{
name|this
operator|.
name|nullCompVal
operator|=
operator|-
name|Float
operator|.
name|MAX_VALUE
expr_stmt|;
name|comp
operator|=
operator|new
name|MaxFloatComp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|nullCompVal
operator|=
name|Float
operator|.
name|MAX_VALUE
expr_stmt|;
name|comp
operator|=
operator|new
name|MinFloatComp
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|cscore
operator|=
name|collapseScore
operator|.
name|setupIfNeeded
argument_list|(
name|groupHeadSelector
argument_list|,
name|rcontext
argument_list|)
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|this
operator|.
name|scores
operator|=
operator|new
name|float
index|[
name|size
index|]
expr_stmt|;
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|nullScores
operator|=
operator|new
name|FloatArrayList
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|functionValues
operator|=
name|this
operator|.
name|valueSource
operator|.
name|getValues
argument_list|(
name|rcontext
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|collapse
specifier|public
name|void
name|collapse
parameter_list|(
name|int
name|collapseKey
parameter_list|,
name|int
name|contextDoc
parameter_list|,
name|int
name|globalDoc
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check to see if we have documents boosted by the QueryElevationComponent
if|if
condition|(
name|boosts
operator|&&
name|mergeBoost
operator|.
name|boost
argument_list|(
name|globalDoc
argument_list|)
condition|)
block|{
name|boostDocs
operator|.
name|add
argument_list|(
name|globalDoc
argument_list|)
expr_stmt|;
name|boostKeys
operator|.
name|add
argument_list|(
name|collapseKey
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|needsScores
operator|||
name|cscore
condition|)
block|{
name|this
operator|.
name|score
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
name|this
operator|.
name|collapseScore
operator|.
name|score
operator|=
name|score
expr_stmt|;
block|}
name|float
name|currentVal
init|=
name|functionValues
operator|.
name|floatVal
argument_list|(
name|contextDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|collapseKey
operator|!=
name|nullValue
condition|)
block|{
specifier|final
name|int
name|idx
decl_stmt|;
if|if
condition|(
operator|(
name|idx
operator|=
name|cmap
operator|.
name|indexOf
argument_list|(
name|collapseKey
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|int
name|pointer
init|=
name|cmap
operator|.
name|indexGet
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|comp
operator|.
name|test
argument_list|(
name|currentVal
argument_list|,
name|testValues
index|[
name|pointer
index|]
argument_list|)
condition|)
block|{
name|testValues
index|[
name|pointer
index|]
operator|=
name|currentVal
expr_stmt|;
name|docs
index|[
name|pointer
index|]
operator|=
name|globalDoc
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|scores
index|[
name|pointer
index|]
operator|=
name|score
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
operator|++
name|index
expr_stmt|;
name|cmap
operator|.
name|put
argument_list|(
name|collapseKey
argument_list|,
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|==
name|testValues
operator|.
name|length
condition|)
block|{
name|testValues
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|testValues
argument_list|)
expr_stmt|;
name|docs
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|docs
argument_list|)
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|scores
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|scores
argument_list|)
expr_stmt|;
block|}
block|}
name|docs
index|[
name|index
index|]
operator|=
name|globalDoc
expr_stmt|;
name|testValues
index|[
name|index
index|]
operator|=
name|currentVal
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|scores
index|[
name|index
index|]
operator|=
name|score
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_COLLAPSE
condition|)
block|{
if|if
condition|(
name|comp
operator|.
name|test
argument_list|(
name|currentVal
argument_list|,
name|nullCompVal
argument_list|)
condition|)
block|{
name|nullCompVal
operator|=
name|currentVal
expr_stmt|;
name|nullDoc
operator|=
name|globalDoc
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|nullScore
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|this
operator|.
name|collapsedSet
operator|.
name|set
argument_list|(
name|globalDoc
argument_list|)
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|nullScores
operator|.
name|add
argument_list|(
name|scorer
operator|.
name|score
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*    * Strategy for collapsing on a 32 bit numeric field and using the first document according     * to a complex sort as the group head    */
DECL|class|IntSortSpecStrategy
specifier|private
specifier|static
class|class
name|IntSortSpecStrategy
extends|extends
name|IntFieldValueStrategy
block|{
DECL|field|compareState
specifier|private
specifier|final
name|SortFieldsCompare
name|compareState
decl_stmt|;
DECL|field|sortSpec
specifier|private
specifier|final
name|SortSpec
name|sortSpec
decl_stmt|;
DECL|field|sort
specifier|private
specifier|final
name|Sort
name|sort
decl_stmt|;
DECL|field|score
specifier|private
name|float
name|score
decl_stmt|;
DECL|field|index
specifier|private
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|IntSortSpecStrategy
specifier|public
name|IntSortSpecStrategy
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|int
name|size
parameter_list|,
name|String
name|collapseField
parameter_list|,
name|int
name|nullValue
parameter_list|,
name|int
name|nullPolicy
parameter_list|,
name|GroupHeadSelector
name|groupHeadSelector
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|IntIntHashMap
name|boostDocs
parameter_list|,
name|SortSpec
name|sortSpec
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|maxDoc
argument_list|,
name|size
argument_list|,
name|collapseField
argument_list|,
name|nullValue
argument_list|,
name|nullPolicy
argument_list|,
name|needsScores
argument_list|,
name|boostDocs
argument_list|)
expr_stmt|;
assert|assert
name|GroupHeadSelectorType
operator|.
name|SORT
operator|.
name|equals
argument_list|(
name|groupHeadSelector
operator|.
name|type
argument_list|)
assert|;
name|this
operator|.
name|sortSpec
operator|=
name|sortSpec
expr_stmt|;
name|this
operator|.
name|sort
operator|=
name|rewriteSort
argument_list|(
name|sortSpec
argument_list|,
name|searcher
argument_list|)
expr_stmt|;
name|this
operator|.
name|compareState
operator|=
operator|new
name|SortFieldsCompare
argument_list|(
name|sort
operator|.
name|getSort
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|this
operator|.
name|scores
operator|=
operator|new
name|float
index|[
name|size
index|]
expr_stmt|;
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|nullScores
operator|=
operator|new
name|FloatArrayList
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|compareState
operator|.
name|setNextReader
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|s
parameter_list|)
block|{
name|super
operator|.
name|setScorer
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|this
operator|.
name|compareState
operator|.
name|setScorer
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|collapse
specifier|public
name|void
name|collapse
parameter_list|(
name|int
name|collapseKey
parameter_list|,
name|int
name|contextDoc
parameter_list|,
name|int
name|globalDoc
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check to see if we have documents boosted by the QueryElevationComponent
if|if
condition|(
name|boosts
operator|&&
name|mergeBoost
operator|.
name|boost
argument_list|(
name|globalDoc
argument_list|)
condition|)
block|{
name|boostDocs
operator|.
name|add
argument_list|(
name|globalDoc
argument_list|)
expr_stmt|;
name|boostKeys
operator|.
name|add
argument_list|(
name|collapseKey
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|needsScores
condition|)
block|{
name|this
operator|.
name|score
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|collapseKey
operator|!=
name|nullValue
condition|)
block|{
specifier|final
name|int
name|idx
decl_stmt|;
if|if
condition|(
operator|(
name|idx
operator|=
name|cmap
operator|.
name|indexOf
argument_list|(
name|collapseKey
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
comment|// we've seen this collapseKey before, test to see if it's a new group leader
name|int
name|pointer
init|=
name|cmap
operator|.
name|indexGet
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|compareState
operator|.
name|testAndSetGroupValues
argument_list|(
name|pointer
argument_list|,
name|contextDoc
argument_list|)
condition|)
block|{
name|docs
index|[
name|pointer
index|]
operator|=
name|globalDoc
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|scores
index|[
name|pointer
index|]
operator|=
name|score
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// we've never seen this collapseKey before, treat it as group head for now
operator|++
name|index
expr_stmt|;
name|cmap
operator|.
name|put
argument_list|(
name|collapseKey
argument_list|,
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|==
name|docs
operator|.
name|length
condition|)
block|{
name|docs
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|compareState
operator|.
name|grow
argument_list|(
name|docs
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|scores
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|scores
argument_list|)
expr_stmt|;
block|}
block|}
name|docs
index|[
name|index
index|]
operator|=
name|globalDoc
expr_stmt|;
name|compareState
operator|.
name|setGroupValues
argument_list|(
name|index
argument_list|,
name|contextDoc
argument_list|)
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|scores
index|[
name|index
index|]
operator|=
name|score
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_COLLAPSE
condition|)
block|{
if|if
condition|(
operator|-
literal|1
operator|==
name|nullDoc
condition|)
block|{
comment|// we've never seen a doc with null collapse key yet, treat it as the null group head for now
name|compareState
operator|.
name|setNullGroupValues
argument_list|(
name|contextDoc
argument_list|)
expr_stmt|;
name|nullDoc
operator|=
name|globalDoc
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|nullScore
operator|=
name|score
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// test this doc to see if it's the new null leader
if|if
condition|(
name|compareState
operator|.
name|testAndSetNullGroupValues
argument_list|(
name|contextDoc
argument_list|)
condition|)
block|{
name|nullDoc
operator|=
name|globalDoc
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|nullScore
operator|=
name|score
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|this
operator|.
name|collapsedSet
operator|.
name|set
argument_list|(
name|globalDoc
argument_list|)
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|nullScores
operator|.
name|add
argument_list|(
name|score
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|MergeBoost
specifier|static
class|class
name|MergeBoost
block|{
DECL|field|boostDocs
specifier|private
name|int
index|[]
name|boostDocs
decl_stmt|;
DECL|field|index
specifier|private
name|int
name|index
init|=
literal|0
decl_stmt|;
DECL|method|MergeBoost
specifier|public
name|MergeBoost
parameter_list|(
name|int
index|[]
name|boostDocs
parameter_list|)
block|{
name|this
operator|.
name|boostDocs
operator|=
name|boostDocs
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|this
operator|.
name|index
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|boost
specifier|public
name|boolean
name|boost
parameter_list|(
name|int
name|globalDoc
parameter_list|)
block|{
if|if
condition|(
name|index
operator|==
name|Integer
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|boostDocs
operator|.
name|length
condition|)
block|{
name|index
operator|=
name|Integer
operator|.
name|MIN_VALUE
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|int
name|comp
init|=
name|boostDocs
index|[
name|index
index|]
decl_stmt|;
if|if
condition|(
name|comp
operator|==
name|globalDoc
condition|)
block|{
operator|++
name|index
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|comp
operator|<
name|globalDoc
condition|)
block|{
operator|++
name|index
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|/**     * Class for comparing documents according to a list of SortField clauses and     * tracking the groupHeadLeaders and their sort values.  groups will be identified     * by int "contextKey values, which may either be (encoded) 32bit numeric values, or     * ordinal values for Strings -- this class doesn't care, and doesn't assume any special     * meaning.    */
DECL|class|SortFieldsCompare
specifier|private
specifier|static
class|class
name|SortFieldsCompare
block|{
DECL|field|numClauses
specifier|final
specifier|private
name|int
name|numClauses
decl_stmt|;
DECL|field|sorts
specifier|final
specifier|private
name|SortField
index|[]
name|sorts
decl_stmt|;
DECL|field|reverseMul
specifier|final
specifier|private
name|int
index|[]
name|reverseMul
decl_stmt|;
DECL|field|fieldComparators
specifier|final
specifier|private
name|FieldComparator
index|[]
name|fieldComparators
decl_stmt|;
DECL|field|leafFieldComparators
specifier|final
specifier|private
name|LeafFieldComparator
index|[]
name|leafFieldComparators
decl_stmt|;
DECL|field|groupHeadValues
specifier|private
name|Object
index|[]
index|[]
name|groupHeadValues
decl_stmt|;
comment|// growable
DECL|field|nullGroupValues
specifier|final
specifier|private
name|Object
index|[]
name|nullGroupValues
decl_stmt|;
comment|/**      * Constructs an instance based on the the (raw, un-rewritten) SortFields to be used,       * and an initial number of expected groups (will grow as needed).      */
DECL|method|SortFieldsCompare
specifier|public
name|SortFieldsCompare
parameter_list|(
name|SortField
index|[]
name|sorts
parameter_list|,
name|int
name|initNumGroups
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|sorts
operator|=
name|sorts
expr_stmt|;
name|numClauses
operator|=
name|sorts
operator|.
name|length
expr_stmt|;
name|fieldComparators
operator|=
operator|new
name|FieldComparator
index|[
name|numClauses
index|]
expr_stmt|;
name|leafFieldComparators
operator|=
operator|new
name|LeafFieldComparator
index|[
name|numClauses
index|]
expr_stmt|;
name|reverseMul
operator|=
operator|new
name|int
index|[
name|numClauses
index|]
expr_stmt|;
for|for
control|(
name|int
name|clause
init|=
literal|0
init|;
name|clause
operator|<
name|numClauses
condition|;
name|clause
operator|++
control|)
block|{
name|SortField
name|sf
init|=
name|sorts
index|[
name|clause
index|]
decl_stmt|;
comment|// we only need one slot for every comparator
name|fieldComparators
index|[
name|clause
index|]
operator|=
name|sf
operator|.
name|getComparator
argument_list|(
literal|1
argument_list|,
name|clause
argument_list|)
expr_stmt|;
name|reverseMul
index|[
name|clause
index|]
operator|=
name|sf
operator|.
name|getReverse
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
expr_stmt|;
block|}
name|groupHeadValues
operator|=
operator|new
name|Object
index|[
name|initNumGroups
index|]
index|[]
expr_stmt|;
name|nullGroupValues
operator|=
operator|new
name|Object
index|[
name|numClauses
index|]
expr_stmt|;
block|}
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|clause
init|=
literal|0
init|;
name|clause
operator|<
name|numClauses
condition|;
name|clause
operator|++
control|)
block|{
name|leafFieldComparators
index|[
name|clause
index|]
operator|=
name|fieldComparators
index|[
name|clause
index|]
operator|.
name|getLeafComparator
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|s
parameter_list|)
block|{
for|for
control|(
name|int
name|clause
init|=
literal|0
init|;
name|clause
operator|<
name|numClauses
condition|;
name|clause
operator|++
control|)
block|{
name|leafFieldComparators
index|[
name|clause
index|]
operator|.
name|setScorer
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|// LUCENE-6808 workaround
DECL|method|cloneIfBytesRef
specifier|private
specifier|static
name|Object
name|cloneIfBytesRef
parameter_list|(
name|Object
name|val
parameter_list|)
block|{
if|if
condition|(
name|val
operator|instanceof
name|BytesRef
condition|)
block|{
return|return
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
operator|(
name|BytesRef
operator|)
name|val
argument_list|)
return|;
block|}
return|return
name|val
return|;
block|}
comment|/**      * Returns the current SortField values for the specified collapseKey.        * If this collapseKey has never been seen before, then an array of null values is inited       * and tracked so that the caller may update it if needed.      */
DECL|method|getOrInitGroupHeadValues
specifier|private
name|Object
index|[]
name|getOrInitGroupHeadValues
parameter_list|(
name|int
name|collapseKey
parameter_list|)
block|{
name|Object
index|[]
name|values
init|=
name|groupHeadValues
index|[
name|collapseKey
index|]
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|values
condition|)
block|{
name|values
operator|=
operator|new
name|Object
index|[
name|numClauses
index|]
expr_stmt|;
name|groupHeadValues
index|[
name|collapseKey
index|]
operator|=
name|values
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
comment|/**      * Records the SortField values for the specified contextDoc as the "best" values       * for the group identified by the specified collapseKey.       *      * Should be called the first time a contextKey is encountered.      */
DECL|method|setGroupValues
specifier|public
name|void
name|setGroupValues
parameter_list|(
name|int
name|collapseKey
parameter_list|,
name|int
name|contextDoc
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
literal|0
operator|<=
name|collapseKey
operator|:
literal|"negative collapseKey"
assert|;
assert|assert
name|collapseKey
operator|<
name|groupHeadValues
operator|.
name|length
operator|:
literal|"collapseKey too big -- need to grow array?"
assert|;
name|setGroupValues
argument_list|(
name|getOrInitGroupHeadValues
argument_list|(
name|collapseKey
argument_list|)
argument_list|,
name|contextDoc
argument_list|)
expr_stmt|;
block|}
comment|/**      * Records the SortField values for the specified contextDoc as the "best" values       * for the null group.      *      * Should be calledthe first time a doc in the null group is encountered      */
DECL|method|setNullGroupValues
specifier|public
name|void
name|setNullGroupValues
parameter_list|(
name|int
name|contextDoc
parameter_list|)
throws|throws
name|IOException
block|{
name|setGroupValues
argument_list|(
name|nullGroupValues
argument_list|,
name|contextDoc
argument_list|)
expr_stmt|;
block|}
comment|/**      * Records the SortField values for the specified contextDoc into the       * values array provided by the caller.      */
DECL|method|setGroupValues
specifier|private
name|void
name|setGroupValues
parameter_list|(
name|Object
index|[]
name|values
parameter_list|,
name|int
name|contextDoc
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|clause
init|=
literal|0
init|;
name|clause
operator|<
name|numClauses
condition|;
name|clause
operator|++
control|)
block|{
name|leafFieldComparators
index|[
name|clause
index|]
operator|.
name|copy
argument_list|(
literal|0
argument_list|,
name|contextDoc
argument_list|)
expr_stmt|;
name|values
index|[
name|clause
index|]
operator|=
name|cloneIfBytesRef
argument_list|(
name|fieldComparators
index|[
name|clause
index|]
operator|.
name|value
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Compares the SortField values of the specified contextDoc with the existing group head       * values for the group identified by the specified collapseKey, and overwrites them      * (and returns true) if this document should become the new group head in accordance       * with the SortFields      * (otherwise returns false)      */
DECL|method|testAndSetGroupValues
specifier|public
name|boolean
name|testAndSetGroupValues
parameter_list|(
name|int
name|collapseKey
parameter_list|,
name|int
name|contextDoc
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
literal|0
operator|<=
name|collapseKey
operator|:
literal|"negative collapseKey"
assert|;
assert|assert
name|collapseKey
operator|<
name|groupHeadValues
operator|.
name|length
operator|:
literal|"collapseKey too big -- need to grow array?"
assert|;
return|return
name|testAndSetGroupValues
argument_list|(
name|getOrInitGroupHeadValues
argument_list|(
name|collapseKey
argument_list|)
argument_list|,
name|contextDoc
argument_list|)
return|;
block|}
comment|/**      * Compares the SortField values of the specified contextDoc with the existing group head       * values for the null group, and overwrites them (and returns true) if this document       * should become the new group head in accordance with the SortFields.       * (otherwise returns false)      */
DECL|method|testAndSetNullGroupValues
specifier|public
name|boolean
name|testAndSetNullGroupValues
parameter_list|(
name|int
name|contextDoc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|testAndSetGroupValues
argument_list|(
name|nullGroupValues
argument_list|,
name|contextDoc
argument_list|)
return|;
block|}
comment|/**      * Compares the SortField values of the specified contextDoc with the existing values      * array, and overwrites them (and returns true) if this document is the new group head in       * accordance with the SortFields.      * (otherwise returns false)      */
DECL|method|testAndSetGroupValues
specifier|private
name|boolean
name|testAndSetGroupValues
parameter_list|(
name|Object
index|[]
name|values
parameter_list|,
name|int
name|contextDoc
parameter_list|)
throws|throws
name|IOException
block|{
name|Object
index|[]
name|stash
init|=
operator|new
name|Object
index|[
name|numClauses
index|]
decl_stmt|;
name|int
name|lastCompare
init|=
literal|0
decl_stmt|;
name|int
name|testClause
init|=
literal|0
decl_stmt|;
for|for
control|(
comment|/* testClause */
init|;
name|testClause
operator|<
name|numClauses
condition|;
name|testClause
operator|++
control|)
block|{
name|leafFieldComparators
index|[
name|testClause
index|]
operator|.
name|copy
argument_list|(
literal|0
argument_list|,
name|contextDoc
argument_list|)
expr_stmt|;
name|FieldComparator
name|fcomp
init|=
name|fieldComparators
index|[
name|testClause
index|]
decl_stmt|;
name|stash
index|[
name|testClause
index|]
operator|=
name|cloneIfBytesRef
argument_list|(
name|fcomp
operator|.
name|value
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|lastCompare
operator|=
name|reverseMul
index|[
name|testClause
index|]
operator|*
name|fcomp
operator|.
name|compareValues
argument_list|(
name|stash
index|[
name|testClause
index|]
argument_list|,
name|values
index|[
name|testClause
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
literal|0
operator|!=
name|lastCompare
condition|)
block|{
comment|// no need to keep checking additional clauses
break|break;
block|}
block|}
if|if
condition|(
literal|0
operator|<=
name|lastCompare
condition|)
block|{
comment|// we're either not competitive, or we're completely tied with another doc that's already group head
comment|// that's already been selected
return|return
literal|false
return|;
block|}
comment|// else...
comment|// this doc is our new group head, we've already read some of the values into our stash
name|testClause
operator|++
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|stash
argument_list|,
literal|0
argument_list|,
name|values
argument_list|,
literal|0
argument_list|,
name|testClause
argument_list|)
expr_stmt|;
comment|// read the remaining values we didn't need to test
for|for
control|(
name|int
name|copyClause
init|=
name|testClause
init|;
name|copyClause
operator|<
name|numClauses
condition|;
name|copyClause
operator|++
control|)
block|{
name|leafFieldComparators
index|[
name|copyClause
index|]
operator|.
name|copy
argument_list|(
literal|0
argument_list|,
name|contextDoc
argument_list|)
expr_stmt|;
name|values
index|[
name|copyClause
index|]
operator|=
name|cloneIfBytesRef
argument_list|(
name|fieldComparators
index|[
name|copyClause
index|]
operator|.
name|value
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Grows all internal arrays to the specified minSize      */
DECL|method|grow
specifier|public
name|void
name|grow
parameter_list|(
name|int
name|minSize
parameter_list|)
block|{
name|groupHeadValues
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|groupHeadValues
argument_list|,
name|minSize
argument_list|)
expr_stmt|;
block|}
block|}
DECL|interface|IntCompare
specifier|private
specifier|static
interface|interface
name|IntCompare
block|{
DECL|method|test
specifier|public
name|boolean
name|test
parameter_list|(
name|int
name|i1
parameter_list|,
name|int
name|i2
parameter_list|)
function_decl|;
block|}
DECL|interface|FloatCompare
specifier|private
specifier|static
interface|interface
name|FloatCompare
block|{
DECL|method|test
specifier|public
name|boolean
name|test
parameter_list|(
name|float
name|i1
parameter_list|,
name|float
name|i2
parameter_list|)
function_decl|;
block|}
DECL|interface|LongCompare
specifier|private
specifier|static
interface|interface
name|LongCompare
block|{
DECL|method|test
specifier|public
name|boolean
name|test
parameter_list|(
name|long
name|i1
parameter_list|,
name|long
name|i2
parameter_list|)
function_decl|;
block|}
DECL|class|MaxIntComp
specifier|private
specifier|static
class|class
name|MaxIntComp
implements|implements
name|IntCompare
block|{
DECL|method|test
specifier|public
name|boolean
name|test
parameter_list|(
name|int
name|i1
parameter_list|,
name|int
name|i2
parameter_list|)
block|{
return|return
name|i1
operator|>
name|i2
return|;
block|}
block|}
DECL|class|MinIntComp
specifier|private
specifier|static
class|class
name|MinIntComp
implements|implements
name|IntCompare
block|{
DECL|method|test
specifier|public
name|boolean
name|test
parameter_list|(
name|int
name|i1
parameter_list|,
name|int
name|i2
parameter_list|)
block|{
return|return
name|i1
operator|<
name|i2
return|;
block|}
block|}
DECL|class|MaxFloatComp
specifier|private
specifier|static
class|class
name|MaxFloatComp
implements|implements
name|FloatCompare
block|{
DECL|method|test
specifier|public
name|boolean
name|test
parameter_list|(
name|float
name|i1
parameter_list|,
name|float
name|i2
parameter_list|)
block|{
return|return
name|i1
operator|>
name|i2
return|;
block|}
block|}
DECL|class|MinFloatComp
specifier|private
specifier|static
class|class
name|MinFloatComp
implements|implements
name|FloatCompare
block|{
DECL|method|test
specifier|public
name|boolean
name|test
parameter_list|(
name|float
name|i1
parameter_list|,
name|float
name|i2
parameter_list|)
block|{
return|return
name|i1
operator|<
name|i2
return|;
block|}
block|}
DECL|class|MaxLongComp
specifier|private
specifier|static
class|class
name|MaxLongComp
implements|implements
name|LongCompare
block|{
DECL|method|test
specifier|public
name|boolean
name|test
parameter_list|(
name|long
name|i1
parameter_list|,
name|long
name|i2
parameter_list|)
block|{
return|return
name|i1
operator|>
name|i2
return|;
block|}
block|}
DECL|class|MinLongComp
specifier|private
specifier|static
class|class
name|MinLongComp
implements|implements
name|LongCompare
block|{
DECL|method|test
specifier|public
name|boolean
name|test
parameter_list|(
name|long
name|i1
parameter_list|,
name|long
name|i2
parameter_list|)
block|{
return|return
name|i1
operator|<
name|i2
return|;
block|}
block|}
comment|/** returns the number of arguments that are non null */
DECL|method|numNotNull
specifier|private
specifier|static
specifier|final
name|int
name|numNotNull
parameter_list|(
specifier|final
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|int
name|r
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|Object
name|o
range|:
name|args
control|)
block|{
if|if
condition|(
literal|null
operator|!=
name|o
condition|)
block|{
name|r
operator|++
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
comment|/**    * Helper method for rewriting the Sort associated with a SortSpec.      * Handles the special case default of relevancy sort (ie: a SortSpec w/null Sort object)    */
DECL|method|rewriteSort
specifier|public
specifier|static
name|Sort
name|rewriteSort
parameter_list|(
name|SortSpec
name|sortSpec
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
literal|null
operator|!=
name|sortSpec
operator|:
literal|"SortSpec must not be null"
assert|;
assert|assert
literal|null
operator|!=
name|searcher
operator|:
literal|"Searcher must not be null"
assert|;
name|Sort
name|orig
init|=
name|sortSpec
operator|.
name|getSort
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|orig
condition|)
block|{
name|orig
operator|=
name|Sort
operator|.
name|RELEVANCE
expr_stmt|;
block|}
return|return
name|orig
operator|.
name|rewrite
argument_list|(
name|searcher
argument_list|)
return|;
block|}
block|}
end_class
end_unit
