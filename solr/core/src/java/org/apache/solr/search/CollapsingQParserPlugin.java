begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|FunctionQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|FunctionValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldCache
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|QueryElevationComponent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|LocalSolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|TrieFloatField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|TrieIntField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|TrieLongField
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|FloatArrayList
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|IntOpenHashSet
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|IntCursor
import|;
end_import
begin_comment
comment|/**   The<b>CollapsingQParserPlugin</b> is a PostFilter that performs field collapsing.  This is a high performance alternative to standard Solr  field collapsing (with ngroups) when the number of distinct groups  in the result set is high.<p/>  Sample syntax:<p/>  Collapse based on the highest scoring document:<p/>   fq=(!collapse field=field_name}<p/>  Collapse based on the min value of a numeric field:<p/>  fq={!collapse field=field_name min=field_name}<p/>  Collapse based on the max value of a numeric field:<p/>  fq={!collapse field=field_name max=field_name}<p/>  Collapse with a null policy:<p/>  fq={!collapse field=field_name nullPolicy=nullPolicy}<p/>  There are three null policies:<br/>  ignore : removes docs with a null value in the collapse field (default).<br/>  expand : treats each doc with a null value in the collapse field as a separate group.<br/>  collapse : collapses all docs with a null value into a single group using either highest score, or min/max.<p/>  The CollapsingQParserPlugin fully supports the QueryElevationComponent    **/
end_comment
begin_class
DECL|class|CollapsingQParserPlugin
specifier|public
class|class
name|CollapsingQParserPlugin
extends|extends
name|QParserPlugin
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"collapse"
decl_stmt|;
DECL|field|NULL_COLLAPSE
specifier|public
specifier|static
specifier|final
name|String
name|NULL_COLLAPSE
init|=
literal|"collapse"
decl_stmt|;
DECL|field|NULL_IGNORE
specifier|public
specifier|static
specifier|final
name|String
name|NULL_IGNORE
init|=
literal|"ignore"
decl_stmt|;
DECL|field|NULL_EXPAND
specifier|public
specifier|static
specifier|final
name|String
name|NULL_EXPAND
init|=
literal|"expand"
decl_stmt|;
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|namedList
parameter_list|)
block|{    }
DECL|method|createParser
specifier|public
name|QParser
name|createParser
parameter_list|(
name|String
name|qstr
parameter_list|,
name|SolrParams
name|localParams
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|SolrQueryRequest
name|request
parameter_list|)
block|{
return|return
operator|new
name|CollapsingQParser
argument_list|(
name|qstr
argument_list|,
name|localParams
argument_list|,
name|params
argument_list|,
name|request
argument_list|)
return|;
block|}
DECL|class|CollapsingQParser
specifier|private
class|class
name|CollapsingQParser
extends|extends
name|QParser
block|{
DECL|method|CollapsingQParser
specifier|public
name|CollapsingQParser
parameter_list|(
name|String
name|qstr
parameter_list|,
name|SolrParams
name|localParams
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|SolrQueryRequest
name|request
parameter_list|)
block|{
name|super
argument_list|(
name|qstr
argument_list|,
name|localParams
argument_list|,
name|params
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
DECL|method|parse
specifier|public
name|Query
name|parse
parameter_list|()
throws|throws
name|SyntaxError
block|{
try|try
block|{
return|return
operator|new
name|CollapsingPostFilter
argument_list|(
name|localParams
argument_list|,
name|params
argument_list|,
name|req
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SyntaxError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|class|CollapsingPostFilter
specifier|public
class|class
name|CollapsingPostFilter
extends|extends
name|ExtendedQueryBase
implements|implements
name|PostFilter
implements|,
name|ScoreFilter
block|{
DECL|field|field
specifier|private
name|String
name|field
decl_stmt|;
DECL|field|max
specifier|private
name|String
name|max
decl_stmt|;
DECL|field|min
specifier|private
name|String
name|min
decl_stmt|;
DECL|field|needsScores
specifier|private
name|boolean
name|needsScores
init|=
literal|true
decl_stmt|;
DECL|field|nullPolicy
specifier|private
name|int
name|nullPolicy
decl_stmt|;
DECL|field|boosted
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|boosted
decl_stmt|;
DECL|field|NULL_POLICY_IGNORE
specifier|public
specifier|static
specifier|final
name|int
name|NULL_POLICY_IGNORE
init|=
literal|0
decl_stmt|;
DECL|field|NULL_POLICY_COLLAPSE
specifier|public
specifier|static
specifier|final
name|int
name|NULL_POLICY_COLLAPSE
init|=
literal|1
decl_stmt|;
DECL|field|NULL_POLICY_EXPAND
specifier|public
specifier|static
specifier|final
name|int
name|NULL_POLICY_EXPAND
init|=
literal|2
decl_stmt|;
DECL|method|setCache
specifier|public
name|void
name|setCache
parameter_list|(
name|boolean
name|cache
parameter_list|)
block|{      }
DECL|method|setCacheSep
specifier|public
name|void
name|setCacheSep
parameter_list|(
name|boolean
name|cacheSep
parameter_list|)
block|{      }
DECL|method|getCacheSep
specifier|public
name|boolean
name|getCacheSep
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|getCache
specifier|public
name|boolean
name|getCache
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
comment|/*       *  Checking for boosted here because the request context will not have the elevated docs       *  until after the query is constructed. So to be sure there are no elevated docs in the query       *  while checking the cache we must check the request context during the call to hashCode().       */
if|if
condition|(
name|this
operator|.
name|boosted
operator|==
literal|null
condition|)
block|{
name|SolrRequestInfo
name|info
init|=
name|SolrRequestInfo
operator|.
name|getRequestInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|boosted
operator|=
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
name|info
operator|.
name|getReq
argument_list|()
operator|.
name|getContext
argument_list|()
operator|.
name|get
argument_list|(
name|QueryElevationComponent
operator|.
name|BOOSTED
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|hashCode
init|=
name|field
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|hashCode
operator|=
name|max
operator|!=
literal|null
condition|?
name|hashCode
operator|+
name|max
operator|.
name|hashCode
argument_list|()
else|:
name|hashCode
expr_stmt|;
name|hashCode
operator|=
name|min
operator|!=
literal|null
condition|?
name|hashCode
operator|+
name|min
operator|.
name|hashCode
argument_list|()
else|:
name|hashCode
expr_stmt|;
name|hashCode
operator|=
name|boosted
operator|!=
literal|null
condition|?
name|hashCode
operator|+
name|boosted
operator|.
name|hashCode
argument_list|()
else|:
name|hashCode
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|+
name|nullPolicy
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
operator|(
operator|(
literal|1
operator|+
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|this
operator|.
name|getBoost
argument_list|()
argument_list|)
operator|)
operator|*
literal|31
operator|)
expr_stmt|;
return|return
name|hashCode
return|;
block|}
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|CollapsingPostFilter
condition|)
block|{
name|CollapsingPostFilter
name|c
init|=
operator|(
name|CollapsingPostFilter
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|field
operator|.
name|equals
argument_list|(
name|c
operator|.
name|field
argument_list|)
operator|&&
operator|(
operator|(
name|this
operator|.
name|max
operator|==
literal|null
operator|&&
name|c
operator|.
name|max
operator|==
literal|null
operator|)
operator|||
operator|(
name|this
operator|.
name|max
operator|!=
literal|null
operator|&&
name|c
operator|.
name|max
operator|!=
literal|null
operator|&&
name|this
operator|.
name|max
operator|.
name|equals
argument_list|(
name|c
operator|.
name|max
argument_list|)
operator|)
operator|)
operator|&&
operator|(
operator|(
name|this
operator|.
name|min
operator|==
literal|null
operator|&&
name|c
operator|.
name|min
operator|==
literal|null
operator|)
operator|||
operator|(
name|this
operator|.
name|min
operator|!=
literal|null
operator|&&
name|c
operator|.
name|min
operator|!=
literal|null
operator|&&
name|this
operator|.
name|min
operator|.
name|equals
argument_list|(
name|c
operator|.
name|min
argument_list|)
operator|)
operator|)
operator|&&
name|this
operator|.
name|nullPolicy
operator|==
name|c
operator|.
name|nullPolicy
operator|&&
operator|(
operator|(
name|this
operator|.
name|boosted
operator|==
literal|null
operator|&&
name|c
operator|.
name|boosted
operator|==
literal|null
operator|)
operator|||
operator|(
name|this
operator|.
name|boosted
operator|==
name|c
operator|.
name|boosted
operator|)
operator|)
operator|&&
name|this
operator|.
name|getBoost
argument_list|()
operator|==
name|c
operator|.
name|getBoost
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|getCost
specifier|public
name|int
name|getCost
parameter_list|()
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
name|super
operator|.
name|getCost
argument_list|()
argument_list|,
literal|100
argument_list|)
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
return|;
block|}
DECL|method|CollapsingPostFilter
specifier|public
name|CollapsingPostFilter
parameter_list|(
name|SolrParams
name|localParams
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|SolrQueryRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|field
operator|=
name|localParams
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|localParams
operator|.
name|get
argument_list|(
literal|"max"
argument_list|)
expr_stmt|;
name|this
operator|.
name|min
operator|=
name|localParams
operator|.
name|get
argument_list|(
literal|"min"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|min
operator|!=
literal|null
operator|||
name|this
operator|.
name|max
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|needsScores
operator|=
name|needsScores
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
name|String
name|nPolicy
init|=
name|localParams
operator|.
name|get
argument_list|(
literal|"nullPolicy"
argument_list|,
name|NULL_IGNORE
argument_list|)
decl_stmt|;
if|if
condition|(
name|nPolicy
operator|.
name|equals
argument_list|(
name|NULL_IGNORE
argument_list|)
condition|)
block|{
name|this
operator|.
name|nullPolicy
operator|=
name|NULL_POLICY_IGNORE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nPolicy
operator|.
name|equals
argument_list|(
name|NULL_COLLAPSE
argument_list|)
condition|)
block|{
name|this
operator|.
name|nullPolicy
operator|=
name|NULL_POLICY_COLLAPSE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nPolicy
operator|.
name|equals
argument_list|(
operator|(
name|NULL_EXPAND
operator|)
argument_list|)
condition|)
block|{
name|this
operator|.
name|nullPolicy
operator|=
name|NULL_POLICY_EXPAND
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid nullPolicy:"
operator|+
name|nPolicy
argument_list|)
throw|;
block|}
block|}
DECL|method|getBoostDocs
specifier|private
name|IntOpenHashSet
name|getBoostDocs
parameter_list|(
name|SolrIndexSearcher
name|indexSearcher
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|boosted
parameter_list|)
throws|throws
name|IOException
block|{
name|IntOpenHashSet
name|boostDocs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|boosted
operator|!=
literal|null
condition|)
block|{
name|SchemaField
name|idField
init|=
name|indexSearcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getUniqueKeyField
argument_list|()
decl_stmt|;
name|String
name|fieldName
init|=
name|idField
operator|.
name|getName
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|BytesRef
argument_list|>
name|localBoosts
init|=
operator|new
name|HashSet
argument_list|(
name|boosted
operator|.
name|size
argument_list|()
operator|*
literal|2
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|boostedIt
init|=
name|boosted
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|boostedIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|localBoosts
operator|.
name|add
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|boostedIt
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boostDocs
operator|=
operator|new
name|IntOpenHashSet
argument_list|(
name|boosted
operator|.
name|size
argument_list|()
operator|*
literal|2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AtomicReaderContext
argument_list|>
name|leaves
init|=
name|indexSearcher
operator|.
name|getTopReaderContext
argument_list|()
operator|.
name|leaves
argument_list|()
decl_stmt|;
name|TermsEnum
name|termsEnum
init|=
literal|null
decl_stmt|;
name|DocsEnum
name|docsEnum
init|=
literal|null
decl_stmt|;
for|for
control|(
name|AtomicReaderContext
name|leaf
range|:
name|leaves
control|)
block|{
name|AtomicReader
name|reader
init|=
name|leaf
operator|.
name|reader
argument_list|()
decl_stmt|;
name|int
name|docBase
init|=
name|leaf
operator|.
name|docBase
decl_stmt|;
name|Bits
name|liveDocs
init|=
name|reader
operator|.
name|getLiveDocs
argument_list|()
decl_stmt|;
name|Terms
name|terms
init|=
name|reader
operator|.
name|terms
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|termsEnum
operator|=
name|terms
operator|.
name|iterator
argument_list|(
name|termsEnum
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|BytesRef
argument_list|>
name|it
init|=
name|localBoosts
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BytesRef
name|ref
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|termsEnum
operator|.
name|seekExact
argument_list|(
name|ref
argument_list|)
condition|)
block|{
name|docsEnum
operator|=
name|termsEnum
operator|.
name|docs
argument_list|(
name|liveDocs
argument_list|,
name|docsEnum
argument_list|)
expr_stmt|;
name|int
name|doc
init|=
name|docsEnum
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
operator|-
literal|1
condition|)
block|{
comment|//Found the document.
name|boostDocs
operator|.
name|add
argument_list|(
name|doc
operator|+
name|docBase
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|boostDocs
return|;
block|}
DECL|method|getFilterCollector
specifier|public
name|DelegatingCollector
name|getFilterCollector
parameter_list|(
name|IndexSearcher
name|indexSearcher
parameter_list|)
block|{
try|try
block|{
name|SolrIndexSearcher
name|searcher
init|=
operator|(
name|SolrIndexSearcher
operator|)
name|indexSearcher
decl_stmt|;
name|IndexSchema
name|schema
init|=
name|searcher
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|SchemaField
name|schemaField
init|=
name|schema
operator|.
name|getField
argument_list|(
name|this
operator|.
name|field
argument_list|)
decl_stmt|;
name|SortedDocValues
name|docValues
init|=
literal|null
decl_stmt|;
name|FunctionQuery
name|funcQuery
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|schemaField
operator|.
name|hasDocValues
argument_list|()
condition|)
block|{
name|docValues
operator|=
name|searcher
operator|.
name|getAtomicReader
argument_list|()
operator|.
name|getSortedDocValues
argument_list|(
name|this
operator|.
name|field
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docValues
operator|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getTermsIndex
argument_list|(
name|searcher
operator|.
name|getAtomicReader
argument_list|()
argument_list|,
name|this
operator|.
name|field
argument_list|)
expr_stmt|;
block|}
name|FieldType
name|fieldType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|max
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|max
operator|.
name|indexOf
argument_list|(
literal|"("
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|fieldType
operator|=
name|searcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|this
operator|.
name|max
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LocalSolrQueryRequest
name|request
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|request
operator|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|searcher
operator|.
name|getCore
argument_list|()
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|FunctionQParser
name|functionQParser
init|=
operator|new
name|FunctionQParser
argument_list|(
name|this
operator|.
name|max
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|funcQuery
operator|=
operator|(
name|FunctionQuery
operator|)
name|functionQParser
operator|.
name|parse
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|request
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|this
operator|.
name|min
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|min
operator|.
name|indexOf
argument_list|(
literal|"("
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|fieldType
operator|=
name|searcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|this
operator|.
name|min
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LocalSolrQueryRequest
name|request
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|request
operator|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|searcher
operator|.
name|getCore
argument_list|()
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|FunctionQParser
name|functionQParser
init|=
operator|new
name|FunctionQParser
argument_list|(
name|this
operator|.
name|min
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|funcQuery
operator|=
operator|(
name|FunctionQuery
operator|)
name|functionQParser
operator|.
name|parse
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|request
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|int
name|maxDoc
init|=
name|searcher
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
name|int
name|leafCount
init|=
name|searcher
operator|.
name|getTopReaderContext
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|boosted
operator|==
literal|null
condition|)
block|{
name|SolrRequestInfo
name|info
init|=
name|SolrRequestInfo
operator|.
name|getRequestInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|boosted
operator|=
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
name|info
operator|.
name|getReq
argument_list|()
operator|.
name|getContext
argument_list|()
operator|.
name|get
argument_list|(
name|QueryElevationComponent
operator|.
name|BOOSTED
argument_list|)
expr_stmt|;
block|}
block|}
name|IntOpenHashSet
name|boostDocs
init|=
name|getBoostDocs
argument_list|(
name|searcher
argument_list|,
name|this
operator|.
name|boosted
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|min
operator|!=
literal|null
operator|||
name|this
operator|.
name|max
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|CollapsingFieldValueCollector
argument_list|(
name|maxDoc
argument_list|,
name|leafCount
argument_list|,
name|docValues
argument_list|,
name|this
operator|.
name|nullPolicy
argument_list|,
name|max
operator|!=
literal|null
condition|?
name|this
operator|.
name|max
else|:
name|this
operator|.
name|min
argument_list|,
name|max
operator|!=
literal|null
argument_list|,
name|this
operator|.
name|needsScores
argument_list|,
name|fieldType
argument_list|,
name|boostDocs
argument_list|,
name|funcQuery
argument_list|,
name|searcher
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|CollapsingScoreCollector
argument_list|(
name|maxDoc
argument_list|,
name|leafCount
argument_list|,
name|docValues
argument_list|,
name|this
operator|.
name|nullPolicy
argument_list|,
name|boostDocs
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|needsScores
specifier|private
name|boolean
name|needsScores
parameter_list|(
name|SolrParams
name|params
parameter_list|)
block|{
name|String
name|sortSpec
init|=
name|params
operator|.
name|get
argument_list|(
literal|"sort"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sortSpec
operator|!=
literal|null
operator|&&
name|sortSpec
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|String
index|[]
name|sorts
init|=
name|sortSpec
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|sorts
control|)
block|{
name|String
name|parts
index|[]
init|=
name|s
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"score"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
else|else
block|{
comment|//No sort specified so it defaults to score.
return|return
literal|true
return|;
block|}
name|String
name|fl
init|=
name|params
operator|.
name|get
argument_list|(
literal|"fl"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fl
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|fls
init|=
name|fl
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|fls
control|)
block|{
if|if
condition|(
name|f
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|"score"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
if|if
condition|(
name|this
operator|.
name|boosted
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|class|DummyScorer
specifier|private
class|class
name|DummyScorer
extends|extends
name|Scorer
block|{
DECL|field|score
specifier|public
name|float
name|score
decl_stmt|;
DECL|field|docId
specifier|public
name|int
name|docId
decl_stmt|;
DECL|method|DummyScorer
specifier|public
name|DummyScorer
parameter_list|()
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
block|{
return|return
name|score
return|;
block|}
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|docId
return|;
block|}
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
DECL|class|CollapsingScoreCollector
specifier|private
class|class
name|CollapsingScoreCollector
extends|extends
name|DelegatingCollector
block|{
DECL|field|contexts
specifier|private
name|AtomicReaderContext
index|[]
name|contexts
decl_stmt|;
DECL|field|collapsedSet
specifier|private
name|FixedBitSet
name|collapsedSet
decl_stmt|;
DECL|field|values
specifier|private
name|SortedDocValues
name|values
decl_stmt|;
DECL|field|ords
specifier|private
name|int
index|[]
name|ords
decl_stmt|;
DECL|field|scores
specifier|private
name|float
index|[]
name|scores
decl_stmt|;
DECL|field|docBase
specifier|private
name|int
name|docBase
decl_stmt|;
DECL|field|maxDoc
specifier|private
name|int
name|maxDoc
decl_stmt|;
DECL|field|nullPolicy
specifier|private
name|int
name|nullPolicy
decl_stmt|;
DECL|field|nullScore
specifier|private
name|float
name|nullScore
init|=
operator|-
name|Float
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|nullDoc
specifier|private
name|int
name|nullDoc
decl_stmt|;
DECL|field|nullScores
specifier|private
name|FloatArrayList
name|nullScores
decl_stmt|;
DECL|field|boostDocs
specifier|private
name|IntOpenHashSet
name|boostDocs
decl_stmt|;
DECL|method|CollapsingScoreCollector
specifier|public
name|CollapsingScoreCollector
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|int
name|segments
parameter_list|,
name|SortedDocValues
name|values
parameter_list|,
name|int
name|nullPolicy
parameter_list|,
name|IntOpenHashSet
name|boostDocs
parameter_list|)
block|{
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
name|this
operator|.
name|contexts
operator|=
operator|new
name|AtomicReaderContext
index|[
name|segments
index|]
expr_stmt|;
name|this
operator|.
name|collapsedSet
operator|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
expr_stmt|;
name|this
operator|.
name|boostDocs
operator|=
name|boostDocs
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|boostDocs
operator|!=
literal|null
condition|)
block|{
comment|//Set the elevated docs now.
name|Iterator
argument_list|<
name|IntCursor
argument_list|>
name|it
init|=
name|this
operator|.
name|boostDocs
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IntCursor
name|cursor
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|this
operator|.
name|collapsedSet
operator|.
name|set
argument_list|(
name|cursor
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
name|int
name|valueCount
init|=
name|values
operator|.
name|getValueCount
argument_list|()
decl_stmt|;
name|this
operator|.
name|ords
operator|=
operator|new
name|int
index|[
name|valueCount
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|this
operator|.
name|ords
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|scores
operator|=
operator|new
name|float
index|[
name|valueCount
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|this
operator|.
name|scores
argument_list|,
operator|-
name|Float
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|this
operator|.
name|nullPolicy
operator|=
name|nullPolicy
expr_stmt|;
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|nullScores
operator|=
operator|new
name|FloatArrayList
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|acceptsDocsOutOfOrder
specifier|public
name|boolean
name|acceptsDocsOutOfOrder
parameter_list|()
block|{
comment|//Documents must be sent in order to this collector.
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|contexts
index|[
name|context
operator|.
name|ord
index|]
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|docBase
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|docId
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|globalDoc
init|=
name|docId
operator|+
name|this
operator|.
name|docBase
decl_stmt|;
name|int
name|ord
init|=
name|values
operator|.
name|getOrd
argument_list|(
name|globalDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|>
operator|-
literal|1
condition|)
block|{
name|float
name|score
init|=
name|scorer
operator|.
name|score
argument_list|()
decl_stmt|;
if|if
condition|(
name|score
operator|>
name|scores
index|[
name|ord
index|]
condition|)
block|{
name|ords
index|[
name|ord
index|]
operator|=
name|globalDoc
expr_stmt|;
name|scores
index|[
name|ord
index|]
operator|=
name|score
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|collapsedSet
operator|.
name|get
argument_list|(
name|globalDoc
argument_list|)
condition|)
block|{
comment|//The doc is elevated so score does not matter
comment|//We just want to be sure it doesn't fall into the null policy
block|}
elseif|else
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_COLLAPSE
condition|)
block|{
name|float
name|score
init|=
name|scorer
operator|.
name|score
argument_list|()
decl_stmt|;
if|if
condition|(
name|score
operator|>
name|nullScore
condition|)
block|{
name|nullScore
operator|=
name|score
expr_stmt|;
name|nullDoc
operator|=
name|globalDoc
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|collapsedSet
operator|.
name|set
argument_list|(
name|globalDoc
argument_list|)
expr_stmt|;
name|nullScores
operator|.
name|add
argument_list|(
name|scorer
operator|.
name|score
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|finish
specifier|public
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|contexts
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|nullScore
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|collapsedSet
operator|.
name|set
argument_list|(
name|nullDoc
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ords
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|doc
init|=
name|ords
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|doc
operator|>
operator|-
literal|1
condition|)
block|{
name|collapsedSet
operator|.
name|set
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|currentContext
init|=
literal|0
decl_stmt|;
name|int
name|currentDocBase
init|=
literal|0
decl_stmt|;
name|int
name|nextDocBase
init|=
name|currentContext
operator|+
literal|1
operator|<
name|contexts
operator|.
name|length
condition|?
name|contexts
index|[
name|currentContext
operator|+
literal|1
index|]
operator|.
name|docBase
else|:
name|maxDoc
decl_stmt|;
name|delegate
operator|.
name|setNextReader
argument_list|(
name|contexts
index|[
name|currentContext
index|]
argument_list|)
expr_stmt|;
name|DummyScorer
name|dummy
init|=
operator|new
name|DummyScorer
argument_list|()
decl_stmt|;
name|delegate
operator|.
name|setScorer
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|DocIdSetIterator
name|it
init|=
name|collapsedSet
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|docId
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|nullScoreIndex
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|docId
operator|=
name|it
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|int
name|ord
init|=
name|values
operator|.
name|getOrd
argument_list|(
name|docId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|>
operator|-
literal|1
condition|)
block|{
name|dummy
operator|.
name|score
operator|=
name|scores
index|[
name|ord
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|boostDocs
operator|!=
literal|null
operator|&&
name|boostDocs
operator|.
name|contains
argument_list|(
name|docId
argument_list|)
condition|)
block|{
comment|//Elevated docs don't need a score.
name|dummy
operator|.
name|score
operator|=
literal|0F
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_COLLAPSE
condition|)
block|{
name|dummy
operator|.
name|score
operator|=
name|nullScore
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|dummy
operator|.
name|score
operator|=
name|nullScores
operator|.
name|get
argument_list|(
name|nullScoreIndex
operator|++
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|docId
operator|>=
name|nextDocBase
condition|)
block|{
name|currentContext
operator|++
expr_stmt|;
name|currentDocBase
operator|=
name|contexts
index|[
name|currentContext
index|]
operator|.
name|docBase
expr_stmt|;
name|nextDocBase
operator|=
name|currentContext
operator|+
literal|1
operator|<
name|contexts
operator|.
name|length
condition|?
name|contexts
index|[
name|currentContext
operator|+
literal|1
index|]
operator|.
name|docBase
else|:
name|maxDoc
expr_stmt|;
name|delegate
operator|.
name|setNextReader
argument_list|(
name|contexts
index|[
name|currentContext
index|]
argument_list|)
expr_stmt|;
name|delegate
operator|.
name|setScorer
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
block|}
name|int
name|contextDoc
init|=
name|docId
operator|-
name|currentDocBase
decl_stmt|;
name|dummy
operator|.
name|docId
operator|=
name|contextDoc
expr_stmt|;
name|delegate
operator|.
name|collect
argument_list|(
name|contextDoc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|delegate
operator|instanceof
name|DelegatingCollector
condition|)
block|{
operator|(
operator|(
name|DelegatingCollector
operator|)
name|delegate
operator|)
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|CollapsingFieldValueCollector
specifier|private
class|class
name|CollapsingFieldValueCollector
extends|extends
name|DelegatingCollector
block|{
DECL|field|contexts
specifier|private
name|AtomicReaderContext
index|[]
name|contexts
decl_stmt|;
DECL|field|values
specifier|private
name|SortedDocValues
name|values
decl_stmt|;
DECL|field|docBase
specifier|private
name|int
name|docBase
decl_stmt|;
DECL|field|maxDoc
specifier|private
name|int
name|maxDoc
decl_stmt|;
DECL|field|nullPolicy
specifier|private
name|int
name|nullPolicy
decl_stmt|;
DECL|field|fieldValueCollapse
specifier|private
name|FieldValueCollapse
name|fieldValueCollapse
decl_stmt|;
DECL|field|needsScores
specifier|private
name|boolean
name|needsScores
decl_stmt|;
DECL|field|boostDocs
specifier|private
name|IntOpenHashSet
name|boostDocs
decl_stmt|;
DECL|method|CollapsingFieldValueCollector
specifier|public
name|CollapsingFieldValueCollector
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|int
name|segments
parameter_list|,
name|SortedDocValues
name|values
parameter_list|,
name|int
name|nullPolicy
parameter_list|,
name|String
name|field
parameter_list|,
name|boolean
name|max
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|FieldType
name|fieldType
parameter_list|,
name|IntOpenHashSet
name|boostDocs
parameter_list|,
name|FunctionQuery
name|funcQuery
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
name|this
operator|.
name|contexts
operator|=
operator|new
name|AtomicReaderContext
index|[
name|segments
index|]
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
name|int
name|valueCount
init|=
name|values
operator|.
name|getValueCount
argument_list|()
decl_stmt|;
name|this
operator|.
name|nullPolicy
operator|=
name|nullPolicy
expr_stmt|;
name|this
operator|.
name|needsScores
operator|=
name|needsScores
expr_stmt|;
name|this
operator|.
name|boostDocs
operator|=
name|boostDocs
expr_stmt|;
if|if
condition|(
name|funcQuery
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|fieldValueCollapse
operator|=
operator|new
name|ValueSourceCollapse
argument_list|(
name|maxDoc
argument_list|,
name|field
argument_list|,
name|nullPolicy
argument_list|,
operator|new
name|int
index|[
name|valueCount
index|]
argument_list|,
name|max
argument_list|,
name|this
operator|.
name|needsScores
argument_list|,
name|boostDocs
argument_list|,
name|funcQuery
argument_list|,
name|searcher
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|fieldType
operator|instanceof
name|TrieIntField
condition|)
block|{
name|this
operator|.
name|fieldValueCollapse
operator|=
operator|new
name|IntValueCollapse
argument_list|(
name|maxDoc
argument_list|,
name|field
argument_list|,
name|nullPolicy
argument_list|,
operator|new
name|int
index|[
name|valueCount
index|]
argument_list|,
name|max
argument_list|,
name|this
operator|.
name|needsScores
argument_list|,
name|boostDocs
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldType
operator|instanceof
name|TrieLongField
condition|)
block|{
name|this
operator|.
name|fieldValueCollapse
operator|=
operator|new
name|LongValueCollapse
argument_list|(
name|maxDoc
argument_list|,
name|field
argument_list|,
name|nullPolicy
argument_list|,
operator|new
name|int
index|[
name|valueCount
index|]
argument_list|,
name|max
argument_list|,
name|this
operator|.
name|needsScores
argument_list|,
name|boostDocs
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldType
operator|instanceof
name|TrieFloatField
condition|)
block|{
name|this
operator|.
name|fieldValueCollapse
operator|=
operator|new
name|FloatValueCollapse
argument_list|(
name|maxDoc
argument_list|,
name|field
argument_list|,
name|nullPolicy
argument_list|,
operator|new
name|int
index|[
name|valueCount
index|]
argument_list|,
name|max
argument_list|,
name|this
operator|.
name|needsScores
argument_list|,
name|boostDocs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"min/max must be either TrieInt, TrieLong or TrieFloat."
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|acceptsDocsOutOfOrder
specifier|public
name|boolean
name|acceptsDocsOutOfOrder
parameter_list|()
block|{
comment|//Documents must be sent in order to this collector.
return|return
literal|false
return|;
block|}
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{
name|this
operator|.
name|fieldValueCollapse
operator|.
name|setScorer
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
block|}
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|contexts
index|[
name|context
operator|.
name|ord
index|]
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|docBase
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
name|this
operator|.
name|fieldValueCollapse
operator|.
name|setNextReader
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|docId
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|globalDoc
init|=
name|docId
operator|+
name|this
operator|.
name|docBase
decl_stmt|;
name|int
name|ord
init|=
name|values
operator|.
name|getOrd
argument_list|(
name|globalDoc
argument_list|)
decl_stmt|;
name|fieldValueCollapse
operator|.
name|collapse
argument_list|(
name|ord
argument_list|,
name|docId
argument_list|,
name|globalDoc
argument_list|)
expr_stmt|;
block|}
DECL|method|finish
specifier|public
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|contexts
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|int
name|currentContext
init|=
literal|0
decl_stmt|;
name|int
name|currentDocBase
init|=
literal|0
decl_stmt|;
name|int
name|nextDocBase
init|=
name|currentContext
operator|+
literal|1
operator|<
name|contexts
operator|.
name|length
condition|?
name|contexts
index|[
name|currentContext
operator|+
literal|1
index|]
operator|.
name|docBase
else|:
name|maxDoc
decl_stmt|;
name|delegate
operator|.
name|setNextReader
argument_list|(
name|contexts
index|[
name|currentContext
index|]
argument_list|)
expr_stmt|;
name|DummyScorer
name|dummy
init|=
operator|new
name|DummyScorer
argument_list|()
decl_stmt|;
name|delegate
operator|.
name|setScorer
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|DocIdSetIterator
name|it
init|=
name|fieldValueCollapse
operator|.
name|getCollapsedSet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|docId
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|nullScoreIndex
init|=
literal|0
decl_stmt|;
name|float
index|[]
name|scores
init|=
name|fieldValueCollapse
operator|.
name|getScores
argument_list|()
decl_stmt|;
name|FloatArrayList
name|nullScores
init|=
name|fieldValueCollapse
operator|.
name|getNullScores
argument_list|()
decl_stmt|;
name|float
name|nullScore
init|=
name|fieldValueCollapse
operator|.
name|getNullScore
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|docId
operator|=
name|it
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|needsScores
condition|)
block|{
name|int
name|ord
init|=
name|values
operator|.
name|getOrd
argument_list|(
name|docId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|>
operator|-
literal|1
condition|)
block|{
name|dummy
operator|.
name|score
operator|=
name|scores
index|[
name|ord
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|boostDocs
operator|!=
literal|null
operator|&&
name|boostDocs
operator|.
name|contains
argument_list|(
name|docId
argument_list|)
condition|)
block|{
comment|//Its an elevated doc so no score is needed
name|dummy
operator|.
name|score
operator|=
literal|0F
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_COLLAPSE
condition|)
block|{
name|dummy
operator|.
name|score
operator|=
name|nullScore
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|dummy
operator|.
name|score
operator|=
name|nullScores
operator|.
name|get
argument_list|(
name|nullScoreIndex
operator|++
argument_list|)
expr_stmt|;
block|}
block|}
while|while
condition|(
name|docId
operator|>=
name|nextDocBase
condition|)
block|{
name|currentContext
operator|++
expr_stmt|;
name|currentDocBase
operator|=
name|contexts
index|[
name|currentContext
index|]
operator|.
name|docBase
expr_stmt|;
name|nextDocBase
operator|=
name|currentContext
operator|+
literal|1
operator|<
name|contexts
operator|.
name|length
condition|?
name|contexts
index|[
name|currentContext
operator|+
literal|1
index|]
operator|.
name|docBase
else|:
name|maxDoc
expr_stmt|;
name|delegate
operator|.
name|setNextReader
argument_list|(
name|contexts
index|[
name|currentContext
index|]
argument_list|)
expr_stmt|;
name|delegate
operator|.
name|setScorer
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
block|}
name|int
name|contextDoc
init|=
name|docId
operator|-
name|currentDocBase
decl_stmt|;
name|dummy
operator|.
name|docId
operator|=
name|contextDoc
expr_stmt|;
name|delegate
operator|.
name|collect
argument_list|(
name|contextDoc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|delegate
operator|instanceof
name|DelegatingCollector
condition|)
block|{
operator|(
operator|(
name|DelegatingCollector
operator|)
name|delegate
operator|)
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|FieldValueCollapse
specifier|private
specifier|abstract
class|class
name|FieldValueCollapse
block|{
DECL|field|nullPolicy
specifier|protected
name|int
name|nullPolicy
decl_stmt|;
DECL|field|ords
specifier|protected
name|int
index|[]
name|ords
decl_stmt|;
DECL|field|scorer
specifier|protected
name|Scorer
name|scorer
decl_stmt|;
DECL|field|nullScores
specifier|protected
name|FloatArrayList
name|nullScores
decl_stmt|;
DECL|field|nullScore
specifier|protected
name|float
name|nullScore
decl_stmt|;
DECL|field|scores
specifier|protected
name|float
index|[]
name|scores
decl_stmt|;
DECL|field|collapsedSet
specifier|protected
name|FixedBitSet
name|collapsedSet
decl_stmt|;
DECL|field|boostDocs
specifier|protected
name|IntOpenHashSet
name|boostDocs
decl_stmt|;
DECL|field|nullDoc
specifier|protected
name|int
name|nullDoc
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|needsScores
specifier|protected
name|boolean
name|needsScores
decl_stmt|;
DECL|field|max
specifier|protected
name|boolean
name|max
decl_stmt|;
DECL|field|field
specifier|protected
name|String
name|field
decl_stmt|;
DECL|method|collapse
specifier|public
specifier|abstract
name|void
name|collapse
parameter_list|(
name|int
name|ord
parameter_list|,
name|int
name|contextDoc
parameter_list|,
name|int
name|globalDoc
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|setNextReader
specifier|public
specifier|abstract
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|FieldValueCollapse
specifier|public
name|FieldValueCollapse
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|String
name|field
parameter_list|,
name|int
name|nullPolicy
parameter_list|,
name|boolean
name|max
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|IntOpenHashSet
name|boostDocs
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|nullPolicy
operator|=
name|nullPolicy
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
name|this
operator|.
name|needsScores
operator|=
name|needsScores
expr_stmt|;
name|this
operator|.
name|collapsedSet
operator|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
expr_stmt|;
name|this
operator|.
name|boostDocs
operator|=
name|boostDocs
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|boostDocs
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|IntCursor
argument_list|>
name|it
init|=
name|boostDocs
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IntCursor
name|cursor
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|this
operator|.
name|collapsedSet
operator|.
name|set
argument_list|(
name|cursor
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getCollapsedSet
specifier|public
name|FixedBitSet
name|getCollapsedSet
parameter_list|()
block|{
if|if
condition|(
name|nullDoc
operator|>
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|collapsedSet
operator|.
name|set
argument_list|(
name|nullDoc
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ords
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|doc
init|=
name|ords
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|doc
operator|>
operator|-
literal|1
condition|)
block|{
name|collapsedSet
operator|.
name|set
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|collapsedSet
return|;
block|}
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
block|}
DECL|method|getNullScores
specifier|public
name|FloatArrayList
name|getNullScores
parameter_list|()
block|{
return|return
name|nullScores
return|;
block|}
DECL|method|getNullScore
specifier|public
name|float
name|getNullScore
parameter_list|()
block|{
return|return
name|this
operator|.
name|nullScore
return|;
block|}
DECL|method|getScores
specifier|public
name|float
index|[]
name|getScores
parameter_list|()
block|{
return|return
name|scores
return|;
block|}
block|}
DECL|class|IntValueCollapse
specifier|private
class|class
name|IntValueCollapse
extends|extends
name|FieldValueCollapse
block|{
DECL|field|vals
specifier|private
name|FieldCache
operator|.
name|Ints
name|vals
decl_stmt|;
DECL|field|comp
specifier|private
name|IntCompare
name|comp
decl_stmt|;
DECL|field|nullVal
specifier|private
name|int
name|nullVal
decl_stmt|;
DECL|field|ordVals
specifier|private
name|int
index|[]
name|ordVals
decl_stmt|;
DECL|method|IntValueCollapse
specifier|public
name|IntValueCollapse
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|String
name|field
parameter_list|,
name|int
name|nullPolicy
parameter_list|,
name|int
index|[]
name|ords
parameter_list|,
name|boolean
name|max
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|IntOpenHashSet
name|boostDocs
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|maxDoc
argument_list|,
name|field
argument_list|,
name|nullPolicy
argument_list|,
name|max
argument_list|,
name|needsScores
argument_list|,
name|boostDocs
argument_list|)
expr_stmt|;
name|this
operator|.
name|ords
operator|=
name|ords
expr_stmt|;
name|this
operator|.
name|ordVals
operator|=
operator|new
name|int
index|[
name|ords
operator|.
name|length
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|ords
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|max
condition|)
block|{
name|comp
operator|=
operator|new
name|MaxIntComp
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|ordVals
argument_list|,
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|comp
operator|=
operator|new
name|MinIntComp
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|ordVals
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|this
operator|.
name|nullVal
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
if|if
condition|(
name|needsScores
condition|)
block|{
name|this
operator|.
name|scores
operator|=
operator|new
name|float
index|[
name|ords
operator|.
name|length
index|]
expr_stmt|;
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|nullScores
operator|=
operator|new
name|FloatArrayList
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|vals
operator|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getInts
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|this
operator|.
name|field
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|collapse
specifier|public
name|void
name|collapse
parameter_list|(
name|int
name|ord
parameter_list|,
name|int
name|contextDoc
parameter_list|,
name|int
name|globalDoc
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|val
init|=
name|vals
operator|.
name|get
argument_list|(
name|contextDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|>
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|comp
operator|.
name|test
argument_list|(
name|val
argument_list|,
name|ordVals
index|[
name|ord
index|]
argument_list|)
condition|)
block|{
name|ords
index|[
name|ord
index|]
operator|=
name|globalDoc
expr_stmt|;
name|ordVals
index|[
name|ord
index|]
operator|=
name|val
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|scores
index|[
name|ord
index|]
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|collapsedSet
operator|.
name|get
argument_list|(
name|globalDoc
argument_list|)
condition|)
block|{
comment|// Elevated doc so do nothing.
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_COLLAPSE
condition|)
block|{
if|if
condition|(
name|comp
operator|.
name|test
argument_list|(
name|val
argument_list|,
name|nullVal
argument_list|)
condition|)
block|{
name|nullVal
operator|=
name|val
expr_stmt|;
name|nullDoc
operator|=
name|globalDoc
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|nullScore
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|this
operator|.
name|collapsedSet
operator|.
name|set
argument_list|(
name|globalDoc
argument_list|)
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|nullScores
operator|.
name|add
argument_list|(
name|scorer
operator|.
name|score
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|LongValueCollapse
specifier|private
class|class
name|LongValueCollapse
extends|extends
name|FieldValueCollapse
block|{
DECL|field|vals
specifier|private
name|FieldCache
operator|.
name|Longs
name|vals
decl_stmt|;
DECL|field|comp
specifier|private
name|LongCompare
name|comp
decl_stmt|;
DECL|field|nullVal
specifier|private
name|long
name|nullVal
decl_stmt|;
DECL|field|ordVals
specifier|private
name|long
index|[]
name|ordVals
decl_stmt|;
DECL|method|LongValueCollapse
specifier|public
name|LongValueCollapse
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|String
name|field
parameter_list|,
name|int
name|nullPolicy
parameter_list|,
name|int
index|[]
name|ords
parameter_list|,
name|boolean
name|max
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|IntOpenHashSet
name|boostDocs
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|maxDoc
argument_list|,
name|field
argument_list|,
name|nullPolicy
argument_list|,
name|max
argument_list|,
name|needsScores
argument_list|,
name|boostDocs
argument_list|)
expr_stmt|;
name|this
operator|.
name|ords
operator|=
name|ords
expr_stmt|;
name|this
operator|.
name|ordVals
operator|=
operator|new
name|long
index|[
name|ords
operator|.
name|length
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|ords
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|max
condition|)
block|{
name|comp
operator|=
operator|new
name|MaxLongComp
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|ordVals
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|nullVal
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
name|comp
operator|=
operator|new
name|MinLongComp
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|ordVals
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|needsScores
condition|)
block|{
name|this
operator|.
name|scores
operator|=
operator|new
name|float
index|[
name|ords
operator|.
name|length
index|]
expr_stmt|;
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|nullScores
operator|=
operator|new
name|FloatArrayList
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|vals
operator|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getLongs
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|this
operator|.
name|field
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|collapse
specifier|public
name|void
name|collapse
parameter_list|(
name|int
name|ord
parameter_list|,
name|int
name|contextDoc
parameter_list|,
name|int
name|globalDoc
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|val
init|=
name|vals
operator|.
name|get
argument_list|(
name|contextDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|>
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|comp
operator|.
name|test
argument_list|(
name|val
argument_list|,
name|ordVals
index|[
name|ord
index|]
argument_list|)
condition|)
block|{
name|ords
index|[
name|ord
index|]
operator|=
name|globalDoc
expr_stmt|;
name|ordVals
index|[
name|ord
index|]
operator|=
name|val
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|scores
index|[
name|ord
index|]
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|collapsedSet
operator|.
name|get
argument_list|(
name|globalDoc
argument_list|)
condition|)
block|{
comment|//Elevated doc so do nothing
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_COLLAPSE
condition|)
block|{
if|if
condition|(
name|comp
operator|.
name|test
argument_list|(
name|val
argument_list|,
name|nullVal
argument_list|)
condition|)
block|{
name|nullVal
operator|=
name|val
expr_stmt|;
name|nullDoc
operator|=
name|globalDoc
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|nullScore
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|this
operator|.
name|collapsedSet
operator|.
name|set
argument_list|(
name|globalDoc
argument_list|)
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|nullScores
operator|.
name|add
argument_list|(
name|scorer
operator|.
name|score
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|FloatValueCollapse
specifier|private
class|class
name|FloatValueCollapse
extends|extends
name|FieldValueCollapse
block|{
DECL|field|vals
specifier|private
name|FieldCache
operator|.
name|Floats
name|vals
decl_stmt|;
DECL|field|comp
specifier|private
name|FloatCompare
name|comp
decl_stmt|;
DECL|field|nullVal
specifier|private
name|float
name|nullVal
decl_stmt|;
DECL|field|ordVals
specifier|private
name|float
index|[]
name|ordVals
decl_stmt|;
DECL|method|FloatValueCollapse
specifier|public
name|FloatValueCollapse
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|String
name|field
parameter_list|,
name|int
name|nullPolicy
parameter_list|,
name|int
index|[]
name|ords
parameter_list|,
name|boolean
name|max
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|IntOpenHashSet
name|boostDocs
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|maxDoc
argument_list|,
name|field
argument_list|,
name|nullPolicy
argument_list|,
name|max
argument_list|,
name|needsScores
argument_list|,
name|boostDocs
argument_list|)
expr_stmt|;
name|this
operator|.
name|ords
operator|=
name|ords
expr_stmt|;
name|this
operator|.
name|ordVals
operator|=
operator|new
name|float
index|[
name|ords
operator|.
name|length
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|ords
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|max
condition|)
block|{
name|comp
operator|=
operator|new
name|MaxFloatComp
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|ordVals
argument_list|,
operator|-
name|Float
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|nullVal
operator|=
name|Float
operator|.
name|MAX_VALUE
expr_stmt|;
name|comp
operator|=
operator|new
name|MinFloatComp
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|ordVals
argument_list|,
name|Float
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|needsScores
condition|)
block|{
name|this
operator|.
name|scores
operator|=
operator|new
name|float
index|[
name|ords
operator|.
name|length
index|]
expr_stmt|;
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|nullScores
operator|=
operator|new
name|FloatArrayList
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|vals
operator|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getFloats
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|this
operator|.
name|field
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|collapse
specifier|public
name|void
name|collapse
parameter_list|(
name|int
name|ord
parameter_list|,
name|int
name|contextDoc
parameter_list|,
name|int
name|globalDoc
parameter_list|)
throws|throws
name|IOException
block|{
name|float
name|val
init|=
name|vals
operator|.
name|get
argument_list|(
name|contextDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|>
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|comp
operator|.
name|test
argument_list|(
name|val
argument_list|,
name|ordVals
index|[
name|ord
index|]
argument_list|)
condition|)
block|{
name|ords
index|[
name|ord
index|]
operator|=
name|globalDoc
expr_stmt|;
name|ordVals
index|[
name|ord
index|]
operator|=
name|val
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|scores
index|[
name|ord
index|]
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|collapsedSet
operator|.
name|get
argument_list|(
name|globalDoc
argument_list|)
condition|)
block|{
comment|//Elevated doc so do nothing
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_COLLAPSE
condition|)
block|{
if|if
condition|(
name|comp
operator|.
name|test
argument_list|(
name|val
argument_list|,
name|nullVal
argument_list|)
condition|)
block|{
name|nullVal
operator|=
name|val
expr_stmt|;
name|nullDoc
operator|=
name|globalDoc
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|nullScore
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|this
operator|.
name|collapsedSet
operator|.
name|set
argument_list|(
name|globalDoc
argument_list|)
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|nullScores
operator|.
name|add
argument_list|(
name|scorer
operator|.
name|score
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|ValueSourceCollapse
specifier|private
class|class
name|ValueSourceCollapse
extends|extends
name|FieldValueCollapse
block|{
DECL|field|comp
specifier|private
name|FloatCompare
name|comp
decl_stmt|;
DECL|field|nullVal
specifier|private
name|float
name|nullVal
decl_stmt|;
DECL|field|valueSource
specifier|private
name|ValueSource
name|valueSource
decl_stmt|;
DECL|field|functionValues
specifier|private
name|FunctionValues
name|functionValues
decl_stmt|;
DECL|field|ordVals
specifier|private
name|float
index|[]
name|ordVals
decl_stmt|;
DECL|field|rcontext
specifier|private
name|Map
name|rcontext
decl_stmt|;
DECL|field|collapseScore
specifier|private
name|CollapseScore
name|collapseScore
init|=
operator|new
name|CollapseScore
argument_list|()
decl_stmt|;
DECL|field|score
specifier|private
name|float
name|score
decl_stmt|;
DECL|field|cscore
specifier|private
name|boolean
name|cscore
decl_stmt|;
DECL|method|ValueSourceCollapse
specifier|public
name|ValueSourceCollapse
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|String
name|funcStr
parameter_list|,
name|int
name|nullPolicy
parameter_list|,
name|int
index|[]
name|ords
parameter_list|,
name|boolean
name|max
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|IntOpenHashSet
name|boostDocs
parameter_list|,
name|FunctionQuery
name|funcQuery
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|maxDoc
argument_list|,
literal|null
argument_list|,
name|nullPolicy
argument_list|,
name|max
argument_list|,
name|needsScores
argument_list|,
name|boostDocs
argument_list|)
expr_stmt|;
name|this
operator|.
name|valueSource
operator|=
name|funcQuery
operator|.
name|getValueSource
argument_list|()
expr_stmt|;
name|this
operator|.
name|rcontext
operator|=
name|ValueSource
operator|.
name|newContext
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
name|this
operator|.
name|ords
operator|=
name|ords
expr_stmt|;
name|this
operator|.
name|ordVals
operator|=
operator|new
name|float
index|[
name|ords
operator|.
name|length
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|ords
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|max
condition|)
block|{
name|comp
operator|=
operator|new
name|MaxFloatComp
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|ordVals
argument_list|,
operator|-
name|Float
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|nullVal
operator|=
name|Float
operator|.
name|MAX_VALUE
expr_stmt|;
name|comp
operator|=
operator|new
name|MinFloatComp
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|ordVals
argument_list|,
name|Float
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcStr
operator|.
name|indexOf
argument_list|(
literal|"cscore()"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|cscore
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|rcontext
operator|.
name|put
argument_list|(
literal|"CSCORE"
argument_list|,
name|this
operator|.
name|collapseScore
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|needsScores
condition|)
block|{
name|this
operator|.
name|scores
operator|=
operator|new
name|float
index|[
name|ords
operator|.
name|length
index|]
expr_stmt|;
if|if
condition|(
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|nullScores
operator|=
operator|new
name|FloatArrayList
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|functionValues
operator|=
name|this
operator|.
name|valueSource
operator|.
name|getValues
argument_list|(
name|rcontext
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|collapse
specifier|public
name|void
name|collapse
parameter_list|(
name|int
name|ord
parameter_list|,
name|int
name|contextDoc
parameter_list|,
name|int
name|globalDoc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|needsScores
operator|||
name|cscore
condition|)
block|{
name|this
operator|.
name|score
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
name|this
operator|.
name|collapseScore
operator|.
name|score
operator|=
name|score
expr_stmt|;
block|}
name|float
name|val
init|=
name|functionValues
operator|.
name|floatVal
argument_list|(
name|contextDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|>
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|comp
operator|.
name|test
argument_list|(
name|val
argument_list|,
name|ordVals
index|[
name|ord
index|]
argument_list|)
condition|)
block|{
name|ords
index|[
name|ord
index|]
operator|=
name|globalDoc
expr_stmt|;
name|ordVals
index|[
name|ord
index|]
operator|=
name|val
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|scores
index|[
name|ord
index|]
operator|=
name|score
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|collapsedSet
operator|.
name|get
argument_list|(
name|globalDoc
argument_list|)
condition|)
block|{
comment|//Elevated doc so do nothing
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_COLLAPSE
condition|)
block|{
if|if
condition|(
name|comp
operator|.
name|test
argument_list|(
name|val
argument_list|,
name|nullVal
argument_list|)
condition|)
block|{
name|nullVal
operator|=
name|val
expr_stmt|;
name|nullDoc
operator|=
name|globalDoc
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|nullScore
operator|=
name|score
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|nullPolicy
operator|==
name|CollapsingPostFilter
operator|.
name|NULL_POLICY_EXPAND
condition|)
block|{
name|this
operator|.
name|collapsedSet
operator|.
name|set
argument_list|(
name|globalDoc
argument_list|)
expr_stmt|;
if|if
condition|(
name|needsScores
condition|)
block|{
name|nullScores
operator|.
name|add
argument_list|(
name|score
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|CollapseScore
specifier|public
specifier|static
specifier|final
class|class
name|CollapseScore
block|{
DECL|field|score
specifier|public
name|float
name|score
decl_stmt|;
block|}
DECL|interface|IntCompare
specifier|private
interface|interface
name|IntCompare
block|{
DECL|method|test
specifier|public
name|boolean
name|test
parameter_list|(
name|int
name|i1
parameter_list|,
name|int
name|i2
parameter_list|)
function_decl|;
block|}
DECL|interface|FloatCompare
specifier|private
interface|interface
name|FloatCompare
block|{
DECL|method|test
specifier|public
name|boolean
name|test
parameter_list|(
name|float
name|i1
parameter_list|,
name|float
name|i2
parameter_list|)
function_decl|;
block|}
DECL|interface|LongCompare
specifier|private
interface|interface
name|LongCompare
block|{
DECL|method|test
specifier|public
name|boolean
name|test
parameter_list|(
name|long
name|i1
parameter_list|,
name|long
name|i2
parameter_list|)
function_decl|;
block|}
DECL|class|MaxIntComp
specifier|private
class|class
name|MaxIntComp
implements|implements
name|IntCompare
block|{
DECL|method|test
specifier|public
name|boolean
name|test
parameter_list|(
name|int
name|i1
parameter_list|,
name|int
name|i2
parameter_list|)
block|{
return|return
name|i1
operator|>
name|i2
return|;
block|}
block|}
DECL|class|MinIntComp
specifier|private
class|class
name|MinIntComp
implements|implements
name|IntCompare
block|{
DECL|method|test
specifier|public
name|boolean
name|test
parameter_list|(
name|int
name|i1
parameter_list|,
name|int
name|i2
parameter_list|)
block|{
return|return
name|i1
operator|<
name|i2
return|;
block|}
block|}
DECL|class|MaxFloatComp
specifier|private
class|class
name|MaxFloatComp
implements|implements
name|FloatCompare
block|{
DECL|method|test
specifier|public
name|boolean
name|test
parameter_list|(
name|float
name|i1
parameter_list|,
name|float
name|i2
parameter_list|)
block|{
return|return
name|i1
operator|>
name|i2
return|;
block|}
block|}
DECL|class|MinFloatComp
specifier|private
class|class
name|MinFloatComp
implements|implements
name|FloatCompare
block|{
DECL|method|test
specifier|public
name|boolean
name|test
parameter_list|(
name|float
name|i1
parameter_list|,
name|float
name|i2
parameter_list|)
block|{
return|return
name|i1
operator|<
name|i2
return|;
block|}
block|}
DECL|class|MaxLongComp
specifier|private
class|class
name|MaxLongComp
implements|implements
name|LongCompare
block|{
DECL|method|test
specifier|public
name|boolean
name|test
parameter_list|(
name|long
name|i1
parameter_list|,
name|long
name|i2
parameter_list|)
block|{
return|return
name|i1
operator|>
name|i2
return|;
block|}
block|}
DECL|class|MinLongComp
specifier|private
class|class
name|MinLongComp
implements|implements
name|LongCompare
block|{
DECL|method|test
specifier|public
name|boolean
name|test
parameter_list|(
name|long
name|i1
parameter_list|,
name|long
name|i2
parameter_list|)
block|{
return|return
name|i1
operator|<
name|i2
return|;
block|}
block|}
block|}
end_class
end_unit
