begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * The result of a search.  */
end_comment
begin_class
DECL|class|QueryResult
specifier|public
class|class
name|QueryResult
block|{
DECL|field|partialResults
specifier|private
name|boolean
name|partialResults
decl_stmt|;
DECL|field|docListAndSet
specifier|private
name|DocListAndSet
name|docListAndSet
decl_stmt|;
DECL|field|nextCursorMark
specifier|private
name|CursorMark
name|nextCursorMark
decl_stmt|;
DECL|field|groupedResults
specifier|public
name|Object
name|groupedResults
decl_stmt|;
comment|// TODO: currently for testing
DECL|method|getDocList
specifier|public
name|DocList
name|getDocList
parameter_list|()
block|{
return|return
name|docListAndSet
operator|.
name|docList
return|;
block|}
DECL|method|setDocList
specifier|public
name|void
name|setDocList
parameter_list|(
name|DocList
name|list
parameter_list|)
block|{
if|if
condition|(
name|docListAndSet
operator|==
literal|null
condition|)
block|{
name|docListAndSet
operator|=
operator|new
name|DocListAndSet
argument_list|()
expr_stmt|;
block|}
name|docListAndSet
operator|.
name|docList
operator|=
name|list
expr_stmt|;
block|}
DECL|method|getDocSet
specifier|public
name|DocSet
name|getDocSet
parameter_list|()
block|{
return|return
name|docListAndSet
operator|.
name|docSet
return|;
block|}
DECL|method|setDocSet
specifier|public
name|void
name|setDocSet
parameter_list|(
name|DocSet
name|set
parameter_list|)
block|{
if|if
condition|(
name|docListAndSet
operator|==
literal|null
condition|)
block|{
name|docListAndSet
operator|=
operator|new
name|DocListAndSet
argument_list|()
expr_stmt|;
block|}
name|docListAndSet
operator|.
name|docSet
operator|=
name|set
expr_stmt|;
block|}
DECL|method|isPartialResults
specifier|public
name|boolean
name|isPartialResults
parameter_list|()
block|{
return|return
name|partialResults
return|;
block|}
DECL|method|setPartialResults
specifier|public
name|void
name|setPartialResults
parameter_list|(
name|boolean
name|partialResults
parameter_list|)
block|{
name|this
operator|.
name|partialResults
operator|=
name|partialResults
expr_stmt|;
block|}
DECL|method|setDocListAndSet
specifier|public
name|void
name|setDocListAndSet
parameter_list|(
name|DocListAndSet
name|listSet
parameter_list|)
block|{
name|docListAndSet
operator|=
name|listSet
expr_stmt|;
block|}
DECL|method|getDocListAndSet
specifier|public
name|DocListAndSet
name|getDocListAndSet
parameter_list|()
block|{
return|return
name|docListAndSet
return|;
block|}
DECL|method|setNextCursorMark
specifier|public
name|void
name|setNextCursorMark
parameter_list|(
name|CursorMark
name|next
parameter_list|)
block|{
name|this
operator|.
name|nextCursorMark
operator|=
name|next
expr_stmt|;
block|}
DECL|method|getNextCursorMark
specifier|public
name|CursorMark
name|getNextCursorMark
parameter_list|()
block|{
return|return
name|nextCursorMark
return|;
block|}
block|}
end_class
end_unit
