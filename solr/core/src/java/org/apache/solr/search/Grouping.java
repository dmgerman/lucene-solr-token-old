begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|ExitableDirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|StorableField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|FunctionQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|valuesource
operator|.
name|QueryValueSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|CachingCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Collector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TimeLimitingCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocsCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopFieldCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopScoreDocCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TotalHitCountCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|AbstractAllGroupHeadsCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|GroupDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|SearchGroup
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|TopGroups
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|function
operator|.
name|FunctionAllGroupHeadsCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|function
operator|.
name|FunctionAllGroupsCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|function
operator|.
name|FunctionFirstPassGroupingCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|function
operator|.
name|FunctionSecondPassGroupingCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|term
operator|.
name|TermAllGroupHeadsCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|term
operator|.
name|TermAllGroupsCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|term
operator|.
name|TermFirstPassGroupingCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|term
operator|.
name|TermSecondPassGroupingCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|mutable
operator|.
name|MutableValue
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|StrFieldSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|grouping
operator|.
name|collector
operator|.
name|FilterCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * Basic Solr Grouping infrastructure.  * Warning NOT thread save!  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|Grouping
specifier|public
class|class
name|Grouping
block|{
DECL|field|logger
specifier|private
specifier|final
specifier|static
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Grouping
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|searcher
specifier|private
specifier|final
name|SolrIndexSearcher
name|searcher
decl_stmt|;
DECL|field|qr
specifier|private
specifier|final
name|SolrIndexSearcher
operator|.
name|QueryResult
name|qr
decl_stmt|;
DECL|field|cmd
specifier|private
specifier|final
name|SolrIndexSearcher
operator|.
name|QueryCommand
name|cmd
decl_stmt|;
DECL|field|commands
specifier|private
specifier|final
name|List
argument_list|<
name|Command
argument_list|>
name|commands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|main
specifier|private
specifier|final
name|boolean
name|main
decl_stmt|;
DECL|field|cacheSecondPassSearch
specifier|private
specifier|final
name|boolean
name|cacheSecondPassSearch
decl_stmt|;
DECL|field|maxDocsPercentageToCache
specifier|private
specifier|final
name|int
name|maxDocsPercentageToCache
decl_stmt|;
DECL|field|groupSort
specifier|private
name|Sort
name|groupSort
decl_stmt|;
DECL|field|withinGroupSort
specifier|private
name|Sort
name|withinGroupSort
decl_stmt|;
DECL|field|limitDefault
specifier|private
name|int
name|limitDefault
decl_stmt|;
DECL|field|docsPerGroupDefault
specifier|private
name|int
name|docsPerGroupDefault
decl_stmt|;
DECL|field|groupOffsetDefault
specifier|private
name|int
name|groupOffsetDefault
decl_stmt|;
DECL|field|defaultFormat
specifier|private
name|Format
name|defaultFormat
decl_stmt|;
DECL|field|defaultTotalCount
specifier|private
name|TotalCount
name|defaultTotalCount
decl_stmt|;
DECL|field|maxDoc
specifier|private
name|int
name|maxDoc
decl_stmt|;
DECL|field|needScores
specifier|private
name|boolean
name|needScores
decl_stmt|;
DECL|field|getDocSet
specifier|private
name|boolean
name|getDocSet
decl_stmt|;
DECL|field|getGroupedDocSet
specifier|private
name|boolean
name|getGroupedDocSet
decl_stmt|;
DECL|field|getDocList
specifier|private
name|boolean
name|getDocList
decl_stmt|;
comment|// doclist needed for debugging or highlighting
DECL|field|query
specifier|private
name|Query
name|query
decl_stmt|;
DECL|field|filter
specifier|private
name|DocSet
name|filter
decl_stmt|;
DECL|field|luceneFilter
specifier|private
name|Filter
name|luceneFilter
decl_stmt|;
DECL|field|grouped
specifier|private
name|NamedList
name|grouped
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
DECL|field|idSet
specifier|private
name|Set
argument_list|<
name|Integer
argument_list|>
name|idSet
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// used for tracking unique docs when we need a doclist
DECL|field|maxMatches
specifier|private
name|int
name|maxMatches
decl_stmt|;
comment|// max number of matches from any grouping command
DECL|field|maxScore
specifier|private
name|float
name|maxScore
init|=
name|Float
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
comment|// max score seen in any doclist
DECL|field|signalCacheWarning
specifier|private
name|boolean
name|signalCacheWarning
init|=
literal|false
decl_stmt|;
DECL|field|timeLimitingCollector
specifier|private
name|TimeLimitingCollector
name|timeLimitingCollector
decl_stmt|;
DECL|field|mainResult
specifier|public
name|DocList
name|mainResult
decl_stmt|;
comment|// output if one of the grouping commands should be used as the main result.
comment|/**    * @param cacheSecondPassSearch    Whether to cache the documents and scores from the first pass search for the second    *                                 pass search.    * @param maxDocsPercentageToCache The maximum number of documents in a percentage relative from maxdoc    *                                 that is allowed in the cache. When this threshold is met,    *                                 the cache is not used in the second pass search.    */
DECL|method|Grouping
specifier|public
name|Grouping
parameter_list|(
name|SolrIndexSearcher
name|searcher
parameter_list|,
name|SolrIndexSearcher
operator|.
name|QueryResult
name|qr
parameter_list|,
name|SolrIndexSearcher
operator|.
name|QueryCommand
name|cmd
parameter_list|,
name|boolean
name|cacheSecondPassSearch
parameter_list|,
name|int
name|maxDocsPercentageToCache
parameter_list|,
name|boolean
name|main
parameter_list|)
block|{
name|this
operator|.
name|searcher
operator|=
name|searcher
expr_stmt|;
name|this
operator|.
name|qr
operator|=
name|qr
expr_stmt|;
name|this
operator|.
name|cmd
operator|=
name|cmd
expr_stmt|;
name|this
operator|.
name|cacheSecondPassSearch
operator|=
name|cacheSecondPassSearch
expr_stmt|;
name|this
operator|.
name|maxDocsPercentageToCache
operator|=
name|maxDocsPercentageToCache
expr_stmt|;
name|this
operator|.
name|main
operator|=
name|main
expr_stmt|;
block|}
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|Grouping
operator|.
name|Command
name|groupingCommand
parameter_list|)
block|{
name|commands
operator|.
name|add
argument_list|(
name|groupingCommand
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds a field command based on the specified field.    * If the field is not compatible with {@link CommandField} it invokes the    * {@link #addFunctionCommand(String, org.apache.solr.request.SolrQueryRequest)} method.    *    * @param field The fieldname to group by.    */
DECL|method|addFieldCommand
specifier|public
name|void
name|addFieldCommand
parameter_list|(
name|String
name|field
parameter_list|,
name|SolrQueryRequest
name|request
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|SchemaField
name|schemaField
init|=
name|searcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
comment|// Throws an exception when field doesn't exist. Bad request.
name|FieldType
name|fieldType
init|=
name|schemaField
operator|.
name|getType
argument_list|()
decl_stmt|;
name|ValueSource
name|valueSource
init|=
name|fieldType
operator|.
name|getValueSource
argument_list|(
name|schemaField
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|valueSource
operator|instanceof
name|StrFieldSource
operator|)
condition|)
block|{
name|addFunctionCommand
argument_list|(
name|field
argument_list|,
name|request
argument_list|)
expr_stmt|;
return|return;
block|}
name|Grouping
operator|.
name|CommandField
name|gc
init|=
operator|new
name|CommandField
argument_list|()
decl_stmt|;
name|gc
operator|.
name|withinGroupSort
operator|=
name|withinGroupSort
expr_stmt|;
name|gc
operator|.
name|groupBy
operator|=
name|field
expr_stmt|;
name|gc
operator|.
name|key
operator|=
name|field
expr_stmt|;
name|gc
operator|.
name|numGroups
operator|=
name|limitDefault
expr_stmt|;
name|gc
operator|.
name|docsPerGroup
operator|=
name|docsPerGroupDefault
expr_stmt|;
name|gc
operator|.
name|groupOffset
operator|=
name|groupOffsetDefault
expr_stmt|;
name|gc
operator|.
name|offset
operator|=
name|cmd
operator|.
name|getOffset
argument_list|()
expr_stmt|;
name|gc
operator|.
name|groupSort
operator|=
name|groupSort
expr_stmt|;
name|gc
operator|.
name|format
operator|=
name|defaultFormat
expr_stmt|;
name|gc
operator|.
name|totalCount
operator|=
name|defaultTotalCount
expr_stmt|;
if|if
condition|(
name|main
condition|)
block|{
name|gc
operator|.
name|main
operator|=
literal|true
expr_stmt|;
name|gc
operator|.
name|format
operator|=
name|Grouping
operator|.
name|Format
operator|.
name|simple
expr_stmt|;
block|}
if|if
condition|(
name|gc
operator|.
name|format
operator|==
name|Grouping
operator|.
name|Format
operator|.
name|simple
condition|)
block|{
name|gc
operator|.
name|groupOffset
operator|=
literal|0
expr_stmt|;
comment|// doesn't make sense
block|}
name|commands
operator|.
name|add
argument_list|(
name|gc
argument_list|)
expr_stmt|;
block|}
DECL|method|addFunctionCommand
specifier|public
name|void
name|addFunctionCommand
parameter_list|(
name|String
name|groupByStr
parameter_list|,
name|SolrQueryRequest
name|request
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|QParser
name|parser
init|=
name|QParser
operator|.
name|getParser
argument_list|(
name|groupByStr
argument_list|,
literal|"func"
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|Query
name|q
init|=
name|parser
operator|.
name|getQuery
argument_list|()
decl_stmt|;
specifier|final
name|Grouping
operator|.
name|Command
name|gc
decl_stmt|;
if|if
condition|(
name|q
operator|instanceof
name|FunctionQuery
condition|)
block|{
name|ValueSource
name|valueSource
init|=
operator|(
operator|(
name|FunctionQuery
operator|)
name|q
operator|)
operator|.
name|getValueSource
argument_list|()
decl_stmt|;
if|if
condition|(
name|valueSource
operator|instanceof
name|StrFieldSource
condition|)
block|{
name|String
name|field
init|=
operator|(
operator|(
name|StrFieldSource
operator|)
name|valueSource
operator|)
operator|.
name|getField
argument_list|()
decl_stmt|;
name|CommandField
name|commandField
init|=
operator|new
name|CommandField
argument_list|()
decl_stmt|;
name|commandField
operator|.
name|groupBy
operator|=
name|field
expr_stmt|;
name|gc
operator|=
name|commandField
expr_stmt|;
block|}
else|else
block|{
name|CommandFunc
name|commandFunc
init|=
operator|new
name|CommandFunc
argument_list|()
decl_stmt|;
name|commandFunc
operator|.
name|groupBy
operator|=
name|valueSource
expr_stmt|;
name|gc
operator|=
name|commandFunc
expr_stmt|;
block|}
block|}
else|else
block|{
name|CommandFunc
name|commandFunc
init|=
operator|new
name|CommandFunc
argument_list|()
decl_stmt|;
name|commandFunc
operator|.
name|groupBy
operator|=
operator|new
name|QueryValueSource
argument_list|(
name|q
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|gc
operator|=
name|commandFunc
expr_stmt|;
block|}
name|gc
operator|.
name|withinGroupSort
operator|=
name|withinGroupSort
expr_stmt|;
name|gc
operator|.
name|key
operator|=
name|groupByStr
expr_stmt|;
name|gc
operator|.
name|numGroups
operator|=
name|limitDefault
expr_stmt|;
name|gc
operator|.
name|docsPerGroup
operator|=
name|docsPerGroupDefault
expr_stmt|;
name|gc
operator|.
name|groupOffset
operator|=
name|groupOffsetDefault
expr_stmt|;
name|gc
operator|.
name|offset
operator|=
name|cmd
operator|.
name|getOffset
argument_list|()
expr_stmt|;
name|gc
operator|.
name|groupSort
operator|=
name|groupSort
expr_stmt|;
name|gc
operator|.
name|format
operator|=
name|defaultFormat
expr_stmt|;
name|gc
operator|.
name|totalCount
operator|=
name|defaultTotalCount
expr_stmt|;
if|if
condition|(
name|main
condition|)
block|{
name|gc
operator|.
name|main
operator|=
literal|true
expr_stmt|;
name|gc
operator|.
name|format
operator|=
name|Grouping
operator|.
name|Format
operator|.
name|simple
expr_stmt|;
block|}
if|if
condition|(
name|gc
operator|.
name|format
operator|==
name|Grouping
operator|.
name|Format
operator|.
name|simple
condition|)
block|{
name|gc
operator|.
name|groupOffset
operator|=
literal|0
expr_stmt|;
comment|// doesn't make sense
block|}
name|commands
operator|.
name|add
argument_list|(
name|gc
argument_list|)
expr_stmt|;
block|}
DECL|method|addQueryCommand
specifier|public
name|void
name|addQueryCommand
parameter_list|(
name|String
name|groupByStr
parameter_list|,
name|SolrQueryRequest
name|request
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|QParser
name|parser
init|=
name|QParser
operator|.
name|getParser
argument_list|(
name|groupByStr
argument_list|,
literal|null
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|Query
name|gq
init|=
name|parser
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|Grouping
operator|.
name|CommandQuery
name|gc
init|=
operator|new
name|CommandQuery
argument_list|()
decl_stmt|;
name|gc
operator|.
name|query
operator|=
name|gq
expr_stmt|;
name|gc
operator|.
name|withinGroupSort
operator|=
name|withinGroupSort
expr_stmt|;
name|gc
operator|.
name|key
operator|=
name|groupByStr
expr_stmt|;
name|gc
operator|.
name|numGroups
operator|=
name|limitDefault
expr_stmt|;
name|gc
operator|.
name|docsPerGroup
operator|=
name|docsPerGroupDefault
expr_stmt|;
name|gc
operator|.
name|groupOffset
operator|=
name|groupOffsetDefault
expr_stmt|;
comment|// these two params will only be used if this is for the main result set
name|gc
operator|.
name|offset
operator|=
name|cmd
operator|.
name|getOffset
argument_list|()
expr_stmt|;
name|gc
operator|.
name|numGroups
operator|=
name|limitDefault
expr_stmt|;
name|gc
operator|.
name|format
operator|=
name|defaultFormat
expr_stmt|;
if|if
condition|(
name|main
condition|)
block|{
name|gc
operator|.
name|main
operator|=
literal|true
expr_stmt|;
name|gc
operator|.
name|format
operator|=
name|Grouping
operator|.
name|Format
operator|.
name|simple
expr_stmt|;
block|}
if|if
condition|(
name|gc
operator|.
name|format
operator|==
name|Grouping
operator|.
name|Format
operator|.
name|simple
condition|)
block|{
name|gc
operator|.
name|docsPerGroup
operator|=
name|gc
operator|.
name|numGroups
expr_stmt|;
comment|// doesn't make sense to limit to one
name|gc
operator|.
name|groupOffset
operator|=
name|gc
operator|.
name|offset
expr_stmt|;
block|}
name|commands
operator|.
name|add
argument_list|(
name|gc
argument_list|)
expr_stmt|;
block|}
DECL|method|setGroupSort
specifier|public
name|Grouping
name|setGroupSort
parameter_list|(
name|Sort
name|groupSort
parameter_list|)
block|{
name|this
operator|.
name|groupSort
operator|=
name|groupSort
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setWithinGroupSort
specifier|public
name|Grouping
name|setWithinGroupSort
parameter_list|(
name|Sort
name|withinGroupSort
parameter_list|)
block|{
name|this
operator|.
name|withinGroupSort
operator|=
name|withinGroupSort
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setLimitDefault
specifier|public
name|Grouping
name|setLimitDefault
parameter_list|(
name|int
name|limitDefault
parameter_list|)
block|{
name|this
operator|.
name|limitDefault
operator|=
name|limitDefault
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setDocsPerGroupDefault
specifier|public
name|Grouping
name|setDocsPerGroupDefault
parameter_list|(
name|int
name|docsPerGroupDefault
parameter_list|)
block|{
name|this
operator|.
name|docsPerGroupDefault
operator|=
name|docsPerGroupDefault
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setGroupOffsetDefault
specifier|public
name|Grouping
name|setGroupOffsetDefault
parameter_list|(
name|int
name|groupOffsetDefault
parameter_list|)
block|{
name|this
operator|.
name|groupOffsetDefault
operator|=
name|groupOffsetDefault
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setDefaultFormat
specifier|public
name|Grouping
name|setDefaultFormat
parameter_list|(
name|Format
name|defaultFormat
parameter_list|)
block|{
name|this
operator|.
name|defaultFormat
operator|=
name|defaultFormat
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setDefaultTotalCount
specifier|public
name|Grouping
name|setDefaultTotalCount
parameter_list|(
name|TotalCount
name|defaultTotalCount
parameter_list|)
block|{
name|this
operator|.
name|defaultTotalCount
operator|=
name|defaultTotalCount
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setGetGroupedDocSet
specifier|public
name|Grouping
name|setGetGroupedDocSet
parameter_list|(
name|boolean
name|getGroupedDocSet
parameter_list|)
block|{
name|this
operator|.
name|getGroupedDocSet
operator|=
name|getGroupedDocSet
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getCommands
specifier|public
name|List
argument_list|<
name|Command
argument_list|>
name|getCommands
parameter_list|()
block|{
return|return
name|commands
return|;
block|}
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|commands
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Specify at least one field, function or query to group by."
argument_list|)
throw|;
block|}
name|DocListAndSet
name|out
init|=
operator|new
name|DocListAndSet
argument_list|()
decl_stmt|;
name|qr
operator|.
name|setDocListAndSet
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|SolrIndexSearcher
operator|.
name|ProcessedFilter
name|pf
init|=
name|searcher
operator|.
name|getProcessedFilter
argument_list|(
name|cmd
operator|.
name|getFilter
argument_list|()
argument_list|,
name|cmd
operator|.
name|getFilterList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Filter
name|luceneFilter
init|=
name|pf
operator|.
name|filter
decl_stmt|;
name|maxDoc
operator|=
name|searcher
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
name|needScores
operator|=
operator|(
name|cmd
operator|.
name|getFlags
argument_list|()
operator|&
name|SolrIndexSearcher
operator|.
name|GET_SCORES
operator|)
operator|!=
literal|0
expr_stmt|;
name|boolean
name|cacheScores
init|=
literal|false
decl_stmt|;
comment|// NOTE: Change this when withinGroupSort can be specified per group
if|if
condition|(
operator|!
name|needScores
operator|&&
operator|!
name|commands
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|commands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|withinGroupSort
operator|==
literal|null
condition|)
block|{
name|cacheScores
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|SortField
name|field
range|:
name|commands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|withinGroupSort
operator|.
name|getSort
argument_list|()
control|)
block|{
if|if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|==
name|SortField
operator|.
name|Type
operator|.
name|SCORE
condition|)
block|{
name|cacheScores
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|needScores
condition|)
block|{
name|cacheScores
operator|=
name|needScores
expr_stmt|;
block|}
name|getDocSet
operator|=
operator|(
name|cmd
operator|.
name|getFlags
argument_list|()
operator|&
name|SolrIndexSearcher
operator|.
name|GET_DOCSET
operator|)
operator|!=
literal|0
expr_stmt|;
name|getDocList
operator|=
operator|(
name|cmd
operator|.
name|getFlags
argument_list|()
operator|&
name|SolrIndexSearcher
operator|.
name|GET_DOCLIST
operator|)
operator|!=
literal|0
expr_stmt|;
name|query
operator|=
name|QueryUtils
operator|.
name|makeQueryable
argument_list|(
name|cmd
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Command
name|cmd
range|:
name|commands
control|)
block|{
name|cmd
operator|.
name|prepare
argument_list|()
expr_stmt|;
block|}
name|AbstractAllGroupHeadsCollector
argument_list|<
name|?
argument_list|>
name|allGroupHeadsCollector
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Collector
argument_list|>
name|collectors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|commands
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Command
name|cmd
range|:
name|commands
control|)
block|{
name|Collector
name|collector
init|=
name|cmd
operator|.
name|createFirstPassCollector
argument_list|()
decl_stmt|;
if|if
condition|(
name|collector
operator|!=
literal|null
condition|)
block|{
name|collectors
operator|.
name|add
argument_list|(
name|collector
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getGroupedDocSet
operator|&&
name|allGroupHeadsCollector
operator|==
literal|null
condition|)
block|{
name|collectors
operator|.
name|add
argument_list|(
name|allGroupHeadsCollector
operator|=
name|cmd
operator|.
name|createAllGroupCollector
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|DocSetCollector
name|setCollector
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getDocSet
operator|&&
name|allGroupHeadsCollector
operator|==
literal|null
condition|)
block|{
name|setCollector
operator|=
operator|new
name|DocSetCollector
argument_list|(
name|maxDoc
argument_list|)
expr_stmt|;
name|collectors
operator|.
name|add
argument_list|(
name|setCollector
argument_list|)
expr_stmt|;
block|}
name|Collector
name|allCollectors
init|=
name|MultiCollector
operator|.
name|wrap
argument_list|(
name|collectors
argument_list|)
decl_stmt|;
name|CachingCollector
name|cachedCollector
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cacheSecondPassSearch
operator|&&
name|allCollectors
operator|!=
literal|null
condition|)
block|{
name|int
name|maxDocsToCache
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|maxDoc
operator|*
operator|(
name|maxDocsPercentageToCache
operator|/
literal|100.0d
operator|)
argument_list|)
decl_stmt|;
comment|// Only makes sense to cache if we cache more than zero.
comment|// Maybe we should have a minimum and a maximum, that defines the window we would like caching for.
if|if
condition|(
name|maxDocsToCache
operator|>
literal|0
condition|)
block|{
name|allCollectors
operator|=
name|cachedCollector
operator|=
name|CachingCollector
operator|.
name|create
argument_list|(
name|allCollectors
argument_list|,
name|cacheScores
argument_list|,
name|maxDocsToCache
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pf
operator|.
name|postFilter
operator|!=
literal|null
condition|)
block|{
name|pf
operator|.
name|postFilter
operator|.
name|setLastDelegate
argument_list|(
name|allCollectors
argument_list|)
expr_stmt|;
name|allCollectors
operator|=
name|pf
operator|.
name|postFilter
expr_stmt|;
block|}
if|if
condition|(
name|allCollectors
operator|!=
literal|null
condition|)
block|{
name|searchWithTimeLimiter
argument_list|(
name|luceneFilter
argument_list|,
name|allCollectors
argument_list|)
expr_stmt|;
if|if
condition|(
name|allCollectors
operator|instanceof
name|DelegatingCollector
condition|)
block|{
operator|(
operator|(
name|DelegatingCollector
operator|)
name|allCollectors
operator|)
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|getGroupedDocSet
operator|&&
name|allGroupHeadsCollector
operator|!=
literal|null
condition|)
block|{
name|qr
operator|.
name|setDocSet
argument_list|(
operator|new
name|BitDocSet
argument_list|(
name|allGroupHeadsCollector
operator|.
name|retrieveGroupHeads
argument_list|(
name|maxDoc
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getDocSet
condition|)
block|{
name|qr
operator|.
name|setDocSet
argument_list|(
name|setCollector
operator|.
name|getDocSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|collectors
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Command
name|cmd
range|:
name|commands
control|)
block|{
name|Collector
name|collector
init|=
name|cmd
operator|.
name|createSecondPassCollector
argument_list|()
decl_stmt|;
if|if
condition|(
name|collector
operator|!=
literal|null
condition|)
name|collectors
operator|.
name|add
argument_list|(
name|collector
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|collectors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Collector
name|secondPhaseCollectors
init|=
name|MultiCollector
operator|.
name|wrap
argument_list|(
name|collectors
operator|.
name|toArray
argument_list|(
operator|new
name|Collector
index|[
name|collectors
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|collectors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|cachedCollector
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cachedCollector
operator|.
name|isCached
argument_list|()
condition|)
block|{
name|cachedCollector
operator|.
name|replay
argument_list|(
name|secondPhaseCollectors
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|signalCacheWarning
operator|=
literal|true
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"The grouping cache is active, but not used because it exceeded the max cache limit of %d percent"
argument_list|,
name|maxDocsPercentageToCache
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"Please increase cache size or disable group caching."
argument_list|)
expr_stmt|;
name|searchWithTimeLimiter
argument_list|(
name|luceneFilter
argument_list|,
name|secondPhaseCollectors
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|pf
operator|.
name|postFilter
operator|!=
literal|null
condition|)
block|{
name|pf
operator|.
name|postFilter
operator|.
name|setLastDelegate
argument_list|(
name|secondPhaseCollectors
argument_list|)
expr_stmt|;
name|secondPhaseCollectors
operator|=
name|pf
operator|.
name|postFilter
expr_stmt|;
block|}
name|searchWithTimeLimiter
argument_list|(
name|luceneFilter
argument_list|,
name|secondPhaseCollectors
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|secondPhaseCollectors
operator|instanceof
name|DelegatingCollector
condition|)
block|{
operator|(
operator|(
name|DelegatingCollector
operator|)
name|secondPhaseCollectors
operator|)
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Command
name|cmd
range|:
name|commands
control|)
block|{
name|cmd
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
name|qr
operator|.
name|groupedResults
operator|=
name|grouped
expr_stmt|;
if|if
condition|(
name|getDocList
condition|)
block|{
name|int
name|sz
init|=
name|idSet
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
index|[]
name|ids
init|=
operator|new
name|int
index|[
name|sz
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|val
range|:
name|idSet
control|)
block|{
name|ids
index|[
name|idx
operator|++
index|]
operator|=
name|val
expr_stmt|;
block|}
name|qr
operator|.
name|setDocList
argument_list|(
operator|new
name|DocSlice
argument_list|(
literal|0
argument_list|,
name|sz
argument_list|,
name|ids
argument_list|,
literal|null
argument_list|,
name|maxMatches
argument_list|,
name|maxScore
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Invokes search with the specified filter and collector.      * If a time limit has been specified, wrap the collector in a TimeLimitingCollector    */
DECL|method|searchWithTimeLimiter
specifier|private
name|void
name|searchWithTimeLimiter
parameter_list|(
specifier|final
name|Filter
name|luceneFilter
parameter_list|,
name|Collector
name|collector
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cmd
operator|.
name|getTimeAllowed
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|timeLimitingCollector
operator|==
literal|null
condition|)
block|{
name|timeLimitingCollector
operator|=
operator|new
name|TimeLimitingCollector
argument_list|(
name|collector
argument_list|,
name|TimeLimitingCollector
operator|.
name|getGlobalCounter
argument_list|()
argument_list|,
name|cmd
operator|.
name|getTimeAllowed
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/*          * This is so the same timer can be used for grouping's multiple phases.             * We don't want to create a new TimeLimitingCollector for each phase because that would           * reset the timer for each phase.  If time runs out during the first phase, the           * second phase should timeout quickly.          */
name|timeLimitingCollector
operator|.
name|setCollector
argument_list|(
name|collector
argument_list|)
expr_stmt|;
block|}
name|collector
operator|=
name|timeLimitingCollector
expr_stmt|;
block|}
try|try
block|{
name|Query
name|q
init|=
name|query
decl_stmt|;
if|if
condition|(
name|luceneFilter
operator|!=
literal|null
condition|)
block|{
name|q
operator|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
name|q
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
operator|.
name|add
argument_list|(
name|luceneFilter
argument_list|,
name|Occur
operator|.
name|FILTER
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
name|collector
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeLimitingCollector
operator|.
name|TimeExceededException
decl||
name|ExitableDirectoryReader
operator|.
name|ExitingReaderException
name|x
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Query: "
operator|+
name|query
operator|+
literal|"; "
operator|+
name|x
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|qr
operator|.
name|setPartialResults
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns offset + len if len equals zero or higher. Otherwise returns max.    *    * @param offset The offset    * @param len    The number of documents to return    * @param max    The number of document to return if len< 0 or if offset + len< 0    * @return offset + len if len equals zero or higher. Otherwise returns max    */
DECL|method|getMax
name|int
name|getMax
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|int
name|v
init|=
name|len
operator|<
literal|0
condition|?
name|max
else|:
name|offset
operator|+
name|len
decl_stmt|;
if|if
condition|(
name|v
argument_list|<
literal|0
operator|||
name|v
argument_list|>
name|max
condition|)
name|v
operator|=
name|max
expr_stmt|;
return|return
name|v
return|;
block|}
comment|/**    * Returns whether a cache warning should be send to the client.    * The value<code>true</code> is returned when the cache is emptied because the caching limits where met, otherwise    *<code>false</code> is returned.    *    * @return whether a cache warning should be send to the client    */
DECL|method|isSignalCacheWarning
specifier|public
name|boolean
name|isSignalCacheWarning
parameter_list|()
block|{
return|return
name|signalCacheWarning
return|;
block|}
comment|//======================================   Inner classes =============================================================
DECL|enum|Format
specifier|public
specifier|static
enum|enum
name|Format
block|{
comment|/**      * Grouped result. Each group has its own result set.      */
DECL|enum constant|grouped
name|grouped
block|,
comment|/**      * Flat result. All documents of all groups are put in one list.      */
DECL|enum constant|simple
name|simple
block|}
DECL|enum|TotalCount
specifier|public
specifier|static
enum|enum
name|TotalCount
block|{
comment|/**      * Computations should be based on groups.      */
DECL|enum constant|grouped
name|grouped
block|,
comment|/**      * Computations should be based on plain documents, so not taking grouping into account.      */
DECL|enum constant|ungrouped
name|ungrouped
block|}
comment|/**    * General group command. A group command is responsible for creating the first and second pass collectors.    * A group command is also responsible for creating the response structure.    *<p>    * Note: Maybe the creating the response structure should be done in something like a ReponseBuilder???    * Warning NOT thread save!    */
DECL|class|Command
specifier|public
specifier|abstract
class|class
name|Command
parameter_list|<
name|GROUP_VALUE_TYPE
parameter_list|>
block|{
DECL|field|key
specifier|public
name|String
name|key
decl_stmt|;
comment|// the name to use for this group in the response
DECL|field|withinGroupSort
specifier|public
name|Sort
name|withinGroupSort
decl_stmt|;
comment|// the sort of the documents *within* a single group.
DECL|field|groupSort
specifier|public
name|Sort
name|groupSort
decl_stmt|;
comment|// the sort between groups
DECL|field|docsPerGroup
specifier|public
name|int
name|docsPerGroup
decl_stmt|;
comment|// how many docs in each group - from "group.limit" param, default=1
DECL|field|groupOffset
specifier|public
name|int
name|groupOffset
decl_stmt|;
comment|// the offset within each group (for paging within each group)
DECL|field|numGroups
specifier|public
name|int
name|numGroups
decl_stmt|;
comment|// how many groups - defaults to the "rows" parameter
DECL|field|actualGroupsToFind
name|int
name|actualGroupsToFind
decl_stmt|;
comment|// How many groups should actually be found. Based on groupOffset and numGroups.
DECL|field|offset
specifier|public
name|int
name|offset
decl_stmt|;
comment|// offset into the list of groups
DECL|field|format
specifier|public
name|Format
name|format
decl_stmt|;
DECL|field|main
specifier|public
name|boolean
name|main
decl_stmt|;
comment|// use as the main result in simple format (grouped.main=true param)
DECL|field|totalCount
specifier|public
name|TotalCount
name|totalCount
init|=
name|TotalCount
operator|.
name|ungrouped
decl_stmt|;
DECL|field|result
name|TopGroups
argument_list|<
name|GROUP_VALUE_TYPE
argument_list|>
name|result
decl_stmt|;
comment|/**      * Prepare this<code>Command</code> for execution.      *      * @throws IOException If I/O related errors occur      */
DECL|method|prepare
specifier|protected
specifier|abstract
name|void
name|prepare
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * Returns one or more {@link Collector} instances that are needed to perform the first pass search.      * If multiple Collectors are returned then these wrapped in a {@link org.apache.lucene.search.MultiCollector}.      *      * @return one or more {@link Collector} instances that are need to perform the first pass search      * @throws IOException If I/O related errors occur      */
DECL|method|createFirstPassCollector
specifier|protected
specifier|abstract
name|Collector
name|createFirstPassCollector
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * Returns zero or more {@link Collector} instances that are needed to perform the second pass search.      * In the case when no {@link Collector} instances are created<code>null</code> is returned.      * If multiple Collectors are returned then these wrapped in a {@link org.apache.lucene.search.MultiCollector}.      *      * @return zero or more {@link Collector} instances that are needed to perform the second pass search      * @throws IOException If I/O related errors occur      */
DECL|method|createSecondPassCollector
specifier|protected
name|Collector
name|createSecondPassCollector
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Returns a collector that is able to return the most relevant document of all groups.      * Returns<code>null</code> if the command doesn't support this type of collector.      *      * @return a collector that is able to return the most relevant document of all groups.      * @throws IOException If I/O related errors occur      */
DECL|method|createAllGroupCollector
specifier|public
name|AbstractAllGroupHeadsCollector
argument_list|<
name|?
argument_list|>
name|createAllGroupCollector
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Performs any necessary post actions to prepare the response.      *      * @throws IOException If I/O related errors occur      */
DECL|method|finish
specifier|protected
specifier|abstract
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * Returns the number of matches for this<code>Command</code>.      *      * @return the number of matches for this<code>Command</code>      */
DECL|method|getMatches
specifier|public
specifier|abstract
name|int
name|getMatches
parameter_list|()
function_decl|;
comment|/**      * Returns the number of groups found for this<code>Command</code>.      * If the command doesn't support counting the groups<code>null</code> is returned.      *      * @return the number of groups found for this<code>Command</code>      */
DECL|method|getNumberOfGroups
specifier|protected
name|Integer
name|getNumberOfGroups
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|commonResponse
specifier|protected
name|NamedList
name|commonResponse
parameter_list|()
block|{
name|NamedList
name|groupResult
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
name|grouped
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|groupResult
argument_list|)
expr_stmt|;
comment|// grouped={ key={
name|int
name|matches
init|=
name|getMatches
argument_list|()
decl_stmt|;
name|groupResult
operator|.
name|add
argument_list|(
literal|"matches"
argument_list|,
name|matches
argument_list|)
expr_stmt|;
if|if
condition|(
name|totalCount
operator|==
name|TotalCount
operator|.
name|grouped
condition|)
block|{
name|Integer
name|totalNrOfGroups
init|=
name|getNumberOfGroups
argument_list|()
decl_stmt|;
name|groupResult
operator|.
name|add
argument_list|(
literal|"ngroups"
argument_list|,
name|totalNrOfGroups
operator|==
literal|null
condition|?
literal|0
else|:
name|totalNrOfGroups
argument_list|)
expr_stmt|;
block|}
name|maxMatches
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxMatches
argument_list|,
name|matches
argument_list|)
expr_stmt|;
return|return
name|groupResult
return|;
block|}
DECL|method|getDocList
specifier|protected
name|DocList
name|getDocList
parameter_list|(
name|GroupDocs
name|groups
parameter_list|)
block|{
name|int
name|max
init|=
name|groups
operator|.
name|totalHits
decl_stmt|;
name|int
name|off
init|=
name|groupOffset
decl_stmt|;
name|int
name|len
init|=
name|docsPerGroup
decl_stmt|;
if|if
condition|(
name|format
operator|==
name|Format
operator|.
name|simple
condition|)
block|{
name|off
operator|=
name|offset
expr_stmt|;
name|len
operator|=
name|numGroups
expr_stmt|;
block|}
name|int
name|docsToCollect
init|=
name|getMax
argument_list|(
name|off
argument_list|,
name|len
argument_list|,
name|max
argument_list|)
decl_stmt|;
comment|// TODO: implement a DocList impl that doesn't need to start at offset=0
name|int
name|docsCollected
init|=
name|Math
operator|.
name|min
argument_list|(
name|docsToCollect
argument_list|,
name|groups
operator|.
name|scoreDocs
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|ids
index|[]
init|=
operator|new
name|int
index|[
name|docsCollected
index|]
decl_stmt|;
name|float
index|[]
name|scores
init|=
name|needScores
condition|?
operator|new
name|float
index|[
name|docsCollected
index|]
else|:
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ids
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ids
index|[
name|i
index|]
operator|=
name|groups
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
expr_stmt|;
if|if
condition|(
name|scores
operator|!=
literal|null
condition|)
name|scores
index|[
name|i
index|]
operator|=
name|groups
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|score
expr_stmt|;
block|}
name|float
name|score
init|=
name|groups
operator|.
name|maxScore
decl_stmt|;
name|maxScore
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxScore
argument_list|,
name|score
argument_list|)
expr_stmt|;
name|DocSlice
name|docs
init|=
operator|new
name|DocSlice
argument_list|(
name|off
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|ids
operator|.
name|length
operator|-
name|off
argument_list|)
argument_list|,
name|ids
argument_list|,
name|scores
argument_list|,
name|groups
operator|.
name|totalHits
argument_list|,
name|score
argument_list|)
decl_stmt|;
if|if
condition|(
name|getDocList
condition|)
block|{
name|DocIterator
name|iter
init|=
name|docs
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
name|idSet
operator|.
name|add
argument_list|(
name|iter
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|docs
return|;
block|}
DECL|method|addDocList
specifier|protected
name|void
name|addDocList
parameter_list|(
name|NamedList
name|rsp
parameter_list|,
name|GroupDocs
name|groups
parameter_list|)
block|{
name|rsp
operator|.
name|add
argument_list|(
literal|"doclist"
argument_list|,
name|getDocList
argument_list|(
name|groups
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Flatten the groups and get up offset + rows documents
DECL|method|createSimpleResponse
specifier|protected
name|DocList
name|createSimpleResponse
parameter_list|()
block|{
name|GroupDocs
index|[]
name|groups
init|=
name|result
operator|!=
literal|null
condition|?
name|result
operator|.
name|groups
else|:
operator|new
name|GroupDocs
index|[
literal|0
index|]
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Float
argument_list|>
name|scores
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|docsToGather
init|=
name|getMax
argument_list|(
name|offset
argument_list|,
name|numGroups
argument_list|,
name|maxDoc
argument_list|)
decl_stmt|;
name|int
name|docsGathered
init|=
literal|0
decl_stmt|;
name|float
name|maxScore
init|=
name|Float
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
name|outer
label|:
for|for
control|(
name|GroupDocs
name|group
range|:
name|groups
control|)
block|{
if|if
condition|(
name|group
operator|.
name|maxScore
operator|>
name|maxScore
condition|)
block|{
name|maxScore
operator|=
name|group
operator|.
name|maxScore
expr_stmt|;
block|}
for|for
control|(
name|ScoreDoc
name|scoreDoc
range|:
name|group
operator|.
name|scoreDocs
control|)
block|{
if|if
condition|(
name|docsGathered
operator|>=
name|docsToGather
condition|)
block|{
break|break
name|outer
break|;
block|}
name|ids
operator|.
name|add
argument_list|(
name|scoreDoc
operator|.
name|doc
argument_list|)
expr_stmt|;
name|scores
operator|.
name|add
argument_list|(
name|scoreDoc
operator|.
name|score
argument_list|)
expr_stmt|;
name|docsGathered
operator|++
expr_stmt|;
block|}
block|}
name|int
name|len
init|=
name|docsGathered
operator|>
name|offset
condition|?
name|docsGathered
operator|-
name|offset
else|:
literal|0
decl_stmt|;
name|int
index|[]
name|docs
init|=
name|ArrayUtils
operator|.
name|toPrimitive
argument_list|(
name|ids
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|ids
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|float
index|[]
name|docScores
init|=
name|ArrayUtils
operator|.
name|toPrimitive
argument_list|(
name|scores
operator|.
name|toArray
argument_list|(
operator|new
name|Float
index|[
name|scores
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|DocSlice
name|docSlice
init|=
operator|new
name|DocSlice
argument_list|(
name|offset
argument_list|,
name|len
argument_list|,
name|docs
argument_list|,
name|docScores
argument_list|,
name|getMatches
argument_list|()
argument_list|,
name|maxScore
argument_list|)
decl_stmt|;
if|if
condition|(
name|getDocList
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|docs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|idSet
operator|.
name|add
argument_list|(
name|docs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|docSlice
return|;
block|}
block|}
comment|/**    * A group command for grouping on a field.    */
DECL|class|CommandField
specifier|public
class|class
name|CommandField
extends|extends
name|Command
argument_list|<
name|BytesRef
argument_list|>
block|{
DECL|field|groupBy
specifier|public
name|String
name|groupBy
decl_stmt|;
DECL|field|firstPass
name|TermFirstPassGroupingCollector
name|firstPass
decl_stmt|;
DECL|field|secondPass
name|TermSecondPassGroupingCollector
name|secondPass
decl_stmt|;
DECL|field|allGroupsCollector
name|TermAllGroupsCollector
name|allGroupsCollector
decl_stmt|;
comment|// If offset falls outside the number of documents a group can provide use this collector instead of secondPass
DECL|field|fallBackCollector
name|TotalHitCountCollector
name|fallBackCollector
decl_stmt|;
DECL|field|topGroups
name|Collection
argument_list|<
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
name|topGroups
decl_stmt|;
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|prepare
specifier|protected
name|void
name|prepare
parameter_list|()
throws|throws
name|IOException
block|{
name|actualGroupsToFind
operator|=
name|getMax
argument_list|(
name|offset
argument_list|,
name|numGroups
argument_list|,
name|maxDoc
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|createFirstPassCollector
specifier|protected
name|Collector
name|createFirstPassCollector
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Ok we don't want groups, but do want a total count
if|if
condition|(
name|actualGroupsToFind
operator|<=
literal|0
condition|)
block|{
name|fallBackCollector
operator|=
operator|new
name|TotalHitCountCollector
argument_list|()
expr_stmt|;
return|return
name|fallBackCollector
return|;
block|}
name|groupSort
operator|=
name|groupSort
operator|==
literal|null
condition|?
name|Sort
operator|.
name|RELEVANCE
else|:
name|groupSort
expr_stmt|;
name|firstPass
operator|=
operator|new
name|TermFirstPassGroupingCollector
argument_list|(
name|groupBy
argument_list|,
name|groupSort
argument_list|,
name|actualGroupsToFind
argument_list|)
expr_stmt|;
return|return
name|firstPass
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|createSecondPassCollector
specifier|protected
name|Collector
name|createSecondPassCollector
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|actualGroupsToFind
operator|<=
literal|0
condition|)
block|{
name|allGroupsCollector
operator|=
operator|new
name|TermAllGroupsCollector
argument_list|(
name|groupBy
argument_list|)
expr_stmt|;
return|return
name|totalCount
operator|==
name|TotalCount
operator|.
name|grouped
condition|?
name|allGroupsCollector
else|:
literal|null
return|;
block|}
name|topGroups
operator|=
name|format
operator|==
name|Format
operator|.
name|grouped
condition|?
name|firstPass
operator|.
name|getTopGroups
argument_list|(
name|offset
argument_list|,
literal|false
argument_list|)
else|:
name|firstPass
operator|.
name|getTopGroups
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|topGroups
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|totalCount
operator|==
name|TotalCount
operator|.
name|grouped
condition|)
block|{
name|allGroupsCollector
operator|=
operator|new
name|TermAllGroupsCollector
argument_list|(
name|groupBy
argument_list|)
expr_stmt|;
name|fallBackCollector
operator|=
operator|new
name|TotalHitCountCollector
argument_list|()
expr_stmt|;
return|return
name|MultiCollector
operator|.
name|wrap
argument_list|(
name|allGroupsCollector
argument_list|,
name|fallBackCollector
argument_list|)
return|;
block|}
else|else
block|{
name|fallBackCollector
operator|=
operator|new
name|TotalHitCountCollector
argument_list|()
expr_stmt|;
return|return
name|fallBackCollector
return|;
block|}
block|}
name|int
name|groupedDocsToCollect
init|=
name|getMax
argument_list|(
name|groupOffset
argument_list|,
name|docsPerGroup
argument_list|,
name|maxDoc
argument_list|)
decl_stmt|;
name|groupedDocsToCollect
operator|=
name|Math
operator|.
name|max
argument_list|(
name|groupedDocsToCollect
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|secondPass
operator|=
operator|new
name|TermSecondPassGroupingCollector
argument_list|(
name|groupBy
argument_list|,
name|topGroups
argument_list|,
name|groupSort
argument_list|,
name|withinGroupSort
argument_list|,
name|groupedDocsToCollect
argument_list|,
name|needScores
argument_list|,
name|needScores
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|totalCount
operator|==
name|TotalCount
operator|.
name|grouped
condition|)
block|{
name|allGroupsCollector
operator|=
operator|new
name|TermAllGroupsCollector
argument_list|(
name|groupBy
argument_list|)
expr_stmt|;
return|return
name|MultiCollector
operator|.
name|wrap
argument_list|(
name|secondPass
argument_list|,
name|allGroupsCollector
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|secondPass
return|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|createAllGroupCollector
specifier|public
name|AbstractAllGroupHeadsCollector
argument_list|<
name|?
argument_list|>
name|createAllGroupCollector
parameter_list|()
throws|throws
name|IOException
block|{
name|Sort
name|sortWithinGroup
init|=
name|withinGroupSort
operator|!=
literal|null
condition|?
name|withinGroupSort
else|:
operator|new
name|Sort
argument_list|()
decl_stmt|;
return|return
name|TermAllGroupHeadsCollector
operator|.
name|create
argument_list|(
name|groupBy
argument_list|,
name|sortWithinGroup
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|finish
specifier|protected
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
block|{
name|result
operator|=
name|secondPass
operator|!=
literal|null
condition|?
name|secondPass
operator|.
name|getTopGroups
argument_list|(
literal|0
argument_list|)
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|main
condition|)
block|{
name|mainResult
operator|=
name|createSimpleResponse
argument_list|()
expr_stmt|;
return|return;
block|}
name|NamedList
name|groupResult
init|=
name|commonResponse
argument_list|()
decl_stmt|;
if|if
condition|(
name|format
operator|==
name|Format
operator|.
name|simple
condition|)
block|{
name|groupResult
operator|.
name|add
argument_list|(
literal|"doclist"
argument_list|,
name|createSimpleResponse
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|List
name|groupList
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|groupResult
operator|.
name|add
argument_list|(
literal|"groups"
argument_list|,
name|groupList
argument_list|)
expr_stmt|;
comment|// grouped={ key={ groups=[
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// handle case of rows=0
if|if
condition|(
name|numGroups
operator|==
literal|0
condition|)
return|return;
for|for
control|(
name|GroupDocs
argument_list|<
name|BytesRef
argument_list|>
name|group
range|:
name|result
operator|.
name|groups
control|)
block|{
name|NamedList
name|nl
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
name|groupList
operator|.
name|add
argument_list|(
name|nl
argument_list|)
expr_stmt|;
comment|// grouped={ key={ groups=[ {
comment|// To keep the response format compatable with trunk.
comment|// In trunk MutableValue can convert an indexed value to its native type. E.g. string to int
comment|// The only option I currently see is the use the FieldType for this
if|if
condition|(
name|group
operator|.
name|groupValue
operator|!=
literal|null
condition|)
block|{
name|SchemaField
name|schemaField
init|=
name|searcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|groupBy
argument_list|)
decl_stmt|;
name|FieldType
name|fieldType
init|=
name|schemaField
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|readableValue
init|=
name|fieldType
operator|.
name|indexedToReadable
argument_list|(
name|group
operator|.
name|groupValue
operator|.
name|utf8ToString
argument_list|()
argument_list|)
decl_stmt|;
name|StorableField
name|field
init|=
name|schemaField
operator|.
name|createField
argument_list|(
name|readableValue
argument_list|,
literal|1.0f
argument_list|)
decl_stmt|;
name|nl
operator|.
name|add
argument_list|(
literal|"groupValue"
argument_list|,
name|fieldType
operator|.
name|toObject
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nl
operator|.
name|add
argument_list|(
literal|"groupValue"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|addDocList
argument_list|(
name|nl
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|getMatches
specifier|public
name|int
name|getMatches
parameter_list|()
block|{
if|if
condition|(
name|result
operator|==
literal|null
operator|&&
name|fallBackCollector
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|result
operator|!=
literal|null
condition|?
name|result
operator|.
name|totalHitCount
else|:
name|fallBackCollector
operator|.
name|getTotalHits
argument_list|()
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|getNumberOfGroups
specifier|protected
name|Integer
name|getNumberOfGroups
parameter_list|()
block|{
return|return
name|allGroupsCollector
operator|==
literal|null
condition|?
literal|null
else|:
name|allGroupsCollector
operator|.
name|getGroupCount
argument_list|()
return|;
block|}
block|}
comment|/**    * A group command for grouping on a query.    */
comment|//NOTE: doesn't need to be generic. Maybe Command interface --> First / Second pass abstract impl.
DECL|class|CommandQuery
specifier|public
class|class
name|CommandQuery
extends|extends
name|Command
block|{
DECL|field|query
specifier|public
name|Query
name|query
decl_stmt|;
DECL|field|topCollector
name|TopDocsCollector
name|topCollector
decl_stmt|;
DECL|field|collector
name|FilterCollector
name|collector
decl_stmt|;
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|prepare
specifier|protected
name|void
name|prepare
parameter_list|()
throws|throws
name|IOException
block|{
name|actualGroupsToFind
operator|=
name|getMax
argument_list|(
name|offset
argument_list|,
name|numGroups
argument_list|,
name|maxDoc
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|createFirstPassCollector
specifier|protected
name|Collector
name|createFirstPassCollector
parameter_list|()
throws|throws
name|IOException
block|{
name|DocSet
name|groupFilt
init|=
name|searcher
operator|.
name|getDocSet
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|topCollector
operator|=
name|newCollector
argument_list|(
name|withinGroupSort
argument_list|,
name|needScores
argument_list|)
expr_stmt|;
name|collector
operator|=
operator|new
name|FilterCollector
argument_list|(
name|groupFilt
argument_list|,
name|topCollector
argument_list|)
expr_stmt|;
return|return
name|collector
return|;
block|}
DECL|method|newCollector
name|TopDocsCollector
name|newCollector
parameter_list|(
name|Sort
name|sort
parameter_list|,
name|boolean
name|needScores
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|groupDocsToCollect
init|=
name|getMax
argument_list|(
name|groupOffset
argument_list|,
name|docsPerGroup
argument_list|,
name|maxDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|sort
operator|==
literal|null
operator|||
name|sort
operator|==
name|Sort
operator|.
name|RELEVANCE
condition|)
block|{
return|return
name|TopScoreDocCollector
operator|.
name|create
argument_list|(
name|groupDocsToCollect
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|TopFieldCollector
operator|.
name|create
argument_list|(
name|searcher
operator|.
name|weightSort
argument_list|(
name|sort
argument_list|)
argument_list|,
name|groupDocsToCollect
argument_list|,
literal|false
argument_list|,
name|needScores
argument_list|,
name|needScores
argument_list|)
return|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|finish
specifier|protected
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
block|{
name|TopDocsCollector
name|topDocsCollector
init|=
operator|(
name|TopDocsCollector
operator|)
name|collector
operator|.
name|getDelegate
argument_list|()
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|topDocsCollector
operator|.
name|topDocs
argument_list|()
decl_stmt|;
name|GroupDocs
argument_list|<
name|String
argument_list|>
name|groupDocs
init|=
operator|new
name|GroupDocs
argument_list|<>
argument_list|(
name|Float
operator|.
name|NaN
argument_list|,
name|topDocs
operator|.
name|getMaxScore
argument_list|()
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|,
name|topDocs
operator|.
name|scoreDocs
argument_list|,
name|query
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|main
condition|)
block|{
name|mainResult
operator|=
name|getDocList
argument_list|(
name|groupDocs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|NamedList
name|rsp
init|=
name|commonResponse
argument_list|()
decl_stmt|;
name|addDocList
argument_list|(
name|rsp
argument_list|,
name|groupDocs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|getMatches
specifier|public
name|int
name|getMatches
parameter_list|()
block|{
return|return
name|collector
operator|.
name|getMatches
argument_list|()
return|;
block|}
block|}
comment|/**    * A command for grouping on a function.    */
DECL|class|CommandFunc
specifier|public
class|class
name|CommandFunc
extends|extends
name|Command
argument_list|<
name|MutableValue
argument_list|>
block|{
DECL|field|groupBy
specifier|public
name|ValueSource
name|groupBy
decl_stmt|;
DECL|field|context
name|Map
name|context
decl_stmt|;
DECL|field|firstPass
name|FunctionFirstPassGroupingCollector
name|firstPass
decl_stmt|;
DECL|field|secondPass
name|FunctionSecondPassGroupingCollector
name|secondPass
decl_stmt|;
comment|// If offset falls outside the number of documents a group can provide use this collector instead of secondPass
DECL|field|fallBackCollector
name|TotalHitCountCollector
name|fallBackCollector
decl_stmt|;
DECL|field|allGroupsCollector
name|FunctionAllGroupsCollector
name|allGroupsCollector
decl_stmt|;
DECL|field|topGroups
name|Collection
argument_list|<
name|SearchGroup
argument_list|<
name|MutableValue
argument_list|>
argument_list|>
name|topGroups
decl_stmt|;
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|prepare
specifier|protected
name|void
name|prepare
parameter_list|()
throws|throws
name|IOException
block|{
name|context
operator|=
name|ValueSource
operator|.
name|newContext
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
name|groupBy
operator|.
name|createWeight
argument_list|(
name|context
argument_list|,
name|searcher
argument_list|)
expr_stmt|;
name|actualGroupsToFind
operator|=
name|getMax
argument_list|(
name|offset
argument_list|,
name|numGroups
argument_list|,
name|maxDoc
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|createFirstPassCollector
specifier|protected
name|Collector
name|createFirstPassCollector
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Ok we don't want groups, but do want a total count
if|if
condition|(
name|actualGroupsToFind
operator|<=
literal|0
condition|)
block|{
name|fallBackCollector
operator|=
operator|new
name|TotalHitCountCollector
argument_list|()
expr_stmt|;
return|return
name|fallBackCollector
return|;
block|}
name|groupSort
operator|=
name|groupSort
operator|==
literal|null
condition|?
name|Sort
operator|.
name|RELEVANCE
else|:
name|groupSort
expr_stmt|;
name|firstPass
operator|=
operator|new
name|FunctionFirstPassGroupingCollector
argument_list|(
name|groupBy
argument_list|,
name|context
argument_list|,
name|searcher
operator|.
name|weightSort
argument_list|(
name|groupSort
argument_list|)
argument_list|,
name|actualGroupsToFind
argument_list|)
expr_stmt|;
return|return
name|firstPass
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|createSecondPassCollector
specifier|protected
name|Collector
name|createSecondPassCollector
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|actualGroupsToFind
operator|<=
literal|0
condition|)
block|{
name|allGroupsCollector
operator|=
operator|new
name|FunctionAllGroupsCollector
argument_list|(
name|groupBy
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return
name|totalCount
operator|==
name|TotalCount
operator|.
name|grouped
condition|?
name|allGroupsCollector
else|:
literal|null
return|;
block|}
name|topGroups
operator|=
name|format
operator|==
name|Format
operator|.
name|grouped
condition|?
name|firstPass
operator|.
name|getTopGroups
argument_list|(
name|offset
argument_list|,
literal|false
argument_list|)
else|:
name|firstPass
operator|.
name|getTopGroups
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|topGroups
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|totalCount
operator|==
name|TotalCount
operator|.
name|grouped
condition|)
block|{
name|allGroupsCollector
operator|=
operator|new
name|FunctionAllGroupsCollector
argument_list|(
name|groupBy
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|fallBackCollector
operator|=
operator|new
name|TotalHitCountCollector
argument_list|()
expr_stmt|;
return|return
name|MultiCollector
operator|.
name|wrap
argument_list|(
name|allGroupsCollector
argument_list|,
name|fallBackCollector
argument_list|)
return|;
block|}
else|else
block|{
name|fallBackCollector
operator|=
operator|new
name|TotalHitCountCollector
argument_list|()
expr_stmt|;
return|return
name|fallBackCollector
return|;
block|}
block|}
name|int
name|groupdDocsToCollect
init|=
name|getMax
argument_list|(
name|groupOffset
argument_list|,
name|docsPerGroup
argument_list|,
name|maxDoc
argument_list|)
decl_stmt|;
name|groupdDocsToCollect
operator|=
name|Math
operator|.
name|max
argument_list|(
name|groupdDocsToCollect
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|secondPass
operator|=
operator|new
name|FunctionSecondPassGroupingCollector
argument_list|(
name|topGroups
argument_list|,
name|groupSort
argument_list|,
name|withinGroupSort
argument_list|,
name|groupdDocsToCollect
argument_list|,
name|needScores
argument_list|,
name|needScores
argument_list|,
literal|false
argument_list|,
name|groupBy
argument_list|,
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|totalCount
operator|==
name|TotalCount
operator|.
name|grouped
condition|)
block|{
name|allGroupsCollector
operator|=
operator|new
name|FunctionAllGroupsCollector
argument_list|(
name|groupBy
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return
name|MultiCollector
operator|.
name|wrap
argument_list|(
name|secondPass
argument_list|,
name|allGroupsCollector
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|secondPass
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|createAllGroupCollector
specifier|public
name|AbstractAllGroupHeadsCollector
argument_list|<
name|?
argument_list|>
name|createAllGroupCollector
parameter_list|()
throws|throws
name|IOException
block|{
name|Sort
name|sortWithinGroup
init|=
name|withinGroupSort
operator|!=
literal|null
condition|?
name|withinGroupSort
else|:
operator|new
name|Sort
argument_list|()
decl_stmt|;
return|return
operator|new
name|FunctionAllGroupHeadsCollector
argument_list|(
name|groupBy
argument_list|,
name|context
argument_list|,
name|sortWithinGroup
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|finish
specifier|protected
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
block|{
name|result
operator|=
name|secondPass
operator|!=
literal|null
condition|?
name|secondPass
operator|.
name|getTopGroups
argument_list|(
literal|0
argument_list|)
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|main
condition|)
block|{
name|mainResult
operator|=
name|createSimpleResponse
argument_list|()
expr_stmt|;
return|return;
block|}
name|NamedList
name|groupResult
init|=
name|commonResponse
argument_list|()
decl_stmt|;
if|if
condition|(
name|format
operator|==
name|Format
operator|.
name|simple
condition|)
block|{
name|groupResult
operator|.
name|add
argument_list|(
literal|"doclist"
argument_list|,
name|createSimpleResponse
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|List
name|groupList
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|groupResult
operator|.
name|add
argument_list|(
literal|"groups"
argument_list|,
name|groupList
argument_list|)
expr_stmt|;
comment|// grouped={ key={ groups=[
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// handle case of rows=0
if|if
condition|(
name|numGroups
operator|==
literal|0
condition|)
return|return;
for|for
control|(
name|GroupDocs
argument_list|<
name|MutableValue
argument_list|>
name|group
range|:
name|result
operator|.
name|groups
control|)
block|{
name|NamedList
name|nl
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
name|groupList
operator|.
name|add
argument_list|(
name|nl
argument_list|)
expr_stmt|;
comment|// grouped={ key={ groups=[ {
name|nl
operator|.
name|add
argument_list|(
literal|"groupValue"
argument_list|,
name|group
operator|.
name|groupValue
operator|.
name|toObject
argument_list|()
argument_list|)
expr_stmt|;
name|addDocList
argument_list|(
name|nl
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|getMatches
specifier|public
name|int
name|getMatches
parameter_list|()
block|{
if|if
condition|(
name|result
operator|==
literal|null
operator|&&
name|fallBackCollector
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|result
operator|!=
literal|null
condition|?
name|result
operator|.
name|totalHitCount
else|:
name|fallBackCollector
operator|.
name|getTotalHits
argument_list|()
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|getNumberOfGroups
specifier|protected
name|Integer
name|getNumberOfGroups
parameter_list|()
block|{
return|return
name|allGroupsCollector
operator|==
literal|null
condition|?
literal|null
else|:
name|allGroupsCollector
operator|.
name|getGroupCount
argument_list|()
return|;
block|}
block|}
block|}
end_class
end_unit
