begin_unit
begin_package
DECL|package|org.apache.solr.search.join
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|join
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|ScoreMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SyntaxError
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|ScoreModeParser
class|class
name|ScoreModeParser
block|{
DECL|field|lowerAndCapitalCase
specifier|final
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|ScoreMode
argument_list|>
name|lowerAndCapitalCase
init|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ScoreMode
argument_list|>
argument_list|()
block|{
block|{
for|for
control|(
name|ScoreMode
name|s
range|:
name|ScoreMode
operator|.
name|values
argument_list|()
control|)
block|{
name|put
argument_list|(
name|s
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|s
operator|.
name|name
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
DECL|method|ScoreModeParser
specifier|private
name|ScoreModeParser
parameter_list|()
block|{}
comment|/**     * recognizes as-is {@link ScoreMode} names, and lowercase as well,     * otherwise throws exception     * @throws SyntaxError when it's unable to parse    * */
DECL|method|parse
specifier|static
name|ScoreMode
name|parse
parameter_list|(
name|String
name|score
parameter_list|)
throws|throws
name|SyntaxError
block|{
specifier|final
name|ScoreMode
name|scoreMode
init|=
name|lowerAndCapitalCase
operator|.
name|get
argument_list|(
name|score
argument_list|)
decl_stmt|;
if|if
condition|(
name|scoreMode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SyntaxError
argument_list|(
literal|"Unable to parse ScoreMode from: "
operator|+
name|score
argument_list|)
throw|;
block|}
return|return
name|scoreMode
return|;
block|}
block|}
end_class
end_unit
