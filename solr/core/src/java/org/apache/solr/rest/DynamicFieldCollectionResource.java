begin_unit
begin_package
DECL|package|org.apache.solr.rest
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|rest
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|representation
operator|.
name|Representation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|resource
operator|.
name|ResourceException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/**  * This class responds to requests at /solr/(corename)/schema/dynamicfields  *<p/>  * To restrict the set of dynamic fields in the response, specify a comma  * and/or space separated list of dynamic field patterns in the "fl" query  * parameter.   */
end_comment
begin_class
DECL|class|DynamicFieldCollectionResource
specifier|public
class|class
name|DynamicFieldCollectionResource
extends|extends
name|BaseFieldResource
implements|implements
name|GETable
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DynamicFieldCollectionResource
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|INTERNAL_POLY_FIELD_PREFIX
specifier|private
specifier|final
specifier|static
name|String
name|INTERNAL_POLY_FIELD_PREFIX
init|=
literal|"*"
operator|+
name|FieldType
operator|.
name|POLY_FIELD_SEPARATOR
decl_stmt|;
DECL|method|DynamicFieldCollectionResource
specifier|public
name|DynamicFieldCollectionResource
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doInit
specifier|public
name|void
name|doInit
parameter_list|()
throws|throws
name|ResourceException
block|{
name|super
operator|.
name|doInit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|Representation
name|get
parameter_list|()
block|{
try|try
block|{
name|SchemaField
index|[]
name|dynamicFields
init|=
name|getSchema
argument_list|()
operator|.
name|getDynamicFieldPrototypes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|>
name|props
init|=
operator|new
name|ArrayList
argument_list|<
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|(
name|dynamicFields
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|getRequestedFields
argument_list|()
condition|)
block|{
if|if
condition|(
literal|0
operator|==
name|getRequestedFields
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|String
name|message
init|=
literal|"Empty "
operator|+
name|CommonParams
operator|.
name|FL
operator|+
literal|" parameter value"
decl_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|message
argument_list|)
throw|;
block|}
for|for
control|(
name|SchemaField
name|prototype
range|:
name|dynamicFields
control|)
block|{
if|if
condition|(
name|getRequestedFields
argument_list|()
operator|.
name|containsKey
argument_list|(
name|prototype
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|getRequestedFields
argument_list|()
operator|.
name|put
argument_list|(
name|prototype
operator|.
name|getName
argument_list|()
argument_list|,
name|getFieldProperties
argument_list|(
name|prototype
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Use the same order as the fl parameter
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|>
name|requestedField
range|:
name|getRequestedFields
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|fieldProperties
init|=
name|requestedField
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// Should there be some form of error condition
comment|// if one or more of the requested fields were not found?
if|if
condition|(
literal|null
operator|!=
name|fieldProperties
condition|)
block|{
name|props
operator|.
name|add
argument_list|(
name|fieldProperties
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|SchemaField
name|prototype
range|:
name|dynamicFields
control|)
block|{
comment|// omit internal polyfields
if|if
condition|(
operator|!
name|prototype
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|INTERNAL_POLY_FIELD_PREFIX
argument_list|)
condition|)
block|{
name|props
operator|.
name|add
argument_list|(
name|getFieldProperties
argument_list|(
name|prototype
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|getSolrResponse
argument_list|()
operator|.
name|add
argument_list|(
name|SchemaRestApi
operator|.
name|DYNAMIC_FIELDS
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|getSolrResponse
argument_list|()
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|handlePostExecution
argument_list|(
name|log
argument_list|)
expr_stmt|;
return|return
operator|new
name|SolrOutputRepresentation
argument_list|()
return|;
block|}
block|}
end_class
end_unit
