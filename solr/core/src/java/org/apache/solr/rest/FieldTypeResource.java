begin_unit
begin_package
DECL|package|org.apache.solr.rest
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|rest
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|representation
operator|.
name|Representation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|resource
operator|.
name|ResourceException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_comment
comment|/**  * This class responds to requests at /solr/(corename)/schema/fieldtype/typename  * where "typename" is the name of a field type in the schema.  *   * The GET method returns properties for the named field type.  */
end_comment
begin_class
DECL|class|FieldTypeResource
specifier|public
class|class
name|FieldTypeResource
extends|extends
name|BaseFieldTypeResource
implements|implements
name|GETable
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FieldTypeResource
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|FIELD_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|FIELD_TYPE
init|=
literal|"fieldType"
decl_stmt|;
DECL|field|typeName
specifier|private
name|String
name|typeName
decl_stmt|;
DECL|method|FieldTypeResource
specifier|public
name|FieldTypeResource
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doInit
specifier|public
name|void
name|doInit
parameter_list|()
throws|throws
name|ResourceException
block|{
name|super
operator|.
name|doInit
argument_list|()
expr_stmt|;
if|if
condition|(
name|isExisting
argument_list|()
condition|)
block|{
name|typeName
operator|=
operator|(
name|String
operator|)
name|getRequestAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|SchemaRestApi
operator|.
name|NAME_VARIABLE
argument_list|)
expr_stmt|;
try|try
block|{
name|typeName
operator|=
literal|null
operator|==
name|typeName
condition|?
literal|""
else|:
name|urlDecode
argument_list|(
name|typeName
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ResourceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|Representation
name|get
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|typeName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|String
name|message
init|=
literal|"Field type name is missing"
decl_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|message
argument_list|)
throw|;
block|}
else|else
block|{
name|FieldType
name|fieldType
init|=
name|getSchema
argument_list|()
operator|.
name|getFieldTypes
argument_list|()
operator|.
name|get
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|fieldType
condition|)
block|{
specifier|final
name|String
name|message
init|=
literal|"Field type '"
operator|+
name|typeName
operator|+
literal|"' not found."
decl_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|NOT_FOUND
argument_list|,
name|message
argument_list|)
throw|;
block|}
name|getSolrResponse
argument_list|()
operator|.
name|add
argument_list|(
name|FIELD_TYPE
argument_list|,
name|getFieldTypeProperties
argument_list|(
name|fieldType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|getSolrResponse
argument_list|()
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|handlePostExecution
argument_list|(
name|log
argument_list|)
expr_stmt|;
return|return
operator|new
name|SolrOutputRepresentation
argument_list|()
return|;
block|}
comment|/**     * Returns a field list using the given field type by iterating over all fields    * defined in the schema.    */
annotation|@
name|Override
DECL|method|getFieldsWithFieldType
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getFieldsWithFieldType
parameter_list|(
name|FieldType
name|fieldType
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SchemaField
name|schemaField
range|:
name|getSchema
argument_list|()
operator|.
name|getFields
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|schemaField
operator|.
name|getType
argument_list|()
operator|.
name|getTypeName
argument_list|()
operator|.
name|equals
argument_list|(
name|fieldType
operator|.
name|getTypeName
argument_list|()
argument_list|)
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|schemaField
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|fields
argument_list|)
expr_stmt|;
return|return
name|fields
return|;
block|}
comment|/**    * Returns a dynamic field list using the given field type by iterating over all    * dynamic fields defined in the schema.     */
annotation|@
name|Override
DECL|method|getDynamicFieldsWithFieldType
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getDynamicFieldsWithFieldType
parameter_list|(
name|FieldType
name|fieldType
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|dynamicFields
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SchemaField
name|prototype
range|:
name|getSchema
argument_list|()
operator|.
name|getDynamicFieldPrototypes
argument_list|()
control|)
block|{
if|if
condition|(
name|prototype
operator|.
name|getType
argument_list|()
operator|.
name|getTypeName
argument_list|()
operator|.
name|equals
argument_list|(
name|fieldType
operator|.
name|getTypeName
argument_list|()
argument_list|)
condition|)
block|{
name|dynamicFields
operator|.
name|add
argument_list|(
name|prototype
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dynamicFields
return|;
comment|// Don't sort these - they're matched in order
block|}
block|}
end_class
end_unit
