begin_unit
begin_package
DECL|package|org.apache.solr.rest
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|rest
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|Application
import|;
end_import
begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|Restlet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|routing
operator|.
name|Router
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_comment
comment|/**  * Restlet servlet handling /&lt;context&gt;/&lt;collection&gt;/config/* URL paths  */
end_comment
begin_class
DECL|class|SolrConfigRestApi
specifier|public
class|class
name|SolrConfigRestApi
extends|extends
name|Application
block|{
DECL|field|log
specifier|public
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SolrConfigRestApi
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|router
specifier|private
name|Router
name|router
decl_stmt|;
DECL|method|SolrConfigRestApi
specifier|public
name|SolrConfigRestApi
parameter_list|()
block|{
name|router
operator|=
operator|new
name|Router
argument_list|(
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * TODO: If and when this API has reserved endpoints, add them to the set returned here.    * @see SolrSchemaRestApi#getReservedEndpoints()    */
DECL|method|getReservedEndpoints
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getReservedEndpoints
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|stop
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
literal|null
operator|!=
name|router
condition|)
block|{
name|router
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Bind URL paths to the appropriate ServerResource subclass.     */
annotation|@
name|Override
DECL|method|createInboundRoot
specifier|public
specifier|synchronized
name|Restlet
name|createInboundRoot
parameter_list|()
block|{
comment|/*     log.info("createInboundRoot started for /config");          router.attachDefault(RestManager.ManagedEndpoint.class);          // attach all the dynamically registered /config resources     RestManager restManager =          RestManager.getRestManager(SolrRequestInfo.getRequestInfo());     restManager.attachManagedResources(RestManager.CONFIG_BASE_PATH, router);          log.info("createInboundRoot complete for /config");      return router;*/
return|return
literal|null
return|;
block|}
block|}
end_class
end_unit
