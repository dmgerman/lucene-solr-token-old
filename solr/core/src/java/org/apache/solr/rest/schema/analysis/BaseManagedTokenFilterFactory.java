begin_unit
begin_package
DECL|package|org.apache.solr.rest.schema.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|rest
operator|.
name|schema
operator|.
name|analysis
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|ResourceLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|ResourceLoaderAware
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|TokenFilterFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|rest
operator|.
name|ManagedResource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|rest
operator|.
name|ManagedResourceObserver
import|;
end_import
begin_comment
comment|/**  * Abstract based class for implementing TokenFilterFactory objects that  * are managed by the REST API. Specifically, this base class is useful  * for token filters that have configuration and data that needs to be  * updated programmatically, such as to support a UI for adding synonyms.    */
end_comment
begin_class
DECL|class|BaseManagedTokenFilterFactory
specifier|public
specifier|abstract
class|class
name|BaseManagedTokenFilterFactory
extends|extends
name|TokenFilterFactory
implements|implements
name|ResourceLoaderAware
implements|,
name|ManagedResourceObserver
block|{
DECL|field|handle
specifier|protected
name|String
name|handle
decl_stmt|;
DECL|method|BaseManagedTokenFilterFactory
specifier|protected
name|BaseManagedTokenFilterFactory
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|handle
operator|=
name|require
argument_list|(
name|args
argument_list|,
literal|"managed"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown parameters: "
operator|+
name|args
argument_list|)
throw|;
block|}
block|}
comment|/**    * Registers an endpoint with the RestManager so that this component can be    * managed using the REST API. This method can be invoked before all the    * resources the {@link org.apache.solr.rest.RestManager} needs to initialize    * a {@link ManagedResource} are available, so this simply registers the need    * to be managed at a specific endpoint and lets the RestManager deal with    * initialization when ready.    */
annotation|@
name|Override
DECL|method|inform
specifier|public
name|void
name|inform
parameter_list|(
name|ResourceLoader
name|loader
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrResourceLoader
name|solrResourceLoader
init|=
operator|(
name|SolrResourceLoader
operator|)
name|loader
decl_stmt|;
comment|// here we want to register that we need to be managed
comment|// at a specified path and the ManagedResource impl class
comment|// that should be used to manage this component
name|solrResourceLoader
operator|.
name|getManagedResourceRegistry
argument_list|()
operator|.
name|registerManagedResource
argument_list|(
name|getResourceId
argument_list|()
argument_list|,
name|getManagedResourceImplClass
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**    * Let the concrete analysis component decide the path it wishes to be managed at.     */
DECL|method|getResourceId
specifier|protected
specifier|abstract
name|String
name|getResourceId
parameter_list|()
function_decl|;
comment|/**    * Let the concrete analysis component determine the ManagedResource implementation.    * As there can be many instances of the same analysis component in a schema, this    * class should not presume to create ManagedResource. For instance, there may be    * 10 instances of the ManagedStopFilterFactory that use the same set of English     * stop words and we don't want 10 copies of the ManagedWordSetResource in the same core.     */
DECL|method|getManagedResourceImplClass
specifier|protected
specifier|abstract
name|Class
argument_list|<
name|?
extends|extends
name|ManagedResource
argument_list|>
name|getManagedResourceImplClass
parameter_list|()
function_decl|;
block|}
end_class
end_unit
