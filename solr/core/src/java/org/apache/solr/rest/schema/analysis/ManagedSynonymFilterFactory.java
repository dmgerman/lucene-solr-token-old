begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.rest.schema.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|rest
operator|.
name|schema
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|synonym
operator|.
name|SynonymFilterFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|synonym
operator|.
name|SynonymMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|ResourceLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CharsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|rest
operator|.
name|BaseSolrResource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|rest
operator|.
name|ManagedResource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|rest
operator|.
name|ManagedResourceStorage
operator|.
name|StorageIO
import|;
end_import
begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|Status
import|;
end_import
begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|resource
operator|.
name|ResourceException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * TokenFilterFactory and ManagedResource implementation for   * doing CRUD on synonyms using the REST API.  */
end_comment
begin_class
DECL|class|ManagedSynonymFilterFactory
specifier|public
class|class
name|ManagedSynonymFilterFactory
extends|extends
name|BaseManagedTokenFilterFactory
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|SYNONYM_MAPPINGS
specifier|public
specifier|static
specifier|final
name|String
name|SYNONYM_MAPPINGS
init|=
literal|"synonymMappings"
decl_stmt|;
DECL|field|IGNORE_CASE_INIT_ARG
specifier|public
specifier|static
specifier|final
name|String
name|IGNORE_CASE_INIT_ARG
init|=
literal|"ignoreCase"
decl_stmt|;
comment|/**    * Used internally to preserve the case of synonym mappings regardless    * of the ignoreCase setting.    */
DECL|class|CasePreservedSynonymMappings
specifier|private
specifier|static
class|class
name|CasePreservedSynonymMappings
block|{
DECL|field|mappings
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|mappings
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Provides a view of the mappings for a given term; specifically, if      * ignoreCase is true, then the returned "view" contains the mappings      * for all known cases of the term, if it is false, then only the      * mappings for the specific case is returned.       */
DECL|method|getMappings
name|Set
argument_list|<
name|String
argument_list|>
name|getMappings
parameter_list|(
name|boolean
name|ignoreCase
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|synMappings
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ignoreCase
condition|)
block|{
comment|// TODO: should we return the mapped values in all lower-case here?
if|if
condition|(
name|mappings
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// if only one in the map (which is common) just return it directly
return|return
name|mappings
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
name|synMappings
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Set
argument_list|<
name|String
argument_list|>
name|next
range|:
name|mappings
operator|.
name|values
argument_list|()
control|)
name|synMappings
operator|.
name|addAll
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|synMappings
operator|=
name|mappings
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|synMappings
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|mappings
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**    * ManagedResource implementation for synonyms, which are so specialized that    * it makes sense to implement this class as an inner class as it has little     * application outside the SynonymFilterFactory use cases.    */
DECL|class|SynonymManager
specifier|public
specifier|static
class|class
name|SynonymManager
extends|extends
name|ManagedResource
implements|implements
name|ManagedResource
operator|.
name|ChildResourceSupport
block|{
DECL|field|synonymMappings
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|CasePreservedSynonymMappings
argument_list|>
name|synonymMappings
decl_stmt|;
DECL|method|SynonymManager
specifier|public
name|SynonymManager
parameter_list|(
name|String
name|resourceId
parameter_list|,
name|SolrResourceLoader
name|loader
parameter_list|,
name|StorageIO
name|storageIO
parameter_list|)
throws|throws
name|SolrException
block|{
name|super
argument_list|(
name|resourceId
argument_list|,
name|loader
argument_list|,
name|storageIO
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|onManagedDataLoadedFromStorage
specifier|protected
name|void
name|onManagedDataLoadedFromStorage
parameter_list|(
name|NamedList
argument_list|<
name|?
argument_list|>
name|managedInitArgs
parameter_list|,
name|Object
name|managedData
parameter_list|)
throws|throws
name|SolrException
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|initArgs
init|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|managedInitArgs
decl_stmt|;
name|String
name|format
init|=
operator|(
name|String
operator|)
name|initArgs
operator|.
name|get
argument_list|(
literal|"format"
argument_list|)
decl_stmt|;
if|if
condition|(
name|format
operator|!=
literal|null
operator|&&
operator|!
literal|"solr"
operator|.
name|equals
argument_list|(
name|format
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Invalid format "
operator|+
name|format
operator|+
literal|"! Only 'solr' is supported."
argument_list|)
throw|;
block|}
comment|// the default behavior is to not ignore case,
comment|// so if not supplied, then install the default
if|if
condition|(
name|initArgs
operator|.
name|get
argument_list|(
name|IGNORE_CASE_INIT_ARG
argument_list|)
operator|==
literal|null
condition|)
block|{
name|initArgs
operator|.
name|add
argument_list|(
name|IGNORE_CASE_INIT_ARG
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
name|boolean
name|ignoreCase
init|=
name|getIgnoreCase
argument_list|(
name|managedInitArgs
argument_list|)
decl_stmt|;
name|synonymMappings
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
expr_stmt|;
if|if
condition|(
name|managedData
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|storedSyns
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|managedData
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|storedSyns
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|caseKey
init|=
name|applyCaseSetting
argument_list|(
name|ignoreCase
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|CasePreservedSynonymMappings
name|cpsm
init|=
name|synonymMappings
operator|.
name|get
argument_list|(
name|caseKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|cpsm
operator|==
literal|null
condition|)
block|{
name|cpsm
operator|=
operator|new
name|CasePreservedSynonymMappings
argument_list|()
expr_stmt|;
name|synonymMappings
operator|.
name|put
argument_list|(
name|caseKey
argument_list|,
name|cpsm
argument_list|)
expr_stmt|;
block|}
comment|// give the nature of our JSON parsing solution, we really have
comment|// no guarantees on what is in the file
name|Object
name|mapping
init|=
name|storedSyns
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|mapping
operator|instanceof
name|List
operator|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Invalid synonym file format! Expected a list of synonyms for "
operator|+
name|key
operator|+
literal|" but got "
operator|+
name|mapping
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|sortedVals
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|sortedVals
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|storedSyns
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|cpsm
operator|.
name|mappings
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|sortedVals
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Loaded {} synonym mappings for {}"
argument_list|,
name|synonymMappings
operator|.
name|size
argument_list|()
argument_list|,
name|getResourceId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|applyUpdatesToManagedData
specifier|protected
name|Object
name|applyUpdatesToManagedData
parameter_list|(
name|Object
name|updates
parameter_list|)
block|{
name|boolean
name|ignoreCase
init|=
name|getIgnoreCase
argument_list|()
decl_stmt|;
name|boolean
name|madeChanges
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|updates
operator|instanceof
name|List
condition|)
block|{
name|madeChanges
operator|=
name|applyListUpdates
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|updates
argument_list|,
name|ignoreCase
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|updates
operator|instanceof
name|Map
condition|)
block|{
name|madeChanges
operator|=
name|applyMapUpdates
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|updates
argument_list|,
name|ignoreCase
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ResourceException
argument_list|(
name|Status
operator|.
name|CLIENT_ERROR_BAD_REQUEST
argument_list|,
literal|"Unsupported data format ("
operator|+
name|updates
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"); expected a JSON object (Map or List)!"
argument_list|)
throw|;
block|}
return|return
name|madeChanges
condition|?
name|getStoredView
argument_list|()
else|:
literal|null
return|;
block|}
DECL|method|applyListUpdates
specifier|protected
name|boolean
name|applyListUpdates
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|jsonList
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|)
block|{
name|boolean
name|madeChanges
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|term
range|:
name|jsonList
control|)
block|{
comment|// find the mappings using the case aware key
name|String
name|origTerm
init|=
name|term
decl_stmt|;
name|term
operator|=
name|applyCaseSetting
argument_list|(
name|ignoreCase
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|CasePreservedSynonymMappings
name|cpsm
init|=
name|synonymMappings
operator|.
name|get
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|cpsm
operator|==
literal|null
condition|)
name|cpsm
operator|=
operator|new
name|CasePreservedSynonymMappings
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|treeTerms
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|treeTerms
operator|.
name|addAll
argument_list|(
name|jsonList
argument_list|)
expr_stmt|;
name|treeTerms
operator|.
name|remove
argument_list|(
name|origTerm
argument_list|)
expr_stmt|;
name|cpsm
operator|.
name|mappings
operator|.
name|put
argument_list|(
name|origTerm
argument_list|,
name|treeTerms
argument_list|)
expr_stmt|;
name|madeChanges
operator|=
literal|true
expr_stmt|;
comment|// only add the cpsm to the synonymMappings if it has valid data
if|if
condition|(
operator|!
name|synonymMappings
operator|.
name|containsKey
argument_list|(
name|term
argument_list|)
operator|&&
name|cpsm
operator|.
name|mappings
operator|.
name|get
argument_list|(
name|origTerm
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|synonymMappings
operator|.
name|put
argument_list|(
name|term
argument_list|,
name|cpsm
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|madeChanges
return|;
block|}
DECL|method|applyMapUpdates
specifier|protected
name|boolean
name|applyMapUpdates
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jsonMap
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|)
block|{
name|boolean
name|madeChanges
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|term
range|:
name|jsonMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|origTerm
init|=
name|term
decl_stmt|;
name|term
operator|=
name|applyCaseSetting
argument_list|(
name|ignoreCase
argument_list|,
name|term
argument_list|)
expr_stmt|;
comment|// find the mappings using the case aware key
name|CasePreservedSynonymMappings
name|cpsm
init|=
name|synonymMappings
operator|.
name|get
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|cpsm
operator|==
literal|null
condition|)
name|cpsm
operator|=
operator|new
name|CasePreservedSynonymMappings
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|output
init|=
name|cpsm
operator|.
name|mappings
operator|.
name|get
argument_list|(
name|origTerm
argument_list|)
decl_stmt|;
name|Object
name|val
init|=
name|jsonMap
operator|.
name|get
argument_list|(
name|origTerm
argument_list|)
decl_stmt|;
comment|// IMPORTANT: use the original
if|if
condition|(
name|val
operator|instanceof
name|String
condition|)
block|{
name|String
name|strVal
init|=
operator|(
name|String
operator|)
name|val
decl_stmt|;
if|if
condition|(
name|output
operator|==
literal|null
condition|)
block|{
name|output
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
name|cpsm
operator|.
name|mappings
operator|.
name|put
argument_list|(
name|origTerm
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|output
operator|.
name|add
argument_list|(
name|strVal
argument_list|)
condition|)
block|{
name|madeChanges
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|List
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|val
decl_stmt|;
if|if
condition|(
name|output
operator|==
literal|null
condition|)
block|{
name|output
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
name|cpsm
operator|.
name|mappings
operator|.
name|put
argument_list|(
name|origTerm
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|nextVal
range|:
name|vals
control|)
block|{
if|if
condition|(
name|output
operator|.
name|add
argument_list|(
name|nextVal
argument_list|)
condition|)
block|{
name|madeChanges
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ResourceException
argument_list|(
name|Status
operator|.
name|CLIENT_ERROR_BAD_REQUEST
argument_list|,
literal|"Unsupported value "
operator|+
name|val
operator|+
literal|" for "
operator|+
name|term
operator|+
literal|"; expected single value or a JSON array!"
argument_list|)
throw|;
block|}
comment|// only add the cpsm to the synonymMappings if it has valid data
if|if
condition|(
operator|!
name|synonymMappings
operator|.
name|containsKey
argument_list|(
name|term
argument_list|)
operator|&&
name|cpsm
operator|.
name|mappings
operator|.
name|get
argument_list|(
name|origTerm
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|synonymMappings
operator|.
name|put
argument_list|(
name|term
argument_list|,
name|cpsm
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|madeChanges
return|;
block|}
comment|/**      * Returns a Map of how we store and load data managed by this resource,      * which is different than how it is managed at runtime in order to support      * the ignoreCase setting.       */
DECL|method|getStoredView
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|getStoredView
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|storedView
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|CasePreservedSynonymMappings
name|cpsm
range|:
name|synonymMappings
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|key
range|:
name|cpsm
operator|.
name|mappings
operator|.
name|keySet
argument_list|()
control|)
block|{
name|storedView
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|cpsm
operator|.
name|mappings
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|storedView
return|;
block|}
DECL|method|applyCaseSetting
specifier|protected
name|String
name|applyCaseSetting
parameter_list|(
name|boolean
name|ignoreCase
parameter_list|,
name|String
name|str
parameter_list|)
block|{
return|return
operator|(
name|ignoreCase
operator|&&
name|str
operator|!=
literal|null
operator|)
condition|?
name|str
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
else|:
name|str
return|;
block|}
DECL|method|getIgnoreCase
specifier|public
name|boolean
name|getIgnoreCase
parameter_list|()
block|{
return|return
name|getIgnoreCase
argument_list|(
name|managedInitArgs
argument_list|)
return|;
block|}
DECL|method|getIgnoreCase
specifier|public
name|boolean
name|getIgnoreCase
parameter_list|(
name|NamedList
argument_list|<
name|?
argument_list|>
name|initArgs
parameter_list|)
block|{
name|Boolean
name|ignoreCase
init|=
name|initArgs
operator|.
name|getBooleanArg
argument_list|(
name|IGNORE_CASE_INIT_ARG
argument_list|)
decl_stmt|;
comment|// ignoreCase = false by default
return|return
literal|null
operator|==
name|ignoreCase
condition|?
literal|false
else|:
name|ignoreCase
return|;
block|}
annotation|@
name|Override
DECL|method|doGet
specifier|public
name|void
name|doGet
parameter_list|(
name|BaseSolrResource
name|endpoint
parameter_list|,
name|String
name|childId
parameter_list|)
block|{
name|SolrQueryResponse
name|response
init|=
name|endpoint
operator|.
name|getSolrResponse
argument_list|()
decl_stmt|;
if|if
condition|(
name|childId
operator|!=
literal|null
condition|)
block|{
name|boolean
name|ignoreCase
init|=
name|getIgnoreCase
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|applyCaseSetting
argument_list|(
name|ignoreCase
argument_list|,
name|childId
argument_list|)
decl_stmt|;
comment|// if ignoreCase==true, then we get the mappings using the lower-cased key
comment|// and then return a union of all case-sensitive keys, if false, then
comment|// we only return the mappings for the exact case requested
name|CasePreservedSynonymMappings
name|cpsm
init|=
name|synonymMappings
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|mappings
init|=
operator|(
name|cpsm
operator|!=
literal|null
operator|)
condition|?
name|cpsm
operator|.
name|getMappings
argument_list|(
name|ignoreCase
argument_list|,
name|childId
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|mappings
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|NOT_FOUND
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s not found in %s"
argument_list|,
name|childId
argument_list|,
name|getResourceId
argument_list|()
argument_list|)
argument_list|)
throw|;
name|response
operator|.
name|add
argument_list|(
name|childId
argument_list|,
name|mappings
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|add
argument_list|(
name|SYNONYM_MAPPINGS
argument_list|,
name|buildMapToStore
argument_list|(
name|getStoredView
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doDeleteChild
specifier|public
specifier|synchronized
name|void
name|doDeleteChild
parameter_list|(
name|BaseSolrResource
name|endpoint
parameter_list|,
name|String
name|childId
parameter_list|)
block|{
name|boolean
name|ignoreCase
init|=
name|getIgnoreCase
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|applyCaseSetting
argument_list|(
name|ignoreCase
argument_list|,
name|childId
argument_list|)
decl_stmt|;
name|CasePreservedSynonymMappings
name|cpsm
init|=
name|synonymMappings
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|cpsm
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|NOT_FOUND
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s not found in %s"
argument_list|,
name|childId
argument_list|,
name|getResourceId
argument_list|()
argument_list|)
argument_list|)
throw|;
if|if
condition|(
name|ignoreCase
condition|)
block|{
comment|// delete all mappings regardless of case
name|synonymMappings
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// just delete the mappings for the specific case-sensitive key
if|if
condition|(
name|cpsm
operator|.
name|mappings
operator|.
name|containsKey
argument_list|(
name|childId
argument_list|)
condition|)
block|{
name|cpsm
operator|.
name|mappings
operator|.
name|remove
argument_list|(
name|childId
argument_list|)
expr_stmt|;
if|if
condition|(
name|cpsm
operator|.
name|mappings
operator|.
name|isEmpty
argument_list|()
condition|)
name|synonymMappings
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|NOT_FOUND
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s not found in %s"
argument_list|,
name|childId
argument_list|,
name|getResourceId
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|// store the updated data (using the stored view)
name|storeManagedData
argument_list|(
name|getStoredView
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Removed synonym mappings for: {}"
argument_list|,
name|childId
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Custom SynonymMap.Parser implementation that provides synonym    * mappings from the managed JSON in this class during SynonymMap    * building.    */
DECL|class|ManagedSynonymParser
specifier|private
class|class
name|ManagedSynonymParser
extends|extends
name|SynonymMap
operator|.
name|Parser
block|{
DECL|field|synonymManager
name|SynonymManager
name|synonymManager
decl_stmt|;
DECL|method|ManagedSynonymParser
specifier|public
name|ManagedSynonymParser
parameter_list|(
name|SynonymManager
name|synonymManager
parameter_list|,
name|boolean
name|dedup
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
block|{
name|super
argument_list|(
name|dedup
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|this
operator|.
name|synonymManager
operator|=
name|synonymManager
expr_stmt|;
block|}
comment|/**      * Add the managed synonyms and their mappings into the SynonymMap builder.      */
annotation|@
name|Override
DECL|method|parse
specifier|public
name|void
name|parse
parameter_list|(
name|Reader
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|boolean
name|ignoreCase
init|=
name|synonymManager
operator|.
name|getIgnoreCase
argument_list|()
decl_stmt|;
for|for
control|(
name|CasePreservedSynonymMappings
name|cpsm
range|:
name|synonymManager
operator|.
name|synonymMappings
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|term
range|:
name|cpsm
operator|.
name|mappings
operator|.
name|keySet
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|mapping
range|:
name|cpsm
operator|.
name|mappings
operator|.
name|get
argument_list|(
name|term
argument_list|)
control|)
block|{
comment|// apply the case setting to match the behavior of the SynonymMap builder
name|String
name|casedTerm
init|=
name|synonymManager
operator|.
name|applyCaseSetting
argument_list|(
name|ignoreCase
argument_list|,
name|term
argument_list|)
decl_stmt|;
name|String
name|casedMapping
init|=
name|synonymManager
operator|.
name|applyCaseSetting
argument_list|(
name|ignoreCase
argument_list|,
name|mapping
argument_list|)
decl_stmt|;
name|add
argument_list|(
operator|new
name|CharsRef
argument_list|(
name|casedTerm
argument_list|)
argument_list|,
operator|new
name|CharsRef
argument_list|(
name|casedMapping
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|field|delegate
specifier|protected
name|SynonymFilterFactory
name|delegate
decl_stmt|;
DECL|method|ManagedSynonymFilterFactory
specifier|public
name|ManagedSynonymFilterFactory
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getResourceId
specifier|public
name|String
name|getResourceId
parameter_list|()
block|{
return|return
literal|"/schema/analysis/synonyms/"
operator|+
name|handle
return|;
block|}
DECL|method|getManagedResourceImplClass
specifier|protected
name|Class
argument_list|<
name|?
extends|extends
name|ManagedResource
argument_list|>
name|getManagedResourceImplClass
parameter_list|()
block|{
return|return
name|SynonymManager
operator|.
name|class
return|;
block|}
comment|/**    * Called once, during core initialization, to initialize any analysis components    * that depend on the data managed by this resource. It is important that the    * analysis component is only initialized once during core initialization so that    * text analysis is consistent, especially in a distributed environment, as we    * don't want one server applying a different set of stop words than other servers.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|onManagedResourceInitialized
specifier|public
name|void
name|onManagedResourceInitialized
parameter_list|(
name|NamedList
argument_list|<
name|?
argument_list|>
name|initArgs
parameter_list|,
specifier|final
name|ManagedResource
name|res
parameter_list|)
throws|throws
name|SolrException
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|args
init|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|initArgs
decl_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"synonyms"
argument_list|,
name|getResourceId
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"expand"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"format"
argument_list|,
literal|"solr"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filtArgs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|args
control|)
block|{
name|filtArgs
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// create the actual filter factory that pulls the synonym mappings
comment|// from synonymMappings using a custom parser implementation
name|delegate
operator|=
operator|new
name|SynonymFilterFactory
argument_list|(
name|filtArgs
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|SynonymMap
name|loadSynonyms
parameter_list|(
name|ResourceLoader
name|loader
parameter_list|,
name|String
name|cname
parameter_list|,
name|boolean
name|dedup
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|ManagedSynonymParser
name|parser
init|=
operator|new
name|ManagedSynonymParser
argument_list|(
operator|(
name|SynonymManager
operator|)
name|res
argument_list|,
name|dedup
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
comment|// null is safe here because there's no actual parsing done against a input Reader
name|parser
operator|.
name|parse
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|parser
operator|.
name|build
argument_list|()
return|;
block|}
block|}
expr_stmt|;
try|try
block|{
name|delegate
operator|.
name|inform
argument_list|(
name|res
operator|.
name|getResourceLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|create
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
if|if
condition|(
name|delegate
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" not initialized correctly! The SynonymFilterFactory delegate was not initialized."
argument_list|)
throw|;
return|return
name|delegate
operator|.
name|create
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
end_class
end_unit
