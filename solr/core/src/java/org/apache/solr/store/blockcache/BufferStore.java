begin_unit
begin_package
DECL|package|org.apache.solr.store.blockcache
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|store
operator|.
name|blockcache
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_class
DECL|class|BufferStore
specifier|public
class|class
name|BufferStore
block|{
DECL|field|LOG
specifier|public
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BufferStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|_1024
specifier|private
specifier|static
name|BlockingQueue
argument_list|<
name|byte
index|[]
argument_list|>
name|_1024
init|=
name|setupBuffers
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|_8192
specifier|private
specifier|static
name|BlockingQueue
argument_list|<
name|byte
index|[]
argument_list|>
name|_8192
init|=
name|setupBuffers
argument_list|(
literal|8192
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|shardBuffercacheLost
specifier|public
specifier|static
name|AtomicLong
name|shardBuffercacheLost
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|field|shardBuffercacheAllocate1024
specifier|public
specifier|static
name|AtomicLong
name|shardBuffercacheAllocate1024
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|field|shardBuffercacheAllocate8192
specifier|public
specifier|static
name|AtomicLong
name|shardBuffercacheAllocate8192
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|field|shardBuffercacheAllocateOther
specifier|public
specifier|static
name|AtomicLong
name|shardBuffercacheAllocateOther
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|method|init
specifier|public
specifier|static
name|void
name|init
parameter_list|(
name|int
name|_1024Size
parameter_list|,
name|int
name|_8192Size
parameter_list|,
name|Metrics
name|metrics
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing the 1024 buffers with [{}] buffers."
argument_list|,
name|_1024Size
argument_list|)
expr_stmt|;
name|_1024
operator|=
name|setupBuffers
argument_list|(
literal|1024
argument_list|,
name|_1024Size
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing the 8192 buffers with [{}] buffers."
argument_list|,
name|_8192Size
argument_list|)
expr_stmt|;
name|_8192
operator|=
name|setupBuffers
argument_list|(
literal|8192
argument_list|,
name|_8192Size
argument_list|)
expr_stmt|;
name|shardBuffercacheLost
operator|=
name|metrics
operator|.
name|shardBuffercacheLost
expr_stmt|;
name|shardBuffercacheAllocate1024
operator|=
name|metrics
operator|.
name|shardBuffercacheAllocate1024
expr_stmt|;
name|shardBuffercacheAllocate8192
operator|=
name|metrics
operator|.
name|shardBuffercacheAllocate8192
expr_stmt|;
name|shardBuffercacheAllocateOther
operator|=
name|metrics
operator|.
name|shardBuffercacheAllocateOther
expr_stmt|;
block|}
DECL|method|setupBuffers
specifier|private
specifier|static
name|BlockingQueue
argument_list|<
name|byte
index|[]
argument_list|>
name|setupBuffers
parameter_list|(
name|int
name|bufferSize
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|BlockingQueue
argument_list|<
name|byte
index|[]
argument_list|>
name|queue
init|=
operator|new
name|ArrayBlockingQueue
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|count
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|queue
operator|.
name|add
argument_list|(
operator|new
name|byte
index|[
name|bufferSize
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|queue
return|;
block|}
DECL|method|takeBuffer
specifier|public
specifier|static
name|byte
index|[]
name|takeBuffer
parameter_list|(
name|int
name|bufferSize
parameter_list|)
block|{
switch|switch
condition|(
name|bufferSize
condition|)
block|{
case|case
literal|1024
case|:
return|return
name|newBuffer1024
argument_list|(
name|_1024
operator|.
name|poll
argument_list|()
argument_list|)
return|;
case|case
literal|8192
case|:
return|return
name|newBuffer8192
argument_list|(
name|_8192
operator|.
name|poll
argument_list|()
argument_list|)
return|;
default|default:
return|return
name|newBuffer
argument_list|(
name|bufferSize
argument_list|)
return|;
block|}
block|}
DECL|method|putBuffer
specifier|public
specifier|static
name|void
name|putBuffer
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|)
block|{
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|int
name|bufferSize
init|=
name|buffer
operator|.
name|length
decl_stmt|;
switch|switch
condition|(
name|bufferSize
condition|)
block|{
case|case
literal|1024
case|:
name|checkReturn
argument_list|(
name|_1024
operator|.
name|offer
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
return|return;
case|case
literal|8192
case|:
name|checkReturn
argument_list|(
name|_8192
operator|.
name|offer
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
DECL|method|checkReturn
specifier|private
specifier|static
name|void
name|checkReturn
parameter_list|(
name|boolean
name|offer
parameter_list|)
block|{
if|if
condition|(
operator|!
name|offer
condition|)
block|{
name|shardBuffercacheLost
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|newBuffer1024
specifier|private
specifier|static
name|byte
index|[]
name|newBuffer1024
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|)
block|{
if|if
condition|(
name|buf
operator|!=
literal|null
condition|)
block|{
return|return
name|buf
return|;
block|}
name|shardBuffercacheAllocate1024
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
operator|new
name|byte
index|[
literal|1024
index|]
return|;
block|}
DECL|method|newBuffer8192
specifier|private
specifier|static
name|byte
index|[]
name|newBuffer8192
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|)
block|{
if|if
condition|(
name|buf
operator|!=
literal|null
condition|)
block|{
return|return
name|buf
return|;
block|}
name|shardBuffercacheAllocate8192
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
operator|new
name|byte
index|[
literal|8192
index|]
return|;
block|}
DECL|method|newBuffer
specifier|private
specifier|static
name|byte
index|[]
name|newBuffer
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|shardBuffercacheAllocateOther
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
operator|new
name|byte
index|[
name|size
index|]
return|;
block|}
block|}
end_class
end_unit
