begin_unit
begin_package
DECL|package|org.apache.solr.store.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|store
operator|.
name|hdfs
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Lock
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|LockFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|LockReleaseFailedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_class
DECL|class|HdfsLockFactory
specifier|public
class|class
name|HdfsLockFactory
extends|extends
name|LockFactory
block|{
DECL|field|lockPath
specifier|private
name|Path
name|lockPath
decl_stmt|;
DECL|field|configuration
specifier|private
name|Configuration
name|configuration
decl_stmt|;
DECL|method|HdfsLockFactory
specifier|public
name|HdfsLockFactory
parameter_list|(
name|Path
name|lockPath
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|lockPath
operator|=
name|lockPath
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|makeLock
specifier|public
name|Lock
name|makeLock
parameter_list|(
name|String
name|lockName
parameter_list|)
block|{
if|if
condition|(
name|lockPrefix
operator|!=
literal|null
condition|)
block|{
name|lockName
operator|=
name|lockPrefix
operator|+
literal|"-"
operator|+
name|lockName
expr_stmt|;
block|}
name|HdfsLock
name|lock
init|=
operator|new
name|HdfsLock
argument_list|(
name|lockPath
argument_list|,
name|lockName
argument_list|,
name|configuration
argument_list|)
decl_stmt|;
return|return
name|lock
return|;
block|}
annotation|@
name|Override
DECL|method|clearLock
specifier|public
name|void
name|clearLock
parameter_list|(
name|String
name|lockName
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|newInstance
argument_list|(
name|lockPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|lockPath
argument_list|)
condition|)
block|{
if|if
condition|(
name|lockPrefix
operator|!=
literal|null
condition|)
block|{
name|lockName
operator|=
name|lockPrefix
operator|+
literal|"-"
operator|+
name|lockName
expr_stmt|;
block|}
name|Path
name|lockFile
init|=
operator|new
name|Path
argument_list|(
name|lockPath
argument_list|,
name|lockName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|lockFile
argument_list|)
operator|&&
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|lockFile
argument_list|,
literal|false
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot delete "
operator|+
name|lockFile
argument_list|)
throw|;
block|}
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getLockPath
specifier|public
name|Path
name|getLockPath
parameter_list|()
block|{
return|return
name|lockPath
return|;
block|}
DECL|method|setLockPath
specifier|public
name|void
name|setLockPath
parameter_list|(
name|Path
name|lockPath
parameter_list|)
block|{
name|this
operator|.
name|lockPath
operator|=
name|lockPath
expr_stmt|;
block|}
DECL|class|HdfsLock
specifier|static
class|class
name|HdfsLock
extends|extends
name|Lock
block|{
DECL|field|lockPath
specifier|private
name|Path
name|lockPath
decl_stmt|;
DECL|field|lockName
specifier|private
name|String
name|lockName
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|method|HdfsLock
specifier|public
name|HdfsLock
parameter_list|(
name|Path
name|lockPath
parameter_list|,
name|String
name|lockName
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|lockPath
operator|=
name|lockPath
expr_stmt|;
name|this
operator|.
name|lockName
operator|=
name|lockName
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|obtain
specifier|public
name|boolean
name|obtain
parameter_list|()
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|file
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|newInstance
argument_list|(
name|lockPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|file
operator|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|lockPath
argument_list|,
name|lockName
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|release
specifier|public
name|void
name|release
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|newInstance
argument_list|(
name|lockPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|lockPath
argument_list|,
name|lockName
argument_list|)
argument_list|)
operator|&&
operator|!
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|lockPath
argument_list|,
name|lockName
argument_list|)
argument_list|,
literal|false
argument_list|)
condition|)
throw|throw
operator|new
name|LockReleaseFailedException
argument_list|(
literal|"failed to delete "
operator|+
operator|new
name|Path
argument_list|(
name|lockPath
argument_list|,
name|lockName
argument_list|)
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|isLocked
specifier|public
name|boolean
name|isLocked
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|isLocked
init|=
literal|false
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|newInstance
argument_list|(
name|lockPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|isLocked
operator|=
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|lockPath
argument_list|,
name|lockName
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
return|return
name|isLocked
return|;
block|}
block|}
block|}
end_class
end_unit
