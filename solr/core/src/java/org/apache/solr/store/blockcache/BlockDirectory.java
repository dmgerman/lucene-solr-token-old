begin_unit
begin_package
DECL|package|org.apache.solr.store.blockcache
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|store
operator|.
name|blockcache
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FilterDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|store
operator|.
name|hdfs
operator|.
name|HdfsDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * @lucene.experimental  */
end_comment
begin_class
DECL|class|BlockDirectory
specifier|public
class|class
name|BlockDirectory
extends|extends
name|FilterDirectory
block|{
DECL|field|LOG
specifier|public
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BlockDirectory
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|BLOCK_SHIFT
specifier|public
specifier|static
specifier|final
name|long
name|BLOCK_SHIFT
init|=
literal|13
decl_stmt|;
comment|// 2^13 = 8,192 bytes per block
DECL|field|BLOCK_MOD
specifier|public
specifier|static
specifier|final
name|long
name|BLOCK_MOD
init|=
literal|0x1FFF
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|1
operator|<<
name|BLOCK_SHIFT
decl_stmt|;
DECL|method|getBlock
specifier|public
specifier|static
name|long
name|getBlock
parameter_list|(
name|long
name|pos
parameter_list|)
block|{
return|return
name|pos
operator|>>>
name|BLOCK_SHIFT
return|;
block|}
DECL|method|getPosition
specifier|public
specifier|static
name|long
name|getPosition
parameter_list|(
name|long
name|pos
parameter_list|)
block|{
return|return
name|pos
operator|&
name|BLOCK_MOD
return|;
block|}
DECL|method|getRealPosition
specifier|public
specifier|static
name|long
name|getRealPosition
parameter_list|(
name|long
name|block
parameter_list|,
name|long
name|positionInBlock
parameter_list|)
block|{
return|return
operator|(
name|block
operator|<<
name|BLOCK_SHIFT
operator|)
operator|+
name|positionInBlock
return|;
block|}
DECL|field|NO_CACHE
specifier|public
specifier|static
name|Cache
name|NO_CACHE
init|=
operator|new
name|Cache
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|blockId
parameter_list|,
name|int
name|blockOffset
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{}
annotation|@
name|Override
specifier|public
name|boolean
name|fetch
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|blockId
parameter_list|,
name|int
name|blockOffset
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|lengthToReadInBlock
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|(
name|String
name|name
parameter_list|)
block|{            }
annotation|@
name|Override
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|renameCacheFile
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|dest
parameter_list|)
block|{}
annotation|@
name|Override
specifier|public
name|void
name|releaseResources
parameter_list|()
block|{}
block|}
decl_stmt|;
DECL|field|blockSize
specifier|private
specifier|final
name|int
name|blockSize
decl_stmt|;
DECL|field|dirName
specifier|private
specifier|final
name|String
name|dirName
decl_stmt|;
DECL|field|cache
specifier|private
specifier|final
name|Cache
name|cache
decl_stmt|;
DECL|field|blockCacheFileTypes
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|blockCacheFileTypes
decl_stmt|;
DECL|field|blockCacheReadEnabled
specifier|private
specifier|final
name|boolean
name|blockCacheReadEnabled
decl_stmt|;
DECL|field|blockCacheWriteEnabled
specifier|private
specifier|final
name|boolean
name|blockCacheWriteEnabled
decl_stmt|;
DECL|method|BlockDirectory
specifier|public
name|BlockDirectory
parameter_list|(
name|String
name|dirName
parameter_list|,
name|Directory
name|directory
parameter_list|,
name|Cache
name|cache
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|blockCacheFileTypes
parameter_list|,
name|boolean
name|blockCacheReadEnabled
parameter_list|,
name|boolean
name|blockCacheWriteEnabled
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|this
operator|.
name|dirName
operator|=
name|dirName
expr_stmt|;
name|blockSize
operator|=
name|BLOCK_SIZE
expr_stmt|;
name|this
operator|.
name|cache
operator|=
name|cache
expr_stmt|;
if|if
condition|(
name|blockCacheFileTypes
operator|==
literal|null
operator|||
name|blockCacheFileTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|blockCacheFileTypes
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|blockCacheFileTypes
operator|=
name|blockCacheFileTypes
expr_stmt|;
block|}
name|this
operator|.
name|blockCacheReadEnabled
operator|=
name|blockCacheReadEnabled
expr_stmt|;
if|if
condition|(
operator|!
name|blockCacheReadEnabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Block cache on read is disabled"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|blockCacheWriteEnabled
operator|=
name|blockCacheWriteEnabled
expr_stmt|;
if|if
condition|(
operator|!
name|blockCacheWriteEnabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Block cache on write is disabled"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|openInput
specifier|private
name|IndexInput
name|openInput
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|IndexInput
name|source
init|=
name|super
operator|.
name|openInput
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|useReadCache
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
condition|)
block|{
return|return
operator|new
name|CachedIndexInput
argument_list|(
name|source
argument_list|,
name|blockSize
argument_list|,
name|name
argument_list|,
name|getFileCacheName
argument_list|(
name|name
argument_list|)
argument_list|,
name|cache
argument_list|,
name|bufferSize
argument_list|)
return|;
block|}
return|return
name|source
return|;
block|}
DECL|method|isCachableFile
specifier|private
name|boolean
name|isCachableFile
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|String
name|ext
range|:
name|blockCacheFileTypes
control|)
block|{
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
name|ext
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|openInput
specifier|public
name|IndexInput
name|openInput
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|openInput
argument_list|(
name|name
argument_list|,
name|blockSize
argument_list|,
name|context
argument_list|)
return|;
block|}
DECL|class|CachedIndexInput
specifier|static
class|class
name|CachedIndexInput
extends|extends
name|CustomBufferedIndexInput
block|{
DECL|field|store
specifier|private
specifier|final
name|Store
name|store
decl_stmt|;
DECL|field|source
specifier|private
name|IndexInput
name|source
decl_stmt|;
DECL|field|blockSize
specifier|private
specifier|final
name|int
name|blockSize
decl_stmt|;
DECL|field|fileLength
specifier|private
specifier|final
name|long
name|fileLength
decl_stmt|;
DECL|field|cacheName
specifier|private
specifier|final
name|String
name|cacheName
decl_stmt|;
DECL|field|cache
specifier|private
specifier|final
name|Cache
name|cache
decl_stmt|;
DECL|method|CachedIndexInput
specifier|public
name|CachedIndexInput
parameter_list|(
name|IndexInput
name|source
parameter_list|,
name|int
name|blockSize
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|cacheName
parameter_list|,
name|Cache
name|cache
parameter_list|,
name|int
name|bufferSize
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|blockSize
operator|=
name|blockSize
expr_stmt|;
name|fileLength
operator|=
name|source
operator|.
name|length
argument_list|()
expr_stmt|;
name|this
operator|.
name|cacheName
operator|=
name|cacheName
expr_stmt|;
name|this
operator|.
name|cache
operator|=
name|cache
expr_stmt|;
name|store
operator|=
name|BufferStore
operator|.
name|instance
argument_list|(
name|blockSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
name|IndexInput
name|clone
parameter_list|()
block|{
name|CachedIndexInput
name|clone
init|=
operator|(
name|CachedIndexInput
operator|)
name|super
operator|.
name|clone
argument_list|()
decl_stmt|;
name|clone
operator|.
name|source
operator|=
operator|(
name|IndexInput
operator|)
name|source
operator|.
name|clone
argument_list|()
expr_stmt|;
return|return
name|clone
return|;
block|}
annotation|@
name|Override
DECL|method|length
specifier|public
name|long
name|length
parameter_list|()
block|{
return|return
name|source
operator|.
name|length
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|seekInternal
specifier|protected
name|void
name|seekInternal
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
DECL|method|readInternal
specifier|protected
name|void
name|readInternal
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|position
init|=
name|getFilePointer
argument_list|()
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|int
name|length
init|=
name|fetchBlock
argument_list|(
name|position
argument_list|,
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|position
operator|+=
name|length
expr_stmt|;
name|len
operator|-=
name|length
expr_stmt|;
name|off
operator|+=
name|length
expr_stmt|;
block|}
block|}
DECL|method|fetchBlock
specifier|private
name|int
name|fetchBlock
parameter_list|(
name|long
name|position
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
comment|// read whole block into cache and then provide needed data
name|long
name|blockId
init|=
name|getBlock
argument_list|(
name|position
argument_list|)
decl_stmt|;
name|int
name|blockOffset
init|=
operator|(
name|int
operator|)
name|getPosition
argument_list|(
name|position
argument_list|)
decl_stmt|;
name|int
name|lengthToReadInBlock
init|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|blockSize
operator|-
name|blockOffset
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkCache
argument_list|(
name|blockId
argument_list|,
name|blockOffset
argument_list|,
name|b
argument_list|,
name|off
argument_list|,
name|lengthToReadInBlock
argument_list|)
condition|)
block|{
return|return
name|lengthToReadInBlock
return|;
block|}
else|else
block|{
name|readIntoCacheAndResult
argument_list|(
name|blockId
argument_list|,
name|blockOffset
argument_list|,
name|b
argument_list|,
name|off
argument_list|,
name|lengthToReadInBlock
argument_list|)
expr_stmt|;
block|}
return|return
name|lengthToReadInBlock
return|;
block|}
DECL|method|readIntoCacheAndResult
specifier|private
name|void
name|readIntoCacheAndResult
parameter_list|(
name|long
name|blockId
parameter_list|,
name|int
name|blockOffset
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|lengthToReadInBlock
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|position
init|=
name|getRealPosition
argument_list|(
name|blockId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|length
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|blockSize
argument_list|,
name|fileLength
operator|-
name|position
argument_list|)
decl_stmt|;
name|source
operator|.
name|seek
argument_list|(
name|position
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buf
init|=
name|store
operator|.
name|takeBuffer
argument_list|(
name|blockSize
argument_list|)
decl_stmt|;
name|source
operator|.
name|readBytes
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buf
argument_list|,
name|blockOffset
argument_list|,
name|b
argument_list|,
name|off
argument_list|,
name|lengthToReadInBlock
argument_list|)
expr_stmt|;
name|cache
operator|.
name|update
argument_list|(
name|cacheName
argument_list|,
name|blockId
argument_list|,
literal|0
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|store
operator|.
name|putBuffer
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
DECL|method|checkCache
specifier|private
name|boolean
name|checkCache
parameter_list|(
name|long
name|blockId
parameter_list|,
name|int
name|blockOffset
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|lengthToReadInBlock
parameter_list|)
block|{
return|return
name|cache
operator|.
name|fetch
argument_list|(
name|cacheName
argument_list|,
name|blockId
argument_list|,
name|blockOffset
argument_list|,
name|b
argument_list|,
name|off
argument_list|,
name|lengthToReadInBlock
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|closeInternal
specifier|protected
name|void
name|closeInternal
parameter_list|()
throws|throws
name|IOException
block|{
name|source
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
name|listAll
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|cache
operator|.
name|delete
argument_list|(
name|getFileCacheName
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// the local file system folder may be gone
block|}
finally|finally
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|cache
operator|.
name|releaseResources
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getFileCacheName
name|String
name|getFileCacheName
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getFileCacheLocation
argument_list|(
name|name
argument_list|)
operator|+
literal|":"
operator|+
name|getFileModified
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|getFileModified
specifier|private
name|long
name|getFileModified
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|in
operator|instanceof
name|FSDirectory
condition|)
block|{
name|File
name|directory
init|=
operator|(
operator|(
name|FSDirectory
operator|)
name|in
operator|)
operator|.
name|getDirectory
argument_list|()
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File ["
operator|+
name|name
operator|+
literal|"] not found"
argument_list|)
throw|;
block|}
return|return
name|file
operator|.
name|lastModified
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|in
operator|instanceof
name|HdfsDirectory
condition|)
block|{
return|return
operator|(
operator|(
name|HdfsDirectory
operator|)
name|in
operator|)
operator|.
name|fileModified
argument_list|(
name|name
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
DECL|method|getFileCacheLocation
name|String
name|getFileCacheLocation
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|dirName
operator|+
literal|"/"
operator|+
name|name
return|;
block|}
comment|/**    * Expert: mostly for tests    *     * @lucene.experimental    */
DECL|method|getCache
specifier|public
name|Cache
name|getCache
parameter_list|()
block|{
return|return
name|cache
return|;
block|}
comment|/**    * Determine whether read caching should be used for a particular    * file/context.    */
DECL|method|useReadCache
name|boolean
name|useReadCache
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
block|{
if|if
condition|(
operator|!
name|blockCacheReadEnabled
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|blockCacheFileTypes
operator|!=
literal|null
operator|&&
operator|!
name|isCachableFile
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|context
operator|.
name|context
condition|)
block|{
default|default:
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
comment|/**    * Determine whether write caching should be used for a particular    * file/context.    */
DECL|method|useWriteCache
name|boolean
name|useWriteCache
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
block|{
if|if
condition|(
operator|!
name|blockCacheWriteEnabled
operator|||
name|name
operator|.
name|startsWith
argument_list|(
name|IndexFileNames
operator|.
name|PENDING_SEGMENTS
argument_list|)
condition|)
block|{
comment|// for safety, don't bother caching pending commits.
comment|// the cache does support renaming (renameCacheFile), but thats a scary optimization.
return|return
literal|false
return|;
block|}
if|if
condition|(
name|blockCacheFileTypes
operator|!=
literal|null
operator|&&
operator|!
name|isCachableFile
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|context
operator|.
name|context
condition|)
block|{
case|case
name|MERGE
case|:
block|{
comment|// we currently don't cache any merge context writes
return|return
literal|false
return|;
block|}
default|default:
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|createOutput
specifier|public
name|IndexOutput
name|createOutput
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|IndexOutput
name|dest
init|=
name|super
operator|.
name|createOutput
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|useWriteCache
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
condition|)
block|{
return|return
operator|new
name|CachedIndexOutput
argument_list|(
name|this
argument_list|,
name|dest
argument_list|,
name|blockSize
argument_list|,
name|name
argument_list|,
name|cache
argument_list|,
name|blockSize
argument_list|)
return|;
block|}
return|return
name|dest
return|;
block|}
DECL|method|deleteFile
specifier|public
name|void
name|deleteFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|cache
operator|.
name|delete
argument_list|(
name|getFileCacheName
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|deleteFile
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|isBlockCacheReadEnabled
specifier|public
name|boolean
name|isBlockCacheReadEnabled
parameter_list|()
block|{
return|return
name|blockCacheReadEnabled
return|;
block|}
DECL|method|isBlockCacheWriteEnabled
specifier|public
name|boolean
name|isBlockCacheWriteEnabled
parameter_list|()
block|{
return|return
name|blockCacheWriteEnabled
return|;
block|}
block|}
end_class
end_unit
