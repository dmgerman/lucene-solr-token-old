begin_unit
begin_package
DECL|package|org.apache.solr.store.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|store
operator|.
name|hdfs
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|BaseDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|BufferedIndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|NoLockFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|store
operator|.
name|blockcache
operator|.
name|CustomBufferedIndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_class
DECL|class|HdfsDirectory
specifier|public
class|class
name|HdfsDirectory
extends|extends
name|BaseDirectory
block|{
DECL|field|LOG
specifier|public
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HdfsDirectory
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|BUFFER_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|BUFFER_SIZE
init|=
literal|8192
decl_stmt|;
DECL|field|LF_EXT
specifier|private
specifier|static
specifier|final
name|String
name|LF_EXT
init|=
literal|".lf"
decl_stmt|;
DECL|field|SEGMENTS_GEN
specifier|protected
specifier|static
specifier|final
name|String
name|SEGMENTS_GEN
init|=
literal|"segments.gen"
decl_stmt|;
DECL|field|hdfsDirPath
specifier|protected
name|Path
name|hdfsDirPath
decl_stmt|;
DECL|field|configuration
specifier|protected
name|Configuration
name|configuration
decl_stmt|;
DECL|field|fileSystem
specifier|private
specifier|final
name|FileSystem
name|fileSystem
decl_stmt|;
DECL|method|HdfsDirectory
specifier|public
name|HdfsDirectory
parameter_list|(
name|Path
name|hdfsDirPath
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|hdfsDirPath
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"hdfs:/"
argument_list|)
operator|:
name|hdfsDirPath
operator|.
name|toString
argument_list|()
assert|;
name|setLockFactory
argument_list|(
name|NoLockFactory
operator|.
name|getNoLockFactory
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|hdfsDirPath
operator|=
name|hdfsDirPath
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|fileSystem
operator|=
name|FileSystem
operator|.
name|newInstance
argument_list|(
name|hdfsDirPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|fileSystem
operator|.
name|exists
argument_list|(
name|hdfsDirPath
argument_list|)
condition|)
block|{
name|fileSystem
operator|.
name|mkdirs
argument_list|(
name|hdfsDirPath
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|fileSystem
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Problem creating directory: "
operator|+
name|hdfsDirPath
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing hdfs directory {}"
argument_list|,
name|hdfsDirPath
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createOutput
specifier|public
name|IndexOutput
name|createOutput
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|SEGMENTS_GEN
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
operator|new
name|NullIndexOutput
argument_list|()
return|;
block|}
name|HdfsFileWriter
name|writer
init|=
operator|new
name|HdfsFileWriter
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|hdfsDirPath
argument_list|,
name|name
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|HdfsIndexOutput
argument_list|(
name|writer
argument_list|)
return|;
block|}
DECL|method|getNormalNames
specifier|private
name|String
index|[]
name|getNormalNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|files
parameter_list|)
block|{
name|int
name|size
init|=
name|files
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|String
name|str
init|=
name|files
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|files
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|toNormalName
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|files
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
return|;
block|}
DECL|method|toNormalName
specifier|private
name|String
name|toNormalName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
name|LF_EXT
argument_list|)
condition|)
block|{
return|return
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|-
literal|3
argument_list|)
return|;
block|}
return|return
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|openInput
specifier|public
name|IndexInput
name|openInput
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|openInput
argument_list|(
name|name
argument_list|,
name|BUFFER_SIZE
argument_list|)
return|;
block|}
DECL|method|openInput
specifier|private
name|IndexInput
name|openInput
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|HdfsNormalIndexInput
argument_list|(
name|name
argument_list|,
name|getFileSystem
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|hdfsDirPath
argument_list|,
name|name
argument_list|)
argument_list|,
name|BUFFER_SIZE
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|deleteFile
specifier|public
name|void
name|deleteFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|hdfsDirPath
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fileExists
specifier|public
name|boolean
name|fileExists
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|hdfsDirPath
argument_list|,
name|name
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|fileLength
specifier|public
name|long
name|fileLength
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|HdfsFileReader
operator|.
name|getLength
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|hdfsDirPath
argument_list|,
name|name
argument_list|)
argument_list|)
return|;
block|}
DECL|method|fileModified
specifier|public
name|long
name|fileModified
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|fileStatus
init|=
name|getFileSystem
argument_list|()
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|hdfsDirPath
argument_list|,
name|name
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|fileStatus
operator|.
name|getModificationTime
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|listAll
specifier|public
name|String
index|[]
name|listAll
parameter_list|()
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|listStatus
init|=
name|getFileSystem
argument_list|()
operator|.
name|listStatus
argument_list|(
name|hdfsDirPath
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|listStatus
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|String
index|[]
block|{}
return|;
block|}
for|for
control|(
name|FileStatus
name|status
range|:
name|listStatus
control|)
block|{
if|if
condition|(
operator|!
name|status
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|files
operator|.
name|add
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|getNormalNames
argument_list|(
name|files
argument_list|)
return|;
block|}
DECL|method|getHdfsDirPath
specifier|public
name|Path
name|getHdfsDirPath
parameter_list|()
block|{
return|return
name|hdfsDirPath
return|;
block|}
DECL|method|getFileSystem
specifier|public
name|FileSystem
name|getFileSystem
parameter_list|()
block|{
return|return
name|fileSystem
return|;
block|}
DECL|method|getConfiguration
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|class|HdfsNormalIndexInput
specifier|static
class|class
name|HdfsNormalIndexInput
extends|extends
name|CustomBufferedIndexInput
block|{
DECL|field|LOG
specifier|public
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HdfsNormalIndexInput
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|Path
name|path
decl_stmt|;
DECL|field|inputStream
specifier|private
specifier|final
name|FSDataInputStream
name|inputStream
decl_stmt|;
DECL|field|length
specifier|private
specifier|final
name|long
name|length
decl_stmt|;
DECL|field|clone
specifier|private
name|boolean
name|clone
init|=
literal|false
decl_stmt|;
DECL|method|HdfsNormalIndexInput
specifier|public
name|HdfsNormalIndexInput
parameter_list|(
name|String
name|name
parameter_list|,
name|FileSystem
name|fileSystem
parameter_list|,
name|Path
name|path
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Opening normal index input on {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|FileStatus
name|fileStatus
init|=
name|fileSystem
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|length
operator|=
name|fileStatus
operator|.
name|getLen
argument_list|()
expr_stmt|;
name|inputStream
operator|=
name|fileSystem
operator|.
name|open
argument_list|(
name|path
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readInternal
specifier|protected
name|void
name|readInternal
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|inputStream
operator|.
name|read
argument_list|(
name|getFilePointer
argument_list|()
argument_list|,
name|b
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|seekInternal
specifier|protected
name|void
name|seekInternal
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
name|inputStream
operator|.
name|seek
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|closeInternal
specifier|protected
name|void
name|closeInternal
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closing normal index input on {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|clone
condition|)
block|{
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|length
specifier|public
name|long
name|length
parameter_list|()
block|{
return|return
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
name|IndexInput
name|clone
parameter_list|()
block|{
name|HdfsNormalIndexInput
name|clone
init|=
operator|(
name|HdfsNormalIndexInput
operator|)
name|super
operator|.
name|clone
argument_list|()
decl_stmt|;
name|clone
operator|.
name|clone
operator|=
literal|true
expr_stmt|;
return|return
name|clone
return|;
block|}
block|}
DECL|class|HdfsIndexOutput
specifier|static
class|class
name|HdfsIndexOutput
extends|extends
name|BufferedIndexOutput
block|{
DECL|field|writer
specifier|private
name|HdfsFileWriter
name|writer
decl_stmt|;
DECL|method|HdfsIndexOutput
specifier|public
name|HdfsIndexOutput
parameter_list|(
name|HdfsFileWriter
name|writer
parameter_list|)
block|{
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|IOException
name|priorE
init|=
literal|null
decl_stmt|;
try|try
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|priorE
operator|=
name|ioe
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|priorE
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|flushBuffer
specifier|protected
name|void
name|flushBuffer
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|writeBytes
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|length
specifier|public
name|long
name|length
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|writer
operator|.
name|length
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|sync
specifier|public
name|void
name|sync
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Sync called on {}"
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|names
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
