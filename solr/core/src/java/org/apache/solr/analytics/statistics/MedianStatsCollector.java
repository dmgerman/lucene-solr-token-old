begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analytics.statistics
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analytics
operator|.
name|statistics
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analytics
operator|.
name|util
operator|.
name|MedianCalculator
import|;
end_import
begin_comment
comment|/**  *<code>MedianStatsCollector</code> computes the median.  */
end_comment
begin_class
DECL|class|MedianStatsCollector
specifier|public
class|class
name|MedianStatsCollector
extends|extends
name|AbstractDelegatingStatsCollector
block|{
DECL|field|values
specifier|private
specifier|final
name|List
argument_list|<
name|Double
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Double
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|median
specifier|protected
name|double
name|median
decl_stmt|;
DECL|method|MedianStatsCollector
specifier|public
name|MedianStatsCollector
parameter_list|(
name|StatsCollector
name|delegate
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
DECL|method|getMedian
specifier|public
name|Double
name|getMedian
parameter_list|()
block|{
return|return
operator|new
name|Double
argument_list|(
name|MedianCalculator
operator|.
name|getMedian
argument_list|(
name|values
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getStat
specifier|public
name|Comparable
name|getStat
parameter_list|(
name|String
name|stat
parameter_list|)
block|{
if|if
condition|(
name|stat
operator|.
name|equals
argument_list|(
literal|"median"
argument_list|)
condition|)
block|{
return|return
operator|new
name|Double
argument_list|(
name|median
argument_list|)
return|;
block|}
return|return
name|delegate
operator|.
name|getStat
argument_list|(
name|stat
argument_list|)
return|;
block|}
DECL|method|compute
specifier|public
name|void
name|compute
parameter_list|()
block|{
name|delegate
operator|.
name|compute
argument_list|()
expr_stmt|;
name|median
operator|=
name|getMedian
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|super
operator|.
name|collect
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|exists
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
name|function
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
begin_class
DECL|class|DateMedianStatsCollector
class|class
name|DateMedianStatsCollector
extends|extends
name|MedianStatsCollector
block|{
DECL|method|DateMedianStatsCollector
specifier|public
name|DateMedianStatsCollector
parameter_list|(
name|StatsCollector
name|delegate
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getStat
specifier|public
name|Comparable
name|getStat
parameter_list|(
name|String
name|stat
parameter_list|)
block|{
if|if
condition|(
name|stat
operator|.
name|equals
argument_list|(
literal|"median"
argument_list|)
condition|)
block|{
return|return
operator|new
name|Date
argument_list|(
operator|(
name|long
operator|)
name|median
argument_list|)
return|;
block|}
return|return
name|delegate
operator|.
name|getStat
argument_list|(
name|stat
argument_list|)
return|;
block|}
block|}
end_class
end_unit
