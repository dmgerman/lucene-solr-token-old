begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analytics.expression
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analytics
operator|.
name|expression
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_comment
comment|/**  * Abstraction of an expression that applies a function to one delegate expression.  */
end_comment
begin_class
DECL|class|SingleDelegateExpression
specifier|public
specifier|abstract
class|class
name|SingleDelegateExpression
extends|extends
name|Expression
block|{
DECL|field|delegate
specifier|protected
name|Expression
name|delegate
decl_stmt|;
DECL|method|SingleDelegateExpression
specifier|public
name|SingleDelegateExpression
parameter_list|(
name|Expression
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
block|}
end_class
begin_comment
comment|/**  *<code>NegateExpression</code> returns the negation of the delegate's value.  */
end_comment
begin_class
DECL|class|NegateExpression
class|class
name|NegateExpression
extends|extends
name|SingleDelegateExpression
block|{
DECL|method|NegateExpression
specifier|public
name|NegateExpression
parameter_list|(
name|Expression
name|delegate
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getValue
specifier|public
name|Comparable
name|getValue
parameter_list|()
block|{
name|Comparable
name|nComp
init|=
name|delegate
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|nComp
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|nComp
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|Date
operator|.
name|class
argument_list|)
condition|)
block|{
name|nComp
operator|=
operator|new
name|Long
argument_list|(
operator|(
operator|(
name|Date
operator|)
name|nComp
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Double
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|nComp
operator|)
operator|.
name|doubleValue
argument_list|()
operator|*
operator|-
literal|1
argument_list|)
return|;
block|}
block|}
end_class
begin_comment
comment|/**  *<code>AbsoluteValueExpression</code> returns the negation of the delegate's value.  */
end_comment
begin_class
DECL|class|AbsoluteValueExpression
class|class
name|AbsoluteValueExpression
extends|extends
name|SingleDelegateExpression
block|{
DECL|method|AbsoluteValueExpression
specifier|public
name|AbsoluteValueExpression
parameter_list|(
name|Expression
name|delegate
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getValue
specifier|public
name|Comparable
name|getValue
parameter_list|()
block|{
name|Comparable
name|nComp
init|=
name|delegate
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|nComp
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|double
name|d
init|=
operator|(
operator|(
name|Number
operator|)
name|nComp
operator|)
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|<
literal|0
condition|)
block|{
return|return
operator|new
name|Double
argument_list|(
name|d
operator|*
operator|-
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|Double
argument_list|(
name|d
argument_list|)
return|;
block|}
block|}
block|}
end_class
begin_comment
comment|/**  *<code>StringExpression</code> returns the reverse of the delegate's string value.  */
end_comment
begin_class
DECL|class|ReverseExpression
class|class
name|ReverseExpression
extends|extends
name|SingleDelegateExpression
block|{
DECL|method|ReverseExpression
specifier|public
name|ReverseExpression
parameter_list|(
name|Expression
name|delegate
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getValue
specifier|public
name|Comparable
name|getValue
parameter_list|()
block|{
name|Comparable
name|rComp
init|=
name|delegate
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|rComp
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|StringBuilder
argument_list|(
name|rComp
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|reverse
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class
end_unit
