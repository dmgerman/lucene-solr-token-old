begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analytics.expression
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analytics
operator|.
name|expression
package|;
end_package
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analytics
operator|.
name|statistics
operator|.
name|StatsCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analytics
operator|.
name|util
operator|.
name|AnalyticsParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|TrieDateField
import|;
end_import
begin_class
DECL|class|ExpressionFactory
specifier|public
class|class
name|ExpressionFactory
block|{
comment|/**    * Creates a single expression that contains delegate expressions and/or     * a StatsCollector.    * StatsCollectors are given as input and not created within the method so that    * expressions can share the same StatsCollectors, minimizing computation.    *     * @param expression String representation of the desired expression    * @param statsCollectors List of StatsCollectors to build the expression with.     * @return the expression    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|create
specifier|public
specifier|static
name|Expression
name|create
parameter_list|(
name|String
name|expression
parameter_list|,
name|StatsCollector
index|[]
name|statsCollectors
parameter_list|)
block|{
name|int
name|paren
init|=
name|expression
operator|.
name|indexOf
argument_list|(
literal|'('
argument_list|)
decl_stmt|;
if|if
condition|(
name|paren
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"The expression ["
operator|+
name|expression
operator|+
literal|"] has no arguments and is not supported."
argument_list|)
throw|;
block|}
name|String
name|topOperation
init|=
name|expression
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|paren
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|operands
decl_stmt|;
try|try
block|{
name|operands
operator|=
name|expression
operator|.
name|substring
argument_list|(
name|paren
operator|+
literal|1
argument_list|,
name|expression
operator|.
name|lastIndexOf
argument_list|(
literal|')'
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Missing closing parenthesis in ["
operator|+
name|expression
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// Builds a statistic, constant or recursively builds an expression tree
comment|// Statistic
if|if
condition|(
name|AnalyticsParams
operator|.
name|ALL_STAT_SET
operator|.
name|contains
argument_list|(
name|topOperation
argument_list|)
condition|)
block|{
if|if
condition|(
name|topOperation
operator|.
name|equals
argument_list|(
name|AnalyticsParams
operator|.
name|STAT_PERCENTILE
argument_list|)
condition|)
block|{
name|operands
operator|=
name|expression
operator|.
name|substring
argument_list|(
name|expression
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
operator|+
literal|1
argument_list|,
name|expression
operator|.
name|lastIndexOf
argument_list|(
literal|')'
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|topOperation
operator|=
name|topOperation
operator|+
literal|"_"
operator|+
name|expression
operator|.
name|substring
argument_list|(
name|expression
operator|.
name|indexOf
argument_list|(
literal|'('
argument_list|)
operator|+
literal|1
argument_list|,
name|expression
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|StatsCollector
name|collector
init|=
literal|null
decl_stmt|;
comment|// Finds the desired counter and builds an expression around it and the desired statistic.
for|for
control|(
name|StatsCollector
name|c
range|:
name|statsCollectors
control|)
block|{
if|if
condition|(
name|c
operator|.
name|valueSourceString
argument_list|()
operator|.
name|equals
argument_list|(
name|operands
argument_list|)
condition|)
block|{
name|collector
operator|=
name|c
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|collector
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"ValueSource ["
operator|+
name|operands
operator|+
literal|"] in Expression ["
operator|+
name|expression
operator|+
literal|"] not found."
argument_list|)
throw|;
block|}
return|return
operator|new
name|BaseExpression
argument_list|(
name|collector
argument_list|,
name|topOperation
argument_list|)
return|;
block|}
comment|// Constant
if|if
condition|(
name|topOperation
operator|.
name|equals
argument_list|(
name|AnalyticsParams
operator|.
name|CONSTANT_NUMBER
argument_list|)
condition|)
block|{
try|try
block|{
return|return
operator|new
name|ConstantNumberExpression
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|operands
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"The constant "
operator|+
name|operands
operator|+
literal|" cannot be converted into a number."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|topOperation
operator|.
name|equals
argument_list|(
name|AnalyticsParams
operator|.
name|CONSTANT_DATE
argument_list|)
condition|)
block|{
try|try
block|{
return|return
operator|new
name|ConstantDateExpression
argument_list|(
name|TrieDateField
operator|.
name|parseDate
argument_list|(
name|operands
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"The constant "
operator|+
name|operands
operator|+
literal|" cannot be converted into a date."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|topOperation
operator|.
name|equals
argument_list|(
name|AnalyticsParams
operator|.
name|CONSTANT_STRING
argument_list|)
condition|)
block|{
name|operands
operator|=
name|expression
operator|.
name|substring
argument_list|(
name|paren
operator|+
literal|1
argument_list|,
name|expression
operator|.
name|lastIndexOf
argument_list|(
literal|')'
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|ConstantStringExpression
argument_list|(
name|operands
argument_list|)
return|;
block|}
comment|// Complex Delegating Expressions
name|String
index|[]
name|arguments
init|=
name|getArguments
argument_list|(
name|operands
argument_list|)
decl_stmt|;
name|Expression
index|[]
name|expArgs
init|=
operator|new
name|Expression
index|[
name|arguments
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|count
init|=
literal|0
init|;
name|count
operator|<
name|arguments
operator|.
name|length
condition|;
name|count
operator|++
control|)
block|{
comment|// Recursively builds delegate expressions
name|expArgs
index|[
name|count
index|]
operator|=
name|create
argument_list|(
name|arguments
index|[
name|count
index|]
argument_list|,
name|statsCollectors
argument_list|)
expr_stmt|;
block|}
comment|// Single Delegate Expressions
if|if
condition|(
name|expArgs
operator|.
name|length
operator|==
literal|1
condition|)
block|{
comment|// Numeric Expression
if|if
condition|(
name|topOperation
operator|.
name|equals
argument_list|(
name|AnalyticsParams
operator|.
name|NEGATE
argument_list|)
condition|)
block|{
return|return
operator|new
name|NegateExpression
argument_list|(
name|expArgs
index|[
literal|0
index|]
argument_list|)
return|;
block|}
if|if
condition|(
name|topOperation
operator|.
name|equals
argument_list|(
name|AnalyticsParams
operator|.
name|ABSOLUTE_VALUE
argument_list|)
condition|)
block|{
return|return
operator|new
name|AbsoluteValueExpression
argument_list|(
name|expArgs
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|// String Expression
elseif|else
if|if
condition|(
name|topOperation
operator|.
name|equals
argument_list|(
name|AnalyticsParams
operator|.
name|REVERSE
argument_list|)
condition|)
block|{
return|return
operator|new
name|ReverseExpression
argument_list|(
name|expArgs
index|[
literal|0
index|]
argument_list|)
return|;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|topOperation
operator|+
literal|" does not have the correct number of arguments."
argument_list|)
throw|;
block|}
else|else
block|{
comment|// Multi Delegate Expressions
comment|// Numeric Expression
if|if
condition|(
name|topOperation
operator|.
name|equals
argument_list|(
name|AnalyticsParams
operator|.
name|ADD
argument_list|)
condition|)
block|{
return|return
operator|new
name|AddExpression
argument_list|(
name|expArgs
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|topOperation
operator|.
name|equals
argument_list|(
name|AnalyticsParams
operator|.
name|MULTIPLY
argument_list|)
condition|)
block|{
return|return
operator|new
name|MultiplyExpression
argument_list|(
name|expArgs
argument_list|)
return|;
block|}
comment|// Date Expression
elseif|else
if|if
condition|(
name|topOperation
operator|.
name|equals
argument_list|(
name|AnalyticsParams
operator|.
name|DATE_MATH
argument_list|)
condition|)
block|{
return|return
operator|new
name|DateMathExpression
argument_list|(
name|expArgs
argument_list|)
return|;
block|}
comment|// String Expression
elseif|else
if|if
condition|(
name|topOperation
operator|.
name|equals
argument_list|(
name|AnalyticsParams
operator|.
name|CONCATENATE
argument_list|)
condition|)
block|{
return|return
operator|new
name|ConcatenateExpression
argument_list|(
name|expArgs
argument_list|)
return|;
block|}
comment|// Dual Delegate Expressions
elseif|else
if|if
condition|(
name|expArgs
operator|.
name|length
operator|==
literal|2
operator|&&
operator|(
name|topOperation
operator|.
name|equals
argument_list|(
name|AnalyticsParams
operator|.
name|DIVIDE
argument_list|)
operator|||
name|topOperation
operator|.
name|equals
argument_list|(
name|AnalyticsParams
operator|.
name|POWER
argument_list|)
operator|||
name|topOperation
operator|.
name|equals
argument_list|(
name|AnalyticsParams
operator|.
name|LOG
argument_list|)
operator|)
condition|)
block|{
comment|// Numeric Expression
if|if
condition|(
name|topOperation
operator|.
name|equals
argument_list|(
name|AnalyticsParams
operator|.
name|DIVIDE
argument_list|)
condition|)
block|{
return|return
operator|new
name|DivideExpression
argument_list|(
name|expArgs
index|[
literal|0
index|]
argument_list|,
name|expArgs
index|[
literal|1
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|topOperation
operator|.
name|equals
argument_list|(
name|AnalyticsParams
operator|.
name|POWER
argument_list|)
condition|)
block|{
return|return
operator|new
name|PowerExpression
argument_list|(
name|expArgs
index|[
literal|0
index|]
argument_list|,
name|expArgs
index|[
literal|1
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|topOperation
operator|.
name|equals
argument_list|(
name|AnalyticsParams
operator|.
name|LOG
argument_list|)
condition|)
block|{
return|return
operator|new
name|LogExpression
argument_list|(
name|expArgs
index|[
literal|0
index|]
argument_list|,
name|expArgs
index|[
literal|1
index|]
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|topOperation
operator|+
literal|" does not have the correct number of arguments or is unsupported."
argument_list|)
throw|;
block|}
block|}
comment|/**    * Splits up an Expression's arguments.    *     * @param expression Current expression string    * @return List The list of arguments    */
DECL|method|getArguments
specifier|public
specifier|static
name|String
index|[]
name|getArguments
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
name|String
index|[]
name|strings
init|=
operator|new
name|String
index|[
literal|1
index|]
decl_stmt|;
name|int
name|stack
init|=
literal|0
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|arguments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|char
index|[]
name|chars
init|=
name|expression
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|count
init|=
literal|0
init|;
name|count
operator|<
name|expression
operator|.
name|length
argument_list|()
condition|;
name|count
operator|++
control|)
block|{
name|char
name|c
init|=
name|chars
index|[
name|count
index|]
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|','
operator|&&
name|stack
operator|==
literal|0
condition|)
block|{
name|arguments
operator|.
name|add
argument_list|(
name|expression
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|count
argument_list|)
operator|.
name|replace
argument_list|(
literal|"\\("
argument_list|,
literal|"("
argument_list|)
operator|.
name|replace
argument_list|(
literal|"\\)"
argument_list|,
literal|")"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"\\,"
argument_list|,
literal|","
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|start
operator|=
name|count
operator|+
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'('
condition|)
block|{
name|stack
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|')'
condition|)
block|{
name|stack
operator|--
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'\\'
condition|)
block|{
empty_stmt|;
comment|// Do nothing.
block|}
block|}
if|if
condition|(
name|stack
operator|==
literal|0
condition|)
block|{
name|arguments
operator|.
name|add
argument_list|(
name|expression
operator|.
name|substring
argument_list|(
name|start
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|arguments
operator|.
name|toArray
argument_list|(
name|strings
argument_list|)
return|;
block|}
block|}
end_class
end_unit
