begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analytics.statistics
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analytics
operator|.
name|statistics
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import
begin_comment
comment|/**  *<code>NumericStatsCollector</code> computes the sum, sum of squares, mean and standard deviation.  */
end_comment
begin_class
DECL|class|NumericStatsCollector
specifier|public
class|class
name|NumericStatsCollector
extends|extends
name|MinMaxStatsCollector
block|{
DECL|field|sum
specifier|protected
name|double
name|sum
init|=
literal|0
decl_stmt|;
DECL|field|sumOfSquares
specifier|protected
name|double
name|sumOfSquares
init|=
literal|0
decl_stmt|;
DECL|field|mean
specifier|protected
name|double
name|mean
init|=
literal|0
decl_stmt|;
DECL|field|stddev
specifier|protected
name|double
name|stddev
init|=
literal|0
decl_stmt|;
DECL|method|NumericStatsCollector
specifier|public
name|NumericStatsCollector
parameter_list|(
name|ValueSource
name|source
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|statsList
parameter_list|)
block|{
name|super
argument_list|(
name|source
argument_list|,
name|statsList
argument_list|)
expr_stmt|;
block|}
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|super
operator|.
name|collect
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|double
name|value
init|=
name|function
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|sum
operator|+=
name|value
expr_stmt|;
name|sumOfSquares
operator|+=
operator|(
name|value
operator|*
name|value
operator|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getStat
specifier|public
name|Comparable
name|getStat
parameter_list|(
name|String
name|stat
parameter_list|)
block|{
if|if
condition|(
name|stat
operator|.
name|equals
argument_list|(
literal|"sum"
argument_list|)
condition|)
block|{
return|return
operator|new
name|Double
argument_list|(
name|sum
argument_list|)
return|;
block|}
if|if
condition|(
name|stat
operator|.
name|equals
argument_list|(
literal|"sumofsquares"
argument_list|)
condition|)
block|{
return|return
operator|new
name|Double
argument_list|(
name|sumOfSquares
argument_list|)
return|;
block|}
if|if
condition|(
name|stat
operator|.
name|equals
argument_list|(
literal|"mean"
argument_list|)
condition|)
block|{
return|return
operator|new
name|Double
argument_list|(
name|mean
argument_list|)
return|;
block|}
if|if
condition|(
name|stat
operator|.
name|equals
argument_list|(
literal|"stddev"
argument_list|)
condition|)
block|{
return|return
operator|new
name|Double
argument_list|(
name|stddev
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|getStat
argument_list|(
name|stat
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compute
specifier|public
name|void
name|compute
parameter_list|()
block|{
name|super
operator|.
name|compute
argument_list|()
expr_stmt|;
name|mean
operator|=
operator|(
name|valueCount
operator|==
literal|0
operator|)
condition|?
literal|0
else|:
name|sum
operator|/
name|valueCount
expr_stmt|;
name|stddev
operator|=
operator|(
name|valueCount
operator|<=
literal|1
operator|)
condition|?
literal|0.0D
else|:
name|Math
operator|.
name|sqrt
argument_list|(
operator|(
name|sumOfSquares
operator|/
name|valueCount
operator|)
operator|-
operator|(
name|mean
operator|*
name|mean
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
