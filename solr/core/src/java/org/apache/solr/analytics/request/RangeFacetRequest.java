begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analytics.request
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analytics
operator|.
name|request
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analytics
operator|.
name|util
operator|.
name|AnalyticsParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
operator|.
name|FacetRangeInclude
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
operator|.
name|FacetRangeOther
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_comment
comment|/**  * Contains all of the specifications for a range facet.  */
end_comment
begin_class
DECL|class|RangeFacetRequest
specifier|public
class|class
name|RangeFacetRequest
extends|extends
name|AbstractFieldFacetRequest
block|{
DECL|field|start
specifier|protected
name|String
name|start
decl_stmt|;
DECL|field|end
specifier|protected
name|String
name|end
decl_stmt|;
DECL|field|gaps
specifier|protected
name|String
index|[]
name|gaps
decl_stmt|;
DECL|field|hardEnd
specifier|protected
name|boolean
name|hardEnd
init|=
literal|false
decl_stmt|;
DECL|field|include
specifier|protected
name|EnumSet
argument_list|<
name|FacetRangeInclude
argument_list|>
name|include
decl_stmt|;
DECL|field|includeCalled
specifier|protected
name|boolean
name|includeCalled
init|=
literal|false
decl_stmt|;
DECL|field|others
specifier|protected
name|EnumSet
argument_list|<
name|FacetRangeOther
argument_list|>
name|others
decl_stmt|;
DECL|field|othersCalled
specifier|protected
name|boolean
name|othersCalled
init|=
literal|false
decl_stmt|;
DECL|method|RangeFacetRequest
specifier|public
name|RangeFacetRequest
parameter_list|(
name|SchemaField
name|field
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|include
operator|=
name|EnumSet
operator|.
name|of
argument_list|(
name|AnalyticsParams
operator|.
name|DEFAULT_INCLUDE
argument_list|)
expr_stmt|;
name|others
operator|=
name|EnumSet
operator|.
name|of
argument_list|(
name|AnalyticsParams
operator|.
name|DEFAULT_OTHER
argument_list|)
expr_stmt|;
block|}
DECL|method|RangeFacetRequest
specifier|public
name|RangeFacetRequest
parameter_list|(
name|SchemaField
name|field
parameter_list|,
name|String
name|start
parameter_list|,
name|String
name|end
parameter_list|,
name|String
index|[]
name|gaps
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
name|this
operator|.
name|gaps
operator|=
name|gaps
expr_stmt|;
block|}
DECL|method|getStart
specifier|public
name|String
name|getStart
parameter_list|()
block|{
return|return
name|start
return|;
block|}
DECL|method|setStart
specifier|public
name|void
name|setStart
parameter_list|(
name|String
name|start
parameter_list|)
block|{
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
block|}
DECL|method|getEnd
specifier|public
name|String
name|getEnd
parameter_list|()
block|{
return|return
name|end
return|;
block|}
DECL|method|setEnd
specifier|public
name|void
name|setEnd
parameter_list|(
name|String
name|end
parameter_list|)
block|{
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
block|}
DECL|method|getInclude
specifier|public
name|EnumSet
argument_list|<
name|FacetRangeInclude
argument_list|>
name|getInclude
parameter_list|()
block|{
return|return
name|include
return|;
block|}
DECL|method|setInclude
specifier|public
name|void
name|setInclude
parameter_list|(
name|EnumSet
argument_list|<
name|FacetRangeInclude
argument_list|>
name|include
parameter_list|)
block|{
name|includeCalled
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|include
operator|=
name|include
expr_stmt|;
block|}
DECL|method|addInclude
specifier|public
name|void
name|addInclude
parameter_list|(
name|FacetRangeInclude
name|include
parameter_list|)
block|{
if|if
condition|(
name|includeCalled
condition|)
block|{
name|this
operator|.
name|include
operator|.
name|add
argument_list|(
name|include
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|includeCalled
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|include
operator|=
name|EnumSet
operator|.
name|of
argument_list|(
name|include
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getGaps
specifier|public
name|String
index|[]
name|getGaps
parameter_list|()
block|{
return|return
name|gaps
return|;
block|}
DECL|method|setGaps
specifier|public
name|void
name|setGaps
parameter_list|(
name|String
index|[]
name|gaps
parameter_list|)
block|{
name|this
operator|.
name|gaps
operator|=
name|gaps
expr_stmt|;
block|}
DECL|method|isHardEnd
specifier|public
name|boolean
name|isHardEnd
parameter_list|()
block|{
return|return
name|hardEnd
return|;
block|}
DECL|method|setHardEnd
specifier|public
name|void
name|setHardEnd
parameter_list|(
name|boolean
name|hardEnd
parameter_list|)
block|{
name|this
operator|.
name|hardEnd
operator|=
name|hardEnd
expr_stmt|;
block|}
DECL|method|getOthers
specifier|public
name|EnumSet
argument_list|<
name|FacetRangeOther
argument_list|>
name|getOthers
parameter_list|()
block|{
return|return
name|others
return|;
block|}
DECL|method|setOthers
specifier|public
name|void
name|setOthers
parameter_list|(
name|EnumSet
argument_list|<
name|FacetRangeOther
argument_list|>
name|others
parameter_list|)
block|{
name|othersCalled
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|others
operator|=
name|others
expr_stmt|;
block|}
DECL|method|addOther
specifier|public
name|void
name|addOther
parameter_list|(
name|FacetRangeOther
name|other
parameter_list|)
block|{
if|if
condition|(
name|othersCalled
condition|)
block|{
name|this
operator|.
name|others
operator|.
name|add
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|othersCalled
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|others
operator|=
name|EnumSet
operator|.
name|of
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"<RangeFacetRequest field="
operator|+
name|field
operator|.
name|getName
argument_list|()
operator|+
literal|" start="
operator|+
name|start
operator|+
literal|", end="
operator|+
name|end
operator|+
literal|", gap="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|gaps
argument_list|)
operator|+
literal|", hardEnd="
operator|+
name|hardEnd
operator|+
literal|", include="
operator|+
name|include
operator|+
literal|", others="
operator|+
name|others
operator|+
literal|">"
return|;
block|}
block|}
end_class
end_unit
