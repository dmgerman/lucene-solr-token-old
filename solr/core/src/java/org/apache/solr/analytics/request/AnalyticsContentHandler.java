begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analytics.request
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analytics
operator|.
name|request
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analytics
operator|.
name|request
operator|.
name|FieldFacetRequest
operator|.
name|FacetSortDirection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analytics
operator|.
name|request
operator|.
name|FieldFacetRequest
operator|.
name|FacetSortSpecification
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
operator|.
name|FacetRangeInclude
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
operator|.
name|FacetRangeOther
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Locator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import
begin_comment
comment|/**  * Handles the parsing of the AnalysisRequestEnvelope elements if passed in through XML.  */
end_comment
begin_class
DECL|class|AnalyticsContentHandler
specifier|public
class|class
name|AnalyticsContentHandler
implements|implements
name|ContentHandler
block|{
comment|// XML Element/Attribute Name Constants
DECL|field|ANALYTICS_REQUEST_ENVELOPE
specifier|public
specifier|final
name|String
name|ANALYTICS_REQUEST_ENVELOPE
init|=
literal|"analyticsRequestEnvelope"
decl_stmt|;
DECL|field|ANALYTICS_REQUEST
specifier|public
specifier|final
name|String
name|ANALYTICS_REQUEST
init|=
literal|"analyticsRequest"
decl_stmt|;
DECL|field|NAME
specifier|public
specifier|final
name|String
name|NAME
init|=
literal|"name"
decl_stmt|;
DECL|field|STATISTIC
specifier|public
specifier|final
name|String
name|STATISTIC
init|=
literal|"statistic"
decl_stmt|;
DECL|field|EXPRESSION
specifier|public
specifier|final
name|String
name|EXPRESSION
init|=
literal|"expression"
decl_stmt|;
DECL|field|FIELD_FACET
specifier|public
specifier|final
name|String
name|FIELD_FACET
init|=
literal|"fieldFacet"
decl_stmt|;
DECL|field|FIELD
specifier|public
specifier|final
name|String
name|FIELD
init|=
literal|"field"
decl_stmt|;
DECL|field|SHOW_MISSING
specifier|public
specifier|final
name|String
name|SHOW_MISSING
init|=
literal|"showMissing"
decl_stmt|;
DECL|field|LIMIT
specifier|public
specifier|final
name|String
name|LIMIT
init|=
literal|"limit"
decl_stmt|;
DECL|field|MIN_COUNT
specifier|public
specifier|final
name|String
name|MIN_COUNT
init|=
literal|"minCount"
decl_stmt|;
DECL|field|SORT_SPECIFICATION
specifier|public
specifier|final
name|String
name|SORT_SPECIFICATION
init|=
literal|"sortSpecification"
decl_stmt|;
DECL|field|STAT_NAME
specifier|public
specifier|final
name|String
name|STAT_NAME
init|=
literal|"statName"
decl_stmt|;
DECL|field|DIRECTION
specifier|public
specifier|final
name|String
name|DIRECTION
init|=
literal|"direction"
decl_stmt|;
DECL|field|RANGE_FACET
specifier|public
specifier|final
name|String
name|RANGE_FACET
init|=
literal|"rangeFacet"
decl_stmt|;
DECL|field|START
specifier|public
specifier|final
name|String
name|START
init|=
literal|"start"
decl_stmt|;
DECL|field|END
specifier|public
specifier|final
name|String
name|END
init|=
literal|"end"
decl_stmt|;
DECL|field|GAP
specifier|public
specifier|final
name|String
name|GAP
init|=
literal|"gap"
decl_stmt|;
DECL|field|INCLUDE_BOUNDARY
specifier|public
specifier|final
name|String
name|INCLUDE_BOUNDARY
init|=
literal|"includeBoundary"
decl_stmt|;
DECL|field|OTHER_RANGE
specifier|public
specifier|final
name|String
name|OTHER_RANGE
init|=
literal|"otherRange"
decl_stmt|;
DECL|field|HARD_END
specifier|public
specifier|final
name|String
name|HARD_END
init|=
literal|"hardend"
decl_stmt|;
DECL|field|QUERY_FACET
specifier|public
specifier|final
name|String
name|QUERY_FACET
init|=
literal|"queryFacet"
decl_stmt|;
DECL|field|QUERY
specifier|public
specifier|final
name|String
name|QUERY
init|=
literal|"query"
decl_stmt|;
comment|// Default Values
DECL|field|DEFAULT_FACET_LIMIT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_FACET_LIMIT
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|DEFAULT_FACET_HARDEND
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_FACET_HARDEND
init|=
literal|false
decl_stmt|;
DECL|field|DEFAULT_FACET_MINCOUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_FACET_MINCOUNT
init|=
literal|0
decl_stmt|;
DECL|field|DEFAULT_FACET_FIELD_SHOW_MISSING
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_FACET_FIELD_SHOW_MISSING
init|=
literal|false
decl_stmt|;
DECL|field|inEnvelope
name|boolean
name|inEnvelope
init|=
literal|false
decl_stmt|;
DECL|field|inRequest
name|boolean
name|inRequest
init|=
literal|false
decl_stmt|;
DECL|field|inStatistic
name|boolean
name|inStatistic
init|=
literal|false
decl_stmt|;
DECL|field|inFieldFacet
name|boolean
name|inFieldFacet
init|=
literal|false
decl_stmt|;
DECL|field|inSortSpecification
name|boolean
name|inSortSpecification
init|=
literal|false
decl_stmt|;
DECL|field|inQueryFacet
name|boolean
name|inQueryFacet
init|=
literal|false
decl_stmt|;
DECL|field|inRangeFacet
name|boolean
name|inRangeFacet
init|=
literal|false
decl_stmt|;
DECL|field|schema
specifier|private
specifier|final
name|IndexSchema
name|schema
decl_stmt|;
comment|// Objects to use while building the Analytics Requests
DECL|field|currentElementText
name|String
name|currentElementText
decl_stmt|;
DECL|field|requests
name|List
argument_list|<
name|AnalyticsRequest
argument_list|>
name|requests
decl_stmt|;
DECL|field|analyticsRequest
name|AnalyticsRequest
name|analyticsRequest
decl_stmt|;
DECL|field|expressionList
name|List
argument_list|<
name|ExpressionRequest
argument_list|>
name|expressionList
decl_stmt|;
DECL|field|fieldFacetList
name|List
argument_list|<
name|FieldFacetRequest
argument_list|>
name|fieldFacetList
decl_stmt|;
DECL|field|rangeFacetList
name|List
argument_list|<
name|RangeFacetRequest
argument_list|>
name|rangeFacetList
decl_stmt|;
DECL|field|queryFacetList
name|List
argument_list|<
name|QueryFacetRequest
argument_list|>
name|queryFacetList
decl_stmt|;
DECL|field|expression
name|ExpressionRequest
name|expression
decl_stmt|;
DECL|field|fieldFacet
name|FieldFacetRequest
name|fieldFacet
decl_stmt|;
DECL|field|limit
name|int
name|limit
decl_stmt|;
DECL|field|minCount
name|int
name|minCount
decl_stmt|;
DECL|field|showMissing
name|boolean
name|showMissing
decl_stmt|;
DECL|field|sortSpecification
name|FacetSortSpecification
name|sortSpecification
decl_stmt|;
DECL|field|rangeFacet
name|RangeFacetRequest
name|rangeFacet
decl_stmt|;
DECL|field|hardend
name|boolean
name|hardend
decl_stmt|;
DECL|field|gaps
name|List
argument_list|<
name|String
argument_list|>
name|gaps
decl_stmt|;
DECL|field|includeBoundaries
name|EnumSet
argument_list|<
name|FacetRangeInclude
argument_list|>
name|includeBoundaries
decl_stmt|;
DECL|field|otherRanges
name|EnumSet
argument_list|<
name|FacetRangeOther
argument_list|>
name|otherRanges
decl_stmt|;
DECL|field|queryName
name|String
name|queryName
decl_stmt|;
DECL|field|queries
name|List
argument_list|<
name|String
argument_list|>
name|queries
decl_stmt|;
DECL|method|AnalyticsContentHandler
specifier|public
name|AnalyticsContentHandler
parameter_list|(
name|IndexSchema
name|schema
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDocumentLocator
specifier|public
name|void
name|setDocumentLocator
parameter_list|(
name|Locator
name|locator
parameter_list|)
block|{ }
annotation|@
name|Override
DECL|method|startDocument
specifier|public
name|void
name|startDocument
parameter_list|()
throws|throws
name|SAXException
block|{ }
annotation|@
name|Override
DECL|method|endDocument
specifier|public
name|void
name|endDocument
parameter_list|()
throws|throws
name|SAXException
block|{ }
annotation|@
name|Override
DECL|method|startPrefixMapping
specifier|public
name|void
name|startPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|SAXException
block|{ }
annotation|@
name|Override
DECL|method|endPrefixMapping
specifier|public
name|void
name|endPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|SAXException
block|{ }
annotation|@
name|Override
DECL|method|startElement
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
name|currentElementText
operator|=
literal|""
expr_stmt|;
if|if
condition|(
name|inEnvelope
condition|)
block|{
if|if
condition|(
name|inRequest
condition|)
block|{
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|STATISTIC
argument_list|)
condition|)
block|{
comment|// Start a Statistic Request
name|inStatistic
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inFieldFacet
condition|)
block|{
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|SORT_SPECIFICATION
argument_list|)
condition|)
block|{
comment|// Start a Sort Specification
name|inSortSpecification
operator|=
literal|true
expr_stmt|;
name|sortSpecification
operator|=
operator|new
name|FacetSortSpecification
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|FIELD_FACET
argument_list|)
condition|)
block|{
comment|// Start a Field Facet Request
comment|// Get attributes (limit, minCount, showMissing)
name|String
name|att
init|=
name|atts
operator|.
name|getValue
argument_list|(
name|uri
argument_list|,
name|LIMIT
argument_list|)
decl_stmt|;
if|if
condition|(
name|att
operator|!=
literal|null
condition|)
block|{
name|limit
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|att
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|limit
operator|=
name|DEFAULT_FACET_LIMIT
expr_stmt|;
block|}
name|att
operator|=
name|atts
operator|.
name|getValue
argument_list|(
name|uri
argument_list|,
name|MIN_COUNT
argument_list|)
expr_stmt|;
if|if
condition|(
name|att
operator|!=
literal|null
condition|)
block|{
name|minCount
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|att
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|minCount
operator|=
name|DEFAULT_FACET_MINCOUNT
expr_stmt|;
block|}
name|att
operator|=
name|atts
operator|.
name|getValue
argument_list|(
name|uri
argument_list|,
name|SHOW_MISSING
argument_list|)
expr_stmt|;
if|if
condition|(
name|att
operator|!=
literal|null
condition|)
block|{
name|showMissing
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|att
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|showMissing
operator|=
name|DEFAULT_FACET_FIELD_SHOW_MISSING
expr_stmt|;
block|}
name|inFieldFacet
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|RANGE_FACET
argument_list|)
condition|)
block|{
comment|// Start a Range Facet Request
comment|// Get attributes (hardEnd)
name|String
name|att
init|=
name|atts
operator|.
name|getValue
argument_list|(
name|uri
argument_list|,
name|HARD_END
argument_list|)
decl_stmt|;
if|if
condition|(
name|att
operator|!=
literal|null
condition|)
block|{
name|hardend
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|att
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hardend
operator|=
literal|false
expr_stmt|;
block|}
comment|// Initiate Range Facet classes
name|gaps
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|includeBoundaries
operator|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|FacetRangeInclude
operator|.
name|class
argument_list|)
expr_stmt|;
name|otherRanges
operator|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|FacetRangeOther
operator|.
name|class
argument_list|)
expr_stmt|;
name|inRangeFacet
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|QUERY_FACET
argument_list|)
condition|)
block|{
comment|// Start a Query Facet Request
name|queries
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|inQueryFacet
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|ANALYTICS_REQUEST
argument_list|)
condition|)
block|{
comment|// Start an Analytics Request
comment|// Renew each list.
name|fieldFacetList
operator|=
operator|new
name|ArrayList
argument_list|<
name|FieldFacetRequest
argument_list|>
argument_list|()
expr_stmt|;
name|rangeFacetList
operator|=
operator|new
name|ArrayList
argument_list|<
name|RangeFacetRequest
argument_list|>
argument_list|()
expr_stmt|;
name|queryFacetList
operator|=
operator|new
name|ArrayList
argument_list|<
name|QueryFacetRequest
argument_list|>
argument_list|()
expr_stmt|;
name|expressionList
operator|=
operator|new
name|ArrayList
argument_list|<
name|ExpressionRequest
argument_list|>
argument_list|()
expr_stmt|;
name|inRequest
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|ANALYTICS_REQUEST_ENVELOPE
argument_list|)
condition|)
block|{
comment|//Begin the parsing of the Analytics Requests
name|requests
operator|=
operator|new
name|ArrayList
argument_list|<
name|AnalyticsRequest
argument_list|>
argument_list|()
expr_stmt|;
name|inEnvelope
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|endElement
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|inEnvelope
condition|)
block|{
if|if
condition|(
name|inRequest
condition|)
block|{
if|if
condition|(
name|inStatistic
condition|)
block|{
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|EXPRESSION
argument_list|)
condition|)
block|{
name|expression
operator|=
operator|new
name|ExpressionRequest
argument_list|(
name|currentElementText
argument_list|,
name|currentElementText
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|NAME
argument_list|)
condition|)
block|{
name|expression
operator|.
name|setName
argument_list|(
name|currentElementText
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|STATISTIC
argument_list|)
condition|)
block|{
comment|// Finished Parsing the Statistic Request
name|expressionList
operator|.
name|add
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|inStatistic
operator|=
literal|false
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|inFieldFacet
condition|)
block|{
if|if
condition|(
name|inSortSpecification
condition|)
block|{
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|STAT_NAME
argument_list|)
condition|)
block|{
name|sortSpecification
operator|.
name|setStatistic
argument_list|(
name|currentElementText
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|DIRECTION
argument_list|)
condition|)
block|{
name|sortSpecification
operator|.
name|setDirection
argument_list|(
name|FacetSortDirection
operator|.
name|fromExternal
argument_list|(
name|currentElementText
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|SORT_SPECIFICATION
argument_list|)
condition|)
block|{
comment|// Finished Parsing the Sort Specification
name|fieldFacet
operator|.
name|setSort
argument_list|(
name|sortSpecification
argument_list|)
expr_stmt|;
name|inSortSpecification
operator|=
literal|false
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|FIELD
argument_list|)
condition|)
block|{
name|fieldFacet
operator|=
operator|new
name|FieldFacetRequest
argument_list|(
name|schema
operator|.
name|getField
argument_list|(
name|currentElementText
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|FIELD_FACET
argument_list|)
condition|)
block|{
comment|// Finished Parsing the Field Facet Request
name|fieldFacet
operator|.
name|setLimit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
name|fieldFacet
operator|.
name|showMissing
argument_list|(
name|showMissing
argument_list|)
expr_stmt|;
name|fieldFacetList
operator|.
name|add
argument_list|(
name|fieldFacet
argument_list|)
expr_stmt|;
name|inFieldFacet
operator|=
literal|false
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|inRangeFacet
condition|)
block|{
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|FIELD
argument_list|)
condition|)
block|{
name|rangeFacet
operator|=
operator|new
name|RangeFacetRequest
argument_list|(
name|schema
operator|.
name|getField
argument_list|(
name|currentElementText
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|START
argument_list|)
condition|)
block|{
name|rangeFacet
operator|.
name|setStart
argument_list|(
name|currentElementText
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|END
argument_list|)
condition|)
block|{
name|rangeFacet
operator|.
name|setEnd
argument_list|(
name|currentElementText
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|GAP
argument_list|)
condition|)
block|{
name|gaps
operator|.
name|add
argument_list|(
name|currentElementText
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|INCLUDE_BOUNDARY
argument_list|)
condition|)
block|{
name|includeBoundaries
operator|.
name|add
argument_list|(
name|FacetRangeInclude
operator|.
name|get
argument_list|(
name|currentElementText
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|OTHER_RANGE
argument_list|)
condition|)
block|{
name|otherRanges
operator|.
name|add
argument_list|(
name|FacetRangeOther
operator|.
name|get
argument_list|(
name|currentElementText
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|RANGE_FACET
argument_list|)
condition|)
block|{
comment|// Finished Parsing the Range Facet Request
name|rangeFacet
operator|.
name|setHardEnd
argument_list|(
name|hardend
argument_list|)
expr_stmt|;
name|rangeFacet
operator|.
name|setGaps
argument_list|(
name|gaps
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|rangeFacet
operator|.
name|setInclude
argument_list|(
name|includeBoundaries
argument_list|)
expr_stmt|;
name|rangeFacet
operator|.
name|setOthers
argument_list|(
name|otherRanges
argument_list|)
expr_stmt|;
name|inRangeFacet
operator|=
literal|false
expr_stmt|;
name|rangeFacetList
operator|.
name|add
argument_list|(
name|rangeFacet
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|inQueryFacet
condition|)
block|{
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|NAME
argument_list|)
condition|)
block|{
name|queryName
operator|=
name|currentElementText
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|QUERY
argument_list|)
condition|)
block|{
name|queries
operator|.
name|add
argument_list|(
name|currentElementText
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|QUERY_FACET
argument_list|)
condition|)
block|{
comment|// Finished Parsing the Query Facet Request
name|QueryFacetRequest
name|temp
init|=
operator|new
name|QueryFacetRequest
argument_list|(
name|queryName
argument_list|)
decl_stmt|;
name|temp
operator|.
name|setQueries
argument_list|(
name|queries
argument_list|)
expr_stmt|;
name|queryFacetList
operator|.
name|add
argument_list|(
name|temp
argument_list|)
expr_stmt|;
name|inQueryFacet
operator|=
literal|false
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|NAME
argument_list|)
condition|)
block|{
name|analyticsRequest
operator|=
operator|new
name|AnalyticsRequest
argument_list|(
name|currentElementText
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|ANALYTICS_REQUEST
argument_list|)
condition|)
block|{
comment|// Finished Parsing the Analytics Request
name|analyticsRequest
operator|.
name|setExpressions
argument_list|(
name|expressionList
argument_list|)
expr_stmt|;
name|analyticsRequest
operator|.
name|setFieldFacets
argument_list|(
name|fieldFacetList
argument_list|)
expr_stmt|;
name|analyticsRequest
operator|.
name|setRangeFacets
argument_list|(
name|rangeFacetList
argument_list|)
expr_stmt|;
name|analyticsRequest
operator|.
name|setQueryFacets
argument_list|(
name|queryFacetList
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
name|analyticsRequest
argument_list|)
expr_stmt|;
name|inRequest
operator|=
literal|false
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|ANALYTICS_REQUEST_ENVELOPE
argument_list|)
condition|)
block|{
comment|// Finished Parsing
name|inEnvelope
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|characters
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
name|currentElementText
operator|+=
operator|new
name|String
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|ignorableWhitespace
specifier|public
name|void
name|ignorableWhitespace
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{ }
annotation|@
name|Override
DECL|method|processingInstruction
specifier|public
name|void
name|processingInstruction
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|data
parameter_list|)
throws|throws
name|SAXException
block|{ }
annotation|@
name|Override
DECL|method|skippedEntity
specifier|public
name|void
name|skippedEntity
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXException
block|{ }
comment|/**    * Returns the list of Analytics Requests built during parsing.    *     * @return List of {@link AnalyticsRequest} objects specified by the given XML file    */
DECL|method|getAnalyticsRequests
specifier|public
name|List
argument_list|<
name|AnalyticsRequest
argument_list|>
name|getAnalyticsRequests
parameter_list|()
block|{
return|return
name|requests
return|;
block|}
block|}
end_class
end_unit
