begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
package|;
end_package
begin_comment
comment|/**  *<code>CopyField</code> contains all the information of a valid copy fields in an index.  *   * @since solr 1.4  */
end_comment
begin_class
DECL|class|CopyField
specifier|public
class|class
name|CopyField
block|{
DECL|field|source
specifier|private
specifier|final
name|SchemaField
name|source
decl_stmt|;
DECL|field|destination
specifier|private
specifier|final
name|SchemaField
name|destination
decl_stmt|;
DECL|field|maxChars
specifier|private
specifier|final
name|int
name|maxChars
decl_stmt|;
DECL|field|UNLIMITED
specifier|public
specifier|static
specifier|final
name|int
name|UNLIMITED
init|=
literal|0
decl_stmt|;
DECL|method|CopyField
specifier|public
name|CopyField
parameter_list|(
specifier|final
name|SchemaField
name|source
parameter_list|,
specifier|final
name|SchemaField
name|destination
parameter_list|)
block|{
name|this
argument_list|(
name|source
argument_list|,
name|destination
argument_list|,
name|UNLIMITED
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param source The SchemaField of the source field.    * @param destination The SchemaField of the destination field.    * @param maxChars Maximum number of chars in source field to copy to destination field.    * If equal to 0, there is no limit.    */
DECL|method|CopyField
specifier|public
name|CopyField
parameter_list|(
specifier|final
name|SchemaField
name|source
parameter_list|,
specifier|final
name|SchemaField
name|destination
parameter_list|,
specifier|final
name|int
name|maxChars
parameter_list|)
block|{
if|if
condition|(
name|source
operator|==
literal|null
operator|||
name|destination
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Source or Destination SchemaField can't be NULL."
argument_list|)
throw|;
block|}
if|if
condition|(
name|maxChars
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Attribute maxChars can't have a negative value."
argument_list|)
throw|;
block|}
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|destination
operator|=
name|destination
expr_stmt|;
name|this
operator|.
name|maxChars
operator|=
name|maxChars
expr_stmt|;
block|}
DECL|method|getLimitedValue
specifier|public
name|String
name|getLimitedValue
parameter_list|(
specifier|final
name|String
name|val
parameter_list|)
block|{
return|return
name|maxChars
operator|==
name|UNLIMITED
operator|||
name|val
operator|.
name|length
argument_list|()
operator|<
name|maxChars
condition|?
name|val
else|:
name|val
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|maxChars
argument_list|)
return|;
block|}
comment|/**    * @return source SchemaField    */
DECL|method|getSource
specifier|public
name|SchemaField
name|getSource
parameter_list|()
block|{
return|return
name|source
return|;
block|}
comment|/**    * @return destination SchemaField    */
DECL|method|getDestination
specifier|public
name|SchemaField
name|getDestination
parameter_list|()
block|{
return|return
name|destination
return|;
block|}
comment|/**    * @return tha maximum number of chars in source field to copy to destination field.    */
DECL|method|getMaxChars
specifier|public
name|int
name|getMaxChars
parameter_list|()
block|{
return|return
name|maxChars
return|;
block|}
block|}
end_class
end_unit
