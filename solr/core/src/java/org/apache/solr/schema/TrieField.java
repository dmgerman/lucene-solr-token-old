begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|valuesource
operator|.
name|DoubleFieldSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|valuesource
operator|.
name|FloatFieldSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|valuesource
operator|.
name|IntFieldSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|valuesource
operator|.
name|LongFieldSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CharsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|mutable
operator|.
name|MutableValueDate
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|mutable
operator|.
name|MutableValueLong
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|TextResponseWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|QParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|function
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_comment
comment|/**  * Provides field types to support for Lucene's {@link NumericField}.  * See {@link org.apache.lucene.search.NumericRangeQuery} for more details.  * It supports integer, float, long, double and date types.  *<p/>  * For each number being added to this field, multiple terms are generated as per the algorithm described in the above  * link. The possible number of terms increases dramatically with lower precision steps. For  * the fast range search to work, trie fields must be indexed.  *<p/>  * Trie fields are sortable in numerical order and can be used in function queries.  *<p/>  * Note that if you use a precisionStep of 32 for int/float and 64 for long/double/date, then multiple terms will not be  * generated, range search will be no faster than any other number field, but sorting will still be possible.  *  *  * @see org.apache.lucene.search.NumericRangeQuery  * @since solr 1.4  */
end_comment
begin_class
DECL|class|TrieField
specifier|public
class|class
name|TrieField
extends|extends
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
block|{
DECL|field|DEFAULT_PRECISION_STEP
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_PRECISION_STEP
init|=
literal|8
decl_stmt|;
DECL|field|precisionStepArg
specifier|protected
name|int
name|precisionStepArg
init|=
name|TrieField
operator|.
name|DEFAULT_PRECISION_STEP
decl_stmt|;
comment|// the one passed in or defaulted
DECL|field|precisionStep
specifier|protected
name|int
name|precisionStep
decl_stmt|;
comment|// normalized
DECL|field|type
specifier|protected
name|TrieTypes
name|type
decl_stmt|;
DECL|field|missingValue
specifier|protected
name|Object
name|missingValue
decl_stmt|;
comment|/**    * Used for handling date types following the same semantics as DateField    */
DECL|field|dateField
specifier|static
specifier|final
name|DateField
name|dateField
init|=
operator|new
name|DateField
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|init
specifier|protected
name|void
name|init
parameter_list|(
name|IndexSchema
name|schema
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|String
name|p
init|=
name|args
operator|.
name|remove
argument_list|(
literal|"precisionStep"
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|precisionStepArg
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
comment|// normalize the precisionStep
name|precisionStep
operator|=
name|precisionStepArg
expr_stmt|;
if|if
condition|(
name|precisionStep
operator|<=
literal|0
operator|||
name|precisionStep
operator|>=
literal|64
condition|)
name|precisionStep
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
name|String
name|t
init|=
name|args
operator|.
name|remove
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|type
operator|=
name|TrieTypes
operator|.
name|valueOf
argument_list|(
name|t
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Invalid type specified in schema.xml for field: "
operator|+
name|args
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|CharFilterFactory
index|[]
name|filterFactories
init|=
operator|new
name|CharFilterFactory
index|[
literal|0
index|]
decl_stmt|;
name|TokenFilterFactory
index|[]
name|tokenFilterFactories
init|=
operator|new
name|TokenFilterFactory
index|[
literal|0
index|]
decl_stmt|;
name|analyzer
operator|=
operator|new
name|TokenizerChain
argument_list|(
name|filterFactories
argument_list|,
operator|new
name|TrieTokenizerFactory
argument_list|(
name|type
argument_list|,
name|precisionStep
argument_list|)
argument_list|,
name|tokenFilterFactories
argument_list|)
expr_stmt|;
comment|// for query time we only need one token, so we use the biggest possible precisionStep:
name|queryAnalyzer
operator|=
operator|new
name|TokenizerChain
argument_list|(
name|filterFactories
argument_list|,
operator|new
name|TrieTokenizerFactory
argument_list|(
name|type
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|tokenFilterFactories
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toObject
specifier|public
name|Object
name|toObject
parameter_list|(
name|IndexableField
name|f
parameter_list|)
block|{
specifier|final
name|Number
name|val
init|=
name|f
operator|.
name|numericValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|type
operator|==
name|TrieTypes
operator|.
name|DATE
operator|)
condition|?
operator|new
name|Date
argument_list|(
name|val
operator|.
name|longValue
argument_list|()
argument_list|)
else|:
name|val
return|;
block|}
else|else
block|{
comment|// the following code is "deprecated" and only to support pre-3.2 indexes using the old BinaryField encoding:
specifier|final
name|BytesRef
name|bytes
init|=
name|f
operator|.
name|binaryValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
return|return
name|badFieldString
argument_list|(
name|f
argument_list|)
return|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|INTEGER
case|:
return|return
name|toInt
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|,
name|bytes
operator|.
name|offset
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|toInt
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|,
name|bytes
operator|.
name|offset
argument_list|)
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
name|toLong
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|,
name|bytes
operator|.
name|offset
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|toLong
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|,
name|bytes
operator|.
name|offset
argument_list|)
argument_list|)
return|;
case|case
name|DATE
case|:
return|return
operator|new
name|Date
argument_list|(
name|toLong
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|,
name|bytes
operator|.
name|offset
argument_list|)
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unknown type for trie field: "
operator|+
name|f
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getSortField
specifier|public
name|SortField
name|getSortField
parameter_list|(
name|SchemaField
name|field
parameter_list|,
name|boolean
name|top
parameter_list|)
block|{
name|field
operator|.
name|checkSortability
argument_list|()
expr_stmt|;
name|Object
name|missingValue
init|=
literal|null
decl_stmt|;
name|boolean
name|sortMissingLast
init|=
name|field
operator|.
name|sortMissingLast
argument_list|()
decl_stmt|;
name|boolean
name|sortMissingFirst
init|=
name|field
operator|.
name|sortMissingFirst
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|INTEGER
case|:
if|if
condition|(
name|sortMissingLast
condition|)
block|{
name|missingValue
operator|=
name|top
condition|?
name|Integer
operator|.
name|MIN_VALUE
else|:
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sortMissingFirst
condition|)
block|{
name|missingValue
operator|=
name|top
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|Integer
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
return|return
operator|new
name|SortField
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|FieldCache
operator|.
name|NUMERIC_UTILS_INT_PARSER
argument_list|,
name|top
argument_list|)
operator|.
name|setMissingValue
argument_list|(
name|missingValue
argument_list|)
return|;
case|case
name|FLOAT
case|:
if|if
condition|(
name|sortMissingLast
condition|)
block|{
name|missingValue
operator|=
name|top
condition|?
name|Float
operator|.
name|NEGATIVE_INFINITY
else|:
name|Float
operator|.
name|POSITIVE_INFINITY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sortMissingFirst
condition|)
block|{
name|missingValue
operator|=
name|top
condition|?
name|Float
operator|.
name|POSITIVE_INFINITY
else|:
name|Float
operator|.
name|NEGATIVE_INFINITY
expr_stmt|;
block|}
return|return
operator|new
name|SortField
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|FieldCache
operator|.
name|NUMERIC_UTILS_FLOAT_PARSER
argument_list|,
name|top
argument_list|)
operator|.
name|setMissingValue
argument_list|(
name|missingValue
argument_list|)
return|;
case|case
name|DATE
case|:
comment|// fallthrough
case|case
name|LONG
case|:
if|if
condition|(
name|sortMissingLast
condition|)
block|{
name|missingValue
operator|=
name|top
condition|?
name|Long
operator|.
name|MIN_VALUE
else|:
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sortMissingFirst
condition|)
block|{
name|missingValue
operator|=
name|top
condition|?
name|Long
operator|.
name|MAX_VALUE
else|:
name|Long
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
return|return
operator|new
name|SortField
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|FieldCache
operator|.
name|NUMERIC_UTILS_LONG_PARSER
argument_list|,
name|top
argument_list|)
operator|.
name|setMissingValue
argument_list|(
name|missingValue
argument_list|)
return|;
case|case
name|DOUBLE
case|:
if|if
condition|(
name|sortMissingLast
condition|)
block|{
name|missingValue
operator|=
name|top
condition|?
name|Double
operator|.
name|NEGATIVE_INFINITY
else|:
name|Double
operator|.
name|POSITIVE_INFINITY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sortMissingFirst
condition|)
block|{
name|missingValue
operator|=
name|top
condition|?
name|Double
operator|.
name|POSITIVE_INFINITY
else|:
name|Double
operator|.
name|NEGATIVE_INFINITY
expr_stmt|;
block|}
return|return
operator|new
name|SortField
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|FieldCache
operator|.
name|NUMERIC_UTILS_DOUBLE_PARSER
argument_list|,
name|top
argument_list|)
operator|.
name|setMissingValue
argument_list|(
name|missingValue
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unknown type for trie field: "
operator|+
name|field
operator|.
name|name
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getValueSource
specifier|public
name|ValueSource
name|getValueSource
parameter_list|(
name|SchemaField
name|field
parameter_list|,
name|QParser
name|qparser
parameter_list|)
block|{
name|field
operator|.
name|checkFieldCacheSource
argument_list|(
name|qparser
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|INTEGER
case|:
return|return
operator|new
name|IntFieldSource
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|FieldCache
operator|.
name|NUMERIC_UTILS_INT_PARSER
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
operator|new
name|FloatFieldSource
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|FieldCache
operator|.
name|NUMERIC_UTILS_FLOAT_PARSER
argument_list|)
return|;
case|case
name|DATE
case|:
return|return
operator|new
name|TrieDateFieldSource
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|FieldCache
operator|.
name|NUMERIC_UTILS_LONG_PARSER
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
operator|new
name|LongFieldSource
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|FieldCache
operator|.
name|NUMERIC_UTILS_LONG_PARSER
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
operator|new
name|DoubleFieldSource
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|FieldCache
operator|.
name|NUMERIC_UTILS_DOUBLE_PARSER
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unknown type for trie field: "
operator|+
name|field
operator|.
name|name
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|TextResponseWriter
name|writer
parameter_list|,
name|String
name|name
parameter_list|,
name|IndexableField
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|writeVal
argument_list|(
name|name
argument_list|,
name|toObject
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isTokenized
specifier|public
name|boolean
name|isTokenized
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|multiValuedFieldCache
specifier|public
name|boolean
name|multiValuedFieldCache
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**    * @return the precisionStep used to index values into the field    */
DECL|method|getPrecisionStep
specifier|public
name|int
name|getPrecisionStep
parameter_list|()
block|{
return|return
name|precisionStepArg
return|;
block|}
comment|/**    * @return the type of this field    */
DECL|method|getType
specifier|public
name|TrieTypes
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Override
DECL|method|getRangeQuery
specifier|public
name|Query
name|getRangeQuery
parameter_list|(
name|QParser
name|parser
parameter_list|,
name|SchemaField
name|field
parameter_list|,
name|String
name|min
parameter_list|,
name|String
name|max
parameter_list|,
name|boolean
name|minInclusive
parameter_list|,
name|boolean
name|maxInclusive
parameter_list|)
block|{
name|int
name|ps
init|=
name|precisionStep
decl_stmt|;
name|Query
name|query
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|INTEGER
case|:
name|query
operator|=
name|NumericRangeQuery
operator|.
name|newIntRange
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|ps
argument_list|,
name|min
operator|==
literal|null
condition|?
literal|null
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|min
argument_list|)
argument_list|,
name|max
operator|==
literal|null
condition|?
literal|null
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|max
argument_list|)
argument_list|,
name|minInclusive
argument_list|,
name|maxInclusive
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|query
operator|=
name|NumericRangeQuery
operator|.
name|newFloatRange
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|ps
argument_list|,
name|min
operator|==
literal|null
condition|?
literal|null
else|:
name|Float
operator|.
name|parseFloat
argument_list|(
name|min
argument_list|)
argument_list|,
name|max
operator|==
literal|null
condition|?
literal|null
else|:
name|Float
operator|.
name|parseFloat
argument_list|(
name|max
argument_list|)
argument_list|,
name|minInclusive
argument_list|,
name|maxInclusive
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|query
operator|=
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|ps
argument_list|,
name|min
operator|==
literal|null
condition|?
literal|null
else|:
name|Long
operator|.
name|parseLong
argument_list|(
name|min
argument_list|)
argument_list|,
name|max
operator|==
literal|null
condition|?
literal|null
else|:
name|Long
operator|.
name|parseLong
argument_list|(
name|max
argument_list|)
argument_list|,
name|minInclusive
argument_list|,
name|maxInclusive
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|query
operator|=
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|ps
argument_list|,
name|min
operator|==
literal|null
condition|?
literal|null
else|:
name|Double
operator|.
name|parseDouble
argument_list|(
name|min
argument_list|)
argument_list|,
name|max
operator|==
literal|null
condition|?
literal|null
else|:
name|Double
operator|.
name|parseDouble
argument_list|(
name|max
argument_list|)
argument_list|,
name|minInclusive
argument_list|,
name|maxInclusive
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATE
case|:
name|query
operator|=
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|ps
argument_list|,
name|min
operator|==
literal|null
condition|?
literal|null
else|:
name|dateField
operator|.
name|parseMath
argument_list|(
literal|null
argument_list|,
name|min
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|,
name|max
operator|==
literal|null
condition|?
literal|null
else|:
name|dateField
operator|.
name|parseMath
argument_list|(
literal|null
argument_list|,
name|max
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|,
name|minInclusive
argument_list|,
name|maxInclusive
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unknown type for trie field"
argument_list|)
throw|;
block|}
return|return
name|query
return|;
block|}
annotation|@
name|Deprecated
DECL|method|toInt
specifier|static
name|int
name|toInt
parameter_list|(
name|byte
index|[]
name|arr
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
operator|(
name|arr
index|[
name|offset
index|]
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|arr
index|[
name|offset
operator|+
literal|1
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|arr
index|[
name|offset
operator|+
literal|2
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|arr
index|[
name|offset
operator|+
literal|3
index|]
operator|&
literal|0xff
operator|)
return|;
block|}
annotation|@
name|Deprecated
DECL|method|toLong
specifier|static
name|long
name|toLong
parameter_list|(
name|byte
index|[]
name|arr
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|int
name|high
init|=
operator|(
name|arr
index|[
name|offset
index|]
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|arr
index|[
name|offset
operator|+
literal|1
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|arr
index|[
name|offset
operator|+
literal|2
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|arr
index|[
name|offset
operator|+
literal|3
index|]
operator|&
literal|0xff
operator|)
decl_stmt|;
name|int
name|low
init|=
operator|(
name|arr
index|[
name|offset
operator|+
literal|4
index|]
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|arr
index|[
name|offset
operator|+
literal|5
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|arr
index|[
name|offset
operator|+
literal|6
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|arr
index|[
name|offset
operator|+
literal|7
index|]
operator|&
literal|0xff
operator|)
decl_stmt|;
return|return
operator|(
operator|(
operator|(
name|long
operator|)
name|high
operator|)
operator|<<
literal|32
operator|)
operator||
operator|(
name|low
operator|&
literal|0x0ffffffffL
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|storedToReadable
specifier|public
name|String
name|storedToReadable
parameter_list|(
name|IndexableField
name|f
parameter_list|)
block|{
return|return
name|toExternal
argument_list|(
name|f
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readableToIndexed
specifier|public
name|String
name|readableToIndexed
parameter_list|(
name|String
name|val
parameter_list|)
block|{
comment|// TODO: Numeric should never be handled as String, that may break in future lucene versions! Change to use BytesRef for term texts!
specifier|final
name|BytesRef
name|bytes
init|=
operator|new
name|BytesRef
argument_list|(
name|NumericUtils
operator|.
name|BUF_SIZE_LONG
argument_list|)
decl_stmt|;
name|readableToIndexed
argument_list|(
name|val
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
return|return
name|bytes
operator|.
name|utf8ToString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readableToIndexed
specifier|public
name|void
name|readableToIndexed
parameter_list|(
name|CharSequence
name|val
parameter_list|,
name|BytesRef
name|result
parameter_list|)
block|{
name|String
name|s
init|=
name|val
operator|.
name|toString
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|INTEGER
case|:
name|NumericUtils
operator|.
name|intToPrefixCoded
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
argument_list|)
argument_list|,
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|NumericUtils
operator|.
name|intToPrefixCoded
argument_list|(
name|NumericUtils
operator|.
name|floatToSortableInt
argument_list|(
name|Float
operator|.
name|parseFloat
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|s
argument_list|)
argument_list|,
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATE
case|:
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
name|dateField
operator|.
name|parseMath
argument_list|(
literal|null
argument_list|,
name|s
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|,
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unknown type for trie field: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toInternal
specifier|public
name|String
name|toInternal
parameter_list|(
name|String
name|val
parameter_list|)
block|{
return|return
name|readableToIndexed
argument_list|(
name|val
argument_list|)
return|;
block|}
DECL|method|badFieldString
specifier|static
name|String
name|badFieldString
parameter_list|(
name|IndexableField
name|f
parameter_list|)
block|{
name|String
name|s
init|=
name|f
operator|.
name|stringValue
argument_list|()
decl_stmt|;
return|return
literal|"ERROR:SCHEMA-INDEX-MISMATCH,stringValue="
operator|+
name|s
return|;
block|}
annotation|@
name|Override
DECL|method|toExternal
specifier|public
name|String
name|toExternal
parameter_list|(
name|IndexableField
name|f
parameter_list|)
block|{
return|return
operator|(
name|type
operator|==
name|TrieTypes
operator|.
name|DATE
operator|)
condition|?
name|dateField
operator|.
name|toExternal
argument_list|(
operator|(
name|Date
operator|)
name|toObject
argument_list|(
name|f
argument_list|)
argument_list|)
else|:
name|toObject
argument_list|(
name|f
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|indexedToReadable
specifier|public
name|String
name|indexedToReadable
parameter_list|(
name|String
name|_indexedForm
parameter_list|)
block|{
specifier|final
name|BytesRef
name|indexedForm
init|=
operator|new
name|BytesRef
argument_list|(
name|_indexedForm
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|INTEGER
case|:
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|NumericUtils
operator|.
name|prefixCodedToInt
argument_list|(
name|indexedForm
argument_list|)
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
name|Float
operator|.
name|toString
argument_list|(
name|NumericUtils
operator|.
name|sortableIntToFloat
argument_list|(
name|NumericUtils
operator|.
name|prefixCodedToInt
argument_list|(
name|indexedForm
argument_list|)
argument_list|)
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
name|Long
operator|.
name|toString
argument_list|(
name|NumericUtils
operator|.
name|prefixCodedToLong
argument_list|(
name|indexedForm
argument_list|)
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
name|Double
operator|.
name|toString
argument_list|(
name|NumericUtils
operator|.
name|sortableLongToDouble
argument_list|(
name|NumericUtils
operator|.
name|prefixCodedToLong
argument_list|(
name|indexedForm
argument_list|)
argument_list|)
argument_list|)
return|;
case|case
name|DATE
case|:
return|return
name|dateField
operator|.
name|toExternal
argument_list|(
operator|new
name|Date
argument_list|(
name|NumericUtils
operator|.
name|prefixCodedToLong
argument_list|(
name|indexedForm
argument_list|)
argument_list|)
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unknown type for trie field: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|indexedToReadable
specifier|public
name|CharsRef
name|indexedToReadable
parameter_list|(
name|BytesRef
name|indexedForm
parameter_list|,
name|CharsRef
name|charsRef
parameter_list|)
block|{
specifier|final
name|String
name|value
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|INTEGER
case|:
name|value
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|NumericUtils
operator|.
name|prefixCodedToInt
argument_list|(
name|indexedForm
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|value
operator|=
name|Float
operator|.
name|toString
argument_list|(
name|NumericUtils
operator|.
name|sortableIntToFloat
argument_list|(
name|NumericUtils
operator|.
name|prefixCodedToInt
argument_list|(
name|indexedForm
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|value
operator|=
name|Long
operator|.
name|toString
argument_list|(
name|NumericUtils
operator|.
name|prefixCodedToLong
argument_list|(
name|indexedForm
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|value
operator|=
name|Double
operator|.
name|toString
argument_list|(
name|NumericUtils
operator|.
name|sortableLongToDouble
argument_list|(
name|NumericUtils
operator|.
name|prefixCodedToLong
argument_list|(
name|indexedForm
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATE
case|:
name|value
operator|=
name|dateField
operator|.
name|toExternal
argument_list|(
operator|new
name|Date
argument_list|(
name|NumericUtils
operator|.
name|prefixCodedToLong
argument_list|(
name|indexedForm
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unknown type for trie field: "
operator|+
name|type
argument_list|)
throw|;
block|}
name|charsRef
operator|.
name|grow
argument_list|(
name|value
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|charsRef
operator|.
name|length
operator|=
name|value
operator|.
name|length
argument_list|()
expr_stmt|;
name|value
operator|.
name|getChars
argument_list|(
literal|0
argument_list|,
name|charsRef
operator|.
name|length
argument_list|,
name|charsRef
operator|.
name|chars
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|charsRef
return|;
block|}
annotation|@
name|Override
DECL|method|toObject
specifier|public
name|Object
name|toObject
parameter_list|(
name|SchemaField
name|sf
parameter_list|,
name|BytesRef
name|term
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|INTEGER
case|:
return|return
name|NumericUtils
operator|.
name|prefixCodedToInt
argument_list|(
name|term
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
name|NumericUtils
operator|.
name|sortableIntToFloat
argument_list|(
name|NumericUtils
operator|.
name|prefixCodedToInt
argument_list|(
name|term
argument_list|)
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
name|NumericUtils
operator|.
name|prefixCodedToLong
argument_list|(
name|term
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
name|NumericUtils
operator|.
name|sortableLongToDouble
argument_list|(
name|NumericUtils
operator|.
name|prefixCodedToLong
argument_list|(
name|term
argument_list|)
argument_list|)
return|;
case|case
name|DATE
case|:
return|return
operator|new
name|Date
argument_list|(
name|NumericUtils
operator|.
name|prefixCodedToLong
argument_list|(
name|term
argument_list|)
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unknown type for trie field: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|storedToIndexed
specifier|public
name|String
name|storedToIndexed
parameter_list|(
name|IndexableField
name|f
parameter_list|)
block|{
specifier|final
name|BytesRef
name|bytes
init|=
operator|new
name|BytesRef
argument_list|(
name|NumericUtils
operator|.
name|BUF_SIZE_LONG
argument_list|)
decl_stmt|;
specifier|final
name|Number
name|val
init|=
name|f
operator|.
name|numericValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|INTEGER
case|:
name|NumericUtils
operator|.
name|intToPrefixCoded
argument_list|(
name|val
operator|.
name|intValue
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|NumericUtils
operator|.
name|intToPrefixCoded
argument_list|(
name|NumericUtils
operator|.
name|floatToSortableInt
argument_list|(
name|val
operator|.
name|floatValue
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
comment|//fallthrough!
case|case
name|DATE
case|:
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
name|val
operator|.
name|longValue
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|val
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unknown type for trie field: "
operator|+
name|f
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// the following code is "deprecated" and only to support pre-3.2 indexes using the old BinaryField encoding:
specifier|final
name|BytesRef
name|bytesRef
init|=
name|f
operator|.
name|binaryValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|bytesRef
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Invalid field contents: "
operator|+
name|f
operator|.
name|name
argument_list|()
argument_list|)
throw|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|INTEGER
case|:
name|NumericUtils
operator|.
name|intToPrefixCoded
argument_list|(
name|toInt
argument_list|(
name|bytesRef
operator|.
name|bytes
argument_list|,
name|bytesRef
operator|.
name|offset
argument_list|)
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
block|{
comment|// WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!
comment|// copied from NumericUtils to not convert to/from float two times
comment|// code in next 2 lines is identical to: int v = NumericUtils.floatToSortableInt(Float.intBitsToFloat(toInt(arr)));
name|int
name|v
init|=
name|toInt
argument_list|(
name|bytesRef
operator|.
name|bytes
argument_list|,
name|bytesRef
operator|.
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|<
literal|0
condition|)
name|v
operator|^=
literal|0x7fffffff
expr_stmt|;
name|NumericUtils
operator|.
name|intToPrefixCoded
argument_list|(
name|v
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LONG
case|:
comment|//fallthrough!
case|case
name|DATE
case|:
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
name|toLong
argument_list|(
name|bytesRef
operator|.
name|bytes
argument_list|,
name|bytesRef
operator|.
name|offset
argument_list|)
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
block|{
comment|// WARNING: Code Duplication! Keep in sync with o.a.l.util.NumericUtils!
comment|// copied from NumericUtils to not convert to/from double two times
comment|// code in next 2 lines is identical to: long v = NumericUtils.doubleToSortableLong(Double.longBitsToDouble(toLong(arr)));
name|long
name|v
init|=
name|toLong
argument_list|(
name|bytesRef
operator|.
name|bytes
argument_list|,
name|bytesRef
operator|.
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|<
literal|0
condition|)
name|v
operator|^=
literal|0x7fffffffffffffffL
expr_stmt|;
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
name|v
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unknown type for trie field: "
operator|+
name|f
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|bytes
operator|.
name|utf8ToString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createField
specifier|public
name|IndexableField
name|createField
parameter_list|(
name|SchemaField
name|field
parameter_list|,
name|Object
name|value
parameter_list|,
name|float
name|boost
parameter_list|)
block|{
name|boolean
name|indexed
init|=
name|field
operator|.
name|indexed
argument_list|()
decl_stmt|;
name|boolean
name|stored
init|=
name|field
operator|.
name|stored
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|indexed
operator|&&
operator|!
name|stored
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|log
operator|.
name|trace
argument_list|(
literal|"Ignoring unindexed/unstored field: "
operator|+
name|field
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|FieldType
name|ft
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setStored
argument_list|(
name|stored
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setTokenized
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setIndexed
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setOmitNorms
argument_list|(
name|field
operator|.
name|omitNorms
argument_list|()
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|getIndexOptions
argument_list|(
name|field
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|INTEGER
case|:
name|ft
operator|.
name|setNumericType
argument_list|(
name|NumericField
operator|.
name|DataType
operator|.
name|INT
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|ft
operator|.
name|setNumericType
argument_list|(
name|NumericField
operator|.
name|DataType
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|ft
operator|.
name|setNumericType
argument_list|(
name|NumericField
operator|.
name|DataType
operator|.
name|LONG
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|ft
operator|.
name|setNumericType
argument_list|(
name|NumericField
operator|.
name|DataType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATE
case|:
name|ft
operator|.
name|setNumericType
argument_list|(
name|NumericField
operator|.
name|DataType
operator|.
name|LONG
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unknown type for trie field: "
operator|+
name|type
argument_list|)
throw|;
block|}
name|ft
operator|.
name|setNumericPrecisionStep
argument_list|(
name|precisionStep
argument_list|)
expr_stmt|;
specifier|final
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericField
name|f
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|INTEGER
case|:
name|int
name|i
init|=
operator|(
name|value
operator|instanceof
name|Number
operator|)
condition|?
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|f
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericField
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|i
argument_list|,
name|ft
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|float
name|fl
init|=
operator|(
name|value
operator|instanceof
name|Number
operator|)
condition|?
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|floatValue
argument_list|()
else|:
name|Float
operator|.
name|parseFloat
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|f
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericField
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|fl
argument_list|,
name|ft
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|long
name|l
init|=
operator|(
name|value
operator|instanceof
name|Number
operator|)
condition|?
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
else|:
name|Long
operator|.
name|parseLong
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|f
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericField
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|l
argument_list|,
name|ft
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|double
name|d
init|=
operator|(
name|value
operator|instanceof
name|Number
operator|)
condition|?
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|doubleValue
argument_list|()
else|:
name|Double
operator|.
name|parseDouble
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|f
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericField
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|d
argument_list|,
name|ft
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATE
case|:
name|Date
name|date
init|=
operator|(
name|value
operator|instanceof
name|Date
operator|)
condition|?
operator|(
operator|(
name|Date
operator|)
name|value
operator|)
else|:
name|dateField
operator|.
name|parseMath
argument_list|(
literal|null
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|f
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericField
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|date
operator|.
name|getTime
argument_list|()
argument_list|,
name|ft
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unknown type for trie field: "
operator|+
name|type
argument_list|)
throw|;
block|}
name|f
operator|.
name|setBoost
argument_list|(
name|boost
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
DECL|enum|TrieTypes
specifier|public
enum|enum
name|TrieTypes
block|{
DECL|enum constant|INTEGER
name|INTEGER
block|,
DECL|enum constant|LONG
name|LONG
block|,
DECL|enum constant|FLOAT
name|FLOAT
block|,
DECL|enum constant|DOUBLE
name|DOUBLE
block|,
DECL|enum constant|DATE
name|DATE
block|}
DECL|field|INT_PREFIX
specifier|static
specifier|final
name|String
name|INT_PREFIX
init|=
operator|new
name|String
argument_list|(
operator|new
name|char
index|[]
block|{
name|NumericUtils
operator|.
name|SHIFT_START_INT
block|}
argument_list|)
decl_stmt|;
DECL|field|LONG_PREFIX
specifier|static
specifier|final
name|String
name|LONG_PREFIX
init|=
operator|new
name|String
argument_list|(
operator|new
name|char
index|[]
block|{
name|NumericUtils
operator|.
name|SHIFT_START_LONG
block|}
argument_list|)
decl_stmt|;
comment|/** expert internal use, subject to change.    * Returns null if no prefix or prefix not needed, or the prefix of the main value of a trie field    * that indexes multiple precisions per value.    */
DECL|method|getMainValuePrefix
specifier|public
specifier|static
name|String
name|getMainValuePrefix
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
name|ft
parameter_list|)
block|{
if|if
condition|(
name|ft
operator|instanceof
name|TrieDateField
condition|)
name|ft
operator|=
operator|(
operator|(
name|TrieDateField
operator|)
name|ft
operator|)
operator|.
name|wrappedField
expr_stmt|;
if|if
condition|(
name|ft
operator|instanceof
name|TrieField
condition|)
block|{
specifier|final
name|TrieField
name|trie
init|=
operator|(
name|TrieField
operator|)
name|ft
decl_stmt|;
if|if
condition|(
name|trie
operator|.
name|precisionStep
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
return|return
literal|null
return|;
switch|switch
condition|(
name|trie
operator|.
name|type
condition|)
block|{
case|case
name|INTEGER
case|:
case|case
name|FLOAT
case|:
return|return
name|INT_PREFIX
return|;
case|case
name|LONG
case|:
case|case
name|DOUBLE
case|:
case|case
name|DATE
case|:
return|return
name|LONG_PREFIX
return|;
default|default:
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unknown type for trie field: "
operator|+
name|trie
operator|.
name|type
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class
begin_class
DECL|class|TrieDateFieldSource
class|class
name|TrieDateFieldSource
extends|extends
name|LongFieldSource
block|{
DECL|method|TrieDateFieldSource
specifier|public
name|TrieDateFieldSource
parameter_list|(
name|String
name|field
parameter_list|,
name|FieldCache
operator|.
name|LongParser
name|parser
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|description
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
literal|"date("
operator|+
name|field
operator|+
literal|')'
return|;
block|}
annotation|@
name|Override
DECL|method|newMutableValueLong
specifier|protected
name|MutableValueLong
name|newMutableValueLong
parameter_list|()
block|{
return|return
operator|new
name|MutableValueDate
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|longToObject
specifier|public
name|Object
name|longToObject
parameter_list|(
name|long
name|val
parameter_list|)
block|{
return|return
operator|new
name|Date
argument_list|(
name|val
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|externalToLong
specifier|public
name|long
name|externalToLong
parameter_list|(
name|String
name|extVal
parameter_list|)
block|{
return|return
name|TrieField
operator|.
name|dateField
operator|.
name|parseMath
argument_list|(
literal|null
argument_list|,
name|extVal
argument_list|)
operator|.
name|getTime
argument_list|()
return|;
block|}
block|}
end_class
end_unit
