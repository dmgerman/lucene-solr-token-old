begin_unit
begin_package
DECL|package|org.apache.solr.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|SystemIdResolver
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_class
DECL|class|ClassicIndexSchemaFactory
specifier|public
class|class
name|ClassicIndexSchemaFactory
extends|extends
name|IndexSchemaFactory
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ClassicIndexSchemaFactory
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{
comment|// no arguments expected
if|if
condition|(
name|args
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|msg
init|=
literal|"Unexpected arg(s): "
operator|+
name|args
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|msg
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|create
specifier|public
name|IndexSchema
name|create
parameter_list|(
name|String
name|resourceName
parameter_list|,
name|SolrConfig
name|config
parameter_list|)
block|{
name|SolrResourceLoader
name|loader
init|=
name|config
operator|.
name|getResourceLoader
argument_list|()
decl_stmt|;
name|InputStream
name|schemaInputStream
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|resourceName
condition|)
block|{
name|resourceName
operator|=
name|IndexSchema
operator|.
name|DEFAULT_SCHEMA_FILE
expr_stmt|;
block|}
try|try
block|{
name|schemaInputStream
operator|=
name|loader
operator|.
name|openSchema
argument_list|(
name|resourceName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Error loading schema resource "
operator|+
name|resourceName
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|InputSource
name|inputSource
init|=
operator|new
name|InputSource
argument_list|(
name|schemaInputStream
argument_list|)
decl_stmt|;
name|inputSource
operator|.
name|setSystemId
argument_list|(
name|SystemIdResolver
operator|.
name|createSystemIdFromResourceName
argument_list|(
name|resourceName
argument_list|)
argument_list|)
expr_stmt|;
name|IndexSchema
name|schema
init|=
operator|new
name|IndexSchema
argument_list|(
name|config
argument_list|,
name|resourceName
argument_list|,
name|inputSource
argument_list|)
decl_stmt|;
return|return
name|schema
return|;
block|}
block|}
end_class
end_unit
