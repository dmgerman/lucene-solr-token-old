begin_unit
begin_package
DECL|package|org.apache.solr.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|FlagsAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PayloadAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TermToBytesRefAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TypeAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Attribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeSource
operator|.
name|State
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|PreAnalyzedField
operator|.
name|ParseResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|PreAnalyzedField
operator|.
name|PreAnalyzedParser
import|;
end_import
begin_comment
comment|/**  * Simple plain text format parser for {@link PreAnalyzedField}.  *<h2>Serialization format</h2>  *<p>The format of the serialization is as follows:  *<pre>  * content ::= version (stored)? tokens  * version ::= digit+ " "  * ; stored field value - any "=" inside must be escaped!  * stored ::= "=" text "="  * tokens ::= (token ((" ") + token)*)*  * token ::= text ("," attrib)*  * attrib ::= name '=' value  * name ::= text  * value ::= text  *</pre>  *<p>Special characters in "text" values can be escaped  * using the escape character \ . The following escape sequences are recognized:  *<pre>  * "\ " - literal space character  * "\," - literal , character  * "\=" - literal = character  * "\\" - literal \ character  * "\n" - newline  * "\r" - carriage return  * "\t" - horizontal tab  *</pre>  * Please note that Unicode sequences (e.g.&#92;u0001) are not supported.  *<h2>Supported attribute names</h2>  * The following token attributes are supported, and identified with short  * symbolic names:  *<pre>  * i - position increment (integer)  * s - token offset, start position (integer)  * e - token offset, end position (integer)  * t - token type (string)  * f - token flags (hexadecimal integer)  * p - payload (bytes in hexadecimal format)  *</pre>  * Token positions are tracked and implicitly added to the token stream -   * the start and end offsets consider only the term text and whitespace,  * and exclude the space taken by token attributes.  *<h2>Example token streams</h2>  *<pre>  * 1 one two three   - version 1   - stored: 'null'   - tok: '(term=one,startOffset=0,endOffset=3)'   - tok: '(term=two,startOffset=4,endOffset=7)'   - tok: '(term=three,startOffset=8,endOffset=13)'  1 one  two   three    - version 1   - stored: 'null'   - tok: '(term=one,startOffset=1,endOffset=4)'   - tok: '(term=two,startOffset=6,endOffset=9)'   - tok: '(term=three,startOffset=12,endOffset=17)' 1 one,s=123,e=128,i=22  two three,s=20,e=22   - version 1   - stored: 'null'   - tok: '(term=one,positionIncrement=22,startOffset=123,endOffset=128)'   - tok: '(term=two,positionIncrement=1,startOffset=5,endOffset=8)'   - tok: '(term=three,positionIncrement=1,startOffset=20,endOffset=22)' 1 \ one\ \,,i=22,a=\, two\=    \n,\ =\   \   - version 1   - stored: 'null'   - tok: '(term= one ,,positionIncrement=22,startOffset=0,endOffset=6)'   - tok: '(term=two=      ,positionIncrement=1,startOffset=7,endOffset=15)'   - tok: '(term=\,positionIncrement=1,startOffset=17,endOffset=18)' 1 ,i=22 ,i=33,s=2,e=20 ,    - version 1   - stored: 'null'   - tok: '(term=,positionIncrement=22,startOffset=0,endOffset=0)'   - tok: '(term=,positionIncrement=33,startOffset=2,endOffset=20)'   - tok: '(term=,positionIncrement=1,startOffset=2,endOffset=2)' 1 =This is the stored part with \=   \n    \t escapes.=one two three    - version 1   - stored: 'This is the stored part with =   \n    \t escapes.'   - tok: '(term=one,startOffset=0,endOffset=3)'   - tok: '(term=two,startOffset=4,endOffset=7)'   - tok: '(term=three,startOffset=8,endOffset=13)' 1 ==   - version 1   - stored: ''   - (no tokens) 1 =this is a test.=   - version 1   - stored: 'this is a test.'   - (no tokens)  *</pre>   */
end_comment
begin_class
DECL|class|SimplePreAnalyzedParser
specifier|public
specifier|final
class|class
name|SimplePreAnalyzedParser
implements|implements
name|PreAnalyzedParser
block|{
DECL|field|VERSION
specifier|static
specifier|final
name|String
name|VERSION
init|=
literal|"1"
decl_stmt|;
DECL|class|Tok
specifier|private
specifier|static
class|class
name|Tok
block|{
DECL|field|token
name|StringBuilder
name|token
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
DECL|field|attr
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attr
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|isEmpty
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|token
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|&&
name|attr
operator|.
name|size
argument_list|()
operator|==
literal|0
return|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|token
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|attr
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"tok='"
operator|+
name|token
operator|+
literal|"',attr="
operator|+
name|attr
return|;
block|}
block|}
comment|// parser state
DECL|enum|S
DECL|enum constant|TOKEN
DECL|enum constant|NAME
DECL|enum constant|VALUE
DECL|enum constant|UNDEF
specifier|private
specifier|static
enum|enum
name|S
block|{
name|TOKEN
block|,
name|NAME
block|,
name|VALUE
block|,
name|UNDEF
block|}
empty_stmt|;
DECL|field|EMPTY_BYTES
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_BYTES
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
comment|/** Utility method to convert byte array to a hex string. */
DECL|method|hexToBytes
specifier|static
name|byte
index|[]
name|hexToBytes
parameter_list|(
name|String
name|hex
parameter_list|)
block|{
if|if
condition|(
name|hex
operator|==
literal|null
condition|)
block|{
return|return
name|EMPTY_BYTES
return|;
block|}
name|hex
operator|=
name|hex
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|hex
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|EMPTY_BYTES
return|;
block|}
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
name|hex
operator|.
name|length
argument_list|()
operator|/
literal|2
argument_list|)
decl_stmt|;
name|byte
name|b
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hex
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|high
init|=
name|charToNibble
argument_list|(
name|hex
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|low
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|hex
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|low
operator|=
name|charToNibble
argument_list|(
name|hex
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|b
operator|=
call|(
name|byte
call|)
argument_list|(
name|high
operator|<<
literal|4
operator||
name|low
argument_list|)
expr_stmt|;
name|baos
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
DECL|method|charToNibble
specifier|static
specifier|final
name|int
name|charToNibble
parameter_list|(
name|char
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|>=
literal|'0'
operator|&&
name|c
operator|<=
literal|'9'
condition|)
block|{
return|return
name|c
operator|-
literal|'0'
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|>=
literal|'a'
operator|&&
name|c
operator|<=
literal|'f'
condition|)
block|{
return|return
literal|0xa
operator|+
operator|(
name|c
operator|-
literal|'a'
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|>=
literal|'A'
operator|&&
name|c
operator|<=
literal|'F'
condition|)
block|{
return|return
literal|0xA
operator|+
operator|(
name|c
operator|-
literal|'A'
operator|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not a hex character: '"
operator|+
name|c
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
DECL|method|bytesToHex
specifier|static
name|String
name|bytesToHex
parameter_list|(
name|byte
name|bytes
index|[]
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|offset
operator|+
name|length
condition|;
operator|++
name|i
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
literal|0x0100
operator|+
operator|(
name|bytes
index|[
name|i
index|]
operator|&
literal|0x00FF
operator|)
argument_list|)
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|SimplePreAnalyzedParser
specifier|public
name|SimplePreAnalyzedParser
parameter_list|()
block|{        }
annotation|@
name|Override
DECL|method|parse
specifier|public
name|ParseResult
name|parse
parameter_list|(
name|Reader
name|reader
parameter_list|,
name|AttributeSource
name|parent
parameter_list|)
throws|throws
name|IOException
block|{
name|ParseResult
name|res
init|=
operator|new
name|ParseResult
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|char
index|[]
name|buf
init|=
operator|new
name|char
index|[
literal|128
index|]
decl_stmt|;
name|int
name|cnt
decl_stmt|;
while|while
condition|(
operator|(
name|cnt
operator|=
name|reader
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
block|}
name|String
name|val
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// empty string - accept even without version number
if|if
condition|(
name|val
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|res
return|;
block|}
comment|// first consume the version
name|int
name|idx
init|=
name|val
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Missing VERSION token"
argument_list|)
throw|;
block|}
name|String
name|version
init|=
name|val
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|VERSION
operator|.
name|equals
argument_list|(
name|version
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown VERSION "
operator|+
name|version
argument_list|)
throw|;
block|}
name|val
operator|=
name|val
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// then consume the optional stored part
name|int
name|tsStart
init|=
literal|0
decl_stmt|;
name|boolean
name|hasStored
init|=
literal|false
decl_stmt|;
name|StringBuilder
name|storedBuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'='
condition|)
block|{
name|hasStored
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|val
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|val
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|val
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'\\'
condition|)
block|{
if|if
condition|(
name|i
operator|<
name|val
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
name|c
operator|=
name|val
operator|.
name|charAt
argument_list|(
operator|++
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|'='
condition|)
block|{
comment|// we recognize only \= escape in the stored part
name|storedBuf
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|storedBuf
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|storedBuf
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
else|else
block|{
name|storedBuf
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'='
condition|)
block|{
comment|// end of stored text
name|tsStart
operator|=
name|i
operator|+
literal|1
expr_stmt|;
break|break;
block|}
else|else
block|{
name|storedBuf
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tsStart
operator|==
literal|0
condition|)
block|{
comment|// missing end-of-stored marker
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Missing end marker of stored part"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected end of stored field"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|hasStored
condition|)
block|{
name|res
operator|.
name|str
operator|=
name|storedBuf
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|Tok
name|tok
init|=
operator|new
name|Tok
argument_list|()
decl_stmt|;
name|StringBuilder
name|attName
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StringBuilder
name|attVal
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// parser state
name|S
name|s
init|=
name|S
operator|.
name|UNDEF
decl_stmt|;
name|int
name|lastPos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|tsStart
init|;
name|i
operator|<
name|val
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|val
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|' '
condition|)
block|{
comment|// collect leftovers
switch|switch
condition|(
name|s
condition|)
block|{
case|case
name|VALUE
case|:
if|if
condition|(
name|attVal
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected character '"
operator|+
name|c
operator|+
literal|"' at position "
operator|+
name|i
operator|+
literal|" - empty value of attribute."
argument_list|)
throw|;
block|}
if|if
condition|(
name|attName
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tok
operator|.
name|attr
operator|.
name|put
argument_list|(
name|attName
operator|.
name|toString
argument_list|()
argument_list|,
name|attVal
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NAME
case|:
comment|// attr name without a value ?
if|if
condition|(
name|attName
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected character '"
operator|+
name|c
operator|+
literal|"' at position "
operator|+
name|i
operator|+
literal|" - missing attribute value."
argument_list|)
throw|;
block|}
else|else
block|{
comment|// accept missing att name and value
block|}
break|break;
case|case
name|TOKEN
case|:
case|case
name|UNDEF
case|:
comment|// do nothing, advance to next token
block|}
name|attName
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|attVal
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tok
operator|.
name|isEmpty
argument_list|()
operator|||
name|s
operator|==
name|S
operator|.
name|NAME
condition|)
block|{
name|AttributeSource
operator|.
name|State
name|state
init|=
name|createState
argument_list|(
name|parent
argument_list|,
name|tok
argument_list|,
name|lastPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
name|res
operator|.
name|states
operator|.
name|add
argument_list|(
name|state
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// reset tok
name|s
operator|=
name|S
operator|.
name|UNDEF
expr_stmt|;
name|tok
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// skip
name|lastPos
operator|++
expr_stmt|;
continue|continue;
block|}
name|StringBuilder
name|tgt
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|s
condition|)
block|{
case|case
name|TOKEN
case|:
name|tgt
operator|=
name|tok
operator|.
name|token
expr_stmt|;
break|break;
case|case
name|NAME
case|:
name|tgt
operator|=
name|attName
expr_stmt|;
break|break;
case|case
name|VALUE
case|:
name|tgt
operator|=
name|attVal
expr_stmt|;
break|break;
case|case
name|UNDEF
case|:
name|tgt
operator|=
name|tok
operator|.
name|token
expr_stmt|;
name|s
operator|=
name|S
operator|.
name|TOKEN
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|==
literal|'\\'
condition|)
block|{
if|if
condition|(
name|s
operator|==
name|S
operator|.
name|TOKEN
condition|)
name|lastPos
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|val
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
comment|// end
name|tgt
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
name|c
operator|=
name|val
operator|.
name|charAt
argument_list|(
operator|++
name|i
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'\\'
case|:
case|case
literal|'='
case|:
case|case
literal|','
case|:
case|case
literal|' '
case|:
name|tgt
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'n'
case|:
name|tgt
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'r'
case|:
name|tgt
operator|.
name|append
argument_list|(
literal|'\r'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'t'
case|:
name|tgt
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
break|break;
default|default:
name|tgt
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|tgt
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|lastPos
operator|++
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// state switch
if|if
condition|(
name|c
operator|==
literal|','
condition|)
block|{
if|if
condition|(
name|s
operator|==
name|S
operator|.
name|TOKEN
condition|)
block|{
name|s
operator|=
name|S
operator|.
name|NAME
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|==
name|S
operator|.
name|VALUE
condition|)
block|{
comment|// end of value, start of next attr
if|if
condition|(
name|attVal
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected character '"
operator|+
name|c
operator|+
literal|"' at position "
operator|+
name|i
operator|+
literal|" - empty value of attribute."
argument_list|)
throw|;
block|}
if|if
condition|(
name|attName
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|attVal
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tok
operator|.
name|attr
operator|.
name|put
argument_list|(
name|attName
operator|.
name|toString
argument_list|()
argument_list|,
name|attVal
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// reset
name|attName
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|attVal
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|s
operator|=
name|S
operator|.
name|NAME
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected character '"
operator|+
name|c
operator|+
literal|"' at position "
operator|+
name|i
operator|+
literal|" - missing attribute value."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'='
condition|)
block|{
if|if
condition|(
name|s
operator|==
name|S
operator|.
name|NAME
condition|)
block|{
name|s
operator|=
name|S
operator|.
name|VALUE
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected character '"
operator|+
name|c
operator|+
literal|"' at position "
operator|+
name|i
operator|+
literal|" - empty value of attribute."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|tgt
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|==
name|S
operator|.
name|TOKEN
condition|)
name|lastPos
operator|++
expr_stmt|;
block|}
block|}
block|}
comment|// collect leftovers
if|if
condition|(
operator|!
name|tok
operator|.
name|isEmpty
argument_list|()
operator|||
name|s
operator|==
name|S
operator|.
name|NAME
operator|||
name|s
operator|==
name|S
operator|.
name|VALUE
condition|)
block|{
comment|// remaining attrib?
if|if
condition|(
name|s
operator|==
name|S
operator|.
name|VALUE
condition|)
block|{
if|if
condition|(
name|attName
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|attVal
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tok
operator|.
name|attr
operator|.
name|put
argument_list|(
name|attName
operator|.
name|toString
argument_list|()
argument_list|,
name|attVal
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|AttributeSource
operator|.
name|State
name|state
init|=
name|createState
argument_list|(
name|parent
argument_list|,
name|tok
argument_list|,
name|lastPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
name|res
operator|.
name|states
operator|.
name|add
argument_list|(
name|state
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
DECL|method|createState
specifier|private
specifier|static
name|AttributeSource
operator|.
name|State
name|createState
parameter_list|(
name|AttributeSource
name|a
parameter_list|,
name|Tok
name|state
parameter_list|,
name|int
name|tokenEnd
parameter_list|)
block|{
name|a
operator|.
name|clearAttributes
argument_list|()
expr_stmt|;
name|CharTermAttribute
name|termAtt
init|=
name|a
operator|.
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|char
index|[]
name|tokChars
init|=
name|state
operator|.
name|token
operator|.
name|toString
argument_list|()
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|termAtt
operator|.
name|copyBuffer
argument_list|(
name|tokChars
argument_list|,
literal|0
argument_list|,
name|tokChars
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|tokenStart
init|=
name|tokenEnd
operator|-
name|state
operator|.
name|token
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|state
operator|.
name|attr
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|k
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|k
operator|.
name|equals
argument_list|(
literal|"i"
argument_list|)
condition|)
block|{
comment|// position increment
name|int
name|incr
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|PositionIncrementAttribute
name|posIncr
init|=
name|a
operator|.
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|posIncr
operator|.
name|setPositionIncrement
argument_list|(
name|incr
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|equals
argument_list|(
literal|"s"
argument_list|)
condition|)
block|{
name|tokenStart
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|equals
argument_list|(
literal|"e"
argument_list|)
condition|)
block|{
name|tokenEnd
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|equals
argument_list|(
literal|"y"
argument_list|)
condition|)
block|{
name|TypeAttribute
name|type
init|=
name|a
operator|.
name|addAttribute
argument_list|(
name|TypeAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|type
operator|.
name|setType
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|equals
argument_list|(
literal|"f"
argument_list|)
condition|)
block|{
name|FlagsAttribute
name|flags
init|=
name|a
operator|.
name|addAttribute
argument_list|(
name|FlagsAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|f
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|flags
operator|.
name|setFlags
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|equals
argument_list|(
literal|"p"
argument_list|)
condition|)
block|{
name|PayloadAttribute
name|p
init|=
name|a
operator|.
name|addAttribute
argument_list|(
name|PayloadAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|hexToBytes
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|data
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|p
operator|.
name|setPayload
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// unknown attribute
block|}
block|}
comment|// handle offset attr
name|OffsetAttribute
name|offset
init|=
name|a
operator|.
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|offset
operator|.
name|setOffset
argument_list|(
name|tokenStart
argument_list|,
name|tokenEnd
argument_list|)
expr_stmt|;
name|State
name|resState
init|=
name|a
operator|.
name|captureState
argument_list|()
decl_stmt|;
name|a
operator|.
name|clearAttributes
argument_list|()
expr_stmt|;
return|return
name|resState
return|;
block|}
annotation|@
name|Override
DECL|method|toFormattedString
specifier|public
name|String
name|toFormattedString
parameter_list|(
name|Field
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|VERSION
operator|+
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|fieldType
argument_list|()
operator|.
name|stored
argument_list|()
condition|)
block|{
name|String
name|s
init|=
name|f
operator|.
name|stringValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
comment|// encode the equals sign
name|s
operator|=
name|s
operator|.
name|replaceAll
argument_list|(
literal|"="
argument_list|,
literal|"\\="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
block|}
block|}
name|TokenStream
name|ts
init|=
name|f
operator|.
name|tokenStreamValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|ts
operator|!=
literal|null
condition|)
block|{
name|StringBuilder
name|tok
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|next
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|ts
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
if|if
condition|(
name|next
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|next
operator|=
literal|true
expr_stmt|;
block|}
name|tok
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Attribute
argument_list|>
argument_list|>
name|it
init|=
name|ts
operator|.
name|getAttributeClassesIterator
argument_list|()
decl_stmt|;
name|String
name|cTerm
init|=
literal|null
decl_stmt|;
name|String
name|tTerm
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Attribute
argument_list|>
name|cl
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ts
operator|.
name|hasAttribute
argument_list|(
name|cl
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Attribute
name|att
init|=
name|ts
operator|.
name|getAttribute
argument_list|(
name|cl
argument_list|)
decl_stmt|;
if|if
condition|(
name|cl
operator|.
name|isAssignableFrom
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
condition|)
block|{
name|CharTermAttribute
name|catt
init|=
operator|(
name|CharTermAttribute
operator|)
name|att
decl_stmt|;
name|cTerm
operator|=
name|escape
argument_list|(
name|catt
operator|.
name|buffer
argument_list|()
argument_list|,
name|catt
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cl
operator|.
name|isAssignableFrom
argument_list|(
name|TermToBytesRefAttribute
operator|.
name|class
argument_list|)
condition|)
block|{
name|TermToBytesRefAttribute
name|tatt
init|=
operator|(
name|TermToBytesRefAttribute
operator|)
name|att
decl_stmt|;
name|char
index|[]
name|tTermChars
init|=
name|tatt
operator|.
name|getBytesRef
argument_list|()
operator|.
name|utf8ToString
argument_list|()
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|tTerm
operator|=
name|escape
argument_list|(
name|tTermChars
argument_list|,
name|tTermChars
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|tok
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|tok
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
if|if
condition|(
name|cl
operator|.
name|isAssignableFrom
argument_list|(
name|FlagsAttribute
operator|.
name|class
argument_list|)
condition|)
block|{
name|tok
operator|.
name|append
argument_list|(
literal|"f="
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
operator|(
operator|(
name|FlagsAttribute
operator|)
name|att
operator|)
operator|.
name|getFlags
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cl
operator|.
name|isAssignableFrom
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
condition|)
block|{
name|tok
operator|.
name|append
argument_list|(
literal|"s="
operator|+
operator|(
operator|(
name|OffsetAttribute
operator|)
name|att
operator|)
operator|.
name|startOffset
argument_list|()
operator|+
literal|",e="
operator|+
operator|(
operator|(
name|OffsetAttribute
operator|)
name|att
operator|)
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cl
operator|.
name|isAssignableFrom
argument_list|(
name|PayloadAttribute
operator|.
name|class
argument_list|)
condition|)
block|{
name|BytesRef
name|p
init|=
operator|(
operator|(
name|PayloadAttribute
operator|)
name|att
operator|)
operator|.
name|getPayload
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|tok
operator|.
name|append
argument_list|(
literal|"p="
operator|+
name|bytesToHex
argument_list|(
name|p
operator|.
name|bytes
argument_list|,
name|p
operator|.
name|offset
argument_list|,
name|p
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tok
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tok
operator|.
name|setLength
argument_list|(
name|tok
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// remove the last comma
block|}
block|}
elseif|else
if|if
condition|(
name|cl
operator|.
name|isAssignableFrom
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
condition|)
block|{
name|tok
operator|.
name|append
argument_list|(
literal|"i="
operator|+
operator|(
operator|(
name|PositionIncrementAttribute
operator|)
name|att
operator|)
operator|.
name|getPositionIncrement
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cl
operator|.
name|isAssignableFrom
argument_list|(
name|TypeAttribute
operator|.
name|class
argument_list|)
condition|)
block|{
name|tok
operator|.
name|append
argument_list|(
literal|"y="
operator|+
name|escape
argument_list|(
operator|(
operator|(
name|TypeAttribute
operator|)
name|att
operator|)
operator|.
name|type
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tok
operator|.
name|append
argument_list|(
name|cl
operator|.
name|getName
argument_list|()
operator|+
literal|"="
operator|+
name|escape
argument_list|(
name|att
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|term
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cTerm
operator|!=
literal|null
condition|)
block|{
name|term
operator|=
name|cTerm
expr_stmt|;
block|}
else|else
block|{
name|term
operator|=
name|tTerm
expr_stmt|;
block|}
if|if
condition|(
name|term
operator|!=
literal|null
operator|&&
name|term
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|tok
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tok
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|term
operator|+
literal|","
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tok
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|term
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
name|tok
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|escape
name|String
name|escape
parameter_list|(
name|String
name|val
parameter_list|)
block|{
return|return
name|escape
argument_list|(
name|val
operator|.
name|toCharArray
argument_list|()
argument_list|,
name|val
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
DECL|method|escape
name|String
name|escape
parameter_list|(
name|char
index|[]
name|val
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|val
operator|==
literal|null
operator|||
name|len
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|val
index|[
name|i
index|]
condition|)
block|{
case|case
literal|'\\'
case|:
case|case
literal|'='
case|:
case|case
literal|','
case|:
case|case
literal|' '
case|:
name|sb
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|val
index|[
name|i
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\n'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'n'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\r'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'r'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\t'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'t'
argument_list|)
expr_stmt|;
break|break;
default|default:
name|sb
operator|.
name|append
argument_list|(
name|val
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class
end_unit
