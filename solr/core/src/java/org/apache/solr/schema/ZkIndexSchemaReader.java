begin_unit
begin_package
DECL|package|org.apache.solr.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|ZkSolrResourceLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZooKeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_comment
comment|/** Keeps a ManagedIndexSchema up-to-date when changes are made to the serialized managed schema in ZooKeeper */
end_comment
begin_class
DECL|class|ZkIndexSchemaReader
specifier|public
class|class
name|ZkIndexSchemaReader
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ZkIndexSchemaReader
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|managedIndexSchemaFactory
specifier|private
specifier|final
name|ManagedIndexSchemaFactory
name|managedIndexSchemaFactory
decl_stmt|;
DECL|field|zkClient
specifier|private
name|SolrZkClient
name|zkClient
decl_stmt|;
DECL|field|managedSchemaPath
specifier|private
name|String
name|managedSchemaPath
decl_stmt|;
DECL|method|ZkIndexSchemaReader
specifier|public
name|ZkIndexSchemaReader
parameter_list|(
name|ManagedIndexSchemaFactory
name|managedIndexSchemaFactory
parameter_list|)
block|{
name|this
operator|.
name|managedIndexSchemaFactory
operator|=
name|managedIndexSchemaFactory
expr_stmt|;
name|ZkSolrResourceLoader
name|zkLoader
init|=
operator|(
name|ZkSolrResourceLoader
operator|)
name|managedIndexSchemaFactory
operator|.
name|getResourceLoader
argument_list|()
decl_stmt|;
name|this
operator|.
name|zkClient
operator|=
name|zkLoader
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkClient
argument_list|()
expr_stmt|;
name|managedSchemaPath
operator|=
name|zkLoader
operator|.
name|getCollectionZkPath
argument_list|()
operator|+
literal|"/"
operator|+
name|managedIndexSchemaFactory
operator|.
name|getManagedSchemaResourceName
argument_list|()
expr_stmt|;
name|createSchemaWatcher
argument_list|()
expr_stmt|;
block|}
DECL|method|getSchemaUpdateLock
specifier|public
name|Object
name|getSchemaUpdateLock
parameter_list|()
block|{
return|return
name|managedIndexSchemaFactory
operator|.
name|getSchemaUpdateLock
argument_list|()
return|;
block|}
DECL|method|createSchemaWatcher
specifier|public
name|void
name|createSchemaWatcher
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Creating ZooKeeper watch for the managed schema at "
operator|+
name|managedSchemaPath
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
try|try
block|{
name|zkClient
operator|.
name|exists
argument_list|(
name|managedSchemaPath
argument_list|,
operator|new
name|Watcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
comment|// session events are not change events, and do not remove the watcher
if|if
condition|(
name|Event
operator|.
name|EventType
operator|.
name|None
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"A schema change: {}, has occurred - updating schema from ZooKeeper ..."
argument_list|,
name|event
argument_list|)
expr_stmt|;
try|try
block|{
name|updateSchema
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|SESSIONEXPIRED
operator|||
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|CONNECTIONLOSS
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"ZooKeeper watch triggered, but Solr cannot talk to ZK"
argument_list|)
expr_stmt|;
return|return;
block|}
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Error creating ZooKeeper watch for the managed schema"
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateSchema
specifier|private
name|void
name|updateSchema
parameter_list|(
name|Watcher
name|watcher
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|getSchemaUpdateLock
argument_list|()
init|)
block|{
specifier|final
name|ManagedIndexSchema
name|oldSchema
init|=
name|managedIndexSchemaFactory
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|zkClient
operator|.
name|getData
argument_list|(
name|managedSchemaPath
argument_list|,
name|watcher
argument_list|,
name|stat
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|.
name|getVersion
argument_list|()
operator|!=
name|oldSchema
operator|.
name|schemaZkVersion
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Retrieved schema from ZooKeeper"
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|InputSource
name|inputSource
init|=
operator|new
name|InputSource
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|ManagedIndexSchema
name|newSchema
init|=
name|oldSchema
operator|.
name|reloadFields
argument_list|(
name|inputSource
argument_list|,
name|stat
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
name|managedIndexSchemaFactory
operator|.
name|setSchema
argument_list|(
name|newSchema
argument_list|)
expr_stmt|;
name|long
name|stop
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Finished refreshing schema in "
operator|+
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|stop
operator|-
name|start
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
