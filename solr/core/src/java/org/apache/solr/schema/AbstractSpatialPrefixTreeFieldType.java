begin_unit
begin_package
DECL|package|org.apache.solr.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|KeywordTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
operator|.
name|PrefixTreeStrategy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
operator|.
name|tree
operator|.
name|SpatialPrefixTree
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
operator|.
name|tree
operator|.
name|SpatialPrefixTreeFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|query
operator|.
name|SpatialArgsParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|MapListener
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Shape
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * @see PrefixTreeStrategy  * @lucene.experimental  */
end_comment
begin_class
DECL|class|AbstractSpatialPrefixTreeFieldType
specifier|public
specifier|abstract
class|class
name|AbstractSpatialPrefixTreeFieldType
parameter_list|<
name|T
extends|extends
name|PrefixTreeStrategy
parameter_list|>
extends|extends
name|AbstractSpatialFieldType
argument_list|<
name|T
argument_list|>
block|{
comment|/** @see org.apache.lucene.spatial.prefix.RecursivePrefixTreeStrategy#setDefaultFieldValuesArrayLen(int)  */
DECL|field|DEFAULT_FIELD_VALUES_ARRAY_LEN
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_FIELD_VALUES_ARRAY_LEN
init|=
literal|"defaultFieldValuesArrayLen"
decl_stmt|;
DECL|field|grid
specifier|protected
name|SpatialPrefixTree
name|grid
decl_stmt|;
DECL|field|distErrPct
specifier|private
name|Double
name|distErrPct
decl_stmt|;
DECL|field|defaultFieldValuesArrayLen
specifier|private
name|Integer
name|defaultFieldValuesArrayLen
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|init
specifier|protected
name|void
name|init
parameter_list|(
name|IndexSchema
name|schema
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|schema
argument_list|,
name|args
argument_list|)
expr_stmt|;
comment|// Convert the maxDistErr to degrees (based on distanceUnits) since Lucene spatial layer depends on degrees
if|if
condition|(
name|args
operator|.
name|containsKey
argument_list|(
name|SpatialPrefixTreeFactory
operator|.
name|MAX_DIST_ERR
argument_list|)
condition|)
block|{
name|double
name|maxDistErrOriginal
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|args
operator|.
name|get
argument_list|(
name|SpatialPrefixTreeFactory
operator|.
name|MAX_DIST_ERR
argument_list|)
argument_list|)
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
name|SpatialPrefixTreeFactory
operator|.
name|MAX_DIST_ERR
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|maxDistErrOriginal
operator|*
name|distanceUnits
operator|.
name|multiplierFromThisUnitToDegrees
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Solr expects us to remove the parameters we've used.
name|MapListener
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|argsWrap
init|=
operator|new
name|MapListener
argument_list|<>
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|grid
operator|=
name|SpatialPrefixTreeFactory
operator|.
name|makeSPT
argument_list|(
name|argsWrap
argument_list|,
name|schema
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|args
operator|.
name|keySet
argument_list|()
operator|.
name|removeAll
argument_list|(
name|argsWrap
operator|.
name|getSeenKeys
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|v
init|=
name|args
operator|.
name|remove
argument_list|(
name|SpatialArgsParser
operator|.
name|DIST_ERR_PCT
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
name|distErrPct
operator|=
name|Double
operator|.
name|valueOf
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|v
operator|=
name|args
operator|.
name|remove
argument_list|(
name|DEFAULT_FIELD_VALUES_ARRAY_LEN
argument_list|)
expr_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
name|defaultFieldValuesArrayLen
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
comment|/**    * This analyzer is not actually used for indexing.  It is implemented here    * so that the analysis UI will show reasonable tokens.    */
annotation|@
name|Override
DECL|method|getIndexAnalyzer
specifier|public
name|Analyzer
name|getIndexAnalyzer
parameter_list|()
block|{
return|return
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
specifier|final
name|String
name|fieldName
parameter_list|)
block|{
return|return
operator|new
name|TokenStreamComponents
argument_list|(
operator|new
name|KeywordTokenizer
argument_list|()
argument_list|)
block|{
specifier|private
name|Shape
name|shape
init|=
literal|null
decl_stmt|;
specifier|protected
name|void
name|setReader
parameter_list|(
specifier|final
name|Reader
name|reader
parameter_list|)
block|{
name|source
operator|.
name|setReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
try|try
block|{
name|shape
operator|=
name|parseShape
argument_list|(
name|IOUtils
operator|.
name|toString
argument_list|(
name|reader
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|TokenStream
name|getTokenStream
parameter_list|()
block|{
name|PrefixTreeStrategy
name|s
init|=
name|newSpatialStrategy
argument_list|(
name|fieldName
operator|==
literal|null
condition|?
name|getTypeName
argument_list|()
else|:
name|fieldName
argument_list|)
decl_stmt|;
return|return
name|s
operator|.
name|createIndexableFields
argument_list|(
name|shape
argument_list|)
index|[
literal|0
index|]
operator|.
name|tokenStreamValue
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|getQueryAnalyzer
specifier|public
name|Analyzer
name|getQueryAnalyzer
parameter_list|()
block|{
return|return
name|getIndexAnalyzer
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|newSpatialStrategy
specifier|protected
name|T
name|newSpatialStrategy
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|T
name|strat
init|=
name|newPrefixTreeStrategy
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|distErrPct
operator|!=
literal|null
condition|)
name|strat
operator|.
name|setDistErrPct
argument_list|(
name|distErrPct
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultFieldValuesArrayLen
operator|!=
literal|null
condition|)
name|strat
operator|.
name|setDefaultFieldValuesArrayLen
argument_list|(
name|defaultFieldValuesArrayLen
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
name|this
operator|.
name|toString
argument_list|()
operator|+
literal|" strat: "
operator|+
name|strat
operator|+
literal|" maxLevels: "
operator|+
name|grid
operator|.
name|getMaxLevels
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO output maxDetailKm
return|return
name|strat
return|;
block|}
DECL|method|newPrefixTreeStrategy
specifier|protected
specifier|abstract
name|T
name|newPrefixTreeStrategy
parameter_list|(
name|String
name|fieldName
parameter_list|)
function_decl|;
block|}
end_class
end_unit
