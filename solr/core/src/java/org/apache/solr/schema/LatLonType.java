begin_unit
begin_package
DECL|package|org.apache.solr.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Point
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|StorableField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|FunctionValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|valuesource
operator|.
name|VectorValueSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|LeafCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ComplexExplanation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|uninverting
operator|.
name|UninvertingReader
operator|.
name|Type
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|TextResponseWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|DelegatingCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|ExtendedQueryBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|PostFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|QParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SpatialOptions
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|context
operator|.
name|SpatialContext
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|distance
operator|.
name|DistanceUtils
import|;
end_import
begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Rectangle
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|SpatialUtils
import|;
end_import
begin_comment
comment|/**  * Represents a Latitude/Longitude as a 2 dimensional point.  Latitude is<b>always</b> specified first.  */
end_comment
begin_class
DECL|class|LatLonType
specifier|public
class|class
name|LatLonType
extends|extends
name|AbstractSubTypeFieldType
implements|implements
name|SpatialQueryable
block|{
DECL|field|LAT
specifier|protected
specifier|static
specifier|final
name|int
name|LAT
init|=
literal|0
decl_stmt|;
DECL|field|LON
specifier|protected
specifier|static
specifier|final
name|int
name|LON
init|=
literal|1
decl_stmt|;
annotation|@
name|Override
DECL|method|init
specifier|protected
name|void
name|init
parameter_list|(
name|IndexSchema
name|schema
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|schema
argument_list|,
name|args
argument_list|)
expr_stmt|;
comment|//TODO: refactor this, as we are creating the suffix cache twice, since the super.init does it too
name|createSuffixCache
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|//we need three extra fields: one for the storage field, two for the lat/lon
block|}
annotation|@
name|Override
DECL|method|createFields
specifier|public
name|List
argument_list|<
name|StorableField
argument_list|>
name|createFields
parameter_list|(
name|SchemaField
name|field
parameter_list|,
name|Object
name|value
parameter_list|,
name|float
name|boost
parameter_list|)
block|{
name|String
name|externalVal
init|=
name|value
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|//we could have 3 fields (two for the lat& lon, one for storage)
name|List
argument_list|<
name|StorableField
argument_list|>
name|f
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|indexed
argument_list|()
condition|)
block|{
name|Point
name|point
init|=
name|SpatialUtils
operator|.
name|parsePointSolrException
argument_list|(
name|externalVal
argument_list|,
name|SpatialContext
operator|.
name|GEO
argument_list|)
decl_stmt|;
comment|//latitude
name|SchemaField
name|subLatSF
init|=
name|subField
argument_list|(
name|field
argument_list|,
name|LAT
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|f
operator|.
name|add
argument_list|(
name|subLatSF
operator|.
name|createField
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|point
operator|.
name|getY
argument_list|()
argument_list|)
argument_list|,
name|subLatSF
operator|.
name|indexed
argument_list|()
operator|&&
operator|!
name|subLatSF
operator|.
name|omitNorms
argument_list|()
condition|?
name|boost
else|:
literal|1f
argument_list|)
argument_list|)
expr_stmt|;
comment|//longitude
name|SchemaField
name|subLonSF
init|=
name|subField
argument_list|(
name|field
argument_list|,
name|LON
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|f
operator|.
name|add
argument_list|(
name|subLonSF
operator|.
name|createField
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|point
operator|.
name|getX
argument_list|()
argument_list|)
argument_list|,
name|subLonSF
operator|.
name|indexed
argument_list|()
operator|&&
operator|!
name|subLonSF
operator|.
name|omitNorms
argument_list|()
condition|?
name|boost
else|:
literal|1f
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|field
operator|.
name|stored
argument_list|()
condition|)
block|{
name|FieldType
name|customType
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|customType
operator|.
name|setStored
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|add
argument_list|(
name|createField
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|externalVal
argument_list|,
name|customType
argument_list|,
literal|1f
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|f
return|;
block|}
annotation|@
name|Override
DECL|method|getRangeQuery
specifier|public
name|Query
name|getRangeQuery
parameter_list|(
name|QParser
name|parser
parameter_list|,
name|SchemaField
name|field
parameter_list|,
name|String
name|part1
parameter_list|,
name|String
name|part2
parameter_list|,
name|boolean
name|minInclusive
parameter_list|,
name|boolean
name|maxInclusive
parameter_list|)
block|{
name|Point
name|p1
init|=
name|SpatialUtils
operator|.
name|parsePointSolrException
argument_list|(
name|part1
argument_list|,
name|SpatialContext
operator|.
name|GEO
argument_list|)
decl_stmt|;
name|Point
name|p2
init|=
name|SpatialUtils
operator|.
name|parsePointSolrException
argument_list|(
name|part2
argument_list|,
name|SpatialContext
operator|.
name|GEO
argument_list|)
decl_stmt|;
name|SchemaField
name|latSF
init|=
name|subField
argument_list|(
name|field
argument_list|,
name|LAT
argument_list|,
name|parser
operator|.
name|getReq
argument_list|()
operator|.
name|getSchema
argument_list|()
argument_list|)
decl_stmt|;
name|SchemaField
name|lonSF
init|=
name|subField
argument_list|(
name|field
argument_list|,
name|LON
argument_list|,
name|parser
operator|.
name|getReq
argument_list|()
operator|.
name|getSchema
argument_list|()
argument_list|)
decl_stmt|;
name|BooleanQuery
name|result
init|=
operator|new
name|BooleanQuery
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|// points must currently be ordered... should we support specifying any two opposite corner points?
name|result
operator|.
name|add
argument_list|(
name|latSF
operator|.
name|getType
argument_list|()
operator|.
name|getRangeQuery
argument_list|(
name|parser
argument_list|,
name|latSF
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|p1
operator|.
name|getY
argument_list|()
argument_list|)
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|p2
operator|.
name|getY
argument_list|()
argument_list|)
argument_list|,
name|minInclusive
argument_list|,
name|maxInclusive
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|lonSF
operator|.
name|getType
argument_list|()
operator|.
name|getRangeQuery
argument_list|(
name|parser
argument_list|,
name|lonSF
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|p1
operator|.
name|getX
argument_list|()
argument_list|)
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|p2
operator|.
name|getX
argument_list|()
argument_list|)
argument_list|,
name|minInclusive
argument_list|,
name|maxInclusive
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|getFieldQuery
specifier|public
name|Query
name|getFieldQuery
parameter_list|(
name|QParser
name|parser
parameter_list|,
name|SchemaField
name|field
parameter_list|,
name|String
name|externalVal
parameter_list|)
block|{
name|Point
name|p1
init|=
name|SpatialUtils
operator|.
name|parsePointSolrException
argument_list|(
name|externalVal
argument_list|,
name|SpatialContext
operator|.
name|GEO
argument_list|)
decl_stmt|;
name|SchemaField
name|latSF
init|=
name|subField
argument_list|(
name|field
argument_list|,
name|LAT
argument_list|,
name|parser
operator|.
name|getReq
argument_list|()
operator|.
name|getSchema
argument_list|()
argument_list|)
decl_stmt|;
name|SchemaField
name|lonSF
init|=
name|subField
argument_list|(
name|field
argument_list|,
name|LON
argument_list|,
name|parser
operator|.
name|getReq
argument_list|()
operator|.
name|getSchema
argument_list|()
argument_list|)
decl_stmt|;
name|BooleanQuery
name|result
init|=
operator|new
name|BooleanQuery
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|latSF
operator|.
name|getType
argument_list|()
operator|.
name|getFieldQuery
argument_list|(
name|parser
argument_list|,
name|latSF
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|p1
operator|.
name|getY
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|lonSF
operator|.
name|getType
argument_list|()
operator|.
name|getFieldQuery
argument_list|(
name|parser
argument_list|,
name|lonSF
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|p1
operator|.
name|getX
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|createSpatialQuery
specifier|public
name|Query
name|createSpatialQuery
parameter_list|(
name|QParser
name|parser
parameter_list|,
name|SpatialOptions
name|options
parameter_list|)
block|{
name|Point
name|point
init|=
name|SpatialUtils
operator|.
name|parsePointSolrException
argument_list|(
name|options
operator|.
name|pointStr
argument_list|,
name|SpatialContext
operator|.
name|GEO
argument_list|)
decl_stmt|;
comment|// lat& lon in degrees
name|double
name|latCenter
init|=
name|point
operator|.
name|getY
argument_list|()
decl_stmt|;
name|double
name|lonCenter
init|=
name|point
operator|.
name|getX
argument_list|()
decl_stmt|;
name|double
name|distDeg
init|=
name|DistanceUtils
operator|.
name|dist2Degrees
argument_list|(
name|options
operator|.
name|distance
argument_list|,
name|options
operator|.
name|radius
argument_list|)
decl_stmt|;
name|Rectangle
name|bbox
init|=
name|DistanceUtils
operator|.
name|calcBoxByDistFromPtDEG
argument_list|(
name|latCenter
argument_list|,
name|lonCenter
argument_list|,
name|distDeg
argument_list|,
name|SpatialContext
operator|.
name|GEO
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|double
name|latMin
init|=
name|bbox
operator|.
name|getMinY
argument_list|()
decl_stmt|;
name|double
name|latMax
init|=
name|bbox
operator|.
name|getMaxY
argument_list|()
decl_stmt|;
name|double
name|lonMin
decl_stmt|,
name|lonMax
decl_stmt|,
name|lon2Min
decl_stmt|,
name|lon2Max
decl_stmt|;
if|if
condition|(
name|bbox
operator|.
name|getCrossesDateLine
argument_list|()
condition|)
block|{
name|lonMin
operator|=
operator|-
literal|180
expr_stmt|;
name|lonMax
operator|=
name|bbox
operator|.
name|getMaxX
argument_list|()
expr_stmt|;
name|lon2Min
operator|=
name|bbox
operator|.
name|getMinX
argument_list|()
expr_stmt|;
name|lon2Max
operator|=
literal|180
expr_stmt|;
block|}
else|else
block|{
name|lonMin
operator|=
name|bbox
operator|.
name|getMinX
argument_list|()
expr_stmt|;
name|lonMax
operator|=
name|bbox
operator|.
name|getMaxX
argument_list|()
expr_stmt|;
name|lon2Min
operator|=
operator|-
literal|180
expr_stmt|;
name|lon2Max
operator|=
literal|180
expr_stmt|;
block|}
name|IndexSchema
name|schema
init|=
name|parser
operator|.
name|getReq
argument_list|()
operator|.
name|getSchema
argument_list|()
decl_stmt|;
comment|// Now that we've figured out the ranges, build them!
name|SchemaField
name|latSF
init|=
name|subField
argument_list|(
name|options
operator|.
name|field
argument_list|,
name|LAT
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|SchemaField
name|lonSF
init|=
name|subField
argument_list|(
name|options
operator|.
name|field
argument_list|,
name|LON
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|SpatialDistanceQuery
name|spatial
init|=
operator|new
name|SpatialDistanceQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|bbox
condition|)
block|{
name|BooleanQuery
name|result
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|Query
name|latRange
init|=
name|latSF
operator|.
name|getType
argument_list|()
operator|.
name|getRangeQuery
argument_list|(
name|parser
argument_list|,
name|latSF
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|latMin
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|latMax
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|latRange
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
if|if
condition|(
name|lonMin
operator|!=
operator|-
literal|180
operator|||
name|lonMax
operator|!=
literal|180
condition|)
block|{
name|Query
name|lonRange
init|=
name|lonSF
operator|.
name|getType
argument_list|()
operator|.
name|getRangeQuery
argument_list|(
name|parser
argument_list|,
name|lonSF
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|lonMin
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|lonMax
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|lon2Min
operator|!=
operator|-
literal|180
operator|||
name|lon2Max
operator|!=
literal|180
condition|)
block|{
comment|// another valid longitude range
name|BooleanQuery
name|bothLons
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|bothLons
operator|.
name|add
argument_list|(
name|lonRange
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|lonRange
operator|=
name|lonSF
operator|.
name|getType
argument_list|()
operator|.
name|getRangeQuery
argument_list|(
name|parser
argument_list|,
name|lonSF
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|lon2Min
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|lon2Max
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|bothLons
operator|.
name|add
argument_list|(
name|lonRange
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|lonRange
operator|=
name|bothLons
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|lonRange
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
name|spatial
operator|.
name|bboxQuery
operator|=
name|result
expr_stmt|;
block|}
name|spatial
operator|.
name|origField
operator|=
name|options
operator|.
name|field
operator|.
name|getName
argument_list|()
expr_stmt|;
name|spatial
operator|.
name|latSource
operator|=
name|latSF
operator|.
name|getType
argument_list|()
operator|.
name|getValueSource
argument_list|(
name|latSF
argument_list|,
name|parser
argument_list|)
expr_stmt|;
name|spatial
operator|.
name|lonSource
operator|=
name|lonSF
operator|.
name|getType
argument_list|()
operator|.
name|getValueSource
argument_list|(
name|lonSF
argument_list|,
name|parser
argument_list|)
expr_stmt|;
name|spatial
operator|.
name|latMin
operator|=
name|latMin
expr_stmt|;
name|spatial
operator|.
name|latMax
operator|=
name|latMax
expr_stmt|;
name|spatial
operator|.
name|lonMin
operator|=
name|lonMin
expr_stmt|;
name|spatial
operator|.
name|lonMax
operator|=
name|lonMax
expr_stmt|;
name|spatial
operator|.
name|lon2Min
operator|=
name|lon2Min
expr_stmt|;
name|spatial
operator|.
name|lon2Max
operator|=
name|lon2Max
expr_stmt|;
name|spatial
operator|.
name|lon2
operator|=
name|lon2Min
operator|!=
operator|-
literal|180
operator|||
name|lon2Max
operator|!=
literal|180
expr_stmt|;
name|spatial
operator|.
name|latCenter
operator|=
name|latCenter
expr_stmt|;
name|spatial
operator|.
name|lonCenter
operator|=
name|lonCenter
expr_stmt|;
name|spatial
operator|.
name|dist
operator|=
name|options
operator|.
name|distance
expr_stmt|;
name|spatial
operator|.
name|planetRadius
operator|=
name|options
operator|.
name|radius
expr_stmt|;
name|spatial
operator|.
name|calcDist
operator|=
operator|!
name|options
operator|.
name|bbox
expr_stmt|;
return|return
name|spatial
return|;
block|}
annotation|@
name|Override
DECL|method|getValueSource
specifier|public
name|ValueSource
name|getValueSource
parameter_list|(
name|SchemaField
name|field
parameter_list|,
name|QParser
name|parser
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ValueSource
argument_list|>
name|vs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|SchemaField
name|sub
init|=
name|subField
argument_list|(
name|field
argument_list|,
name|i
argument_list|,
name|parser
operator|.
name|getReq
argument_list|()
operator|.
name|getSchema
argument_list|()
argument_list|)
decl_stmt|;
name|vs
operator|.
name|add
argument_list|(
name|sub
operator|.
name|getType
argument_list|()
operator|.
name|getValueSource
argument_list|(
name|sub
argument_list|,
name|parser
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|LatLonValueSource
argument_list|(
name|field
argument_list|,
name|vs
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isPolyField
specifier|public
name|boolean
name|isPolyField
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|TextResponseWriter
name|writer
parameter_list|,
name|String
name|name
parameter_list|,
name|StorableField
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|writeStr
argument_list|(
name|name
argument_list|,
name|f
operator|.
name|stringValue
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSortField
specifier|public
name|SortField
name|getSortField
parameter_list|(
name|SchemaField
name|field
parameter_list|,
name|boolean
name|top
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Sorting not supported on LatLonType "
operator|+
name|field
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getUninversionType
specifier|public
name|Type
name|getUninversionType
parameter_list|(
name|SchemaField
name|sf
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|//It never makes sense to create a single field, so make it impossible to happen
annotation|@
name|Override
DECL|method|createField
specifier|public
name|StorableField
name|createField
parameter_list|(
name|SchemaField
name|field
parameter_list|,
name|Object
name|value
parameter_list|,
name|float
name|boost
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"LatLonType uses multiple fields.  field="
operator|+
name|field
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
end_class
begin_class
DECL|class|LatLonValueSource
class|class
name|LatLonValueSource
extends|extends
name|VectorValueSource
block|{
DECL|field|sf
specifier|private
specifier|final
name|SchemaField
name|sf
decl_stmt|;
DECL|method|LatLonValueSource
specifier|public
name|LatLonValueSource
parameter_list|(
name|SchemaField
name|sf
parameter_list|,
name|List
argument_list|<
name|ValueSource
argument_list|>
name|sources
parameter_list|)
block|{
name|super
argument_list|(
name|sources
argument_list|)
expr_stmt|;
name|this
operator|.
name|sf
operator|=
name|sf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"latlon"
return|;
block|}
annotation|@
name|Override
DECL|method|description
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
name|name
argument_list|()
operator|+
literal|"("
operator|+
name|sf
operator|.
name|getName
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
end_class
begin_comment
comment|////////////////////////////////////////////////////////////////////////////////////////////
end_comment
begin_comment
comment|// TODO: recast as a value source that doesn't have to match all docs
end_comment
begin_class
DECL|class|SpatialDistanceQuery
class|class
name|SpatialDistanceQuery
extends|extends
name|ExtendedQueryBase
implements|implements
name|PostFilter
block|{
DECL|field|origField
name|String
name|origField
decl_stmt|;
DECL|field|latSource
name|ValueSource
name|latSource
decl_stmt|;
DECL|field|lonSource
name|ValueSource
name|lonSource
decl_stmt|;
DECL|field|lonMin
DECL|field|lonMax
DECL|field|lon2Min
DECL|field|lon2Max
DECL|field|latMin
DECL|field|latMax
name|double
name|lonMin
decl_stmt|,
name|lonMax
decl_stmt|,
name|lon2Min
decl_stmt|,
name|lon2Max
decl_stmt|,
name|latMin
decl_stmt|,
name|latMax
decl_stmt|;
DECL|field|lon2
name|boolean
name|lon2
decl_stmt|;
DECL|field|calcDist
name|boolean
name|calcDist
decl_stmt|;
comment|// actually calculate the distance with haversine
DECL|field|bboxQuery
name|Query
name|bboxQuery
decl_stmt|;
DECL|field|latCenter
name|double
name|latCenter
decl_stmt|;
DECL|field|lonCenter
name|double
name|lonCenter
decl_stmt|;
DECL|field|dist
name|double
name|dist
decl_stmt|;
DECL|field|planetRadius
name|double
name|planetRadius
decl_stmt|;
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|bboxQuery
operator|!=
literal|null
condition|?
name|bboxQuery
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|)
else|:
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|extractTerms
specifier|public
name|void
name|extractTerms
parameter_list|(
name|Set
name|terms
parameter_list|)
block|{}
DECL|class|SpatialWeight
specifier|protected
class|class
name|SpatialWeight
extends|extends
name|Weight
block|{
DECL|field|searcher
specifier|protected
name|IndexSearcher
name|searcher
decl_stmt|;
DECL|field|queryNorm
specifier|protected
name|float
name|queryNorm
decl_stmt|;
DECL|field|queryWeight
specifier|protected
name|float
name|queryWeight
decl_stmt|;
DECL|field|latContext
specifier|protected
name|Map
name|latContext
decl_stmt|;
DECL|field|lonContext
specifier|protected
name|Map
name|lonContext
decl_stmt|;
DECL|method|SpatialWeight
specifier|public
name|SpatialWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|searcher
operator|=
name|searcher
expr_stmt|;
name|this
operator|.
name|latContext
operator|=
name|ValueSource
operator|.
name|newContext
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
name|this
operator|.
name|lonContext
operator|=
name|ValueSource
operator|.
name|newContext
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
name|latSource
operator|.
name|createWeight
argument_list|(
name|latContext
argument_list|,
name|searcher
argument_list|)
expr_stmt|;
name|lonSource
operator|.
name|createWeight
argument_list|(
name|lonContext
argument_list|,
name|searcher
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getQuery
specifier|public
name|Query
name|getQuery
parameter_list|()
block|{
return|return
name|SpatialDistanceQuery
operator|.
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|getValueForNormalization
specifier|public
name|float
name|getValueForNormalization
parameter_list|()
throws|throws
name|IOException
block|{
name|queryWeight
operator|=
name|getBoost
argument_list|()
expr_stmt|;
return|return
name|queryWeight
operator|*
name|queryWeight
return|;
block|}
annotation|@
name|Override
DECL|method|normalize
specifier|public
name|void
name|normalize
parameter_list|(
name|float
name|norm
parameter_list|,
name|float
name|topLevelBoost
parameter_list|)
block|{
name|this
operator|.
name|queryNorm
operator|=
name|norm
operator|*
name|topLevelBoost
expr_stmt|;
name|queryWeight
operator|*=
name|this
operator|.
name|queryNorm
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|scorer
specifier|public
name|Scorer
name|scorer
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|SpatialScorer
argument_list|(
name|context
argument_list|,
name|acceptDocs
argument_list|,
name|this
argument_list|,
name|queryWeight
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|explain
specifier|public
name|Explanation
name|explain
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
operator|(
name|SpatialScorer
operator|)
name|scorer
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getLiveDocs
argument_list|()
argument_list|)
operator|)
operator|.
name|explain
argument_list|(
name|doc
argument_list|)
return|;
block|}
block|}
DECL|class|SpatialScorer
specifier|protected
class|class
name|SpatialScorer
extends|extends
name|Scorer
block|{
DECL|field|reader
specifier|final
name|IndexReader
name|reader
decl_stmt|;
DECL|field|weight
specifier|final
name|SpatialWeight
name|weight
decl_stmt|;
DECL|field|maxDoc
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|field|qWeight
specifier|final
name|float
name|qWeight
decl_stmt|;
DECL|field|doc
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|latVals
specifier|final
name|FunctionValues
name|latVals
decl_stmt|;
DECL|field|lonVals
specifier|final
name|FunctionValues
name|lonVals
decl_stmt|;
DECL|field|acceptDocs
specifier|final
name|Bits
name|acceptDocs
decl_stmt|;
DECL|field|lonMin
DECL|field|lonMax
DECL|field|lon2Min
DECL|field|lon2Max
DECL|field|latMin
DECL|field|latMax
specifier|final
name|double
name|lonMin
decl_stmt|,
name|lonMax
decl_stmt|,
name|lon2Min
decl_stmt|,
name|lon2Max
decl_stmt|,
name|latMin
decl_stmt|,
name|latMax
decl_stmt|;
DECL|field|lon2
specifier|final
name|boolean
name|lon2
decl_stmt|;
DECL|field|calcDist
specifier|final
name|boolean
name|calcDist
decl_stmt|;
DECL|field|latCenterRad
specifier|final
name|double
name|latCenterRad
decl_stmt|;
DECL|field|lonCenterRad
specifier|final
name|double
name|lonCenterRad
decl_stmt|;
DECL|field|latCenterRad_cos
specifier|final
name|double
name|latCenterRad_cos
decl_stmt|;
DECL|field|dist
specifier|final
name|double
name|dist
decl_stmt|;
DECL|field|planetRadius
specifier|final
name|double
name|planetRadius
decl_stmt|;
DECL|field|lastDistDoc
name|int
name|lastDistDoc
decl_stmt|;
DECL|field|lastDist
name|double
name|lastDist
decl_stmt|;
DECL|method|SpatialScorer
specifier|public
name|SpatialScorer
parameter_list|(
name|AtomicReaderContext
name|readerContext
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|,
name|SpatialWeight
name|w
parameter_list|,
name|float
name|qWeight
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|this
operator|.
name|weight
operator|=
name|w
expr_stmt|;
name|this
operator|.
name|qWeight
operator|=
name|qWeight
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|readerContext
operator|.
name|reader
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxDoc
operator|=
name|reader
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
name|this
operator|.
name|acceptDocs
operator|=
name|acceptDocs
expr_stmt|;
name|latVals
operator|=
name|latSource
operator|.
name|getValues
argument_list|(
name|weight
operator|.
name|latContext
argument_list|,
name|readerContext
argument_list|)
expr_stmt|;
name|lonVals
operator|=
name|lonSource
operator|.
name|getValues
argument_list|(
name|weight
operator|.
name|lonContext
argument_list|,
name|readerContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|lonMin
operator|=
name|SpatialDistanceQuery
operator|.
name|this
operator|.
name|lonMin
expr_stmt|;
name|this
operator|.
name|lonMax
operator|=
name|SpatialDistanceQuery
operator|.
name|this
operator|.
name|lonMax
expr_stmt|;
name|this
operator|.
name|lon2Min
operator|=
name|SpatialDistanceQuery
operator|.
name|this
operator|.
name|lon2Min
expr_stmt|;
name|this
operator|.
name|lon2Max
operator|=
name|SpatialDistanceQuery
operator|.
name|this
operator|.
name|lon2Max
expr_stmt|;
name|this
operator|.
name|latMin
operator|=
name|SpatialDistanceQuery
operator|.
name|this
operator|.
name|latMin
expr_stmt|;
name|this
operator|.
name|latMax
operator|=
name|SpatialDistanceQuery
operator|.
name|this
operator|.
name|latMax
expr_stmt|;
name|this
operator|.
name|lon2
operator|=
name|SpatialDistanceQuery
operator|.
name|this
operator|.
name|lon2
expr_stmt|;
name|this
operator|.
name|calcDist
operator|=
name|SpatialDistanceQuery
operator|.
name|this
operator|.
name|calcDist
expr_stmt|;
name|this
operator|.
name|latCenterRad
operator|=
name|SpatialDistanceQuery
operator|.
name|this
operator|.
name|latCenter
operator|*
name|DistanceUtils
operator|.
name|DEGREES_TO_RADIANS
expr_stmt|;
name|this
operator|.
name|lonCenterRad
operator|=
name|SpatialDistanceQuery
operator|.
name|this
operator|.
name|lonCenter
operator|*
name|DistanceUtils
operator|.
name|DEGREES_TO_RADIANS
expr_stmt|;
name|this
operator|.
name|latCenterRad_cos
operator|=
name|this
operator|.
name|calcDist
condition|?
name|Math
operator|.
name|cos
argument_list|(
name|latCenterRad
argument_list|)
else|:
literal|0
expr_stmt|;
name|this
operator|.
name|dist
operator|=
name|SpatialDistanceQuery
operator|.
name|this
operator|.
name|dist
expr_stmt|;
name|this
operator|.
name|planetRadius
operator|=
name|SpatialDistanceQuery
operator|.
name|this
operator|.
name|planetRadius
expr_stmt|;
block|}
DECL|method|match
name|boolean
name|match
parameter_list|()
block|{
comment|// longitude should generally be more restrictive than latitude
comment|// (e.g. in the US, it immediately separates the coasts, and in world search separates
comment|// US from Europe from Asia, etc.
name|double
name|lon
init|=
name|lonVals
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
name|lon
operator|>=
name|lonMin
operator|&&
name|lon
operator|<=
name|lonMax
operator|)
operator|||
operator|(
name|lon2
operator|&&
name|lon
operator|>=
name|lon2Min
operator|&&
name|lon
operator|<=
name|lon2Max
operator|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|double
name|lat
init|=
name|latVals
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|lat
operator|>=
name|latMin
operator|&&
name|lat
operator|<=
name|latMax
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|calcDist
condition|)
return|return
literal|true
return|;
comment|// TODO: test for internal box where we wouldn't need to calculate the distance
return|return
name|dist
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
operator|<=
name|dist
return|;
block|}
DECL|method|dist
name|double
name|dist
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
block|{
name|double
name|latRad
init|=
name|lat
operator|*
name|DistanceUtils
operator|.
name|DEGREES_TO_RADIANS
decl_stmt|;
name|double
name|lonRad
init|=
name|lon
operator|*
name|DistanceUtils
operator|.
name|DEGREES_TO_RADIANS
decl_stmt|;
comment|// haversine, specialized to avoid a cos() call on latCenterRad
name|double
name|diffX
init|=
name|latCenterRad
operator|-
name|latRad
decl_stmt|;
name|double
name|diffY
init|=
name|lonCenterRad
operator|-
name|lonRad
decl_stmt|;
name|double
name|hsinX
init|=
name|Math
operator|.
name|sin
argument_list|(
name|diffX
operator|*
literal|0.5
argument_list|)
decl_stmt|;
name|double
name|hsinY
init|=
name|Math
operator|.
name|sin
argument_list|(
name|diffY
operator|*
literal|0.5
argument_list|)
decl_stmt|;
name|double
name|h
init|=
name|hsinX
operator|*
name|hsinX
operator|+
operator|(
name|latCenterRad_cos
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|latRad
argument_list|)
operator|*
name|hsinY
operator|*
name|hsinY
operator|)
decl_stmt|;
name|double
name|result
init|=
operator|(
name|planetRadius
operator|*
literal|2
operator|*
name|Math
operator|.
name|atan2
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|h
argument_list|)
argument_list|,
name|Math
operator|.
name|sqrt
argument_list|(
literal|1
operator|-
name|h
argument_list|)
argument_list|)
operator|)
decl_stmt|;
comment|// save the results of this calculation
name|lastDistDoc
operator|=
name|doc
expr_stmt|;
name|lastDist
operator|=
name|result
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
comment|// instead of matching all docs, we could also embed a query.
comment|// the score could either ignore the subscore, or boost it.
comment|// Containment:  floatline(foo:myTerm, "myFloatField", 1.0, 0.0f)
comment|// Boost:        foo:myTerm^floatline("myFloatField",1.0,0.0f)
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
operator|++
name|doc
expr_stmt|;
if|if
condition|(
name|doc
operator|>=
name|maxDoc
condition|)
block|{
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
if|if
condition|(
name|acceptDocs
operator|!=
literal|null
operator|&&
operator|!
name|acceptDocs
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|match
argument_list|()
condition|)
continue|continue;
return|return
name|doc
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
comment|// this will work even if target==NO_MORE_DOCS
name|doc
operator|=
name|target
operator|-
literal|1
expr_stmt|;
return|return
name|nextDoc
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
name|double
name|dist
init|=
operator|(
name|doc
operator|==
name|lastDistDoc
operator|)
condition|?
name|lastDist
else|:
name|dist
argument_list|(
name|latVals
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|,
name|lonVals
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|)
decl_stmt|;
return|return
call|(
name|float
call|)
argument_list|(
name|dist
operator|*
name|qWeight
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|maxDoc
return|;
block|}
DECL|method|explain
specifier|public
name|Explanation
name|explain
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|advance
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|boolean
name|matched
init|=
name|this
operator|.
name|doc
operator|==
name|doc
decl_stmt|;
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
name|float
name|sc
init|=
name|matched
condition|?
name|score
argument_list|()
else|:
literal|0
decl_stmt|;
name|double
name|dist
init|=
name|dist
argument_list|(
name|latVals
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|,
name|lonVals
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|description
init|=
name|SpatialDistanceQuery
operator|.
name|this
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Explanation
name|result
init|=
operator|new
name|ComplexExplanation
argument_list|(
name|this
operator|.
name|doc
operator|==
name|doc
argument_list|,
name|sc
argument_list|,
name|description
operator|+
literal|" product of:"
argument_list|)
decl_stmt|;
comment|// result.addDetail(new Explanation((float)dist, "hsin("+latVals.explain(doc)+","+lonVals.explain(doc)));
name|result
operator|.
name|addDetail
argument_list|(
operator|new
name|Explanation
argument_list|(
operator|(
name|float
operator|)
name|dist
argument_list|,
literal|"hsin("
operator|+
name|latVals
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
operator|+
literal|","
operator|+
name|lonVals
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|addDetail
argument_list|(
operator|new
name|Explanation
argument_list|(
name|getBoost
argument_list|()
argument_list|,
literal|"boost"
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|addDetail
argument_list|(
operator|new
name|Explanation
argument_list|(
name|weight
operator|.
name|queryNorm
argument_list|,
literal|"queryNorm"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getFilterCollector
specifier|public
name|DelegatingCollector
name|getFilterCollector
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|SpatialCollector
argument_list|(
operator|new
name|SpatialWeight
argument_list|(
name|searcher
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|class|SpatialCollector
class|class
name|SpatialCollector
extends|extends
name|DelegatingCollector
block|{
DECL|field|weight
specifier|final
name|SpatialWeight
name|weight
decl_stmt|;
DECL|field|spatialScorer
name|SpatialScorer
name|spatialScorer
decl_stmt|;
DECL|field|maxdoc
name|int
name|maxdoc
decl_stmt|;
DECL|method|SpatialCollector
specifier|public
name|SpatialCollector
parameter_list|(
name|SpatialWeight
name|weight
parameter_list|)
block|{
name|this
operator|.
name|weight
operator|=
name|weight
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|spatialScorer
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
if|if
condition|(
name|spatialScorer
operator|.
name|match
argument_list|()
condition|)
name|leafDelegate
operator|.
name|collect
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doSetNextReader
specifier|protected
name|void
name|doSetNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|doSetNextReader
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|maxdoc
operator|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
name|spatialScorer
operator|=
operator|new
name|SpatialScorer
argument_list|(
name|context
argument_list|,
literal|null
argument_list|,
name|weight
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createWeight
specifier|public
name|Weight
name|createWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
comment|// if we were supposed to use bboxQuery, then we should have been rewritten using that query
assert|assert
name|bboxQuery
operator|==
literal|null
assert|;
return|return
operator|new
name|SpatialWeight
argument_list|(
name|searcher
argument_list|)
return|;
block|}
comment|/** Prints a user-readable version of this query. */
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|float
name|boost
init|=
name|getBoost
argument_list|()
decl_stmt|;
return|return
name|super
operator|.
name|getOptions
argument_list|()
operator|+
operator|(
name|boost
operator|!=
literal|1.0
condition|?
literal|"("
else|:
literal|""
operator|)
operator|+
operator|(
name|calcDist
condition|?
literal|"geofilt"
else|:
literal|"bbox"
operator|)
operator|+
literal|"(latlonSource="
operator|+
name|origField
operator|+
literal|"("
operator|+
name|latSource
operator|+
literal|","
operator|+
name|lonSource
operator|+
literal|")"
operator|+
literal|",latCenter="
operator|+
name|latCenter
operator|+
literal|",lonCenter="
operator|+
name|lonCenter
operator|+
literal|",dist="
operator|+
name|dist
operator|+
literal|",latMin="
operator|+
name|latMin
operator|+
literal|",latMax="
operator|+
name|latMax
operator|+
literal|",lonMin="
operator|+
name|lonMin
operator|+
literal|",lonMax"
operator|+
name|lonMax
operator|+
literal|",lon2Min="
operator|+
name|lon2Min
operator|+
literal|",lon2Max"
operator|+
name|lon2Max
operator|+
literal|",calcDist="
operator|+
name|calcDist
operator|+
literal|",planetRadius="
operator|+
name|planetRadius
comment|// + (bboxQuery == null ? "" : ",bboxQuery="+bboxQuery)
operator|+
literal|")"
operator|+
operator|(
name|boost
operator|==
literal|1.0
condition|?
literal|""
else|:
literal|")^"
operator|+
name|boost
operator|)
return|;
block|}
comment|/** Returns true if<code>o</code> is equal to this. */
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
return|return
literal|false
return|;
name|SpatialDistanceQuery
name|other
init|=
operator|(
name|SpatialDistanceQuery
operator|)
name|o
decl_stmt|;
return|return
name|this
operator|.
name|latCenter
operator|==
name|other
operator|.
name|latCenter
operator|&&
name|this
operator|.
name|lonCenter
operator|==
name|other
operator|.
name|lonCenter
operator|&&
name|this
operator|.
name|latMin
operator|==
name|other
operator|.
name|latMin
operator|&&
name|this
operator|.
name|latMax
operator|==
name|other
operator|.
name|latMax
operator|&&
name|this
operator|.
name|lonMin
operator|==
name|other
operator|.
name|lonMin
operator|&&
name|this
operator|.
name|lonMax
operator|==
name|other
operator|.
name|lonMax
operator|&&
name|this
operator|.
name|lon2Min
operator|==
name|other
operator|.
name|lon2Min
operator|&&
name|this
operator|.
name|lon2Max
operator|==
name|other
operator|.
name|lon2Max
operator|&&
name|this
operator|.
name|dist
operator|==
name|other
operator|.
name|dist
operator|&&
name|this
operator|.
name|planetRadius
operator|==
name|other
operator|.
name|planetRadius
operator|&&
name|this
operator|.
name|calcDist
operator|==
name|other
operator|.
name|calcDist
operator|&&
name|this
operator|.
name|lonSource
operator|.
name|equals
argument_list|(
name|other
operator|.
name|lonSource
argument_list|)
operator|&&
name|this
operator|.
name|latSource
operator|.
name|equals
argument_list|(
name|other
operator|.
name|latSource
argument_list|)
operator|&&
name|this
operator|.
name|getBoost
argument_list|()
operator|==
name|other
operator|.
name|getBoost
argument_list|()
return|;
block|}
comment|/** Returns a hash code value for this object. */
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
comment|// don't bother making the hash expensive - the center latitude + min longitude will be very unique
name|long
name|hash
init|=
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|latCenter
argument_list|)
decl_stmt|;
name|hash
operator|=
name|hash
operator|*
literal|31
operator|+
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|lonMin
argument_list|)
expr_stmt|;
name|hash
operator|=
name|hash
operator|*
literal|31
operator|+
operator|(
name|long
operator|)
name|super
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
call|(
name|int
call|)
argument_list|(
name|hash
operator|>>
literal|32
operator|+
name|hash
argument_list|)
return|;
block|}
block|}
end_class
end_unit
