begin_unit
begin_package
DECL|package|org.apache.solr.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|PluginInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|SystemIdResolver
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|NamedListInitializedPlugin
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_comment
comment|/** Base class for factories for IndexSchema implementations */
end_comment
begin_class
DECL|class|IndexSchemaFactory
specifier|public
specifier|abstract
class|class
name|IndexSchemaFactory
implements|implements
name|NamedListInitializedPlugin
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
comment|/** Returns an index schema created from a local resource */
DECL|method|create
specifier|public
name|IndexSchema
name|create
parameter_list|(
name|String
name|resourceName
parameter_list|,
name|SolrConfig
name|config
parameter_list|)
block|{
name|SolrResourceLoader
name|loader
init|=
name|config
operator|.
name|getResourceLoader
argument_list|()
decl_stmt|;
name|InputStream
name|schemaInputStream
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|resourceName
condition|)
block|{
name|resourceName
operator|=
name|IndexSchema
operator|.
name|DEFAULT_SCHEMA_FILE
expr_stmt|;
block|}
try|try
block|{
name|schemaInputStream
operator|=
name|loader
operator|.
name|openSchema
argument_list|(
name|resourceName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Error loading schema resource "
operator|+
name|resourceName
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|InputSource
name|inputSource
init|=
operator|new
name|InputSource
argument_list|(
name|schemaInputStream
argument_list|)
decl_stmt|;
name|inputSource
operator|.
name|setSystemId
argument_list|(
name|SystemIdResolver
operator|.
name|createSystemIdFromResourceName
argument_list|(
name|resourceName
argument_list|)
argument_list|)
expr_stmt|;
name|IndexSchema
name|schema
init|=
operator|new
name|IndexSchema
argument_list|(
name|config
argument_list|,
name|resourceName
argument_list|,
name|inputSource
argument_list|)
decl_stmt|;
return|return
name|schema
return|;
block|}
comment|/** Instantiates the configured schema factory, then calls create on it. */
DECL|method|buildIndexSchema
specifier|public
specifier|static
name|IndexSchema
name|buildIndexSchema
parameter_list|(
name|String
name|resourceName
parameter_list|,
name|SolrConfig
name|config
parameter_list|)
block|{
name|PluginInfo
name|info
init|=
name|config
operator|.
name|getPluginInfo
argument_list|(
name|IndexSchemaFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|IndexSchemaFactory
name|factory
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|info
condition|)
block|{
name|factory
operator|=
name|config
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|newInstance
argument_list|(
name|info
operator|.
name|className
argument_list|,
name|IndexSchemaFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|factory
operator|.
name|init
argument_list|(
name|info
operator|.
name|initArgs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|config
operator|.
name|luceneMatchVersion
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|LUCENE_6_0_0
argument_list|)
condition|)
block|{
name|factory
operator|=
operator|new
name|ManagedIndexSchemaFactory
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|factory
operator|=
operator|new
name|ClassicIndexSchemaFactory
argument_list|()
expr_stmt|;
block|}
block|}
name|IndexSchema
name|schema
init|=
name|factory
operator|.
name|create
argument_list|(
name|resourceName
argument_list|,
name|config
argument_list|)
decl_stmt|;
return|return
name|schema
return|;
block|}
comment|/**     * Returns the resource name that will be used: if the schema is managed, the resource    * name will be drawn from the schema factory configuration in the given SolrConfig.    * Otherwise, the given resourceName will be returned.    *     * @param resourceName The name to use if the schema is not managed    * @param config The SolrConfig from which to get the schema factory config    * @return If the schema is managed, the resource name from the given SolrConfig,    *         otherwise the given resourceName.     */
DECL|method|getResourceNameToBeUsed
specifier|public
specifier|static
name|String
name|getResourceNameToBeUsed
parameter_list|(
name|String
name|resourceName
parameter_list|,
name|SolrConfig
name|config
parameter_list|)
block|{
name|PluginInfo
name|info
init|=
name|config
operator|.
name|getPluginInfo
argument_list|(
name|IndexSchemaFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|nonManagedResourceName
init|=
literal|null
operator|==
name|resourceName
condition|?
name|IndexSchema
operator|.
name|DEFAULT_SCHEMA_FILE
else|:
name|resourceName
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|info
condition|)
block|{
return|return
name|nonManagedResourceName
return|;
block|}
name|String
name|managedSchemaResourceName
init|=
operator|(
name|String
operator|)
name|info
operator|.
name|initArgs
operator|.
name|get
argument_list|(
name|ManagedIndexSchemaFactory
operator|.
name|MANAGED_SCHEMA_RESOURCE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|managedSchemaResourceName
condition|)
block|{
name|managedSchemaResourceName
operator|=
name|ManagedIndexSchemaFactory
operator|.
name|DEFAULT_MANAGED_SCHEMA_RESOURCE_NAME
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|new
name|File
argument_list|(
name|config
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|getConfigDir
argument_list|()
argument_list|,
name|managedSchemaResourceName
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|managedSchemaResourceName
return|;
block|}
return|return
name|nonManagedResourceName
return|;
block|}
block|}
end_class
end_unit
