begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.update.processor
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * An updated processor that applies a configured regex to any   * CharSequence values found in the selected fields, and replaces   * any matches with the configured replacement string  *<p>  * By default this processor applies itself to no fields.  *</p>  *  *<p>  * For example, with the configuration listed below, any sequence of multiple   * whitespace characters found in values for field named<code>title</code>   * or<code>content</code> will be replaced by a single space character.  *</p>  *  *<pre class="prettyprint">  *&lt;processor class="solr.RegexReplaceProcessorFactory"&gt;  *&lt;str name="fieldName"&gt;content&lt;/str&gt;  *&lt;str name="fieldName"&gt;title&lt;/str&gt;  *&lt;str name="pattern"&gt;\s+&lt;/str&gt;  *&lt;str name="replacement"&gt;&lt;/str&gt;  *&lt;/processor&gt;  *</pre>  *   * @see java.util.regex.Pattern  */
end_comment
begin_class
DECL|class|RegexReplaceProcessorFactory
specifier|public
specifier|final
class|class
name|RegexReplaceProcessorFactory
extends|extends
name|FieldMutatingUpdateProcessorFactory
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RegexReplaceProcessorFactory
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|REPLACEMENT_PARAM
specifier|private
specifier|static
specifier|final
name|String
name|REPLACEMENT_PARAM
init|=
literal|"replacement"
decl_stmt|;
DECL|field|PATTERN_PARAM
specifier|private
specifier|static
specifier|final
name|String
name|PATTERN_PARAM
init|=
literal|"pattern"
decl_stmt|;
DECL|field|pattern
specifier|private
name|Pattern
name|pattern
decl_stmt|;
DECL|field|replacement
specifier|private
name|String
name|replacement
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{
name|String
name|patternParam
init|=
name|args
operator|.
name|remove
argument_list|(
name|PATTERN_PARAM
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|patternParam
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Missing required init parameter: "
operator|+
name|PATTERN_PARAM
argument_list|)
throw|;
block|}
try|try
block|{
name|pattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|patternParam
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Invalid regex: "
operator|+
name|patternParam
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|String
name|replacementParam
init|=
name|args
operator|.
name|remove
argument_list|(
name|REPLACEMENT_PARAM
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|replacementParam
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Missing required init parameter: "
operator|+
name|REPLACEMENT_PARAM
argument_list|)
throw|;
block|}
name|replacement
operator|=
name|Matcher
operator|.
name|quoteReplacement
argument_list|(
name|replacementParam
argument_list|)
expr_stmt|;
name|super
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
comment|/**     * @see FieldMutatingUpdateProcessor#SELECT_NO_FIELDS    */
specifier|protected
name|FieldMutatingUpdateProcessor
operator|.
name|FieldNameSelector
DECL|method|getDefaultSelector
name|getDefaultSelector
parameter_list|(
specifier|final
name|SolrCore
name|core
parameter_list|)
block|{
return|return
name|FieldMutatingUpdateProcessor
operator|.
name|SELECT_NO_FIELDS
return|;
block|}
annotation|@
name|Override
DECL|method|getInstance
specifier|public
name|UpdateRequestProcessor
name|getInstance
parameter_list|(
name|SolrQueryRequest
name|request
parameter_list|,
name|SolrQueryResponse
name|response
parameter_list|,
name|UpdateRequestProcessor
name|next
parameter_list|)
block|{
return|return
operator|new
name|FieldValueMutatingUpdateProcessor
argument_list|(
name|getSelector
argument_list|()
argument_list|,
name|next
argument_list|)
block|{
specifier|protected
name|Object
name|mutateValue
parameter_list|(
specifier|final
name|Object
name|src
parameter_list|)
block|{
if|if
condition|(
name|src
operator|instanceof
name|CharSequence
condition|)
block|{
name|CharSequence
name|txt
init|=
operator|(
name|CharSequence
operator|)
name|src
decl_stmt|;
return|return
name|pattern
operator|.
name|matcher
argument_list|(
name|txt
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|replacement
argument_list|)
return|;
block|}
return|return
name|src
return|;
block|}
block|}
return|;
block|}
block|}
end_class
end_unit
