begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.update.processor
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|FunctionValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|RealTimeGetComponent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|AddUpdateCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|DeleteUpdateCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|UpdateCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|VersionInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|SolrCoreAware
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
operator|.
name|CONFLICT
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
operator|.
name|DistributingUpdateProcessorFactory
operator|.
name|DISTRIB_UPDATE_PARAM
import|;
end_import
begin_comment
comment|/**  *<p>  * This Factory generates an UpdateProcessor that helps to enforce Version   * constraints on documents based on per-document version numbers using a configured   * name of a<code>versionField</code>.  It should be configured on the "default"  * update processor somewhere before the DistributedUpdateProcessorFactory.  * As an example, see the solrconfig.xml that the tests use:  * solr/core/src/test-files/solr/collection1/conf/solrconfig-externalversionconstraint.xml  *</p>  *<p>  * When documents are added through this processor, if a document with the same   * unique key already exists in the collection, then the value of the   *<code>versionField</code> in the<i>existing</i> document is not less then the   * field value in the<i>new</i> document then the new document is rejected with a   * 409 Version Conflict error.  *</p>  *<p>  * In addition to the mandatory<code>versionField</code> init param, two additional   * optional init params affect the behavior of this factory:  *</p>  *<ul>  *<li><code>deleteVersionParam</code> - This string parameter controls whether this   *     processor will intercept and inspect Delete By Id commands in addition to adding   *     documents.  If specified, then the value will specify the name of a request   *     paramater which becomes  mandatory for all Delete By Id commands.  This param   *     must then be used to specify the document version associated with the delete.  *     If the version specified using this param is not greater then the value in the   *<code>versionField</code> for any existing document, then the delete will fail   *     with a 409 Version Conflict error.  When using this param, Any Delete By Id   *     command with a high enough document version number to succeed will be internally   *     converted into an Add Document command that replaces the existing document with   *     a new one which is empty except for the Unique Key and<code>versionField</code>   *     to keeping a record of the deleted version so future Add Document commands will   *     fail if their "new" version is not high enough.</li>  *  *<li><code>ignoreOldUpdates</code> - This boolean parameter defaults to   *<code>false</code>, but if set to<code>true</code> causes any update with a   *     document version that is not great enough to be silently ignored (and return   *     a status 200 to the client) instead of generating a 409 Version Conflict error.  *</li>  *</ul>  */
end_comment
begin_class
DECL|class|DocBasedVersionConstraintsProcessorFactory
specifier|public
class|class
name|DocBasedVersionConstraintsProcessorFactory
extends|extends
name|UpdateRequestProcessorFactory
implements|implements
name|SolrCoreAware
implements|,
name|UpdateRequestProcessorFactory
operator|.
name|RunAlways
block|{
DECL|field|log
specifier|public
specifier|final
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DocBasedVersionConstraintsProcessorFactory
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ignoreOldUpdates
specifier|private
name|boolean
name|ignoreOldUpdates
init|=
literal|false
decl_stmt|;
DECL|field|versionField
specifier|private
name|String
name|versionField
init|=
literal|null
decl_stmt|;
DECL|field|deleteVersionParamName
specifier|private
name|String
name|deleteVersionParamName
init|=
literal|null
decl_stmt|;
DECL|field|useFieldCache
specifier|private
name|boolean
name|useFieldCache
decl_stmt|;
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{
name|Object
name|tmp
init|=
name|args
operator|.
name|remove
argument_list|(
literal|"versionField"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|tmp
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SERVER_ERROR
argument_list|,
literal|"'versionField' must be configured"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|tmp
operator|instanceof
name|String
operator|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SERVER_ERROR
argument_list|,
literal|"'versionField' must be configured as a<str>"
argument_list|)
throw|;
block|}
name|versionField
operator|=
name|tmp
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|// optional
name|tmp
operator|=
name|args
operator|.
name|remove
argument_list|(
literal|"deleteVersionParam"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|tmp
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|tmp
operator|instanceof
name|String
operator|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SERVER_ERROR
argument_list|,
literal|"'deleteVersionParam' must be configured as a<str>"
argument_list|)
throw|;
block|}
name|deleteVersionParamName
operator|=
name|tmp
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|// optional - defaults to false
name|tmp
operator|=
name|args
operator|.
name|remove
argument_list|(
literal|"ignoreOldUpdates"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|tmp
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|tmp
operator|instanceof
name|Boolean
operator|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SERVER_ERROR
argument_list|,
literal|"'ignoreOldUpdates' must be configured as a<bool>"
argument_list|)
throw|;
block|}
name|ignoreOldUpdates
operator|=
operator|(
operator|(
name|Boolean
operator|)
name|tmp
operator|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
DECL|method|getInstance
specifier|public
name|UpdateRequestProcessor
name|getInstance
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|UpdateRequestProcessor
name|next
parameter_list|)
block|{
return|return
operator|new
name|DocBasedVersionConstraintsProcessor
argument_list|(
name|versionField
argument_list|,
name|ignoreOldUpdates
argument_list|,
name|deleteVersionParamName
argument_list|,
name|useFieldCache
argument_list|,
name|req
argument_list|,
name|rsp
argument_list|,
name|next
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|inform
specifier|public
name|void
name|inform
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
if|if
condition|(
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SERVER_ERROR
argument_list|,
literal|"updateLog must be enabled."
argument_list|)
throw|;
block|}
if|if
condition|(
name|core
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getUniqueKeyField
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SERVER_ERROR
argument_list|,
literal|"schema must have uniqueKey defined."
argument_list|)
throw|;
block|}
name|SchemaField
name|userVersionField
init|=
name|core
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|versionField
argument_list|)
decl_stmt|;
if|if
condition|(
name|userVersionField
operator|==
literal|null
operator|||
operator|!
name|userVersionField
operator|.
name|stored
argument_list|()
operator|||
name|userVersionField
operator|.
name|multiValued
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SERVER_ERROR
argument_list|,
literal|"field "
operator|+
name|versionField
operator|+
literal|" must be defined in schema, be stored, and be single valued."
argument_list|)
throw|;
block|}
try|try
block|{
name|ValueSource
name|vs
init|=
name|userVersionField
operator|.
name|getType
argument_list|()
operator|.
name|getValueSource
argument_list|(
name|userVersionField
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|useFieldCache
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Can't use fieldcache/valuesource: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DocBasedVersionConstraintsProcessor
specifier|private
specifier|static
class|class
name|DocBasedVersionConstraintsProcessor
extends|extends
name|UpdateRequestProcessor
block|{
DECL|field|versionFieldName
specifier|private
specifier|final
name|String
name|versionFieldName
decl_stmt|;
DECL|field|userVersionField
specifier|private
specifier|final
name|SchemaField
name|userVersionField
decl_stmt|;
DECL|field|solrVersionField
specifier|private
specifier|final
name|SchemaField
name|solrVersionField
decl_stmt|;
DECL|field|ignoreOldUpdates
specifier|private
specifier|final
name|boolean
name|ignoreOldUpdates
decl_stmt|;
DECL|field|deleteVersionParamName
specifier|private
specifier|final
name|String
name|deleteVersionParamName
decl_stmt|;
DECL|field|core
specifier|private
specifier|final
name|SolrCore
name|core
decl_stmt|;
DECL|field|oldSolrVersion
specifier|private
name|long
name|oldSolrVersion
decl_stmt|;
comment|// current _version_ of the doc in the index/update log
DECL|field|distribProc
specifier|private
name|DistributedUpdateProcessor
name|distribProc
decl_stmt|;
comment|// the distributed update processor following us
DECL|field|phase
specifier|private
name|DistributedUpdateProcessor
operator|.
name|DistribPhase
name|phase
decl_stmt|;
DECL|field|useFieldCache
specifier|private
name|boolean
name|useFieldCache
decl_stmt|;
DECL|method|DocBasedVersionConstraintsProcessor
specifier|public
name|DocBasedVersionConstraintsProcessor
parameter_list|(
name|String
name|versionField
parameter_list|,
name|boolean
name|ignoreOldUpdates
parameter_list|,
name|String
name|deleteVersionParamName
parameter_list|,
name|boolean
name|useFieldCache
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|UpdateRequestProcessor
name|next
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|this
operator|.
name|ignoreOldUpdates
operator|=
name|ignoreOldUpdates
expr_stmt|;
name|this
operator|.
name|deleteVersionParamName
operator|=
name|deleteVersionParamName
expr_stmt|;
name|this
operator|.
name|core
operator|=
name|req
operator|.
name|getCore
argument_list|()
expr_stmt|;
name|this
operator|.
name|versionFieldName
operator|=
name|versionField
expr_stmt|;
name|this
operator|.
name|userVersionField
operator|=
name|core
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|versionField
argument_list|)
expr_stmt|;
name|this
operator|.
name|solrVersionField
operator|=
name|core
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|VersionInfo
operator|.
name|VERSION_FIELD
argument_list|)
expr_stmt|;
name|this
operator|.
name|useFieldCache
operator|=
name|useFieldCache
expr_stmt|;
for|for
control|(
name|UpdateRequestProcessor
name|proc
init|=
name|next
init|;
name|proc
operator|!=
literal|null
condition|;
name|proc
operator|=
name|proc
operator|.
name|next
control|)
block|{
if|if
condition|(
name|proc
operator|instanceof
name|DistributedUpdateProcessor
condition|)
block|{
name|distribProc
operator|=
operator|(
name|DistributedUpdateProcessor
operator|)
name|proc
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|distribProc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"DistributedUpdateProcessor must follow DocBasedVersionConstraintsProcessor"
argument_list|)
throw|;
block|}
name|phase
operator|=
name|DistributedUpdateProcessor
operator|.
name|DistribPhase
operator|.
name|parseParam
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|DISTRIB_UPDATE_PARAM
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Inspects a raw field value (which may come from a doc in the index, or a       * doc in the UpdateLog that still has String values, or a String sent by       * the user as a param) and if it is a String, asks the versionField FieldType       * to convert it to an Object suitable for comparison.      */
DECL|method|convertFieldValueUsingType
specifier|private
name|Object
name|convertFieldValueUsingType
parameter_list|(
name|SchemaField
name|sf
parameter_list|,
specifier|final
name|Object
name|rawValue
parameter_list|)
block|{
if|if
condition|(
name|rawValue
operator|instanceof
name|CharSequence
condition|)
block|{
comment|// in theory, the FieldType might still be CharSequence based,
comment|// but in that case trust it to do an identiy conversion...
name|FieldType
name|fieldType
init|=
name|userVersionField
operator|.
name|getType
argument_list|()
decl_stmt|;
name|BytesRefBuilder
name|term
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
name|fieldType
operator|.
name|readableToIndexed
argument_list|(
operator|(
name|CharSequence
operator|)
name|rawValue
argument_list|,
name|term
argument_list|)
expr_stmt|;
return|return
name|fieldType
operator|.
name|toObject
argument_list|(
name|userVersionField
argument_list|,
name|term
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
comment|// else...
return|return
name|rawValue
return|;
block|}
comment|/**      * Returns true if the specified new version value is greater the the one      * already known to exist for the document, or the document does not already      * exist.      * Returns false if the specified new version is not high enough but the      * processor has been configured with ignoreOldUpdates=true      * Throws a SolrException if the version is not high enough and      * ignoreOldUpdates=false      */
DECL|method|isVersionNewEnough
specifier|private
name|boolean
name|isVersionNewEnough
parameter_list|(
name|BytesRef
name|indexedDocId
parameter_list|,
name|Object
name|newUserVersion
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
literal|null
operator|!=
name|indexedDocId
assert|;
assert|assert
literal|null
operator|!=
name|newUserVersion
assert|;
name|oldSolrVersion
operator|=
operator|-
literal|1
expr_stmt|;
comment|// log.info("!!!!!!!!! isVersionNewEnough being called for " + indexedDocId.utf8ToString() + " newVersion=" + newUserVersion);
name|newUserVersion
operator|=
name|convertFieldValueUsingType
argument_list|(
name|userVersionField
argument_list|,
name|newUserVersion
argument_list|)
expr_stmt|;
name|Object
name|oldUserVersion
init|=
literal|null
decl_stmt|;
name|SolrInputDocument
name|oldDoc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|useFieldCache
condition|)
block|{
name|oldDoc
operator|=
name|RealTimeGetComponent
operator|.
name|getInputDocumentFromTlog
argument_list|(
name|core
argument_list|,
name|indexedDocId
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldDoc
operator|==
name|RealTimeGetComponent
operator|.
name|DELETED
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|oldDoc
operator|==
literal|null
condition|)
block|{
comment|// need to look up in index now...
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|newestSearcher
init|=
name|core
operator|.
name|getRealtimeSearcher
argument_list|()
decl_stmt|;
try|try
block|{
name|SolrIndexSearcher
name|searcher
init|=
name|newestSearcher
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|lookup
init|=
name|searcher
operator|.
name|lookupId
argument_list|(
name|indexedDocId
argument_list|)
decl_stmt|;
if|if
condition|(
name|lookup
operator|<
literal|0
condition|)
block|{
comment|// doc not in index either...
return|return
literal|true
return|;
block|}
name|ValueSource
name|vs
init|=
name|solrVersionField
operator|.
name|getType
argument_list|()
operator|.
name|getValueSource
argument_list|(
name|solrVersionField
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Map
name|context
init|=
name|ValueSource
operator|.
name|newContext
argument_list|(
name|searcher
argument_list|)
decl_stmt|;
name|vs
operator|.
name|createWeight
argument_list|(
name|context
argument_list|,
name|searcher
argument_list|)
expr_stmt|;
name|FunctionValues
name|fv
init|=
name|vs
operator|.
name|getValues
argument_list|(
name|context
argument_list|,
name|searcher
operator|.
name|getTopReaderContext
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
call|(
name|int
call|)
argument_list|(
name|lookup
operator|>>
literal|32
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|oldSolrVersion
operator|=
name|fv
operator|.
name|longVal
argument_list|(
operator|(
name|int
operator|)
name|lookup
argument_list|)
expr_stmt|;
name|vs
operator|=
name|userVersionField
operator|.
name|getType
argument_list|()
operator|.
name|getValueSource
argument_list|(
name|userVersionField
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|context
operator|=
name|ValueSource
operator|.
name|newContext
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
name|vs
operator|.
name|createWeight
argument_list|(
name|context
argument_list|,
name|searcher
argument_list|)
expr_stmt|;
name|fv
operator|=
name|vs
operator|.
name|getValues
argument_list|(
name|context
argument_list|,
name|searcher
operator|.
name|getTopReaderContext
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
call|(
name|int
call|)
argument_list|(
name|lookup
operator|>>
literal|32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|oldUserVersion
operator|=
name|fv
operator|.
name|objectVal
argument_list|(
operator|(
name|int
operator|)
name|lookup
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error reading version from index"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|newestSearcher
operator|!=
literal|null
condition|)
block|{
name|newestSearcher
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// stored fields only...
name|oldDoc
operator|=
name|RealTimeGetComponent
operator|.
name|getInputDocument
argument_list|(
name|core
argument_list|,
name|indexedDocId
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|oldDoc
condition|)
block|{
comment|// log.info("VERSION no doc found, returning true");
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|oldDoc
operator|!=
literal|null
condition|)
block|{
name|oldUserVersion
operator|=
name|oldDoc
operator|.
name|getFieldValue
argument_list|(
name|versionFieldName
argument_list|)
expr_stmt|;
comment|// Make the FieldType resolve any conversion we need.
name|oldUserVersion
operator|=
name|convertFieldValueUsingType
argument_list|(
name|userVersionField
argument_list|,
name|oldUserVersion
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|oldDoc
operator|.
name|getFieldValue
argument_list|(
name|solrVersionField
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SERVER_ERROR
argument_list|,
literal|"No _version_ for document "
operator|+
name|oldDoc
argument_list|)
throw|;
block|}
name|oldSolrVersion
operator|=
name|o
operator|instanceof
name|Number
condition|?
operator|(
operator|(
name|Number
operator|)
name|o
operator|)
operator|.
name|longValue
argument_list|()
else|:
name|Long
operator|.
name|parseLong
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// log.info("VERSION old=" + oldUserVersion + " new=" +newUserVersion );
if|if
condition|(
literal|null
operator|==
name|oldUserVersion
condition|)
block|{
comment|// could happen if they turn this feature on after building an index
comment|// w/o the versionField
throw|throw
operator|new
name|SolrException
argument_list|(
name|SERVER_ERROR
argument_list|,
literal|"Doc exists in index, but has null versionField: "
operator|+
name|versionFieldName
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|oldUserVersion
operator|instanceof
name|Comparable
operator|&&
name|newUserVersion
operator|instanceof
name|Comparable
operator|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|BAD_REQUEST
argument_list|,
literal|"old version and new version are not comparable: "
operator|+
name|oldUserVersion
operator|.
name|getClass
argument_list|()
operator|+
literal|" vs "
operator|+
name|newUserVersion
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
literal|0
operator|<
operator|(
operator|(
name|Comparable
operator|)
name|newUserVersion
operator|)
operator|.
name|compareTo
argument_list|(
operator|(
name|Comparable
operator|)
name|oldUserVersion
argument_list|)
condition|)
block|{
comment|// log.info("VERSION returning true (proceed with update)" );
return|return
literal|true
return|;
block|}
if|if
condition|(
name|ignoreOldUpdates
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Dropping update since user version is not high enough: "
operator|+
name|newUserVersion
operator|+
literal|"; old user version="
operator|+
name|oldUserVersion
argument_list|)
expr_stmt|;
block|}
comment|// log.info("VERSION returning false (dropping update)" );
return|return
literal|false
return|;
block|}
else|else
block|{
comment|// log.info("VERSION will throw conflict" );
throw|throw
operator|new
name|SolrException
argument_list|(
name|CONFLICT
argument_list|,
literal|"user version is not high enough: "
operator|+
name|newUserVersion
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|BAD_REQUEST
argument_list|,
literal|"old version and new version are not comparable: "
operator|+
name|oldUserVersion
operator|.
name|getClass
argument_list|()
operator|+
literal|" vs "
operator|+
name|newUserVersion
operator|.
name|getClass
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|isLeader
specifier|public
name|boolean
name|isLeader
parameter_list|(
name|UpdateCommand
name|cmd
parameter_list|)
block|{
if|if
condition|(
operator|(
name|cmd
operator|.
name|getFlags
argument_list|()
operator|&
operator|(
name|UpdateCommand
operator|.
name|REPLAY
operator||
name|UpdateCommand
operator|.
name|PEER_SYNC
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|phase
operator|==
name|DistributedUpdateProcessor
operator|.
name|DistribPhase
operator|.
name|FROMLEADER
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// if phase==TOLEADER, we can't just assume we are the leader... let the normal logic check.
name|boolean
name|x
init|=
name|distribProc
operator|.
name|isLeader
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
comment|// log.info("VERSION: checking if we are leader:" + x);
return|return
name|x
return|;
block|}
DECL|method|processAdd
specifier|public
name|void
name|processAdd
parameter_list|(
name|AddUpdateCommand
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isLeader
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|super
operator|.
name|processAdd
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|SolrInputDocument
name|newDoc
init|=
name|cmd
operator|.
name|getSolrInputDocument
argument_list|()
decl_stmt|;
name|Object
name|newVersion
init|=
name|newDoc
operator|.
name|getFieldValue
argument_list|(
name|versionFieldName
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|newVersion
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|BAD_REQUEST
argument_list|,
literal|"Doc does not have versionField: "
operator|+
name|versionFieldName
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
condition|;
name|i
operator|++
control|)
block|{
comment|// Log a warning every 256 retries.... even a few retries should normally be very unusual.
if|if
condition|(
operator|(
name|i
operator|&
literal|0xff
operator|)
operator|==
literal|0xff
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unusual number of optimistic concurrency retries: retries="
operator|+
name|i
operator|+
literal|" cmd="
operator|+
name|cmd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isVersionNewEnough
argument_list|(
name|cmd
operator|.
name|getIndexedId
argument_list|()
argument_list|,
name|newVersion
argument_list|)
condition|)
block|{
comment|// drop older update
return|return;
block|}
try|try
block|{
name|cmd
operator|.
name|setVersion
argument_list|(
name|oldSolrVersion
argument_list|)
expr_stmt|;
comment|// use optimistic concurrency to ensure that the doc has not changed in the meantime
name|super
operator|.
name|processAdd
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|==
literal|409
condition|)
block|{
comment|// log.info ("##################### CONFLICT ADDING newDoc=" + newDoc + " newVersion=" + newVersion );
continue|continue;
comment|// if a version conflict, retry
block|}
throw|throw
name|e
throw|;
comment|// rethrow
block|}
block|}
block|}
DECL|method|processDelete
specifier|public
name|void
name|processDelete
parameter_list|(
name|DeleteUpdateCommand
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|deleteVersionParamName
condition|)
block|{
comment|// not suppose to look at deletes at all
name|super
operator|.
name|processDelete
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|cmd
operator|.
name|isDeleteById
argument_list|()
condition|)
block|{
comment|// nothing to do
name|super
operator|.
name|processDelete
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|deleteParamValue
init|=
name|cmd
operator|.
name|getReq
argument_list|()
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|deleteVersionParamName
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|deleteParamValue
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|BAD_REQUEST
argument_list|,
literal|"Delete by ID must specify doc version param: "
operator|+
name|deleteVersionParamName
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isLeader
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
comment|// transform delete to add earlier rather than later
name|SolrInputDocument
name|newDoc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|newDoc
operator|.
name|setField
argument_list|(
name|core
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getUniqueKeyField
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|cmd
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|newDoc
operator|.
name|setField
argument_list|(
name|versionFieldName
argument_list|,
name|deleteParamValue
argument_list|)
expr_stmt|;
name|AddUpdateCommand
name|newCmd
init|=
operator|new
name|AddUpdateCommand
argument_list|(
name|cmd
operator|.
name|getReq
argument_list|()
argument_list|)
decl_stmt|;
name|newCmd
operator|.
name|solrDoc
operator|=
name|newDoc
expr_stmt|;
name|newCmd
operator|.
name|commitWithin
operator|=
name|cmd
operator|.
name|commitWithin
expr_stmt|;
name|super
operator|.
name|processAdd
argument_list|(
name|newCmd
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
condition|;
name|i
operator|++
control|)
block|{
comment|// Log a warning every 256 retries.... even a few retries should normally be very unusual.
if|if
condition|(
operator|(
name|i
operator|&
literal|0xff
operator|)
operator|==
literal|0xff
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unusual number of optimistic concurrency retries: retries="
operator|+
name|i
operator|+
literal|" cmd="
operator|+
name|cmd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isVersionNewEnough
argument_list|(
name|cmd
operator|.
name|getIndexedId
argument_list|()
argument_list|,
name|deleteParamValue
argument_list|)
condition|)
block|{
comment|// drop this older update
return|return;
block|}
comment|// :TODO: should this logic be split and driven by two params?
comment|//   - deleteVersionParam to do a version check
comment|//   - some new boolean param to determine if a stub document gets added in place?
try|try
block|{
comment|// drop the delete, and instead propogate an AddDoc that
comment|// replaces the doc with a new "empty" one that records the deleted version
name|SolrInputDocument
name|newDoc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|newDoc
operator|.
name|setField
argument_list|(
name|core
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getUniqueKeyField
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|cmd
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|newDoc
operator|.
name|setField
argument_list|(
name|versionFieldName
argument_list|,
name|deleteParamValue
argument_list|)
expr_stmt|;
name|AddUpdateCommand
name|newCmd
init|=
operator|new
name|AddUpdateCommand
argument_list|(
name|cmd
operator|.
name|getReq
argument_list|()
argument_list|)
decl_stmt|;
name|newCmd
operator|.
name|solrDoc
operator|=
name|newDoc
expr_stmt|;
name|newCmd
operator|.
name|commitWithin
operator|=
name|cmd
operator|.
name|commitWithin
expr_stmt|;
name|newCmd
operator|.
name|setVersion
argument_list|(
name|oldSolrVersion
argument_list|)
expr_stmt|;
comment|// use optimistic concurrency to ensure that the doc has not changed in the meantime
name|super
operator|.
name|processAdd
argument_list|(
name|newCmd
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|==
literal|409
condition|)
block|{
continue|continue;
comment|// if a version conflict, retry
block|}
throw|throw
name|e
throw|;
comment|// rethrow
block|}
block|}
block|}
block|}
comment|// end inner class
block|}
end_class
end_unit
