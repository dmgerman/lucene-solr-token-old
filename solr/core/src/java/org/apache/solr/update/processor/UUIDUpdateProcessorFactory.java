begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.update.processor
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_comment
comment|/**  *<p>  * An update processor that adds a newly generated<code>UUID</code> value  * to any document being added that does not already have a value in the  * specified field.  *</p>  *  *<p>  * In the example configuration below, if a document does not contain a value  * in the<code>id</code> field, a new<code>UUID</code> will be generated  * and added as the value of that field.  *<p>  *  *<pre class="prettyprint">  *&lt;processor class="solr.UUIDUpdateProcessorFactory"&gt;  *&lt;str name="fieldName"&gt;id&lt;/str&gt;  *&lt;/processor&gt;  *</pre>  *  *<p>  * If field name is omitted in processor configuration,  * then  @{link org.apache.solr.schema.IndexSchema#getUniqueKeyField()}</code>  * is used as field and a new<code>UUID</code> will be generated  * and added as the value of that field. The field type of the uniqueKeyField  * must be anything which accepts a string or UUID value.  *<p>  * @see UUID  */
end_comment
begin_class
DECL|class|UUIDUpdateProcessorFactory
specifier|public
class|class
name|UUIDUpdateProcessorFactory
extends|extends
name|UpdateRequestProcessorFactory
block|{
DECL|field|fieldName
specifier|protected
name|String
name|fieldName
init|=
literal|null
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{
name|Object
name|obj
init|=
name|args
operator|.
name|remove
argument_list|(
literal|"fieldName"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|obj
condition|)
block|{
name|fieldName
operator|=
name|obj
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|0
operator|<
name|args
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SERVER_ERROR
argument_list|,
literal|"Unexpected init param(s): '"
operator|+
name|args
operator|.
name|getName
argument_list|(
literal|0
argument_list|)
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
DECL|method|getInstance
specifier|public
name|UpdateRequestProcessor
name|getInstance
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|UpdateRequestProcessor
name|next
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|SchemaField
name|schemaField
init|=
name|req
operator|.
name|getSchema
argument_list|()
operator|.
name|getUniqueKeyField
argument_list|()
decl_stmt|;
name|fieldName
operator|=
name|schemaField
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|AbstractDefaultValueUpdateProcessorFactory
operator|.
name|DefaultValueUpdateProcessor
argument_list|(
name|fieldName
argument_list|,
name|next
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Object
name|getDefaultValue
parameter_list|()
block|{
return|return
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
end_class
end_unit
