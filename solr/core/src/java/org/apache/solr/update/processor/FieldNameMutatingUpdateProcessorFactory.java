begin_unit
begin_package
DECL|package|org.apache.solr.update.processor
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|AddUpdateCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|DeleteUpdateCommand
import|;
end_import
begin_comment
comment|/**  *<p>  * In the FieldNameMutatingUpdateProcessorFactory configured below,  * fields names will be mutated if the name contains space.  * Use multiple instances of this processor for multiple replacements  *</p>  *<pre class="prettyprint">  *&lt;processor class="solr.FieldNameMutatingUpdateProcessorFactory"&gt;  *&lt;str name="pattern "&gt;\s&lt;/str&gt;  *&lt;str name="replacement"&gt;_&lt;/str&gt;  *&lt;/processor&gt;</pre>  */
end_comment
begin_class
DECL|class|FieldNameMutatingUpdateProcessorFactory
specifier|public
class|class
name|FieldNameMutatingUpdateProcessorFactory
extends|extends
name|UpdateRequestProcessorFactory
block|{
DECL|field|sourcePattern
DECL|field|replacement
specifier|private
name|String
name|sourcePattern
decl_stmt|,
name|replacement
decl_stmt|;
DECL|field|pattern
specifier|private
name|Pattern
name|pattern
decl_stmt|;
annotation|@
name|Override
DECL|method|getInstance
specifier|public
name|UpdateRequestProcessor
name|getInstance
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|UpdateRequestProcessor
name|next
parameter_list|)
block|{
return|return
operator|new
name|UpdateRequestProcessor
argument_list|(
name|next
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|processAdd
parameter_list|(
name|AddUpdateCommand
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SolrInputDocument
name|doc
init|=
name|cmd
operator|.
name|getSolrInputDocument
argument_list|()
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|doc
operator|.
name|getFieldNames
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|fname
range|:
name|fieldNames
control|)
block|{
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|fname
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|newFieldName
init|=
name|matcher
operator|.
name|replaceAll
argument_list|(
name|replacement
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|newFieldName
operator|.
name|equals
argument_list|(
name|fname
argument_list|)
condition|)
block|{
name|SolrInputField
name|old
init|=
name|doc
operator|.
name|remove
argument_list|(
name|fname
argument_list|)
decl_stmt|;
name|old
operator|.
name|setName
argument_list|(
name|newFieldName
argument_list|)
expr_stmt|;
name|doc
operator|.
name|put
argument_list|(
name|newFieldName
argument_list|,
name|old
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|super
operator|.
name|processAdd
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|processDelete
parameter_list|(
name|DeleteUpdateCommand
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|processDelete
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{
name|sourcePattern
operator|=
operator|(
name|String
operator|)
name|args
operator|.
name|get
argument_list|(
literal|"pattern"
argument_list|)
expr_stmt|;
name|replacement
operator|=
operator|(
name|String
operator|)
name|args
operator|.
name|get
argument_list|(
literal|"replacement"
argument_list|)
expr_stmt|;
if|if
condition|(
name|sourcePattern
operator|==
literal|null
operator|||
name|replacement
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"'pattern' and 'replacement' are required values"
argument_list|)
throw|;
block|}
try|try
block|{
name|pattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|sourcePattern
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"invalid pattern "
operator|+
name|sourcePattern
argument_list|)
throw|;
block|}
name|super
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
