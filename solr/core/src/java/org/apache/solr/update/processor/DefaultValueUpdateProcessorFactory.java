begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.update.processor
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|AddUpdateCommand
import|;
end_import
begin_comment
comment|/**  *<p>  * An update processor that adds a constant default value to any document   * being added that does not already have a value in the specified field.  *</p>  *  *<p>  * In the example configuration below, if a document does not contain a value   * in the<code>price</code> and/or<code>type</code> fields, it will be given   * default values of<code>0.0</code> and/or<code>unknown</code>   * (respectively).  *<p>  *  *<pre class="prettyprint">  *&lt;processor class="solr.DefaultValueUpdateProcessorFactory"&gt;  *&lt;str name="fieldName"&gt;price&lt;/str&gt;  *&lt;float name="value"&gt;0.0&lt;/float&gt;  *&lt;/processor&gt;  *&lt;processor class="solr.DefaultValueUpdateProcessorFactory"&gt;  *&lt;str name="fieldName"&gt;type&lt;/str&gt;  *&lt;str name="value"&gt;unknown&lt;/str&gt;  *&lt;/processor&gt;  *</pre>  */
end_comment
begin_class
DECL|class|DefaultValueUpdateProcessorFactory
specifier|public
class|class
name|DefaultValueUpdateProcessorFactory
extends|extends
name|AbstractDefaultValueUpdateProcessorFactory
block|{
DECL|field|defaultValue
specifier|protected
name|Object
name|defaultValue
init|=
literal|null
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{
name|Object
name|obj
init|=
name|args
operator|.
name|remove
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|obj
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SERVER_ERROR
argument_list|,
literal|"'value' init param must be specified and non-null"
argument_list|)
throw|;
block|}
else|else
block|{
name|defaultValue
operator|=
name|obj
expr_stmt|;
block|}
name|super
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getInstance
specifier|public
name|UpdateRequestProcessor
name|getInstance
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|UpdateRequestProcessor
name|next
parameter_list|)
block|{
return|return
operator|new
name|DefaultValueUpdateProcessor
argument_list|(
name|fieldName
argument_list|,
name|next
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Object
name|getDefaultValue
parameter_list|()
block|{
return|return
name|defaultValue
return|;
block|}
block|}
return|;
block|}
block|}
end_class
end_unit
