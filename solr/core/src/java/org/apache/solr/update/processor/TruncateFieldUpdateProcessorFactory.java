begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.update.processor
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_comment
comment|/**  * Truncates any CharSequence values found in fields matching the specified   * conditions to a maximum character length.  *<p>  * By default this processor matches no fields  *</p>  *  *<p>For example, with the configuration listed below any documents   * containing a String in any field declared in the schema using   *<code>StrField</code> will be truncated to no more then 100 characters  *</p>  *<pre class="prettyprint">  *&lt;processor class="solr.TruncateFieldUpdateProcessorFactory"&gt;  *&lt;str name="typeClass"&gt;solr.StrField&lt;/str&gt;  *&lt;int name="maxLength"&gt;100&lt;/int&gt;  *&lt;/processor&gt;  *</pre>  */
end_comment
begin_class
DECL|class|TruncateFieldUpdateProcessorFactory
specifier|public
specifier|final
class|class
name|TruncateFieldUpdateProcessorFactory
extends|extends
name|FieldMutatingUpdateProcessorFactory
block|{
DECL|field|MAX_LENGTH_PARAM
specifier|private
specifier|static
specifier|final
name|String
name|MAX_LENGTH_PARAM
init|=
literal|"maxLength"
decl_stmt|;
DECL|field|maxLength
specifier|private
name|int
name|maxLength
init|=
literal|0
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{
name|Object
name|lengthParam
init|=
name|args
operator|.
name|remove
argument_list|(
name|MAX_LENGTH_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|lengthParam
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Missing required init parameter: "
operator|+
name|MAX_LENGTH_PARAM
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|lengthParam
operator|instanceof
name|Number
operator|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Init param "
operator|+
name|MAX_LENGTH_PARAM
operator|+
literal|"must be a number; found: \""
operator|+
name|lengthParam
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|maxLength
operator|=
operator|(
operator|(
name|Number
operator|)
name|lengthParam
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|maxLength
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Init param "
operator|+
name|MAX_LENGTH_PARAM
operator|+
literal|"must be>= 0; found: "
operator|+
name|maxLength
argument_list|)
throw|;
block|}
name|super
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|FieldMutatingUpdateProcessor
operator|.
name|FieldNameSelector
DECL|method|getDefaultSelector
name|getDefaultSelector
parameter_list|(
specifier|final
name|SolrCore
name|core
parameter_list|)
block|{
return|return
name|FieldMutatingUpdateProcessor
operator|.
name|SELECT_NO_FIELDS
return|;
block|}
annotation|@
name|Override
DECL|method|getInstance
specifier|public
name|UpdateRequestProcessor
name|getInstance
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|UpdateRequestProcessor
name|next
parameter_list|)
block|{
return|return
operator|new
name|FieldValueMutatingUpdateProcessor
argument_list|(
name|getSelector
argument_list|()
argument_list|,
name|next
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Object
name|mutateValue
parameter_list|(
specifier|final
name|Object
name|src
parameter_list|)
block|{
if|if
condition|(
name|src
operator|instanceof
name|CharSequence
condition|)
block|{
name|CharSequence
name|s
init|=
operator|(
name|CharSequence
operator|)
name|src
decl_stmt|;
if|if
condition|(
name|maxLength
operator|<
name|s
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
name|s
operator|.
name|subSequence
argument_list|(
literal|0
argument_list|,
name|maxLength
argument_list|)
return|;
block|}
block|}
return|return
name|src
return|;
block|}
block|}
return|;
block|}
block|}
end_class
end_unit
