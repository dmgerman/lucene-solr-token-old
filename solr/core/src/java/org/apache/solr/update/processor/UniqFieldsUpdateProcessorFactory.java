begin_unit
begin_package
DECL|package|org.apache.solr.update.processor
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|AddUpdateCommand
import|;
end_import
begin_comment
comment|/**  * A non-duplicate processor. Removes duplicates in the specified fields.  *   *<pre class="prettyprint">  *&lt;updateRequestProcessorChain name="uniq-fields"&gt;  *&lt;processor class="org.apache.solr.update.processor.UniqFieldsUpdateProcessorFactory"&gt;  *&lt;lst name="fields"&gt;  *&lt;str&gt;uniq&lt;/str&gt;  *&lt;str&gt;uniq2&lt;/str&gt;  *&lt;str&gt;uniq3&lt;/str&gt;  *&lt;/lst&gt;        *&lt;/processor&gt;  *&lt;processor class="solr.RunUpdateProcessorFactory" /&gt;  *&lt;/updateRequestProcessorChain&gt;</pre>  *   */
end_comment
begin_class
DECL|class|UniqFieldsUpdateProcessorFactory
specifier|public
class|class
name|UniqFieldsUpdateProcessorFactory
extends|extends
name|UpdateRequestProcessorFactory
block|{
DECL|field|fields
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|fields
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|NamedList
name|args
parameter_list|)
block|{
name|NamedList
argument_list|<
name|String
argument_list|>
name|flst
init|=
operator|(
name|NamedList
argument_list|<
name|String
argument_list|>
operator|)
name|args
operator|.
name|get
argument_list|(
literal|"fields"
argument_list|)
decl_stmt|;
if|if
condition|(
name|flst
operator|!=
literal|null
condition|)
block|{
name|fields
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|flst
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|flst
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getInstance
specifier|public
name|UpdateRequestProcessor
name|getInstance
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|UpdateRequestProcessor
name|next
parameter_list|)
block|{
return|return
operator|new
name|UniqFieldsUpdateProcessor
argument_list|(
name|next
argument_list|,
name|fields
argument_list|)
return|;
block|}
DECL|class|UniqFieldsUpdateProcessor
specifier|public
class|class
name|UniqFieldsUpdateProcessor
extends|extends
name|UpdateRequestProcessor
block|{
DECL|field|fields
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|fields
decl_stmt|;
DECL|method|UniqFieldsUpdateProcessor
specifier|public
name|UniqFieldsUpdateProcessor
parameter_list|(
name|UpdateRequestProcessor
name|next
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|processAdd
specifier|public
name|void
name|processAdd
parameter_list|(
name|AddUpdateCommand
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
name|SolrInputDocument
name|solrInputDocument
init|=
name|cmd
operator|.
name|getSolrInputDocument
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|uniqList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
name|uniqList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|Object
argument_list|>
name|col
init|=
name|solrInputDocument
operator|.
name|getFieldValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|col
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|o
range|:
name|col
control|)
block|{
if|if
condition|(
operator|!
name|uniqList
operator|.
name|contains
argument_list|(
name|o
argument_list|)
condition|)
name|uniqList
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|solrInputDocument
operator|.
name|remove
argument_list|(
name|field
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|uniqList
control|)
block|{
name|solrInputDocument
operator|.
name|addField
argument_list|(
name|field
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|super
operator|.
name|processAdd
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
