begin_unit
begin_package
DECL|package|org.apache.solr.update.processor
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|classification
operator|.
name|ClassificationResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|classification
operator|.
name|document
operator|.
name|DocumentClassifier
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|classification
operator|.
name|document
operator|.
name|KNearestNeighborDocumentClassifier
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|classification
operator|.
name|document
operator|.
name|SimpleNaiveBayesDocumentClassifier
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|AddUpdateCommand
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * This Class is a Request Update Processor to classify the document in input and add a field  * containing the class to the Document.  * It uses the Lucene Document Classification module, see {@link DocumentClassifier}.  */
end_comment
begin_class
DECL|class|ClassificationUpdateProcessor
class|class
name|ClassificationUpdateProcessor
extends|extends
name|UpdateRequestProcessor
block|{
DECL|field|classFieldName
specifier|private
name|String
name|classFieldName
decl_stmt|;
comment|// the field to index the assigned class
DECL|field|classifier
specifier|private
name|DocumentClassifier
argument_list|<
name|BytesRef
argument_list|>
name|classifier
decl_stmt|;
comment|/**    * Sole constructor    *    * @param inputFieldNames fields to be used as classifier's inputs    * @param classFieldName  field to be used as classifier's output    * @param minDf           setting for {@link org.apache.lucene.queries.mlt.MoreLikeThis#minDocFreq}, in case algorithm is {@code "knn"}    * @param minTf           setting for {@link org.apache.lucene.queries.mlt.MoreLikeThis#minTermFreq}, in case algorithm is {@code "knn"}    * @param k               setting for k nearest neighbors to analyze, in case algorithm is {@code "knn"}    * @param algorithm       the name of the classifier to use    * @param next            next update processor in the chain    * @param indexReader     index reader    * @param schema          schema    */
DECL|method|ClassificationUpdateProcessor
specifier|public
name|ClassificationUpdateProcessor
parameter_list|(
name|String
index|[]
name|inputFieldNames
parameter_list|,
name|String
name|classFieldName
parameter_list|,
name|int
name|minDf
parameter_list|,
name|int
name|minTf
parameter_list|,
name|int
name|k
parameter_list|,
name|String
name|algorithm
parameter_list|,
name|UpdateRequestProcessor
name|next
parameter_list|,
name|LeafReader
name|indexReader
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|this
operator|.
name|classFieldName
operator|=
name|classFieldName
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Analyzer
argument_list|>
name|field2analyzer
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Analyzer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|inputFieldNames
control|)
block|{
name|SchemaField
name|fieldFromSolrSchema
init|=
name|schema
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|Analyzer
name|indexAnalyzer
init|=
name|fieldFromSolrSchema
operator|.
name|getType
argument_list|()
operator|.
name|getQueryAnalyzer
argument_list|()
decl_stmt|;
name|field2analyzer
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|indexAnalyzer
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|algorithm
condition|)
block|{
case|case
literal|"knn"
case|:
name|classifier
operator|=
operator|new
name|KNearestNeighborDocumentClassifier
argument_list|(
name|indexReader
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|k
argument_list|,
name|minDf
argument_list|,
name|minTf
argument_list|,
name|classFieldName
argument_list|,
name|field2analyzer
argument_list|,
name|inputFieldNames
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"bayes"
case|:
name|classifier
operator|=
operator|new
name|SimpleNaiveBayesDocumentClassifier
argument_list|(
name|indexReader
argument_list|,
literal|null
argument_list|,
name|classFieldName
argument_list|,
name|field2analyzer
argument_list|,
name|inputFieldNames
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|/**    * @param cmd the update command in input containing the Document to classify    * @throws IOException If there is a low-level I/O error    */
annotation|@
name|Override
DECL|method|processAdd
specifier|public
name|void
name|processAdd
parameter_list|(
name|AddUpdateCommand
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrInputDocument
name|doc
init|=
name|cmd
operator|.
name|getSolrInputDocument
argument_list|()
decl_stmt|;
name|Document
name|luceneDocument
init|=
name|cmd
operator|.
name|getLuceneDocument
argument_list|()
decl_stmt|;
name|String
name|assignedClass
decl_stmt|;
name|Object
name|documentClass
init|=
name|doc
operator|.
name|getFieldValue
argument_list|(
name|classFieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|documentClass
operator|==
literal|null
condition|)
block|{
name|ClassificationResult
argument_list|<
name|BytesRef
argument_list|>
name|classificationResult
init|=
name|classifier
operator|.
name|assignClass
argument_list|(
name|luceneDocument
argument_list|)
decl_stmt|;
if|if
condition|(
name|classificationResult
operator|!=
literal|null
condition|)
block|{
name|assignedClass
operator|=
name|classificationResult
operator|.
name|getAssignedClass
argument_list|()
operator|.
name|utf8ToString
argument_list|()
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
name|classFieldName
argument_list|,
name|assignedClass
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|processAdd
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
