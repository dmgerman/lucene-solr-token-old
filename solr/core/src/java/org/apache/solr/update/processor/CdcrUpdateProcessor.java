begin_unit
begin_package
DECL|package|org.apache.solr.update.processor
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|AddUpdateCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|DeleteUpdateCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|UpdateCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  *<p>  * Extends {@link org.apache.solr.update.processor.DistributedUpdateProcessor} to force peer sync logic  * for every updates. This ensures that the version parameter sent by the source cluster is kept  * by the target cluster.  *</p>  */
end_comment
begin_class
DECL|class|CdcrUpdateProcessor
specifier|public
class|class
name|CdcrUpdateProcessor
extends|extends
name|DistributedUpdateProcessor
block|{
DECL|field|CDCR_UPDATE
specifier|public
specifier|static
specifier|final
name|String
name|CDCR_UPDATE
init|=
literal|"cdcr.update"
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|CdcrUpdateProcessor
specifier|public
name|CdcrUpdateProcessor
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|UpdateRequestProcessor
name|next
parameter_list|)
block|{
name|super
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|versionAdd
specifier|protected
name|boolean
name|versionAdd
parameter_list|(
name|AddUpdateCommand
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
comment|/*     temporarily set the PEER_SYNC flag so that DistributedUpdateProcessor.versionAdd doesn't execute leader logic     but the else part of that if. That way version remains preserved.      we cannot set the flag for the whole processAdd method because DistributedUpdateProcessor.setupRequest() would set     isLeader to false which wouldn't work      */
if|if
condition|(
name|cmd
operator|.
name|getReq
argument_list|()
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|CDCR_UPDATE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|cmd
operator|.
name|setFlags
argument_list|(
name|cmd
operator|.
name|getFlags
argument_list|()
operator||
name|UpdateCommand
operator|.
name|PEER_SYNC
argument_list|)
expr_stmt|;
comment|// we need super.versionAdd() to set leaderLogic to false
block|}
name|boolean
name|result
init|=
name|super
operator|.
name|versionAdd
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
comment|// unset the flag to avoid unintended consequences down the chain
if|if
condition|(
name|cmd
operator|.
name|getReq
argument_list|()
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|CDCR_UPDATE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|cmd
operator|.
name|setFlags
argument_list|(
name|cmd
operator|.
name|getFlags
argument_list|()
operator|&
operator|~
name|UpdateCommand
operator|.
name|PEER_SYNC
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|versionDelete
specifier|protected
name|boolean
name|versionDelete
parameter_list|(
name|DeleteUpdateCommand
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
comment|/*     temporarily set the PEER_SYNC flag so that DistributedUpdateProcessor.deleteAdd doesn't execute leader logic     but the else part of that if. That way version remains preserved.      we cannot set the flag for the whole processDelete method because DistributedUpdateProcessor.setupRequest() would set     isLeader to false which wouldn't work      */
if|if
condition|(
name|cmd
operator|.
name|getReq
argument_list|()
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|CDCR_UPDATE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|cmd
operator|.
name|setFlags
argument_list|(
name|cmd
operator|.
name|getFlags
argument_list|()
operator||
name|UpdateCommand
operator|.
name|PEER_SYNC
argument_list|)
expr_stmt|;
comment|// we need super.versionAdd() to set leaderLogic to false
block|}
name|boolean
name|result
init|=
name|super
operator|.
name|versionDelete
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
comment|// unset the flag to avoid unintended consequences down the chain
if|if
condition|(
name|cmd
operator|.
name|getReq
argument_list|()
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|CDCR_UPDATE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|cmd
operator|.
name|setFlags
argument_list|(
name|cmd
operator|.
name|getFlags
argument_list|()
operator|&
operator|~
name|UpdateCommand
operator|.
name|PEER_SYNC
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|filterParams
specifier|protected
name|ModifiableSolrParams
name|filterParams
parameter_list|(
name|SolrParams
name|params
parameter_list|)
block|{
name|ModifiableSolrParams
name|result
init|=
name|super
operator|.
name|filterParams
argument_list|(
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|.
name|get
argument_list|(
name|CDCR_UPDATE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|set
argument_list|(
name|CDCR_UPDATE
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|.
name|get
argument_list|(
name|DistributedUpdateProcessor
operator|.
name|VERSION_FIELD
argument_list|)
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"+++ cdcr.update but no version field, params are: "
operator|+
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"+++ cdcr.update version present, params are: "
operator|+
name|params
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|DistributedUpdateProcessor
operator|.
name|VERSION_FIELD
argument_list|,
name|params
operator|.
name|get
argument_list|(
name|DistributedUpdateProcessor
operator|.
name|VERSION_FIELD
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|versionDeleteByQuery
specifier|protected
name|void
name|versionDeleteByQuery
parameter_list|(
name|DeleteUpdateCommand
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
comment|/*     temporarily set the PEER_SYNC flag so that DistributedUpdateProcessor.versionDeleteByQuery doesn't execute leader logic     That way version remains preserved.       */
if|if
condition|(
name|cmd
operator|.
name|getReq
argument_list|()
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|CDCR_UPDATE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|cmd
operator|.
name|setFlags
argument_list|(
name|cmd
operator|.
name|getFlags
argument_list|()
operator||
name|UpdateCommand
operator|.
name|PEER_SYNC
argument_list|)
expr_stmt|;
comment|// we need super.versionDeleteByQuery() to set leaderLogic to false
block|}
name|super
operator|.
name|versionDeleteByQuery
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
comment|// unset the flag to avoid unintended consequences down the chain
if|if
condition|(
name|cmd
operator|.
name|getReq
argument_list|()
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|CDCR_UPDATE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|cmd
operator|.
name|setFlags
argument_list|(
name|cmd
operator|.
name|getFlags
argument_list|()
operator|&
operator|~
name|UpdateCommand
operator|.
name|PEER_SYNC
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
