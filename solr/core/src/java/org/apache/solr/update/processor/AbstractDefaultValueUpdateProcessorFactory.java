begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.update.processor
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|AddUpdateCommand
import|;
end_import
begin_comment
comment|/**  *<p>  * Base class that can be extended by any  *<code>UpdateRequestProcessorFactory</code> designed to add a default value   * to the document in an<code>AddUpdateCommand</code> when that field is not   * already specified.  *</p>  *<p>  * This base class handles initialization of the<code>fieldName</code> init   * param, and provides an {@link DefaultValueUpdateProcessor} that Factory   * subclasses may choose to return from their<code>getInstance</code>   * implementation.  *</p>  */
end_comment
begin_class
DECL|class|AbstractDefaultValueUpdateProcessorFactory
specifier|public
specifier|abstract
class|class
name|AbstractDefaultValueUpdateProcessorFactory
extends|extends
name|UpdateRequestProcessorFactory
block|{
DECL|field|fieldName
specifier|protected
name|String
name|fieldName
init|=
literal|null
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{
name|Object
name|obj
init|=
name|args
operator|.
name|remove
argument_list|(
literal|"fieldName"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|obj
operator|&&
literal|null
operator|==
name|fieldName
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SERVER_ERROR
argument_list|,
literal|"'fieldName' init param must be specified and non-null"
argument_list|)
throw|;
block|}
else|else
block|{
name|fieldName
operator|=
name|obj
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|0
operator|<
name|args
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SERVER_ERROR
argument_list|,
literal|"Unexpected init param(s): '"
operator|+
name|args
operator|.
name|getName
argument_list|(
literal|0
argument_list|)
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|super
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
comment|/**    * A simple processor that adds the results of {@link #getDefaultValue}     * to any document which does not already have a value in     *<code>fieldName</code>    */
DECL|class|DefaultValueUpdateProcessor
specifier|protected
specifier|static
specifier|abstract
class|class
name|DefaultValueUpdateProcessor
extends|extends
name|UpdateRequestProcessor
block|{
DECL|field|fieldName
specifier|final
name|String
name|fieldName
decl_stmt|;
DECL|method|DefaultValueUpdateProcessor
specifier|public
name|DefaultValueUpdateProcessor
parameter_list|(
specifier|final
name|String
name|fieldName
parameter_list|,
specifier|final
name|UpdateRequestProcessor
name|next
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|processAdd
specifier|public
name|void
name|processAdd
parameter_list|(
name|AddUpdateCommand
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SolrInputDocument
name|doc
init|=
name|cmd
operator|.
name|getSolrInputDocument
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|doc
operator|.
name|containsKey
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|doc
operator|.
name|addField
argument_list|(
name|fieldName
argument_list|,
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|processAdd
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
DECL|method|getDefaultValue
specifier|public
specifier|abstract
name|Object
name|getDefaultValue
parameter_list|()
function_decl|;
block|}
block|}
end_class
end_unit
