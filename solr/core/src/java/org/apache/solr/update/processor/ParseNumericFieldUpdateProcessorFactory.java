begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.update.processor
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|LocaleUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_comment
comment|/**  * Abstract base class for numeric parsing update processor factories.  * Subclasses can optionally configure a locale.  If no locale is configured,  * then {@link Locale#ROOT} will be used.  E.g. to configure the French/France  * locale:  *   *<pre class="prettyprint">  *&lt;processor class="solr.Parse[Type]FieldUpdateProcessorFactory"&gt;  *&lt;str name="locale"&gt;fr_FR&lt;/str&gt;  *   [...]  *&lt;/processor&gt;</pre>  *  *<p>  * See {@link Locale} for a description of acceptable language, country (optional)  * and variant (optional) values, joined with underscore(s).  *</p>  */
end_comment
begin_class
DECL|class|ParseNumericFieldUpdateProcessorFactory
specifier|public
specifier|abstract
class|class
name|ParseNumericFieldUpdateProcessorFactory
extends|extends
name|FieldMutatingUpdateProcessorFactory
block|{
DECL|field|LOCALE_PARAM
specifier|private
specifier|static
specifier|final
name|String
name|LOCALE_PARAM
init|=
literal|"locale"
decl_stmt|;
DECL|field|locale
specifier|protected
name|Locale
name|locale
init|=
name|Locale
operator|.
name|ROOT
decl_stmt|;
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{
name|String
name|localeParam
init|=
operator|(
name|String
operator|)
name|args
operator|.
name|remove
argument_list|(
name|LOCALE_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|localeParam
condition|)
block|{
name|locale
operator|=
name|LocaleUtils
operator|.
name|toLocale
argument_list|(
name|localeParam
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns true if the given FieldType is compatible with this parsing factory.    */
DECL|method|isSchemaFieldTypeCompatible
specifier|protected
specifier|abstract
name|boolean
name|isSchemaFieldTypeCompatible
parameter_list|(
name|FieldType
name|type
parameter_list|)
function_decl|;
comment|/**    * Returns true if the field doesn't match any schema field or dynamic field,    *           or if the matched field's type is compatible    * @param core Where to get the current schema from    */
annotation|@
name|Override
specifier|public
name|FieldMutatingUpdateProcessor
operator|.
name|FieldNameSelector
DECL|method|getDefaultSelector
name|getDefaultSelector
parameter_list|(
specifier|final
name|SolrCore
name|core
parameter_list|)
block|{
return|return
operator|new
name|FieldMutatingUpdateProcessor
operator|.
name|FieldNameSelector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|shouldMutate
parameter_list|(
specifier|final
name|String
name|fieldName
parameter_list|)
block|{
specifier|final
name|IndexSchema
name|schema
init|=
name|core
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|FieldType
name|type
init|=
name|schema
operator|.
name|getFieldTypeNoEx
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
return|return
operator|(
literal|null
operator|==
name|type
operator|)
operator|||
name|isSchemaFieldTypeCompatible
argument_list|(
name|type
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
end_class
end_unit
