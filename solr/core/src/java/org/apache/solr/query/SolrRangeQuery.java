begin_unit
begin_package
DECL|package|org.apache.solr.query
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|query
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BulkScorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreScorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreWeight
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|DocIdSetBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|BitDocSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|DocSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|DocSetBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|DocSetProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|ExtendedQueryBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|Filter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_comment
comment|/** @lucene.experimental */
end_comment
begin_class
DECL|class|SolrRangeQuery
specifier|public
specifier|final
class|class
name|SolrRangeQuery
extends|extends
name|ExtendedQueryBase
implements|implements
name|DocSetProducer
block|{
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|lower
specifier|private
specifier|final
name|BytesRef
name|lower
decl_stmt|;
DECL|field|upper
specifier|private
specifier|final
name|BytesRef
name|upper
decl_stmt|;
DECL|field|flags
specifier|private
name|byte
name|flags
decl_stmt|;
DECL|field|FLAG_INC_LOWER
specifier|private
specifier|static
name|byte
name|FLAG_INC_LOWER
init|=
literal|0x01
decl_stmt|;
DECL|field|FLAG_INC_UPPER
specifier|private
specifier|static
name|byte
name|FLAG_INC_UPPER
init|=
literal|0x02
decl_stmt|;
DECL|method|SolrRangeQuery
specifier|public
name|SolrRangeQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|BytesRef
name|lower
parameter_list|,
name|BytesRef
name|upper
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|lower
operator|=
name|lower
expr_stmt|;
name|this
operator|.
name|upper
operator|=
name|upper
expr_stmt|;
name|this
operator|.
name|flags
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|this
operator|.
name|lower
operator|!=
literal|null
operator|&&
name|includeLower
condition|?
name|FLAG_INC_LOWER
else|:
literal|0
operator|)
operator||
operator|(
name|this
operator|.
name|upper
operator|!=
literal|null
operator|&&
name|includeUpper
condition|?
name|FLAG_INC_UPPER
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getField
specifier|public
name|String
name|getField
parameter_list|()
block|{
return|return
name|field
return|;
block|}
DECL|method|includeLower
specifier|public
name|boolean
name|includeLower
parameter_list|()
block|{
return|return
operator|(
name|flags
operator|&
name|FLAG_INC_LOWER
operator|)
operator|!=
literal|0
return|;
block|}
DECL|method|includeUpper
specifier|public
name|boolean
name|includeUpper
parameter_list|()
block|{
return|return
operator|(
name|flags
operator|&
name|FLAG_INC_UPPER
operator|)
operator|!=
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
literal|0x8f2c9ba7
operator|*
operator|(
name|flags
operator|+
literal|1
operator|)
decl_stmt|;
comment|// avoid multiplying by 0
name|hash
operator|=
name|hash
operator|*
literal|29
operator|+
operator|(
operator|(
name|lower
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|lower
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
comment|// TODO: simpler hash code here?
name|hash
operator|=
name|hash
operator|*
literal|29
operator|+
operator|(
operator|(
name|upper
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|upper
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|hash
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|SolrRangeQuery
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SolrRangeQuery
name|other
init|=
operator|(
name|SolrRangeQuery
operator|)
name|obj
decl_stmt|;
return|return
operator|(
name|this
operator|.
name|flags
operator|==
name|other
operator|.
name|flags
operator|)
operator|&&
operator|(
name|this
operator|.
name|field
operator|.
name|equals
argument_list|(
name|other
operator|.
name|field
argument_list|)
operator|)
operator|&&
operator|(
name|this
operator|.
name|lower
operator|==
name|other
operator|.
name|lower
operator|||
operator|(
name|this
operator|.
name|lower
operator|!=
literal|null
operator|&&
name|other
operator|.
name|lower
operator|!=
literal|null
operator|&&
name|this
operator|.
name|lower
operator|.
name|equals
argument_list|(
name|other
operator|.
name|lower
argument_list|)
operator|)
operator|)
operator|&&
operator|(
name|this
operator|.
name|upper
operator|==
name|other
operator|.
name|upper
operator|||
operator|(
name|this
operator|.
name|upper
operator|!=
literal|null
operator|&&
name|other
operator|.
name|upper
operator|!=
literal|null
operator|&&
name|this
operator|.
name|upper
operator|.
name|equals
argument_list|(
name|other
operator|.
name|upper
argument_list|)
operator|)
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|getField
argument_list|()
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
block|}
comment|// TODO: use our schema?
name|buffer
operator|.
name|append
argument_list|(
name|includeLower
argument_list|()
condition|?
literal|'['
else|:
literal|'{'
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|endpoint
argument_list|(
name|lower
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|" TO "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|endpoint
argument_list|(
name|upper
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|includeUpper
argument_list|()
condition|?
literal|']'
else|:
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|endpoint
specifier|private
name|String
name|endpoint
parameter_list|(
name|BytesRef
name|ref
parameter_list|)
block|{
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
return|return
literal|"*"
return|;
name|String
name|toStr
init|=
name|Term
operator|.
name|toString
argument_list|(
name|ref
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|toStr
argument_list|)
condition|)
block|{
name|toStr
operator|=
literal|"\\*"
expr_stmt|;
block|}
comment|// TODO: other escaping
return|return
name|toStr
return|;
block|}
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|createWeight
specifier|public
name|Weight
name|createWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|boolean
name|needScores
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ConstWeight
argument_list|(
name|searcher
argument_list|,
name|needScores
argument_list|)
return|;
comment|/*     DocSet docs = createDocSet(searcher.getIndexReader().leaves(), searcher.getIndexReader().maxDoc());     SolrConstantScoreQuery csq = new SolrConstantScoreQuery( docs.getTopFilter() );     return csq.createWeight(searcher, needScores);     */
block|}
annotation|@
name|Override
DECL|method|createDocSet
specifier|public
name|DocSet
name|createDocSet
parameter_list|(
name|SolrIndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createDocSet
argument_list|(
name|searcher
argument_list|,
name|Math
operator|.
name|min
argument_list|(
literal|64
argument_list|,
operator|(
name|searcher
operator|.
name|maxDoc
argument_list|()
operator|>>>
literal|10
operator|)
operator|+
literal|4
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createDocSet
specifier|private
name|DocSet
name|createDocSet
parameter_list|(
name|SolrIndexSearcher
name|searcher
parameter_list|,
name|long
name|cost
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|maxDoc
init|=
name|searcher
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
name|BitDocSet
name|liveDocs
init|=
name|searcher
operator|.
name|getLiveDocs
argument_list|()
decl_stmt|;
name|FixedBitSet
name|liveBits
init|=
name|liveDocs
operator|.
name|size
argument_list|()
operator|==
name|maxDoc
condition|?
literal|null
else|:
name|liveDocs
operator|.
name|getBits
argument_list|()
decl_stmt|;
name|DocSetBuilder
name|builder
init|=
operator|new
name|DocSetBuilder
argument_list|(
name|maxDoc
argument_list|,
name|cost
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LeafReaderContext
argument_list|>
name|leaves
init|=
name|searcher
operator|.
name|getTopReaderContext
argument_list|()
operator|.
name|leaves
argument_list|()
decl_stmt|;
name|int
name|maxTermsPerSegment
init|=
literal|0
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|leaves
control|)
block|{
name|TermsEnum
name|te
init|=
name|getTermsEnum
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|int
name|termsVisited
init|=
name|builder
operator|.
name|add
argument_list|(
name|te
argument_list|,
name|ctx
operator|.
name|docBase
argument_list|)
decl_stmt|;
name|maxTermsPerSegment
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxTermsPerSegment
argument_list|,
name|termsVisited
argument_list|)
expr_stmt|;
block|}
return|return
name|maxTermsPerSegment
operator|<=
literal|1
condition|?
name|builder
operator|.
name|buildUniqueInOrder
argument_list|(
name|liveBits
argument_list|)
else|:
name|builder
operator|.
name|build
argument_list|(
name|liveBits
argument_list|)
return|;
block|}
DECL|class|RangeTermsEnum
specifier|private
class|class
name|RangeTermsEnum
extends|extends
name|TermsEnum
block|{
DECL|field|te
name|TermsEnum
name|te
decl_stmt|;
DECL|field|curr
name|BytesRef
name|curr
decl_stmt|;
DECL|field|positioned
name|boolean
name|positioned
decl_stmt|;
DECL|method|RangeTermsEnum
specifier|public
name|RangeTermsEnum
parameter_list|(
name|Terms
name|terms
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|terms
operator|==
literal|null
condition|)
block|{
name|positioned
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|te
operator|=
name|terms
operator|.
name|iterator
argument_list|()
expr_stmt|;
if|if
condition|(
name|lower
operator|!=
literal|null
condition|)
block|{
name|TermsEnum
operator|.
name|SeekStatus
name|status
init|=
name|te
operator|.
name|seekCeil
argument_list|(
name|lower
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|END
condition|)
block|{
name|positioned
operator|=
literal|true
expr_stmt|;
name|curr
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|==
name|SeekStatus
operator|.
name|FOUND
condition|)
block|{
name|positioned
operator|=
name|includeLower
argument_list|()
expr_stmt|;
name|curr
operator|=
name|te
operator|.
name|term
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// lower bound not found, so includeLower is irrelevant
name|positioned
operator|=
literal|true
expr_stmt|;
name|curr
operator|=
name|te
operator|.
name|term
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|seekCeil
specifier|public
name|SeekStatus
name|seekCeil
parameter_list|(
name|BytesRef
name|text
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|te
operator|.
name|seekCeil
argument_list|(
name|text
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|seekExact
specifier|public
name|void
name|seekExact
parameter_list|(
name|long
name|ord
parameter_list|)
throws|throws
name|IOException
block|{
name|te
operator|.
name|seekExact
argument_list|(
name|ord
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|term
specifier|public
name|BytesRef
name|term
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|te
operator|.
name|term
argument_list|()
return|;
comment|// should be equal to curr, except if we went past the end
block|}
annotation|@
name|Override
DECL|method|ord
specifier|public
name|long
name|ord
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|te
operator|.
name|ord
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|docFreq
specifier|public
name|int
name|docFreq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|te
operator|.
name|docFreq
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|totalTermFreq
specifier|public
name|long
name|totalTermFreq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|te
operator|.
name|totalTermFreq
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|postings
specifier|public
name|PostingsEnum
name|postings
parameter_list|(
name|PostingsEnum
name|reuse
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|te
operator|.
name|postings
argument_list|(
name|reuse
argument_list|,
name|flags
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|BytesRef
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|positioned
condition|)
block|{
name|positioned
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|curr
operator|=
name|te
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|curr
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|upper
operator|!=
literal|null
condition|)
block|{
name|int
name|cmp
init|=
name|curr
operator|.
name|compareTo
argument_list|(
name|upper
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|<
literal|0
operator|||
name|cmp
operator|==
literal|0
operator|&&
name|includeUpper
argument_list|()
condition|)
block|{
return|return
name|curr
return|;
block|}
else|else
block|{
name|curr
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|curr
return|;
block|}
annotation|@
name|Override
DECL|method|attributes
specifier|public
name|AttributeSource
name|attributes
parameter_list|()
block|{
return|return
name|te
operator|.
name|attributes
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|seekExact
specifier|public
name|boolean
name|seekExact
parameter_list|(
name|BytesRef
name|text
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|te
operator|.
name|seekExact
argument_list|(
name|text
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|seekExact
specifier|public
name|void
name|seekExact
parameter_list|(
name|BytesRef
name|term
parameter_list|,
name|TermState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|te
operator|.
name|seekExact
argument_list|(
name|term
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|termState
specifier|public
name|TermState
name|termState
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|te
operator|.
name|termState
argument_list|()
return|;
block|}
block|}
DECL|method|getTermsEnum
specifier|public
name|TermsEnum
name|getTermsEnum
parameter_list|(
name|LeafReaderContext
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|RangeTermsEnum
argument_list|(
name|ctx
operator|.
name|reader
argument_list|()
operator|.
name|terms
argument_list|(
name|getField
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|class|TermAndState
specifier|private
specifier|static
class|class
name|TermAndState
block|{
DECL|field|term
specifier|final
name|BytesRef
name|term
decl_stmt|;
DECL|field|state
specifier|final
name|TermState
name|state
decl_stmt|;
DECL|field|docFreq
specifier|final
name|int
name|docFreq
decl_stmt|;
DECL|field|totalTermFreq
specifier|final
name|long
name|totalTermFreq
decl_stmt|;
DECL|method|TermAndState
name|TermAndState
parameter_list|(
name|BytesRef
name|term
parameter_list|,
name|TermState
name|state
parameter_list|,
name|int
name|docFreq
parameter_list|,
name|long
name|totalTermFreq
parameter_list|)
block|{
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|docFreq
operator|=
name|docFreq
expr_stmt|;
name|this
operator|.
name|totalTermFreq
operator|=
name|totalTermFreq
expr_stmt|;
block|}
block|}
DECL|class|SegState
specifier|private
specifier|static
class|class
name|SegState
block|{
DECL|field|weight
specifier|final
name|Weight
name|weight
decl_stmt|;
DECL|field|set
specifier|final
name|DocIdSet
name|set
decl_stmt|;
DECL|method|SegState
name|SegState
parameter_list|(
name|Weight
name|weight
parameter_list|)
block|{
name|this
operator|.
name|weight
operator|=
name|weight
expr_stmt|;
name|this
operator|.
name|set
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|SegState
name|SegState
parameter_list|(
name|DocIdSet
name|set
parameter_list|)
block|{
name|this
operator|.
name|set
operator|=
name|set
expr_stmt|;
name|this
operator|.
name|weight
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// adapted from MultiTermQueryConstantScoreWrapper
DECL|class|ConstWeight
class|class
name|ConstWeight
extends|extends
name|ConstantScoreWeight
block|{
DECL|field|BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD
specifier|private
specifier|static
specifier|final
name|int
name|BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD
init|=
literal|16
decl_stmt|;
DECL|field|searcher
specifier|final
name|IndexSearcher
name|searcher
decl_stmt|;
DECL|field|needScores
specifier|final
name|boolean
name|needScores
decl_stmt|;
DECL|field|checkedFilterCache
name|boolean
name|checkedFilterCache
decl_stmt|;
DECL|field|filter
name|Filter
name|filter
decl_stmt|;
DECL|field|segStates
specifier|final
name|SegState
index|[]
name|segStates
decl_stmt|;
DECL|method|ConstWeight
specifier|protected
name|ConstWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|boolean
name|needScores
parameter_list|)
block|{
name|super
argument_list|(
name|SolrRangeQuery
operator|.
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|searcher
operator|=
name|searcher
expr_stmt|;
name|this
operator|.
name|segStates
operator|=
operator|new
name|SegState
index|[
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|this
operator|.
name|needScores
operator|=
name|needScores
expr_stmt|;
block|}
comment|/** Try to collect terms from the given terms enum and return count=sum(df) for terms visited so far      *  or (-count - 1) if this should be rewritten into a boolean query.      *  The termEnum will already be positioned on the next term if not exhausted.      */
DECL|method|collectTerms
specifier|private
name|long
name|collectTerms
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|TermsEnum
name|termsEnum
parameter_list|,
name|List
argument_list|<
name|TermAndState
argument_list|>
name|terms
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|count
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|threshold
init|=
name|Math
operator|.
name|min
argument_list|(
name|BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD
argument_list|,
name|BooleanQuery
operator|.
name|getMaxClauseCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threshold
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|BytesRef
name|term
init|=
name|termsEnum
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
return|return
operator|-
name|count
operator|-
literal|1
return|;
block|}
name|TermState
name|state
init|=
name|termsEnum
operator|.
name|termState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|isRealTerm
argument_list|()
operator|==
literal|false
condition|)
block|{
comment|// TermQuery does not accept fake terms for now
return|return
name|count
return|;
block|}
name|int
name|df
init|=
name|termsEnum
operator|.
name|docFreq
argument_list|()
decl_stmt|;
name|count
operator|+=
name|df
expr_stmt|;
name|terms
operator|.
name|add
argument_list|(
operator|new
name|TermAndState
argument_list|(
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|term
argument_list|)
argument_list|,
name|state
argument_list|,
name|df
argument_list|,
name|termsEnum
operator|.
name|totalTermFreq
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|termsEnum
operator|.
name|next
argument_list|()
operator|==
literal|null
condition|?
operator|(
operator|-
name|count
operator|-
literal|1
operator|)
else|:
name|count
return|;
block|}
DECL|method|getSegState
specifier|private
name|SegState
name|getSegState
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|SegState
name|segState
init|=
name|segStates
index|[
name|context
operator|.
name|ord
index|]
decl_stmt|;
if|if
condition|(
name|segState
operator|!=
literal|null
condition|)
return|return
name|segState
return|;
comment|// first time, check our filter cache
name|boolean
name|doCheck
init|=
operator|!
name|checkedFilterCache
operator|&&
name|context
operator|.
name|ord
operator|==
literal|0
decl_stmt|;
name|checkedFilterCache
operator|=
literal|true
expr_stmt|;
name|SolrIndexSearcher
name|solrSearcher
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|doCheck
operator|&&
name|searcher
operator|instanceof
name|SolrIndexSearcher
condition|)
block|{
name|solrSearcher
operator|=
operator|(
name|SolrIndexSearcher
operator|)
name|searcher
expr_stmt|;
if|if
condition|(
name|solrSearcher
operator|.
name|getFilterCache
argument_list|()
operator|==
literal|null
condition|)
block|{
name|doCheck
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|solrSearcher
operator|=
operator|(
name|SolrIndexSearcher
operator|)
name|searcher
expr_stmt|;
name|DocSet
name|answer
init|=
name|solrSearcher
operator|.
name|getFilterCache
argument_list|()
operator|.
name|get
argument_list|(
name|SolrRangeQuery
operator|.
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
block|{
name|filter
operator|=
name|answer
operator|.
name|getTopFilter
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
return|return
name|segStates
index|[
name|context
operator|.
name|ord
index|]
operator|=
operator|new
name|SegState
argument_list|(
name|filter
operator|.
name|getDocIdSet
argument_list|(
name|context
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
specifier|final
name|Terms
name|terms
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|terms
argument_list|(
name|SolrRangeQuery
operator|.
name|this
operator|.
name|getField
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|==
literal|null
condition|)
block|{
return|return
name|segStates
index|[
name|context
operator|.
name|ord
index|]
operator|=
operator|new
name|SegState
argument_list|(
operator|(
name|DocIdSet
operator|)
literal|null
argument_list|)
return|;
block|}
specifier|final
name|TermsEnum
name|termsEnum
init|=
name|SolrRangeQuery
operator|.
name|this
operator|.
name|getTermsEnum
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|PostingsEnum
name|docs
init|=
literal|null
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TermAndState
argument_list|>
name|collectedTerms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|count
init|=
name|collectTerms
argument_list|(
name|context
argument_list|,
name|termsEnum
argument_list|,
name|collectedTerms
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|<
literal|0
condition|)
block|{
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
for|for
control|(
name|TermAndState
name|t
range|:
name|collectedTerms
control|)
block|{
specifier|final
name|TermContext
name|termContext
init|=
operator|new
name|TermContext
argument_list|(
name|searcher
operator|.
name|getTopReaderContext
argument_list|()
argument_list|)
decl_stmt|;
name|termContext
operator|.
name|register
argument_list|(
name|t
operator|.
name|state
argument_list|,
name|context
operator|.
name|ord
argument_list|,
name|t
operator|.
name|docFreq
argument_list|,
name|t
operator|.
name|totalTermFreq
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|SolrRangeQuery
operator|.
name|this
operator|.
name|getField
argument_list|()
argument_list|,
name|t
operator|.
name|term
argument_list|)
argument_list|,
name|termContext
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
name|Query
name|q
init|=
operator|new
name|ConstantScoreQuery
argument_list|(
name|bq
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Weight
name|weight
init|=
name|searcher
operator|.
name|rewrite
argument_list|(
name|q
argument_list|)
operator|.
name|createWeight
argument_list|(
name|searcher
argument_list|,
name|needScores
argument_list|)
decl_stmt|;
name|weight
operator|.
name|normalize
argument_list|(
literal|1f
argument_list|,
name|score
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|segStates
index|[
name|context
operator|.
name|ord
index|]
operator|=
operator|new
name|SegState
argument_list|(
name|weight
argument_list|)
return|;
block|}
comment|// Too many terms for boolean query...
if|if
condition|(
name|doCheck
condition|)
block|{
name|DocSet
name|answer
init|=
name|createDocSet
argument_list|(
name|solrSearcher
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|solrSearcher
operator|.
name|getFilterCache
argument_list|()
operator|.
name|put
argument_list|(
name|SolrRangeQuery
operator|.
name|this
argument_list|,
name|answer
argument_list|)
expr_stmt|;
name|filter
operator|=
name|answer
operator|.
name|getTopFilter
argument_list|()
expr_stmt|;
return|return
name|segStates
index|[
name|context
operator|.
name|ord
index|]
operator|=
operator|new
name|SegState
argument_list|(
name|filter
operator|.
name|getDocIdSet
argument_list|(
name|context
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
comment|/* FUTURE: reuse term states in the future to help build DocSet, use collected count so far...       Bits liveDocs = context.reader().getLiveDocs();       int base = context.docBase;       int termsVisited = collectedTerms.size();        DocSetBuilder builder = new DocSetBuilder(searcher.getIndexReader().maxDoc());       if (!collectedTerms.isEmpty()) {         TermsEnum termsEnum2 = terms.iterator();         for (TermAndState t : collectedTerms) {           termsEnum2.seekExact(t.term, t.state);           docs = termsEnum2.postings(docs, PostingsEnum.NONE);           builder.add(docs, context.docBase, liveDocs);         }       }        termsVisited += builder.add(termsEnum, base, liveDocs);      */
name|DocIdSetBuilder
name|builder
init|=
operator|new
name|DocIdSetBuilder
argument_list|(
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|grow
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|count
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|collectedTerms
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|TermsEnum
name|termsEnum2
init|=
name|terms
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|TermAndState
name|t
range|:
name|collectedTerms
control|)
block|{
name|termsEnum2
operator|.
name|seekExact
argument_list|(
name|t
operator|.
name|term
argument_list|,
name|t
operator|.
name|state
argument_list|)
expr_stmt|;
name|docs
operator|=
name|termsEnum2
operator|.
name|postings
argument_list|(
name|docs
argument_list|,
name|PostingsEnum
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|docs
argument_list|)
expr_stmt|;
block|}
block|}
do|do
block|{
comment|// already positioned on the next term, so don't call next() here...
name|docs
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|docs
argument_list|,
name|PostingsEnum
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|docs
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|termsEnum
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
do|;
name|DocIdSet
name|segSet
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|segStates
index|[
name|context
operator|.
name|ord
index|]
operator|=
operator|new
name|SegState
argument_list|(
name|segSet
argument_list|)
return|;
block|}
DECL|method|scorer
specifier|private
name|Scorer
name|scorer
parameter_list|(
name|DocIdSet
name|set
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|set
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|DocIdSetIterator
name|disi
init|=
name|set
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|disi
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|ConstantScoreScorer
argument_list|(
name|this
argument_list|,
name|score
argument_list|()
argument_list|,
name|disi
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|bulkScorer
specifier|public
name|BulkScorer
name|bulkScorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SegState
name|weightOrBitSet
init|=
name|getSegState
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|weightOrBitSet
operator|.
name|weight
operator|!=
literal|null
condition|)
block|{
return|return
name|weightOrBitSet
operator|.
name|weight
operator|.
name|bulkScorer
argument_list|(
name|context
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|Scorer
name|scorer
init|=
name|scorer
argument_list|(
name|weightOrBitSet
operator|.
name|set
argument_list|)
decl_stmt|;
if|if
condition|(
name|scorer
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|DefaultBulkScorer
argument_list|(
name|scorer
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|scorer
specifier|public
name|Scorer
name|scorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SegState
name|weightOrBitSet
init|=
name|getSegState
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|weightOrBitSet
operator|.
name|weight
operator|!=
literal|null
condition|)
block|{
return|return
name|weightOrBitSet
operator|.
name|weight
operator|.
name|scorer
argument_list|(
name|context
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|scorer
argument_list|(
name|weightOrBitSet
operator|.
name|set
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class
end_unit
