begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.internal.csv
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|internal
operator|.
name|csv
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import
begin_comment
comment|/**  * ExtendedBufferedReaderTest  *  */
end_comment
begin_class
DECL|class|ExtendedBufferedReaderTest
specifier|public
class|class
name|ExtendedBufferedReaderTest
extends|extends
name|TestCase
block|{
comment|// ======================================================
comment|//   the test cases
comment|// ======================================================
DECL|method|testConstructors
specifier|public
name|void
name|testConstructors
parameter_list|()
block|{
name|ExtendedBufferedReader
name|br
init|=
operator|new
name|ExtendedBufferedReader
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|br
operator|=
operator|new
name|ExtendedBufferedReader
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
DECL|method|testReadLookahead1
specifier|public
name|void
name|testReadLookahead1
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|ExtendedBufferedReader
operator|.
name|END_OF_STREAM
argument_list|,
name|getEBR
argument_list|(
literal|""
argument_list|)
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|ExtendedBufferedReader
name|br
init|=
name|getEBR
argument_list|(
literal|"1\n2\r3\n"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|'1'
argument_list|,
name|br
operator|.
name|lookAhead
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ExtendedBufferedReader
operator|.
name|UNDEFINED
argument_list|,
name|br
operator|.
name|readAgain
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'1'
argument_list|,
name|br
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'1'
argument_list|,
name|br
operator|.
name|readAgain
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|br
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'\n'
argument_list|,
name|br
operator|.
name|lookAhead
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|br
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'1'
argument_list|,
name|br
operator|.
name|readAgain
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'\n'
argument_list|,
name|br
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|br
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'\n'
argument_list|,
name|br
operator|.
name|readAgain
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|br
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'2'
argument_list|,
name|br
operator|.
name|lookAhead
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|br
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'\n'
argument_list|,
name|br
operator|.
name|readAgain
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|br
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'2'
argument_list|,
name|br
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'2'
argument_list|,
name|br
operator|.
name|readAgain
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'\r'
argument_list|,
name|br
operator|.
name|lookAhead
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'2'
argument_list|,
name|br
operator|.
name|readAgain
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'\r'
argument_list|,
name|br
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'\r'
argument_list|,
name|br
operator|.
name|readAgain
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'3'
argument_list|,
name|br
operator|.
name|lookAhead
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'\r'
argument_list|,
name|br
operator|.
name|readAgain
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'3'
argument_list|,
name|br
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'3'
argument_list|,
name|br
operator|.
name|readAgain
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'\n'
argument_list|,
name|br
operator|.
name|lookAhead
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|br
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'3'
argument_list|,
name|br
operator|.
name|readAgain
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'\n'
argument_list|,
name|br
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|br
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'\n'
argument_list|,
name|br
operator|.
name|readAgain
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|br
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ExtendedBufferedReader
operator|.
name|END_OF_STREAM
argument_list|,
name|br
operator|.
name|lookAhead
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'\n'
argument_list|,
name|br
operator|.
name|readAgain
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ExtendedBufferedReader
operator|.
name|END_OF_STREAM
argument_list|,
name|br
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ExtendedBufferedReader
operator|.
name|END_OF_STREAM
argument_list|,
name|br
operator|.
name|readAgain
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ExtendedBufferedReader
operator|.
name|END_OF_STREAM
argument_list|,
name|br
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ExtendedBufferedReader
operator|.
name|END_OF_STREAM
argument_list|,
name|br
operator|.
name|lookAhead
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testReadLookahead2
specifier|public
name|void
name|testReadLookahead2
parameter_list|()
throws|throws
name|Exception
block|{
name|char
index|[]
name|ref
init|=
operator|new
name|char
index|[
literal|5
index|]
decl_stmt|;
name|char
index|[]
name|res
init|=
operator|new
name|char
index|[
literal|5
index|]
decl_stmt|;
name|ExtendedBufferedReader
name|br
init|=
name|getEBR
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|br
operator|.
name|read
argument_list|(
name|res
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|res
argument_list|,
name|ref
argument_list|)
argument_list|)
expr_stmt|;
name|br
operator|=
name|getEBR
argument_list|(
literal|"abcdefg"
argument_list|)
expr_stmt|;
name|ref
index|[
literal|0
index|]
operator|=
literal|'a'
expr_stmt|;
name|ref
index|[
literal|1
index|]
operator|=
literal|'b'
expr_stmt|;
name|ref
index|[
literal|2
index|]
operator|=
literal|'c'
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|br
operator|.
name|read
argument_list|(
name|res
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|res
argument_list|,
name|ref
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'c'
argument_list|,
name|br
operator|.
name|readAgain
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'d'
argument_list|,
name|br
operator|.
name|lookAhead
argument_list|()
argument_list|)
expr_stmt|;
name|ref
index|[
literal|4
index|]
operator|=
literal|'d'
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|br
operator|.
name|read
argument_list|(
name|res
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|res
argument_list|,
name|ref
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'d'
argument_list|,
name|br
operator|.
name|readAgain
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMarkSupported
specifier|public
name|void
name|testMarkSupported
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|getEBR
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|markSupported
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testReadLine
specifier|public
name|void
name|testReadLine
parameter_list|()
throws|throws
name|Exception
block|{
name|ExtendedBufferedReader
name|br
init|=
name|getEBR
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|br
operator|.
name|readLine
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|br
operator|=
name|getEBR
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|br
operator|.
name|readLine
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|br
operator|.
name|readLine
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|br
operator|=
name|getEBR
argument_list|(
literal|"foo\n\nhello"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|br
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|br
operator|.
name|readLine
argument_list|()
operator|.
name|equals
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|br
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|br
operator|.
name|readLine
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|br
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|br
operator|.
name|readLine
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|br
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|br
operator|.
name|readLine
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|br
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|br
operator|=
name|getEBR
argument_list|(
literal|"foo\n\nhello"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'f'
argument_list|,
name|br
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'o'
argument_list|,
name|br
operator|.
name|lookAhead
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|br
operator|.
name|readLine
argument_list|()
operator|.
name|equals
argument_list|(
literal|"oo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|br
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'\n'
argument_list|,
name|br
operator|.
name|lookAhead
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|br
operator|.
name|readLine
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|br
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'h'
argument_list|,
name|br
operator|.
name|lookAhead
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|br
operator|.
name|readLine
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|br
operator|.
name|readLine
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|br
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|br
operator|=
name|getEBR
argument_list|(
literal|"foo\rbaar\r\nfoo"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|br
operator|.
name|readLine
argument_list|()
operator|.
name|equals
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'b'
argument_list|,
name|br
operator|.
name|lookAhead
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|br
operator|.
name|readLine
argument_list|()
operator|.
name|equals
argument_list|(
literal|"baar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'f'
argument_list|,
name|br
operator|.
name|lookAhead
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|br
operator|.
name|readLine
argument_list|()
operator|.
name|equals
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|br
operator|.
name|readLine
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testSkip0
specifier|public
name|void
name|testSkip0
parameter_list|()
throws|throws
name|Exception
block|{
name|ExtendedBufferedReader
name|br
init|=
name|getEBR
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|br
operator|.
name|skip
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|br
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|br
operator|=
name|getEBR
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|br
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|br
operator|=
name|getEBR
argument_list|(
literal|"abcdefg"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|br
operator|.
name|skip
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'a'
argument_list|,
name|br
operator|.
name|lookAhead
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|br
operator|.
name|skip
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'a'
argument_list|,
name|br
operator|.
name|lookAhead
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|br
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'b'
argument_list|,
name|br
operator|.
name|lookAhead
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'b'
argument_list|,
name|br
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|br
operator|.
name|skip
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'f'
argument_list|,
name|br
operator|.
name|lookAhead
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|br
operator|.
name|skip
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|br
operator|.
name|readLine
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|br
operator|=
name|getEBR
argument_list|(
literal|"12345"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|br
operator|.
name|skip
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|br
operator|.
name|lookAhead
argument_list|()
operator|==
name|ExtendedBufferedReader
operator|.
name|END_OF_STREAM
argument_list|)
expr_stmt|;
block|}
DECL|method|testSkipUntil
specifier|public
name|void
name|testSkipUntil
parameter_list|()
throws|throws
name|Exception
block|{
name|ExtendedBufferedReader
name|br
init|=
name|getEBR
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|br
operator|.
name|skipUntil
argument_list|(
literal|';'
argument_list|)
argument_list|)
expr_stmt|;
name|br
operator|=
name|getEBR
argument_list|(
literal|"ABCDEF,GHL,,MN"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|br
operator|.
name|skipUntil
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|br
operator|.
name|skipUntil
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|br
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|br
operator|.
name|skipUntil
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|br
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|br
operator|.
name|skipUntil
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|br
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|br
operator|.
name|skipUntil
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testReadUntil
specifier|public
name|void
name|testReadUntil
parameter_list|()
throws|throws
name|Exception
block|{
name|ExtendedBufferedReader
name|br
init|=
name|getEBR
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|br
operator|.
name|readUntil
argument_list|(
literal|';'
argument_list|)
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|br
operator|=
name|getEBR
argument_list|(
literal|"ABCDEF;GHL;;MN"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|br
operator|.
name|readUntil
argument_list|(
literal|';'
argument_list|)
operator|.
name|equals
argument_list|(
literal|"ABCDEF"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|br
operator|.
name|readUntil
argument_list|(
literal|';'
argument_list|)
operator|.
name|length
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|br
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|br
operator|.
name|readUntil
argument_list|(
literal|';'
argument_list|)
operator|.
name|equals
argument_list|(
literal|"GHL"
argument_list|)
argument_list|)
expr_stmt|;
name|br
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|br
operator|.
name|readUntil
argument_list|(
literal|';'
argument_list|)
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|br
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|br
operator|.
name|readUntil
argument_list|(
literal|','
argument_list|)
operator|.
name|equals
argument_list|(
literal|"MN"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getEBR
specifier|private
name|ExtendedBufferedReader
name|getEBR
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
operator|new
name|ExtendedBufferedReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class
end_unit
