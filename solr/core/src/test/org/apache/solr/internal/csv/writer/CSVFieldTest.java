begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.internal.csv.writer
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|internal
operator|.
name|csv
operator|.
name|writer
package|;
end_package
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_class
DECL|class|CSVFieldTest
specifier|public
class|class
name|CSVFieldTest
extends|extends
name|TestCase
block|{
DECL|method|testCSVField
specifier|public
name|void
name|testCSVField
parameter_list|()
block|{
name|CSVField
name|field
init|=
operator|new
name|CSVField
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|field
operator|.
name|setName
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"id"
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|field
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|field
operator|.
name|setSize
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|field
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|field
operator|=
operator|new
name|CSVField
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"name"
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|field
operator|=
operator|new
name|CSVField
argument_list|(
literal|"name"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"name"
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|field
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFill
specifier|public
name|void
name|testFill
parameter_list|()
block|{
name|CSVField
name|field
init|=
operator|new
name|CSVField
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|CSVConfig
operator|.
name|FILLNONE
argument_list|,
name|field
operator|.
name|getFill
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|field
operator|.
name|overrideFill
argument_list|()
argument_list|)
expr_stmt|;
name|field
operator|.
name|setFill
argument_list|(
name|CSVConfig
operator|.
name|FILLLEFT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|field
operator|.
name|overrideFill
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CSVConfig
operator|.
name|FILLLEFT
argument_list|,
name|field
operator|.
name|getFill
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
