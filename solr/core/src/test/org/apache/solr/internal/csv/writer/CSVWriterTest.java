begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.internal.csv.writer
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|internal
operator|.
name|csv
operator|.
name|writer
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_comment
comment|/**  * The testcase for the csv writer.  */
end_comment
begin_class
DECL|class|CSVWriterTest
specifier|public
class|class
name|CSVWriterTest
extends|extends
name|TestCase
block|{
DECL|method|testCSVConfig
specifier|public
name|void
name|testCSVConfig
parameter_list|()
block|{
name|CSVWriter
name|writer
init|=
operator|new
name|CSVWriter
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|writer
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|CSVConfig
name|config
init|=
operator|new
name|CSVConfig
argument_list|()
decl_stmt|;
name|writer
operator|.
name|setConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|config
argument_list|,
name|writer
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|CSVWriter
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|config
argument_list|,
name|writer
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testWriter
specifier|public
name|void
name|testWriter
parameter_list|()
block|{
name|CSVWriter
name|writer
init|=
operator|new
name|CSVWriter
argument_list|()
decl_stmt|;
name|CSVConfig
name|config
init|=
operator|new
name|CSVConfig
argument_list|()
decl_stmt|;
name|config
operator|.
name|addField
argument_list|(
operator|new
name|CSVField
argument_list|(
literal|"field1"
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|addField
argument_list|(
operator|new
name|CSVField
argument_list|(
literal|"field2"
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|writer
operator|.
name|setWriter
argument_list|(
name|sw
argument_list|)
expr_stmt|;
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"field1"
argument_list|,
literal|"12345"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"field2"
argument_list|,
literal|"1234"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeRecord
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"12345,1234\n"
argument_list|,
name|sw
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
