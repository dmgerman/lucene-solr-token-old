begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.internal.csv
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|internal
operator|.
name|csv
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_comment
comment|/**  * CSVUtilsTest  */
end_comment
begin_class
DECL|class|CSVUtilsTest
specifier|public
class|class
name|CSVUtilsTest
extends|extends
name|TestCase
block|{
comment|// ======================================================
comment|//   static parser tests
comment|// ======================================================
DECL|method|testParse1
specifier|public
name|void
name|testParse1
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
index|[]
name|data
init|=
name|CSVUtils
operator|.
name|parse
argument_list|(
literal|"abc\ndef"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|data
index|[
literal|0
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|data
index|[
literal|1
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|data
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"def"
argument_list|,
name|data
index|[
literal|1
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testParse2
specifier|public
name|void
name|testParse2
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
index|[]
name|data
init|=
name|CSVUtils
operator|.
name|parse
argument_list|(
literal|"abc,def,\"ghi,jkl\"\ndef"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|data
index|[
literal|0
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|data
index|[
literal|1
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|data
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"def"
argument_list|,
name|data
index|[
literal|0
index|]
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ghi,jkl"
argument_list|,
name|data
index|[
literal|0
index|]
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"def"
argument_list|,
name|data
index|[
literal|1
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testParse3
specifier|public
name|void
name|testParse3
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
index|[]
name|data
init|=
name|CSVUtils
operator|.
name|parse
argument_list|(
literal|"abc,\"def\nghi\"\njkl"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|data
index|[
literal|0
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|data
index|[
literal|1
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|data
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"def\nghi"
argument_list|,
name|data
index|[
literal|0
index|]
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jkl"
argument_list|,
name|data
index|[
literal|1
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testParse4
specifier|public
name|void
name|testParse4
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
index|[]
name|data
init|=
name|CSVUtils
operator|.
name|parse
argument_list|(
literal|"abc,\"def\\\\nghi\"\njkl"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|data
index|[
literal|0
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|data
index|[
literal|1
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|data
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// an escape char in quotes only escapes a delimiter, not itself
name|assertEquals
argument_list|(
literal|"def\\\\nghi"
argument_list|,
name|data
index|[
literal|0
index|]
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jkl"
argument_list|,
name|data
index|[
literal|1
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testParse5
specifier|public
name|void
name|testParse5
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
index|[]
name|data
init|=
name|CSVUtils
operator|.
name|parse
argument_list|(
literal|"abc,def\\nghi\njkl"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|data
index|[
literal|0
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|data
index|[
literal|1
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|data
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"def\\nghi"
argument_list|,
name|data
index|[
literal|0
index|]
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jkl"
argument_list|,
name|data
index|[
literal|1
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testParse6
specifier|public
name|void
name|testParse6
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
index|[]
name|data
init|=
name|CSVUtils
operator|.
name|parse
argument_list|(
literal|""
argument_list|)
decl_stmt|;
comment|// default strategy is CSV, which ignores empty lines
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|testParse7
specifier|public
name|void
name|testParse7
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|io
init|=
literal|false
decl_stmt|;
try|try
block|{
name|CSVUtils
operator|.
name|parse
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|io
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseLine1
specifier|public
name|void
name|testParseLine1
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|data
init|=
name|CSVUtils
operator|.
name|parseLine
argument_list|(
literal|"abc,def,ghi"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"def"
argument_list|,
name|data
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ghi"
argument_list|,
name|data
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseLine2
specifier|public
name|void
name|testParseLine2
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|data
init|=
name|CSVUtils
operator|.
name|parseLine
argument_list|(
literal|"abc,def,ghi\n"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"def"
argument_list|,
name|data
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ghi"
argument_list|,
name|data
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseLine3
specifier|public
name|void
name|testParseLine3
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|data
init|=
name|CSVUtils
operator|.
name|parseLine
argument_list|(
literal|"abc,\"def,ghi\""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"def,ghi"
argument_list|,
name|data
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseLine4
specifier|public
name|void
name|testParseLine4
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|data
init|=
name|CSVUtils
operator|.
name|parseLine
argument_list|(
literal|"abc,\"def\nghi\""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"def\nghi"
argument_list|,
name|data
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseLine5
specifier|public
name|void
name|testParseLine5
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|data
init|=
name|CSVUtils
operator|.
name|parseLine
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// assertEquals("", data[0]);
block|}
DECL|method|testParseLine6
specifier|public
name|void
name|testParseLine6
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|io
init|=
literal|false
decl_stmt|;
try|try
block|{
name|CSVUtils
operator|.
name|parseLine
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|io
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseLine7
specifier|public
name|void
name|testParseLine7
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|res
init|=
name|CSVUtils
operator|.
name|parseLine
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|res
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
