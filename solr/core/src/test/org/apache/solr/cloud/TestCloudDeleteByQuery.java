begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|SolrCloudTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|UpdateResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_class
DECL|class|TestCloudDeleteByQuery
specifier|public
class|class
name|TestCloudDeleteByQuery
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|NUM_SHARDS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_SHARDS
init|=
literal|2
decl_stmt|;
DECL|field|REPLICATION_FACTOR
specifier|private
specifier|static
specifier|final
name|int
name|REPLICATION_FACTOR
init|=
literal|2
decl_stmt|;
DECL|field|NUM_SERVERS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_SERVERS
init|=
literal|5
decl_stmt|;
DECL|field|COLLECTION_NAME
specifier|private
specifier|static
specifier|final
name|String
name|COLLECTION_NAME
init|=
literal|"test_col"
decl_stmt|;
comment|/** A basic client for operations at the cloud level, default collection will be set */
DECL|field|CLOUD_CLIENT
specifier|private
specifier|static
name|CloudSolrClient
name|CLOUD_CLIENT
decl_stmt|;
comment|/** A client for talking directly to the leader of shard1 */
DECL|field|S_ONE_LEADER_CLIENT
specifier|private
specifier|static
name|HttpSolrClient
name|S_ONE_LEADER_CLIENT
decl_stmt|;
comment|/** A client for talking directly to the leader of shard2 */
DECL|field|S_TWO_LEADER_CLIENT
specifier|private
specifier|static
name|HttpSolrClient
name|S_TWO_LEADER_CLIENT
decl_stmt|;
comment|/** A client for talking directly to a passive replica of shard1 */
DECL|field|S_ONE_NON_LEADER_CLIENT
specifier|private
specifier|static
name|HttpSolrClient
name|S_ONE_NON_LEADER_CLIENT
decl_stmt|;
comment|/** A client for talking directly to a passive replica of shard2 */
DECL|field|S_TWO_NON_LEADER_CLIENT
specifier|private
specifier|static
name|HttpSolrClient
name|S_TWO_NON_LEADER_CLIENT
decl_stmt|;
comment|/** A client for talking directly to a node that has no piece of the collection */
DECL|field|NO_COLLECTION_CLIENT
specifier|private
specifier|static
name|HttpSolrClient
name|NO_COLLECTION_CLIENT
decl_stmt|;
comment|/** id field doc routing prefix for shard1 */
DECL|field|S_ONE_PRE
specifier|private
specifier|static
specifier|final
name|String
name|S_ONE_PRE
init|=
literal|"abc!"
decl_stmt|;
comment|/** id field doc routing prefix for shard2 */
DECL|field|S_TWO_PRE
specifier|private
specifier|static
specifier|final
name|String
name|S_TWO_PRE
init|=
literal|"XYZ!"
decl_stmt|;
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|private
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|CLOUD_CLIENT
operator|.
name|close
argument_list|()
expr_stmt|;
name|CLOUD_CLIENT
operator|=
literal|null
expr_stmt|;
name|S_ONE_LEADER_CLIENT
operator|.
name|close
argument_list|()
expr_stmt|;
name|S_ONE_LEADER_CLIENT
operator|=
literal|null
expr_stmt|;
name|S_TWO_LEADER_CLIENT
operator|.
name|close
argument_list|()
expr_stmt|;
name|S_TWO_LEADER_CLIENT
operator|=
literal|null
expr_stmt|;
name|S_ONE_NON_LEADER_CLIENT
operator|.
name|close
argument_list|()
expr_stmt|;
name|S_ONE_NON_LEADER_CLIENT
operator|=
literal|null
expr_stmt|;
name|S_TWO_NON_LEADER_CLIENT
operator|.
name|close
argument_list|()
expr_stmt|;
name|S_TWO_NON_LEADER_CLIENT
operator|=
literal|null
expr_stmt|;
name|NO_COLLECTION_CLIENT
operator|.
name|close
argument_list|()
expr_stmt|;
name|NO_COLLECTION_CLIENT
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|createMiniSolrCloudCluster
specifier|private
specifier|static
name|void
name|createMiniSolrCloudCluster
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|configName
init|=
literal|"solrCloudCollectionConfig"
decl_stmt|;
specifier|final
name|Path
name|configDir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|TEST_HOME
argument_list|()
argument_list|,
literal|"collection1"
argument_list|,
literal|"conf"
argument_list|)
decl_stmt|;
name|configureCluster
argument_list|(
name|NUM_SERVERS
argument_list|)
operator|.
name|addConfig
argument_list|(
name|configName
argument_list|,
name|configDir
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|collectionProperties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|collectionProperties
operator|.
name|put
argument_list|(
literal|"config"
argument_list|,
literal|"solrconfig-tlog.xml"
argument_list|)
expr_stmt|;
name|collectionProperties
operator|.
name|put
argument_list|(
literal|"schema"
argument_list|,
literal|"schema15.xml"
argument_list|)
expr_stmt|;
comment|// string id for doc routing prefix
name|assertNotNull
argument_list|(
name|cluster
operator|.
name|createCollection
argument_list|(
name|COLLECTION_NAME
argument_list|,
name|NUM_SHARDS
argument_list|,
name|REPLICATION_FACTOR
argument_list|,
name|configName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|collectionProperties
argument_list|)
argument_list|)
expr_stmt|;
name|CLOUD_CLIENT
operator|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
expr_stmt|;
name|CLOUD_CLIENT
operator|.
name|setDefaultCollection
argument_list|(
name|COLLECTION_NAME
argument_list|)
expr_stmt|;
name|ZkStateReader
name|zkStateReader
init|=
name|CLOUD_CLIENT
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|COLLECTION_NAME
argument_list|,
name|zkStateReader
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|330
argument_list|)
expr_stmt|;
comment|// really hackish way to get a URL for specific nodes based on shard/replica hosting
comment|// inspired by TestMiniSolrCloudCluster
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|urlMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
control|)
block|{
name|URL
name|jettyURL
init|=
name|jetty
operator|.
name|getBaseUrl
argument_list|()
decl_stmt|;
name|String
name|nodeKey
init|=
name|jettyURL
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|jettyURL
operator|.
name|getPort
argument_list|()
operator|+
name|jettyURL
operator|.
name|getPath
argument_list|()
operator|.
name|replace
argument_list|(
literal|"/"
argument_list|,
literal|"_"
argument_list|)
decl_stmt|;
name|urlMap
operator|.
name|put
argument_list|(
name|nodeKey
argument_list|,
name|jettyURL
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ClusterState
name|clusterState
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
for|for
control|(
name|Slice
name|slice
range|:
name|clusterState
operator|.
name|getSlices
argument_list|(
name|COLLECTION_NAME
argument_list|)
control|)
block|{
name|String
name|shardName
init|=
name|slice
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Replica
name|leader
init|=
name|slice
operator|.
name|getLeader
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"slice has null leader: "
operator|+
name|slice
operator|.
name|toString
argument_list|()
argument_list|,
name|leader
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"slice leader has null node name: "
operator|+
name|slice
operator|.
name|toString
argument_list|()
argument_list|,
name|leader
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|leaderUrl
init|=
name|urlMap
operator|.
name|remove
argument_list|(
name|leader
operator|.
name|getNodeName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"could not find URL for "
operator|+
name|shardName
operator|+
literal|" leader: "
operator|+
name|leader
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|leaderUrl
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected two total replicas for: "
operator|+
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
literal|2
argument_list|,
name|slice
operator|.
name|getReplicas
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|passiveUrl
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Replica
name|replica
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|replica
operator|.
name|equals
argument_list|(
name|leader
argument_list|)
condition|)
block|{
name|passiveUrl
operator|=
name|urlMap
operator|.
name|remove
argument_list|(
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"could not find URL for "
operator|+
name|shardName
operator|+
literal|" replica: "
operator|+
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|passiveUrl
argument_list|)
expr_stmt|;
block|}
block|}
name|assertNotNull
argument_list|(
literal|"could not find URL for "
operator|+
name|shardName
operator|+
literal|" replica"
argument_list|,
name|passiveUrl
argument_list|)
expr_stmt|;
if|if
condition|(
name|shardName
operator|.
name|equals
argument_list|(
literal|"shard1"
argument_list|)
condition|)
block|{
name|S_ONE_LEADER_CLIENT
operator|=
name|getHttpSolrClient
argument_list|(
name|leaderUrl
operator|+
literal|"/"
operator|+
name|COLLECTION_NAME
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|S_ONE_NON_LEADER_CLIENT
operator|=
name|getHttpSolrClient
argument_list|(
name|passiveUrl
operator|+
literal|"/"
operator|+
name|COLLECTION_NAME
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|shardName
operator|.
name|equals
argument_list|(
literal|"shard2"
argument_list|)
condition|)
block|{
name|S_TWO_LEADER_CLIENT
operator|=
name|getHttpSolrClient
argument_list|(
name|leaderUrl
operator|+
literal|"/"
operator|+
name|COLLECTION_NAME
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|S_TWO_NON_LEADER_CLIENT
operator|=
name|getHttpSolrClient
argument_list|(
name|passiveUrl
operator|+
literal|"/"
operator|+
name|COLLECTION_NAME
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"unexpected shard: "
operator|+
name|shardName
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"Should be exactly one server left (nost hosting either shard)"
argument_list|,
literal|1
argument_list|,
name|urlMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|NO_COLLECTION_CLIENT
operator|=
name|getHttpSolrClient
argument_list|(
name|urlMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|+
literal|"/"
operator|+
name|COLLECTION_NAME
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|S_ONE_LEADER_CLIENT
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|S_TWO_LEADER_CLIENT
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|S_ONE_NON_LEADER_CLIENT
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|S_TWO_NON_LEADER_CLIENT
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|NO_COLLECTION_CLIENT
argument_list|)
expr_stmt|;
comment|// sanity check that our S_ONE_PRE& S_TWO_PRE really do map to shard1& shard2 with default routing
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|CLOUD_CLIENT
operator|.
name|add
argument_list|(
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"expected_shard_s"
argument_list|,
literal|"shard1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|CLOUD_CLIENT
operator|.
name|add
argument_list|(
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"expected_shard_s"
argument_list|,
literal|"shard2"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|CLOUD_CLIENT
operator|.
name|commit
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|SolrDocumentList
name|docs
init|=
name|CLOUD_CLIENT
operator|.
name|query
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,expected_shard_s,[shard]"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrDocument
name|doc
range|:
name|docs
control|)
block|{
name|String
name|expected
init|=
name|COLLECTION_NAME
operator|+
literal|"_"
operator|+
name|doc
operator|.
name|getFirstValue
argument_list|(
literal|"expected_shard_s"
argument_list|)
operator|+
literal|"_replica"
decl_stmt|;
name|String
name|docShard
init|=
name|doc
operator|.
name|getFirstValue
argument_list|(
literal|"[shard]"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"shard routing prefixes don't seem to be aligned anymore, "
operator|+
literal|"did someone change the default routing rules? "
operator|+
literal|"and/or the the default core name rules? "
operator|+
literal|"and/or the numShards used by this test? ... "
operator|+
literal|"couldn't find "
operator|+
name|expected
operator|+
literal|" as substring of [shard] == '"
operator|+
name|docShard
operator|+
literal|"' ... for docId == "
operator|+
name|doc
operator|.
name|getFirstValue
argument_list|(
literal|"id"
argument_list|)
argument_list|,
name|docShard
operator|.
name|contains
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|clearCloudCollection
specifier|private
name|void
name|clearCloudCollection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|CLOUD_CLIENT
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|CLOUD_CLIENT
operator|.
name|commit
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMalformedDBQ
specifier|public
name|void
name|testMalformedDBQ
parameter_list|(
name|SolrClient
name|client
parameter_list|)
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
literal|"client not initialized"
argument_list|,
name|client
argument_list|)
expr_stmt|;
try|try
block|{
name|UpdateResponse
name|rsp
init|=
name|update
argument_list|(
name|params
argument_list|()
argument_list|)
operator|.
name|deleteByQuery
argument_list|(
literal|"foo_i:not_a_num"
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected DBQ failure: "
operator|+
name|rsp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"not the expected DBQ failure: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|400
argument_list|,
name|e
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//
DECL|method|testMalformedDBQViaCloudClient
specifier|public
name|void
name|testMalformedDBQViaCloudClient
parameter_list|()
throws|throws
name|Exception
block|{
name|testMalformedDBQ
argument_list|(
name|CLOUD_CLIENT
argument_list|)
expr_stmt|;
block|}
DECL|method|testMalformedDBQViaShard1LeaderClient
specifier|public
name|void
name|testMalformedDBQViaShard1LeaderClient
parameter_list|()
throws|throws
name|Exception
block|{
name|testMalformedDBQ
argument_list|(
name|S_ONE_LEADER_CLIENT
argument_list|)
expr_stmt|;
block|}
DECL|method|testMalformedDBQViaShard2LeaderClient
specifier|public
name|void
name|testMalformedDBQViaShard2LeaderClient
parameter_list|()
throws|throws
name|Exception
block|{
name|testMalformedDBQ
argument_list|(
name|S_TWO_LEADER_CLIENT
argument_list|)
expr_stmt|;
block|}
DECL|method|testMalformedDBQViaShard1NonLeaderClient
specifier|public
name|void
name|testMalformedDBQViaShard1NonLeaderClient
parameter_list|()
throws|throws
name|Exception
block|{
name|testMalformedDBQ
argument_list|(
name|S_ONE_NON_LEADER_CLIENT
argument_list|)
expr_stmt|;
block|}
DECL|method|testMalformedDBQViaShard2NonLeaderClient
specifier|public
name|void
name|testMalformedDBQViaShard2NonLeaderClient
parameter_list|()
throws|throws
name|Exception
block|{
name|testMalformedDBQ
argument_list|(
name|S_TWO_NON_LEADER_CLIENT
argument_list|)
expr_stmt|;
block|}
DECL|method|testMalformedDBQViaNoCollectionClient
specifier|public
name|void
name|testMalformedDBQViaNoCollectionClient
parameter_list|()
throws|throws
name|Exception
block|{
name|testMalformedDBQ
argument_list|(
name|NO_COLLECTION_CLIENT
argument_list|)
expr_stmt|;
block|}
DECL|method|update
specifier|public
specifier|static
name|UpdateRequest
name|update
parameter_list|(
name|SolrParams
name|params
parameter_list|,
name|SolrInputDocument
modifier|...
name|docs
parameter_list|)
block|{
name|UpdateRequest
name|r
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|r
operator|.
name|setParams
argument_list|(
operator|new
name|ModifiableSolrParams
argument_list|(
name|params
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|add
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|docs
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
DECL|method|doc
specifier|public
specifier|static
name|SolrInputDocument
name|doc
parameter_list|(
name|SolrInputField
modifier|...
name|fields
parameter_list|)
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
for|for
control|(
name|SolrInputField
name|f
range|:
name|fields
control|)
block|{
name|doc
operator|.
name|put
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
DECL|method|f
specifier|public
specifier|static
name|SolrInputField
name|f
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Object
modifier|...
name|values
parameter_list|)
block|{
name|SolrInputField
name|f
init|=
operator|new
name|SolrInputField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|f
operator|.
name|setValue
argument_list|(
name|values
argument_list|,
literal|1.0F
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
block|}
end_class
end_unit
