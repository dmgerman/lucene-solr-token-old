begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|BadApple
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
operator|.
name|SuppressSSL
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|ConcurrentUpdateSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|VersionInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
operator|.
name|DistributedUpdateProcessor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_comment
comment|/**  * Super basic testing, no shard restarting or anything.  */
end_comment
begin_class
annotation|@
name|Slow
annotation|@
name|SuppressSSL
argument_list|(
name|bugUrl
operator|=
literal|"https://issues.apache.org/jira/browse/SOLR-5776"
argument_list|)
DECL|class|FullSolrCloudDistribCmdsTest
specifier|public
class|class
name|FullSolrCloudDistribCmdsTest
extends|extends
name|AbstractFullDistribZkTestBase
block|{
annotation|@
name|BeforeClass
DECL|method|beforeSuperClass
specifier|public
specifier|static
name|void
name|beforeSuperClass
parameter_list|()
block|{
name|schemaString
operator|=
literal|"schema15.xml"
expr_stmt|;
comment|// we need a string id
block|}
DECL|method|FullSolrCloudDistribCmdsTest
specifier|public
name|FullSolrCloudDistribCmdsTest
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|fixShardCount
operator|=
literal|true
expr_stmt|;
name|shardCount
operator|=
literal|6
expr_stmt|;
name|sliceCount
operator|=
literal|3
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doTest
specifier|public
name|void
name|doTest
parameter_list|()
throws|throws
name|Exception
block|{
name|handle
operator|.
name|clear
argument_list|()
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"QTime"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"timestamp"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|waitForRecoveriesToFinish
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// add a doc, update it, and delete it
name|QueryResponse
name|results
decl_stmt|;
name|UpdateRequest
name|uReq
decl_stmt|;
name|long
name|docId
init|=
name|addUpdateDelete
argument_list|()
decl_stmt|;
comment|// add 2 docs in a request
name|SolrInputDocument
name|doc1
decl_stmt|;
name|SolrInputDocument
name|doc2
decl_stmt|;
name|docId
operator|=
name|addTwoDocsInOneRequest
argument_list|(
name|docId
argument_list|)
expr_stmt|;
comment|// two deletes
name|uReq
operator|=
operator|new
name|UpdateRequest
argument_list|()
expr_stmt|;
name|uReq
operator|.
name|deleteById
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|docId
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|uReq
operator|.
name|deleteById
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|docId
operator|-
literal|2
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|controlClient
operator|.
name|deleteById
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|docId
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|controlClient
operator|.
name|deleteById
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|docId
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|results
operator|=
name|query
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|query
argument_list|(
name|controlClient
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// add two docs together, a 3rd doc and a delete
name|indexr
argument_list|(
literal|"id"
argument_list|,
name|docId
operator|++
argument_list|,
name|t1
argument_list|,
literal|"originalcontent"
argument_list|)
expr_stmt|;
name|uReq
operator|=
operator|new
name|UpdateRequest
argument_list|()
expr_stmt|;
name|doc1
operator|=
operator|new
name|SolrInputDocument
argument_list|()
expr_stmt|;
name|addFields
argument_list|(
name|doc1
argument_list|,
literal|"id"
argument_list|,
name|docId
operator|++
argument_list|)
expr_stmt|;
name|uReq
operator|.
name|add
argument_list|(
name|doc1
argument_list|)
expr_stmt|;
name|doc2
operator|=
operator|new
name|SolrInputDocument
argument_list|()
expr_stmt|;
name|addFields
argument_list|(
name|doc2
argument_list|,
literal|"id"
argument_list|,
name|docId
operator|++
argument_list|)
expr_stmt|;
name|uReq
operator|.
name|add
argument_list|(
name|doc2
argument_list|)
expr_stmt|;
name|uReq
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|uReq
operator|.
name|process
argument_list|(
name|controlClient
argument_list|)
expr_stmt|;
name|uReq
operator|=
operator|new
name|UpdateRequest
argument_list|()
expr_stmt|;
name|uReq
operator|.
name|deleteById
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|docId
operator|-
literal|2
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|controlClient
operator|.
name|deleteById
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|docId
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|assertDocCounts
argument_list|(
name|VERBOSE
argument_list|)
expr_stmt|;
name|checkShardConsistency
argument_list|()
expr_stmt|;
name|results
operator|=
name|query
argument_list|(
name|controlClient
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|query
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|docId
operator|=
name|testIndexQueryDeleteHierarchical
argument_list|(
name|docId
argument_list|)
expr_stmt|;
name|docId
operator|=
name|testIndexingDocPerRequestWithHttpSolrServer
argument_list|(
name|docId
argument_list|)
expr_stmt|;
name|testIndexingWithSuss
argument_list|(
name|docId
argument_list|)
expr_stmt|;
comment|// TODO: testOptimisticUpdate(results);
name|testDeleteByQueryDistrib
argument_list|()
expr_stmt|;
name|docId
operator|=
name|testThatCantForwardToLeaderFails
argument_list|(
name|docId
argument_list|)
expr_stmt|;
name|docId
operator|=
name|testIndexingBatchPerRequestWithHttpSolrServer
argument_list|(
name|docId
argument_list|)
expr_stmt|;
block|}
DECL|method|testThatCantForwardToLeaderFails
specifier|private
name|long
name|testThatCantForwardToLeaderFails
parameter_list|(
name|long
name|docId
parameter_list|)
throws|throws
name|Exception
block|{
name|ZkStateReader
name|zkStateReader
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|ZkNodeProps
name|props
init|=
name|zkStateReader
operator|.
name|getLeaderRetry
argument_list|(
name|DEFAULT_COLLECTION
argument_list|,
literal|"shard1"
argument_list|)
decl_stmt|;
name|chaosMonkey
operator|.
name|stopShard
argument_list|(
literal|"shard1"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// fake that the leader is still advertised
name|String
name|leaderPath
init|=
name|ZkStateReader
operator|.
name|getShardLeadersPath
argument_list|(
name|DEFAULT_COLLECTION
argument_list|,
literal|"shard1"
argument_list|)
decl_stmt|;
name|SolrZkClient
name|zkClient
init|=
operator|new
name|SolrZkClient
argument_list|(
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|int
name|fails
init|=
literal|0
decl_stmt|;
try|try
block|{
name|zkClient
operator|.
name|makePath
argument_list|(
name|leaderPath
argument_list|,
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|props
argument_list|)
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|200
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|index_specific
argument_list|(
name|shardToJetty
operator|.
name|get
argument_list|(
literal|"shard2"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|client
operator|.
name|solrClient
argument_list|,
name|id
argument_list|,
name|docId
operator|++
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
comment|// expected
name|fails
operator|++
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
comment|// expected
name|fails
operator|++
expr_stmt|;
break|break;
block|}
block|}
block|}
finally|finally
block|{
name|zkClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"A whole shard is down - some of these should fail"
argument_list|,
name|fails
operator|>
literal|0
argument_list|)
expr_stmt|;
return|return
name|docId
return|;
block|}
DECL|method|addTwoDocsInOneRequest
specifier|private
name|long
name|addTwoDocsInOneRequest
parameter_list|(
name|long
name|docId
parameter_list|)
throws|throws
name|Exception
block|{
name|QueryResponse
name|results
decl_stmt|;
name|UpdateRequest
name|uReq
decl_stmt|;
name|uReq
operator|=
operator|new
name|UpdateRequest
argument_list|()
expr_stmt|;
name|docId
operator|=
name|addDoc
argument_list|(
name|docId
argument_list|,
name|uReq
argument_list|)
expr_stmt|;
name|docId
operator|=
name|addDoc
argument_list|(
name|docId
argument_list|,
name|uReq
argument_list|)
expr_stmt|;
name|uReq
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|uReq
operator|.
name|process
argument_list|(
name|controlClient
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|checkShardConsistency
argument_list|()
expr_stmt|;
name|assertDocCounts
argument_list|(
name|VERBOSE
argument_list|)
expr_stmt|;
name|results
operator|=
name|query
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|docId
return|;
block|}
DECL|method|addUpdateDelete
specifier|private
name|long
name|addUpdateDelete
parameter_list|()
throws|throws
name|Exception
throws|,
name|IOException
block|{
name|long
name|docId
init|=
literal|99999999L
decl_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
name|docId
argument_list|,
name|t1
argument_list|,
literal|"originalcontent"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
name|t1
operator|+
literal|":originalcontent"
argument_list|)
expr_stmt|;
name|QueryResponse
name|results
init|=
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// update doc
name|indexr
argument_list|(
literal|"id"
argument_list|,
name|docId
argument_list|,
name|t1
argument_list|,
literal|"updatedcontent"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|assertDocCounts
argument_list|(
name|VERBOSE
argument_list|)
expr_stmt|;
name|results
operator|=
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|query
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
name|t1
operator|+
literal|":updatedcontent"
argument_list|)
expr_stmt|;
name|results
operator|=
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|query
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|UpdateRequest
name|uReq
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
comment|//uReq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);
name|uReq
operator|.
name|deleteById
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|docId
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|results
operator|=
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|query
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|docId
return|;
block|}
DECL|method|testDeleteByQueryDistrib
specifier|private
name|void
name|testDeleteByQueryDistrib
parameter_list|()
throws|throws
name|Exception
block|{
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|query
argument_list|(
name|cloudClient
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexQueryDeleteHierarchical
specifier|private
name|long
name|testIndexQueryDeleteHierarchical
parameter_list|(
name|long
name|docId
parameter_list|)
throws|throws
name|Exception
block|{
comment|//index
name|int
name|topDocsNum
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|int
name|childsNum
init|=
literal|5
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|topDocsNum
condition|;
operator|++
name|i
control|)
block|{
name|UpdateRequest
name|uReq
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|SolrInputDocument
name|topDocument
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|topDocument
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
name|docId
operator|++
argument_list|)
expr_stmt|;
name|topDocument
operator|.
name|addField
argument_list|(
literal|"type_s"
argument_list|,
literal|"parent"
argument_list|)
expr_stmt|;
name|topDocument
operator|.
name|addField
argument_list|(
name|i
operator|+
literal|"parent_f1_s"
argument_list|,
literal|"v1"
argument_list|)
expr_stmt|;
name|topDocument
operator|.
name|addField
argument_list|(
name|i
operator|+
literal|"parent_f2_s"
argument_list|,
literal|"v2"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|childsNum
condition|;
operator|++
name|index
control|)
block|{
name|docId
operator|=
name|addChildren
argument_list|(
literal|"child"
argument_list|,
name|topDocument
argument_list|,
name|index
argument_list|,
literal|false
argument_list|,
name|docId
argument_list|)
expr_stmt|;
block|}
name|uReq
operator|.
name|add
argument_list|(
name|topDocument
argument_list|)
expr_stmt|;
name|uReq
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|uReq
operator|.
name|process
argument_list|(
name|controlClient
argument_list|)
expr_stmt|;
block|}
name|commit
argument_list|()
expr_stmt|;
name|checkShardConsistency
argument_list|()
expr_stmt|;
name|assertDocCounts
argument_list|(
name|VERBOSE
argument_list|)
expr_stmt|;
comment|//query
comment|// parents
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"type_s:parent"
argument_list|)
decl_stmt|;
name|QueryResponse
name|results
init|=
name|cloudClient
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|topDocsNum
argument_list|,
name|results
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|//childs
name|query
operator|=
operator|new
name|SolrQuery
argument_list|(
literal|"type_s:child"
argument_list|)
expr_stmt|;
name|results
operator|=
name|cloudClient
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|topDocsNum
operator|*
name|childsNum
argument_list|,
name|results
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|//grandchilds
name|query
operator|=
operator|new
name|SolrQuery
argument_list|(
literal|"type_s:grand"
argument_list|)
expr_stmt|;
name|results
operator|=
name|cloudClient
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
comment|//each topDoc has t childs where each child has x = 0 + 2 + 4 + ..(t-1)*2 grands
comment|//x = 2 * (1 + 2 + 3 +.. (t-1)) => arithmetic summ of t-1
comment|//x = 2 * ((t-1) * t / 2) = t * (t - 1)
name|assertEquals
argument_list|(
name|topDocsNum
operator|*
name|childsNum
operator|*
operator|(
name|childsNum
operator|-
literal|1
operator|)
argument_list|,
name|results
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|//delete
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
return|return
name|docId
return|;
block|}
DECL|method|addChildren
specifier|private
name|long
name|addChildren
parameter_list|(
name|String
name|prefix
parameter_list|,
name|SolrInputDocument
name|topDocument
parameter_list|,
name|int
name|childIndex
parameter_list|,
name|boolean
name|lastLevel
parameter_list|,
name|long
name|docId
parameter_list|)
block|{
name|SolrInputDocument
name|childDocument
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|childDocument
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
name|docId
operator|++
argument_list|)
expr_stmt|;
name|childDocument
operator|.
name|addField
argument_list|(
literal|"type_s"
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|childIndex
condition|;
operator|++
name|index
control|)
block|{
name|childDocument
operator|.
name|addField
argument_list|(
name|childIndex
operator|+
name|prefix
operator|+
name|index
operator|+
literal|"_s"
argument_list|,
name|childIndex
operator|+
literal|"value"
operator|+
name|index
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|lastLevel
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childIndex
operator|*
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|docId
operator|=
name|addChildren
argument_list|(
literal|"grand"
argument_list|,
name|childDocument
argument_list|,
name|i
argument_list|,
literal|true
argument_list|,
name|docId
argument_list|)
expr_stmt|;
block|}
block|}
name|topDocument
operator|.
name|addChildDocument
argument_list|(
name|childDocument
argument_list|)
expr_stmt|;
return|return
name|docId
return|;
block|}
DECL|method|testIndexingDocPerRequestWithHttpSolrServer
specifier|private
name|long
name|testIndexingDocPerRequestWithHttpSolrServer
parameter_list|(
name|long
name|docId
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|docs
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|TEST_NIGHTLY
condition|?
literal|4013
else|:
literal|97
argument_list|)
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
condition|;
name|i
operator|++
control|)
block|{
name|UpdateRequest
name|uReq
decl_stmt|;
name|uReq
operator|=
operator|new
name|UpdateRequest
argument_list|()
expr_stmt|;
name|docId
operator|=
name|addDoc
argument_list|(
name|docId
argument_list|,
name|uReq
argument_list|)
expr_stmt|;
name|uReq
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|uReq
operator|.
name|process
argument_list|(
name|controlClient
argument_list|)
expr_stmt|;
block|}
name|commit
argument_list|()
expr_stmt|;
name|checkShardConsistency
argument_list|()
expr_stmt|;
name|assertDocCounts
argument_list|(
name|VERBOSE
argument_list|)
expr_stmt|;
return|return
name|docId
operator|++
return|;
block|}
DECL|method|testIndexingBatchPerRequestWithHttpSolrServer
specifier|private
name|long
name|testIndexingBatchPerRequestWithHttpSolrServer
parameter_list|(
name|long
name|docId
parameter_list|)
throws|throws
name|Exception
block|{
comment|// remove collection
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|DELETE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
literal|"collection1"
argument_list|)
expr_stmt|;
name|QueryRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|request
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|controlClient
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|controlClient
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// somtimes we use an oversharded collection
name|createCollection
argument_list|(
literal|null
argument_list|,
literal|"collection2"
argument_list|,
literal|7
argument_list|,
literal|3
argument_list|,
literal|100000
argument_list|,
name|cloudClient
argument_list|,
literal|null
argument_list|,
literal|"conf1"
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|setDefaultCollection
argument_list|(
literal|"collection2"
argument_list|)
expr_stmt|;
name|waitForRecoveriesToFinish
argument_list|(
literal|"collection2"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
class|class
name|IndexThread
extends|extends
name|Thread
block|{
name|Integer
name|name
decl_stmt|;
specifier|public
name|IndexThread
parameter_list|(
name|Integer
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|int
name|rnds
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|TEST_NIGHTLY
condition|?
literal|25
else|:
literal|3
argument_list|)
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rnds
condition|;
name|i
operator|++
control|)
block|{
name|UpdateRequest
name|uReq
decl_stmt|;
name|uReq
operator|=
operator|new
name|UpdateRequest
argument_list|()
expr_stmt|;
name|int
name|cnt
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|TEST_NIGHTLY
condition|?
literal|3313
else|:
literal|350
argument_list|)
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cnt
condition|;
name|j
operator|++
control|)
block|{
name|addDoc
argument_list|(
literal|"thread"
operator|+
name|name
operator|+
literal|"_"
operator|+
name|i
operator|+
literal|"_"
operator|+
name|j
argument_list|,
name|uReq
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|uReq
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|uReq
operator|.
name|process
argument_list|(
name|controlClient
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
empty_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|nthreads
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|TEST_NIGHTLY
condition|?
literal|4
else|:
literal|2
argument_list|)
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nthreads
condition|;
name|i
operator|++
control|)
block|{
name|IndexThread
name|thread
init|=
operator|new
name|IndexThread
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|commit
argument_list|()
expr_stmt|;
name|waitForRecoveriesToFinish
argument_list|(
literal|"collection2"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|printLayout
argument_list|()
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|long
name|controlCount
init|=
name|controlClient
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|long
name|cloudCount
init|=
name|cloudClient
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|compareResults
argument_list|(
name|controlCount
argument_list|,
name|cloudCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Control does not match cloud"
argument_list|,
name|controlCount
argument_list|,
name|cloudCount
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DOCS:"
operator|+
name|controlCount
argument_list|)
expr_stmt|;
return|return
name|docId
return|;
block|}
DECL|method|addDoc
specifier|private
name|long
name|addDoc
parameter_list|(
name|long
name|docId
parameter_list|,
name|UpdateRequest
name|uReq
parameter_list|)
block|{
name|addDoc
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|docId
operator|++
argument_list|)
argument_list|,
name|uReq
argument_list|)
expr_stmt|;
return|return
name|docId
return|;
block|}
DECL|method|addDoc
specifier|private
name|long
name|addDoc
parameter_list|(
name|String
name|docId
parameter_list|,
name|UpdateRequest
name|uReq
parameter_list|)
block|{
name|SolrInputDocument
name|doc1
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|uReq
operator|.
name|add
argument_list|(
name|doc1
argument_list|)
expr_stmt|;
name|addFields
argument_list|(
name|doc1
argument_list|,
literal|"id"
argument_list|,
name|docId
argument_list|,
literal|"text_t"
argument_list|,
literal|"some text so that it not's negligent work to parse this doc, even though it's still a pretty short doc"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
DECL|method|testIndexingWithSuss
specifier|private
name|long
name|testIndexingWithSuss
parameter_list|(
name|long
name|docId
parameter_list|)
throws|throws
name|Exception
block|{
name|ConcurrentUpdateSolrServer
name|suss
init|=
operator|new
name|ConcurrentUpdateSolrServer
argument_list|(
operator|(
operator|(
name|HttpSolrServer
operator|)
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getBaseURL
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|QueryResponse
name|results
init|=
name|query
argument_list|(
name|cloudClient
argument_list|)
decl_stmt|;
name|long
name|beforeCount
init|=
name|results
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
name|TEST_NIGHTLY
condition|?
literal|2933
else|:
literal|313
decl_stmt|;
try|try
block|{
name|suss
operator|.
name|setConnectionTimeout
argument_list|(
literal|120000
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|index_specific
argument_list|(
name|suss
argument_list|,
name|id
argument_list|,
name|docId
operator|++
argument_list|,
literal|"text_t"
argument_list|,
literal|"some text so that it not's negligent work to parse this doc, even though it's still a pretty short doc"
argument_list|)
expr_stmt|;
block|}
name|suss
operator|.
name|blockUntilFinished
argument_list|()
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|checkShardConsistency
argument_list|()
expr_stmt|;
name|assertDocCounts
argument_list|(
name|VERBOSE
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|suss
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|results
operator|=
name|query
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|beforeCount
operator|+
name|cnt
argument_list|,
name|results
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|docId
return|;
block|}
DECL|method|testOptimisticUpdate
specifier|private
name|void
name|testOptimisticUpdate
parameter_list|(
name|QueryResponse
name|results
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrDocument
name|doc
init|=
name|results
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Long
name|version
init|=
operator|(
name|Long
operator|)
name|doc
operator|.
name|getFieldValue
argument_list|(
name|VersionInfo
operator|.
name|VERSION_FIELD
argument_list|)
decl_stmt|;
name|Integer
name|theDoc
init|=
operator|(
name|Integer
operator|)
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|UpdateRequest
name|uReq
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|SolrInputDocument
name|doc1
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|uReq
operator|.
name|setParams
argument_list|(
operator|new
name|ModifiableSolrParams
argument_list|()
argument_list|)
expr_stmt|;
name|uReq
operator|.
name|getParams
argument_list|()
operator|.
name|set
argument_list|(
name|DistributedUpdateProcessor
operator|.
name|VERSION_FIELD
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|version
argument_list|)
argument_list|)
expr_stmt|;
name|addFields
argument_list|(
name|doc1
argument_list|,
literal|"id"
argument_list|,
name|theDoc
argument_list|,
name|t1
argument_list|,
literal|"theupdatestuff"
argument_list|)
expr_stmt|;
name|uReq
operator|.
name|add
argument_list|(
name|doc1
argument_list|)
expr_stmt|;
name|uReq
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|uReq
operator|.
name|process
argument_list|(
name|controlClient
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
comment|// updating the old version should fail...
name|SolrInputDocument
name|doc2
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|uReq
operator|=
operator|new
name|UpdateRequest
argument_list|()
expr_stmt|;
name|uReq
operator|.
name|setParams
argument_list|(
operator|new
name|ModifiableSolrParams
argument_list|()
argument_list|)
expr_stmt|;
name|uReq
operator|.
name|getParams
argument_list|()
operator|.
name|set
argument_list|(
name|DistributedUpdateProcessor
operator|.
name|VERSION_FIELD
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|version
argument_list|)
argument_list|)
expr_stmt|;
name|addFields
argument_list|(
name|doc2
argument_list|,
literal|"id"
argument_list|,
name|theDoc
argument_list|,
name|t1
argument_list|,
literal|"thenewupdatestuff"
argument_list|)
expr_stmt|;
name|uReq
operator|.
name|add
argument_list|(
name|doc2
argument_list|)
expr_stmt|;
name|uReq
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|uReq
operator|.
name|process
argument_list|(
name|controlClient
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
name|t1
operator|+
literal|":thenewupdatestuff"
argument_list|)
expr_stmt|;
name|QueryResponse
name|res
init|=
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|res
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
name|t1
operator|+
literal|":theupdatestuff"
argument_list|)
expr_stmt|;
name|res
operator|=
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|query
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|query
specifier|private
name|QueryResponse
name|query
parameter_list|(
name|SolrServer
name|server
parameter_list|)
throws|throws
name|SolrServerException
block|{
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
return|return
name|server
operator|.
name|query
argument_list|(
name|query
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
DECL|method|addRandFields
specifier|protected
name|SolrInputDocument
name|addRandFields
parameter_list|(
name|SolrInputDocument
name|sdoc
parameter_list|)
block|{
return|return
name|sdoc
return|;
block|}
block|}
end_class
end_unit
