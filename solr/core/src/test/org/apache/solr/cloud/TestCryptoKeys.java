begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|MemClassLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|TestDynamicLoading
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|TestSolrConfigHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|TestBlobHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|CryptoKeys
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RESTfulServerProvider
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RestTestHarness
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|TestSolrConfigHandlerCloud
operator|.
name|compareValues
import|;
end_import
begin_class
DECL|class|TestCryptoKeys
specifier|public
class|class
name|TestCryptoKeys
extends|extends
name|AbstractFullDistribZkTestBase
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestCryptoKeys
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|restTestHarnesses
specifier|private
name|List
argument_list|<
name|RestTestHarness
argument_list|>
name|restTestHarnesses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|setupHarnesses
specifier|private
name|void
name|setupHarnesses
parameter_list|()
block|{
for|for
control|(
specifier|final
name|SolrClient
name|client
range|:
name|clients
control|)
block|{
name|RestTestHarness
name|harness
init|=
operator|new
name|RestTestHarness
argument_list|(
operator|new
name|RESTfulServerProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getBaseURL
parameter_list|()
block|{
return|return
operator|(
operator|(
name|HttpSolrClient
operator|)
name|client
operator|)
operator|.
name|getBaseURL
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|restTestHarnesses
operator|.
name|add
argument_list|(
name|harness
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|distribTearDown
specifier|public
name|void
name|distribTearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|distribTearDown
argument_list|()
expr_stmt|;
for|for
control|(
name|RestTestHarness
name|r
range|:
name|restTestHarnesses
control|)
block|{
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|TestCryptoKeys
specifier|public
name|TestCryptoKeys
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|sliceCount
operator|=
literal|1
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"enable.runtime.lib"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|setupHarnesses
argument_list|()
expr_stmt|;
name|String
name|pk1sig
init|=
literal|"G8LEW7uJ1is81Aqqfl3Sld3qDtOxPuVFeTLJHFJWecgDvUkmJNFXmf7nkHOVlXnDWahp1vqZf0W02VHXg37lBw=="
decl_stmt|;
name|String
name|pk2sig
init|=
literal|"pCyBQycB/0YvLVZfKLDIIqG1tFwM/awqzkp2QNpO7R3ThTqmmrj11wEJFDRLkY79efuFuQPHt40EE7jrOKoj9jLNELsfEqvU3jw9sZKiDONY+rV9Bj9QPeW8Pgt+F9Y1"
decl_stmt|;
name|String
name|wrongKeySig
init|=
literal|"xTk2hTipfpb+J5s4x3YZGOXkmHWtnJz05Vvd8RTm/Q1fbQVszR7vMk6dQ1URxX08fcg4HvxOo8g9bG2TSMOGjg=="
decl_stmt|;
name|String
name|result
init|=
literal|null
decl_stmt|;
name|CryptoKeys
name|cryptoKeys
init|=
literal|null
decl_stmt|;
name|SolrZkClient
name|zk
init|=
name|getCommonCloudSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getZkClient
argument_list|()
decl_stmt|;
name|cryptoKeys
operator|=
operator|new
name|CryptoKeys
argument_list|(
name|CloudUtil
operator|.
name|getTrustedKeys
argument_list|(
name|zk
argument_list|,
literal|"exe"
argument_list|)
argument_list|)
expr_stmt|;
name|ByteBuffer
name|samplefile
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|readFile
argument_list|(
literal|"cryptokeys/samplefile.bin"
argument_list|)
argument_list|)
decl_stmt|;
comment|//there are no keys yet created in ZK
name|result
operator|=
name|cryptoKeys
operator|.
name|verify
argument_list|(
name|pk1sig
argument_list|,
name|samplefile
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|zk
operator|.
name|makePath
argument_list|(
literal|"/keys/exe"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|zk
operator|.
name|create
argument_list|(
literal|"/keys/exe/pubk1.der"
argument_list|,
name|readFile
argument_list|(
literal|"cryptokeys/pubk1.der"
argument_list|)
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|zk
operator|.
name|create
argument_list|(
literal|"/keys/exe/pubk2.der"
argument_list|,
name|readFile
argument_list|(
literal|"cryptokeys/pubk2.der"
argument_list|)
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|trustedKeys
init|=
name|CloudUtil
operator|.
name|getTrustedKeys
argument_list|(
name|zk
argument_list|,
literal|"exe"
argument_list|)
decl_stmt|;
name|cryptoKeys
operator|=
operator|new
name|CryptoKeys
argument_list|(
name|trustedKeys
argument_list|)
expr_stmt|;
name|result
operator|=
name|cryptoKeys
operator|.
name|verify
argument_list|(
name|pk2sig
argument_list|,
name|samplefile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pubk2.der"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
name|cryptoKeys
operator|.
name|verify
argument_list|(
name|pk1sig
argument_list|,
name|samplefile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pubk1.der"
argument_list|,
name|result
argument_list|)
expr_stmt|;
try|try
block|{
name|result
operator|=
name|cryptoKeys
operator|.
name|verify
argument_list|(
name|wrongKeySig
argument_list|,
name|samplefile
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//pass
block|}
try|try
block|{
name|result
operator|=
name|cryptoKeys
operator|.
name|verify
argument_list|(
literal|"SGVsbG8gV29ybGQhCg=="
argument_list|,
name|samplefile
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//pass
block|}
name|HttpSolrClient
name|randomClient
init|=
operator|(
name|HttpSolrClient
operator|)
name|clients
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|clients
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|baseURL
init|=
name|randomClient
operator|.
name|getBaseURL
argument_list|()
decl_stmt|;
name|baseURL
operator|=
name|baseURL
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|baseURL
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
name|TestBlobHandler
operator|.
name|createSystemCollection
argument_list|(
operator|new
name|HttpSolrClient
argument_list|(
name|baseURL
argument_list|,
name|randomClient
operator|.
name|getHttpClient
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|waitForRecoveriesToFinish
argument_list|(
literal|".system"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ByteBuffer
name|jar
init|=
name|TestDynamicLoading
operator|.
name|getFileContent
argument_list|(
literal|"runtimecode/runtimelibs.jar.bin"
argument_list|)
decl_stmt|;
name|String
name|blobName
init|=
literal|"signedjar"
decl_stmt|;
name|TestBlobHandler
operator|.
name|postAndCheck
argument_list|(
name|cloudClient
argument_list|,
name|baseURL
argument_list|,
name|blobName
argument_list|,
name|jar
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|String
name|payload
init|=
literal|"{\n"
operator|+
literal|"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true }"
operator|+
literal|"}"
decl_stmt|;
name|RestTestHarness
name|client
init|=
name|restTestHarnesses
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|restTestHarnesses
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TestSolrConfigHandler
operator|.
name|runConfigCommand
argument_list|(
name|client
argument_list|,
literal|"/config?wt=json"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|TestSolrConfigHandler
operator|.
name|testForResponseElement
argument_list|(
name|client
argument_list|,
literal|null
argument_list|,
literal|"/config/overlay?wt=json"
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"overlay"
argument_list|,
literal|"requestHandler"
argument_list|,
literal|"/runtime"
argument_list|,
literal|"class"
argument_list|)
argument_list|,
literal|"org.apache.solr.core.RuntimeLibReqHandler"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|payload
operator|=
literal|"{\n"
operator|+
literal|"'add-runtimelib' : { 'name' : 'signedjar' ,'version':1}\n"
operator|+
literal|"}"
expr_stmt|;
name|client
operator|=
name|restTestHarnesses
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|restTestHarnesses
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|TestSolrConfigHandler
operator|.
name|runConfigCommand
argument_list|(
name|client
argument_list|,
literal|"/config?wt=json"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|TestSolrConfigHandler
operator|.
name|testForResponseElement
argument_list|(
name|client
argument_list|,
literal|null
argument_list|,
literal|"/config/overlay?wt=json"
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"overlay"
argument_list|,
literal|"runtimeLib"
argument_list|,
name|blobName
argument_list|,
literal|"version"
argument_list|)
argument_list|,
literal|1l
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|Map
name|map
init|=
name|TestSolrConfigHandler
operator|.
name|getRespMap
argument_list|(
literal|"/runtime?wt=json"
argument_list|,
name|client
argument_list|)
decl_stmt|;
name|String
name|s
init|=
operator|(
name|String
operator|)
name|Utils
operator|.
name|getObjectByPath
argument_list|(
name|map
argument_list|,
literal|false
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"error"
argument_list|,
literal|"msg"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|TestBlobHandler
operator|.
name|getAsString
argument_list|(
name|map
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TestBlobHandler
operator|.
name|getAsString
argument_list|(
name|map
argument_list|)
argument_list|,
name|s
operator|.
name|contains
argument_list|(
literal|"should be signed with one of the keys in ZK /keys/exe"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|wrongSig
init|=
literal|"QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw=="
decl_stmt|;
name|payload
operator|=
literal|"{\n"
operator|+
literal|"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw=='}\n"
operator|+
literal|"}"
expr_stmt|;
name|client
operator|=
name|restTestHarnesses
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|restTestHarnesses
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|TestSolrConfigHandler
operator|.
name|runConfigCommand
argument_list|(
name|client
argument_list|,
literal|"/config?wt=json"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|TestSolrConfigHandler
operator|.
name|testForResponseElement
argument_list|(
name|client
argument_list|,
literal|null
argument_list|,
literal|"/config/overlay?wt=json"
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"overlay"
argument_list|,
literal|"runtimeLib"
argument_list|,
name|blobName
argument_list|,
literal|"sig"
argument_list|)
argument_list|,
name|wrongSig
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|map
operator|=
name|TestSolrConfigHandler
operator|.
name|getRespMap
argument_list|(
literal|"/runtime?wt=json"
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|s
operator|=
operator|(
name|String
operator|)
name|Utils
operator|.
name|getObjectByPath
argument_list|(
name|map
argument_list|,
literal|false
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"error"
argument_list|,
literal|"msg"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|TestBlobHandler
operator|.
name|getAsString
argument_list|(
name|map
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
comment|//No key matched signature for jar
name|assertTrue
argument_list|(
name|TestBlobHandler
operator|.
name|getAsString
argument_list|(
name|map
argument_list|)
argument_list|,
name|s
operator|.
name|contains
argument_list|(
literal|"No key matched signature for jar"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|rightSig
init|=
literal|"YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q=="
decl_stmt|;
name|payload
operator|=
literal|"{\n"
operator|+
literal|"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q=='}\n"
operator|+
literal|"}"
expr_stmt|;
name|client
operator|=
name|restTestHarnesses
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|restTestHarnesses
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|TestSolrConfigHandler
operator|.
name|runConfigCommand
argument_list|(
name|client
argument_list|,
literal|"/config?wt=json"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|TestSolrConfigHandler
operator|.
name|testForResponseElement
argument_list|(
name|client
argument_list|,
literal|null
argument_list|,
literal|"/config/overlay?wt=json"
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"overlay"
argument_list|,
literal|"runtimeLib"
argument_list|,
name|blobName
argument_list|,
literal|"sig"
argument_list|)
argument_list|,
name|rightSig
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|map
operator|=
name|TestSolrConfigHandler
operator|.
name|testForResponseElement
argument_list|(
name|client
argument_list|,
literal|null
argument_list|,
literal|"/runtime?wt=json"
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"class"
argument_list|)
argument_list|,
literal|"org.apache.solr.core.RuntimeLibReqHandler"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|compareValues
argument_list|(
name|map
argument_list|,
name|MemClassLoader
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|asList
argument_list|(
literal|"loader"
argument_list|)
argument_list|)
expr_stmt|;
name|rightSig
operator|=
literal|"VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D"
expr_stmt|;
name|payload
operator|=
literal|"{\n"
operator|+
literal|"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D'}\n"
operator|+
literal|"}"
expr_stmt|;
name|client
operator|=
name|restTestHarnesses
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|restTestHarnesses
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|TestSolrConfigHandler
operator|.
name|runConfigCommand
argument_list|(
name|client
argument_list|,
literal|"/config?wt=json"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|TestSolrConfigHandler
operator|.
name|testForResponseElement
argument_list|(
name|client
argument_list|,
literal|null
argument_list|,
literal|"/config/overlay?wt=json"
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"overlay"
argument_list|,
literal|"runtimeLib"
argument_list|,
name|blobName
argument_list|,
literal|"sig"
argument_list|)
argument_list|,
name|rightSig
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|map
operator|=
name|TestSolrConfigHandler
operator|.
name|testForResponseElement
argument_list|(
name|client
argument_list|,
literal|null
argument_list|,
literal|"/runtime?wt=json"
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"class"
argument_list|)
argument_list|,
literal|"org.apache.solr.core.RuntimeLibReqHandler"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|compareValues
argument_list|(
name|map
argument_list|,
name|MemClassLoader
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|asList
argument_list|(
literal|"loader"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|readFile
specifier|private
name|byte
index|[]
name|readFile
parameter_list|(
name|String
name|fname
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buf
init|=
literal|null
decl_stmt|;
try|try
init|(
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|getFile
argument_list|(
name|fname
argument_list|)
argument_list|)
init|)
block|{
name|buf
operator|=
operator|new
name|byte
index|[
name|fis
operator|.
name|available
argument_list|()
index|]
expr_stmt|;
name|fis
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
return|;
block|}
block|}
end_class
end_unit
