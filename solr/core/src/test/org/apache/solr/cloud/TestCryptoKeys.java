begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|CryptoKeys
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_class
DECL|class|TestCryptoKeys
specifier|public
class|class
name|TestCryptoKeys
extends|extends
name|AbstractFullDistribZkTestBase
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestCryptoKeys
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|distribSetUp
specifier|public
name|void
name|distribSetUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|distribSetUp
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"numShards"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|sliceCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|TestCryptoKeys
specifier|public
name|TestCryptoKeys
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|sliceCount
operator|=
literal|1
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|pk1sig
init|=
literal|"G8LEW7uJ1is81Aqqfl3Sld3qDtOxPuVFeTLJHFJWecgDvUkmJNFXmf7nkHOVlXnDWahp1vqZf0W02VHXg37lBw=="
decl_stmt|;
name|String
name|pk2sig
init|=
literal|"pCyBQycB/0YvLVZfKLDIIqG1tFwM/awqzkp2QNpO7R3ThTqmmrj11wEJFDRLkY79efuFuQPHt40EE7jrOKoj9jLNELsfEqvU3jw9sZKiDONY+rV9Bj9QPeW8Pgt+F9Y1"
decl_stmt|;
name|String
name|wrongKeySig
init|=
literal|"xTk2hTipfpb+J5s4x3YZGOXkmHWtnJz05Vvd8RTm/Q1fbQVszR7vMk6dQ1URxX08fcg4HvxOo8g9bG2TSMOGjg=="
decl_stmt|;
name|String
name|result
init|=
literal|null
decl_stmt|;
name|CryptoKeys
name|cryptoKeys
init|=
literal|null
decl_stmt|;
name|SolrZkClient
name|zk
init|=
name|getCommonCloudSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getZkClient
argument_list|()
decl_stmt|;
name|cryptoKeys
operator|=
operator|new
name|CryptoKeys
argument_list|(
name|CloudUtil
operator|.
name|getTrustedKeys
argument_list|(
name|zk
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|samplefile
init|=
name|readFile
argument_list|(
literal|"samplefile.bin"
argument_list|)
decl_stmt|;
comment|//there are no keys
name|result
operator|=
name|cryptoKeys
operator|.
name|verify
argument_list|(
name|pk1sig
argument_list|,
name|samplefile
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|zk
operator|.
name|makePath
argument_list|(
literal|"/keys"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|createNode
argument_list|(
name|zk
argument_list|,
literal|"pubk1.der"
argument_list|)
expr_stmt|;
name|createNode
argument_list|(
name|zk
argument_list|,
literal|"pubk2.der"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|trustedKeys
init|=
name|CloudUtil
operator|.
name|getTrustedKeys
argument_list|(
name|zk
argument_list|)
decl_stmt|;
name|cryptoKeys
operator|=
operator|new
name|CryptoKeys
argument_list|(
name|trustedKeys
argument_list|)
expr_stmt|;
name|result
operator|=
name|cryptoKeys
operator|.
name|verify
argument_list|(
name|pk2sig
argument_list|,
name|samplefile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pubk2.der"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
name|cryptoKeys
operator|.
name|verify
argument_list|(
name|pk1sig
argument_list|,
name|samplefile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pubk1.der"
argument_list|,
name|result
argument_list|)
expr_stmt|;
try|try
block|{
name|result
operator|=
name|cryptoKeys
operator|.
name|verify
argument_list|(
name|wrongKeySig
argument_list|,
name|samplefile
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//pass
block|}
try|try
block|{
name|result
operator|=
name|cryptoKeys
operator|.
name|verify
argument_list|(
literal|"SGVsbG8gV29ybGQhCg=="
argument_list|,
name|samplefile
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//pass
block|}
block|}
DECL|method|createNode
specifier|private
name|void
name|createNode
parameter_list|(
name|SolrZkClient
name|zk
parameter_list|,
name|String
name|fname
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|byte
index|[]
name|buf
init|=
name|readFile
argument_list|(
name|fname
argument_list|)
decl_stmt|;
name|zk
operator|.
name|create
argument_list|(
literal|"/keys/"
operator|+
name|fname
argument_list|,
name|buf
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|readFile
specifier|private
name|byte
index|[]
name|readFile
parameter_list|(
name|String
name|fname
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buf
init|=
literal|null
decl_stmt|;
try|try
init|(
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|getFile
argument_list|(
literal|"cryptokeys/"
operator|+
name|fname
argument_list|)
argument_list|)
init|)
block|{
name|buf
operator|=
operator|new
name|byte
index|[
name|fis
operator|.
name|available
argument_list|()
index|]
expr_stmt|;
name|fis
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
return|;
block|}
block|}
end_class
end_unit
