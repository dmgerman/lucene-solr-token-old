begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|CdcrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
annotation|@
name|Slow
DECL|class|CdcrRequestHandlerTest
specifier|public
class|class
name|CdcrRequestHandlerTest
extends|extends
name|BaseCdcrDistributedZkTest
block|{
annotation|@
name|Override
DECL|method|distribSetUp
specifier|public
name|void
name|distribSetUp
parameter_list|()
throws|throws
name|Exception
block|{
name|schemaString
operator|=
literal|"schema15.xml"
expr_stmt|;
comment|// we need a string id
name|createTargetCollection
operator|=
literal|false
expr_stmt|;
comment|// we do not need the target cluster
name|super
operator|.
name|distribSetUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|ShardsFixed
argument_list|(
name|num
operator|=
literal|2
argument_list|)
DECL|method|doTest
specifier|public
name|void
name|doTest
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|doTestLifeCycleActions
argument_list|()
expr_stmt|;
name|this
operator|.
name|doTestCheckpointActions
argument_list|()
expr_stmt|;
name|this
operator|.
name|doTestBufferActions
argument_list|()
expr_stmt|;
block|}
comment|// check that the life-cycle state is properly synchronised across nodes
DECL|method|doTestLifeCycleActions
specifier|public
name|void
name|doTestLifeCycleActions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// check initial status
name|this
operator|.
name|assertState
argument_list|(
name|SOURCE_COLLECTION
argument_list|,
name|CdcrParams
operator|.
name|ProcessState
operator|.
name|STOPPED
argument_list|,
name|CdcrParams
operator|.
name|BufferState
operator|.
name|ENABLED
argument_list|)
expr_stmt|;
comment|// send start action to first shard
name|NamedList
name|rsp
init|=
name|invokeCdcrAction
argument_list|(
name|shardToLeaderJetty
operator|.
name|get
argument_list|(
name|SOURCE_COLLECTION
argument_list|)
operator|.
name|get
argument_list|(
name|SHARD1
argument_list|)
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|START
argument_list|)
decl_stmt|;
name|NamedList
name|status
init|=
operator|(
name|NamedList
operator|)
name|rsp
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|STATUS
operator|.
name|toLower
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|CdcrParams
operator|.
name|ProcessState
operator|.
name|STARTED
operator|.
name|toLower
argument_list|()
argument_list|,
name|status
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|ProcessState
operator|.
name|getParam
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check status
name|this
operator|.
name|assertState
argument_list|(
name|SOURCE_COLLECTION
argument_list|,
name|CdcrParams
operator|.
name|ProcessState
operator|.
name|STARTED
argument_list|,
name|CdcrParams
operator|.
name|BufferState
operator|.
name|ENABLED
argument_list|)
expr_stmt|;
comment|// Restart the leader of shard 1
name|this
operator|.
name|restartServer
argument_list|(
name|shardToLeaderJetty
operator|.
name|get
argument_list|(
name|SOURCE_COLLECTION
argument_list|)
operator|.
name|get
argument_list|(
name|SHARD1
argument_list|)
argument_list|)
expr_stmt|;
comment|// check status - the node that died should have picked up the original state
name|this
operator|.
name|assertState
argument_list|(
name|SOURCE_COLLECTION
argument_list|,
name|CdcrParams
operator|.
name|ProcessState
operator|.
name|STARTED
argument_list|,
name|CdcrParams
operator|.
name|BufferState
operator|.
name|ENABLED
argument_list|)
expr_stmt|;
comment|// send stop action to second shard
name|rsp
operator|=
name|invokeCdcrAction
argument_list|(
name|shardToLeaderJetty
operator|.
name|get
argument_list|(
name|SOURCE_COLLECTION
argument_list|)
operator|.
name|get
argument_list|(
name|SHARD2
argument_list|)
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|STOP
argument_list|)
expr_stmt|;
name|status
operator|=
operator|(
name|NamedList
operator|)
name|rsp
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|STATUS
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CdcrParams
operator|.
name|ProcessState
operator|.
name|STOPPED
operator|.
name|toLower
argument_list|()
argument_list|,
name|status
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|ProcessState
operator|.
name|getParam
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check status
name|this
operator|.
name|assertState
argument_list|(
name|SOURCE_COLLECTION
argument_list|,
name|CdcrParams
operator|.
name|ProcessState
operator|.
name|STOPPED
argument_list|,
name|CdcrParams
operator|.
name|BufferState
operator|.
name|ENABLED
argument_list|)
expr_stmt|;
block|}
comment|// check the checkpoint API
DECL|method|doTestCheckpointActions
specifier|public
name|void
name|doTestCheckpointActions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// initial request on an empty index, must return -1
name|NamedList
name|rsp
init|=
name|invokeCdcrAction
argument_list|(
name|shardToLeaderJetty
operator|.
name|get
argument_list|(
name|SOURCE_COLLECTION
argument_list|)
operator|.
name|get
argument_list|(
name|SHARD1
argument_list|)
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|COLLECTIONCHECKPOINT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1l
argument_list|,
name|rsp
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|CHECKPOINT
argument_list|)
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|SOURCE_COLLECTION
argument_list|,
name|getDoc
argument_list|(
name|id
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
comment|// shard 2
comment|// only one document indexed in shard 2, the checkpoint must be still -1
name|rsp
operator|=
name|invokeCdcrAction
argument_list|(
name|shardToLeaderJetty
operator|.
name|get
argument_list|(
name|SOURCE_COLLECTION
argument_list|)
operator|.
name|get
argument_list|(
name|SHARD1
argument_list|)
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|COLLECTIONCHECKPOINT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1l
argument_list|,
name|rsp
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|CHECKPOINT
argument_list|)
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|SOURCE_COLLECTION
argument_list|,
name|getDoc
argument_list|(
name|id
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
comment|// shard 1
comment|// a second document indexed in shard 1, the checkpoint must come from shard 2
name|rsp
operator|=
name|invokeCdcrAction
argument_list|(
name|shardToLeaderJetty
operator|.
name|get
argument_list|(
name|SOURCE_COLLECTION
argument_list|)
operator|.
name|get
argument_list|(
name|SHARD2
argument_list|)
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|COLLECTIONCHECKPOINT
argument_list|)
expr_stmt|;
name|long
name|checkpoint1
init|=
operator|(
name|Long
operator|)
name|rsp
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|CHECKPOINT
argument_list|)
decl_stmt|;
name|long
name|expected
init|=
operator|(
name|Long
operator|)
name|invokeCdcrAction
argument_list|(
name|shardToLeaderJetty
operator|.
name|get
argument_list|(
name|SOURCE_COLLECTION
argument_list|)
operator|.
name|get
argument_list|(
name|SHARD2
argument_list|)
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|SHARDCHECKPOINT
argument_list|)
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|CHECKPOINT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|checkpoint1
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|SOURCE_COLLECTION
argument_list|,
name|getDoc
argument_list|(
name|id
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
comment|// shard 1
comment|// a third document indexed in shard 1, the checkpoint must still come from shard 2
name|rsp
operator|=
name|invokeCdcrAction
argument_list|(
name|shardToLeaderJetty
operator|.
name|get
argument_list|(
name|SOURCE_COLLECTION
argument_list|)
operator|.
name|get
argument_list|(
name|SHARD1
argument_list|)
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|COLLECTIONCHECKPOINT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|checkpoint1
argument_list|,
name|rsp
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|CHECKPOINT
argument_list|)
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|SOURCE_COLLECTION
argument_list|,
name|getDoc
argument_list|(
name|id
argument_list|,
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
comment|// shard 2
comment|// a fourth document indexed in shard 2, the checkpoint must come from shard 1
name|rsp
operator|=
name|invokeCdcrAction
argument_list|(
name|shardToLeaderJetty
operator|.
name|get
argument_list|(
name|SOURCE_COLLECTION
argument_list|)
operator|.
name|get
argument_list|(
name|SHARD2
argument_list|)
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|COLLECTIONCHECKPOINT
argument_list|)
expr_stmt|;
name|long
name|checkpoint2
init|=
operator|(
name|Long
operator|)
name|rsp
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|CHECKPOINT
argument_list|)
decl_stmt|;
name|expected
operator|=
operator|(
name|Long
operator|)
name|invokeCdcrAction
argument_list|(
name|shardToLeaderJetty
operator|.
name|get
argument_list|(
name|SOURCE_COLLECTION
argument_list|)
operator|.
name|get
argument_list|(
name|SHARD1
argument_list|)
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|SHARDCHECKPOINT
argument_list|)
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|CHECKPOINT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|checkpoint2
argument_list|)
expr_stmt|;
comment|// send a delete by query
name|deleteByQuery
argument_list|(
name|SOURCE_COLLECTION
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// all the checkpoints must come from the DBQ
name|rsp
operator|=
name|invokeCdcrAction
argument_list|(
name|shardToLeaderJetty
operator|.
name|get
argument_list|(
name|SOURCE_COLLECTION
argument_list|)
operator|.
name|get
argument_list|(
name|SHARD2
argument_list|)
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|COLLECTIONCHECKPOINT
argument_list|)
expr_stmt|;
name|long
name|checkpoint3
init|=
operator|(
name|Long
operator|)
name|rsp
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|CHECKPOINT
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|checkpoint3
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// ensure that checkpoints from deletes are in absolute form
name|checkpoint3
operator|=
operator|(
name|Long
operator|)
name|invokeCdcrAction
argument_list|(
name|shardToLeaderJetty
operator|.
name|get
argument_list|(
name|SOURCE_COLLECTION
argument_list|)
operator|.
name|get
argument_list|(
name|SHARD1
argument_list|)
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|SHARDCHECKPOINT
argument_list|)
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|CHECKPOINT
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkpoint3
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// ensure that checkpoints from deletes are in absolute form
name|checkpoint3
operator|=
operator|(
name|Long
operator|)
name|invokeCdcrAction
argument_list|(
name|shardToLeaderJetty
operator|.
name|get
argument_list|(
name|SOURCE_COLLECTION
argument_list|)
operator|.
name|get
argument_list|(
name|SHARD2
argument_list|)
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|SHARDCHECKPOINT
argument_list|)
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|CHECKPOINT
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkpoint3
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// ensure that checkpoints from deletes are in absolute form
comment|// replication never started, lastProcessedVersion should be -1 for both shards
name|rsp
operator|=
name|invokeCdcrAction
argument_list|(
name|shardToLeaderJetty
operator|.
name|get
argument_list|(
name|SOURCE_COLLECTION
argument_list|)
operator|.
name|get
argument_list|(
name|SHARD1
argument_list|)
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|LASTPROCESSEDVERSION
argument_list|)
expr_stmt|;
name|long
name|lastVersion
init|=
operator|(
name|Long
operator|)
name|rsp
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|LAST_PROCESSED_VERSION
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1l
argument_list|,
name|lastVersion
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|invokeCdcrAction
argument_list|(
name|shardToLeaderJetty
operator|.
name|get
argument_list|(
name|SOURCE_COLLECTION
argument_list|)
operator|.
name|get
argument_list|(
name|SHARD2
argument_list|)
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|LASTPROCESSEDVERSION
argument_list|)
expr_stmt|;
name|lastVersion
operator|=
operator|(
name|Long
operator|)
name|rsp
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|LAST_PROCESSED_VERSION
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1l
argument_list|,
name|lastVersion
argument_list|)
expr_stmt|;
block|}
comment|// check that the buffer state is properly synchronised across nodes
DECL|method|doTestBufferActions
specifier|public
name|void
name|doTestBufferActions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// check initial status
name|this
operator|.
name|assertState
argument_list|(
name|SOURCE_COLLECTION
argument_list|,
name|CdcrParams
operator|.
name|ProcessState
operator|.
name|STOPPED
argument_list|,
name|CdcrParams
operator|.
name|BufferState
operator|.
name|ENABLED
argument_list|)
expr_stmt|;
comment|// send disable buffer action to first shard
name|NamedList
name|rsp
init|=
name|invokeCdcrAction
argument_list|(
name|shardToLeaderJetty
operator|.
name|get
argument_list|(
name|SOURCE_COLLECTION
argument_list|)
operator|.
name|get
argument_list|(
name|SHARD1
argument_list|)
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|DISABLEBUFFER
argument_list|)
decl_stmt|;
name|NamedList
name|status
init|=
operator|(
name|NamedList
operator|)
name|rsp
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|STATUS
operator|.
name|toLower
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|CdcrParams
operator|.
name|BufferState
operator|.
name|DISABLED
operator|.
name|toLower
argument_list|()
argument_list|,
name|status
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|BufferState
operator|.
name|getParam
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check status
name|this
operator|.
name|assertState
argument_list|(
name|SOURCE_COLLECTION
argument_list|,
name|CdcrParams
operator|.
name|ProcessState
operator|.
name|STOPPED
argument_list|,
name|CdcrParams
operator|.
name|BufferState
operator|.
name|DISABLED
argument_list|)
expr_stmt|;
comment|// Restart the leader of shard 1
name|this
operator|.
name|restartServer
argument_list|(
name|shardToLeaderJetty
operator|.
name|get
argument_list|(
name|SOURCE_COLLECTION
argument_list|)
operator|.
name|get
argument_list|(
name|SHARD1
argument_list|)
argument_list|)
expr_stmt|;
comment|// check status
name|this
operator|.
name|assertState
argument_list|(
name|SOURCE_COLLECTION
argument_list|,
name|CdcrParams
operator|.
name|ProcessState
operator|.
name|STOPPED
argument_list|,
name|CdcrParams
operator|.
name|BufferState
operator|.
name|DISABLED
argument_list|)
expr_stmt|;
comment|// send enable buffer action to second shard
name|rsp
operator|=
name|invokeCdcrAction
argument_list|(
name|shardToLeaderJetty
operator|.
name|get
argument_list|(
name|SOURCE_COLLECTION
argument_list|)
operator|.
name|get
argument_list|(
name|SHARD2
argument_list|)
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|ENABLEBUFFER
argument_list|)
expr_stmt|;
name|status
operator|=
operator|(
name|NamedList
operator|)
name|rsp
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|STATUS
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CdcrParams
operator|.
name|BufferState
operator|.
name|ENABLED
operator|.
name|toLower
argument_list|()
argument_list|,
name|status
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|BufferState
operator|.
name|getParam
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check status
name|this
operator|.
name|assertState
argument_list|(
name|SOURCE_COLLECTION
argument_list|,
name|CdcrParams
operator|.
name|ProcessState
operator|.
name|STOPPED
argument_list|,
name|CdcrParams
operator|.
name|BufferState
operator|.
name|ENABLED
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
