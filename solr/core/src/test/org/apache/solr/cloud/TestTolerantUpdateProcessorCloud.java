begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|SolrCloudTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|UpdateResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|ToleratedUpdateError
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|ToleratedUpdateError
operator|.
name|CmdType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * Test of TolerantUpdateProcessor using a MiniSolrCloud.  Updates (that include failures which   * should be tolerated) are explicitly tested against various initial nodes to confirm correct   * behavior regardless of routing.  *  *<p>  *<b>NOTE:</b> This test sets up a static instance of MiniSolrCloud with a single collection   * and several clients pointed at specific nodes. These are all re-used across multiple test methods,   * and assumes that the state of the cluster is healthy.  *</p>  *  */
end_comment
begin_class
DECL|class|TestTolerantUpdateProcessorCloud
specifier|public
class|class
name|TestTolerantUpdateProcessorCloud
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|NUM_SHARDS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_SHARDS
init|=
literal|2
decl_stmt|;
DECL|field|REPLICATION_FACTOR
specifier|private
specifier|static
specifier|final
name|int
name|REPLICATION_FACTOR
init|=
literal|2
decl_stmt|;
DECL|field|NUM_SERVERS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_SERVERS
init|=
literal|5
decl_stmt|;
DECL|field|COLLECTION_NAME
specifier|private
specifier|static
specifier|final
name|String
name|COLLECTION_NAME
init|=
literal|"test_col"
decl_stmt|;
comment|/** A basic client for operations at the cloud level, default collection will be set */
DECL|field|CLOUD_CLIENT
specifier|private
specifier|static
name|CloudSolrClient
name|CLOUD_CLIENT
decl_stmt|;
comment|/** A client for talking directly to the leader of shard1 */
DECL|field|S_ONE_LEADER_CLIENT
specifier|private
specifier|static
name|HttpSolrClient
name|S_ONE_LEADER_CLIENT
decl_stmt|;
comment|/** A client for talking directly to the leader of shard2 */
DECL|field|S_TWO_LEADER_CLIENT
specifier|private
specifier|static
name|HttpSolrClient
name|S_TWO_LEADER_CLIENT
decl_stmt|;
comment|/** A client for talking directly to a passive replica of shard1 */
DECL|field|S_ONE_NON_LEADER_CLIENT
specifier|private
specifier|static
name|HttpSolrClient
name|S_ONE_NON_LEADER_CLIENT
decl_stmt|;
comment|/** A client for talking directly to a passive replica of shard2 */
DECL|field|S_TWO_NON_LEADER_CLIENT
specifier|private
specifier|static
name|HttpSolrClient
name|S_TWO_NON_LEADER_CLIENT
decl_stmt|;
comment|/** A client for talking directly to a node that has no piece of the collection */
DECL|field|NO_COLLECTION_CLIENT
specifier|private
specifier|static
name|HttpSolrClient
name|NO_COLLECTION_CLIENT
decl_stmt|;
comment|/** id field doc routing prefix for shard1 */
DECL|field|S_ONE_PRE
specifier|private
specifier|static
specifier|final
name|String
name|S_ONE_PRE
init|=
literal|"abc!"
decl_stmt|;
comment|/** id field doc routing prefix for shard2 */
DECL|field|S_TWO_PRE
specifier|private
specifier|static
specifier|final
name|String
name|S_TWO_PRE
init|=
literal|"XYZ!"
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|createMiniSolrCloudCluster
specifier|private
specifier|static
name|void
name|createMiniSolrCloudCluster
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|configName
init|=
literal|"solrCloudCollectionConfig"
decl_stmt|;
specifier|final
name|File
name|configDir
init|=
operator|new
name|File
argument_list|(
name|TEST_HOME
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"collection1"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"conf"
argument_list|)
decl_stmt|;
name|configureCluster
argument_list|(
name|NUM_SERVERS
argument_list|)
operator|.
name|addConfig
argument_list|(
name|configName
argument_list|,
name|configDir
operator|.
name|toPath
argument_list|()
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
name|assertSpinLoopAllJettyAreRunning
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|collectionProperties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|collectionProperties
operator|.
name|put
argument_list|(
literal|"config"
argument_list|,
literal|"solrconfig-distrib-update-processor-chains.xml"
argument_list|)
expr_stmt|;
name|collectionProperties
operator|.
name|put
argument_list|(
literal|"schema"
argument_list|,
literal|"schema15.xml"
argument_list|)
expr_stmt|;
comment|// string id for doc routing prefix
name|assertNotNull
argument_list|(
name|cluster
operator|.
name|createCollection
argument_list|(
name|COLLECTION_NAME
argument_list|,
name|NUM_SHARDS
argument_list|,
name|REPLICATION_FACTOR
argument_list|,
name|configName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|collectionProperties
argument_list|)
argument_list|)
expr_stmt|;
name|CLOUD_CLIENT
operator|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
expr_stmt|;
name|CLOUD_CLIENT
operator|.
name|setDefaultCollection
argument_list|(
name|COLLECTION_NAME
argument_list|)
expr_stmt|;
name|ZkStateReader
name|zkStateReader
init|=
name|CLOUD_CLIENT
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|COLLECTION_NAME
argument_list|,
name|zkStateReader
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|330
argument_list|)
expr_stmt|;
comment|// really hackish way to get a URL for specific nodes based on shard/replica hosting
comment|// inspired by TestMiniSolrCloudCluster
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|urlMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
control|)
block|{
name|URL
name|jettyURL
init|=
name|jetty
operator|.
name|getBaseUrl
argument_list|()
decl_stmt|;
name|String
name|nodeKey
init|=
name|jettyURL
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|jettyURL
operator|.
name|getPort
argument_list|()
operator|+
name|jettyURL
operator|.
name|getPath
argument_list|()
operator|.
name|replace
argument_list|(
literal|"/"
argument_list|,
literal|"_"
argument_list|)
decl_stmt|;
name|urlMap
operator|.
name|put
argument_list|(
name|nodeKey
argument_list|,
name|jettyURL
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|zkStateReader
operator|.
name|updateClusterState
argument_list|()
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
for|for
control|(
name|Slice
name|slice
range|:
name|clusterState
operator|.
name|getSlices
argument_list|(
name|COLLECTION_NAME
argument_list|)
control|)
block|{
name|String
name|shardName
init|=
name|slice
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Replica
name|leader
init|=
name|slice
operator|.
name|getLeader
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"slice has null leader: "
operator|+
name|slice
operator|.
name|toString
argument_list|()
argument_list|,
name|leader
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"slice leader has null node name: "
operator|+
name|slice
operator|.
name|toString
argument_list|()
argument_list|,
name|leader
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|leaderUrl
init|=
name|urlMap
operator|.
name|remove
argument_list|(
name|leader
operator|.
name|getNodeName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"could not find URL for "
operator|+
name|shardName
operator|+
literal|" leader: "
operator|+
name|leader
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|leaderUrl
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected two total replicas for: "
operator|+
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
literal|2
argument_list|,
name|slice
operator|.
name|getReplicas
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|passiveUrl
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Replica
name|replica
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|replica
operator|.
name|equals
argument_list|(
name|leader
argument_list|)
condition|)
block|{
name|passiveUrl
operator|=
name|urlMap
operator|.
name|remove
argument_list|(
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"could not find URL for "
operator|+
name|shardName
operator|+
literal|" replica: "
operator|+
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|passiveUrl
argument_list|)
expr_stmt|;
block|}
block|}
name|assertNotNull
argument_list|(
literal|"could not find URL for "
operator|+
name|shardName
operator|+
literal|" replica"
argument_list|,
name|passiveUrl
argument_list|)
expr_stmt|;
if|if
condition|(
name|shardName
operator|.
name|equals
argument_list|(
literal|"shard1"
argument_list|)
condition|)
block|{
name|S_ONE_LEADER_CLIENT
operator|=
name|getHttpSolrClient
argument_list|(
name|leaderUrl
operator|+
literal|"/"
operator|+
name|COLLECTION_NAME
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|S_ONE_NON_LEADER_CLIENT
operator|=
name|getHttpSolrClient
argument_list|(
name|passiveUrl
operator|+
literal|"/"
operator|+
name|COLLECTION_NAME
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|shardName
operator|.
name|equals
argument_list|(
literal|"shard2"
argument_list|)
condition|)
block|{
name|S_TWO_LEADER_CLIENT
operator|=
name|getHttpSolrClient
argument_list|(
name|leaderUrl
operator|+
literal|"/"
operator|+
name|COLLECTION_NAME
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|S_TWO_NON_LEADER_CLIENT
operator|=
name|getHttpSolrClient
argument_list|(
name|passiveUrl
operator|+
literal|"/"
operator|+
name|COLLECTION_NAME
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"unexpected shard: "
operator|+
name|shardName
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"Should be exactly one server left (nost hosting either shard)"
argument_list|,
literal|1
argument_list|,
name|urlMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|NO_COLLECTION_CLIENT
operator|=
name|getHttpSolrClient
argument_list|(
name|urlMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|+
literal|"/"
operator|+
name|COLLECTION_NAME
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|S_ONE_LEADER_CLIENT
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|S_TWO_LEADER_CLIENT
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|S_ONE_NON_LEADER_CLIENT
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|S_TWO_NON_LEADER_CLIENT
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|NO_COLLECTION_CLIENT
argument_list|)
expr_stmt|;
comment|// sanity check that our S_ONE_PRE& S_TWO_PRE really do map to shard1& shard2 with default routing
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|CLOUD_CLIENT
operator|.
name|add
argument_list|(
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"expected_shard_s"
argument_list|,
literal|"shard1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|CLOUD_CLIENT
operator|.
name|add
argument_list|(
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"expected_shard_s"
argument_list|,
literal|"shard2"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|CLOUD_CLIENT
operator|.
name|commit
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|SolrDocumentList
name|docs
init|=
name|CLOUD_CLIENT
operator|.
name|query
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,expected_shard_s,[shard]"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrDocument
name|doc
range|:
name|docs
control|)
block|{
name|String
name|expected
init|=
name|COLLECTION_NAME
operator|+
literal|"_"
operator|+
name|doc
operator|.
name|getFirstValue
argument_list|(
literal|"expected_shard_s"
argument_list|)
operator|+
literal|"_replica"
decl_stmt|;
name|String
name|docShard
init|=
name|doc
operator|.
name|getFirstValue
argument_list|(
literal|"[shard]"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"shard routing prefixes don't seem to be aligned anymore, "
operator|+
literal|"did someone change the default routing rules? "
operator|+
literal|"and/or the the default core name rules? "
operator|+
literal|"and/or the numShards used by this test? ... "
operator|+
literal|"couldn't find "
operator|+
name|expected
operator|+
literal|" as substring of [shard] == '"
operator|+
name|docShard
operator|+
literal|"' ... for docId == "
operator|+
name|doc
operator|.
name|getFirstValue
argument_list|(
literal|"id"
argument_list|)
argument_list|,
name|docShard
operator|.
name|contains
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|IOException
block|{
name|close
argument_list|(
name|S_ONE_LEADER_CLIENT
argument_list|)
expr_stmt|;
name|S_ONE_LEADER_CLIENT
operator|=
literal|null
expr_stmt|;
name|close
argument_list|(
name|S_TWO_LEADER_CLIENT
argument_list|)
expr_stmt|;
name|S_TWO_LEADER_CLIENT
operator|=
literal|null
expr_stmt|;
name|close
argument_list|(
name|S_ONE_NON_LEADER_CLIENT
argument_list|)
expr_stmt|;
name|S_ONE_NON_LEADER_CLIENT
operator|=
literal|null
expr_stmt|;
name|close
argument_list|(
name|S_TWO_NON_LEADER_CLIENT
argument_list|)
expr_stmt|;
name|S_TWO_NON_LEADER_CLIENT
operator|=
literal|null
expr_stmt|;
name|close
argument_list|(
name|NO_COLLECTION_CLIENT
argument_list|)
expr_stmt|;
name|NO_COLLECTION_CLIENT
operator|=
literal|null
expr_stmt|;
name|close
argument_list|(
name|CLOUD_CLIENT
argument_list|)
expr_stmt|;
name|CLOUD_CLIENT
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|close
specifier|private
specifier|static
name|void
name|close
parameter_list|(
name|SolrClient
name|client
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|clearCollection
specifier|private
name|void
name|clearCollection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|CLOUD_CLIENT
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|CLOUD_CLIENT
operator|.
name|commit
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSanity
specifier|public
name|void
name|testSanity
parameter_list|()
throws|throws
name|Exception
block|{
comment|// verify some basic sanity checking of indexing& querying across the collection
comment|// w/o using our custom update processor chain
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|CLOUD_CLIENT
operator|.
name|add
argument_list|(
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"1"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|42
argument_list|)
argument_list|)
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|CLOUD_CLIENT
operator|.
name|add
argument_list|(
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"2"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|66
argument_list|)
argument_list|)
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|CLOUD_CLIENT
operator|.
name|commit
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrClient
name|c
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|S_ONE_LEADER_CLIENT
argument_list|,
name|S_TWO_LEADER_CLIENT
argument_list|,
name|S_ONE_NON_LEADER_CLIENT
argument_list|,
name|S_TWO_NON_LEADER_CLIENT
argument_list|,
name|NO_COLLECTION_CLIENT
argument_list|,
name|CLOUD_CLIENT
argument_list|)
control|)
block|{
name|assertQueryDocIds
argument_list|(
name|c
argument_list|,
literal|true
argument_list|,
name|S_ONE_PRE
operator|+
literal|"1"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"2"
argument_list|)
expr_stmt|;
name|assertQueryDocIds
argument_list|(
name|c
argument_list|,
literal|false
argument_list|,
literal|"id_not_exists"
argument_list|)
expr_stmt|;
comment|// verify adding 2 broken docs causes a clint exception
try|try
block|{
name|UpdateResponse
name|rsp
init|=
name|update
argument_list|(
name|params
argument_list|()
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"X"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"bogus_val_X"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"Y"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"bogus_val_Y"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"did not get a top level exception when more then 10 docs failed: "
operator|+
name|rsp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"not the type of error we were expecting ("
operator|+
name|e
operator|.
name|code
argument_list|()
operator|+
literal|"): "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
literal|400
argument_list|,
name|e
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// verify malformed deleteByQuerys fail
try|try
block|{
name|UpdateResponse
name|rsp
init|=
name|update
argument_list|(
name|params
argument_list|()
argument_list|)
operator|.
name|deleteByQuery
argument_list|(
literal|"foo_i:not_a_num"
argument_list|)
operator|.
name|process
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"sanity check for malformed DBQ didn't fail: "
operator|+
name|rsp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"not the expected DBQ failure: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|400
argument_list|,
name|e
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// verify oportunistic concurrency deletions fail as we expect when docs are / aren't present
for|for
control|(
name|UpdateRequest
name|r
range|:
operator|new
name|UpdateRequest
index|[]
block|{
name|update
argument_list|(
name|params
argument_list|(
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
operator|.
name|deleteById
argument_list|(
name|S_ONE_PRE
operator|+
literal|"1"
argument_list|,
operator|-
literal|1L
argument_list|)
block|,
name|update
argument_list|(
name|params
argument_list|(
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
operator|.
name|deleteById
argument_list|(
name|S_TWO_PRE
operator|+
literal|"2"
argument_list|,
operator|-
literal|1L
argument_list|)
block|,
name|update
argument_list|(
name|params
argument_list|(
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
operator|.
name|deleteById
argument_list|(
literal|"id_not_exists"
argument_list|,
literal|1L
argument_list|)
block|}
control|)
block|{
try|try
block|{
name|UpdateResponse
name|rsp
init|=
name|r
operator|.
name|process
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"sanity check for oportunistic concurrency delete didn't fail: "
operator|+
name|r
operator|.
name|toString
argument_list|()
operator|+
literal|" => "
operator|+
name|rsp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"not the expected oportunistic concurrency failure code: "
operator|+
name|r
operator|.
name|toString
argument_list|()
operator|+
literal|" => "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|409
argument_list|,
name|e
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//
DECL|method|testVariousDeletesViaCloudClient
specifier|public
name|void
name|testVariousDeletesViaCloudClient
parameter_list|()
throws|throws
name|Exception
block|{
name|testVariousDeletes
argument_list|(
name|CLOUD_CLIENT
argument_list|)
expr_stmt|;
block|}
DECL|method|testVariousDeletesViaShard1LeaderClient
specifier|public
name|void
name|testVariousDeletesViaShard1LeaderClient
parameter_list|()
throws|throws
name|Exception
block|{
name|testVariousDeletes
argument_list|(
name|S_ONE_LEADER_CLIENT
argument_list|)
expr_stmt|;
block|}
DECL|method|testVariousDeletesViaShard2LeaderClient
specifier|public
name|void
name|testVariousDeletesViaShard2LeaderClient
parameter_list|()
throws|throws
name|Exception
block|{
name|testVariousDeletes
argument_list|(
name|S_TWO_LEADER_CLIENT
argument_list|)
expr_stmt|;
block|}
DECL|method|testVariousDeletesViaShard1NonLeaderClient
specifier|public
name|void
name|testVariousDeletesViaShard1NonLeaderClient
parameter_list|()
throws|throws
name|Exception
block|{
name|testVariousDeletes
argument_list|(
name|S_ONE_NON_LEADER_CLIENT
argument_list|)
expr_stmt|;
block|}
DECL|method|testVariousDeletesViaShard2NonLeaderClient
specifier|public
name|void
name|testVariousDeletesViaShard2NonLeaderClient
parameter_list|()
throws|throws
name|Exception
block|{
name|testVariousDeletes
argument_list|(
name|S_TWO_NON_LEADER_CLIENT
argument_list|)
expr_stmt|;
block|}
DECL|method|testVariousDeletesViaNoCollectionClient
specifier|public
name|void
name|testVariousDeletesViaNoCollectionClient
parameter_list|()
throws|throws
name|Exception
block|{
name|testVariousDeletes
argument_list|(
name|NO_COLLECTION_CLIENT
argument_list|)
expr_stmt|;
block|}
DECL|method|testVariousDeletes
specifier|protected
specifier|static
name|void
name|testVariousDeletes
parameter_list|(
name|SolrClient
name|client
parameter_list|)
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
literal|"client not initialized"
argument_list|,
name|client
argument_list|)
expr_stmt|;
comment|// 2 docs, one on each shard
specifier|final
name|String
name|docId1
init|=
name|S_ONE_PRE
operator|+
literal|"42"
decl_stmt|;
specifier|final
name|String
name|docId2
init|=
name|S_TWO_PRE
operator|+
literal|"666"
decl_stmt|;
name|UpdateResponse
name|rsp
init|=
literal|null
decl_stmt|;
comment|// add 1 doc to each shard
name|rsp
operator|=
name|update
argument_list|(
name|params
argument_list|(
literal|"update.chain"
argument_list|,
literal|"tolerant-chain-max-errors-10"
argument_list|,
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|docId1
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"2001"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|docId2
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"1976"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// attempt to delete individual doc id(s) that should fail because of oportunistic concurrency constraints
for|for
control|(
name|String
name|id
range|:
operator|new
name|String
index|[]
block|{
name|docId1
block|,
name|docId2
block|}
control|)
block|{
name|rsp
operator|=
name|update
argument_list|(
name|params
argument_list|(
literal|"update.chain"
argument_list|,
literal|"tolerant-chain-max-errors-10"
argument_list|,
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
operator|.
name|deleteById
argument_list|(
name|id
argument_list|,
operator|-
literal|1L
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertUpdateTolerantErrors
argument_list|(
literal|"failed oportunistic concurrent delId="
operator|+
name|id
argument_list|,
name|rsp
argument_list|,
name|delIErr
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// multiple failed deletes from the same shard (via oportunistic concurrent w/ bogus ids)
name|rsp
operator|=
name|update
argument_list|(
name|params
argument_list|(
literal|"update.chain"
argument_list|,
literal|"tolerant-chain-max-errors-10"
argument_list|,
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
operator|.
name|deleteById
argument_list|(
name|S_ONE_PRE
operator|+
literal|"X"
argument_list|,
operator|+
literal|1L
argument_list|)
operator|.
name|deleteById
argument_list|(
name|S_ONE_PRE
operator|+
literal|"Y"
argument_list|,
operator|+
literal|1L
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertUpdateTolerantErrors
argument_list|(
literal|"failed oportunistic concurrent delete by id for 2 bogus docs"
argument_list|,
name|rsp
argument_list|,
name|delIErr
argument_list|(
name|S_ONE_PRE
operator|+
literal|"X"
argument_list|)
argument_list|,
name|delIErr
argument_list|(
name|S_ONE_PRE
operator|+
literal|"Y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|true
argument_list|,
name|docId1
argument_list|,
name|docId2
argument_list|)
expr_stmt|;
comment|// multiple failed deletes from the diff shards due to oportunistic concurrency constraints
name|rsp
operator|=
name|update
argument_list|(
name|params
argument_list|(
literal|"update.chain"
argument_list|,
literal|"tolerant-chain-max-errors-10"
argument_list|,
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
operator|.
name|deleteById
argument_list|(
name|docId2
argument_list|,
operator|-
literal|1L
argument_list|)
operator|.
name|deleteById
argument_list|(
name|docId1
argument_list|,
operator|-
literal|1L
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertUpdateTolerantErrors
argument_list|(
literal|"failed oportunistic concurrent delete by id for 2 docs"
argument_list|,
name|rsp
argument_list|,
name|delIErr
argument_list|(
name|docId1
argument_list|)
argument_list|,
name|delIErr
argument_list|(
name|docId2
argument_list|)
argument_list|)
expr_stmt|;
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|true
argument_list|,
name|docId1
argument_list|,
name|docId2
argument_list|)
expr_stmt|;
comment|// deleteByQuery using malformed query (fail)
name|rsp
operator|=
name|update
argument_list|(
name|params
argument_list|(
literal|"update.chain"
argument_list|,
literal|"tolerant-chain-max-errors-10"
argument_list|,
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
operator|.
name|deleteByQuery
argument_list|(
literal|"bogus_field:foo"
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertUpdateTolerantErrors
argument_list|(
literal|"failed oportunistic concurrent delete by query"
argument_list|,
name|rsp
argument_list|,
name|delQErr
argument_list|(
literal|"bogus_field:foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|true
argument_list|,
name|docId1
argument_list|,
name|docId2
argument_list|)
expr_stmt|;
comment|// mix 2 deleteByQuery, one malformed (fail), one that doesn't match anything (ok)
name|rsp
operator|=
name|update
argument_list|(
name|params
argument_list|(
literal|"update.chain"
argument_list|,
literal|"tolerant-chain-max-errors-10"
argument_list|,
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
operator|.
name|deleteByQuery
argument_list|(
literal|"bogus_field:foo"
argument_list|)
operator|.
name|deleteByQuery
argument_list|(
literal|"foo_i:23"
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertUpdateTolerantErrors
argument_list|(
literal|"failed oportunistic concurrent delete by query"
argument_list|,
name|rsp
argument_list|,
name|delQErr
argument_list|(
literal|"bogus_field:foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|true
argument_list|,
name|docId1
argument_list|,
name|docId2
argument_list|)
expr_stmt|;
comment|// mix 2 deleteById using _version_=-1, one for real doc1 (fail), one for bogus id (ok)
name|rsp
operator|=
name|update
argument_list|(
name|params
argument_list|(
literal|"update.chain"
argument_list|,
literal|"tolerant-chain-max-errors-10"
argument_list|,
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
operator|.
name|deleteById
argument_list|(
name|docId1
argument_list|,
operator|-
literal|1L
argument_list|)
operator|.
name|deleteById
argument_list|(
literal|"bogus"
argument_list|,
operator|-
literal|1L
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertUpdateTolerantErrors
argument_list|(
literal|"failed oportunistic concurrent delete by id: exists"
argument_list|,
name|rsp
argument_list|,
name|delIErr
argument_list|(
name|docId1
argument_list|)
argument_list|)
expr_stmt|;
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|true
argument_list|,
name|docId1
argument_list|,
name|docId2
argument_list|)
expr_stmt|;
comment|// mix 2 deleteById using _version_=1, one for real doc1 (ok, deleted), one for bogus id (fail)
name|rsp
operator|=
name|update
argument_list|(
name|params
argument_list|(
literal|"update.chain"
argument_list|,
literal|"tolerant-chain-max-errors-10"
argument_list|,
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
operator|.
name|deleteById
argument_list|(
name|docId1
argument_list|,
operator|+
literal|1L
argument_list|)
operator|.
name|deleteById
argument_list|(
literal|"bogusId"
argument_list|,
operator|+
literal|1L
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertUpdateTolerantErrors
argument_list|(
literal|"failed oportunistic concurrent delete by id: bogus"
argument_list|,
name|rsp
argument_list|,
name|delIErr
argument_list|(
literal|"bogusId"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|false
argument_list|,
name|docId1
argument_list|)
expr_stmt|;
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|true
argument_list|,
name|docId2
argument_list|)
expr_stmt|;
comment|// mix 2 deleteByQuery, one malformed (fail), one that alctaully removes some docs (ok)
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|true
argument_list|,
name|docId2
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|update
argument_list|(
name|params
argument_list|(
literal|"update.chain"
argument_list|,
literal|"tolerant-chain-max-errors-10"
argument_list|,
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
operator|.
name|deleteByQuery
argument_list|(
literal|"bogus_field:foo"
argument_list|)
operator|.
name|deleteByQuery
argument_list|(
literal|"foo_i:1976"
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertUpdateTolerantErrors
argument_list|(
literal|"failed oportunistic concurrent delete by query"
argument_list|,
name|rsp
argument_list|,
name|delQErr
argument_list|(
literal|"bogus_field:foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|false
argument_list|,
name|docId2
argument_list|)
expr_stmt|;
block|}
comment|//
DECL|method|testVariousAddsViaCloudClient
specifier|public
name|void
name|testVariousAddsViaCloudClient
parameter_list|()
throws|throws
name|Exception
block|{
name|testVariousAdds
argument_list|(
name|CLOUD_CLIENT
argument_list|)
expr_stmt|;
block|}
DECL|method|testVariousAddsViaShard1LeaderClient
specifier|public
name|void
name|testVariousAddsViaShard1LeaderClient
parameter_list|()
throws|throws
name|Exception
block|{
name|testVariousAdds
argument_list|(
name|S_ONE_LEADER_CLIENT
argument_list|)
expr_stmt|;
block|}
DECL|method|testVariousAddsViaShard2LeaderClient
specifier|public
name|void
name|testVariousAddsViaShard2LeaderClient
parameter_list|()
throws|throws
name|Exception
block|{
name|testVariousAdds
argument_list|(
name|S_TWO_LEADER_CLIENT
argument_list|)
expr_stmt|;
block|}
DECL|method|testVariousAddsViaShard1NonLeaderClient
specifier|public
name|void
name|testVariousAddsViaShard1NonLeaderClient
parameter_list|()
throws|throws
name|Exception
block|{
name|testVariousAdds
argument_list|(
name|S_ONE_NON_LEADER_CLIENT
argument_list|)
expr_stmt|;
block|}
DECL|method|testVariousAddsViaShard2NonLeaderClient
specifier|public
name|void
name|testVariousAddsViaShard2NonLeaderClient
parameter_list|()
throws|throws
name|Exception
block|{
name|testVariousAdds
argument_list|(
name|S_TWO_NON_LEADER_CLIENT
argument_list|)
expr_stmt|;
block|}
DECL|method|testVariousAddsViaNoCollectionClient
specifier|public
name|void
name|testVariousAddsViaNoCollectionClient
parameter_list|()
throws|throws
name|Exception
block|{
name|testVariousAdds
argument_list|(
name|NO_COLLECTION_CLIENT
argument_list|)
expr_stmt|;
block|}
DECL|method|testVariousAdds
specifier|protected
specifier|static
name|void
name|testVariousAdds
parameter_list|(
name|SolrClient
name|client
parameter_list|)
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
literal|"client not initialized"
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|UpdateResponse
name|rsp
init|=
literal|null
decl_stmt|;
comment|// 2 docs that are both on shard1, the first one should fail
for|for
control|(
name|int
name|maxErrors
range|:
operator|new
name|int
index|[]
block|{
operator|-
literal|1
block|,
literal|2
block|,
literal|47
block|,
literal|10
block|}
control|)
block|{
comment|// regardless of which of these maxErrors values we use, behavior should be the same...
name|rsp
operator|=
name|update
argument_list|(
name|params
argument_list|(
literal|"update.chain"
argument_list|,
literal|"tolerant-chain-max-errors-10"
argument_list|,
literal|"maxErrors"
argument_list|,
literal|""
operator|+
name|maxErrors
argument_list|,
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"42"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"bogus_value"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"666"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"1976"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertUpdateTolerantAddErrors
argument_list|(
literal|"single shard, 1st doc should fail"
argument_list|,
name|rsp
argument_list|,
name|S_ONE_PRE
operator|+
literal|"42"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
operator|.
name|commit
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|false
argument_list|,
name|S_ONE_PRE
operator|+
literal|"42"
argument_list|)
expr_stmt|;
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|true
argument_list|,
name|S_ONE_PRE
operator|+
literal|"666"
argument_list|)
expr_stmt|;
comment|// ...only diff should be that we get an accurate report of the effective maxErrors
name|assertEquals
argument_list|(
name|maxErrors
argument_list|,
name|rsp
operator|.
name|getResponseHeader
argument_list|()
operator|.
name|get
argument_list|(
literal|"maxErrors"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// 2 docs that are both on shard1, the second one should fail
name|rsp
operator|=
name|update
argument_list|(
name|params
argument_list|(
literal|"update.chain"
argument_list|,
literal|"tolerant-chain-max-errors-not-set"
argument_list|,
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"55"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"1976"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"77"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"bogus_val"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertUpdateTolerantAddErrors
argument_list|(
literal|"single shard, 2nd doc should fail"
argument_list|,
name|rsp
argument_list|,
name|S_ONE_PRE
operator|+
literal|"77"
argument_list|)
expr_stmt|;
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|false
argument_list|,
name|S_ONE_PRE
operator|+
literal|"77"
argument_list|)
expr_stmt|;
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|true
argument_list|,
name|S_ONE_PRE
operator|+
literal|"666"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"55"
argument_list|)
expr_stmt|;
comment|// since maxErrors is unset, we should get an "unlimited" value back
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|rsp
operator|.
name|getResponseHeader
argument_list|()
operator|.
name|get
argument_list|(
literal|"maxErrors"
argument_list|)
argument_list|)
expr_stmt|;
comment|// clean slate
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2 docs on 2 diff shards, first of which should fail
name|rsp
operator|=
name|update
argument_list|(
name|params
argument_list|(
literal|"update.chain"
argument_list|,
literal|"tolerant-chain-max-errors-10"
argument_list|,
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"42"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"bogus_value"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"666"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"1976"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertUpdateTolerantAddErrors
argument_list|(
literal|"two shards, 1st doc should fail"
argument_list|,
name|rsp
argument_list|,
name|S_ONE_PRE
operator|+
literal|"42"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
operator|.
name|commit
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|false
argument_list|,
name|S_ONE_PRE
operator|+
literal|"42"
argument_list|)
expr_stmt|;
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|true
argument_list|,
name|S_TWO_PRE
operator|+
literal|"666"
argument_list|)
expr_stmt|;
comment|// 2 docs on 2 diff shards, second of which should fail
name|rsp
operator|=
name|update
argument_list|(
name|params
argument_list|(
literal|"update.chain"
argument_list|,
literal|"tolerant-chain-max-errors-10"
argument_list|,
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"55"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"1976"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"77"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"bogus_val"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertUpdateTolerantAddErrors
argument_list|(
literal|"two shards, 2nd doc should fail"
argument_list|,
name|rsp
argument_list|,
name|S_TWO_PRE
operator|+
literal|"77"
argument_list|)
expr_stmt|;
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|false
argument_list|,
name|S_TWO_PRE
operator|+
literal|"77"
argument_list|)
expr_stmt|;
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|true
argument_list|,
name|S_TWO_PRE
operator|+
literal|"666"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"55"
argument_list|)
expr_stmt|;
comment|// clean slate
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// many docs from diff shards, 1 from each shard should fail
name|rsp
operator|=
name|update
argument_list|(
name|params
argument_list|(
literal|"update.chain"
argument_list|,
literal|"tolerant-chain-max-errors-10"
argument_list|,
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"11"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"21"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"12"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"22"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"bogus_val"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"13"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"23"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"14"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"24"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"15"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"bogus_val"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"25"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"16"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"26"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertUpdateTolerantAddErrors
argument_list|(
literal|"many docs, 1 from each shard should fail"
argument_list|,
name|rsp
argument_list|,
name|S_ONE_PRE
operator|+
literal|"15"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"22"
argument_list|)
expr_stmt|;
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|false
argument_list|,
name|S_TWO_PRE
operator|+
literal|"22"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"15"
argument_list|)
expr_stmt|;
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|true
argument_list|,
name|S_ONE_PRE
operator|+
literal|"11"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"21"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"12"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"13"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"23"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"14"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"24"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"25"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"16"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"26"
argument_list|)
expr_stmt|;
comment|// clean slate
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// many docs from diff shards, 1 from each shard should fail and 1 w/o uniqueKey
name|rsp
operator|=
name|update
argument_list|(
name|params
argument_list|(
literal|"update.chain"
argument_list|,
literal|"tolerant-chain-max-errors-10"
argument_list|,
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"11"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"21"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"12"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"22"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"bogus_val"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"13"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"23"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"42"
argument_list|)
argument_list|)
argument_list|,
comment|// no "id"
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"14"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"24"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"15"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"bogus_val"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"25"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"16"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"26"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertUpdateTolerantAddErrors
argument_list|(
literal|"many docs, 1 from each shard (+ no id) should fail"
argument_list|,
name|rsp
argument_list|,
name|S_ONE_PRE
operator|+
literal|"15"
argument_list|,
literal|"(unknown)"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"22"
argument_list|)
expr_stmt|;
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|false
argument_list|,
name|S_TWO_PRE
operator|+
literal|"22"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"15"
argument_list|)
expr_stmt|;
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|true
argument_list|,
name|S_ONE_PRE
operator|+
literal|"11"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"21"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"12"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"13"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"23"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"14"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"24"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"25"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"16"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"26"
argument_list|)
expr_stmt|;
comment|// clean slate
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// many docs from diff shards, more then 10 (total) should fail
try|try
block|{
name|rsp
operator|=
name|update
argument_list|(
name|params
argument_list|(
literal|"update.chain"
argument_list|,
literal|"tolerant-chain-max-errors-10"
argument_list|,
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"11"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"21"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"bogus_val"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"12"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"22"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"bogus_val"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"13"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"23"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"bogus_val"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"14"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"bogus_val"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"24"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"15"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"bogus_val"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"25"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"16"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"bogus_val"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"26"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"bogus_val"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"17"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"27"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"18"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"bogus_val"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"28"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"bogus_val"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"19"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"bogus_val"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"29"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"bogus_val"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"10"
argument_list|)
argument_list|)
argument_list|,
comment|// may be skipped, more then 10 fails
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"20"
argument_list|)
argument_list|)
comment|// may be skipped, more then 10 fails
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get a top level exception when more then 10 docs failed: "
operator|+
name|rsp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
comment|// we can't make any reliable assertions about the error message, because
comment|// it varies based on how the request was routed -- see SOLR-8830
name|assertEquals
argument_list|(
literal|"not the type of error we were expecting ("
operator|+
name|e
operator|.
name|code
argument_list|()
operator|+
literal|"): "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
comment|// NOTE: we always expect a 400 because we know that's what we would get from these types of errors
comment|// on a single node setup -- a 5xx type error isn't something we should have triggered
literal|400
argument_list|,
name|e
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that the Exceptions metadata can tell us what failed.
name|NamedList
argument_list|<
name|String
argument_list|>
name|remoteErrMetadata
init|=
name|e
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no metadata in: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|remoteErrMetadata
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ToleratedUpdateError
argument_list|>
name|actualKnownErrs
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|ToleratedUpdateError
argument_list|>
argument_list|(
name|remoteErrMetadata
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|actualKnownErrsCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|remoteErrMetadata
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ToleratedUpdateError
name|err
init|=
name|ToleratedUpdateError
operator|.
name|parseMetadataIfToleratedUpdateError
argument_list|(
name|remoteErrMetadata
operator|.
name|getName
argument_list|(
name|i
argument_list|)
argument_list|,
name|remoteErrMetadata
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|err
condition|)
block|{
comment|// some metadata unrelated to this update processor
continue|continue;
block|}
name|actualKnownErrsCount
operator|++
expr_stmt|;
name|actualKnownErrs
operator|.
name|add
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"wrong number of errors in metadata: "
operator|+
name|remoteErrMetadata
operator|.
name|toString
argument_list|()
argument_list|,
literal|11
argument_list|,
name|actualKnownErrsCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"at least one dup error in metadata: "
operator|+
name|remoteErrMetadata
operator|.
name|toString
argument_list|()
argument_list|,
name|actualKnownErrsCount
argument_list|,
name|actualKnownErrs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ToleratedUpdateError
name|err
range|:
name|actualKnownErrs
control|)
block|{
name|assertEquals
argument_list|(
literal|"only expected type of error is ADD: "
operator|+
name|err
argument_list|,
name|CmdType
operator|.
name|ADD
argument_list|,
name|err
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"failed err msg didn't match expected value: "
operator|+
name|err
argument_list|,
name|err
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"bogus_val"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
operator|.
name|commit
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// need to force since update didn't finish
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|false
comment|// explicitly failed
argument_list|,
name|S_TWO_PRE
operator|+
literal|"21"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"22"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"23"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"14"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"15"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"16"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"26"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"18"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"28"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"19"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"29"
comment|//
comment|// // we can't assert for sure these docs were skipped
comment|// // depending on shard we hit, they may have been added async before errors were exceeded
comment|// , S_ONE_PRE + "10", S_TWO_PRE + "20" // skipped
argument_list|)
expr_stmt|;
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|true
argument_list|,
name|S_ONE_PRE
operator|+
literal|"11"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"12"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"13"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"24"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"25"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"17"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"27"
argument_list|)
expr_stmt|;
comment|// clean slate
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// many docs from diff shards, more then 10 from a single shard (two) should fail
try|try
block|{
name|ArrayList
argument_list|<
name|SolrInputDocument
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<
name|SolrInputDocument
argument_list|>
argument_list|(
literal|30
argument_list|)
decl_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|11
condition|;
name|i
operator|++
control|)
block|{
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
name|i
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"bogus_val"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// may be skipped, more then 10 fails
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// may be skipped, more then 10 fails
name|rsp
operator|=
name|update
argument_list|(
name|params
argument_list|(
literal|"update.chain"
argument_list|,
literal|"tolerant-chain-max-errors-10"
argument_list|,
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
name|docs
operator|.
name|toArray
argument_list|(
operator|new
name|SolrInputDocument
index|[
name|docs
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get a top level exception when more then 10 docs failed: "
operator|+
name|rsp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
comment|// we can't make any reliable assertions about the error message, because
comment|// it varies based on how the request was routed -- see SOLR-8830
name|assertEquals
argument_list|(
literal|"not the type of error we were expecting ("
operator|+
name|e
operator|.
name|code
argument_list|()
operator|+
literal|"): "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
comment|// NOTE: we always expect a 400 because we know that's what we would get from these types of errors
comment|// on a single node setup -- a 5xx type error isn't something we should have triggered
literal|400
argument_list|,
name|e
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that the Exceptions metadata can tell us what failed.
name|NamedList
argument_list|<
name|String
argument_list|>
name|remoteErrMetadata
init|=
name|e
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no metadata in: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|remoteErrMetadata
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ToleratedUpdateError
argument_list|>
name|actualKnownErrs
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|ToleratedUpdateError
argument_list|>
argument_list|(
name|remoteErrMetadata
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|actualKnownErrsCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|remoteErrMetadata
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ToleratedUpdateError
name|err
init|=
name|ToleratedUpdateError
operator|.
name|parseMetadataIfToleratedUpdateError
argument_list|(
name|remoteErrMetadata
operator|.
name|getName
argument_list|(
name|i
argument_list|)
argument_list|,
name|remoteErrMetadata
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|err
condition|)
block|{
comment|// some metadata unrelated to this update processor
continue|continue;
block|}
name|actualKnownErrsCount
operator|++
expr_stmt|;
name|actualKnownErrs
operator|.
name|add
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"wrong number of errors in metadata: "
operator|+
name|remoteErrMetadata
operator|.
name|toString
argument_list|()
argument_list|,
literal|11
argument_list|,
name|actualKnownErrsCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"at least one dup error in metadata: "
operator|+
name|remoteErrMetadata
operator|.
name|toString
argument_list|()
argument_list|,
name|actualKnownErrsCount
argument_list|,
name|actualKnownErrs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ToleratedUpdateError
name|err
range|:
name|actualKnownErrs
control|)
block|{
name|assertEquals
argument_list|(
literal|"only expected type of error is ADD: "
operator|+
name|err
argument_list|,
name|CmdType
operator|.
name|ADD
argument_list|,
name|err
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"failed id had unexpected prefix: "
operator|+
name|err
argument_list|,
name|err
operator|.
name|getId
argument_list|()
operator|.
name|startsWith
argument_list|(
name|S_TWO_PRE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"failed err msg didn't match expected value: "
operator|+
name|err
argument_list|,
name|err
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"bogus_val"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
operator|.
name|commit
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// need to force since update didn't finish
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|true
argument_list|,
name|S_ONE_PRE
operator|+
literal|"z"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"y"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"z"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"y"
comment|// first
comment|//
argument_list|,
name|S_ONE_PRE
operator|+
literal|"0"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"1"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"2"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"3"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"4"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"5"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"6"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"7"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"8"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"9"
argument_list|)
expr_stmt|;
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|false
comment|// explicitly failed
argument_list|,
name|S_TWO_PRE
operator|+
literal|"0"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"1"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"2"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"3"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"4"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"5"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"6"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"7"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"8"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"9"
comment|//
comment|// // we can't assert for sure these docs were skipped
comment|// // depending on shard we hit, they may have been added async before errors were exceeded
comment|// , S_ONE_PRE + "x", S_TWO_PRE + "x", // skipped
argument_list|)
expr_stmt|;
comment|// clean slate
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// many docs from diff shards, more then 10 don't have any uniqueKey specified
try|try
block|{
name|ArrayList
argument_list|<
name|SolrInputDocument
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<
name|SolrInputDocument
argument_list|>
argument_list|(
literal|30
argument_list|)
decl_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|11
condition|;
name|i
operator|++
control|)
block|{
comment|// no "id" field
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|(
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// may be skipped, more then 10 fails
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// may be skipped, more then 10 fails
name|rsp
operator|=
name|update
argument_list|(
name|params
argument_list|(
literal|"update.chain"
argument_list|,
literal|"tolerant-chain-max-errors-10"
argument_list|,
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
name|docs
operator|.
name|toArray
argument_list|(
operator|new
name|SolrInputDocument
index|[
name|docs
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get a top level exception when more then 10 docs mising uniqueKey: "
operator|+
name|rsp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
comment|// we can't make any reliable assertions about the error message, because
comment|// it varies based on how the request was routed -- see SOLR-8830
name|assertEquals
argument_list|(
literal|"not the type of error we were expecting ("
operator|+
name|e
operator|.
name|code
argument_list|()
operator|+
literal|"): "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
comment|// NOTE: we always expect a 400 because we know that's what we would get from these types of errors
comment|// on a single node setup -- a 5xx type error isn't something we should have triggered
literal|400
argument_list|,
name|e
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that the Exceptions metadata can tell us what failed.
name|NamedList
argument_list|<
name|String
argument_list|>
name|remoteErrMetadata
init|=
name|e
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no metadata in: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|remoteErrMetadata
argument_list|)
expr_stmt|;
name|int
name|actualKnownErrsCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|remoteErrMetadata
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ToleratedUpdateError
name|err
init|=
name|ToleratedUpdateError
operator|.
name|parseMetadataIfToleratedUpdateError
argument_list|(
name|remoteErrMetadata
operator|.
name|getName
argument_list|(
name|i
argument_list|)
argument_list|,
name|remoteErrMetadata
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|err
condition|)
block|{
comment|// some metadata unrelated to this update processor
continue|continue;
block|}
name|actualKnownErrsCount
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
literal|"only expected type of error is ADD: "
operator|+
name|err
argument_list|,
name|CmdType
operator|.
name|ADD
argument_list|,
name|err
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"failed id didn't match 'unknown': "
operator|+
name|err
argument_list|,
name|err
operator|.
name|getId
argument_list|()
operator|.
name|contains
argument_list|(
literal|"unknown"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"wrong number of errors in metadata: "
operator|+
name|remoteErrMetadata
operator|.
name|toString
argument_list|()
argument_list|,
literal|11
argument_list|,
name|actualKnownErrsCount
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
operator|.
name|commit
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// need to force since update didn't finish
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|true
argument_list|,
name|S_ONE_PRE
operator|+
literal|"z"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"y"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"z"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"y"
comment|// first
comment|// // we can't assert for sure these docs were skipped or added
comment|// // depending on shard we hit, they may have been added async before errors were exceeded
comment|// , S_ONE_PRE + "x", S_TWO_PRE + "x" // skipped
argument_list|)
expr_stmt|;
comment|// clean slate
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// many docs from diff shards, more then 10 from a single shard (two) should fail but
comment|// request should still succeed because of maxErrors=-1 param
name|ArrayList
argument_list|<
name|SolrInputDocument
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<
name|SolrInputDocument
argument_list|>
argument_list|(
literal|30
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|ExpectedErr
argument_list|>
name|expectedErrs
init|=
operator|new
name|ArrayList
argument_list|<
name|ExpectedErr
argument_list|>
argument_list|(
literal|30
argument_list|)
decl_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|11
condition|;
name|i
operator|++
control|)
block|{
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
name|i
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"bogus_val"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|expectedErrs
operator|.
name|add
argument_list|(
name|addErr
argument_list|(
name|S_TWO_PRE
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|update
argument_list|(
name|params
argument_list|(
literal|"update.chain"
argument_list|,
literal|"tolerant-chain-max-errors-10"
argument_list|,
literal|"maxErrors"
argument_list|,
literal|"-1"
argument_list|,
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
name|docs
operator|.
name|toArray
argument_list|(
operator|new
name|SolrInputDocument
index|[
name|docs
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|assertUpdateTolerantErrors
argument_list|(
literal|"many docs from shard2 fail, but req should succeed"
argument_list|,
name|rsp
argument_list|,
name|expectedErrs
operator|.
name|toArray
argument_list|(
operator|new
name|ExpectedErr
index|[
name|expectedErrs
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|true
argument_list|,
name|S_ONE_PRE
operator|+
literal|"z"
argument_list|,
name|S_ONE_PRE
operator|+
literal|"y"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"z"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"y"
comment|// first
argument_list|,
name|S_ONE_PRE
operator|+
literal|"x"
argument_list|,
name|S_TWO_PRE
operator|+
literal|"x"
comment|// later
argument_list|)
expr_stmt|;
block|}
comment|//
DECL|method|testAddsMixedWithDeletesViaCloudClient
specifier|public
name|void
name|testAddsMixedWithDeletesViaCloudClient
parameter_list|()
throws|throws
name|Exception
block|{
name|testAddsMixedWithDeletes
argument_list|(
name|CLOUD_CLIENT
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddsMixedWithDeletesViaShard1LeaderClient
specifier|public
name|void
name|testAddsMixedWithDeletesViaShard1LeaderClient
parameter_list|()
throws|throws
name|Exception
block|{
name|testAddsMixedWithDeletes
argument_list|(
name|S_ONE_LEADER_CLIENT
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddsMixedWithDeletesViaShard2LeaderClient
specifier|public
name|void
name|testAddsMixedWithDeletesViaShard2LeaderClient
parameter_list|()
throws|throws
name|Exception
block|{
name|testAddsMixedWithDeletes
argument_list|(
name|S_TWO_LEADER_CLIENT
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddsMixedWithDeletesViaShard1NonLeaderClient
specifier|public
name|void
name|testAddsMixedWithDeletesViaShard1NonLeaderClient
parameter_list|()
throws|throws
name|Exception
block|{
name|testAddsMixedWithDeletes
argument_list|(
name|S_ONE_NON_LEADER_CLIENT
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddsMixedWithDeletesViaShard2NonLeaderClient
specifier|public
name|void
name|testAddsMixedWithDeletesViaShard2NonLeaderClient
parameter_list|()
throws|throws
name|Exception
block|{
name|testAddsMixedWithDeletes
argument_list|(
name|S_TWO_NON_LEADER_CLIENT
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddsMixedWithDeletesViaNoCollectionClient
specifier|public
name|void
name|testAddsMixedWithDeletesViaNoCollectionClient
parameter_list|()
throws|throws
name|Exception
block|{
name|testAddsMixedWithDeletes
argument_list|(
name|NO_COLLECTION_CLIENT
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddsMixedWithDeletes
specifier|protected
specifier|static
name|void
name|testAddsMixedWithDeletes
parameter_list|(
name|SolrClient
name|client
parameter_list|)
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
literal|"client not initialized"
argument_list|,
name|client
argument_list|)
expr_stmt|;
comment|// 3 doc ids, exactly one on shard1
specifier|final
name|String
name|docId1
init|=
name|S_ONE_PRE
operator|+
literal|"42"
decl_stmt|;
specifier|final
name|String
name|docId21
init|=
name|S_TWO_PRE
operator|+
literal|"42"
decl_stmt|;
specifier|final
name|String
name|docId22
init|=
name|S_TWO_PRE
operator|+
literal|"666"
decl_stmt|;
name|UpdateResponse
name|rsp
init|=
literal|null
decl_stmt|;
comment|// add 2 docs, one to each shard
name|rsp
operator|=
name|update
argument_list|(
name|params
argument_list|(
literal|"update.chain"
argument_list|,
literal|"tolerant-chain-max-errors-10"
argument_list|,
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|docId1
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"2001"
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|docId21
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"1976"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// add failure on shard2, delete failure on shard1
name|rsp
operator|=
name|update
argument_list|(
name|params
argument_list|(
literal|"update.chain"
argument_list|,
literal|"tolerant-chain-max-errors-10"
argument_list|,
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|docId22
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"not_a_num"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|deleteById
argument_list|(
name|docId1
argument_list|,
operator|-
literal|1L
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertUpdateTolerantErrors
argument_list|(
literal|"shard2 add fail, shard1 delI fail"
argument_list|,
name|rsp
argument_list|,
name|delIErr
argument_list|(
name|docId1
argument_list|,
literal|"version conflict"
argument_list|)
argument_list|,
name|addErr
argument_list|(
name|docId22
argument_list|,
literal|"not_a_num"
argument_list|)
argument_list|)
expr_stmt|;
comment|// attempt a request containing 4 errors of various types (add, delI, delQ)
for|for
control|(
name|String
name|maxErrors
range|:
operator|new
name|String
index|[]
block|{
literal|"4"
block|,
literal|"-1"
block|,
literal|"100"
block|}
control|)
block|{
comment|// for all of these maxErrors values, the overall request should still succeed
name|rsp
operator|=
name|update
argument_list|(
name|params
argument_list|(
literal|"update.chain"
argument_list|,
literal|"tolerant-chain-max-errors-10"
argument_list|,
literal|"maxErrors"
argument_list|,
name|maxErrors
argument_list|,
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|docId22
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"bogus_val"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|deleteById
argument_list|(
name|docId1
argument_list|,
operator|-
literal|1L
argument_list|)
operator|.
name|deleteByQuery
argument_list|(
literal|"malformed:["
argument_list|)
operator|.
name|deleteById
argument_list|(
name|docId21
argument_list|,
operator|-
literal|1L
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertUpdateTolerantErrors
argument_list|(
literal|"failed variety of updates"
argument_list|,
name|rsp
argument_list|,
name|delIErr
argument_list|(
name|docId1
argument_list|,
literal|"version conflict"
argument_list|)
argument_list|,
name|delQErr
argument_list|(
literal|"malformed:["
argument_list|,
literal|"SyntaxError"
argument_list|)
argument_list|,
name|delIErr
argument_list|(
name|docId21
argument_list|,
literal|"version conflict"
argument_list|)
argument_list|,
name|addErr
argument_list|(
name|docId22
argument_list|,
literal|"bogus_val"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// attempt a request containing 4 errors of various types (add, delI, delQ) .. 1 too many
try|try
block|{
name|rsp
operator|=
name|update
argument_list|(
name|params
argument_list|(
literal|"update.chain"
argument_list|,
literal|"tolerant-chain-max-errors-10"
argument_list|,
literal|"maxErrors"
argument_list|,
literal|"3"
argument_list|,
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|docId22
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"bogus_val"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|deleteById
argument_list|(
name|docId1
argument_list|,
operator|-
literal|1L
argument_list|)
operator|.
name|deleteByQuery
argument_list|(
literal|"malformed:["
argument_list|)
operator|.
name|deleteById
argument_list|(
name|docId21
argument_list|,
operator|-
literal|1L
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get a top level exception when more then 4 updates failed: "
operator|+
name|rsp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
comment|// we can't make any reliable assertions about the error message, because
comment|// it varies based on how the request was routed -- see SOLR-8830
comment|// likewise, we can't make a firm(er) assertion about the response code...
name|assertTrue
argument_list|(
literal|"not the type of error we were expecting ("
operator|+
name|e
operator|.
name|code
argument_list|()
operator|+
literal|"): "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
comment|// should be one these 2 depending on order that the async errors were hit...
comment|// on a single node setup -- a 5xx type error isn't something we should have triggered
literal|400
operator|==
name|e
operator|.
name|code
argument_list|()
operator|||
literal|409
operator|==
name|e
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that the Exceptions metadata can tell us what failed.
name|NamedList
argument_list|<
name|String
argument_list|>
name|remoteErrMetadata
init|=
name|e
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no metadata in: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|remoteErrMetadata
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ToleratedUpdateError
argument_list|>
name|actualKnownErrs
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|ToleratedUpdateError
argument_list|>
argument_list|(
name|remoteErrMetadata
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|actualKnownErrsCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|remoteErrMetadata
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ToleratedUpdateError
name|err
init|=
name|ToleratedUpdateError
operator|.
name|parseMetadataIfToleratedUpdateError
argument_list|(
name|remoteErrMetadata
operator|.
name|getName
argument_list|(
name|i
argument_list|)
argument_list|,
name|remoteErrMetadata
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|err
condition|)
block|{
comment|// some metadata unrelated to this update processor
continue|continue;
block|}
name|actualKnownErrsCount
operator|++
expr_stmt|;
name|actualKnownErrs
operator|.
name|add
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"wrong number of errors in metadata: "
operator|+
name|remoteErrMetadata
operator|.
name|toString
argument_list|()
argument_list|,
literal|4
argument_list|,
name|actualKnownErrsCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"at least one dup error in metadata: "
operator|+
name|remoteErrMetadata
operator|.
name|toString
argument_list|()
argument_list|,
name|actualKnownErrsCount
argument_list|,
name|actualKnownErrs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// sanity check our 2 existing docs are still here
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|true
argument_list|,
name|docId1
argument_list|,
name|docId21
argument_list|)
expr_stmt|;
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|false
argument_list|,
name|docId22
argument_list|)
expr_stmt|;
comment|// tolerate some failures along with a DELQ that should succeed
name|rsp
operator|=
name|update
argument_list|(
name|params
argument_list|(
literal|"update.chain"
argument_list|,
literal|"tolerant-chain-max-errors-10"
argument_list|,
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|docId22
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|"not_a_num"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|deleteById
argument_list|(
name|docId1
argument_list|,
operator|-
literal|1L
argument_list|)
operator|.
name|deleteByQuery
argument_list|(
literal|"zot_i:[42 to gibberish..."
argument_list|)
operator|.
name|deleteByQuery
argument_list|(
literal|"foo_i:[50 TO 2000}"
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertUpdateTolerantErrors
argument_list|(
literal|"mix fails with one valid DELQ"
argument_list|,
name|rsp
argument_list|,
name|delIErr
argument_list|(
name|docId1
argument_list|,
literal|"version conflict"
argument_list|)
argument_list|,
name|delQErr
argument_list|(
literal|"zot_i:[42 to gibberish..."
argument_list|)
argument_list|,
name|addErr
argument_list|(
name|docId22
argument_list|,
literal|"not_a_num"
argument_list|)
argument_list|)
expr_stmt|;
comment|// one of our previous docs should have been deleted now
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|true
argument_list|,
name|docId1
argument_list|)
expr_stmt|;
name|assertQueryDocIds
argument_list|(
name|client
argument_list|,
literal|false
argument_list|,
name|docId21
argument_list|,
name|docId22
argument_list|)
expr_stmt|;
block|}
comment|/**    * HACK: Loops over every Jetty instance in the specified MiniSolrCloudCluster to see if they are running,    * and sleeps small increments until they all report that they are, or a max num iters is reached    *     * (work around for SOLR-8862.  Maybe something like this should be promoted into MiniSolrCloudCluster's     * start() method? or SolrCloudTestCase's configureCluster?)    */
DECL|method|assertSpinLoopAllJettyAreRunning
specifier|public
specifier|static
name|void
name|assertSpinLoopAllJettyAreRunning
parameter_list|(
name|MiniSolrCloudCluster
name|cluster
parameter_list|)
throws|throws
name|InterruptedException
block|{
comment|// NOTE: idealy we could use an ExecutorService that tried to open Sockets (with a long timeout)
comment|// to each of the jetty instances in parallel w/o any sleeping -- but since they pick their ports
comment|// dynamically and don't report them until/unless the server is up, that won't neccessarily do us
comment|// any good.
specifier|final
name|int
name|numServers
init|=
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numRunning
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|5
init|;
literal|0
operator|<=
name|i
condition|;
name|i
operator|--
control|)
block|{
name|numRunning
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
control|)
block|{
if|if
condition|(
name|jetty
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|numRunning
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|numServers
operator|==
name|numRunning
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
literal|0
operator|==
name|i
condition|)
block|{
comment|// give up
break|break;
block|}
comment|// the more nodes we're waiting on, the longer we should try to sleep (within reason)
name|Thread
operator|.
name|sleep
argument_list|(
name|Math
operator|.
name|min
argument_list|(
operator|(
name|numServers
operator|-
name|numRunning
operator|)
operator|*
literal|100
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"giving up waiting for all jetty instances to be running"
argument_list|,
name|numServers
argument_list|,
name|numRunning
argument_list|)
expr_stmt|;
block|}
comment|/** Asserts that the UpdateResponse contains the specified expectedErrs and no others */
DECL|method|assertUpdateTolerantErrors
specifier|public
specifier|static
name|void
name|assertUpdateTolerantErrors
parameter_list|(
name|String
name|assertionMsgPrefix
parameter_list|,
name|UpdateResponse
name|response
parameter_list|,
name|ExpectedErr
modifier|...
name|expectedErrs
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|<
name|String
argument_list|>
argument_list|>
name|errors
init|=
operator|(
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|<
name|String
argument_list|>
argument_list|>
operator|)
name|response
operator|.
name|getResponseHeader
argument_list|()
operator|.
name|get
argument_list|(
literal|"errors"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|assertionMsgPrefix
operator|+
literal|": Null errors: "
operator|+
name|response
operator|.
name|toString
argument_list|()
argument_list|,
name|errors
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|assertionMsgPrefix
operator|+
literal|": Num error ids: "
operator|+
name|errors
operator|.
name|toString
argument_list|()
argument_list|,
name|expectedErrs
operator|.
name|length
argument_list|,
name|errors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SimpleOrderedMap
argument_list|<
name|String
argument_list|>
name|err
range|:
name|errors
control|)
block|{
name|String
name|assertErrPre
init|=
name|assertionMsgPrefix
operator|+
literal|": "
operator|+
name|err
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|err
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|assertErrPre
operator|+
literal|" ... null id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|String
name|type
init|=
name|err
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|assertErrPre
operator|+
literal|" ... null type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|err
operator|.
name|get
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|assertErrPre
operator|+
literal|" ... null message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
comment|// inefficient scan, but good nough for the size of sets we're dealing with
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ExpectedErr
name|expected
range|:
name|expectedErrs
control|)
block|{
if|if
condition|(
name|expected
operator|.
name|type
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|&&
name|expected
operator|.
name|id
operator|.
name|equals
argument_list|(
name|id
argument_list|)
operator|&&
operator|(
literal|null
operator|==
name|expected
operator|.
name|msgSubStr
operator|||
name|message
operator|.
name|contains
argument_list|(
name|expected
operator|.
name|msgSubStr
argument_list|)
operator|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
name|assertErrPre
operator|+
literal|" ... unexpected err in: "
operator|+
name|response
operator|.
name|toString
argument_list|()
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** convinience method when the only type of errors you expect are 'add' errors */
DECL|method|assertUpdateTolerantAddErrors
specifier|public
specifier|static
name|void
name|assertUpdateTolerantAddErrors
parameter_list|(
name|String
name|assertionMsgPrefix
parameter_list|,
name|UpdateResponse
name|response
parameter_list|,
name|String
modifier|...
name|errorIdsExpected
parameter_list|)
block|{
name|ExpectedErr
index|[]
name|expected
init|=
operator|new
name|ExpectedErr
index|[
name|errorIdsExpected
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|expected
index|[
name|i
index|]
operator|=
name|addErr
argument_list|(
name|errorIdsExpected
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertUpdateTolerantErrors
argument_list|(
name|assertionMsgPrefix
argument_list|,
name|response
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
comment|/**     * Asserts that the specified document ids do/do-not exist in the index, using both the specified client,     * and the CLOUD_CLIENT     */
DECL|method|assertQueryDocIds
specifier|public
specifier|static
name|void
name|assertQueryDocIds
parameter_list|(
name|SolrClient
name|client
parameter_list|,
name|boolean
name|shouldExist
parameter_list|,
name|String
modifier|...
name|ids
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
name|assertEquals
argument_list|(
name|client
operator|.
name|toString
argument_list|()
operator|+
literal|" should "
operator|+
operator|(
name|shouldExist
condition|?
literal|""
else|:
literal|"not "
operator|)
operator|+
literal|"find id: "
operator|+
name|id
argument_list|,
operator|(
name|shouldExist
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|,
name|CLOUD_CLIENT
operator|.
name|query
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"{!term f=id}"
operator|+
name|id
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|CLOUD_CLIENT
operator|.
name|equals
argument_list|(
name|client
argument_list|)
condition|)
block|{
name|assertQueryDocIds
argument_list|(
name|CLOUD_CLIENT
argument_list|,
name|shouldExist
argument_list|,
name|ids
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|update
specifier|public
specifier|static
name|UpdateRequest
name|update
parameter_list|(
name|SolrParams
name|params
parameter_list|,
name|SolrInputDocument
modifier|...
name|docs
parameter_list|)
block|{
name|UpdateRequest
name|r
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|r
operator|.
name|setParams
argument_list|(
operator|new
name|ModifiableSolrParams
argument_list|(
name|params
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|add
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|docs
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
DECL|method|doc
specifier|public
specifier|static
name|SolrInputDocument
name|doc
parameter_list|(
name|SolrInputField
modifier|...
name|fields
parameter_list|)
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
for|for
control|(
name|SolrInputField
name|f
range|:
name|fields
control|)
block|{
name|doc
operator|.
name|put
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
DECL|method|f
specifier|public
specifier|static
name|SolrInputField
name|f
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Object
modifier|...
name|values
parameter_list|)
block|{
name|SolrInputField
name|f
init|=
operator|new
name|SolrInputField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|f
operator|.
name|setValue
argument_list|(
name|values
argument_list|,
literal|1.0F
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
comment|/** simple helper struct */
DECL|class|ExpectedErr
specifier|public
specifier|static
specifier|final
class|class
name|ExpectedErr
block|{
DECL|field|type
specifier|final
name|String
name|type
decl_stmt|;
DECL|field|id
specifier|final
name|String
name|id
decl_stmt|;
DECL|field|msgSubStr
specifier|final
name|String
name|msgSubStr
decl_stmt|;
comment|// ignored if null
DECL|method|ExpectedErr
specifier|public
name|ExpectedErr
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|msgSubStr
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|msgSubStr
operator|=
name|msgSubStr
expr_stmt|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"type=<"
operator|+
name|type
operator|+
literal|">,id=<"
operator|+
name|id
operator|+
literal|">,msgSubStr=<"
operator|+
name|msgSubStr
operator|+
literal|">"
return|;
block|}
block|}
DECL|method|addErr
specifier|public
specifier|static
name|ExpectedErr
name|addErr
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|msgSubStr
parameter_list|)
block|{
return|return
operator|new
name|ExpectedErr
argument_list|(
literal|"ADD"
argument_list|,
name|id
argument_list|,
name|msgSubStr
argument_list|)
return|;
block|}
DECL|method|delIErr
specifier|public
specifier|static
name|ExpectedErr
name|delIErr
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|msgSubStr
parameter_list|)
block|{
return|return
operator|new
name|ExpectedErr
argument_list|(
literal|"DELID"
argument_list|,
name|id
argument_list|,
name|msgSubStr
argument_list|)
return|;
block|}
DECL|method|delQErr
specifier|public
specifier|static
name|ExpectedErr
name|delQErr
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|msgSubStr
parameter_list|)
block|{
return|return
operator|new
name|ExpectedErr
argument_list|(
literal|"DELQ"
argument_list|,
name|id
argument_list|,
name|msgSubStr
argument_list|)
return|;
block|}
DECL|method|addErr
specifier|public
specifier|static
name|ExpectedErr
name|addErr
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
name|addErr
argument_list|(
name|id
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|delIErr
specifier|public
specifier|static
name|ExpectedErr
name|delIErr
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
name|delIErr
argument_list|(
name|id
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|delQErr
specifier|public
specifier|static
name|ExpectedErr
name|delQErr
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
name|delQErr
argument_list|(
name|id
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
end_class
end_unit
