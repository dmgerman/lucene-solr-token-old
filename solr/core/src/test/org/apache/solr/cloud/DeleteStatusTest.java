begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|CollectionAdminResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|RequestStatusState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|DeleteStatusTest
specifier|public
class|class
name|DeleteStatusTest
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|MAX_WAIT_TIMEOUT
specifier|public
specifier|static
specifier|final
name|int
name|MAX_WAIT_TIMEOUT
init|=
literal|30
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|createCluster
specifier|public
specifier|static
name|void
name|createCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|configureCluster
argument_list|(
literal|2
argument_list|)
operator|.
name|addConfig
argument_list|(
literal|"conf1"
argument_list|,
name|TEST_PATH
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"configsets"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"cloud-minimal"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"conf"
argument_list|)
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
block|}
comment|// Basically equivalent to RequestStatus.waitFor(), but doesn't delete the id from the queue
DECL|method|waitForRequestState
specifier|private
specifier|static
name|RequestStatusState
name|waitForRequestState
parameter_list|(
name|String
name|id
parameter_list|,
name|SolrClient
name|client
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
throws|,
name|InterruptedException
block|{
name|RequestStatusState
name|state
init|=
name|RequestStatusState
operator|.
name|SUBMITTED
decl_stmt|;
name|long
name|endTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
operator|+
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toNanos
argument_list|(
name|MAX_WAIT_TIMEOUT
argument_list|)
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|<
name|endTime
condition|)
block|{
name|state
operator|=
name|CollectionAdminRequest
operator|.
name|requestStatus
argument_list|(
name|id
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
operator|.
name|getRequestStatus
argument_list|()
expr_stmt|;
if|if
condition|(
name|state
operator|==
name|RequestStatusState
operator|.
name|COMPLETED
condition|)
break|break;
name|assumeTrue
argument_list|(
literal|"Error creating collection - skipping test"
argument_list|,
name|state
operator|!=
name|RequestStatusState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|assumeTrue
argument_list|(
literal|"Timed out creating collection - skipping test"
argument_list|,
name|state
operator|==
name|RequestStatusState
operator|.
name|COMPLETED
argument_list|)
expr_stmt|;
return|return
name|state
return|;
block|}
annotation|@
name|Test
DECL|method|testAsyncIdsMayBeDeleted
specifier|public
name|void
name|testAsyncIdsMayBeDeleted
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CloudSolrClient
name|client
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
specifier|final
name|String
name|collection
init|=
literal|"deletestatus"
decl_stmt|;
specifier|final
name|String
name|asyncId
init|=
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collection
argument_list|,
literal|"conf1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|processAsync
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|waitForRequestState
argument_list|(
name|asyncId
argument_list|,
name|client
argument_list|,
name|MAX_WAIT_TIMEOUT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RequestStatusState
operator|.
name|COMPLETED
argument_list|,
name|CollectionAdminRequest
operator|.
name|requestStatus
argument_list|(
name|asyncId
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
operator|.
name|getRequestStatus
argument_list|()
argument_list|)
expr_stmt|;
name|CollectionAdminResponse
name|rsp
init|=
name|CollectionAdminRequest
operator|.
name|deleteAsyncId
argument_list|(
name|asyncId
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"successfully removed stored response for ["
operator|+
name|asyncId
operator|+
literal|"]"
argument_list|,
name|rsp
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"status"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RequestStatusState
operator|.
name|NOT_FOUND
argument_list|,
name|CollectionAdminRequest
operator|.
name|requestStatus
argument_list|(
name|asyncId
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
operator|.
name|getRequestStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeletingNonExistentRequests
specifier|public
name|void
name|testDeletingNonExistentRequests
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CloudSolrClient
name|client
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
name|CollectionAdminResponse
name|rsp
init|=
name|CollectionAdminRequest
operator|.
name|deleteAsyncId
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[foo] not found in stored responses"
argument_list|,
name|rsp
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"status"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProcessAndWaitDeletesAsyncIds
specifier|public
name|void
name|testProcessAndWaitDeletesAsyncIds
parameter_list|()
throws|throws
name|IOException
throws|,
name|SolrServerException
throws|,
name|InterruptedException
block|{
specifier|final
name|CloudSolrClient
name|client
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
name|RequestStatusState
name|state
init|=
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"requeststatus"
argument_list|,
literal|"conf1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|processAndWait
argument_list|(
literal|"request1"
argument_list|,
name|client
argument_list|,
name|MAX_WAIT_TIMEOUT
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|RequestStatusState
operator|.
name|COMPLETED
argument_list|,
name|state
argument_list|)
expr_stmt|;
comment|// using processAndWait deletes the requestid
name|state
operator|=
name|CollectionAdminRequest
operator|.
name|requestStatus
argument_list|(
literal|"request1"
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
operator|.
name|getRequestStatus
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
literal|"Request id was not deleted by processAndWait call"
argument_list|,
name|RequestStatusState
operator|.
name|NOT_FOUND
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteStatusFlush
specifier|public
name|void
name|testDeleteStatusFlush
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CloudSolrClient
name|client
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
name|String
name|id1
init|=
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"flush1"
argument_list|,
literal|"conf1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|processAsync
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|String
name|id2
init|=
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"flush2"
argument_list|,
literal|"conf1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|processAsync
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|RequestStatusState
operator|.
name|COMPLETED
argument_list|,
name|waitForRequestState
argument_list|(
name|id1
argument_list|,
name|client
argument_list|,
name|MAX_WAIT_TIMEOUT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RequestStatusState
operator|.
name|COMPLETED
argument_list|,
name|waitForRequestState
argument_list|(
name|id2
argument_list|,
name|client
argument_list|,
name|MAX_WAIT_TIMEOUT
argument_list|)
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|deleteAllAsyncIds
argument_list|()
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RequestStatusState
operator|.
name|NOT_FOUND
argument_list|,
name|CollectionAdminRequest
operator|.
name|requestStatus
argument_list|(
name|id1
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
operator|.
name|getRequestStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RequestStatusState
operator|.
name|NOT_FOUND
argument_list|,
name|CollectionAdminRequest
operator|.
name|requestStatus
argument_list|(
name|id2
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
operator|.
name|getRequestStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testDeprecatedConstructorValidation
specifier|public
name|void
name|testDeprecatedConstructorValidation
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CloudSolrClient
name|client
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
try|try
block|{
operator|new
name|CollectionAdminRequest
operator|.
name|DeleteStatus
argument_list|()
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"delete status should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Either requestid or flush parameter must be specified."
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|CollectionAdminRequest
operator|.
name|DeleteStatus
argument_list|()
operator|.
name|setFlush
argument_list|(
literal|true
argument_list|)
operator|.
name|setRequestId
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"delete status should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Both requestid and flush parameters can not be specified together."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
