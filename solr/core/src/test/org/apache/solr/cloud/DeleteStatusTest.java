begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|CollectionAdminResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|RequestStatusState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|DeleteStatusTest
specifier|public
class|class
name|DeleteStatusTest
extends|extends
name|AbstractFullDistribZkTestBase
block|{
annotation|@
name|Test
DECL|method|testDeleteStatus
specifier|public
name|void
name|testDeleteStatus
parameter_list|()
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|CollectionAdminRequest
operator|.
name|Create
name|create
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|Create
argument_list|()
decl_stmt|;
name|create
operator|.
name|setCollectionName
argument_list|(
literal|"requeststatus"
argument_list|)
operator|.
name|setConfigName
argument_list|(
literal|"conf1"
argument_list|)
operator|.
name|setReplicationFactor
argument_list|(
literal|1
argument_list|)
operator|.
name|setNumShards
argument_list|(
literal|1
argument_list|)
operator|.
name|setAsyncId
argument_list|(
literal|"collectioncreate"
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|RequestStatusState
name|state
init|=
name|getRequestStateAfterCompletion
argument_list|(
literal|"collectioncreate"
argument_list|,
literal|30
argument_list|,
name|cloudClient
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|RequestStatusState
operator|.
name|COMPLETED
argument_list|,
name|state
argument_list|)
expr_stmt|;
comment|// Let's delete the stored response now
name|CollectionAdminRequest
operator|.
name|DeleteStatus
name|deleteStatus
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|DeleteStatus
argument_list|()
decl_stmt|;
name|CollectionAdminResponse
name|rsp
init|=
name|deleteStatus
operator|.
name|setRequestId
argument_list|(
literal|"collectioncreate"
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"successfully removed stored response for [collectioncreate]"
argument_list|,
name|rsp
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"status"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure that the response was deleted from zk
name|state
operator|=
name|getRequestState
argument_list|(
literal|"collectioncreate"
argument_list|,
name|cloudClient
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|RequestStatusState
operator|.
name|NOT_FOUND
argument_list|,
name|state
argument_list|)
expr_stmt|;
comment|// Try deleting the same requestid again
name|deleteStatus
operator|=
operator|new
name|CollectionAdminRequest
operator|.
name|DeleteStatus
argument_list|()
expr_stmt|;
name|rsp
operator|=
name|deleteStatus
operator|.
name|setRequestId
argument_list|(
literal|"collectioncreate"
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[collectioncreate] not found in stored responses"
argument_list|,
name|rsp
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"status"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Let's try deleting a non-existent status
name|deleteStatus
operator|=
operator|new
name|CollectionAdminRequest
operator|.
name|DeleteStatus
argument_list|()
expr_stmt|;
name|rsp
operator|=
name|deleteStatus
operator|.
name|setRequestId
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[foo] not found in stored responses"
argument_list|,
name|rsp
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"status"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteStatusFlush
specifier|public
name|void
name|testDeleteStatusFlush
parameter_list|()
throws|throws
name|Exception
block|{
name|CollectionAdminRequest
operator|.
name|Create
name|create
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|Create
argument_list|()
decl_stmt|;
name|create
operator|.
name|setConfigName
argument_list|(
literal|"conf1"
argument_list|)
operator|.
name|setCollectionName
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|setAsyncId
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|setNumShards
argument_list|(
literal|1
argument_list|)
operator|.
name|setReplicationFactor
argument_list|(
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|create
operator|=
operator|new
name|CollectionAdminRequest
operator|.
name|Create
argument_list|()
expr_stmt|;
name|create
operator|.
name|setConfigName
argument_list|(
literal|"conf1"
argument_list|)
operator|.
name|setCollectionName
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|setAsyncId
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|setNumShards
argument_list|(
literal|1
argument_list|)
operator|.
name|setReplicationFactor
argument_list|(
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|RequestStatusState
name|state
init|=
name|getRequestStateAfterCompletion
argument_list|(
literal|"foo"
argument_list|,
literal|30
argument_list|,
name|cloudClient
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|RequestStatusState
operator|.
name|COMPLETED
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|state
operator|=
name|getRequestStateAfterCompletion
argument_list|(
literal|"bar"
argument_list|,
literal|30
argument_list|,
name|cloudClient
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RequestStatusState
operator|.
name|COMPLETED
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|DeleteStatus
name|deleteStatus
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|DeleteStatus
argument_list|()
decl_stmt|;
name|deleteStatus
operator|.
name|setFlush
argument_list|(
literal|true
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RequestStatusState
operator|.
name|NOT_FOUND
argument_list|,
name|getRequestState
argument_list|(
literal|"foo"
argument_list|,
name|cloudClient
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RequestStatusState
operator|.
name|NOT_FOUND
argument_list|,
name|getRequestState
argument_list|(
literal|"bar"
argument_list|,
name|cloudClient
argument_list|)
argument_list|)
expr_stmt|;
name|deleteStatus
operator|=
operator|new
name|CollectionAdminRequest
operator|.
name|DeleteStatus
argument_list|()
expr_stmt|;
try|try
block|{
name|deleteStatus
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"delete status should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HttpSolrClient
operator|.
name|RemoteSolrException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Either requestid or flush parameter must be specified."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|deleteStatus
operator|=
operator|new
name|CollectionAdminRequest
operator|.
name|DeleteStatus
argument_list|()
expr_stmt|;
try|try
block|{
name|deleteStatus
operator|.
name|setFlush
argument_list|(
literal|true
argument_list|)
operator|.
name|setRequestId
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"delete status should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HttpSolrClient
operator|.
name|RemoteSolrException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Both requestid and flush parameters can not be specified together."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
