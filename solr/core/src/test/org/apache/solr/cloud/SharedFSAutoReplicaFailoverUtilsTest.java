begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerAutoReplicaFailoverThread
operator|.
name|DownReplica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|SharedFSAutoReplicaFailoverUtilsTest
specifier|public
class|class
name|SharedFSAutoReplicaFailoverUtilsTest
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|NODE6
specifier|private
specifier|static
specifier|final
name|String
name|NODE6
init|=
literal|"baseUrl6_"
decl_stmt|;
DECL|field|NODE6_URL
specifier|private
specifier|static
specifier|final
name|String
name|NODE6_URL
init|=
literal|"http://baseUrl6"
decl_stmt|;
DECL|field|NODE5
specifier|private
specifier|static
specifier|final
name|String
name|NODE5
init|=
literal|"baseUrl5_"
decl_stmt|;
DECL|field|NODE5_URL
specifier|private
specifier|static
specifier|final
name|String
name|NODE5_URL
init|=
literal|"http://baseUrl5"
decl_stmt|;
DECL|field|NODE4
specifier|private
specifier|static
specifier|final
name|String
name|NODE4
init|=
literal|"baseUrl4_"
decl_stmt|;
DECL|field|NODE4_URL
specifier|private
specifier|static
specifier|final
name|String
name|NODE4_URL
init|=
literal|"http://baseUrl4"
decl_stmt|;
DECL|field|NODE3
specifier|private
specifier|static
specifier|final
name|String
name|NODE3
init|=
literal|"baseUrl3_"
decl_stmt|;
DECL|field|NODE3_URL
specifier|private
specifier|static
specifier|final
name|String
name|NODE3_URL
init|=
literal|"http://baseUrl3"
decl_stmt|;
DECL|field|NODE2
specifier|private
specifier|static
specifier|final
name|String
name|NODE2
init|=
literal|"baseUrl2_"
decl_stmt|;
DECL|field|NODE2_URL
specifier|private
specifier|static
specifier|final
name|String
name|NODE2_URL
init|=
literal|"http://baseUrl2"
decl_stmt|;
DECL|field|NODE1
specifier|private
specifier|static
specifier|final
name|String
name|NODE1
init|=
literal|"baseUrl1_"
decl_stmt|;
DECL|field|NODE1_URL
specifier|private
specifier|static
specifier|final
name|String
name|NODE1_URL
init|=
literal|"http://baseUrl1"
decl_stmt|;
DECL|field|BLUEPRINT
specifier|private
specifier|final
specifier|static
name|Pattern
name|BLUEPRINT
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([a-z])(\\d+)?(?:(['A','R','D','F']))?(\\*)?"
argument_list|)
decl_stmt|;
DECL|field|buildNumber
specifier|private
name|int
name|buildNumber
init|=
literal|1
decl_stmt|;
DECL|field|results
specifier|private
name|List
argument_list|<
name|Result
argument_list|>
name|results
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|results
operator|=
operator|new
name|ArrayList
argument_list|<
name|Result
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|results
control|)
block|{
name|result
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetBestCreateUrlBasics
specifier|public
name|void
name|testGetBestCreateUrlBasics
parameter_list|()
block|{
name|Result
name|result
init|=
name|buildClusterState
argument_list|(
literal|"csr1R*r2"
argument_list|,
name|NODE1
argument_list|)
decl_stmt|;
name|String
name|createUrl
init|=
name|OverseerAutoReplicaFailoverThread
operator|.
name|getBestCreateUrl
argument_list|(
name|result
operator|.
name|reader
argument_list|,
name|result
operator|.
name|badReplica
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Should be no live node to failover to"
argument_list|,
name|createUrl
argument_list|)
expr_stmt|;
name|result
operator|=
name|buildClusterState
argument_list|(
literal|"csr1R*r2"
argument_list|,
name|NODE1
argument_list|,
name|NODE2
argument_list|)
expr_stmt|;
name|createUrl
operator|=
name|OverseerAutoReplicaFailoverThread
operator|.
name|getBestCreateUrl
argument_list|(
name|result
operator|.
name|reader
argument_list|,
name|result
operator|.
name|badReplica
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Only failover candidate node already has a replica"
argument_list|,
name|createUrl
argument_list|)
expr_stmt|;
name|result
operator|=
name|buildClusterState
argument_list|(
literal|"csr1R*r2sr3"
argument_list|,
name|NODE1
argument_list|,
name|NODE2
argument_list|,
name|NODE3
argument_list|)
expr_stmt|;
name|createUrl
operator|=
name|OverseerAutoReplicaFailoverThread
operator|.
name|getBestCreateUrl
argument_list|(
name|result
operator|.
name|reader
argument_list|,
name|result
operator|.
name|badReplica
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Node3 does not have a replica from the bad slice and should be the best choice"
argument_list|,
name|NODE3_URL
argument_list|,
name|createUrl
argument_list|)
expr_stmt|;
name|result
operator|=
name|buildClusterState
argument_list|(
literal|"csr1R*r2-4sr3r4r5"
argument_list|,
name|NODE1
argument_list|,
name|NODE2
argument_list|,
name|NODE3
argument_list|)
expr_stmt|;
name|createUrl
operator|=
name|OverseerAutoReplicaFailoverThread
operator|.
name|getBestCreateUrl
argument_list|(
name|result
operator|.
name|reader
argument_list|,
name|result
operator|.
name|badReplica
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|createUrl
operator|.
name|equals
argument_list|(
name|NODE2_URL
argument_list|)
operator|||
name|createUrl
operator|.
name|equals
argument_list|(
name|NODE3_URL
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|buildClusterState
argument_list|(
literal|"csr1*r2r3sr3r3sr4"
argument_list|,
name|NODE1
argument_list|,
name|NODE2
argument_list|,
name|NODE3
argument_list|,
name|NODE4
argument_list|)
expr_stmt|;
name|createUrl
operator|=
name|OverseerAutoReplicaFailoverThread
operator|.
name|getBestCreateUrl
argument_list|(
name|result
operator|.
name|reader
argument_list|,
name|result
operator|.
name|badReplica
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NODE4_URL
argument_list|,
name|createUrl
argument_list|)
expr_stmt|;
name|result
operator|=
name|buildClusterState
argument_list|(
literal|"csr1*r2sr3r3sr4sr4"
argument_list|,
name|NODE1
argument_list|,
name|NODE2
argument_list|,
name|NODE3
argument_list|,
name|NODE4
argument_list|)
expr_stmt|;
name|createUrl
operator|=
name|OverseerAutoReplicaFailoverThread
operator|.
name|getBestCreateUrl
argument_list|(
name|result
operator|.
name|reader
argument_list|,
name|result
operator|.
name|badReplica
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|createUrl
operator|.
name|equals
argument_list|(
name|NODE3_URL
argument_list|)
operator|||
name|createUrl
operator|.
name|equals
argument_list|(
name|NODE4_URL
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|Result
specifier|private
specifier|static
class|class
name|Result
implements|implements
name|Closeable
block|{
DECL|field|badReplica
name|DownReplica
name|badReplica
decl_stmt|;
DECL|field|reader
name|ZkStateReader
name|reader
decl_stmt|;
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetBestCreateUrlMultipleCollections
specifier|public
name|void
name|testGetBestCreateUrlMultipleCollections
parameter_list|()
throws|throws
name|Exception
block|{
name|Result
name|result
init|=
name|buildClusterState
argument_list|(
literal|"csr*r2csr2"
argument_list|,
name|NODE1
argument_list|)
decl_stmt|;
name|String
name|createUrl
init|=
name|OverseerAutoReplicaFailoverThread
operator|.
name|getBestCreateUrl
argument_list|(
name|result
operator|.
name|reader
argument_list|,
name|result
operator|.
name|badReplica
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|createUrl
argument_list|)
expr_stmt|;
name|result
operator|=
name|buildClusterState
argument_list|(
literal|"csr*r2csr2"
argument_list|,
name|NODE1
argument_list|)
expr_stmt|;
name|createUrl
operator|=
name|OverseerAutoReplicaFailoverThread
operator|.
name|getBestCreateUrl
argument_list|(
name|result
operator|.
name|reader
argument_list|,
name|result
operator|.
name|badReplica
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|createUrl
argument_list|)
expr_stmt|;
name|result
operator|=
name|buildClusterState
argument_list|(
literal|"csr*r2csr2"
argument_list|,
name|NODE1
argument_list|,
name|NODE2
argument_list|)
expr_stmt|;
name|createUrl
operator|=
name|OverseerAutoReplicaFailoverThread
operator|.
name|getBestCreateUrl
argument_list|(
name|result
operator|.
name|reader
argument_list|,
name|result
operator|.
name|badReplica
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|createUrl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetBestCreateUrlMultipleCollections2
specifier|public
name|void
name|testGetBestCreateUrlMultipleCollections2
parameter_list|()
block|{
name|Result
name|result
init|=
name|buildClusterState
argument_list|(
literal|"csr*r2sr3cr2"
argument_list|,
name|NODE1
argument_list|)
decl_stmt|;
name|String
name|createUrl
init|=
name|OverseerAutoReplicaFailoverThread
operator|.
name|getBestCreateUrl
argument_list|(
name|result
operator|.
name|reader
argument_list|,
name|result
operator|.
name|badReplica
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|createUrl
argument_list|)
expr_stmt|;
name|result
operator|=
name|buildClusterState
argument_list|(
literal|"csr*r2sr3cr2"
argument_list|,
name|NODE1
argument_list|,
name|NODE2
argument_list|,
name|NODE3
argument_list|)
expr_stmt|;
name|createUrl
operator|=
name|OverseerAutoReplicaFailoverThread
operator|.
name|getBestCreateUrl
argument_list|(
name|result
operator|.
name|reader
argument_list|,
name|result
operator|.
name|badReplica
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NODE3_URL
argument_list|,
name|createUrl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetBestCreateUrlMultipleCollections3
specifier|public
name|void
name|testGetBestCreateUrlMultipleCollections3
parameter_list|()
block|{
name|Result
name|result
init|=
name|buildClusterState
argument_list|(
literal|"csr5r1sr4r2sr3r6csr2*r6sr5r3sr4r3"
argument_list|,
name|NODE1
argument_list|,
name|NODE4
argument_list|,
name|NODE5
argument_list|,
name|NODE6
argument_list|)
decl_stmt|;
name|String
name|createUrl
init|=
name|OverseerAutoReplicaFailoverThread
operator|.
name|getBestCreateUrl
argument_list|(
name|result
operator|.
name|reader
argument_list|,
name|result
operator|.
name|badReplica
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NODE1_URL
argument_list|,
name|createUrl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetBestCreateUrlMultipleCollections4
specifier|public
name|void
name|testGetBestCreateUrlMultipleCollections4
parameter_list|()
block|{
name|Result
name|result
init|=
name|buildClusterState
argument_list|(
literal|"csr1r4sr3r5sr2r6csr5r6sr4r6sr5*r4"
argument_list|,
name|NODE6
argument_list|)
decl_stmt|;
name|String
name|createUrl
init|=
name|OverseerAutoReplicaFailoverThread
operator|.
name|getBestCreateUrl
argument_list|(
name|result
operator|.
name|reader
argument_list|,
name|result
operator|.
name|badReplica
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NODE6_URL
argument_list|,
name|createUrl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailOverToEmptySolrInstance
specifier|public
name|void
name|testFailOverToEmptySolrInstance
parameter_list|()
block|{
name|Result
name|result
init|=
name|buildClusterState
argument_list|(
literal|"csr1*r1sr1csr1"
argument_list|,
name|NODE2
argument_list|)
decl_stmt|;
name|String
name|createUrl
init|=
name|OverseerAutoReplicaFailoverThread
operator|.
name|getBestCreateUrl
argument_list|(
name|result
operator|.
name|reader
argument_list|,
name|result
operator|.
name|badReplica
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NODE2_URL
argument_list|,
name|createUrl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFavorForeignSlices
specifier|public
name|void
name|testFavorForeignSlices
parameter_list|()
block|{
name|Result
name|result
init|=
name|buildClusterState
argument_list|(
literal|"csr*sr2csr3r3"
argument_list|,
name|NODE2
argument_list|,
name|NODE3
argument_list|)
decl_stmt|;
name|String
name|createUrl
init|=
name|OverseerAutoReplicaFailoverThread
operator|.
name|getBestCreateUrl
argument_list|(
name|result
operator|.
name|reader
argument_list|,
name|result
operator|.
name|badReplica
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NODE3_URL
argument_list|,
name|createUrl
argument_list|)
expr_stmt|;
name|result
operator|=
name|buildClusterState
argument_list|(
literal|"csr*sr2csr3r3r3r3r3r3r3"
argument_list|,
name|NODE2
argument_list|,
name|NODE3
argument_list|)
expr_stmt|;
name|createUrl
operator|=
name|OverseerAutoReplicaFailoverThread
operator|.
name|getBestCreateUrl
argument_list|(
name|result
operator|.
name|reader
argument_list|,
name|result
operator|.
name|badReplica
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NODE2_URL
argument_list|,
name|createUrl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCollectionMaxNodesPerShard
specifier|public
name|void
name|testCollectionMaxNodesPerShard
parameter_list|()
block|{
name|Result
name|result
init|=
name|buildClusterState
argument_list|(
literal|"csr*sr2"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|NODE2
argument_list|)
decl_stmt|;
name|String
name|createUrl
init|=
name|OverseerAutoReplicaFailoverThread
operator|.
name|getBestCreateUrl
argument_list|(
name|result
operator|.
name|reader
argument_list|,
name|result
operator|.
name|badReplica
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|createUrl
argument_list|)
expr_stmt|;
name|result
operator|=
name|buildClusterState
argument_list|(
literal|"csr*sr2"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|NODE2
argument_list|)
expr_stmt|;
name|createUrl
operator|=
name|OverseerAutoReplicaFailoverThread
operator|.
name|getBestCreateUrl
argument_list|(
name|result
operator|.
name|reader
argument_list|,
name|result
operator|.
name|badReplica
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NODE2_URL
argument_list|,
name|createUrl
argument_list|)
expr_stmt|;
name|result
operator|=
name|buildClusterState
argument_list|(
literal|"csr*csr2r2"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|NODE2
argument_list|)
expr_stmt|;
name|createUrl
operator|=
name|OverseerAutoReplicaFailoverThread
operator|.
name|getBestCreateUrl
argument_list|(
name|result
operator|.
name|reader
argument_list|,
name|result
operator|.
name|badReplica
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NODE2_URL
argument_list|,
name|createUrl
argument_list|)
expr_stmt|;
block|}
DECL|method|buildClusterState
specifier|private
name|Result
name|buildClusterState
parameter_list|(
name|String
name|string
parameter_list|,
name|String
modifier|...
name|liveNodes
parameter_list|)
block|{
return|return
name|buildClusterState
argument_list|(
name|string
argument_list|,
literal|1
argument_list|,
name|liveNodes
argument_list|)
return|;
block|}
DECL|method|buildClusterState
specifier|private
name|Result
name|buildClusterState
parameter_list|(
name|String
name|string
parameter_list|,
name|int
name|replicationFactor
parameter_list|,
name|String
modifier|...
name|liveNodes
parameter_list|)
block|{
return|return
name|buildClusterState
argument_list|(
name|string
argument_list|,
name|replicationFactor
argument_list|,
literal|10
argument_list|,
name|liveNodes
argument_list|)
return|;
block|}
comment|/**    * This method lets you construct a complex ClusterState object by using simple strings of letters.    *     * c = collection, s = slice, r = replica, \d = node number (r2 means the replica is on node 2),     * state = [A,R,D,F], * = replica to replace, binds to the left.    *     * For example:    * csrr2rD*sr2csr    *     * Creates:    *     * 'csrr2rD*'    * A collection, a shard, a replica on node 1 (the default) that is active (the default), a replica on node 2, and a replica on node 1    * that has a state of down and is the replica we will be looking to put somewhere else (the *).    *     * 'sr2'    * Then, another shard that has a replica on node 2.    *     * 'csr'    * Then, another collection that has a shard with a single active replica on node 1.    *     * Result:    *        {    *         "collection2":{    *           "maxShardsPerNode":"1",    *           "replicationFactor":"1",    *           "shards":{"slice1":{    *               "state":"active",    *               "replicas":{"replica5":{    *                   "state":"active",    *                   "node_name":"baseUrl1_",    *                   "base_url":"http://baseUrl1"}}}}},    *         "collection1":{    *           "maxShardsPerNode":"1",    *           "replicationFactor":"1",    *           "shards":{    *             "slice1":{    *               "state":"active",    *               "replicas":{    *                 "replica3 (bad)":{    *                   "state":"down",    *                   "node_name":"baseUrl1_",    *                   "base_url":"http://baseUrl1"},    *                 "replica2":{    *                   "state":"active",    *                   "node_name":"baseUrl2_",    *                   "base_url":"http://baseUrl2"},    *                 "replica1":{    *                   "state":"active",    *                   "node_name":"baseUrl1_",    *                   "base_url":"http://baseUrl1"}}},    *             "slice2":{    *               "state":"active",    *               "replicas":{"replica4":{    *                   "state":"active",    *                   "node_name":"baseUrl2_",    *                   "base_url":"http://baseUrl2"}}}}}}    *     */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
DECL|method|buildClusterState
specifier|private
name|Result
name|buildClusterState
parameter_list|(
name|String
name|clusterDescription
parameter_list|,
name|int
name|replicationFactor
parameter_list|,
name|int
name|maxShardsPerNode
parameter_list|,
name|String
modifier|...
name|liveNodes
parameter_list|)
block|{
name|Result
name|result
init|=
operator|new
name|Result
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|replicas
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|collectionProps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|collectionProps
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|MAX_SHARDS_PER_NODE
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|maxShardsPerNode
argument_list|)
argument_list|)
expr_stmt|;
name|collectionProps
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|REPLICATION_FACTOR
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|replicationFactor
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|DocCollection
argument_list|>
name|collectionStates
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|DocCollection
name|docCollection
init|=
literal|null
decl_stmt|;
name|Slice
name|slice
init|=
literal|null
decl_stmt|;
name|int
name|replicaCount
init|=
literal|1
decl_stmt|;
name|Matcher
name|m
init|=
name|BLUEPRINT
operator|.
name|matcher
argument_list|(
name|clusterDescription
argument_list|)
decl_stmt|;
while|while
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|Replica
name|replica
decl_stmt|;
switch|switch
condition|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|"c"
case|:
name|slices
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|docCollection
operator|=
operator|new
name|DocCollection
argument_list|(
literal|"collection"
operator|+
operator|(
name|collectionStates
operator|.
name|size
argument_list|()
operator|+
literal|1
operator|)
argument_list|,
name|slices
argument_list|,
name|collectionProps
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|collectionStates
operator|.
name|put
argument_list|(
name|docCollection
operator|.
name|getName
argument_list|()
argument_list|,
name|docCollection
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"s"
case|:
name|replicas
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|slice
operator|=
operator|new
name|Slice
argument_list|(
literal|"slice"
operator|+
operator|(
name|slices
operator|.
name|size
argument_list|()
operator|+
literal|1
operator|)
argument_list|,
name|replicas
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|slices
operator|.
name|put
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|slice
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"r"
case|:
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|replicaPropMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|node
decl_stmt|;
name|node
operator|=
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
operator|||
name|node
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|node
operator|=
literal|"1"
expr_stmt|;
block|}
name|Replica
operator|.
name|State
name|state
init|=
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
decl_stmt|;
name|String
name|stateCode
init|=
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|stateCode
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|stateCode
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
condition|)
block|{
case|case
literal|'S'
case|:
name|state
operator|=
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
expr_stmt|;
break|break;
case|case
literal|'R'
case|:
name|state
operator|=
name|Replica
operator|.
name|State
operator|.
name|RECOVERING
expr_stmt|;
break|break;
case|case
literal|'D'
case|:
name|state
operator|=
name|Replica
operator|.
name|State
operator|.
name|DOWN
expr_stmt|;
break|break;
case|case
literal|'F'
case|:
name|state
operator|=
name|Replica
operator|.
name|State
operator|.
name|RECOVERY_FAILED
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected state for replica: "
operator|+
name|stateCode
argument_list|)
throw|;
block|}
block|}
name|String
name|nodeName
init|=
literal|"baseUrl"
operator|+
name|node
operator|+
literal|"_"
decl_stmt|;
name|String
name|replicaName
init|=
literal|"replica"
operator|+
name|replicaCount
operator|++
decl_stmt|;
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|4
argument_list|)
argument_list|)
condition|)
block|{
name|replicaName
operator|+=
literal|" (bad)"
expr_stmt|;
block|}
name|replicaPropMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
name|nodeName
argument_list|)
expr_stmt|;
name|replicaPropMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
literal|"http://baseUrl"
operator|+
name|node
argument_list|)
expr_stmt|;
name|replicaPropMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|state
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|replica
operator|=
operator|new
name|Replica
argument_list|(
name|replicaName
argument_list|,
name|replicaPropMap
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|4
argument_list|)
argument_list|)
condition|)
block|{
name|result
operator|.
name|badReplica
operator|=
operator|new
name|DownReplica
argument_list|()
expr_stmt|;
name|result
operator|.
name|badReplica
operator|.
name|replica
operator|=
name|replica
expr_stmt|;
name|result
operator|.
name|badReplica
operator|.
name|slice
operator|=
name|slice
expr_stmt|;
name|result
operator|.
name|badReplica
operator|.
name|collection
operator|=
name|docCollection
expr_stmt|;
block|}
name|replicas
operator|.
name|put
argument_list|(
name|replica
operator|.
name|getName
argument_list|()
argument_list|,
name|replica
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
comment|// trunk briefly had clusterstate taking a zkreader :( this was required to work around that - leaving
comment|// until that issue is resolved.
name|MockZkStateReader
name|reader
init|=
operator|new
name|MockZkStateReader
argument_list|(
literal|null
argument_list|,
name|collectionStates
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|ClusterState
name|clusterState
init|=
operator|new
name|ClusterState
argument_list|(
literal|1
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|liveNodes
argument_list|)
argument_list|)
argument_list|,
name|collectionStates
argument_list|)
decl_stmt|;
name|reader
operator|=
operator|new
name|MockZkStateReader
argument_list|(
name|clusterState
argument_list|,
name|collectionStates
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|json
decl_stmt|;
try|try
block|{
name|json
operator|=
operator|new
name|String
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|clusterState
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected"
argument_list|)
throw|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"build:"
operator|+
name|buildNumber
operator|++
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|json
argument_list|)
expr_stmt|;
assert|assert
name|result
operator|.
name|badReplica
operator|!=
literal|null
operator|:
literal|"Is there no bad replica?"
assert|;
assert|assert
name|result
operator|.
name|badReplica
operator|.
name|slice
operator|!=
literal|null
operator|:
literal|"Is there no bad replica?"
assert|;
name|result
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class
end_unit
