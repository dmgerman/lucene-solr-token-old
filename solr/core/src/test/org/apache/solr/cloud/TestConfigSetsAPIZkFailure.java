begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jute
operator|.
name|InputArchive
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jute
operator|.
name|OutputArchive
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jute
operator|.
name|Record
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
operator|.
name|RemoteSolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|ConfigSetAdminRequest
operator|.
name|Create
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|ConfigSetAdminResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkConfigManager
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|ConfigSetProperties
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NoNodeException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|DataNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|DataTree
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|DataTree
operator|.
name|ProcessTxnResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|Request
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|ServerCnxn
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|ZKDatabase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|quorum
operator|.
name|Leader
operator|.
name|Proposal
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|txn
operator|.
name|TxnHeader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkConfigManager
operator|.
name|CONFIGS_ZKNODE
import|;
end_import
begin_comment
comment|/**  * Test the ConfigSets API under ZK failure.  In particular,  * if create fails, ensure proper cleanup occurs so we aren't  * left with a partially created ConfigSet.  */
end_comment
begin_class
DECL|class|TestConfigSetsAPIZkFailure
specifier|public
class|class
name|TestConfigSetsAPIZkFailure
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|solrCluster
specifier|private
name|MiniSolrCloudCluster
name|solrCluster
decl_stmt|;
DECL|field|zkTestServer
specifier|private
name|ZkTestServer
name|zkTestServer
decl_stmt|;
DECL|field|BASE_CONFIGSET_NAME
specifier|private
specifier|static
specifier|final
name|String
name|BASE_CONFIGSET_NAME
init|=
literal|"baseConfigSet1"
decl_stmt|;
DECL|field|CONFIGSET_NAME
specifier|private
specifier|static
specifier|final
name|String
name|CONFIGSET_NAME
init|=
literal|"configSet1"
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|testDir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|String
name|zkDir
init|=
name|testDir
operator|.
name|resolve
argument_list|(
literal|"zookeeper/server1/data"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|zkTestServer
operator|=
operator|new
name|ZkTestServer
argument_list|(
name|zkDir
argument_list|)
expr_stmt|;
name|zkTestServer
operator|.
name|run
argument_list|()
expr_stmt|;
name|zkTestServer
operator|.
name|setZKDatabase
argument_list|(
operator|new
name|FailureDuringCopyZKDatabase
argument_list|(
name|zkTestServer
operator|.
name|getZKDatabase
argument_list|()
argument_list|,
name|zkTestServer
argument_list|)
argument_list|)
expr_stmt|;
name|solrCluster
operator|=
operator|new
name|MiniSolrCloudCluster
argument_list|(
literal|1
argument_list|,
name|testDir
argument_list|,
name|MiniSolrCloudCluster
operator|.
name|DEFAULT_CLOUD_SOLR_XML
argument_list|,
name|buildJettyConfig
argument_list|(
literal|"/solr"
argument_list|)
argument_list|,
name|zkTestServer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|solrCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|zkTestServer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateZkFailure
specifier|public
name|void
name|testCreateZkFailure
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|baseUrl
init|=
name|solrCluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|SolrClient
name|solrClient
init|=
name|getHttpSolrClient
argument_list|(
name|baseUrl
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|oldProps
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"immutable"
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
name|setupBaseConfigSet
argument_list|(
name|BASE_CONFIGSET_NAME
argument_list|,
name|oldProps
argument_list|)
expr_stmt|;
name|SolrZkClient
name|zkClient
init|=
operator|new
name|SolrZkClient
argument_list|(
name|solrCluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|AbstractZkTestCase
operator|.
name|TIMEOUT
argument_list|,
name|AbstractZkTestCase
operator|.
name|TIMEOUT
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|ZkConfigManager
name|configManager
init|=
operator|new
name|ZkConfigManager
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|configManager
operator|.
name|configExists
argument_list|(
name|CONFIGSET_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Create
name|create
init|=
operator|new
name|Create
argument_list|()
decl_stmt|;
name|create
operator|.
name|setBaseConfigSetName
argument_list|(
name|BASE_CONFIGSET_NAME
argument_list|)
operator|.
name|setConfigSetName
argument_list|(
name|CONFIGSET_NAME
argument_list|)
expr_stmt|;
try|try
block|{
name|ConfigSetAdminResponse
name|response
init|=
name|create
operator|.
name|process
argument_list|(
name|solrClient
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected solr exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteSolrException
name|se
parameter_list|)
block|{
comment|// partial creation should have been cleaned up
name|assertFalse
argument_list|(
name|configManager
operator|.
name|configExists
argument_list|(
name|CONFIGSET_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
operator|.
name|code
argument_list|,
name|se
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|zkClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|solrClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|setupBaseConfigSet
specifier|private
name|void
name|setupBaseConfigSet
parameter_list|(
name|String
name|baseConfigSetName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|oldProps
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|File
name|configDir
init|=
name|getFile
argument_list|(
literal|"solr"
argument_list|)
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"configsets/configset-2/conf"
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
specifier|final
name|File
name|tmpConfigDir
init|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|tmpConfigDir
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|copyDirectory
argument_list|(
name|configDir
argument_list|,
name|tmpConfigDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldProps
operator|!=
literal|null
condition|)
block|{
name|FileUtils
operator|.
name|write
argument_list|(
operator|new
name|File
argument_list|(
name|tmpConfigDir
argument_list|,
name|ConfigSetProperties
operator|.
name|DEFAULT_FILENAME
argument_list|)
argument_list|,
name|getConfigSetProps
argument_list|(
name|oldProps
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|solrCluster
operator|.
name|uploadConfigDir
argument_list|(
name|tmpConfigDir
argument_list|,
name|baseConfigSetName
argument_list|)
expr_stmt|;
block|}
DECL|method|getConfigSetProps
specifier|private
name|StringBuilder
name|getConfigSetProps
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
return|return
operator|new
name|StringBuilder
argument_list|(
operator|new
name|String
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|map
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
DECL|class|FailureDuringCopyZKDatabase
specifier|private
specifier|static
class|class
name|FailureDuringCopyZKDatabase
extends|extends
name|ForwardingZKDatabase
block|{
DECL|field|zkTestServer
specifier|private
specifier|final
name|ZkTestServer
name|zkTestServer
decl_stmt|;
DECL|method|FailureDuringCopyZKDatabase
specifier|public
name|FailureDuringCopyZKDatabase
parameter_list|(
name|ZKDatabase
name|zkdb
parameter_list|,
name|ZkTestServer
name|zkTestServer
parameter_list|)
block|{
name|super
argument_list|(
name|zkdb
argument_list|)
expr_stmt|;
name|this
operator|.
name|zkTestServer
operator|=
name|zkTestServer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getData
specifier|public
name|byte
index|[]
name|getData
parameter_list|(
name|String
name|path
parameter_list|,
name|Stat
name|stat
parameter_list|,
name|Watcher
name|watcher
parameter_list|)
throws|throws
name|KeeperException
operator|.
name|NoNodeException
block|{
comment|// we know we are doing a copy when we are getting data from the base config set and
comment|// the new config set (partially) exists
name|String
name|zkAddress
init|=
name|zkTestServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|String
name|chroot
init|=
name|zkAddress
operator|.
name|substring
argument_list|(
name|zkAddress
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|chroot
operator|+
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|BASE_CONFIGSET_NAME
argument_list|)
operator|&&
operator|!
name|path
operator|.
name|contains
argument_list|(
name|ConfigSetProperties
operator|.
name|DEFAULT_FILENAME
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
literal|null
decl_stmt|;
try|try
block|{
name|children
operator|=
name|getChildren
argument_list|(
name|chroot
operator|+
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|CONFIGSET_NAME
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{}
if|if
condition|(
name|children
operator|!=
literal|null
operator|&&
name|children
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"sample zookeeper error"
argument_list|)
throw|;
block|}
block|}
return|return
name|super
operator|.
name|getData
argument_list|(
name|path
argument_list|,
name|stat
argument_list|,
name|watcher
argument_list|)
return|;
block|}
block|}
DECL|class|ForwardingZKDatabase
specifier|private
specifier|static
class|class
name|ForwardingZKDatabase
extends|extends
name|ZKDatabase
block|{
DECL|field|zkdb
specifier|private
name|ZKDatabase
name|zkdb
decl_stmt|;
DECL|method|ForwardingZKDatabase
specifier|public
name|ForwardingZKDatabase
parameter_list|(
name|ZKDatabase
name|zkdb
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|zkdb
operator|=
name|zkdb
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isInitialized
specifier|public
name|boolean
name|isInitialized
parameter_list|()
block|{
return|return
name|zkdb
operator|.
name|isInitialized
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|zkdb
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDataTree
specifier|public
name|DataTree
name|getDataTree
parameter_list|()
block|{
return|return
name|zkdb
operator|.
name|getDataTree
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getmaxCommittedLog
specifier|public
name|long
name|getmaxCommittedLog
parameter_list|()
block|{
return|return
name|zkdb
operator|.
name|getmaxCommittedLog
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getminCommittedLog
specifier|public
name|long
name|getminCommittedLog
parameter_list|()
block|{
return|return
name|zkdb
operator|.
name|getminCommittedLog
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getLogLock
specifier|public
name|ReentrantReadWriteLock
name|getLogLock
parameter_list|()
block|{
return|return
name|zkdb
operator|.
name|getLogLock
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getCommittedLog
specifier|public
specifier|synchronized
name|LinkedList
argument_list|<
name|Proposal
argument_list|>
name|getCommittedLog
parameter_list|()
block|{
return|return
name|zkdb
operator|.
name|getCommittedLog
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getDataTreeLastProcessedZxid
specifier|public
name|long
name|getDataTreeLastProcessedZxid
parameter_list|()
block|{
return|return
name|zkdb
operator|.
name|getDataTreeLastProcessedZxid
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setDataTreeInit
specifier|public
name|void
name|setDataTreeInit
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|zkdb
operator|.
name|setDataTreeInit
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSessions
specifier|public
name|Collection
argument_list|<
name|Long
argument_list|>
name|getSessions
parameter_list|()
block|{
return|return
name|zkdb
operator|.
name|getSessions
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getSessionWithTimeOuts
specifier|public
name|ConcurrentHashMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|getSessionWithTimeOuts
parameter_list|()
block|{
return|return
name|zkdb
operator|.
name|getSessionWithTimeOuts
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|loadDataBase
specifier|public
name|long
name|loadDataBase
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|zkdb
operator|.
name|loadDataBase
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|addCommittedProposal
specifier|public
name|void
name|addCommittedProposal
parameter_list|(
name|Request
name|request
parameter_list|)
block|{
name|zkdb
operator|.
name|addCommittedProposal
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeCnxn
specifier|public
name|void
name|removeCnxn
parameter_list|(
name|ServerCnxn
name|cnxn
parameter_list|)
block|{
name|zkdb
operator|.
name|removeCnxn
argument_list|(
name|cnxn
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|killSession
specifier|public
name|void
name|killSession
parameter_list|(
name|long
name|sessionId
parameter_list|,
name|long
name|zxid
parameter_list|)
block|{
name|zkdb
operator|.
name|killSession
argument_list|(
name|sessionId
argument_list|,
name|zxid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|dumpEphemerals
specifier|public
name|void
name|dumpEphemerals
parameter_list|(
name|PrintWriter
name|pwriter
parameter_list|)
block|{
name|zkdb
operator|.
name|dumpEphemerals
argument_list|(
name|pwriter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNodeCount
specifier|public
name|int
name|getNodeCount
parameter_list|()
block|{
return|return
name|zkdb
operator|.
name|getNodeCount
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getEphemerals
specifier|public
name|HashSet
argument_list|<
name|String
argument_list|>
name|getEphemerals
parameter_list|(
name|long
name|sessionId
parameter_list|)
block|{
return|return
name|zkdb
operator|.
name|getEphemerals
argument_list|(
name|sessionId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setlastProcessedZxid
specifier|public
name|void
name|setlastProcessedZxid
parameter_list|(
name|long
name|zxid
parameter_list|)
block|{
name|zkdb
operator|.
name|setlastProcessedZxid
argument_list|(
name|zxid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|processTxn
specifier|public
name|ProcessTxnResult
name|processTxn
parameter_list|(
name|TxnHeader
name|hdr
parameter_list|,
name|Record
name|txn
parameter_list|)
block|{
return|return
name|zkdb
operator|.
name|processTxn
argument_list|(
name|hdr
argument_list|,
name|txn
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|statNode
specifier|public
name|Stat
name|statNode
parameter_list|(
name|String
name|path
parameter_list|,
name|ServerCnxn
name|serverCnxn
parameter_list|)
throws|throws
name|KeeperException
operator|.
name|NoNodeException
block|{
return|return
name|zkdb
operator|.
name|statNode
argument_list|(
name|path
argument_list|,
name|serverCnxn
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNode
specifier|public
name|DataNode
name|getNode
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|zkdb
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|convertLong
specifier|public
name|List
argument_list|<
name|ACL
argument_list|>
name|convertLong
parameter_list|(
name|Long
name|aclL
parameter_list|)
block|{
return|return
name|zkdb
operator|.
name|convertLong
argument_list|(
name|aclL
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getData
specifier|public
name|byte
index|[]
name|getData
parameter_list|(
name|String
name|path
parameter_list|,
name|Stat
name|stat
parameter_list|,
name|Watcher
name|watcher
parameter_list|)
throws|throws
name|KeeperException
operator|.
name|NoNodeException
block|{
return|return
name|zkdb
operator|.
name|getData
argument_list|(
name|path
argument_list|,
name|stat
argument_list|,
name|watcher
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setWatches
specifier|public
name|void
name|setWatches
parameter_list|(
name|long
name|relativeZxid
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|dataWatches
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|existWatches
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|childWatches
parameter_list|,
name|Watcher
name|watcher
parameter_list|)
block|{
name|zkdb
operator|.
name|setWatches
argument_list|(
name|relativeZxid
argument_list|,
name|dataWatches
argument_list|,
name|existWatches
argument_list|,
name|childWatches
argument_list|,
name|watcher
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getACL
specifier|public
name|List
argument_list|<
name|ACL
argument_list|>
name|getACL
parameter_list|(
name|String
name|path
parameter_list|,
name|Stat
name|stat
parameter_list|)
throws|throws
name|NoNodeException
block|{
return|return
name|zkdb
operator|.
name|getACL
argument_list|(
name|path
argument_list|,
name|stat
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getChildren
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getChildren
parameter_list|(
name|String
name|path
parameter_list|,
name|Stat
name|stat
parameter_list|,
name|Watcher
name|watcher
parameter_list|)
throws|throws
name|KeeperException
operator|.
name|NoNodeException
block|{
return|return
name|zkdb
operator|.
name|getChildren
argument_list|(
name|path
argument_list|,
name|stat
argument_list|,
name|watcher
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isSpecialPath
specifier|public
name|boolean
name|isSpecialPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|zkdb
operator|.
name|isSpecialPath
argument_list|(
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAclSize
specifier|public
name|int
name|getAclSize
parameter_list|()
block|{
return|return
name|zkdb
operator|.
name|getAclSize
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|truncateLog
specifier|public
name|boolean
name|truncateLog
parameter_list|(
name|long
name|zxid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|zkdb
operator|.
name|truncateLog
argument_list|(
name|zxid
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|deserializeSnapshot
specifier|public
name|void
name|deserializeSnapshot
parameter_list|(
name|InputArchive
name|ia
parameter_list|)
throws|throws
name|IOException
block|{
name|zkdb
operator|.
name|deserializeSnapshot
argument_list|(
name|ia
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serializeSnapshot
specifier|public
name|void
name|serializeSnapshot
parameter_list|(
name|OutputArchive
name|oa
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|zkdb
operator|.
name|serializeSnapshot
argument_list|(
name|oa
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|append
specifier|public
name|boolean
name|append
parameter_list|(
name|Request
name|si
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|zkdb
operator|.
name|append
argument_list|(
name|si
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|rollLog
specifier|public
name|void
name|rollLog
parameter_list|()
throws|throws
name|IOException
block|{
name|zkdb
operator|.
name|rollLog
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|commit
specifier|public
name|void
name|commit
parameter_list|()
throws|throws
name|IOException
block|{
name|zkdb
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|zkdb
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
