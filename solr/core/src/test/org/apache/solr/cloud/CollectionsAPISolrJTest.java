begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|StringUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|CollectionAdminResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|CoreAdminResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TimeOut
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|ReplicaPropertiesBase
operator|.
name|verifyUniqueAcrossCollection
import|;
end_import
begin_class
annotation|@
name|LuceneTestCase
operator|.
name|Slow
DECL|class|CollectionsAPISolrJTest
specifier|public
class|class
name|CollectionsAPISolrJTest
extends|extends
name|AbstractFullDistribZkTestBase
block|{
annotation|@
name|Test
annotation|@
name|Ignore
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|testCreateAndDeleteCollection
argument_list|()
expr_stmt|;
name|testCreateAndDeleteShard
argument_list|()
expr_stmt|;
name|testReloadCollection
argument_list|()
expr_stmt|;
name|testCreateAndDeleteAlias
argument_list|()
expr_stmt|;
name|testSplitShard
argument_list|()
expr_stmt|;
name|testCreateCollectionWithPropertyParam
argument_list|()
expr_stmt|;
name|testAddAndDeleteReplica
argument_list|()
expr_stmt|;
name|testClusterProp
argument_list|()
expr_stmt|;
name|testAddAndRemoveRole
argument_list|()
expr_stmt|;
name|testOverseerStatus
argument_list|()
expr_stmt|;
name|testList
argument_list|()
expr_stmt|;
name|testAddAndDeleteReplicaProp
argument_list|()
expr_stmt|;
name|testBalanceShardUnique
argument_list|()
expr_stmt|;
block|}
DECL|method|testCreateAndDeleteCollection
specifier|protected
name|void
name|testCreateAndDeleteCollection
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|collectionName
init|=
literal|"solrj_test"
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|Create
name|createCollectionRequest
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|Create
argument_list|()
operator|.
name|setCollectionName
argument_list|(
name|collectionName
argument_list|)
operator|.
name|setNumShards
argument_list|(
literal|2
argument_list|)
operator|.
name|setReplicationFactor
argument_list|(
literal|2
argument_list|)
operator|.
name|setConfigName
argument_list|(
literal|"conf1"
argument_list|)
operator|.
name|setRouterField
argument_list|(
literal|"myOwnField"
argument_list|)
operator|.
name|setStateFormat
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|CollectionAdminResponse
name|response
init|=
name|createCollectionRequest
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NamedList
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|coresStatus
init|=
name|response
operator|.
name|getCollectionCoresStatus
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|coresStatus
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|NamedList
argument_list|<
name|Integer
argument_list|>
name|status
init|=
name|coresStatus
operator|.
name|get
argument_list|(
name|collectionName
operator|+
literal|"_shard"
operator|+
operator|(
name|i
operator|/
literal|2
operator|+
literal|1
operator|)
operator|+
literal|"_replica"
operator|+
operator|(
name|i
operator|%
literal|2
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
name|status
operator|.
name|get
argument_list|(
literal|"status"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|get
argument_list|(
literal|"QTime"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
name|cloudClient
operator|.
name|setDefaultCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|Delete
name|deleteCollectionRequest
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|Delete
argument_list|()
operator|.
name|setCollectionName
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|response
operator|=
name|deleteCollectionRequest
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NamedList
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|nodesStatus
init|=
name|response
operator|.
name|getCollectionNodesStatus
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
literal|"Deleted collection "
operator|+
name|collectionName
operator|+
literal|"still exists"
argument_list|,
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollectionOrNull
argument_list|(
name|collectionName
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|nodesStatus
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test Creating a collection with new stateformat.
name|collectionName
operator|=
literal|"solrj_newstateformat"
expr_stmt|;
name|createCollectionRequest
operator|=
operator|new
name|CollectionAdminRequest
operator|.
name|Create
argument_list|()
operator|.
name|setCollectionName
argument_list|(
name|collectionName
argument_list|)
operator|.
name|setNumShards
argument_list|(
literal|2
argument_list|)
operator|.
name|setConfigName
argument_list|(
literal|"conf1"
argument_list|)
operator|.
name|setStateFormat
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|response
operator|=
name|createCollectionRequest
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|waitForRecoveriesToFinish
argument_list|(
name|collectionName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Collection state does not exist"
argument_list|,
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getZkClient
argument_list|()
operator|.
name|exists
argument_list|(
name|ZkStateReader
operator|.
name|getCollectionPath
argument_list|(
name|collectionName
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateAndDeleteShard
specifier|protected
name|void
name|testCreateAndDeleteShard
parameter_list|()
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
comment|// Create an implicit collection
name|String
name|collectionName
init|=
literal|"solrj_implicit"
decl_stmt|;
name|CollectionAdminResponse
name|response
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|Create
argument_list|()
operator|.
name|setCollectionName
argument_list|(
name|collectionName
argument_list|)
operator|.
name|setShards
argument_list|(
literal|"shardA,shardB"
argument_list|)
operator|.
name|setConfigName
argument_list|(
literal|"conf1"
argument_list|)
operator|.
name|setRouterName
argument_list|(
literal|"implicit"
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NamedList
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|coresStatus
init|=
name|response
operator|.
name|getCollectionCoresStatus
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|coresStatus
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|setDefaultCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
comment|// Add a shard to the implicit collection
name|response
operator|=
operator|new
name|CollectionAdminRequest
operator|.
name|CreateShard
argument_list|()
operator|.
name|setCollectionName
argument_list|(
name|collectionName
argument_list|)
operator|.
name|setShardName
argument_list|(
literal|"shardC"
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|coresStatus
operator|=
name|response
operator|.
name|getCollectionCoresStatus
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|coresStatus
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
name|coresStatus
operator|.
name|get
argument_list|(
name|collectionName
operator|+
literal|"_shardC_replica1"
argument_list|)
operator|.
name|get
argument_list|(
literal|"status"
argument_list|)
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|DeleteShard
name|deleteShardRequest
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|DeleteShard
argument_list|()
operator|.
name|setCollectionName
argument_list|(
name|collectionName
argument_list|)
operator|.
name|setShardName
argument_list|(
literal|"shardC"
argument_list|)
decl_stmt|;
name|response
operator|=
name|deleteShardRequest
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NamedList
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|nodesStatus
init|=
name|response
operator|.
name|getCollectionNodesStatus
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodesStatus
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testReloadCollection
specifier|protected
name|void
name|testReloadCollection
parameter_list|()
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|cloudClient
operator|.
name|setDefaultCollection
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|Reload
name|reloadCollectionRequest
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|Reload
argument_list|()
operator|.
name|setCollectionName
argument_list|(
literal|"collection1"
argument_list|)
decl_stmt|;
name|CollectionAdminResponse
name|response
init|=
name|reloadCollectionRequest
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateAndDeleteAlias
specifier|protected
name|void
name|testCreateAndDeleteAlias
parameter_list|()
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|CollectionAdminRequest
operator|.
name|CreateAlias
name|createAliasRequest
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|CreateAlias
argument_list|()
operator|.
name|setAliasName
argument_list|(
literal|"solrj_alias"
argument_list|)
operator|.
name|setAliasedCollections
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
decl_stmt|;
name|CollectionAdminResponse
name|response
init|=
name|createAliasRequest
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|DeleteAlias
name|deleteAliasRequest
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|DeleteAlias
argument_list|()
operator|.
name|setAliasName
argument_list|(
literal|"solrj_alias"
argument_list|)
decl_stmt|;
name|deleteAliasRequest
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSplitShard
specifier|protected
name|void
name|testSplitShard
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|collectionName
init|=
literal|"solrj_test_splitshard"
decl_stmt|;
name|cloudClient
operator|.
name|setDefaultCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|Create
name|createCollectionRequest
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|Create
argument_list|()
operator|.
name|setConfigName
argument_list|(
literal|"conf1"
argument_list|)
operator|.
name|setNumShards
argument_list|(
literal|2
argument_list|)
operator|.
name|setCollectionName
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|createCollectionRequest
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|SplitShard
name|splitShardRequest
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|SplitShard
argument_list|()
operator|.
name|setCollectionName
argument_list|(
name|collectionName
argument_list|)
operator|.
name|setShardName
argument_list|(
literal|"shard1"
argument_list|)
decl_stmt|;
name|CollectionAdminResponse
name|response
init|=
name|splitShardRequest
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NamedList
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|coresStatus
init|=
name|response
operator|.
name|getCollectionCoresStatus
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
name|coresStatus
operator|.
name|get
argument_list|(
name|collectionName
operator|+
literal|"_shard1_0_replica1"
argument_list|)
operator|.
name|get
argument_list|(
literal|"status"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
name|coresStatus
operator|.
name|get
argument_list|(
name|collectionName
operator|+
literal|"_shard1_1_replica1"
argument_list|)
operator|.
name|get
argument_list|(
literal|"status"
argument_list|)
argument_list|)
expr_stmt|;
name|waitForRecoveriesToFinish
argument_list|(
name|collectionName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|waitForThingsToLevelOut
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// Test splitting using split.key
name|splitShardRequest
operator|=
operator|new
name|CollectionAdminRequest
operator|.
name|SplitShard
argument_list|()
operator|.
name|setCollectionName
argument_list|(
name|collectionName
argument_list|)
operator|.
name|setSplitKey
argument_list|(
literal|"b!"
argument_list|)
expr_stmt|;
name|response
operator|=
name|splitShardRequest
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|waitForRecoveriesToFinish
argument_list|(
name|collectionName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|waitForThingsToLevelOut
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Slice
argument_list|>
name|slices
init|=
name|clusterState
operator|.
name|getActiveSlices
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ClusterState: "
operator|+
name|clusterState
operator|.
name|getActiveSlices
argument_list|(
name|collectionName
argument_list|)
argument_list|,
literal|5
argument_list|,
name|slices
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateCollectionWithPropertyParam
specifier|private
name|void
name|testCreateCollectionWithPropertyParam
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|collectionName
init|=
literal|"solrj_test_core_props"
decl_stmt|;
name|File
name|tmpDir
init|=
name|createTempDir
argument_list|(
literal|"testPropertyParamsForCreate"
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|File
name|dataDir
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"dataDir-"
operator|+
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|ulogDir
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"ulogDir-"
operator|+
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|CoreAdminParams
operator|.
name|DATA_DIR
argument_list|,
name|dataDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|CoreAdminParams
operator|.
name|ULOG_DIR
argument_list|,
name|ulogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|Create
name|createReq
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|Create
argument_list|()
operator|.
name|setCollectionName
argument_list|(
name|collectionName
argument_list|)
operator|.
name|setNumShards
argument_list|(
literal|1
argument_list|)
operator|.
name|setConfigName
argument_list|(
literal|"conf1"
argument_list|)
operator|.
name|setProperties
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|CollectionAdminResponse
name|response
init|=
name|createReq
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NamedList
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|coresStatus
init|=
name|response
operator|.
name|getCollectionCoresStatus
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|coresStatus
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|DocCollection
name|testCollection
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|Replica
name|replica1
init|=
name|testCollection
operator|.
name|getReplica
argument_list|(
literal|"core_node1"
argument_list|)
decl_stmt|;
try|try
init|(
name|HttpSolrClient
name|client
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|replica1
operator|.
name|getStr
argument_list|(
literal|"base_url"
argument_list|)
argument_list|)
init|)
block|{
name|CoreAdminResponse
name|status
init|=
name|CoreAdminRequest
operator|.
name|getStatus
argument_list|(
name|replica1
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|,
name|client
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|coreStatus
init|=
name|status
operator|.
name|getCoreStatus
argument_list|(
name|replica1
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|dataDirStr
init|=
operator|(
name|String
operator|)
name|coreStatus
operator|.
name|get
argument_list|(
literal|"dataDir"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Data dir does not match param given in property.dataDir syntax"
argument_list|,
operator|new
name|File
argument_list|(
name|dataDirStr
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|dataDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CollectionAdminRequest
operator|.
name|Delete
name|deleteCollectionRequest
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|Delete
argument_list|()
decl_stmt|;
name|deleteCollectionRequest
operator|.
name|setCollectionName
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|deleteCollectionRequest
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddAndDeleteReplica
specifier|private
name|void
name|testAddAndDeleteReplica
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|collectionName
init|=
literal|"solrj_replicatests"
decl_stmt|;
name|createCollection
argument_list|(
name|collectionName
argument_list|,
name|cloudClient
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|setDefaultCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|String
name|newReplicaName
init|=
name|Assign
operator|.
name|assignNode
argument_list|(
name|collectionName
argument_list|,
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|nodeList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLiveNodes
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|nodeList
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|AddReplica
name|addReplica
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|AddReplica
argument_list|()
operator|.
name|setCollectionName
argument_list|(
name|collectionName
argument_list|)
operator|.
name|setShardName
argument_list|(
literal|"shard1"
argument_list|)
operator|.
name|setNode
argument_list|(
name|nodeList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|CollectionAdminResponse
name|response
init|=
name|addReplica
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|TimeOut
name|timeout
init|=
operator|new
name|TimeOut
argument_list|(
literal|3
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|Replica
name|newReplica
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|!
name|timeout
operator|.
name|hasTimedOut
argument_list|()
operator|&&
name|newReplica
operator|==
literal|null
condition|)
block|{
name|Slice
name|slice
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
name|collectionName
argument_list|,
literal|"shard1"
argument_list|)
decl_stmt|;
name|newReplica
operator|=
name|slice
operator|.
name|getReplica
argument_list|(
name|newReplicaName
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|newReplica
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Replica should be created on the right node"
argument_list|,
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|nodeList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|newReplica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test DELETEREPLICA
name|CollectionAdminRequest
operator|.
name|DeleteReplica
name|deleteReplicaRequest
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|DeleteReplica
argument_list|()
operator|.
name|setCollectionName
argument_list|(
name|collectionName
argument_list|)
operator|.
name|setShardName
argument_list|(
literal|"shard1"
argument_list|)
operator|.
name|setReplica
argument_list|(
name|newReplicaName
argument_list|)
decl_stmt|;
name|response
operator|=
name|deleteReplicaRequest
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|timeout
operator|=
operator|new
name|TimeOut
argument_list|(
literal|3
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|timeout
operator|.
name|hasTimedOut
argument_list|()
operator|&&
name|newReplica
operator|!=
literal|null
condition|)
block|{
name|Slice
name|slice
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
name|collectionName
argument_list|,
literal|"shard1"
argument_list|)
decl_stmt|;
name|newReplica
operator|=
name|slice
operator|.
name|getReplica
argument_list|(
name|newReplicaName
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|newReplica
argument_list|)
expr_stmt|;
block|}
DECL|method|testClusterProp
specifier|private
name|void
name|testClusterProp
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
throws|,
name|SolrServerException
block|{
name|CollectionAdminRequest
operator|.
name|ClusterProp
name|clusterPropRequest
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|ClusterProp
argument_list|()
operator|.
name|setPropertyName
argument_list|(
name|ZkStateReader
operator|.
name|LEGACY_CLOUD
argument_list|)
operator|.
name|setPropertyValue
argument_list|(
literal|"false"
argument_list|)
decl_stmt|;
name|CollectionAdminResponse
name|response
init|=
name|clusterPropRequest
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|TimeOut
name|timeout
init|=
operator|new
name|TimeOut
argument_list|(
literal|3
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|timeout
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|changed
operator|=
name|Objects
operator|.
name|equals
argument_list|(
literal|"false"
argument_list|,
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterProps
argument_list|()
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|LEGACY_CLOUD
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
condition|)
break|break;
block|}
name|assertTrue
argument_list|(
literal|"The Cluster property wasn't set"
argument_list|,
name|changed
argument_list|)
expr_stmt|;
comment|// Unset ClusterProp that we set.
name|clusterPropRequest
operator|=
operator|new
name|CollectionAdminRequest
operator|.
name|ClusterProp
argument_list|()
operator|.
name|setPropertyName
argument_list|(
name|ZkStateReader
operator|.
name|LEGACY_CLOUD
argument_list|)
operator|.
name|setPropertyValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|clusterPropRequest
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|timeout
operator|=
operator|new
name|TimeOut
argument_list|(
literal|3
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|false
expr_stmt|;
while|while
condition|(
operator|!
name|timeout
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|changed
operator|=
operator|(
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterProps
argument_list|()
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|LEGACY_CLOUD
argument_list|)
operator|==
literal|null
operator|)
expr_stmt|;
if|if
condition|(
name|changed
condition|)
break|break;
block|}
name|assertTrue
argument_list|(
literal|"The Cluster property wasn't unset"
argument_list|,
name|changed
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddAndRemoveRole
specifier|private
name|void
name|testAddAndRemoveRole
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
throws|,
name|SolrServerException
block|{
name|cloudClient
operator|.
name|setDefaultCollection
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
expr_stmt|;
name|Replica
name|replica
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getLeaderRetry
argument_list|(
name|DEFAULT_COLLECTION
argument_list|,
name|SHARD1
argument_list|)
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|AddRole
name|addRoleRequest
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|AddRole
argument_list|()
operator|.
name|setNode
argument_list|(
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|)
operator|.
name|setRole
argument_list|(
literal|"overseer"
argument_list|)
decl_stmt|;
name|addRoleRequest
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|ClusterStatus
name|clusterStatusRequest
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|ClusterStatus
argument_list|()
operator|.
name|setCollectionName
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
decl_stmt|;
name|CollectionAdminResponse
name|response
init|=
name|clusterStatusRequest
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|rsp
init|=
name|response
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|cluster
init|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|rsp
operator|.
name|get
argument_list|(
literal|"cluster"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Cluster state should not be null"
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|roles
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|cluster
operator|.
name|get
argument_list|(
literal|"roles"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Role information should not be null"
argument_list|,
name|roles
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|overseer
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|roles
operator|.
name|get
argument_list|(
literal|"overseer"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|overseer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|overseer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|overseer
operator|.
name|contains
argument_list|(
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove role
operator|new
name|CollectionAdminRequest
operator|.
name|RemoveRole
argument_list|()
operator|.
name|setNode
argument_list|(
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|)
operator|.
name|setRole
argument_list|(
literal|"overseer"
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|clusterStatusRequest
operator|=
operator|new
name|CollectionAdminRequest
operator|.
name|ClusterStatus
argument_list|()
expr_stmt|;
name|clusterStatusRequest
operator|.
name|setCollectionName
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
expr_stmt|;
name|response
operator|=
name|clusterStatusRequest
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|response
operator|.
name|getResponse
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|rsp
operator|.
name|get
argument_list|(
literal|"cluster"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Cluster state should not be null"
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|roles
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|cluster
operator|.
name|get
argument_list|(
literal|"roles"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Role information should not be null"
argument_list|,
name|roles
argument_list|)
expr_stmt|;
name|overseer
operator|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|roles
operator|.
name|get
argument_list|(
literal|"overseer"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|overseer
operator|.
name|contains
argument_list|(
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testOverseerStatus
specifier|private
name|void
name|testOverseerStatus
parameter_list|()
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|CollectionAdminResponse
name|response
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|OverseerStatus
argument_list|()
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"overseer_operations shouldn't be null"
argument_list|,
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"overseer_operations"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testList
specifier|private
name|void
name|testList
parameter_list|()
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|CollectionAdminResponse
name|response
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|List
argument_list|()
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"collection list should not be null"
argument_list|,
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"collections"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddAndDeleteReplicaProp
specifier|private
name|void
name|testAddAndDeleteReplicaProp
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
throws|,
name|SolrServerException
block|{
name|Replica
name|replica
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getLeaderRetry
argument_list|(
name|DEFAULT_COLLECTION
argument_list|,
name|SHARD1
argument_list|)
decl_stmt|;
name|CollectionAdminResponse
name|response
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|AddReplicaProp
argument_list|()
operator|.
name|setCollectionName
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
operator|.
name|setShardName
argument_list|(
name|SHARD1
argument_list|)
operator|.
name|setReplica
argument_list|(
name|replica
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setPropertyName
argument_list|(
literal|"preferredleader"
argument_list|)
operator|.
name|setPropertyValue
argument_list|(
literal|"true"
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|TimeOut
name|timeout
init|=
operator|new
name|TimeOut
argument_list|(
literal|20
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|String
name|propertyValue
init|=
literal|null
decl_stmt|;
name|String
name|replicaName
init|=
name|replica
operator|.
name|getName
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|timeout
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
name|ClusterState
name|clusterState
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|replica
operator|=
name|clusterState
operator|.
name|getReplica
argument_list|(
name|DEFAULT_COLLECTION
argument_list|,
name|replicaName
argument_list|)
expr_stmt|;
name|propertyValue
operator|=
name|replica
operator|.
name|getStr
argument_list|(
literal|"property.preferredleader"
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|,
name|propertyValue
argument_list|)
condition|)
break|break;
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Replica property was not updated, Latest value: "
operator|+
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getReplica
argument_list|(
name|DEFAULT_COLLECTION
argument_list|,
name|replicaName
argument_list|)
argument_list|,
literal|"true"
argument_list|,
name|propertyValue
argument_list|)
expr_stmt|;
name|response
operator|=
operator|new
name|CollectionAdminRequest
operator|.
name|DeleteReplicaProp
argument_list|()
operator|.
name|setCollectionName
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
operator|.
name|setShardName
argument_list|(
name|SHARD1
argument_list|)
operator|.
name|setReplica
argument_list|(
name|replicaName
argument_list|)
operator|.
name|setPropertyName
argument_list|(
literal|"property.preferredleader"
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|timeout
operator|=
operator|new
name|TimeOut
argument_list|(
literal|20
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|boolean
name|updated
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|timeout
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
name|ClusterState
name|clusterState
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|replica
operator|=
name|clusterState
operator|.
name|getReplica
argument_list|(
name|DEFAULT_COLLECTION
argument_list|,
name|replicaName
argument_list|)
expr_stmt|;
name|updated
operator|=
name|replica
operator|.
name|getStr
argument_list|(
literal|"property.preferredleader"
argument_list|)
operator|==
literal|null
expr_stmt|;
if|if
condition|(
name|updated
condition|)
break|break;
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Replica property was not removed"
argument_list|,
name|updated
argument_list|)
expr_stmt|;
block|}
DECL|method|testBalanceShardUnique
specifier|private
name|void
name|testBalanceShardUnique
parameter_list|()
throws|throws
name|IOException
throws|,
name|SolrServerException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|CollectionAdminResponse
name|response
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|BalanceShardUnique
argument_list|()
operator|.
name|setCollection
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
operator|.
name|setPropertyName
argument_list|(
literal|"preferredLeader"
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|verifyUniqueAcrossCollection
argument_list|(
name|cloudClient
argument_list|,
name|DEFAULT_COLLECTION
argument_list|,
literal|"property.preferredleader"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
