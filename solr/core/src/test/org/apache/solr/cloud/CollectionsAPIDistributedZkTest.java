begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerFactory
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|CoreAdminResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrInfoMBean
operator|.
name|Category
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|DirectUpdateHandler2
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|SolrCmdDistributor
operator|.
name|Request
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DefaultSolrThreadFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_comment
comment|/**  * Tests the Cloud Collections API.  */
end_comment
begin_class
annotation|@
name|Slow
DECL|class|CollectionsAPIDistributedZkTest
specifier|public
class|class
name|CollectionsAPIDistributedZkTest
extends|extends
name|AbstractFullDistribZkTestBase
block|{
DECL|field|DEFAULT_COLLECTION
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_COLLECTION
init|=
literal|"collection1"
decl_stmt|;
DECL|field|DEBUG
specifier|private
specifier|static
specifier|final
name|boolean
name|DEBUG
init|=
literal|false
decl_stmt|;
DECL|field|executor
name|ThreadPoolExecutor
name|executor
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
operator|new
name|DefaultSolrThreadFactory
argument_list|(
literal|"testExecutor"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|completionService
name|CompletionService
argument_list|<
name|Request
argument_list|>
name|completionService
decl_stmt|;
DECL|field|pending
name|Set
argument_list|<
name|Future
argument_list|<
name|Request
argument_list|>
argument_list|>
name|pending
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeThisClass2
specifier|public
specifier|static
name|void
name|beforeThisClass2
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO: we use an fs based dir because something
comment|// like a ram dir will not recover correctly right now
name|useFactory
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"numShards"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|sliceCount
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.xml.persist"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
DECL|method|CollectionsAPIDistributedZkTest
specifier|public
name|CollectionsAPIDistributedZkTest
parameter_list|()
block|{
name|fixShardCount
operator|=
literal|true
expr_stmt|;
name|sliceCount
operator|=
literal|2
expr_stmt|;
name|shardCount
operator|=
literal|4
expr_stmt|;
name|completionService
operator|=
operator|new
name|ExecutorCompletionService
argument_list|<
name|Request
argument_list|>
argument_list|(
name|executor
argument_list|)
expr_stmt|;
name|pending
operator|=
operator|new
name|HashSet
argument_list|<
name|Future
argument_list|<
name|Request
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDistributedParams
specifier|protected
name|void
name|setDistributedParams
parameter_list|(
name|ModifiableSolrParams
name|params
parameter_list|)
block|{
if|if
condition|(
name|r
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// don't set shards, let that be figured out from the cloud state
block|}
else|else
block|{
comment|// use shard ids rather than physical locations
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shardCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"shard"
operator|+
operator|(
name|i
operator|+
literal|3
operator|)
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|set
argument_list|(
literal|"shards"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doTest
specifier|public
name|void
name|doTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setLoggingLevel(null);
name|ZkStateReader
name|zkStateReader
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
comment|// make sure we have leaders for each shard
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|sliceCount
condition|;
name|j
operator|++
control|)
block|{
name|zkStateReader
operator|.
name|getLeaderRetry
argument_list|(
name|DEFAULT_COLLECTION
argument_list|,
literal|"shard"
operator|+
name|j
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
comment|// make sure we again have leaders for each shard
name|waitForRecoveriesToFinish
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// would be better if these where all separate tests - but much, much
comment|// slower
name|testCollectionsAPI
argument_list|()
expr_stmt|;
comment|// Thread.sleep(10000000000L);
if|if
condition|(
name|DEBUG
condition|)
block|{
name|super
operator|.
name|printLayout
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testCollectionsAPI
specifier|private
name|void
name|testCollectionsAPI
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO: fragile - because we dont pass collection.confName, it will only
comment|// find a default if a conf set with a name matching the collection name is found, or
comment|// if there is only one conf set. That and the fact that other tests run first in this
comment|// env make this pretty fragile
comment|// create new collections rapid fire
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|collectionInfos
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|int
name|numShards
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|shardCount
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|replicationFactor
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
operator|+
literal|2
decl_stmt|;
name|int
name|maxShardsPerNode
init|=
operator|(
operator|(
operator|(
name|numShards
operator|*
name|replicationFactor
operator|)
operator|/
name|getCommonCloudSolrServer
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLiveNodes
argument_list|()
operator|.
name|size
argument_list|()
operator|)
operator|)
operator|+
literal|1
decl_stmt|;
name|CloudSolrServer
name|client
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
comment|// Test if we can create a collection through CloudSolrServer where
comment|// you havnt set default-collection
comment|// This is nice because you want to be able to create you first
comment|// collection using CloudSolrServer, and in such case there is
comment|// nothing reasonable to set as default-collection
name|client
operator|=
name|createCloudClient
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
comment|// Test if we can create a collection through CloudSolrServer where
comment|// you have set default-collection to a non-existing collection
comment|// This is nice because you want to be able to create you first
comment|// collection using CloudSolrServer, and in such case there is
comment|// nothing reasonable to set as default-collection, but you might want
comment|// to use the same CloudSolrServer throughout the entire
comment|// lifetime of your client-application, so it is nice to be able to
comment|// set a default-collection on this CloudSolrServer once and for all
comment|// and use this CloudSolrServer to create the collection
name|client
operator|=
name|createCloudClient
argument_list|(
literal|"awholynewcollection_"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|createCollection
argument_list|(
name|collectionInfos
argument_list|,
literal|"awholynewcollection_"
operator|+
name|i
argument_list|,
name|numShards
argument_list|,
name|replicationFactor
argument_list|,
name|maxShardsPerNode
argument_list|,
name|client
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
name|client
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|collectionInfosEntrySet
init|=
name|collectionInfos
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|entry
range|:
name|collectionInfosEntrySet
control|)
block|{
name|String
name|collection
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|checkForCollection
argument_list|(
name|collection
argument_list|,
name|list
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|url
init|=
name|getUrlFromZk
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|HttpSolrServer
name|collectionClient
init|=
operator|new
name|HttpSolrServer
argument_list|(
name|url
argument_list|)
decl_stmt|;
comment|// poll for a second - it can take a moment before we are ready to serve
name|waitForNon403or404or503
argument_list|(
name|collectionClient
argument_list|)
expr_stmt|;
block|}
name|ZkStateReader
name|zkStateReader
init|=
name|getCommonCloudSolrServer
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cnt
condition|;
name|j
operator|++
control|)
block|{
name|waitForRecoveriesToFinish
argument_list|(
literal|"awholynewcollection_"
operator|+
name|j
argument_list|,
name|zkStateReader
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|collectionNameList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|collectionNameList
operator|.
name|addAll
argument_list|(
name|collectionInfos
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|collectionName
init|=
name|collectionNameList
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|collectionNameList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|url
init|=
name|getUrlFromZk
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|HttpSolrServer
name|collectionClient
init|=
operator|new
name|HttpSolrServer
argument_list|(
name|url
argument_list|)
decl_stmt|;
comment|// lets try and use the solrj client to index a couple documents
name|SolrInputDocument
name|doc1
init|=
name|getDoc
argument_list|(
name|id
argument_list|,
literal|6
argument_list|,
name|i1
argument_list|,
operator|-
literal|600
argument_list|,
name|tlong
argument_list|,
literal|600
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy sat on a wall"
argument_list|)
decl_stmt|;
name|SolrInputDocument
name|doc2
init|=
name|getDoc
argument_list|(
name|id
argument_list|,
literal|7
argument_list|,
name|i1
argument_list|,
operator|-
literal|600
argument_list|,
name|tlong
argument_list|,
literal|600
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy3 sat on a walls"
argument_list|)
decl_stmt|;
name|SolrInputDocument
name|doc3
init|=
name|getDoc
argument_list|(
name|id
argument_list|,
literal|8
argument_list|,
name|i1
argument_list|,
operator|-
literal|600
argument_list|,
name|tlong
argument_list|,
literal|600
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy2 sat on a walled"
argument_list|)
decl_stmt|;
name|collectionClient
operator|.
name|add
argument_list|(
name|doc1
argument_list|)
expr_stmt|;
name|collectionClient
operator|.
name|add
argument_list|(
name|doc2
argument_list|)
expr_stmt|;
name|collectionClient
operator|.
name|add
argument_list|(
name|doc3
argument_list|)
expr_stmt|;
name|collectionClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|collectionClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// lets try a collection reload
comment|// get core open times
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|urlToTimeBefore
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|collectStartTimes
argument_list|(
name|collectionName
argument_list|,
name|urlToTimeBefore
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|urlToTimeBefore
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|RELOAD
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|QueryRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
comment|// we can use this client because we just want base url
specifier|final
name|String
name|baseUrl
init|=
operator|(
operator|(
name|HttpSolrServer
operator|)
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getBaseURL
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|HttpSolrServer
operator|)
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getBaseURL
argument_list|()
operator|.
name|length
argument_list|()
operator|-
name|DEFAULT_COLLECTION
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|createNewSolrServer
argument_list|(
literal|""
argument_list|,
name|baseUrl
argument_list|)
operator|.
name|request
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// reloads make take a short while
name|boolean
name|allTimesAreCorrect
init|=
name|waitForReloads
argument_list|(
name|collectionName
argument_list|,
name|urlToTimeBefore
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"some core start times did not change on reload"
argument_list|,
name|allTimesAreCorrect
argument_list|)
expr_stmt|;
name|waitForRecoveriesToFinish
argument_list|(
literal|"awholynewcollection_"
operator|+
operator|(
name|cnt
operator|-
literal|1
operator|)
argument_list|,
name|zkStateReader
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// remove a collection
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|DELETE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|request
operator|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|createNewSolrServer
argument_list|(
literal|""
argument_list|,
name|baseUrl
argument_list|)
operator|.
name|request
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// ensure its out of the state
name|checkForMissingCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
comment|//collectionNameList.remove(collectionName);
comment|// remove an unknown collection
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|DELETE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
literal|"unknown_collection"
argument_list|)
expr_stmt|;
name|request
operator|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|createNewSolrServer
argument_list|(
literal|""
argument_list|,
name|baseUrl
argument_list|)
operator|.
name|request
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// create another collection should still work
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"numShards"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|OverseerCollectionProcessor
operator|.
name|REPLICATION_FACTOR
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|collectionName
operator|=
literal|"acollectionafterbaddelete"
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|request
operator|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|createNewSolrServer
argument_list|(
literal|""
argument_list|,
name|baseUrl
argument_list|)
operator|.
name|request
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|checkForCollection
argument_list|(
name|collectionName
argument_list|,
name|list
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|url
operator|=
name|getUrlFromZk
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|collectionClient
operator|=
operator|new
name|HttpSolrServer
argument_list|(
name|url
argument_list|)
expr_stmt|;
comment|// poll for a second - it can take a moment before we are ready to serve
name|waitForNon403or404or503
argument_list|(
name|collectionClient
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cnt
condition|;
name|j
operator|++
control|)
block|{
name|waitForRecoveriesToFinish
argument_list|(
name|collectionName
argument_list|,
name|zkStateReader
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// test maxShardsPerNode
name|int
name|numLiveNodes
init|=
name|getCommonCloudSolrServer
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLiveNodes
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numShards
init|=
operator|(
name|numLiveNodes
operator|/
literal|2
operator|)
operator|+
literal|1
decl_stmt|;
name|int
name|replicationFactor
init|=
literal|2
decl_stmt|;
name|int
name|maxShardsPerNode
init|=
literal|1
decl_stmt|;
name|collectionInfos
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|CloudSolrServer
name|client
init|=
name|createCloudClient
argument_list|(
literal|"awholynewcollection_"
operator|+
name|cnt
argument_list|)
decl_stmt|;
try|try
block|{
name|createCollection
argument_list|(
name|collectionInfos
argument_list|,
literal|"awholynewcollection_"
operator|+
name|cnt
argument_list|,
name|numShards
argument_list|,
name|replicationFactor
argument_list|,
name|maxShardsPerNode
argument_list|,
name|client
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|client
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// TODO: REMOVE THE SLEEP IN THE METHOD CALL WHEN WE HAVE COLLECTION API
comment|// RESPONSES
name|checkCollectionIsNotCreated
argument_list|(
name|collectionInfos
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test createNodeSet
name|numLiveNodes
operator|=
name|getCommonCloudSolrServer
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLiveNodes
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|createNodeList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|numOfCreateNodes
init|=
name|numLiveNodes
operator|/
literal|2
decl_stmt|;
name|assertFalse
argument_list|(
literal|"createNodeSet test is pointless with only "
operator|+
name|numLiveNodes
operator|+
literal|" nodes running"
argument_list|,
name|numOfCreateNodes
operator|==
literal|0
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|liveNode
range|:
name|getCommonCloudSolrServer
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLiveNodes
argument_list|()
control|)
block|{
if|if
condition|(
name|i
operator|<
name|numOfCreateNodes
condition|)
block|{
name|createNodeList
operator|.
name|add
argument_list|(
name|liveNode
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|maxShardsPerNode
operator|=
literal|2
expr_stmt|;
name|numShards
operator|=
name|createNodeList
operator|.
name|size
argument_list|()
operator|*
name|maxShardsPerNode
expr_stmt|;
name|replicationFactor
operator|=
literal|1
expr_stmt|;
name|collectionInfos
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|client
operator|=
name|createCloudClient
argument_list|(
literal|"awholynewcollection_"
operator|+
operator|(
name|cnt
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
try|try
block|{
name|createCollection
argument_list|(
name|collectionInfos
argument_list|,
literal|"awholynewcollection_"
operator|+
operator|(
name|cnt
operator|+
literal|1
operator|)
argument_list|,
name|numShards
argument_list|,
name|replicationFactor
argument_list|,
name|maxShardsPerNode
argument_list|,
name|client
argument_list|,
name|StrUtils
operator|.
name|join
argument_list|(
name|createNodeList
argument_list|,
literal|','
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|client
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|checkForCollection
argument_list|(
name|collectionInfos
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|collectionInfos
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|createNodeList
argument_list|)
expr_stmt|;
name|checkNoTwoShardsUseTheSameIndexDir
argument_list|()
expr_stmt|;
block|}
DECL|method|createCollection
specifier|protected
name|void
name|createCollection
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|collectionInfos
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|int
name|numShards
parameter_list|,
name|int
name|numReplicas
parameter_list|,
name|int
name|maxShardsPerNode
parameter_list|,
name|SolrServer
name|client
parameter_list|,
name|String
name|createNodeSetStr
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|OverseerCollectionProcessor
operator|.
name|NUM_SLICES
argument_list|,
name|numShards
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|OverseerCollectionProcessor
operator|.
name|REPLICATION_FACTOR
argument_list|,
name|numReplicas
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|OverseerCollectionProcessor
operator|.
name|MAX_SHARDS_PER_NODE
argument_list|,
name|maxShardsPerNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|createNodeSetStr
operator|!=
literal|null
condition|)
name|params
operator|.
name|set
argument_list|(
name|OverseerCollectionProcessor
operator|.
name|CREATE_NODE_SET
argument_list|,
name|createNodeSetStr
argument_list|)
expr_stmt|;
name|int
name|clientIndex
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|numShards
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|numReplicas
argument_list|)
expr_stmt|;
name|collectionInfos
operator|.
name|put
argument_list|(
name|collectionName
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|SolrRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
if|if
condition|(
name|client
operator|==
literal|null
condition|)
block|{
specifier|final
name|String
name|baseUrl
init|=
operator|(
operator|(
name|HttpSolrServer
operator|)
name|clients
operator|.
name|get
argument_list|(
name|clientIndex
argument_list|)
operator|)
operator|.
name|getBaseURL
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|HttpSolrServer
operator|)
name|clients
operator|.
name|get
argument_list|(
name|clientIndex
argument_list|)
operator|)
operator|.
name|getBaseURL
argument_list|()
operator|.
name|length
argument_list|()
operator|-
name|DEFAULT_COLLECTION
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|createNewSolrServer
argument_list|(
literal|""
argument_list|,
name|baseUrl
argument_list|)
operator|.
name|request
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|client
operator|.
name|request
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|waitForReloads
specifier|private
name|boolean
name|waitForReloads
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|urlToTimeBefore
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|long
name|timeoutAt
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|45000
decl_stmt|;
name|boolean
name|allTimesAreCorrect
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeoutAt
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|urlToTimeAfter
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|collectStartTimes
argument_list|(
name|collectionName
argument_list|,
name|urlToTimeAfter
argument_list|)
expr_stmt|;
name|boolean
name|retry
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|entries
init|=
name|urlToTimeBefore
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|Long
name|beforeTime
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Long
name|afterTime
init|=
name|urlToTimeAfter
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|afterTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|afterTime
operator|<=
name|beforeTime
condition|)
block|{
name|retry
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|retry
condition|)
block|{
name|allTimesAreCorrect
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
return|return
name|allTimesAreCorrect
return|;
block|}
DECL|method|collectStartTimes
specifier|private
name|void
name|collectStartTimes
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|urlToTime
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|DocCollection
argument_list|>
name|collections
init|=
name|getCommonCloudSolrServer
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollectionStates
argument_list|()
decl_stmt|;
if|if
condition|(
name|collections
operator|.
name|containsKey
argument_list|(
name|collectionName
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|collections
operator|.
name|get
argument_list|(
name|collectionName
argument_list|)
operator|.
name|getSlicesMap
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
name|it
init|=
name|slices
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|sliceEntry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|sliceShards
init|=
name|sliceEntry
operator|.
name|getValue
argument_list|()
operator|.
name|getReplicasMap
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
argument_list|>
name|shardIt
init|=
name|sliceShards
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|shardIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|shardEntry
init|=
name|shardIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|ZkCoreNodeProps
name|coreProps
init|=
operator|new
name|ZkCoreNodeProps
argument_list|(
name|shardEntry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|CoreAdminResponse
name|mcr
init|=
name|CoreAdminRequest
operator|.
name|getStatus
argument_list|(
name|coreProps
operator|.
name|getCoreName
argument_list|()
argument_list|,
operator|new
name|HttpSolrServer
argument_list|(
name|coreProps
operator|.
name|getBaseUrl
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|before
init|=
name|mcr
operator|.
name|getStartTime
argument_list|(
name|coreProps
operator|.
name|getCoreName
argument_list|()
argument_list|)
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|urlToTime
operator|.
name|put
argument_list|(
name|coreProps
operator|.
name|getCoreUrl
argument_list|()
argument_list|,
name|before
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Could not find collection in :"
operator|+
name|collections
operator|.
name|keySet
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|getUrlFromZk
specifier|private
name|String
name|getUrlFromZk
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|ClusterState
name|clusterState
init|=
name|getCommonCloudSolrServer
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|clusterState
operator|.
name|getCollectionStates
argument_list|()
operator|.
name|get
argument_list|(
name|collection
argument_list|)
operator|.
name|getSlicesMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|slices
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Could not find collection:"
operator|+
name|collection
argument_list|)
throw|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|entry
range|:
name|slices
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Slice
name|slice
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|shards
init|=
name|slice
operator|.
name|getReplicasMap
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
argument_list|>
name|shardEntries
init|=
name|shards
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|shardEntry
range|:
name|shardEntries
control|)
block|{
specifier|final
name|ZkNodeProps
name|node
init|=
name|shardEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|clusterState
operator|.
name|liveNodesContain
argument_list|(
name|node
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|ZkCoreNodeProps
operator|.
name|getCoreUrl
argument_list|(
name|node
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|)
argument_list|,
name|collection
argument_list|)
return|;
comment|//new ZkCoreNodeProps(node).getCoreUrl();
block|}
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not find a live node for collection:"
operator|+
name|collection
argument_list|)
throw|;
block|}
DECL|method|waitForNon403or404or503
specifier|private
name|void
name|waitForNon403or404or503
parameter_list|(
name|HttpSolrServer
name|collectionClient
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrException
name|exp
init|=
literal|null
decl_stmt|;
name|long
name|timeoutAt
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|30000
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeoutAt
condition|)
block|{
name|boolean
name|missing
init|=
literal|false
decl_stmt|;
try|try
block|{
name|collectionClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|e
operator|.
name|code
argument_list|()
operator|==
literal|403
operator|||
name|e
operator|.
name|code
argument_list|()
operator|==
literal|503
operator|||
name|e
operator|.
name|code
argument_list|()
operator|==
literal|404
operator|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
name|exp
operator|=
name|e
expr_stmt|;
name|missing
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|missing
condition|)
block|{
return|return;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"Could not find the new collection - "
operator|+
name|exp
operator|.
name|code
argument_list|()
operator|+
literal|" : "
operator|+
name|collectionClient
operator|.
name|getBaseURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkCollectionExpectations
specifier|private
name|String
name|checkCollectionExpectations
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|numShardsNumReplicaList
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|nodesAllowedToRunShards
parameter_list|)
block|{
name|ClusterState
name|clusterState
init|=
name|getCommonCloudSolrServer
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|int
name|expectedSlices
init|=
name|numShardsNumReplicaList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// The Math.min thing is here, because we expect replication-factor to be reduced to if there are not enough live nodes to spread all shards of a collection over different nodes
name|int
name|expectedShardsPerSlice
init|=
name|numShardsNumReplicaList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|int
name|expectedTotalShards
init|=
name|expectedSlices
operator|*
name|expectedShardsPerSlice
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|DocCollection
argument_list|>
name|collections
init|=
name|clusterState
operator|.
name|getCollectionStates
argument_list|()
decl_stmt|;
if|if
condition|(
name|collections
operator|.
name|containsKey
argument_list|(
name|collectionName
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|collections
operator|.
name|get
argument_list|(
name|collectionName
argument_list|)
operator|.
name|getSlicesMap
argument_list|()
decl_stmt|;
comment|// did we find expectedSlices slices/shards?
if|if
condition|(
name|slices
operator|.
name|size
argument_list|()
operator|!=
name|expectedSlices
condition|)
block|{
return|return
literal|"Found new collection "
operator|+
name|collectionName
operator|+
literal|", but mismatch on number of slices. Expected: "
operator|+
name|expectedSlices
operator|+
literal|", actual: "
operator|+
name|slices
operator|.
name|size
argument_list|()
return|;
block|}
name|int
name|totalShards
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|sliceName
range|:
name|slices
operator|.
name|keySet
argument_list|()
control|)
block|{
for|for
control|(
name|Replica
name|replica
range|:
name|slices
operator|.
name|get
argument_list|(
name|sliceName
argument_list|)
operator|.
name|getReplicas
argument_list|()
control|)
block|{
if|if
condition|(
name|nodesAllowedToRunShards
operator|!=
literal|null
operator|&&
operator|!
name|nodesAllowedToRunShards
operator|.
name|contains
argument_list|(
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|"Shard "
operator|+
name|replica
operator|.
name|getName
argument_list|()
operator|+
literal|" created on node "
operator|+
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
operator|+
literal|" not allowed to run shards for the created collection "
operator|+
name|collectionName
return|;
block|}
block|}
name|totalShards
operator|+=
name|slices
operator|.
name|get
argument_list|(
name|sliceName
argument_list|)
operator|.
name|getReplicas
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|totalShards
operator|!=
name|expectedTotalShards
condition|)
block|{
return|return
literal|"Found new collection "
operator|+
name|collectionName
operator|+
literal|" with correct number of slices, but mismatch on number of shards. Expected: "
operator|+
name|expectedTotalShards
operator|+
literal|", actual: "
operator|+
name|totalShards
return|;
block|}
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
literal|"Could not find new collection "
operator|+
name|collectionName
return|;
block|}
block|}
DECL|method|checkForCollection
specifier|private
name|void
name|checkForCollection
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|numShardsNumReplicaList
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|nodesAllowedToRunShards
parameter_list|)
throws|throws
name|Exception
block|{
comment|// check for an expectedSlices new collection - we poll the state
name|long
name|timeoutAt
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|120000
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|String
name|checkResult
init|=
literal|"Didnt get to perform a single check"
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeoutAt
condition|)
block|{
name|checkResult
operator|=
name|checkCollectionExpectations
argument_list|(
name|collectionName
argument_list|,
name|numShardsNumReplicaList
argument_list|,
name|nodesAllowedToRunShards
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkResult
operator|==
literal|null
condition|)
block|{
name|success
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|super
operator|.
name|printLayout
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|checkResult
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkCollectionIsNotCreated
specifier|private
name|void
name|checkCollectionIsNotCreated
parameter_list|(
name|String
name|collectionName
parameter_list|)
throws|throws
name|Exception
block|{
comment|// TODO: REMOVE THIS SLEEP WHEN WE HAVE COLLECTION API RESPONSES
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|collectionName
operator|+
literal|" not supposed to exist"
argument_list|,
name|getCommonCloudSolrServer
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollections
argument_list|()
operator|.
name|contains
argument_list|(
name|collectionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkForMissingCollection
specifier|private
name|void
name|checkForMissingCollection
parameter_list|(
name|String
name|collectionName
parameter_list|)
throws|throws
name|Exception
block|{
comment|// check for a  collection - we poll the state
name|long
name|timeoutAt
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|45000
decl_stmt|;
name|boolean
name|found
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeoutAt
condition|)
block|{
name|getCommonCloudSolrServer
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|updateClusterState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|getCommonCloudSolrServer
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|DocCollection
argument_list|>
name|collections
init|=
name|clusterState
operator|.
name|getCollectionStates
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|collections
operator|.
name|containsKey
argument_list|(
name|collectionName
argument_list|)
condition|)
block|{
name|found
operator|=
literal|false
expr_stmt|;
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|found
condition|)
block|{
name|fail
argument_list|(
literal|"Found collection that should be gone "
operator|+
name|collectionName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkNoTwoShardsUseTheSameIndexDir
specifier|private
name|void
name|checkNoTwoShardsUseTheSameIndexDir
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|indexDirToShardNamesMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MBeanServer
argument_list|>
name|servers
init|=
operator|new
name|LinkedList
argument_list|<
name|MBeanServer
argument_list|>
argument_list|()
decl_stmt|;
name|servers
operator|.
name|add
argument_list|(
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
argument_list|)
expr_stmt|;
name|servers
operator|.
name|addAll
argument_list|(
name|MBeanServerFactory
operator|.
name|findMBeanServer
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|MBeanServer
name|server
range|:
name|servers
control|)
block|{
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|mbeans
init|=
operator|new
name|HashSet
argument_list|<
name|ObjectName
argument_list|>
argument_list|()
decl_stmt|;
name|mbeans
operator|.
name|addAll
argument_list|(
name|server
operator|.
name|queryNames
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|ObjectName
name|mbean
range|:
name|mbeans
control|)
block|{
name|Object
name|value
decl_stmt|;
name|Object
name|indexDir
decl_stmt|;
name|Object
name|name
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|(
operator|(
name|value
operator|=
name|server
operator|.
name|getAttribute
argument_list|(
name|mbean
argument_list|,
literal|"category"
argument_list|)
operator|)
operator|!=
literal|null
operator|&&
name|value
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|CORE
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
operator|(
name|indexDir
operator|=
name|server
operator|.
name|getAttribute
argument_list|(
name|mbean
argument_list|,
literal|"coreName"
argument_list|)
operator|)
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|(
name|indexDir
operator|=
name|server
operator|.
name|getAttribute
argument_list|(
name|mbean
argument_list|,
literal|"indexDir"
argument_list|)
operator|)
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|(
name|name
operator|=
name|server
operator|.
name|getAttribute
argument_list|(
name|mbean
argument_list|,
literal|"name"
argument_list|)
operator|)
operator|!=
literal|null
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|indexDirToShardNamesMap
operator|.
name|containsKey
argument_list|(
name|indexDir
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|indexDirToShardNamesMap
operator|.
name|put
argument_list|(
name|indexDir
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|indexDirToShardNamesMap
operator|.
name|get
argument_list|(
name|indexDir
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|name
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore, just continue - probably a "category" or "source" attribute
comment|// not found
block|}
block|}
block|}
name|assertTrue
argument_list|(
literal|"Something is broken in the assert for no shards using the same indexDir - probably something was changed in the attributes published in the MBean of "
operator|+
name|SolrCore
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" : "
operator|+
name|indexDirToShardNamesMap
argument_list|,
name|indexDirToShardNamesMap
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|indexDirToShardNamesMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"We have shards using the same indexDir. E.g. shards "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" all use indexDir "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getDoc
specifier|protected
name|SolrInputDocument
name|getDoc
parameter_list|(
name|Object
modifier|...
name|fields
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|addFields
argument_list|(
name|doc
argument_list|,
name|fields
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
DECL|method|createNewSolrServer
specifier|protected
name|SolrServer
name|createNewSolrServer
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|baseUrl
parameter_list|)
block|{
try|try
block|{
comment|// setup the server...
name|HttpSolrServer
name|s
init|=
operator|new
name|HttpSolrServer
argument_list|(
name|baseUrl
operator|+
literal|"/"
operator|+
name|collection
argument_list|)
decl_stmt|;
name|s
operator|.
name|setConnectionTimeout
argument_list|(
name|DEFAULT_CONNECTION_TIMEOUT
argument_list|)
expr_stmt|;
name|s
operator|.
name|setDefaultMaxConnectionsPerHost
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|s
operator|.
name|setMaxTotalConnections
argument_list|(
literal|100
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|field|commondCloudSolrServer
specifier|volatile
name|CloudSolrServer
name|commondCloudSolrServer
decl_stmt|;
DECL|method|getCommonCloudSolrServer
specifier|private
name|CloudSolrServer
name|getCommonCloudSolrServer
parameter_list|()
block|{
if|if
condition|(
name|commondCloudSolrServer
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
try|try
block|{
name|commondCloudSolrServer
operator|=
operator|new
name|CloudSolrServer
argument_list|(
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
expr_stmt|;
name|commondCloudSolrServer
operator|.
name|setDefaultCollection
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
expr_stmt|;
name|commondCloudSolrServer
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|commondCloudSolrServer
return|;
block|}
annotation|@
name|Override
DECL|method|queryServer
specifier|protected
name|QueryResponse
name|queryServer
parameter_list|(
name|ModifiableSolrParams
name|params
parameter_list|)
throws|throws
name|SolrServerException
block|{
if|if
condition|(
name|r
operator|.
name|nextBoolean
argument_list|()
condition|)
return|return
name|super
operator|.
name|queryServer
argument_list|(
name|params
argument_list|)
return|;
if|if
condition|(
name|r
operator|.
name|nextBoolean
argument_list|()
condition|)
name|params
operator|.
name|set
argument_list|(
literal|"collection"
argument_list|,
name|DEFAULT_COLLECTION
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|getCommonCloudSolrServer
argument_list|()
operator|.
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
return|return
name|rsp
return|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|commondCloudSolrServer
operator|!=
literal|null
condition|)
block|{
name|commondCloudSolrServer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|clearProperty
argument_list|(
literal|"numShards"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"zkHost"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.xml.persist"
argument_list|)
expr_stmt|;
comment|// insurance
name|DirectUpdateHandler2
operator|.
name|commitOnClose
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_class
end_unit
