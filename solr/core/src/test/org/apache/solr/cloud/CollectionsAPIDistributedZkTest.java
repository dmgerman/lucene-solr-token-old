begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
operator|.
name|RemoteSolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
operator|.
name|Create
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|CollectionAdminResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|CoreAdminResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|MapSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrInfoMBean
operator|.
name|Category
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|SolrDispatchFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|DirectUpdateHandler2
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DefaultSolrThreadFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerFactory
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionProcessor
operator|.
name|NUM_SLICES
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
operator|.
name|makeMap
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|MAX_SHARDS_PER_NODE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|REPLICATION_FACTOR
import|;
end_import
begin_comment
comment|/**  * Tests the Cloud Collections API.  */
end_comment
begin_class
annotation|@
name|Slow
DECL|class|CollectionsAPIDistributedZkTest
specifier|public
class|class
name|CollectionsAPIDistributedZkTest
extends|extends
name|AbstractFullDistribZkTestBase
block|{
DECL|field|DEFAULT_COLLECTION
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_COLLECTION
init|=
literal|"collection1"
decl_stmt|;
DECL|field|DEBUG
specifier|private
specifier|static
specifier|final
name|boolean
name|DEBUG
init|=
literal|false
decl_stmt|;
DECL|field|executor
name|ThreadPoolExecutor
name|executor
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
operator|new
name|DefaultSolrThreadFactory
argument_list|(
literal|"testExecutor"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|completionService
name|CompletionService
argument_list|<
name|Object
argument_list|>
name|completionService
decl_stmt|;
DECL|field|pending
name|Set
argument_list|<
name|Future
argument_list|<
name|Object
argument_list|>
argument_list|>
name|pending
decl_stmt|;
comment|// we randomly use a second config set rather than just one
DECL|field|secondConfigSet
specifier|private
name|boolean
name|secondConfigSet
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeThisClass2
specifier|public
specifier|static
name|void
name|beforeThisClass2
parameter_list|()
throws|throws
name|Exception
block|{    }
annotation|@
name|Override
DECL|method|distribSetUp
specifier|public
name|void
name|distribSetUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|distribSetUp
argument_list|()
expr_stmt|;
name|useJettyDataDir
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|secondConfigSet
condition|)
block|{
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkHost
argument_list|()
decl_stmt|;
name|String
name|zkAddress
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|SolrZkClient
name|zkClient
init|=
operator|new
name|SolrZkClient
argument_list|(
name|zkHost
argument_list|,
name|AbstractZkTestCase
operator|.
name|TIMEOUT
argument_list|)
decl_stmt|;
name|zkClient
operator|.
name|makePath
argument_list|(
literal|"/solr"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|close
argument_list|()
expr_stmt|;
name|zkClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|zkAddress
argument_list|,
name|AbstractZkTestCase
operator|.
name|TIMEOUT
argument_list|)
expr_stmt|;
name|File
name|solrhome
init|=
operator|new
name|File
argument_list|(
name|TEST_HOME
argument_list|()
argument_list|)
decl_stmt|;
comment|// for now, always upload the config and schema to the canonical names
name|AbstractZkTestCase
operator|.
name|putConfig
argument_list|(
literal|"conf2"
argument_list|,
name|zkClient
argument_list|,
name|solrhome
argument_list|,
name|getCloudSolrConfig
argument_list|()
argument_list|,
literal|"solrconfig.xml"
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|putConfig
argument_list|(
literal|"conf2"
argument_list|,
name|zkClient
argument_list|,
name|solrhome
argument_list|,
literal|"schema.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|putConfig
argument_list|(
literal|"conf2"
argument_list|,
name|zkClient
argument_list|,
name|solrhome
argument_list|,
literal|"solrconfig.snippet.randomindexconfig.xml"
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|putConfig
argument_list|(
literal|"conf2"
argument_list|,
name|zkClient
argument_list|,
name|solrhome
argument_list|,
literal|"stopwords.txt"
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|putConfig
argument_list|(
literal|"conf2"
argument_list|,
name|zkClient
argument_list|,
name|solrhome
argument_list|,
literal|"protwords.txt"
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|putConfig
argument_list|(
literal|"conf2"
argument_list|,
name|zkClient
argument_list|,
name|solrhome
argument_list|,
literal|"currency.xml"
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|putConfig
argument_list|(
literal|"conf2"
argument_list|,
name|zkClient
argument_list|,
name|solrhome
argument_list|,
literal|"open-exchange-rates.json"
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|putConfig
argument_list|(
literal|"conf2"
argument_list|,
name|zkClient
argument_list|,
name|solrhome
argument_list|,
literal|"mapping-ISOLatin1Accent.txt"
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|putConfig
argument_list|(
literal|"conf2"
argument_list|,
name|zkClient
argument_list|,
name|solrhome
argument_list|,
literal|"old_synonyms.txt"
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|putConfig
argument_list|(
literal|"conf2"
argument_list|,
name|zkClient
argument_list|,
name|solrhome
argument_list|,
literal|"synonyms.txt"
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|putConfig
argument_list|(
literal|"conf2"
argument_list|,
name|zkClient
argument_list|,
name|solrhome
argument_list|,
literal|"elevate.xml"
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|setProperty
argument_list|(
literal|"numShards"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|sliceCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getSolrXml
specifier|protected
name|String
name|getSolrXml
parameter_list|()
block|{
return|return
literal|"solr-no-core.xml"
return|;
block|}
DECL|method|CollectionsAPIDistributedZkTest
specifier|public
name|CollectionsAPIDistributedZkTest
parameter_list|()
block|{
name|sliceCount
operator|=
literal|2
expr_stmt|;
name|completionService
operator|=
operator|new
name|ExecutorCompletionService
argument_list|<>
argument_list|(
name|executor
argument_list|)
expr_stmt|;
name|pending
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|checkCreatedVsState
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDistributedParams
specifier|protected
name|void
name|setDistributedParams
parameter_list|(
name|ModifiableSolrParams
name|params
parameter_list|)
block|{
if|if
condition|(
name|r
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// don't set shards, let that be figured out from the cloud state
block|}
else|else
block|{
comment|// use shard ids rather than physical locations
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getShardCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"shard"
operator|+
operator|(
name|i
operator|+
literal|3
operator|)
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|set
argument_list|(
literal|"shards"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|ShardsFixed
argument_list|(
name|num
operator|=
literal|4
argument_list|)
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|testNodesUsedByCreate
argument_list|()
expr_stmt|;
name|testCollectionsAPI
argument_list|()
expr_stmt|;
name|testCollectionsAPIAddRemoveStress
argument_list|()
expr_stmt|;
name|testErrorHandling
argument_list|()
expr_stmt|;
name|testNoCollectionSpecified
argument_list|()
expr_stmt|;
name|deletePartiallyCreatedCollection
argument_list|()
expr_stmt|;
name|deleteCollectionRemovesStaleZkCollectionsNode
argument_list|()
expr_stmt|;
name|clusterPropTest
argument_list|()
expr_stmt|;
comment|// last
name|deleteCollectionWithDownNodes
argument_list|()
expr_stmt|;
name|addReplicaTest
argument_list|()
expr_stmt|;
if|if
condition|(
name|DEBUG
condition|)
block|{
name|super
operator|.
name|printLayout
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|deleteCollectionRemovesStaleZkCollectionsNode
specifier|private
name|void
name|deleteCollectionRemovesStaleZkCollectionsNode
parameter_list|()
throws|throws
name|Exception
block|{
comment|// we can use this client because we just want base url
specifier|final
name|String
name|baseUrl
init|=
name|getBaseUrl
argument_list|(
operator|(
name|HttpSolrClient
operator|)
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|collectionName
init|=
literal|"out_of_sync_collection"
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|numShardsNumReplicaList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|numShardsNumReplicaList
operator|.
name|add
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|numShardsNumReplicaList
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getZkClient
argument_list|()
operator|.
name|makePath
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|collectionName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|DELETE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|QueryRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
try|try
block|{
name|makeRequest
argument_list|(
name|baseUrl
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected to fail, because collection is not in clusterstate"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteSolrException
name|e
parameter_list|)
block|{            }
name|checkForMissingCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getZkClient
argument_list|()
operator|.
name|exists
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|collectionName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|deletePartiallyCreatedCollection
specifier|private
name|void
name|deletePartiallyCreatedCollection
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|baseUrl
init|=
name|getBaseUrl
argument_list|(
operator|(
name|HttpSolrClient
operator|)
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|collectionName
init|=
literal|"halfdeletedcollection"
decl_stmt|;
name|Create
name|createCmd
init|=
operator|new
name|Create
argument_list|()
decl_stmt|;
name|createCmd
operator|.
name|setCoreName
argument_list|(
literal|"halfdeletedcollection_shard1_replica1"
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|String
name|dataDir
init|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|createCmd
operator|.
name|setDataDir
argument_list|(
name|dataDir
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setNumShards
argument_list|(
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|secondConfigSet
condition|)
block|{
name|createCmd
operator|.
name|setCollectionConfigName
argument_list|(
literal|"conf1"
argument_list|)
expr_stmt|;
block|}
name|makeRequest
argument_list|(
name|baseUrl
argument_list|,
name|createCmd
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|DELETE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|QueryRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|makeRequest
argument_list|(
name|baseUrl
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|checkForMissingCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
comment|// now creating that collection should work
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"numShards"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|request
operator|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
if|if
condition|(
name|secondConfigSet
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
literal|"collection.configName"
argument_list|,
literal|"conf1"
argument_list|)
expr_stmt|;
block|}
name|makeRequest
argument_list|(
name|baseUrl
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteCollectionWithDownNodes
specifier|private
name|void
name|deleteCollectionWithDownNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|baseUrl
init|=
name|getBaseUrl
argument_list|(
operator|(
name|HttpSolrClient
operator|)
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
comment|// now try to remove a collection when a couple of its nodes are down
if|if
condition|(
name|secondConfigSet
condition|)
block|{
try|try
init|(
name|SolrClient
name|client
init|=
name|createNewSolrClient
argument_list|(
literal|""
argument_list|,
name|baseUrl
argument_list|)
init|)
block|{
name|createCollection
argument_list|(
literal|null
argument_list|,
literal|"halfdeletedcollection2"
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|,
name|client
argument_list|,
literal|null
argument_list|,
literal|"conf2"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
init|(
name|SolrClient
name|client
init|=
name|createNewSolrClient
argument_list|(
literal|""
argument_list|,
name|baseUrl
argument_list|)
init|)
block|{
name|createCollection
argument_list|(
literal|null
argument_list|,
literal|"halfdeletedcollection2"
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|,
name|client
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|waitForRecoveriesToFinish
argument_list|(
literal|"halfdeletedcollection2"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// stop a couple nodes
name|ChaosMonkey
operator|.
name|stop
argument_list|(
name|jettys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ChaosMonkey
operator|.
name|stop
argument_list|(
name|jettys
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for leaders to settle out
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getLeaderRetry
argument_list|(
literal|"halfdeletedcollection2"
argument_list|,
literal|"shard"
operator|+
name|i
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
block|}
name|baseUrl
operator|=
name|getBaseUrl
argument_list|(
operator|(
name|HttpSolrClient
operator|)
name|clients
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove a collection
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|DELETE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
literal|"halfdeletedcollection2"
argument_list|)
expr_stmt|;
name|QueryRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|makeRequest
argument_list|(
name|baseUrl
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|long
name|timeout
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|10000
decl_stmt|;
while|while
condition|(
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|hasCollection
argument_list|(
literal|"halfdeletedcollection2"
argument_list|)
condition|)
block|{
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|timeout
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Timeout waiting to see removed collection leave clusterstate"
argument_list|)
throw|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|updateClusterState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Still found collection that should be gone"
argument_list|,
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|hasCollection
argument_list|(
literal|"halfdeletedcollection2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|makeRequest
specifier|private
name|NamedList
argument_list|<
name|Object
argument_list|>
name|makeRequest
parameter_list|(
name|String
name|baseUrl
parameter_list|,
name|SolrRequest
name|request
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
try|try
init|(
name|SolrClient
name|client
init|=
name|createNewSolrClient
argument_list|(
literal|""
argument_list|,
name|baseUrl
argument_list|)
init|)
block|{
return|return
name|client
operator|.
name|request
argument_list|(
name|request
argument_list|)
return|;
block|}
block|}
DECL|method|testErrorHandling
specifier|private
name|void
name|testErrorHandling
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|baseUrl
init|=
name|getBaseUrl
argument_list|(
operator|(
name|HttpSolrClient
operator|)
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
comment|// try a bad action
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
literal|"BADACTION"
argument_list|)
expr_stmt|;
name|String
name|collectionName
init|=
literal|"badactioncollection"
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"numShards"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QueryRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|boolean
name|gotExp
init|=
literal|false
decl_stmt|;
try|try
block|{
name|makeRequest
argument_list|(
name|baseUrl
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|gotExp
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|gotExp
argument_list|)
expr_stmt|;
comment|// leave out required param name
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"numShards"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|collectionName
operator|=
literal|"collection"
expr_stmt|;
comment|// No Name
comment|// params.set("name", collectionName);
if|if
condition|(
name|secondConfigSet
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
literal|"collection.configName"
argument_list|,
literal|"conf1"
argument_list|)
expr_stmt|;
block|}
name|request
operator|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|gotExp
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|makeRequest
argument_list|(
name|baseUrl
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|gotExp
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|gotExp
argument_list|)
expr_stmt|;
comment|// Too many replicas
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|collectionName
operator|=
literal|"collection"
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"numShards"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|secondConfigSet
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
literal|"collection.configName"
argument_list|,
literal|"conf1"
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|set
argument_list|(
name|REPLICATION_FACTOR
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|request
operator|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|gotExp
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|makeRequest
argument_list|(
name|baseUrl
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|gotExp
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|gotExp
argument_list|)
expr_stmt|;
comment|// No numShards should fail
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|collectionName
operator|=
literal|"acollection"
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|REPLICATION_FACTOR
argument_list|,
literal|10
argument_list|)
expr_stmt|;
if|if
condition|(
name|secondConfigSet
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
literal|"collection.configName"
argument_list|,
literal|"conf1"
argument_list|)
expr_stmt|;
block|}
name|request
operator|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|gotExp
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|makeRequest
argument_list|(
name|baseUrl
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|gotExp
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|gotExp
argument_list|)
expr_stmt|;
comment|// 0 numShards should fail
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|collectionName
operator|=
literal|"acollection"
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|REPLICATION_FACTOR
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"numShards"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|secondConfigSet
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
literal|"collection.configName"
argument_list|,
literal|"conf1"
argument_list|)
expr_stmt|;
block|}
name|request
operator|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|gotExp
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|makeRequest
argument_list|(
name|baseUrl
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|gotExp
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|gotExp
argument_list|)
expr_stmt|;
comment|// Fail on one node
comment|// first we make a core with the core name the collections api
comment|// will try and use - this will cause our mock fail
name|Create
name|createCmd
init|=
operator|new
name|Create
argument_list|()
decl_stmt|;
name|createCmd
operator|.
name|setCoreName
argument_list|(
literal|"halfcollection_shard1_replica1"
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setCollection
argument_list|(
literal|"halfcollectionblocker"
argument_list|)
expr_stmt|;
name|String
name|dataDir
init|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|createCmd
operator|.
name|setDataDir
argument_list|(
name|dataDir
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setNumShards
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|secondConfigSet
condition|)
block|{
name|createCmd
operator|.
name|setCollectionConfigName
argument_list|(
literal|"conf1"
argument_list|)
expr_stmt|;
block|}
name|makeRequest
argument_list|(
name|baseUrl
argument_list|,
name|createCmd
argument_list|)
expr_stmt|;
name|createCmd
operator|=
operator|new
name|Create
argument_list|()
expr_stmt|;
name|createCmd
operator|.
name|setCoreName
argument_list|(
literal|"halfcollection_shard1_replica1"
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setCollection
argument_list|(
literal|"halfcollectionblocker2"
argument_list|)
expr_stmt|;
name|dataDir
operator|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|createCmd
operator|.
name|setDataDir
argument_list|(
name|dataDir
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setNumShards
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|secondConfigSet
condition|)
block|{
name|createCmd
operator|.
name|setCollectionConfigName
argument_list|(
literal|"conf1"
argument_list|)
expr_stmt|;
block|}
name|makeRequest
argument_list|(
name|getBaseUrl
argument_list|(
operator|(
name|HttpSolrClient
operator|)
name|clients
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|createCmd
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|collectionName
operator|=
literal|"halfcollection"
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"numShards"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"wt"
argument_list|,
literal|"xml"
argument_list|)
expr_stmt|;
if|if
condition|(
name|secondConfigSet
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
literal|"collection.configName"
argument_list|,
literal|"conf1"
argument_list|)
expr_stmt|;
block|}
name|String
name|nn1
init|=
operator|(
operator|(
name|SolrDispatchFilter
operator|)
name|jettys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDispatchFilter
argument_list|()
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getCores
argument_list|()
operator|.
name|getZkController
argument_list|()
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
name|String
name|nn2
init|=
operator|(
operator|(
name|SolrDispatchFilter
operator|)
name|jettys
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getDispatchFilter
argument_list|()
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getCores
argument_list|()
operator|.
name|getZkController
argument_list|()
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|OverseerCollectionProcessor
operator|.
name|CREATE_NODE_SET
argument_list|,
name|nn1
operator|+
literal|","
operator|+
name|nn2
argument_list|)
expr_stmt|;
name|request
operator|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|gotExp
operator|=
literal|false
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|resp
init|=
name|makeRequest
argument_list|(
name|baseUrl
argument_list|,
name|request
argument_list|)
decl_stmt|;
empty_stmt|;
name|SimpleOrderedMap
name|success
init|=
operator|(
name|SimpleOrderedMap
operator|)
name|resp
operator|.
name|get
argument_list|(
literal|"success"
argument_list|)
decl_stmt|;
name|SimpleOrderedMap
name|failure
init|=
operator|(
name|SimpleOrderedMap
operator|)
name|resp
operator|.
name|get
argument_list|(
literal|"failure"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|resp
operator|.
name|toString
argument_list|()
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|resp
operator|.
name|toString
argument_list|()
argument_list|,
name|failure
argument_list|)
expr_stmt|;
name|String
name|val1
init|=
name|success
operator|.
name|getVal
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|val2
init|=
name|failure
operator|.
name|getVal
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|val1
operator|.
name|contains
argument_list|(
literal|"SolrException"
argument_list|)
operator|||
name|val2
operator|.
name|contains
argument_list|(
literal|"SolrException"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoCollectionSpecified
specifier|private
name|void
name|testNoCollectionSpecified
parameter_list|()
throws|throws
name|Exception
block|{
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|updateClusterState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|hasCollection
argument_list|(
literal|"corewithnocollection"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|hasCollection
argument_list|(
literal|"corewithnocollection2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// try and create a SolrCore with no collection name
name|Create
name|createCmd
init|=
operator|new
name|Create
argument_list|()
decl_stmt|;
name|createCmd
operator|.
name|setCoreName
argument_list|(
literal|"corewithnocollection"
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setCollection
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|String
name|dataDir
init|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|createCmd
operator|.
name|setDataDir
argument_list|(
name|dataDir
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setNumShards
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|secondConfigSet
condition|)
block|{
name|createCmd
operator|.
name|setCollectionConfigName
argument_list|(
literal|"conf1"
argument_list|)
expr_stmt|;
block|}
name|makeRequest
argument_list|(
name|getBaseUrl
argument_list|(
operator|(
name|HttpSolrClient
operator|)
name|clients
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|createCmd
argument_list|)
expr_stmt|;
comment|// try and create a SolrCore with no collection name
name|createCmd
operator|.
name|setCollection
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setCoreName
argument_list|(
literal|"corewithnocollection2"
argument_list|)
expr_stmt|;
name|makeRequest
argument_list|(
name|getBaseUrl
argument_list|(
operator|(
name|HttpSolrClient
operator|)
name|clients
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|createCmd
argument_list|)
expr_stmt|;
comment|// in both cases, the collection should have default to the core name
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|updateClusterState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|hasCollection
argument_list|(
literal|"corewithnocollection"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|hasCollection
argument_list|(
literal|"corewithnocollection2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNodesUsedByCreate
specifier|private
name|void
name|testNodesUsedByCreate
parameter_list|()
throws|throws
name|Exception
block|{
comment|// we can use this client because we just want base url
specifier|final
name|String
name|baseUrl
init|=
name|getBaseUrl
argument_list|(
operator|(
name|HttpSolrClient
operator|)
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"numShards"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|REPLICATION_FACTOR
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|String
name|collectionName
init|=
literal|"nodes_used_collection"
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
if|if
condition|(
name|secondConfigSet
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
literal|"collection.configName"
argument_list|,
literal|"conf1"
argument_list|)
expr_stmt|;
block|}
name|QueryRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|makeRequest
argument_list|(
name|baseUrl
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|numShardsNumReplicaList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|numShardsNumReplicaList
operator|.
name|add
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|numShardsNumReplicaList
operator|.
name|add
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|checkForCollection
argument_list|(
literal|"nodes_used_collection"
argument_list|,
name|numShardsNumReplicaList
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|createNodeList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|liveNodes
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLiveNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|node
range|:
name|liveNodes
control|)
block|{
name|createNodeList
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|DocCollection
name|col
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
literal|"nodes_used_collection"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Slice
argument_list|>
name|slices
init|=
name|col
operator|.
name|getSlices
argument_list|()
decl_stmt|;
for|for
control|(
name|Slice
name|slice
range|:
name|slices
control|)
block|{
name|Collection
argument_list|<
name|Replica
argument_list|>
name|replicas
init|=
name|slice
operator|.
name|getReplicas
argument_list|()
decl_stmt|;
for|for
control|(
name|Replica
name|replica
range|:
name|replicas
control|)
block|{
name|createNodeList
operator|.
name|remove
argument_list|(
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|createNodeList
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
name|createNodeList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCollectionsAPI
specifier|private
name|void
name|testCollectionsAPI
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|disableLegacy
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|CloudSolrClient
name|client1
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|disableLegacy
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"legacyCloud=false"
argument_list|)
expr_stmt|;
name|client1
operator|=
name|createCloudClient
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setClusterProp
argument_list|(
name|client1
argument_list|,
name|ZkStateReader
operator|.
name|LEGACY_CLOUD
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
comment|// TODO: fragile - because we dont pass collection.confName, it will only
comment|// find a default if a conf set with a name matching the collection name is found, or
comment|// if there is only one conf set. That and the fact that other tests run first in this
comment|// env make this pretty fragile
comment|// create new collections rapid fire
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|collectionInfos
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|TEST_NIGHTLY
condition|?
literal|6
else|:
literal|1
argument_list|)
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|int
name|numShards
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|getShardCount
argument_list|()
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|replicationFactor
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|maxShardsPerNode
init|=
operator|(
operator|(
operator|(
name|numShards
operator|*
name|replicationFactor
operator|)
operator|/
name|getCommonCloudSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLiveNodes
argument_list|()
operator|.
name|size
argument_list|()
operator|)
operator|)
operator|+
literal|1
decl_stmt|;
name|CloudSolrClient
name|client
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
comment|// Test if we can create a collection through CloudSolrServer where
comment|// you havnt set default-collection
comment|// This is nice because you want to be able to create you first
comment|// collection using CloudSolrServer, and in such case there is
comment|// nothing reasonable to set as default-collection
name|client
operator|=
name|createCloudClient
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
comment|// Test if we can create a collection through CloudSolrServer where
comment|// you have set default-collection to a non-existing collection
comment|// This is nice because you want to be able to create you first
comment|// collection using CloudSolrServer, and in such case there is
comment|// nothing reasonable to set as default-collection, but you might want
comment|// to use the same CloudSolrServer throughout the entire
comment|// lifetime of your client-application, so it is nice to be able to
comment|// set a default-collection on this CloudSolrServer once and for all
comment|// and use this CloudSolrServer to create the collection
name|client
operator|=
name|createCloudClient
argument_list|(
literal|"awholynewcollection_"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|secondConfigSet
condition|)
block|{
name|createCollection
argument_list|(
name|collectionInfos
argument_list|,
literal|"awholynewcollection_"
operator|+
name|i
argument_list|,
name|numShards
argument_list|,
name|replicationFactor
argument_list|,
name|maxShardsPerNode
argument_list|,
name|client
argument_list|,
literal|null
argument_list|,
literal|"conf2"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|createCollection
argument_list|(
name|collectionInfos
argument_list|,
literal|"awholynewcollection_"
operator|+
name|i
argument_list|,
name|numShards
argument_list|,
name|replicationFactor
argument_list|,
name|maxShardsPerNode
argument_list|,
name|client
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|collectionInfosEntrySet
init|=
name|collectionInfos
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|entry
range|:
name|collectionInfosEntrySet
control|)
block|{
name|String
name|collection
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|checkForCollection
argument_list|(
name|collection
argument_list|,
name|list
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|url
init|=
name|getUrlFromZk
argument_list|(
name|collection
argument_list|)
decl_stmt|;
try|try
init|(
name|HttpSolrClient
name|collectionClient
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|url
argument_list|)
init|)
block|{
comment|// poll for a second - it can take a moment before we are ready to serve
name|waitForNon403or404or503
argument_list|(
name|collectionClient
argument_list|)
expr_stmt|;
block|}
block|}
comment|// sometimes we restart one of the jetty nodes
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|JettySolrRunner
name|jetty
init|=
name|jettys
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|jettys
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ChaosMonkey
operator|.
name|stop
argument_list|(
name|jetty
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"============ Restarting jetty"
argument_list|)
expr_stmt|;
name|ChaosMonkey
operator|.
name|start
argument_list|(
name|jetty
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|entry
range|:
name|collectionInfosEntrySet
control|)
block|{
name|String
name|collection
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|checkForCollection
argument_list|(
name|collection
argument_list|,
name|list
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|url
init|=
name|getUrlFromZk
argument_list|(
name|collection
argument_list|)
decl_stmt|;
try|try
init|(
name|HttpSolrClient
name|collectionClient
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|url
argument_list|)
init|)
block|{
comment|// poll for a second - it can take a moment before we are ready to serve
name|waitForNon403or404or503
argument_list|(
name|collectionClient
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// sometimes we restart zookeeper
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|zkServer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"============ Restarting zookeeper"
argument_list|)
expr_stmt|;
name|zkServer
operator|=
operator|new
name|ZkTestServer
argument_list|(
name|zkServer
operator|.
name|getZkDir
argument_list|()
argument_list|,
name|zkServer
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|zkServer
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
comment|// sometimes we cause a connection loss - sometimes it will hit the overseer
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|JettySolrRunner
name|jetty
init|=
name|jettys
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|jettys
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ChaosMonkey
operator|.
name|causeConnectionLoss
argument_list|(
name|jetty
argument_list|)
expr_stmt|;
block|}
name|ZkStateReader
name|zkStateReader
init|=
name|getCommonCloudSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cnt
condition|;
name|j
operator|++
control|)
block|{
name|waitForRecoveriesToFinish
argument_list|(
literal|"awholynewcollection_"
operator|+
name|j
argument_list|,
name|zkStateReader
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|secondConfigSet
condition|)
block|{
comment|// let's see if they are using the second config set
name|byte
index|[]
name|data
init|=
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|getData
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
literal|"awholynewcollection_"
operator|+
name|j
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|props
init|=
name|ZkNodeProps
operator|.
name|load
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|String
name|configName
init|=
name|props
operator|.
name|getStr
argument_list|(
name|ZkController
operator|.
name|CONFIGNAME_PROP
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"conf2"
argument_list|,
name|configName
argument_list|)
expr_stmt|;
block|}
block|}
name|checkInstanceDirs
argument_list|(
name|jettys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|collectionNameList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|collectionNameList
operator|.
name|addAll
argument_list|(
name|collectionInfos
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|collectionName
init|=
name|collectionNameList
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|collectionNameList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|url
init|=
name|getUrlFromZk
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
try|try
init|(
name|HttpSolrClient
name|collectionClient
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|url
argument_list|)
init|)
block|{
comment|// lets try and use the solrj client to index a couple documents
name|SolrInputDocument
name|doc1
init|=
name|getDoc
argument_list|(
name|id
argument_list|,
literal|6
argument_list|,
name|i1
argument_list|,
operator|-
literal|600
argument_list|,
name|tlong
argument_list|,
literal|600
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy sat on a wall"
argument_list|)
decl_stmt|;
name|SolrInputDocument
name|doc2
init|=
name|getDoc
argument_list|(
name|id
argument_list|,
literal|7
argument_list|,
name|i1
argument_list|,
operator|-
literal|600
argument_list|,
name|tlong
argument_list|,
literal|600
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy3 sat on a walls"
argument_list|)
decl_stmt|;
name|SolrInputDocument
name|doc3
init|=
name|getDoc
argument_list|(
name|id
argument_list|,
literal|8
argument_list|,
name|i1
argument_list|,
operator|-
literal|600
argument_list|,
name|tlong
argument_list|,
literal|600
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy2 sat on a walled"
argument_list|)
decl_stmt|;
name|collectionClient
operator|.
name|add
argument_list|(
name|doc1
argument_list|)
expr_stmt|;
name|collectionClient
operator|.
name|add
argument_list|(
name|doc2
argument_list|)
expr_stmt|;
name|collectionClient
operator|.
name|add
argument_list|(
name|doc3
argument_list|)
expr_stmt|;
name|collectionClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|collectionClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// lets try a collection reload
comment|// get core open times
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|urlToTimeBefore
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|collectStartTimes
argument_list|(
name|collectionName
argument_list|,
name|urlToTimeBefore
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|urlToTimeBefore
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|RELOAD
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|QueryRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
comment|// we can use this client because we just want base url
specifier|final
name|String
name|baseUrl
init|=
name|getBaseUrl
argument_list|(
operator|(
name|HttpSolrClient
operator|)
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|makeRequest
argument_list|(
name|baseUrl
argument_list|,
name|request
argument_list|)
expr_stmt|;
comment|// reloads make take a short while
name|boolean
name|allTimesAreCorrect
init|=
name|waitForReloads
argument_list|(
name|collectionName
argument_list|,
name|urlToTimeBefore
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"some core start times did not change on reload"
argument_list|,
name|allTimesAreCorrect
argument_list|)
expr_stmt|;
name|waitForRecoveriesToFinish
argument_list|(
literal|"awholynewcollection_"
operator|+
operator|(
name|cnt
operator|-
literal|1
operator|)
argument_list|,
name|zkStateReader
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// remove a collection
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|DELETE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|request
operator|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|makeRequest
argument_list|(
name|baseUrl
argument_list|,
name|request
argument_list|)
expr_stmt|;
comment|// ensure its out of the state
name|checkForMissingCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
comment|//collectionNameList.remove(collectionName);
comment|// remove an unknown collection
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|DELETE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
literal|"unknown_collection"
argument_list|)
expr_stmt|;
name|request
operator|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|boolean
name|exp
init|=
literal|false
decl_stmt|;
try|try
block|{
name|makeRequest
argument_list|(
name|baseUrl
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|exp
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Expected exception"
argument_list|,
name|exp
argument_list|)
expr_stmt|;
comment|// create another collection should still work
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"numShards"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|REPLICATION_FACTOR
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|collectionName
operator|=
literal|"acollectionafterbaddelete"
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
if|if
condition|(
name|secondConfigSet
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
literal|"collection.configName"
argument_list|,
literal|"conf1"
argument_list|)
expr_stmt|;
block|}
name|request
operator|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|makeRequest
argument_list|(
name|baseUrl
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|checkForCollection
argument_list|(
name|collectionName
argument_list|,
name|list
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|url
operator|=
name|getUrlFromZk
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
try|try
init|(
name|HttpSolrClient
name|collectionClient
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|url
argument_list|)
init|)
block|{
comment|// poll for a second - it can take a moment before we are ready to serve
name|waitForNon403or404or503
argument_list|(
name|collectionClient
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cnt
condition|;
name|j
operator|++
control|)
block|{
name|waitForRecoveriesToFinish
argument_list|(
name|collectionName
argument_list|,
name|zkStateReader
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// test maxShardsPerNode
name|int
name|numLiveNodes
init|=
name|getCommonCloudSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLiveNodes
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numShards
init|=
operator|(
name|numLiveNodes
operator|/
literal|2
operator|)
operator|+
literal|1
decl_stmt|;
name|int
name|replicationFactor
init|=
literal|2
decl_stmt|;
name|int
name|maxShardsPerNode
init|=
literal|1
decl_stmt|;
name|collectionInfos
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
try|try
init|(
name|CloudSolrClient
name|client
init|=
name|createCloudClient
argument_list|(
literal|"awholynewcollection_"
operator|+
name|cnt
argument_list|)
init|)
block|{
name|exp
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|createCollection
argument_list|(
name|collectionInfos
argument_list|,
literal|"awholynewcollection_"
operator|+
name|cnt
argument_list|,
name|numShards
argument_list|,
name|replicationFactor
argument_list|,
name|maxShardsPerNode
argument_list|,
name|client
argument_list|,
literal|null
argument_list|,
literal|"conf1"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|exp
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"expected exception"
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
comment|// Test createNodeSet
name|numLiveNodes
operator|=
name|getCommonCloudSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLiveNodes
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|createNodeList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numOfCreateNodes
init|=
name|numLiveNodes
operator|/
literal|2
decl_stmt|;
name|assertFalse
argument_list|(
literal|"createNodeSet test is pointless with only "
operator|+
name|numLiveNodes
operator|+
literal|" nodes running"
argument_list|,
name|numOfCreateNodes
operator|==
literal|0
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|liveNode
range|:
name|getCommonCloudSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLiveNodes
argument_list|()
control|)
block|{
if|if
condition|(
name|i
operator|<
name|numOfCreateNodes
condition|)
block|{
name|createNodeList
operator|.
name|add
argument_list|(
name|liveNode
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|maxShardsPerNode
operator|=
literal|2
expr_stmt|;
name|numShards
operator|=
name|createNodeList
operator|.
name|size
argument_list|()
operator|*
name|maxShardsPerNode
expr_stmt|;
name|replicationFactor
operator|=
literal|1
expr_stmt|;
name|collectionInfos
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
try|try
init|(
name|SolrClient
name|client
init|=
name|createCloudClient
argument_list|(
literal|"awholynewcollection_"
operator|+
operator|(
name|cnt
operator|+
literal|1
operator|)
argument_list|)
init|)
block|{
name|CollectionAdminResponse
name|res
init|=
name|createCollection
argument_list|(
name|collectionInfos
argument_list|,
literal|"awholynewcollection_"
operator|+
operator|(
name|cnt
operator|+
literal|1
operator|)
argument_list|,
name|numShards
argument_list|,
name|replicationFactor
argument_list|,
name|maxShardsPerNode
argument_list|,
name|client
argument_list|,
name|StrUtils
operator|.
name|join
argument_list|(
name|createNodeList
argument_list|,
literal|','
argument_list|)
argument_list|,
literal|"conf1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|checkForCollection
argument_list|(
name|collectionInfos
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|collectionInfos
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|createNodeList
argument_list|)
expr_stmt|;
name|checkNoTwoShardsUseTheSameIndexDir
argument_list|()
expr_stmt|;
if|if
condition|(
name|disableLegacy
condition|)
block|{
name|setClusterProp
argument_list|(
name|client1
argument_list|,
name|ZkStateReader
operator|.
name|LEGACY_CLOUD
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|client1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testCollectionsAPIAddRemoveStress
specifier|private
name|void
name|testCollectionsAPIAddRemoveStress
parameter_list|()
throws|throws
name|Exception
block|{
class|class
name|CollectionThread
extends|extends
name|Thread
block|{
specifier|public
name|CollectionThread
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// create new collections rapid fire
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|collectionInfos
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|TEST_NIGHTLY
condition|?
literal|13
else|:
literal|1
argument_list|)
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|String
name|collectionName
init|=
literal|"awholynewstresscollection_"
operator|+
name|getName
argument_list|()
operator|+
literal|"_"
operator|+
name|i
decl_stmt|;
name|int
name|numShards
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|getShardCount
argument_list|()
operator|*
literal|2
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|replicationFactor
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|maxShardsPerNode
init|=
operator|(
operator|(
operator|(
name|numShards
operator|*
literal|2
operator|*
name|replicationFactor
operator|)
operator|/
name|getCommonCloudSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLiveNodes
argument_list|()
operator|.
name|size
argument_list|()
operator|)
operator|)
operator|+
literal|1
decl_stmt|;
try|try
init|(
name|CloudSolrClient
name|client
init|=
name|createCloudClient
argument_list|(
name|i
operator|==
literal|1
condition|?
name|collectionName
else|:
literal|null
argument_list|)
init|)
block|{
name|createCollection
argument_list|(
name|collectionInfos
argument_list|,
name|collectionName
argument_list|,
name|numShards
argument_list|,
name|replicationFactor
argument_list|,
name|maxShardsPerNode
argument_list|,
name|client
argument_list|,
literal|null
argument_list|,
literal|"conf1"
argument_list|)
expr_stmt|;
comment|// remove collection
name|CollectionAdminRequest
operator|.
name|Delete
name|delete
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|Delete
argument_list|()
decl_stmt|;
name|delete
operator|.
name|setCollectionName
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|client
operator|.
name|request
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numThreads
init|=
name|TEST_NIGHTLY
condition|?
literal|6
else|:
literal|2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|CollectionThread
name|thread
init|=
operator|new
name|CollectionThread
argument_list|(
literal|"collection"
operator|+
name|i
argument_list|)
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkInstanceDirs
specifier|private
name|void
name|checkInstanceDirs
parameter_list|(
name|JettySolrRunner
name|jetty
parameter_list|)
throws|throws
name|IOException
block|{
name|CoreContainer
name|cores
init|=
operator|(
operator|(
name|SolrDispatchFilter
operator|)
name|jetty
operator|.
name|getDispatchFilter
argument_list|()
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getCores
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|SolrCore
argument_list|>
name|theCores
init|=
name|cores
operator|.
name|getCores
argument_list|()
decl_stmt|;
for|for
control|(
name|SolrCore
name|core
range|:
name|theCores
control|)
block|{
comment|// look for core props file
name|assertTrue
argument_list|(
literal|"Could not find expected core.properties file"
argument_list|,
operator|new
name|File
argument_list|(
operator|(
name|String
operator|)
name|core
operator|.
name|getStatistics
argument_list|()
operator|.
name|get
argument_list|(
literal|"instanceDir"
argument_list|)
argument_list|,
literal|"core.properties"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|expected
init|=
name|Paths
operator|.
name|get
argument_list|(
name|jetty
operator|.
name|getSolrHome
argument_list|()
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"cores"
argument_list|)
operator|.
name|resolve
argument_list|(
name|core
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|reported
init|=
name|Paths
operator|.
name|get
argument_list|(
operator|(
name|String
operator|)
name|core
operator|.
name|getStatistics
argument_list|()
operator|.
name|get
argument_list|(
literal|"instanceDir"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected: "
operator|+
name|expected
operator|+
literal|"\nFrom core stats: "
operator|+
name|reported
argument_list|,
name|Files
operator|.
name|isSameFile
argument_list|(
name|expected
argument_list|,
name|reported
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|waitForReloads
specifier|private
name|boolean
name|waitForReloads
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|urlToTimeBefore
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|long
name|timeoutAt
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|45000
decl_stmt|;
name|boolean
name|allTimesAreCorrect
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeoutAt
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|urlToTimeAfter
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|collectStartTimes
argument_list|(
name|collectionName
argument_list|,
name|urlToTimeAfter
argument_list|)
expr_stmt|;
name|boolean
name|retry
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|entries
init|=
name|urlToTimeBefore
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|Long
name|beforeTime
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Long
name|afterTime
init|=
name|urlToTimeAfter
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|afterTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|afterTime
operator|<=
name|beforeTime
condition|)
block|{
name|retry
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|retry
condition|)
block|{
name|allTimesAreCorrect
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
return|return
name|allTimesAreCorrect
return|;
block|}
DECL|method|collectStartTimes
specifier|private
name|void
name|collectStartTimes
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|urlToTime
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|ClusterState
name|clusterState
init|=
name|getCommonCloudSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
comment|//    Map<String,DocCollection> collections = clusterState.getCollectionStates();
if|if
condition|(
name|clusterState
operator|.
name|hasCollection
argument_list|(
name|collectionName
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|clusterState
operator|.
name|getSlicesMap
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
name|it
init|=
name|slices
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|sliceEntry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|sliceShards
init|=
name|sliceEntry
operator|.
name|getValue
argument_list|()
operator|.
name|getReplicasMap
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
argument_list|>
name|shardIt
init|=
name|sliceShards
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|shardIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|shardEntry
init|=
name|shardIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|ZkCoreNodeProps
name|coreProps
init|=
operator|new
name|ZkCoreNodeProps
argument_list|(
name|shardEntry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|CoreAdminResponse
name|mcr
decl_stmt|;
try|try
init|(
name|HttpSolrClient
name|server
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|coreProps
operator|.
name|getBaseUrl
argument_list|()
argument_list|)
init|)
block|{
name|mcr
operator|=
name|CoreAdminRequest
operator|.
name|getStatus
argument_list|(
name|coreProps
operator|.
name|getCoreName
argument_list|()
argument_list|,
name|server
argument_list|)
expr_stmt|;
block|}
name|long
name|before
init|=
name|mcr
operator|.
name|getStartTime
argument_list|(
name|coreProps
operator|.
name|getCoreName
argument_list|()
argument_list|)
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|urlToTime
operator|.
name|put
argument_list|(
name|coreProps
operator|.
name|getCoreUrl
argument_list|()
argument_list|,
name|before
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Could not find collection in :"
operator|+
name|clusterState
operator|.
name|getCollections
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|getUrlFromZk
specifier|private
name|String
name|getUrlFromZk
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|ClusterState
name|clusterState
init|=
name|getCommonCloudSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|clusterState
operator|.
name|getSlicesMap
argument_list|(
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
name|slices
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Could not find collection:"
operator|+
name|collection
argument_list|)
throw|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|entry
range|:
name|slices
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Slice
name|slice
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|shards
init|=
name|slice
operator|.
name|getReplicasMap
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
argument_list|>
name|shardEntries
init|=
name|shards
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|shardEntry
range|:
name|shardEntries
control|)
block|{
specifier|final
name|ZkNodeProps
name|node
init|=
name|shardEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|clusterState
operator|.
name|liveNodesContain
argument_list|(
name|node
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|ZkCoreNodeProps
operator|.
name|getCoreUrl
argument_list|(
name|node
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|)
argument_list|,
name|collection
argument_list|)
return|;
comment|//new ZkCoreNodeProps(node).getCoreUrl();
block|}
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not find a live node for collection:"
operator|+
name|collection
argument_list|)
throw|;
block|}
comment|/*  private void waitForNon403or404or503(HttpSolrServer collectionClient)       throws Exception {     SolrException exp = null;     long timeoutAt = System.currentTimeMillis() + 30000;          while (System.currentTimeMillis()< timeoutAt) {       boolean missing = false;        try {         collectionClient.query(new SolrQuery("*:*"));       } catch (SolrException e) {         if (!(e.code() == 403 || e.code() == 503 || e.code() == 404)) {           throw e;         }         exp = e;         missing = true;       }       if (!missing) {         return;       }       Thread.sleep(50);     }      fail("Could not find the new collection - " + exp.code() + " : " + collectionClient.getBaseURL());   }*/
DECL|method|checkNoTwoShardsUseTheSameIndexDir
specifier|private
name|void
name|checkNoTwoShardsUseTheSameIndexDir
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|indexDirToShardNamesMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MBeanServer
argument_list|>
name|servers
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|servers
operator|.
name|add
argument_list|(
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
argument_list|)
expr_stmt|;
name|servers
operator|.
name|addAll
argument_list|(
name|MBeanServerFactory
operator|.
name|findMBeanServer
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|MBeanServer
name|server
range|:
name|servers
control|)
block|{
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|mbeans
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|mbeans
operator|.
name|addAll
argument_list|(
name|server
operator|.
name|queryNames
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|ObjectName
name|mbean
range|:
name|mbeans
control|)
block|{
name|Object
name|value
decl_stmt|;
name|Object
name|indexDir
decl_stmt|;
name|Object
name|name
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|(
operator|(
name|value
operator|=
name|server
operator|.
name|getAttribute
argument_list|(
name|mbean
argument_list|,
literal|"category"
argument_list|)
operator|)
operator|!=
literal|null
operator|&&
name|value
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|CORE
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
operator|(
name|indexDir
operator|=
name|server
operator|.
name|getAttribute
argument_list|(
name|mbean
argument_list|,
literal|"coreName"
argument_list|)
operator|)
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|(
name|indexDir
operator|=
name|server
operator|.
name|getAttribute
argument_list|(
name|mbean
argument_list|,
literal|"indexDir"
argument_list|)
operator|)
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|(
name|name
operator|=
name|server
operator|.
name|getAttribute
argument_list|(
name|mbean
argument_list|,
literal|"name"
argument_list|)
operator|)
operator|!=
literal|null
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|indexDirToShardNamesMap
operator|.
name|containsKey
argument_list|(
name|indexDir
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|indexDirToShardNamesMap
operator|.
name|put
argument_list|(
name|indexDir
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|indexDirToShardNamesMap
operator|.
name|get
argument_list|(
name|indexDir
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|name
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore, just continue - probably a "category" or "source" attribute
comment|// not found
block|}
block|}
block|}
name|assertTrue
argument_list|(
literal|"Something is broken in the assert for no shards using the same indexDir - probably something was changed in the attributes published in the MBean of "
operator|+
name|SolrCore
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" : "
operator|+
name|indexDirToShardNamesMap
argument_list|,
name|indexDirToShardNamesMap
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|indexDirToShardNamesMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"We have shards using the same indexDir. E.g. shards "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" all use indexDir "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addReplicaTest
specifier|private
name|void
name|addReplicaTest
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|collectionName
init|=
literal|"addReplicaColl"
decl_stmt|;
try|try
init|(
name|CloudSolrClient
name|client
init|=
name|createCloudClient
argument_list|(
literal|null
argument_list|)
init|)
block|{
name|createCollection
argument_list|(
name|collectionName
argument_list|,
name|client
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|String
name|newReplicaName
init|=
name|Assign
operator|.
name|assignNode
argument_list|(
name|collectionName
argument_list|,
name|client
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|nodeList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|client
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLiveNodes
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|nodeList
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|AddReplica
name|addReplica
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|AddReplica
argument_list|()
decl_stmt|;
name|addReplica
operator|.
name|setCollectionName
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|addReplica
operator|.
name|setShardName
argument_list|(
literal|"shard1"
argument_list|)
expr_stmt|;
name|addReplica
operator|.
name|setNode
argument_list|(
name|nodeList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|request
argument_list|(
name|addReplica
argument_list|)
expr_stmt|;
name|long
name|timeout
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|3000
decl_stmt|;
name|Replica
name|newReplica
init|=
literal|null
decl_stmt|;
for|for
control|(
init|;
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeout
condition|;
control|)
block|{
name|Slice
name|slice
init|=
name|client
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
name|collectionName
argument_list|,
literal|"shard1"
argument_list|)
decl_stmt|;
name|newReplica
operator|=
name|slice
operator|.
name|getReplica
argument_list|(
name|newReplicaName
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|newReplica
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"newReplica {},\n{} "
argument_list|,
name|newReplica
argument_list|,
name|client
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|nodeList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Replica should be created on the right node"
argument_list|,
name|client
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|nodeList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|newReplica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|newReplicaName
operator|=
name|Assign
operator|.
name|assignNode
argument_list|(
name|collectionName
argument_list|,
name|client
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
argument_list|)
expr_stmt|;
name|addReplica
operator|=
operator|new
name|CollectionAdminRequest
operator|.
name|AddReplica
argument_list|()
expr_stmt|;
name|addReplica
operator|.
name|setCollectionName
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|addReplica
operator|.
name|setShardName
argument_list|(
literal|"shard2"
argument_list|)
expr_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|String
name|instancePathStr
init|=
name|createTempDir
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|CoreAdminParams
operator|.
name|INSTANCE_DIR
argument_list|,
name|instancePathStr
argument_list|)
expr_stmt|;
comment|//Use name via the property.instanceDir method
name|addReplica
operator|.
name|setProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|client
operator|.
name|request
argument_list|(
name|addReplica
argument_list|)
expr_stmt|;
name|timeout
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|3000
expr_stmt|;
name|newReplica
operator|=
literal|null
expr_stmt|;
for|for
control|(
init|;
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeout
condition|;
control|)
block|{
name|Slice
name|slice
init|=
name|client
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
name|collectionName
argument_list|,
literal|"shard2"
argument_list|)
decl_stmt|;
name|newReplica
operator|=
name|slice
operator|.
name|getReplica
argument_list|(
name|newReplicaName
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|newReplica
argument_list|)
expr_stmt|;
name|HttpSolrClient
name|coreclient
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|newReplica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|)
argument_list|)
decl_stmt|;
name|CoreAdminResponse
name|status
init|=
name|CoreAdminRequest
operator|.
name|getStatus
argument_list|(
name|newReplica
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|,
name|coreclient
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|coreStatus
init|=
name|status
operator|.
name|getCoreStatus
argument_list|(
name|newReplica
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|instanceDirStr
init|=
operator|(
name|String
operator|)
name|coreStatus
operator|.
name|get
argument_list|(
literal|"instanceDir"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|instanceDirStr
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|instancePathStr
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|queryServer
specifier|protected
name|QueryResponse
name|queryServer
parameter_list|(
name|ModifiableSolrParams
name|params
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
if|if
condition|(
name|r
operator|.
name|nextBoolean
argument_list|()
condition|)
return|return
name|super
operator|.
name|queryServer
argument_list|(
name|params
argument_list|)
return|;
if|if
condition|(
name|r
operator|.
name|nextBoolean
argument_list|()
condition|)
name|params
operator|.
name|set
argument_list|(
literal|"collection"
argument_list|,
name|DEFAULT_COLLECTION
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|getCommonCloudSolrClient
argument_list|()
operator|.
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
return|return
name|rsp
return|;
block|}
DECL|method|createCollection
specifier|protected
name|void
name|createCollection
parameter_list|(
name|String
name|COLL_NAME
parameter_list|,
name|CloudSolrClient
name|client
parameter_list|,
name|int
name|replicationFactor
parameter_list|,
name|int
name|numShards
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|maxShardsPerNode
init|=
operator|(
operator|(
operator|(
operator|(
name|numShards
operator|+
literal|1
operator|)
operator|*
name|replicationFactor
operator|)
operator|/
name|getCommonCloudSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLiveNodes
argument_list|()
operator|.
name|size
argument_list|()
operator|)
operator|)
operator|+
literal|1
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|makeMap
argument_list|(
name|REPLICATION_FACTOR
argument_list|,
name|replicationFactor
argument_list|,
name|MAX_SHARDS_PER_NODE
argument_list|,
name|maxShardsPerNode
argument_list|,
name|NUM_SLICES
argument_list|,
name|numShards
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|collectionInfos
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|createCollection
argument_list|(
name|collectionInfos
argument_list|,
name|COLL_NAME
argument_list|,
name|props
argument_list|,
name|client
argument_list|,
literal|"conf1"
argument_list|)
expr_stmt|;
name|waitForRecoveriesToFinish
argument_list|(
name|COLL_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|distribTearDown
specifier|public
name|void
name|distribTearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|distribTearDown
argument_list|()
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"numShards"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.xml.persist"
argument_list|)
expr_stmt|;
comment|// insurance
name|DirectUpdateHandler2
operator|.
name|commitOnClose
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|clusterPropTest
specifier|private
name|void
name|clusterPropTest
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|CloudSolrClient
name|client
init|=
name|createCloudClient
argument_list|(
literal|null
argument_list|)
init|)
block|{
name|assertTrue
argument_list|(
literal|"cluster property not set"
argument_list|,
name|setClusterProp
argument_list|(
name|client
argument_list|,
name|ZkStateReader
operator|.
name|LEGACY_CLOUD
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cluster property not unset "
argument_list|,
name|setClusterProp
argument_list|(
name|client
argument_list|,
name|ZkStateReader
operator|.
name|LEGACY_CLOUD
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setClusterProp
specifier|public
specifier|static
name|boolean
name|setClusterProp
parameter_list|(
name|CloudSolrClient
name|client
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|Map
name|m
init|=
name|makeMap
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|CLUSTERPROP
operator|.
name|toLower
argument_list|()
argument_list|,
literal|"name"
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
name|m
operator|.
name|put
argument_list|(
literal|"val"
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|SolrRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
operator|new
name|MapSolrParams
argument_list|(
name|m
argument_list|)
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|client
operator|.
name|request
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|long
name|timeOut
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|3000
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeOut
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|changed
operator|=
name|Objects
operator|.
name|equals
argument_list|(
name|val
argument_list|,
name|client
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterProps
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
condition|)
break|break;
block|}
return|return
name|changed
return|;
block|}
block|}
end_class
end_unit
