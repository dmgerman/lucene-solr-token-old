begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|CloudState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreDescriptor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|HttpShardHandlerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NodeExistsException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import
begin_class
annotation|@
name|Slow
DECL|class|OverseerTest
specifier|public
class|class
name|OverseerTest
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|TIMEOUT
specifier|static
specifier|final
name|int
name|TIMEOUT
init|=
literal|10000
decl_stmt|;
DECL|field|DEBUG
specifier|private
specifier|static
specifier|final
name|boolean
name|DEBUG
init|=
literal|false
decl_stmt|;
DECL|class|MockZKController
specifier|public
specifier|static
class|class
name|MockZKController
block|{
DECL|field|zkClient
specifier|private
specifier|final
name|SolrZkClient
name|zkClient
decl_stmt|;
DECL|field|zkStateReader
specifier|private
specifier|final
name|ZkStateReader
name|zkStateReader
decl_stmt|;
DECL|field|nodeName
specifier|private
specifier|final
name|String
name|nodeName
decl_stmt|;
DECL|field|collection
specifier|private
specifier|final
name|String
name|collection
decl_stmt|;
DECL|field|elector
specifier|private
specifier|final
name|LeaderElector
name|elector
decl_stmt|;
DECL|field|electionContext
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ElectionContext
argument_list|>
name|electionContext
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ElectionContext
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|MockZKController
specifier|public
name|MockZKController
parameter_list|(
name|String
name|zkAddress
parameter_list|,
name|String
name|nodeName
parameter_list|,
name|String
name|collection
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
throws|,
name|IOException
throws|,
name|KeeperException
block|{
name|this
operator|.
name|nodeName
operator|=
name|nodeName
expr_stmt|;
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
name|zkClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|zkAddress
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|zkStateReader
operator|=
operator|new
name|ZkStateReader
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|zkStateReader
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
comment|// live node
specifier|final
name|String
name|nodePath
init|=
name|ZkStateReader
operator|.
name|LIVE_NODES_ZKNODE
operator|+
literal|"/"
operator|+
name|nodeName
decl_stmt|;
name|zkClient
operator|.
name|makePath
argument_list|(
name|nodePath
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|elector
operator|=
operator|new
name|LeaderElector
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteNode
specifier|private
name|void
name|deleteNode
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
block|{
try|try
block|{
name|Stat
name|stat
init|=
name|zkClient
operator|.
name|exists
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|!=
literal|null
condition|)
block|{
name|zkClient
operator|.
name|delete
argument_list|(
name|path
argument_list|,
name|stat
operator|.
name|getVersion
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected KeeperException!"
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected InterruptedException!"
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|deleteNode
argument_list|(
name|ZkStateReader
operator|.
name|LIVE_NODES_ZKNODE
operator|+
literal|"/"
operator|+
name|nodeName
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|//e.printStackTrace();
block|}
block|}
DECL|method|publishState
specifier|public
name|void
name|publishState
parameter_list|(
name|String
name|coreName
parameter_list|,
name|String
name|stateName
parameter_list|,
name|int
name|numShards
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
if|if
condition|(
name|stateName
operator|==
literal|null
condition|)
block|{
name|ElectionContext
name|ec
init|=
name|electionContext
operator|.
name|remove
argument_list|(
name|coreName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ec
operator|!=
literal|null
condition|)
block|{
name|ec
operator|.
name|cancelElection
argument_list|()
expr_stmt|;
block|}
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
literal|"deletecore"
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
name|nodeName
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|coreName
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collection
argument_list|)
decl_stmt|;
name|DistributedQueue
name|q
init|=
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
name|q
operator|.
name|offer
argument_list|(
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
literal|"state"
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|stateName
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
name|nodeName
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|coreName
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collection
argument_list|,
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|numShards
argument_list|)
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
literal|"http://"
operator|+
name|nodeName
operator|+
literal|"/solr/"
argument_list|)
decl_stmt|;
name|DistributedQueue
name|q
init|=
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
name|q
operator|.
name|offer
argument_list|(
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|30
condition|;
name|i
operator|++
control|)
block|{
name|String
name|shardId
init|=
name|getShardId
argument_list|(
name|coreName
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardId
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|zkClient
operator|.
name|makePath
argument_list|(
literal|"/collections/"
operator|+
name|collection
operator|+
literal|"/leader_elect/"
operator|+
name|shardId
operator|+
literal|"/election"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NodeExistsException
name|nee
parameter_list|)
block|{}
name|ZkNodeProps
name|props
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
literal|"http://"
operator|+
name|nodeName
operator|+
literal|"/solr/"
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
name|nodeName
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|coreName
argument_list|,
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
name|shardId
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collection
argument_list|)
decl_stmt|;
name|ShardLeaderElectionContextBase
name|ctx
init|=
operator|new
name|ShardLeaderElectionContextBase
argument_list|(
name|elector
argument_list|,
name|shardId
argument_list|,
name|collection
argument_list|,
name|nodeName
operator|+
literal|"_"
operator|+
name|coreName
argument_list|,
name|props
argument_list|,
name|zkStateReader
argument_list|)
decl_stmt|;
name|elector
operator|.
name|joinElection
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getShardId
specifier|private
name|String
name|getShardId
parameter_list|(
specifier|final
name|String
name|coreName
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|zkStateReader
operator|.
name|getCloudState
argument_list|()
operator|.
name|getSlices
argument_list|(
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
name|slices
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Slice
name|slice
range|:
name|slices
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|slice
operator|.
name|getShards
argument_list|()
operator|.
name|containsKey
argument_list|(
name|nodeName
operator|+
literal|"_"
operator|+
name|coreName
argument_list|)
condition|)
block|{
return|return
name|slice
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"solrcloud.skip.autorecovery"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|initCore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solrcloud.skip.autorecovery"
argument_list|)
expr_stmt|;
name|initCore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testShardAssignment
specifier|public
name|void
name|testShardAssignment
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|zkDir
init|=
name|dataDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"zookeeper/server1/data"
decl_stmt|;
name|ZkTestServer
name|server
init|=
operator|new
name|ZkTestServer
argument_list|(
name|zkDir
argument_list|)
decl_stmt|;
name|ZkController
name|zkController
init|=
literal|null
decl_stmt|;
name|SolrZkClient
name|zkClient
init|=
literal|null
decl_stmt|;
try|try
block|{
name|server
operator|.
name|run
argument_list|()
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|tryCleanSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|makeSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|zkClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|makePath
argument_list|(
name|ZkStateReader
operator|.
name|LIVE_NODES_ZKNODE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ZkStateReader
name|reader
init|=
operator|new
name|ZkStateReader
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
name|reader
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
name|zkController
operator|=
operator|new
name|ZkController
argument_list|(
literal|null
argument_list|,
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|TIMEOUT
argument_list|,
literal|10000
argument_list|,
literal|"localhost"
argument_list|,
literal|"8983"
argument_list|,
literal|"solr"
argument_list|,
operator|new
name|CurrentCoreDescriptorProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|CoreDescriptor
argument_list|>
name|getCurrentDescriptors
parameter_list|()
block|{
comment|// do nothing
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"bootstrap_confdir"
argument_list|,
name|getFile
argument_list|(
literal|"solr/collection1/conf"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numShards
init|=
literal|6
decl_stmt|;
specifier|final
name|String
index|[]
name|ids
init|=
operator|new
name|String
index|[
name|numShards
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numShards
condition|;
name|i
operator|++
control|)
block|{
name|CloudDescriptor
name|collection1Desc
init|=
operator|new
name|CloudDescriptor
argument_list|()
decl_stmt|;
name|collection1Desc
operator|.
name|setNumShards
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|collection1Desc
operator|.
name|setCollectionName
argument_list|(
literal|"collection1"
argument_list|)
expr_stmt|;
name|CoreDescriptor
name|desc1
init|=
operator|new
name|CoreDescriptor
argument_list|(
literal|null
argument_list|,
literal|"core"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|desc1
operator|.
name|setCloudDescriptor
argument_list|(
name|collection1Desc
argument_list|)
expr_stmt|;
name|zkController
operator|.
name|preRegister
argument_list|(
name|desc1
argument_list|)
expr_stmt|;
name|ids
index|[
name|i
index|]
operator|=
name|zkController
operator|.
name|register
argument_list|(
literal|"core"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|desc1
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"shard1"
argument_list|,
name|ids
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"shard2"
argument_list|,
name|ids
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"shard3"
argument_list|,
name|ids
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"shard1"
argument_list|,
name|ids
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"shard2"
argument_list|,
name|ids
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"shard3"
argument_list|,
name|ids
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|waitForCollections
argument_list|(
name|reader
argument_list|,
literal|"collection1"
argument_list|)
expr_stmt|;
comment|//make sure leaders are in cloud state
name|assertNotNull
argument_list|(
name|reader
operator|.
name|getLeaderUrl
argument_list|(
literal|"collection1"
argument_list|,
literal|"shard1"
argument_list|,
literal|15000
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|reader
operator|.
name|getLeaderUrl
argument_list|(
literal|"collection1"
argument_list|,
literal|"shard2"
argument_list|,
literal|15000
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|reader
operator|.
name|getLeaderUrl
argument_list|(
literal|"collection1"
argument_list|,
literal|"shard3"
argument_list|,
literal|15000
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"bootstrap_confdir"
argument_list|)
expr_stmt|;
if|if
condition|(
name|DEBUG
condition|)
block|{
if|if
condition|(
name|zkController
operator|!=
literal|null
condition|)
block|{
name|zkClient
operator|.
name|printLayoutToStdOut
argument_list|()
expr_stmt|;
block|}
block|}
name|close
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
if|if
condition|(
name|zkController
operator|!=
literal|null
condition|)
block|{
name|zkController
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testShardAssignmentBigger
specifier|public
name|void
name|testShardAssignmentBigger
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|zkDir
init|=
name|dataDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"zookeeper/server1/data"
decl_stmt|;
specifier|final
name|int
name|nodeCount
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
operator|+
literal|50
decl_stmt|;
comment|//how many simulated nodes (num of threads)
specifier|final
name|int
name|coreCount
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|+
literal|100
decl_stmt|;
comment|//how many cores to register
specifier|final
name|int
name|sliceCount
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
operator|+
literal|1
decl_stmt|;
comment|//how many slices
name|ZkTestServer
name|server
init|=
operator|new
name|ZkTestServer
argument_list|(
name|zkDir
argument_list|)
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|sliceCount
argument_list|)
argument_list|)
expr_stmt|;
name|SolrZkClient
name|zkClient
init|=
literal|null
decl_stmt|;
name|ZkStateReader
name|reader
init|=
literal|null
decl_stmt|;
specifier|final
name|ZkController
index|[]
name|controllers
init|=
operator|new
name|ZkController
index|[
name|nodeCount
index|]
decl_stmt|;
specifier|final
name|ExecutorService
index|[]
name|nodeExecutors
init|=
operator|new
name|ExecutorService
index|[
name|nodeCount
index|]
decl_stmt|;
try|try
block|{
name|server
operator|.
name|run
argument_list|()
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|tryCleanSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|makeSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|zkClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|makePath
argument_list|(
name|ZkStateReader
operator|.
name|LIVE_NODES_ZKNODE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|ZkStateReader
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|reader
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeCount
condition|;
name|i
operator|++
control|)
block|{
name|controllers
index|[
name|i
index|]
operator|=
operator|new
name|ZkController
argument_list|(
literal|null
argument_list|,
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|TIMEOUT
argument_list|,
literal|10000
argument_list|,
literal|"localhost"
argument_list|,
literal|"898"
operator|+
name|i
argument_list|,
literal|"solr"
argument_list|,
operator|new
name|CurrentCoreDescriptorProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|CoreDescriptor
argument_list|>
name|getCurrentDescriptors
parameter_list|()
block|{
comment|// do nothing
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|setProperty
argument_list|(
literal|"bootstrap_confdir"
argument_list|,
name|getFile
argument_list|(
literal|"solr/collection1/conf"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeCount
condition|;
name|i
operator|++
control|)
block|{
name|nodeExecutors
index|[
name|i
index|]
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
index|[]
name|ids
init|=
operator|new
name|String
index|[
name|coreCount
index|]
decl_stmt|;
comment|//register total of coreCount cores
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|coreCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|slot
init|=
name|i
decl_stmt|;
name|Runnable
name|coreStarter
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|CloudDescriptor
name|collection1Desc
init|=
operator|new
name|CloudDescriptor
argument_list|()
decl_stmt|;
name|collection1Desc
operator|.
name|setCollectionName
argument_list|(
literal|"collection1"
argument_list|)
expr_stmt|;
name|collection1Desc
operator|.
name|setNumShards
argument_list|(
name|sliceCount
argument_list|)
expr_stmt|;
specifier|final
name|String
name|coreName
init|=
literal|"core"
operator|+
name|slot
decl_stmt|;
specifier|final
name|CoreDescriptor
name|desc
init|=
operator|new
name|CoreDescriptor
argument_list|(
literal|null
argument_list|,
name|coreName
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setCloudDescriptor
argument_list|(
name|collection1Desc
argument_list|)
expr_stmt|;
try|try
block|{
name|controllers
index|[
name|slot
operator|%
name|nodeCount
index|]
operator|.
name|preRegister
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ids
index|[
name|slot
index|]
operator|=
name|controllers
index|[
name|slot
operator|%
name|nodeCount
index|]
operator|.
name|register
argument_list|(
name|coreName
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"register threw exception:"
operator|+
name|e
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|nodeExecutors
index|[
name|i
operator|%
name|nodeCount
index|]
operator|.
name|submit
argument_list|(
name|coreStarter
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeCount
condition|;
name|i
operator|++
control|)
block|{
name|nodeExecutors
index|[
name|i
index|]
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeCount
condition|;
name|i
operator|++
control|)
block|{
while|while
condition|(
operator|!
name|nodeExecutors
index|[
name|i
index|]
operator|.
name|awaitTermination
argument_list|(
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
empty_stmt|;
block|}
comment|// make sure all cores have been assigned a id in cloudstate
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|40
condition|;
name|i
operator|++
control|)
block|{
name|reader
operator|.
name|updateCloudState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|CloudState
name|state
init|=
name|reader
operator|.
name|getCloudState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|state
operator|.
name|getSlices
argument_list|(
literal|"collection1"
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|slices
operator|.
name|keySet
argument_list|()
control|)
block|{
name|count
operator|+=
name|slices
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|coreCount
operator|==
name|count
condition|)
break|break;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
comment|// make sure all cores have been returned a id
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|90
condition|;
name|i
operator|++
control|)
block|{
name|int
name|assignedCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|coreCount
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|ids
index|[
name|j
index|]
operator|!=
literal|null
condition|)
block|{
name|assignedCount
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|coreCount
operator|==
name|assignedCount
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|counters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|sliceCount
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|counters
operator|.
name|put
argument_list|(
literal|"shard"
operator|+
name|i
argument_list|,
operator|new
name|AtomicInteger
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|coreCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|AtomicInteger
name|ai
init|=
name|counters
operator|.
name|get
argument_list|(
name|ids
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"could not find counter for shard:"
operator|+
name|ids
index|[
name|i
index|]
argument_list|,
name|ai
argument_list|)
expr_stmt|;
name|ai
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|String
name|counter
range|:
name|counters
operator|.
name|keySet
argument_list|()
control|)
block|{
name|int
name|count
init|=
name|counters
operator|.
name|get
argument_list|(
name|counter
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|expectedCount
init|=
name|coreCount
operator|/
name|sliceCount
decl_stmt|;
name|int
name|min
init|=
name|expectedCount
operator|-
literal|1
decl_stmt|;
name|int
name|max
init|=
name|expectedCount
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|count
argument_list|<
name|min
operator|||
name|count
argument_list|>
name|max
condition|)
block|{
name|fail
argument_list|(
literal|"Unevenly assigned shard ids, "
operator|+
name|counter
operator|+
literal|" had "
operator|+
name|count
operator|+
literal|", expected: "
operator|+
name|min
operator|+
literal|"-"
operator|+
name|max
argument_list|)
expr_stmt|;
block|}
block|}
comment|//make sure leaders are in cloud state
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sliceCount
condition|;
name|i
operator|++
control|)
block|{
name|assertNotNull
argument_list|(
name|reader
operator|.
name|getLeaderUrl
argument_list|(
literal|"collection1"
argument_list|,
literal|"shard"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
argument_list|,
literal|15000
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|System
operator|.
name|clearProperty
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"bootstrap_confdir"
argument_list|)
expr_stmt|;
if|if
condition|(
name|DEBUG
condition|)
block|{
if|if
condition|(
name|controllers
index|[
literal|0
index|]
operator|!=
literal|null
condition|)
block|{
name|zkClient
operator|.
name|printLayoutToStdOut
argument_list|()
expr_stmt|;
block|}
block|}
name|close
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|controllers
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|controllers
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|controllers
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|nodeExecutors
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|nodeExecutors
index|[
name|i
index|]
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//wait until collections are available
DECL|method|waitForCollections
specifier|private
name|void
name|waitForCollections
parameter_list|(
name|ZkStateReader
name|stateReader
parameter_list|,
name|String
modifier|...
name|collections
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
name|int
name|maxIterations
init|=
literal|100
decl_stmt|;
while|while
condition|(
literal|0
operator|<
name|maxIterations
operator|--
condition|)
block|{
name|stateReader
operator|.
name|updateCloudState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|CloudState
name|state
init|=
name|stateReader
operator|.
name|getCloudState
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|availableCollections
init|=
name|state
operator|.
name|getCollections
argument_list|()
decl_stmt|;
name|int
name|availableCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|requiredCollection
range|:
name|collections
control|)
block|{
if|if
condition|(
name|availableCollections
operator|.
name|contains
argument_list|(
name|requiredCollection
argument_list|)
condition|)
block|{
name|availableCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|availableCount
operator|==
name|collections
operator|.
name|length
condition|)
return|return;
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|warn
argument_list|(
literal|"Timeout waiting for collections: "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|collections
argument_list|)
operator|+
literal|" state:"
operator|+
name|stateReader
operator|.
name|getCloudState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStateChange
specifier|public
name|void
name|testStateChange
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|zkDir
init|=
name|dataDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"zookeeper/server1/data"
decl_stmt|;
name|ZkTestServer
name|server
init|=
operator|new
name|ZkTestServer
argument_list|(
name|zkDir
argument_list|)
decl_stmt|;
name|SolrZkClient
name|zkClient
init|=
literal|null
decl_stmt|;
name|ZkStateReader
name|reader
init|=
literal|null
decl_stmt|;
name|SolrZkClient
name|overseerClient
init|=
literal|null
decl_stmt|;
try|try
block|{
name|server
operator|.
name|run
argument_list|()
expr_stmt|;
name|zkClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|tryCleanSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|makeSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|makePath
argument_list|(
literal|"/live_nodes"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|ZkStateReader
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|reader
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
name|overseerClient
operator|=
name|electNewOverseer
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|)
expr_stmt|;
name|DistributedQueue
name|q
init|=
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
literal|"state"
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
literal|"http://127.0.0.1/solr"
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
literal|"node1"
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
literal|"collection1"
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
literal|"core1"
argument_list|,
name|ZkStateReader
operator|.
name|ROLES_PROP
argument_list|,
literal|""
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|ZkStateReader
operator|.
name|RECOVERING
argument_list|)
decl_stmt|;
name|q
operator|.
name|offer
argument_list|(
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|waitForCollections
argument_list|(
name|reader
argument_list|,
literal|"collection1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reader
operator|.
name|getCloudState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|RECOVERING
argument_list|,
name|reader
operator|.
name|getCloudState
argument_list|()
operator|.
name|getSlice
argument_list|(
literal|"collection1"
argument_list|,
literal|"shard1"
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
literal|"node1_core1"
argument_list|)
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
argument_list|)
expr_stmt|;
comment|//publish node state (active)
name|m
operator|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
literal|"state"
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
literal|"http://127.0.0.1/solr"
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
literal|"node1"
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
literal|"collection1"
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
literal|"core1"
argument_list|,
name|ZkStateReader
operator|.
name|ROLES_PROP
argument_list|,
literal|""
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|ZkStateReader
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|q
operator|.
name|offer
argument_list|(
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|verifyStatus
argument_list|(
name|reader
argument_list|,
name|ZkStateReader
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|overseerClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|verifyStatus
specifier|private
name|void
name|verifyStatus
parameter_list|(
name|ZkStateReader
name|reader
parameter_list|,
name|String
name|expectedState
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|maxIterations
init|=
literal|100
decl_stmt|;
name|String
name|coreState
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|maxIterations
operator|--
operator|>
literal|0
condition|)
block|{
name|Slice
name|slice
init|=
name|reader
operator|.
name|getCloudState
argument_list|()
operator|.
name|getSlice
argument_list|(
literal|"collection1"
argument_list|,
literal|"shard1"
argument_list|)
decl_stmt|;
if|if
condition|(
name|slice
operator|!=
literal|null
condition|)
block|{
name|coreState
operator|=
name|slice
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
literal|"node1_core1"
argument_list|)
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
expr_stmt|;
if|if
condition|(
name|coreState
operator|.
name|equals
argument_list|(
name|expectedState
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"Illegal state, was:"
operator|+
name|coreState
operator|+
literal|" expected:"
operator|+
name|expectedState
operator|+
literal|"cloudState:"
operator|+
name|reader
operator|.
name|getCloudState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyShardLeader
specifier|private
name|void
name|verifyShardLeader
parameter_list|(
name|ZkStateReader
name|reader
parameter_list|,
name|String
name|collection
parameter_list|,
name|String
name|shard
parameter_list|,
name|String
name|expectedCore
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
name|int
name|maxIterations
init|=
literal|100
decl_stmt|;
while|while
condition|(
name|maxIterations
operator|--
operator|>
literal|0
condition|)
block|{
name|reader
operator|.
name|updateCloudState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// poll state
name|ZkNodeProps
name|props
init|=
name|reader
operator|.
name|getCloudState
argument_list|()
operator|.
name|getLeader
argument_list|(
name|collection
argument_list|,
name|shard
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|expectedCore
operator|.
name|equals
argument_list|(
name|props
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Unexpected shard leader coll:"
operator|+
name|collection
operator|+
literal|" shard:"
operator|+
name|shard
argument_list|,
name|expectedCore
argument_list|,
operator|(
name|reader
operator|.
name|getCloudState
argument_list|()
operator|.
name|getLeader
argument_list|(
name|collection
argument_list|,
name|shard
argument_list|)
operator|!=
literal|null
operator|)
condition|?
name|reader
operator|.
name|getCloudState
argument_list|()
operator|.
name|getLeader
argument_list|(
name|collection
argument_list|,
name|shard
argument_list|)
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOverseerFailure
specifier|public
name|void
name|testOverseerFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|zkDir
init|=
name|dataDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"zookeeper/server1/data"
decl_stmt|;
name|ZkTestServer
name|server
init|=
operator|new
name|ZkTestServer
argument_list|(
name|zkDir
argument_list|)
decl_stmt|;
name|SolrZkClient
name|controllerClient
init|=
literal|null
decl_stmt|;
name|SolrZkClient
name|overseerClient
init|=
literal|null
decl_stmt|;
name|ZkStateReader
name|reader
init|=
literal|null
decl_stmt|;
name|MockZKController
name|mockController
init|=
literal|null
decl_stmt|;
try|try
block|{
name|server
operator|.
name|run
argument_list|()
expr_stmt|;
name|controllerClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|tryCleanSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|makeSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|controllerClient
operator|.
name|makePath
argument_list|(
name|ZkStateReader
operator|.
name|LIVE_NODES_ZKNODE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|ZkStateReader
argument_list|(
name|controllerClient
argument_list|)
expr_stmt|;
name|reader
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
name|mockController
operator|=
operator|new
name|MockZKController
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
literal|"node1"
argument_list|,
literal|"collection1"
argument_list|)
expr_stmt|;
name|overseerClient
operator|=
name|electNewOverseer
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|mockController
operator|.
name|publishState
argument_list|(
literal|"core1"
argument_list|,
name|ZkStateReader
operator|.
name|RECOVERING
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|waitForCollections
argument_list|(
name|reader
argument_list|,
literal|"collection1"
argument_list|)
expr_stmt|;
name|verifyStatus
argument_list|(
name|reader
argument_list|,
name|ZkStateReader
operator|.
name|RECOVERING
argument_list|)
expr_stmt|;
name|int
name|version
init|=
name|getCloudStateVersion
argument_list|(
name|controllerClient
argument_list|)
decl_stmt|;
name|mockController
operator|.
name|publishState
argument_list|(
literal|"core1"
argument_list|,
name|ZkStateReader
operator|.
name|ACTIVE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|version
operator|==
name|getCloudStateVersion
argument_list|(
name|controllerClient
argument_list|)
condition|)
empty_stmt|;
name|verifyStatus
argument_list|(
name|reader
argument_list|,
name|ZkStateReader
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|version
operator|=
name|getCloudStateVersion
argument_list|(
name|controllerClient
argument_list|)
expr_stmt|;
name|overseerClient
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|//wait for overseer to get killed
name|mockController
operator|.
name|publishState
argument_list|(
literal|"core1"
argument_list|,
name|ZkStateReader
operator|.
name|RECOVERING
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|version
operator|=
name|getCloudStateVersion
argument_list|(
name|controllerClient
argument_list|)
expr_stmt|;
name|overseerClient
operator|=
name|electNewOverseer
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|version
operator|==
name|getCloudStateVersion
argument_list|(
name|controllerClient
argument_list|)
condition|)
empty_stmt|;
name|verifyStatus
argument_list|(
name|reader
argument_list|,
name|ZkStateReader
operator|.
name|RECOVERING
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Live nodes count does not match"
argument_list|,
literal|1
argument_list|,
name|reader
operator|.
name|getCloudState
argument_list|()
operator|.
name|getLiveNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Shard count does not match"
argument_list|,
literal|1
argument_list|,
name|reader
operator|.
name|getCloudState
argument_list|()
operator|.
name|getSlice
argument_list|(
literal|"collection1"
argument_list|,
literal|"shard1"
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|version
operator|=
name|getCloudStateVersion
argument_list|(
name|controllerClient
argument_list|)
expr_stmt|;
name|mockController
operator|.
name|publishState
argument_list|(
literal|"core1"
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|version
operator|==
name|getCloudStateVersion
argument_list|(
name|controllerClient
argument_list|)
condition|)
empty_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"collection1 should be gone after publishing the null state"
argument_list|,
name|reader
operator|.
name|getCloudState
argument_list|()
operator|.
name|getCollections
argument_list|()
operator|.
name|contains
argument_list|(
literal|"collection1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|mockController
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|overseerClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|controllerClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|field|killCounter
specifier|private
name|AtomicInteger
name|killCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|class|OverseerRestarter
specifier|private
class|class
name|OverseerRestarter
implements|implements
name|Runnable
block|{
DECL|field|overseerClient
name|SolrZkClient
name|overseerClient
init|=
literal|null
decl_stmt|;
DECL|field|run
specifier|public
specifier|volatile
name|boolean
name|run
init|=
literal|true
decl_stmt|;
DECL|field|zkAddress
specifier|private
specifier|final
name|String
name|zkAddress
decl_stmt|;
DECL|method|OverseerRestarter
specifier|public
name|OverseerRestarter
parameter_list|(
name|String
name|zkAddress
parameter_list|)
block|{
name|this
operator|.
name|zkAddress
operator|=
name|zkAddress
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|overseerClient
operator|=
name|electNewOverseer
argument_list|(
name|zkAddress
argument_list|)
expr_stmt|;
name|Random
name|rnd
init|=
name|random
argument_list|()
decl_stmt|;
while|while
condition|(
name|run
condition|)
block|{
if|if
condition|(
name|killCounter
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|killCounter
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Killing overseer."
argument_list|)
expr_stmt|;
name|overseerClient
operator|.
name|close
argument_list|()
expr_stmt|;
name|overseerClient
operator|=
name|electNewOverseer
argument_list|(
name|zkAddress
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// e.printStackTrace();
block|}
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// e.printStackTrace();
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// ignore
block|}
finally|finally
block|{
if|if
condition|(
name|overseerClient
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|overseerClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testShardLeaderChange
specifier|public
name|void
name|testShardLeaderChange
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|zkDir
init|=
name|dataDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"zookeeper/server1/data"
decl_stmt|;
specifier|final
name|ZkTestServer
name|server
init|=
operator|new
name|ZkTestServer
argument_list|(
name|zkDir
argument_list|)
decl_stmt|;
name|SolrZkClient
name|controllerClient
init|=
literal|null
decl_stmt|;
name|ZkStateReader
name|reader
init|=
literal|null
decl_stmt|;
name|MockZKController
name|mockController
init|=
literal|null
decl_stmt|;
name|MockZKController
name|mockController2
init|=
literal|null
decl_stmt|;
name|OverseerRestarter
name|killer
init|=
literal|null
decl_stmt|;
name|Thread
name|killerThread
init|=
literal|null
decl_stmt|;
try|try
block|{
name|server
operator|.
name|run
argument_list|()
expr_stmt|;
name|controllerClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|tryCleanSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|makeSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|controllerClient
operator|.
name|makePath
argument_list|(
name|ZkStateReader
operator|.
name|LIVE_NODES_ZKNODE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|killer
operator|=
operator|new
name|OverseerRestarter
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|)
expr_stmt|;
name|killerThread
operator|=
operator|new
name|Thread
argument_list|(
name|killer
argument_list|)
expr_stmt|;
name|killerThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|reader
operator|=
operator|new
name|ZkStateReader
argument_list|(
name|controllerClient
argument_list|)
expr_stmt|;
comment|//no watches, we'll poll
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atLeast
argument_list|(
literal|4
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|killCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
comment|//for each round allow 1 kill
name|mockController
operator|=
operator|new
name|MockZKController
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
literal|"node1"
argument_list|,
literal|"collection1"
argument_list|)
expr_stmt|;
name|mockController
operator|.
name|publishState
argument_list|(
literal|"core1"
argument_list|,
literal|"state1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|mockController2
operator|!=
literal|null
condition|)
block|{
name|mockController2
operator|.
name|close
argument_list|()
expr_stmt|;
name|mockController2
operator|=
literal|null
expr_stmt|;
block|}
name|mockController
operator|.
name|publishState
argument_list|(
literal|"core1"
argument_list|,
literal|"state2"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mockController2
operator|=
operator|new
name|MockZKController
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
literal|"node2"
argument_list|,
literal|"collection1"
argument_list|)
expr_stmt|;
name|mockController
operator|.
name|publishState
argument_list|(
literal|"core1"
argument_list|,
literal|"state1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyShardLeader
argument_list|(
name|reader
argument_list|,
literal|"collection1"
argument_list|,
literal|"shard1"
argument_list|,
literal|"core1"
argument_list|)
expr_stmt|;
name|mockController2
operator|.
name|publishState
argument_list|(
literal|"core4"
argument_list|,
literal|"state2"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mockController
operator|.
name|close
argument_list|()
expr_stmt|;
name|mockController
operator|=
literal|null
expr_stmt|;
name|verifyShardLeader
argument_list|(
name|reader
argument_list|,
literal|"collection1"
argument_list|,
literal|"shard1"
argument_list|,
literal|"core4"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|killer
operator|!=
literal|null
condition|)
block|{
name|killer
operator|.
name|run
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|killerThread
operator|!=
literal|null
condition|)
block|{
name|killerThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
name|close
argument_list|(
name|mockController
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|mockController2
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|controllerClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDoubleAssignment
specifier|public
name|void
name|testDoubleAssignment
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|zkDir
init|=
name|dataDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"zookeeper/server1/data"
decl_stmt|;
name|ZkTestServer
name|server
init|=
operator|new
name|ZkTestServer
argument_list|(
name|zkDir
argument_list|)
decl_stmt|;
name|SolrZkClient
name|controllerClient
init|=
literal|null
decl_stmt|;
name|SolrZkClient
name|overseerClient
init|=
literal|null
decl_stmt|;
name|ZkStateReader
name|reader
init|=
literal|null
decl_stmt|;
name|MockZKController
name|mockController
init|=
literal|null
decl_stmt|;
try|try
block|{
name|server
operator|.
name|run
argument_list|()
expr_stmt|;
name|controllerClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|tryCleanSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|makeSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|controllerClient
operator|.
name|makePath
argument_list|(
name|ZkStateReader
operator|.
name|LIVE_NODES_ZKNODE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|ZkStateReader
argument_list|(
name|controllerClient
argument_list|)
expr_stmt|;
name|reader
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
name|mockController
operator|=
operator|new
name|MockZKController
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
literal|"node1"
argument_list|,
literal|"collection1"
argument_list|)
expr_stmt|;
name|overseerClient
operator|=
name|electNewOverseer
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|)
expr_stmt|;
name|mockController
operator|.
name|publishState
argument_list|(
literal|"core1"
argument_list|,
name|ZkStateReader
operator|.
name|RECOVERING
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|waitForCollections
argument_list|(
name|reader
argument_list|,
literal|"collection1"
argument_list|)
expr_stmt|;
name|verifyStatus
argument_list|(
name|reader
argument_list|,
name|ZkStateReader
operator|.
name|RECOVERING
argument_list|)
expr_stmt|;
name|mockController
operator|.
name|close
argument_list|()
expr_stmt|;
name|int
name|version
init|=
name|getCloudStateVersion
argument_list|(
name|controllerClient
argument_list|)
decl_stmt|;
name|mockController
operator|=
operator|new
name|MockZKController
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
literal|"node1"
argument_list|,
literal|"collection1"
argument_list|)
expr_stmt|;
name|mockController
operator|.
name|publishState
argument_list|(
literal|"core1"
argument_list|,
name|ZkStateReader
operator|.
name|RECOVERING
argument_list|,
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|version
operator|==
name|getCloudStateVersion
argument_list|(
name|controllerClient
argument_list|)
condition|)
empty_stmt|;
name|reader
operator|.
name|updateCloudState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|CloudState
name|state
init|=
name|reader
operator|.
name|getCloudState
argument_list|()
decl_stmt|;
name|int
name|numFound
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|collection
range|:
name|state
operator|.
name|getCollectionStates
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Slice
name|slice
range|:
name|collection
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|slice
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
literal|"node1_core1"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|numFound
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Shard was found in more than 1 times in CloudState"
argument_list|,
literal|1
argument_list|,
name|numFound
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|overseerClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|mockController
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|controllerClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPlaceholders
specifier|public
name|void
name|testPlaceholders
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|zkDir
init|=
name|dataDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"zookeeper/server1/data"
decl_stmt|;
name|ZkTestServer
name|server
init|=
operator|new
name|ZkTestServer
argument_list|(
name|zkDir
argument_list|)
decl_stmt|;
name|SolrZkClient
name|controllerClient
init|=
literal|null
decl_stmt|;
name|SolrZkClient
name|overseerClient
init|=
literal|null
decl_stmt|;
name|ZkStateReader
name|reader
init|=
literal|null
decl_stmt|;
name|MockZKController
name|mockController
init|=
literal|null
decl_stmt|;
try|try
block|{
name|server
operator|.
name|run
argument_list|()
expr_stmt|;
name|controllerClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|tryCleanSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|makeSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|controllerClient
operator|.
name|makePath
argument_list|(
name|ZkStateReader
operator|.
name|LIVE_NODES_ZKNODE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|ZkStateReader
argument_list|(
name|controllerClient
argument_list|)
expr_stmt|;
name|reader
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
name|mockController
operator|=
operator|new
name|MockZKController
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
literal|"node1"
argument_list|,
literal|"collection1"
argument_list|)
expr_stmt|;
name|overseerClient
operator|=
name|electNewOverseer
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|)
expr_stmt|;
name|mockController
operator|.
name|publishState
argument_list|(
literal|"core1"
argument_list|,
name|ZkStateReader
operator|.
name|RECOVERING
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|waitForCollections
argument_list|(
name|reader
argument_list|,
literal|"collection1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Slicecount does not match"
argument_list|,
literal|12
argument_list|,
name|reader
operator|.
name|getCloudState
argument_list|()
operator|.
name|getSlices
argument_list|(
literal|"collection1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|overseerClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|mockController
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|controllerClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|close
specifier|private
name|void
name|close
parameter_list|(
name|MockZKController
name|mockController
parameter_list|)
block|{
if|if
condition|(
name|mockController
operator|!=
literal|null
condition|)
block|{
name|mockController
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testReplay
specifier|public
name|void
name|testReplay
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|zkDir
init|=
name|dataDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"zookeeper/server1/data"
decl_stmt|;
name|ZkTestServer
name|server
init|=
operator|new
name|ZkTestServer
argument_list|(
name|zkDir
argument_list|)
decl_stmt|;
name|SolrZkClient
name|zkClient
init|=
literal|null
decl_stmt|;
name|SolrZkClient
name|overseerClient
init|=
literal|null
decl_stmt|;
name|ZkStateReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|server
operator|.
name|run
argument_list|()
expr_stmt|;
name|zkClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|tryCleanSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|makeSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|makePath
argument_list|(
name|ZkStateReader
operator|.
name|LIVE_NODES_ZKNODE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|ZkStateReader
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|reader
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
comment|//prepopulate work queue with some items to emulate previous overseer died before persisting state
name|DistributedQueue
name|queue
init|=
name|Overseer
operator|.
name|getInternalQueue
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
literal|"state"
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
literal|"http://127.0.0.1/solr"
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
literal|"node1"
argument_list|,
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
literal|"s1"
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
literal|"collection1"
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
literal|"core1"
argument_list|,
name|ZkStateReader
operator|.
name|ROLES_PROP
argument_list|,
literal|""
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|ZkStateReader
operator|.
name|RECOVERING
argument_list|)
decl_stmt|;
name|queue
operator|.
name|offer
argument_list|(
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
literal|"state"
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
literal|"http://127.0.0.1/solr"
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
literal|"node1"
argument_list|,
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
literal|"s1"
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
literal|"collection1"
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
literal|"core2"
argument_list|,
name|ZkStateReader
operator|.
name|ROLES_PROP
argument_list|,
literal|""
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|ZkStateReader
operator|.
name|RECOVERING
argument_list|)
expr_stmt|;
name|queue
operator|.
name|offer
argument_list|(
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|overseerClient
operator|=
name|electNewOverseer
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|)
expr_stmt|;
comment|//submit to proper queue
name|queue
operator|=
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|m
operator|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
literal|"state"
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
literal|"http://127.0.0.1/solr"
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
literal|"node1"
argument_list|,
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
literal|"s1"
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
literal|"collection1"
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
literal|"core3"
argument_list|,
name|ZkStateReader
operator|.
name|ROLES_PROP
argument_list|,
literal|""
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|ZkStateReader
operator|.
name|RECOVERING
argument_list|)
expr_stmt|;
name|queue
operator|.
name|offer
argument_list|(
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|Slice
name|s
init|=
name|reader
operator|.
name|getCloudState
argument_list|()
operator|.
name|getSlice
argument_list|(
literal|"collection1"
argument_list|,
literal|"s1"
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
operator|&&
name|s
operator|.
name|getShards
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|3
condition|)
break|break;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|reader
operator|.
name|getCloudState
argument_list|()
operator|.
name|getSlice
argument_list|(
literal|"collection1"
argument_list|,
literal|"s1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|reader
operator|.
name|getCloudState
argument_list|()
operator|.
name|getSlice
argument_list|(
literal|"collection1"
argument_list|,
literal|"s1"
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|overseerClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|close
specifier|private
name|void
name|close
parameter_list|(
name|ZkStateReader
name|reader
parameter_list|)
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|close
specifier|private
name|void
name|close
parameter_list|(
name|SolrZkClient
name|overseerClient
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|overseerClient
operator|!=
literal|null
condition|)
block|{
name|overseerClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getCloudStateVersion
specifier|private
name|int
name|getCloudStateVersion
parameter_list|(
name|SolrZkClient
name|controllerClient
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
name|controllerClient
operator|.
name|exists
argument_list|(
name|ZkStateReader
operator|.
name|CLUSTER_STATE
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
operator|.
name|getVersion
argument_list|()
return|;
block|}
DECL|method|electNewOverseer
specifier|private
name|SolrZkClient
name|electNewOverseer
parameter_list|(
name|String
name|address
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
throws|,
name|IOException
throws|,
name|KeeperException
throws|,
name|ParserConfigurationException
throws|,
name|SAXException
block|{
name|SolrZkClient
name|zkClient
init|=
operator|new
name|SolrZkClient
argument_list|(
name|address
argument_list|,
name|TIMEOUT
argument_list|)
decl_stmt|;
name|ZkStateReader
name|reader
init|=
operator|new
name|ZkStateReader
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
name|LeaderElector
name|overseerElector
init|=
operator|new
name|LeaderElector
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
comment|// TODO: close Overseer
name|Overseer
name|overseer
init|=
operator|new
name|Overseer
argument_list|(
operator|new
name|HttpShardHandlerFactory
argument_list|()
operator|.
name|getShardHandler
argument_list|()
argument_list|,
literal|"/admin/cores"
argument_list|,
name|reader
argument_list|)
decl_stmt|;
name|ElectionContext
name|ec
init|=
operator|new
name|OverseerElectionContext
argument_list|(
name|zkClient
argument_list|,
name|overseer
argument_list|,
name|address
operator|.
name|replaceAll
argument_list|(
literal|"/"
argument_list|,
literal|"_"
argument_list|)
argument_list|)
decl_stmt|;
name|overseerElector
operator|.
name|setup
argument_list|(
name|ec
argument_list|)
expr_stmt|;
name|overseerElector
operator|.
name|joinElection
argument_list|(
name|ec
argument_list|)
expr_stmt|;
return|return
name|zkClient
return|;
block|}
block|}
end_class
end_unit
