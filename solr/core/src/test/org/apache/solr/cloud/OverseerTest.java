begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|overseer
operator|.
name|OverseerAction
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ExecutorUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CloudConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|HttpShardHandlerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|UpdateShardHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|UpdateShardHandlerConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DefaultSolrThreadFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|stats
operator|.
name|Snapshot
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|stats
operator|.
name|Timer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|stats
operator|.
name|TimerContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NoNodeException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NodeExistsException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractDistribZkTestBase
operator|.
name|verifyReplicaStatus
import|;
end_import
begin_class
annotation|@
name|Slow
DECL|class|OverseerTest
specifier|public
class|class
name|OverseerTest
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|TIMEOUT
specifier|static
specifier|final
name|int
name|TIMEOUT
init|=
literal|30000
decl_stmt|;
DECL|field|DEBUG
specifier|private
specifier|static
specifier|final
name|boolean
name|DEBUG
init|=
literal|false
decl_stmt|;
DECL|field|overseers
specifier|private
name|List
argument_list|<
name|Overseer
argument_list|>
name|overseers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|readers
specifier|private
name|List
argument_list|<
name|ZkStateReader
argument_list|>
name|readers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|httpShardHandlerFactorys
specifier|private
name|List
argument_list|<
name|HttpShardHandlerFactory
argument_list|>
name|httpShardHandlerFactorys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|updateShardHandlers
specifier|private
name|List
argument_list|<
name|UpdateShardHandler
argument_list|>
name|updateShardHandlers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|collection
specifier|final
specifier|private
name|String
name|collection
init|=
name|SolrTestCaseJ4
operator|.
name|DEFAULT_TEST_COLLECTION_NAME
decl_stmt|;
DECL|class|MockZKController
specifier|public
specifier|static
class|class
name|MockZKController
block|{
DECL|field|zkClient
specifier|private
specifier|final
name|SolrZkClient
name|zkClient
decl_stmt|;
DECL|field|zkStateReader
specifier|private
specifier|final
name|ZkStateReader
name|zkStateReader
decl_stmt|;
DECL|field|nodeName
specifier|private
specifier|final
name|String
name|nodeName
decl_stmt|;
DECL|field|electionContext
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ElectionContext
argument_list|>
name|electionContext
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ElectionContext
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|MockZKController
specifier|public
name|MockZKController
parameter_list|(
name|String
name|zkAddress
parameter_list|,
name|String
name|nodeName
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
throws|,
name|IOException
throws|,
name|KeeperException
block|{
name|this
operator|.
name|nodeName
operator|=
name|nodeName
expr_stmt|;
name|zkClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|zkAddress
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|ZkController
operator|.
name|createClusterZkNodes
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|zkStateReader
operator|=
operator|new
name|ZkStateReader
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|zkStateReader
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
comment|// live node
specifier|final
name|String
name|nodePath
init|=
name|ZkStateReader
operator|.
name|LIVE_NODES_ZKNODE
operator|+
literal|"/"
operator|+
name|nodeName
decl_stmt|;
name|zkClient
operator|.
name|makePath
argument_list|(
name|nodePath
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteNode
specifier|private
name|void
name|deleteNode
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
block|{
try|try
block|{
name|zkClient
operator|.
name|delete
argument_list|(
name|path
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoNodeException
name|e
parameter_list|)
block|{
comment|// fine
name|log
operator|.
name|warn
argument_list|(
literal|"cancelElection did not find election node to remove"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected KeeperException!"
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected InterruptedException!"
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
for|for
control|(
name|ElectionContext
name|ec
range|:
name|electionContext
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|ec
operator|.
name|cancelElection
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Error cancelling election for %s"
argument_list|,
name|ec
operator|.
name|id
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|deleteNode
argument_list|(
name|ZkStateReader
operator|.
name|LIVE_NODES_ZKNODE
operator|+
literal|"/"
operator|+
name|nodeName
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|publishState
specifier|public
name|String
name|publishState
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|coreName
parameter_list|,
name|String
name|coreNodeName
parameter_list|,
name|Replica
operator|.
name|State
name|stateName
parameter_list|,
name|int
name|numShards
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
if|if
condition|(
name|stateName
operator|==
literal|null
condition|)
block|{
name|ElectionContext
name|ec
init|=
name|electionContext
operator|.
name|remove
argument_list|(
name|coreName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ec
operator|!=
literal|null
condition|)
block|{
name|ec
operator|.
name|cancelElection
argument_list|()
expr_stmt|;
block|}
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|DELETECORE
operator|.
name|toLower
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
name|nodeName
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|coreName
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NODE_NAME_PROP
argument_list|,
name|coreNodeName
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collection
argument_list|)
decl_stmt|;
name|DistributedQueue
name|q
init|=
name|Overseer
operator|.
name|getStateUpdateQueue
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
name|q
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|STATE
operator|.
name|toLower
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|stateName
operator|.
name|toString
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
name|nodeName
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|coreName
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NODE_NAME_PROP
argument_list|,
name|coreNodeName
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collection
argument_list|,
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|numShards
argument_list|)
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
literal|"http://"
operator|+
name|nodeName
operator|+
literal|"/solr/"
argument_list|)
decl_stmt|;
name|DistributedQueue
name|q
init|=
name|Overseer
operator|.
name|getStateUpdateQueue
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
name|q
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|collection
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|120
condition|;
name|i
operator|++
control|)
block|{
name|String
name|shardId
init|=
name|getShardId
argument_list|(
name|collection
argument_list|,
name|coreNodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardId
operator|!=
literal|null
condition|)
block|{
name|ElectionContext
name|prevContext
init|=
name|electionContext
operator|.
name|get
argument_list|(
name|coreName
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevContext
operator|!=
literal|null
condition|)
block|{
name|prevContext
operator|.
name|cancelElection
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|zkClient
operator|.
name|makePath
argument_list|(
literal|"/collections/"
operator|+
name|collection
operator|+
literal|"/leader_elect/"
operator|+
name|shardId
operator|+
literal|"/election"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NodeExistsException
name|nee
parameter_list|)
block|{}
name|ZkNodeProps
name|props
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
literal|"http://"
operator|+
name|nodeName
operator|+
literal|"/solr/"
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
name|nodeName
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|coreName
argument_list|,
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
name|shardId
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collection
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NODE_NAME_PROP
argument_list|,
name|coreNodeName
argument_list|)
decl_stmt|;
name|LeaderElector
name|elector
init|=
operator|new
name|LeaderElector
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
name|ShardLeaderElectionContextBase
name|ctx
init|=
operator|new
name|ShardLeaderElectionContextBase
argument_list|(
name|elector
argument_list|,
name|shardId
argument_list|,
name|collection
argument_list|,
name|nodeName
operator|+
literal|"_"
operator|+
name|coreName
argument_list|,
name|props
argument_list|,
name|zkStateReader
argument_list|)
decl_stmt|;
name|elector
operator|.
name|setup
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|electionContext
operator|.
name|put
argument_list|(
name|coreName
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|elector
operator|.
name|joinElection
argument_list|(
name|ctx
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|shardId
return|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getShardId
specifier|private
name|String
name|getShardId
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|coreNodeName
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlicesMap
argument_list|(
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
name|slices
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Slice
name|slice
range|:
name|slices
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Replica
name|replica
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
name|String
name|cnn
init|=
name|replica
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|coreNodeName
operator|.
name|equals
argument_list|(
name|cnn
argument_list|)
condition|)
block|{
return|return
name|slice
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
comment|//XXX wait for threads to die...
block|}
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
for|for
control|(
name|Overseer
name|overseer
range|:
name|overseers
control|)
block|{
name|overseer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|overseers
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|ZkStateReader
name|reader
range|:
name|readers
control|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|readers
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|HttpShardHandlerFactory
name|handlerFactory
range|:
name|httpShardHandlerFactorys
control|)
block|{
name|handlerFactory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|httpShardHandlerFactorys
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|UpdateShardHandler
name|updateShardHandler
range|:
name|updateShardHandlers
control|)
block|{
name|updateShardHandler
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|updateShardHandlers
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testShardAssignment
specifier|public
name|void
name|testShardAssignment
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|zkDir
init|=
name|createTempDir
argument_list|(
literal|"zkData"
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|ZkTestServer
name|server
init|=
operator|new
name|ZkTestServer
argument_list|(
name|zkDir
argument_list|)
decl_stmt|;
name|MockZKController
name|zkController
init|=
literal|null
decl_stmt|;
name|SolrZkClient
name|zkClient
init|=
literal|null
decl_stmt|;
name|SolrZkClient
name|overseerClient
init|=
literal|null
decl_stmt|;
try|try
block|{
name|server
operator|.
name|run
argument_list|()
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|tryCleanSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|makeSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|zkClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|ZkController
operator|.
name|createClusterZkNodes
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|overseerClient
operator|=
name|electNewOverseer
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|)
expr_stmt|;
name|ZkStateReader
name|reader
init|=
operator|new
name|ZkStateReader
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
name|reader
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
name|zkController
operator|=
operator|new
name|MockZKController
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numShards
init|=
literal|6
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numShards
condition|;
name|i
operator|++
control|)
block|{
name|assertNotNull
argument_list|(
literal|"shard got no id?"
argument_list|,
name|zkController
operator|.
name|publishState
argument_list|(
name|collection
argument_list|,
literal|"core"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|"node"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|rmap
init|=
name|reader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
literal|"shard1"
argument_list|)
operator|.
name|getReplicasMap
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|rmap
operator|.
name|toString
argument_list|()
argument_list|,
literal|2
argument_list|,
name|rmap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rmap
operator|.
name|toString
argument_list|()
argument_list|,
literal|2
argument_list|,
name|reader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
literal|"shard2"
argument_list|)
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rmap
operator|.
name|toString
argument_list|()
argument_list|,
literal|2
argument_list|,
name|reader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
literal|"shard3"
argument_list|)
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//make sure leaders are in cloud state
name|assertNotNull
argument_list|(
name|reader
operator|.
name|getLeaderUrl
argument_list|(
name|collection
argument_list|,
literal|"shard1"
argument_list|,
literal|15000
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|reader
operator|.
name|getLeaderUrl
argument_list|(
name|collection
argument_list|,
literal|"shard2"
argument_list|,
literal|15000
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|reader
operator|.
name|getLeaderUrl
argument_list|(
name|collection
argument_list|,
literal|"shard3"
argument_list|,
literal|15000
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|DEBUG
condition|)
block|{
if|if
condition|(
name|zkController
operator|!=
literal|null
condition|)
block|{
name|zkClient
operator|.
name|printLayoutToStdOut
argument_list|()
expr_stmt|;
block|}
block|}
name|close
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
if|if
condition|(
name|zkController
operator|!=
literal|null
condition|)
block|{
name|zkController
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|close
argument_list|(
name|overseerClient
argument_list|)
expr_stmt|;
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testBadQueueItem
specifier|public
name|void
name|testBadQueueItem
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|zkDir
init|=
name|createTempDir
argument_list|(
literal|"zkData"
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|ZkTestServer
name|server
init|=
operator|new
name|ZkTestServer
argument_list|(
name|zkDir
argument_list|)
decl_stmt|;
name|MockZKController
name|zkController
init|=
literal|null
decl_stmt|;
name|SolrZkClient
name|zkClient
init|=
literal|null
decl_stmt|;
name|SolrZkClient
name|overseerClient
init|=
literal|null
decl_stmt|;
try|try
block|{
name|server
operator|.
name|run
argument_list|()
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|tryCleanSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|makeSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|zkClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|ZkController
operator|.
name|createClusterZkNodes
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|overseerClient
operator|=
name|electNewOverseer
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|)
expr_stmt|;
name|ZkStateReader
name|reader
init|=
operator|new
name|ZkStateReader
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
name|reader
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
name|zkController
operator|=
operator|new
name|MockZKController
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numShards
init|=
literal|3
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numShards
condition|;
name|i
operator|++
control|)
block|{
name|assertNotNull
argument_list|(
literal|"shard got no id?"
argument_list|,
name|zkController
operator|.
name|publishState
argument_list|(
name|collection
argument_list|,
literal|"core"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|"node"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
literal|"shard1"
argument_list|)
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
literal|"shard2"
argument_list|)
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
literal|"shard3"
argument_list|)
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//make sure leaders are in cloud state
name|assertNotNull
argument_list|(
name|reader
operator|.
name|getLeaderUrl
argument_list|(
name|collection
argument_list|,
literal|"shard1"
argument_list|,
literal|15000
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|reader
operator|.
name|getLeaderUrl
argument_list|(
name|collection
argument_list|,
literal|"shard2"
argument_list|,
literal|15000
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|reader
operator|.
name|getLeaderUrl
argument_list|(
name|collection
argument_list|,
literal|"shard3"
argument_list|,
literal|15000
argument_list|)
argument_list|)
expr_stmt|;
comment|// publish a bad queue item
name|String
name|emptyCollectionName
init|=
literal|""
decl_stmt|;
name|zkController
operator|.
name|publishState
argument_list|(
name|emptyCollectionName
argument_list|,
literal|"core0"
argument_list|,
literal|"node0"
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|zkController
operator|.
name|publishState
argument_list|(
name|emptyCollectionName
argument_list|,
literal|"core0"
argument_list|,
literal|"node0"
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// make sure the Overseer is still processing items
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numShards
condition|;
name|i
operator|++
control|)
block|{
name|assertNotNull
argument_list|(
literal|"shard got no id?"
argument_list|,
name|zkController
operator|.
name|publishState
argument_list|(
literal|"collection2"
argument_list|,
literal|"core"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|"node"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
literal|"collection2"
argument_list|,
literal|"shard1"
argument_list|)
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
literal|"collection2"
argument_list|,
literal|"shard2"
argument_list|)
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
literal|"collection2"
argument_list|,
literal|"shard3"
argument_list|)
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//make sure leaders are in cloud state
name|assertNotNull
argument_list|(
name|reader
operator|.
name|getLeaderUrl
argument_list|(
literal|"collection2"
argument_list|,
literal|"shard1"
argument_list|,
literal|15000
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|reader
operator|.
name|getLeaderUrl
argument_list|(
literal|"collection2"
argument_list|,
literal|"shard2"
argument_list|,
literal|15000
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|reader
operator|.
name|getLeaderUrl
argument_list|(
literal|"collection2"
argument_list|,
literal|"shard3"
argument_list|,
literal|15000
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|DEBUG
condition|)
block|{
if|if
condition|(
name|zkController
operator|!=
literal|null
condition|)
block|{
name|zkClient
operator|.
name|printLayoutToStdOut
argument_list|()
expr_stmt|;
block|}
block|}
name|close
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
if|if
condition|(
name|zkController
operator|!=
literal|null
condition|)
block|{
name|zkController
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|close
argument_list|(
name|overseerClient
argument_list|)
expr_stmt|;
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testShardAssignmentBigger
specifier|public
name|void
name|testShardAssignmentBigger
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|zkDir
init|=
name|createTempDir
argument_list|(
literal|"zkData"
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
specifier|final
name|int
name|nodeCount
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|TEST_NIGHTLY
condition|?
literal|50
else|:
literal|10
argument_list|)
operator|+
operator|(
name|TEST_NIGHTLY
condition|?
literal|50
else|:
literal|10
operator|)
operator|+
literal|1
decl_stmt|;
comment|//how many simulated nodes (num of threads)
specifier|final
name|int
name|coreCount
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|TEST_NIGHTLY
condition|?
literal|100
else|:
literal|11
argument_list|)
operator|+
operator|(
name|TEST_NIGHTLY
condition|?
literal|100
else|:
literal|11
operator|)
operator|+
literal|1
decl_stmt|;
comment|//how many cores to register
specifier|final
name|int
name|sliceCount
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|TEST_NIGHTLY
condition|?
literal|20
else|:
literal|5
argument_list|)
operator|+
literal|1
decl_stmt|;
comment|//how many slices
name|ZkTestServer
name|server
init|=
operator|new
name|ZkTestServer
argument_list|(
name|zkDir
argument_list|)
decl_stmt|;
name|SolrZkClient
name|zkClient
init|=
literal|null
decl_stmt|;
name|ZkStateReader
name|reader
init|=
literal|null
decl_stmt|;
name|SolrZkClient
name|overseerClient
init|=
literal|null
decl_stmt|;
specifier|final
name|MockZKController
index|[]
name|controllers
init|=
operator|new
name|MockZKController
index|[
name|nodeCount
index|]
decl_stmt|;
specifier|final
name|ExecutorService
index|[]
name|nodeExecutors
init|=
operator|new
name|ExecutorService
index|[
name|nodeCount
index|]
decl_stmt|;
try|try
block|{
name|server
operator|.
name|run
argument_list|()
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|tryCleanSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|makeSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|zkClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|ZkController
operator|.
name|createClusterZkNodes
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|overseerClient
operator|=
name|electNewOverseer
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|ZkStateReader
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|reader
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeCount
condition|;
name|i
operator|++
control|)
block|{
name|controllers
index|[
name|i
index|]
operator|=
operator|new
name|MockZKController
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
literal|"node"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeCount
condition|;
name|i
operator|++
control|)
block|{
name|nodeExecutors
index|[
name|i
index|]
operator|=
name|ExecutorUtil
operator|.
name|newMDCAwareFixedThreadPool
argument_list|(
literal|1
argument_list|,
operator|new
name|DefaultSolrThreadFactory
argument_list|(
literal|"testShardAssignment"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
index|[]
name|ids
init|=
operator|new
name|String
index|[
name|coreCount
index|]
decl_stmt|;
comment|//register total of coreCount cores
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|coreCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|slot
init|=
name|i
decl_stmt|;
name|nodeExecutors
index|[
name|i
operator|%
name|nodeCount
index|]
operator|.
name|submit
argument_list|(
call|(
name|Runnable
call|)
argument_list|()
operator|->
block|{
name|final
name|String
name|coreName
operator|=
literal|"core"
operator|+
name|slot
block|;
try|try
block|{
name|ids
index|[
name|slot
index|]
operator|=
name|controllers
index|[
name|slot
operator|%
name|nodeCount
index|]
operator|.
name|publishState
argument_list|(
name|collection
argument_list|,
name|coreName
argument_list|,
literal|"node"
operator|+
name|slot
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|,
name|sliceCount
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"register threw exception:"
operator|+
name|e
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|)
empty_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeCount
condition|;
name|i
operator|++
control|)
block|{
name|nodeExecutors
index|[
name|i
index|]
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeCount
condition|;
name|i
operator|++
control|)
block|{
while|while
condition|(
operator|!
name|nodeExecutors
index|[
name|i
index|]
operator|.
name|awaitTermination
argument_list|(
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
empty_stmt|;
block|}
comment|// make sure all cores have been assigned a id in cloudstate
name|int
name|cloudStateSliceCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|40
condition|;
name|i
operator|++
control|)
block|{
name|cloudStateSliceCount
operator|=
literal|0
expr_stmt|;
name|ClusterState
name|state
init|=
name|reader
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|state
operator|.
name|getSlicesMap
argument_list|(
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
name|slices
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|name
range|:
name|slices
operator|.
name|keySet
argument_list|()
control|)
block|{
name|cloudStateSliceCount
operator|+=
name|slices
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|coreCount
operator|==
name|cloudStateSliceCount
condition|)
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Unable to verify all cores have been assigned an id in cloudstate"
argument_list|,
name|coreCount
argument_list|,
name|cloudStateSliceCount
argument_list|)
expr_stmt|;
comment|// make sure all cores have been returned an id
name|int
name|assignedCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|240
condition|;
name|i
operator|++
control|)
block|{
name|assignedCount
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|coreCount
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|ids
index|[
name|j
index|]
operator|!=
literal|null
condition|)
block|{
name|assignedCount
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|coreCount
operator|==
name|assignedCount
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Unable to verify all cores have been returned an id"
argument_list|,
name|coreCount
argument_list|,
name|assignedCount
argument_list|)
expr_stmt|;
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|counters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|sliceCount
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|counters
operator|.
name|put
argument_list|(
literal|"shard"
operator|+
name|i
argument_list|,
operator|new
name|AtomicInteger
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|coreCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|AtomicInteger
name|ai
init|=
name|counters
operator|.
name|get
argument_list|(
name|ids
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"could not find counter for shard:"
operator|+
name|ids
index|[
name|i
index|]
argument_list|,
name|ai
argument_list|)
expr_stmt|;
name|ai
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|String
name|counter
range|:
name|counters
operator|.
name|keySet
argument_list|()
control|)
block|{
name|int
name|count
init|=
name|counters
operator|.
name|get
argument_list|(
name|counter
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|expectedCount
init|=
name|coreCount
operator|/
name|sliceCount
decl_stmt|;
name|int
name|min
init|=
name|expectedCount
operator|-
literal|1
decl_stmt|;
name|int
name|max
init|=
name|expectedCount
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|count
argument_list|<
name|min
operator|||
name|count
argument_list|>
name|max
condition|)
block|{
name|fail
argument_list|(
literal|"Unevenly assigned shard ids, "
operator|+
name|counter
operator|+
literal|" had "
operator|+
name|count
operator|+
literal|", expected: "
operator|+
name|min
operator|+
literal|"-"
operator|+
name|max
argument_list|)
expr_stmt|;
block|}
block|}
comment|//make sure leaders are in cloud state
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sliceCount
condition|;
name|i
operator|++
control|)
block|{
name|assertNotNull
argument_list|(
name|reader
operator|.
name|getLeaderUrl
argument_list|(
name|collection
argument_list|,
literal|"shard"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|15000
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
begin_finally
finally|finally
block|{
if|if
condition|(
name|DEBUG
condition|)
block|{
if|if
condition|(
name|controllers
index|[
literal|0
index|]
operator|!=
literal|null
condition|)
block|{
name|zkClient
operator|.
name|printLayoutToStdOut
argument_list|()
expr_stmt|;
block|}
block|}
name|close
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|overseerClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|controllers
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|controllers
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|controllers
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|nodeExecutors
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|nodeExecutors
index|[
name|i
index|]
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_finally
begin_comment
unit|}
comment|//wait until collections are available
end_comment
begin_function
unit|private
DECL|method|waitForCollections
name|void
name|waitForCollections
parameter_list|(
name|ZkStateReader
name|stateReader
parameter_list|,
name|String
modifier|...
name|collections
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
name|int
name|maxIterations
init|=
literal|100
decl_stmt|;
while|while
condition|(
literal|0
operator|<
name|maxIterations
operator|--
condition|)
block|{
specifier|final
name|ClusterState
name|state
init|=
name|stateReader
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|availableCollections
init|=
name|state
operator|.
name|getCollectionsMap
argument_list|()
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|int
name|availableCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|requiredCollection
range|:
name|collections
control|)
block|{
if|if
condition|(
name|availableCollections
operator|.
name|contains
argument_list|(
name|requiredCollection
argument_list|)
condition|)
block|{
name|availableCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|availableCount
operator|==
name|collections
operator|.
name|length
condition|)
return|return;
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|warn
argument_list|(
literal|"Timeout waiting for collections: "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|collections
argument_list|)
operator|+
literal|" state:"
operator|+
name|stateReader
operator|.
name|getClusterState
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
annotation|@
name|Test
DECL|method|testStateChange
specifier|public
name|void
name|testStateChange
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|zkDir
init|=
name|createTempDir
argument_list|(
literal|"zkData"
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|ZkTestServer
name|server
init|=
operator|new
name|ZkTestServer
argument_list|(
name|zkDir
argument_list|)
decl_stmt|;
name|SolrZkClient
name|zkClient
init|=
literal|null
decl_stmt|;
name|ZkStateReader
name|reader
init|=
literal|null
decl_stmt|;
name|SolrZkClient
name|overseerClient
init|=
literal|null
decl_stmt|;
try|try
block|{
name|server
operator|.
name|run
argument_list|()
expr_stmt|;
name|zkClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|tryCleanSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|makeSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|ZkController
operator|.
name|createClusterZkNodes
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|ZkStateReader
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|reader
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
name|overseerClient
operator|=
name|electNewOverseer
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|)
expr_stmt|;
name|DistributedQueue
name|q
init|=
name|Overseer
operator|.
name|getStateUpdateQueue
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|STATE
operator|.
name|toLower
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
literal|"http://127.0.0.1/solr"
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
literal|"node1"
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collection
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
literal|"core1"
argument_list|,
name|ZkStateReader
operator|.
name|ROLES_PROP
argument_list|,
literal|""
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|RECOVERING
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|waitForCollections
argument_list|(
name|reader
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|reader
operator|.
name|getClusterState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|RECOVERING
argument_list|,
name|reader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
literal|"shard1"
argument_list|)
operator|.
name|getReplica
argument_list|(
literal|"core_node1"
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|//publish node state (active)
name|m
operator|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|STATE
operator|.
name|toLower
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
literal|"http://127.0.0.1/solr"
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
literal|"node1"
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collection
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
literal|"core1"
argument_list|,
name|ZkStateReader
operator|.
name|ROLES_PROP
argument_list|,
literal|""
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|verifyReplicaStatus
argument_list|(
name|reader
argument_list|,
literal|"collection1"
argument_list|,
literal|"shard1"
argument_list|,
literal|"core_node1"
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|overseerClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|method|verifyShardLeader
specifier|private
name|void
name|verifyShardLeader
parameter_list|(
name|ZkStateReader
name|reader
parameter_list|,
name|String
name|collection
parameter_list|,
name|String
name|shard
parameter_list|,
name|String
name|expectedCore
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
name|int
name|maxIterations
init|=
literal|200
decl_stmt|;
while|while
condition|(
name|maxIterations
operator|--
operator|>
literal|0
condition|)
block|{
name|ZkNodeProps
name|props
init|=
name|reader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLeader
argument_list|(
name|collection
argument_list|,
name|shard
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|expectedCore
operator|.
name|equals
argument_list|(
name|props
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Unexpected shard leader coll:"
operator|+
name|collection
operator|+
literal|" shard:"
operator|+
name|shard
argument_list|,
name|expectedCore
argument_list|,
operator|(
name|reader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLeader
argument_list|(
name|collection
argument_list|,
name|shard
argument_list|)
operator|!=
literal|null
operator|)
condition|?
name|reader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLeader
argument_list|(
name|collection
argument_list|,
name|shard
argument_list|)
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
annotation|@
name|Test
DECL|method|testOverseerFailure
specifier|public
name|void
name|testOverseerFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|zkDir
init|=
name|createTempDir
argument_list|(
literal|"zkData"
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|ZkTestServer
name|server
init|=
operator|new
name|ZkTestServer
argument_list|(
name|zkDir
argument_list|)
decl_stmt|;
name|SolrZkClient
name|overseerClient
init|=
literal|null
decl_stmt|;
name|ZkStateReader
name|reader
init|=
literal|null
decl_stmt|;
name|MockZKController
name|mockController
init|=
literal|null
decl_stmt|;
name|SolrZkClient
name|zkClient
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|String
name|core
init|=
literal|"core1"
decl_stmt|;
specifier|final
name|String
name|core_node
init|=
literal|"core_node1"
decl_stmt|;
specifier|final
name|String
name|shard
init|=
literal|"shard1"
decl_stmt|;
specifier|final
name|int
name|numShards
init|=
literal|1
decl_stmt|;
name|server
operator|.
name|run
argument_list|()
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|tryCleanSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|makeSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|zkClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|ZkController
operator|.
name|createClusterZkNodes
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|ZkStateReader
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|reader
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
name|mockController
operator|=
operator|new
name|MockZKController
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
literal|"node1"
argument_list|)
expr_stmt|;
name|overseerClient
operator|=
name|electNewOverseer
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|mockController
operator|.
name|publishState
argument_list|(
name|collection
argument_list|,
name|core
argument_list|,
name|core_node
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|RECOVERING
argument_list|,
name|numShards
argument_list|)
expr_stmt|;
name|waitForCollections
argument_list|(
name|reader
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|verifyReplicaStatus
argument_list|(
name|reader
argument_list|,
name|collection
argument_list|,
literal|"shard1"
argument_list|,
literal|"core_node1"
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|RECOVERING
argument_list|)
expr_stmt|;
name|int
name|version
init|=
name|getClusterStateVersion
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
name|mockController
operator|.
name|publishState
argument_list|(
name|collection
argument_list|,
name|core
argument_list|,
name|core_node
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|,
name|numShards
argument_list|)
expr_stmt|;
while|while
condition|(
name|version
operator|==
name|getClusterStateVersion
argument_list|(
name|zkClient
argument_list|)
condition|)
empty_stmt|;
name|verifyReplicaStatus
argument_list|(
name|reader
argument_list|,
name|collection
argument_list|,
literal|"shard1"
argument_list|,
literal|"core_node1"
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|version
operator|=
name|getClusterStateVersion
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|overseerClient
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// wait for overseer to get killed
name|mockController
operator|.
name|publishState
argument_list|(
name|collection
argument_list|,
name|core
argument_list|,
name|core_node
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|RECOVERING
argument_list|,
name|numShards
argument_list|)
expr_stmt|;
name|version
operator|=
name|getClusterStateVersion
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|overseerClient
operator|=
name|electNewOverseer
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|version
operator|==
name|getClusterStateVersion
argument_list|(
name|zkClient
argument_list|)
condition|)
empty_stmt|;
name|verifyReplicaStatus
argument_list|(
name|reader
argument_list|,
name|collection
argument_list|,
literal|"shard1"
argument_list|,
literal|"core_node1"
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|RECOVERING
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Live nodes count does not match"
argument_list|,
literal|1
argument_list|,
name|reader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLiveNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shard
operator|+
literal|" replica count does not match"
argument_list|,
literal|1
argument_list|,
name|reader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|shard
argument_list|)
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|version
operator|=
name|getClusterStateVersion
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|mockController
operator|.
name|publishState
argument_list|(
name|collection
argument_list|,
name|core
argument_list|,
name|core_node
argument_list|,
literal|null
argument_list|,
name|numShards
argument_list|)
expr_stmt|;
while|while
condition|(
name|version
operator|==
name|getClusterStateVersion
argument_list|(
name|zkClient
argument_list|)
condition|)
empty_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|collection
operator|+
literal|" should remain after removal of the last core"
argument_list|,
comment|// as of SOLR-5209 core removal does not cascade to remove the slice and collection
name|reader
operator|.
name|getClusterState
argument_list|()
operator|.
name|hasCollection
argument_list|(
name|collection
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|core_node
operator|+
literal|" should be gone after publishing the null state"
argument_list|,
literal|null
operator|==
name|reader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collection
argument_list|)
operator|.
name|getReplica
argument_list|(
name|core_node
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|mockController
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|overseerClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
annotation|@
name|Test
DECL|method|testOverseerStatsReset
specifier|public
name|void
name|testOverseerStatsReset
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|zkDir
init|=
name|createTempDir
argument_list|(
literal|"zkData"
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|ZkTestServer
name|server
init|=
operator|new
name|ZkTestServer
argument_list|(
name|zkDir
argument_list|)
decl_stmt|;
name|ZkStateReader
name|reader
init|=
literal|null
decl_stmt|;
name|MockZKController
name|mockController
init|=
literal|null
decl_stmt|;
name|SolrZkClient
name|zkClient
init|=
literal|null
decl_stmt|;
try|try
block|{
name|server
operator|.
name|run
argument_list|()
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|tryCleanSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|makeSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|zkClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|ZkController
operator|.
name|createClusterZkNodes
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|ZkStateReader
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|reader
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
name|mockController
operator|=
operator|new
name|MockZKController
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
literal|"node1"
argument_list|)
expr_stmt|;
name|LeaderElector
name|overseerElector
init|=
operator|new
name|LeaderElector
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
if|if
condition|(
name|overseers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|overseers
operator|.
name|get
argument_list|(
name|overseers
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|overseers
operator|.
name|get
argument_list|(
name|overseers
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getZkClient
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|UpdateShardHandler
name|updateShardHandler
init|=
operator|new
name|UpdateShardHandler
argument_list|(
name|UpdateShardHandlerConfig
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|updateShardHandlers
operator|.
name|add
argument_list|(
name|updateShardHandler
argument_list|)
expr_stmt|;
name|HttpShardHandlerFactory
name|httpShardHandlerFactory
init|=
operator|new
name|HttpShardHandlerFactory
argument_list|()
decl_stmt|;
name|httpShardHandlerFactorys
operator|.
name|add
argument_list|(
name|httpShardHandlerFactory
argument_list|)
expr_stmt|;
name|Overseer
name|overseer
init|=
operator|new
name|Overseer
argument_list|(
name|httpShardHandlerFactory
operator|.
name|getShardHandler
argument_list|()
argument_list|,
name|updateShardHandler
argument_list|,
literal|"/admin/cores"
argument_list|,
name|reader
argument_list|,
literal|null
argument_list|,
operator|new
name|CloudConfig
operator|.
name|CloudConfigBuilder
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|8983
argument_list|,
literal|""
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|overseers
operator|.
name|add
argument_list|(
name|overseer
argument_list|)
expr_stmt|;
name|ElectionContext
name|ec
init|=
operator|new
name|OverseerElectionContext
argument_list|(
name|zkClient
argument_list|,
name|overseer
argument_list|,
name|server
operator|.
name|getZkAddress
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"/"
argument_list|,
literal|"_"
argument_list|)
argument_list|)
decl_stmt|;
name|overseerElector
operator|.
name|setup
argument_list|(
name|ec
argument_list|)
expr_stmt|;
name|overseerElector
operator|.
name|joinElection
argument_list|(
name|ec
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mockController
operator|.
name|publishState
argument_list|(
name|collection
argument_list|,
literal|"core1"
argument_list|,
literal|"core_node1"
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|overseer
operator|.
name|getStats
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|overseer
operator|.
name|getStats
argument_list|()
operator|.
name|getSuccessCount
argument_list|(
name|OverseerAction
operator|.
name|STATE
operator|.
name|toLower
argument_list|()
argument_list|)
operator|)
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// shut it down
name|overseer
operator|.
name|close
argument_list|()
expr_stmt|;
name|ec
operator|.
name|cancelElection
argument_list|()
expr_stmt|;
comment|// start it again
name|overseerElector
operator|.
name|setup
argument_list|(
name|ec
argument_list|)
expr_stmt|;
name|overseerElector
operator|.
name|joinElection
argument_list|(
name|ec
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|overseer
operator|.
name|getStats
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
name|overseer
operator|.
name|getStats
argument_list|()
operator|.
name|getSuccessCount
argument_list|(
name|OverseerAction
operator|.
name|STATE
operator|.
name|toLower
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|mockController
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_decl_stmt
DECL|field|killCounter
specifier|private
name|AtomicInteger
name|killCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|OverseerRestarter
specifier|private
class|class
name|OverseerRestarter
implements|implements
name|Runnable
block|{
DECL|field|overseerClient
name|SolrZkClient
name|overseerClient
init|=
literal|null
decl_stmt|;
DECL|field|run
specifier|public
specifier|volatile
name|boolean
name|run
init|=
literal|true
decl_stmt|;
DECL|field|zkAddress
specifier|private
specifier|final
name|String
name|zkAddress
decl_stmt|;
DECL|method|OverseerRestarter
specifier|public
name|OverseerRestarter
parameter_list|(
name|String
name|zkAddress
parameter_list|)
block|{
name|this
operator|.
name|zkAddress
operator|=
name|zkAddress
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|overseerClient
operator|=
name|electNewOverseer
argument_list|(
name|zkAddress
argument_list|)
expr_stmt|;
while|while
condition|(
name|run
condition|)
block|{
if|if
condition|(
name|killCounter
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|killCounter
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Killing overseer."
argument_list|)
expr_stmt|;
name|overseerClient
operator|.
name|close
argument_list|()
expr_stmt|;
name|overseerClient
operator|=
name|electNewOverseer
argument_list|(
name|zkAddress
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// e.printStackTrace();
block|}
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// e.printStackTrace();
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// ignore
block|}
finally|finally
block|{
if|if
condition|(
name|overseerClient
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|overseerClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
block|}
end_class
begin_function
annotation|@
name|Test
DECL|method|testShardLeaderChange
specifier|public
name|void
name|testShardLeaderChange
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|zkDir
init|=
name|createTempDir
argument_list|(
literal|"zkData"
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
specifier|final
name|ZkTestServer
name|server
init|=
operator|new
name|ZkTestServer
argument_list|(
name|zkDir
argument_list|)
decl_stmt|;
name|SolrZkClient
name|controllerClient
init|=
literal|null
decl_stmt|;
name|ZkStateReader
name|reader
init|=
literal|null
decl_stmt|;
name|MockZKController
name|mockController
init|=
literal|null
decl_stmt|;
name|MockZKController
name|mockController2
init|=
literal|null
decl_stmt|;
name|OverseerRestarter
name|killer
init|=
literal|null
decl_stmt|;
name|Thread
name|killerThread
init|=
literal|null
decl_stmt|;
try|try
block|{
name|server
operator|.
name|run
argument_list|()
expr_stmt|;
name|controllerClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|tryCleanSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|makeSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|ZkController
operator|.
name|createClusterZkNodes
argument_list|(
name|controllerClient
argument_list|)
expr_stmt|;
name|killer
operator|=
operator|new
name|OverseerRestarter
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|)
expr_stmt|;
name|killerThread
operator|=
operator|new
name|Thread
argument_list|(
name|killer
argument_list|)
expr_stmt|;
name|killerThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|reader
operator|=
operator|new
name|ZkStateReader
argument_list|(
name|controllerClient
argument_list|)
expr_stmt|;
name|reader
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atLeast
argument_list|(
literal|4
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|killCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
comment|//for each round allow 1 kill
name|mockController
operator|=
operator|new
name|MockZKController
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
literal|"node1"
argument_list|)
expr_stmt|;
name|mockController
operator|.
name|publishState
argument_list|(
name|collection
argument_list|,
literal|"core1"
argument_list|,
literal|"node1"
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|mockController2
operator|!=
literal|null
condition|)
block|{
name|mockController2
operator|.
name|close
argument_list|()
expr_stmt|;
name|mockController2
operator|=
literal|null
expr_stmt|;
block|}
name|mockController
operator|.
name|publishState
argument_list|(
name|collection
argument_list|,
literal|"core1"
argument_list|,
literal|"node1"
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|RECOVERING
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mockController2
operator|=
operator|new
name|MockZKController
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
literal|"node2"
argument_list|)
expr_stmt|;
name|mockController
operator|.
name|publishState
argument_list|(
name|collection
argument_list|,
literal|"core1"
argument_list|,
literal|"node1"
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyShardLeader
argument_list|(
name|reader
argument_list|,
name|collection
argument_list|,
literal|"shard1"
argument_list|,
literal|"core1"
argument_list|)
expr_stmt|;
name|mockController2
operator|.
name|publishState
argument_list|(
name|collection
argument_list|,
literal|"core4"
argument_list|,
literal|"node2"
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mockController
operator|.
name|close
argument_list|()
expr_stmt|;
name|mockController
operator|=
literal|null
expr_stmt|;
name|verifyShardLeader
argument_list|(
name|reader
argument_list|,
name|collection
argument_list|,
literal|"shard1"
argument_list|,
literal|"core4"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|killer
operator|!=
literal|null
condition|)
block|{
name|killer
operator|.
name|run
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|killerThread
operator|!=
literal|null
condition|)
block|{
name|killerThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
name|close
argument_list|(
name|mockController
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|mockController2
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|controllerClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
annotation|@
name|Test
DECL|method|testDoubleAssignment
specifier|public
name|void
name|testDoubleAssignment
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|zkDir
init|=
name|createTempDir
argument_list|(
literal|"zkData"
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|ZkTestServer
name|server
init|=
operator|new
name|ZkTestServer
argument_list|(
name|zkDir
argument_list|)
decl_stmt|;
name|SolrZkClient
name|controllerClient
init|=
literal|null
decl_stmt|;
name|SolrZkClient
name|overseerClient
init|=
literal|null
decl_stmt|;
name|ZkStateReader
name|reader
init|=
literal|null
decl_stmt|;
name|MockZKController
name|mockController
init|=
literal|null
decl_stmt|;
try|try
block|{
name|server
operator|.
name|run
argument_list|()
expr_stmt|;
name|controllerClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|tryCleanSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|makeSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|ZkController
operator|.
name|createClusterZkNodes
argument_list|(
name|controllerClient
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|ZkStateReader
argument_list|(
name|controllerClient
argument_list|)
expr_stmt|;
name|reader
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
name|mockController
operator|=
operator|new
name|MockZKController
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
literal|"node1"
argument_list|)
expr_stmt|;
name|overseerClient
operator|=
name|electNewOverseer
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|)
expr_stmt|;
name|mockController
operator|.
name|publishState
argument_list|(
name|collection
argument_list|,
literal|"core1"
argument_list|,
literal|"core_node1"
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|RECOVERING
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|waitForCollections
argument_list|(
name|reader
argument_list|,
literal|"collection1"
argument_list|)
expr_stmt|;
name|verifyReplicaStatus
argument_list|(
name|reader
argument_list|,
name|collection
argument_list|,
literal|"shard1"
argument_list|,
literal|"core_node1"
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|RECOVERING
argument_list|)
expr_stmt|;
name|mockController
operator|.
name|close
argument_list|()
expr_stmt|;
name|int
name|version
init|=
name|getClusterStateVersion
argument_list|(
name|controllerClient
argument_list|)
decl_stmt|;
name|mockController
operator|=
operator|new
name|MockZKController
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
literal|"node1"
argument_list|)
expr_stmt|;
name|mockController
operator|.
name|publishState
argument_list|(
name|collection
argument_list|,
literal|"core1"
argument_list|,
literal|"core_node1"
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|RECOVERING
argument_list|,
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|version
operator|==
name|reader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getZkClusterStateVersion
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|ClusterState
name|state
init|=
name|reader
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|int
name|numFound
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|DocCollection
argument_list|>
name|collectionsMap
init|=
name|state
operator|.
name|getCollectionsMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|DocCollection
argument_list|>
name|entry
range|:
name|collectionsMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|DocCollection
name|collection
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Slice
name|slice
range|:
name|collection
operator|.
name|getSlices
argument_list|()
control|)
block|{
if|if
condition|(
name|slice
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"core_node1"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|numFound
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Shard was found more than once in ClusterState"
argument_list|,
literal|1
argument_list|,
name|numFound
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|overseerClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|mockController
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|controllerClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
annotation|@
name|Test
DECL|method|testPlaceholders
specifier|public
name|void
name|testPlaceholders
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|zkDir
init|=
name|createTempDir
argument_list|(
literal|"zkData"
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|ZkTestServer
name|server
init|=
operator|new
name|ZkTestServer
argument_list|(
name|zkDir
argument_list|)
decl_stmt|;
name|SolrZkClient
name|controllerClient
init|=
literal|null
decl_stmt|;
name|SolrZkClient
name|overseerClient
init|=
literal|null
decl_stmt|;
name|ZkStateReader
name|reader
init|=
literal|null
decl_stmt|;
name|MockZKController
name|mockController
init|=
literal|null
decl_stmt|;
try|try
block|{
name|server
operator|.
name|run
argument_list|()
expr_stmt|;
name|controllerClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|tryCleanSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|makeSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|ZkController
operator|.
name|createClusterZkNodes
argument_list|(
name|controllerClient
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|ZkStateReader
argument_list|(
name|controllerClient
argument_list|)
expr_stmt|;
name|reader
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
name|mockController
operator|=
operator|new
name|MockZKController
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
literal|"node1"
argument_list|)
expr_stmt|;
name|overseerClient
operator|=
name|electNewOverseer
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|)
expr_stmt|;
name|mockController
operator|.
name|publishState
argument_list|(
name|collection
argument_list|,
literal|"core1"
argument_list|,
literal|"node1"
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|RECOVERING
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|waitForCollections
argument_list|(
name|reader
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Slicecount does not match"
argument_list|,
literal|12
argument_list|,
name|reader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlices
argument_list|(
name|collection
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|overseerClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|mockController
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|controllerClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
annotation|@
name|Test
annotation|@
name|Ignore
DECL|method|testPerformance
specifier|public
name|void
name|testPerformance
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|zkDir
init|=
name|createTempDir
argument_list|(
literal|"OverseerTest.testPerformance"
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|ZkTestServer
name|server
init|=
operator|new
name|ZkTestServer
argument_list|(
name|zkDir
argument_list|)
decl_stmt|;
name|SolrZkClient
name|controllerClient
init|=
literal|null
decl_stmt|;
name|SolrZkClient
name|overseerClient
init|=
literal|null
decl_stmt|;
name|ZkStateReader
name|reader
init|=
literal|null
decl_stmt|;
name|MockZKController
name|mockController
init|=
literal|null
decl_stmt|;
try|try
block|{
name|server
operator|.
name|run
argument_list|()
expr_stmt|;
name|controllerClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|tryCleanSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|makeSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|ZkController
operator|.
name|createClusterZkNodes
argument_list|(
name|controllerClient
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|ZkStateReader
argument_list|(
name|controllerClient
argument_list|)
expr_stmt|;
name|reader
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
name|mockController
operator|=
operator|new
name|MockZKController
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
literal|"node1"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|MAX_COLLECTIONS
init|=
literal|10
decl_stmt|,
name|MAX_CORES
init|=
literal|10
decl_stmt|,
name|MAX_STATE_CHANGES
init|=
literal|20000
decl_stmt|,
name|STATE_FORMAT
init|=
literal|2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_COLLECTIONS
condition|;
name|i
operator|++
control|)
block|{
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|CREATE
operator|.
name|toLower
argument_list|()
argument_list|,
literal|"name"
argument_list|,
literal|"perf"
operator|+
name|i
argument_list|,
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|,
literal|"1"
argument_list|,
literal|"stateFormat"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|STATE_FORMAT
argument_list|)
argument_list|,
name|ZkStateReader
operator|.
name|REPLICATION_FACTOR
argument_list|,
literal|"1"
argument_list|,
name|ZkStateReader
operator|.
name|MAX_SHARDS_PER_NODE
argument_list|,
literal|"1"
argument_list|)
decl_stmt|;
name|DistributedQueue
name|q
init|=
name|Overseer
operator|.
name|getStateUpdateQueue
argument_list|(
name|controllerClient
argument_list|)
decl_stmt|;
name|q
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|controllerClient
operator|.
name|makePath
argument_list|(
literal|"/collections/perf"
operator|+
name|i
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|j
init|=
literal|0
init|,
name|k
init|=
literal|0
init|;
name|i
operator|<
name|MAX_STATE_CHANGES
condition|;
name|i
operator|++
operator|,
name|j
operator|++
operator|,
name|k
operator|++
control|)
block|{
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|STATE
operator|.
name|toLower
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|RECOVERING
operator|.
name|toString
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
literal|"node1"
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
literal|"core"
operator|+
name|k
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NODE_NAME_PROP
argument_list|,
literal|"node1"
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
literal|"perf"
operator|+
name|j
argument_list|,
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|,
literal|"1"
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
literal|"http://"
operator|+
literal|"node1"
operator|+
literal|"/solr/"
argument_list|)
decl_stmt|;
name|DistributedQueue
name|q
init|=
name|Overseer
operator|.
name|getStateUpdateQueue
argument_list|(
name|controllerClient
argument_list|)
decl_stmt|;
name|q
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|>=
name|MAX_COLLECTIONS
operator|-
literal|1
condition|)
name|j
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|k
operator|>=
name|MAX_CORES
operator|-
literal|1
condition|)
name|k
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
operator|&&
name|i
operator|%
literal|100
operator|==
literal|0
condition|)
name|log
operator|.
name|info
argument_list|(
literal|"Published {} items"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
comment|// let's publish a sentinel collection which we'll use to wait for overseer to complete operations
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|STATE
operator|.
name|toLower
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
operator|.
name|toString
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
literal|"node1"
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
literal|"core1"
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NODE_NAME_PROP
argument_list|,
literal|"node1"
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
literal|"perf_sentinel"
argument_list|,
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|,
literal|"1"
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
literal|"http://"
operator|+
literal|"node1"
operator|+
literal|"/solr/"
argument_list|)
decl_stmt|;
name|DistributedQueue
name|q
init|=
name|Overseer
operator|.
name|getStateUpdateQueue
argument_list|(
name|controllerClient
argument_list|)
decl_stmt|;
name|q
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|Timer
name|t
init|=
operator|new
name|Timer
argument_list|()
decl_stmt|;
name|TimerContext
name|context
init|=
name|t
operator|.
name|time
argument_list|()
decl_stmt|;
try|try
block|{
name|overseerClient
operator|=
name|electNewOverseer
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|overseers
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|ClusterState
name|state
init|=
name|reader
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|hasCollection
argument_list|(
literal|"perf_sentinel"
argument_list|)
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Overseer loop finished processing: "
argument_list|)
expr_stmt|;
name|printTimingStats
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|Overseer
name|overseer
init|=
name|overseers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Overseer
operator|.
name|Stats
name|stats
init|=
name|overseer
operator|.
name|getStats
argument_list|()
decl_stmt|;
name|String
index|[]
name|interestingOps
init|=
block|{
literal|"state"
block|,
literal|"update_state"
block|,
literal|"am_i_leader"
block|,
literal|""
block|}
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|interestingOps
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Overseer
operator|.
name|Stat
argument_list|>
name|entry
range|:
name|stats
operator|.
name|getStats
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|op
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|interestingOps
argument_list|,
name|op
argument_list|)
operator|<
literal|0
condition|)
continue|continue;
name|Overseer
operator|.
name|Stat
name|stat
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"op: {}, success: {}, failure: {}"
argument_list|,
name|op
argument_list|,
name|stat
operator|.
name|success
operator|.
name|get
argument_list|()
argument_list|,
name|stat
operator|.
name|errors
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Timer
name|timer
init|=
name|stat
operator|.
name|requestTime
decl_stmt|;
name|printTimingStats
argument_list|(
name|timer
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|close
argument_list|(
name|overseerClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|mockController
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|controllerClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|method|printTimingStats
specifier|private
name|void
name|printTimingStats
parameter_list|(
name|Timer
name|timer
parameter_list|)
block|{
name|Snapshot
name|snapshot
init|=
name|timer
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"\t totalTime: {}"
argument_list|,
name|timer
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"\t avgRequestsPerMinute: {}"
argument_list|,
name|timer
operator|.
name|getMeanRate
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"\t 5minRateRequestsPerMinute: {}"
argument_list|,
name|timer
operator|.
name|getFiveMinuteRate
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"\t 15minRateRequestsPerMinute: {}"
argument_list|,
name|timer
operator|.
name|getFifteenMinuteRate
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"\t avgTimePerRequest: {}"
argument_list|,
name|timer
operator|.
name|getMean
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"\t medianRequestTime: {}"
argument_list|,
name|snapshot
operator|.
name|getMedian
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"\t 75thPctlRequestTime: {}"
argument_list|,
name|snapshot
operator|.
name|get75thPercentile
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"\t 95thPctlRequestTime: {}"
argument_list|,
name|snapshot
operator|.
name|get95thPercentile
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"\t 99thPctlRequestTime: {}"
argument_list|,
name|snapshot
operator|.
name|get99thPercentile
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"\t 999thPctlRequestTime: {}"
argument_list|,
name|snapshot
operator|.
name|get999thPercentile
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|method|close
specifier|private
name|void
name|close
parameter_list|(
name|MockZKController
name|mockController
parameter_list|)
block|{
if|if
condition|(
name|mockController
operator|!=
literal|null
condition|)
block|{
name|mockController
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
annotation|@
name|Test
DECL|method|testReplay
specifier|public
name|void
name|testReplay
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|zkDir
init|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"zookeeper/server1/data"
decl_stmt|;
name|ZkTestServer
name|server
init|=
operator|new
name|ZkTestServer
argument_list|(
name|zkDir
argument_list|)
decl_stmt|;
name|SolrZkClient
name|zkClient
init|=
literal|null
decl_stmt|;
name|SolrZkClient
name|overseerClient
init|=
literal|null
decl_stmt|;
name|ZkStateReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|server
operator|.
name|run
argument_list|()
expr_stmt|;
name|zkClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|tryCleanSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|makeSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|ZkController
operator|.
name|createClusterZkNodes
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|ZkStateReader
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|reader
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
comment|//prepopulate work queue with some items to emulate previous overseer died before persisting state
name|DistributedQueue
name|queue
init|=
name|Overseer
operator|.
name|getInternalWorkQueue
argument_list|(
name|zkClient
argument_list|,
operator|new
name|Overseer
operator|.
name|Stats
argument_list|()
argument_list|)
decl_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|STATE
operator|.
name|toLower
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
literal|"http://127.0.0.1/solr"
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
literal|"node1"
argument_list|,
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
literal|"s1"
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collection
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
literal|"core1"
argument_list|,
name|ZkStateReader
operator|.
name|ROLES_PROP
argument_list|,
literal|""
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|RECOVERING
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|queue
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
literal|"state"
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
literal|"http://127.0.0.1/solr"
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
literal|"node1"
argument_list|,
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
literal|"s1"
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collection
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
literal|"core2"
argument_list|,
name|ZkStateReader
operator|.
name|ROLES_PROP
argument_list|,
literal|""
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|RECOVERING
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|overseerClient
operator|=
name|electNewOverseer
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|)
expr_stmt|;
comment|//submit to proper queue
name|queue
operator|=
name|Overseer
operator|.
name|getStateUpdateQueue
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|m
operator|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|STATE
operator|.
name|toLower
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
literal|"http://127.0.0.1/solr"
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
literal|"node1"
argument_list|,
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
literal|"s1"
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collection
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
literal|"core3"
argument_list|,
name|ZkStateReader
operator|.
name|ROLES_PROP
argument_list|,
literal|""
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|RECOVERING
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|Slice
name|s
init|=
name|reader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
literal|"s1"
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
operator|&&
name|s
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|3
condition|)
break|break;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|reader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
literal|"s1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|reader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
literal|"s1"
argument_list|)
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|overseerClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
annotation|@
name|Test
DECL|method|testExternalClusterStateChangeBehavior
specifier|public
name|void
name|testExternalClusterStateChangeBehavior
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|zkDir
init|=
name|createTempDir
argument_list|(
literal|"testExternalClusterStateChangeBehavior"
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|ZkTestServer
name|server
init|=
operator|new
name|ZkTestServer
argument_list|(
name|zkDir
argument_list|)
decl_stmt|;
name|SolrZkClient
name|zkClient
init|=
literal|null
decl_stmt|;
name|ZkStateReader
name|reader
init|=
literal|null
decl_stmt|;
name|SolrZkClient
name|overseerClient
init|=
literal|null
decl_stmt|;
try|try
block|{
name|server
operator|.
name|run
argument_list|()
expr_stmt|;
name|zkClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|tryCleanSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|makeSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|ZkController
operator|.
name|createClusterZkNodes
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|create
argument_list|(
literal|"/collections/test"
argument_list|,
literal|null
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|ZkStateReader
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|reader
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
name|overseerClient
operator|=
name|electNewOverseer
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|)
expr_stmt|;
name|DistributedQueue
name|q
init|=
name|Overseer
operator|.
name|getStateUpdateQueue
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|STATE
operator|.
name|toLower
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
literal|"http://127.0.0.1/solr"
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
literal|"node1"
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
literal|"c1"
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
literal|"core1"
argument_list|,
name|ZkStateReader
operator|.
name|ROLES_PROP
argument_list|,
literal|""
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|DOWN
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|waitForCollections
argument_list|(
name|reader
argument_list|,
literal|"c1"
argument_list|)
expr_stmt|;
name|verifyReplicaStatus
argument_list|(
name|reader
argument_list|,
literal|"c1"
argument_list|,
literal|"shard1"
argument_list|,
literal|"core_node1"
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|DOWN
argument_list|)
expr_stmt|;
name|m
operator|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|STATE
operator|.
name|toLower
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
literal|"http://127.0.0.1/solr"
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
literal|"node1"
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
literal|"c1"
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
literal|"core1"
argument_list|,
name|ZkStateReader
operator|.
name|ROLES_PROP
argument_list|,
literal|""
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|RECOVERING
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|STATE
operator|.
name|toLower
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
literal|"http://127.0.0.1/solr"
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
literal|"node1"
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
literal|"c1"
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
literal|"core1"
argument_list|,
name|ZkStateReader
operator|.
name|ROLES_PROP
argument_list|,
literal|""
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|zkClient
operator|.
name|getData
argument_list|(
literal|"/clusterstate.json"
argument_list|,
literal|null
argument_list|,
name|stat
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Simulate an external modification
name|zkClient
operator|.
name|setData
argument_list|(
literal|"/clusterstate.json"
argument_list|,
name|data
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|m
operator|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|CREATE
operator|.
name|toLower
argument_list|()
argument_list|,
literal|"name"
argument_list|,
literal|"test"
argument_list|,
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|,
literal|"1"
argument_list|,
name|ZkStateReader
operator|.
name|REPLICATION_FACTOR
argument_list|,
literal|"1"
argument_list|,
name|DocCollection
operator|.
name|STATE_FORMAT
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|q
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|CREATESHARD
operator|.
name|toLower
argument_list|()
argument_list|,
literal|"collection"
argument_list|,
literal|"test"
argument_list|,
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
literal|"x"
argument_list|,
name|ZkStateReader
operator|.
name|REPLICATION_FACTOR
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|q
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|ADDREPLICA
operator|.
name|toLower
argument_list|()
argument_list|,
literal|"collection"
argument_list|,
literal|"test"
argument_list|,
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
literal|"x"
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
literal|"http://127.0.0.1/solr"
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
literal|"node1"
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
literal|"core1"
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|DOWN
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|waitForCollections
argument_list|(
name|reader
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|verifyReplicaStatus
argument_list|(
name|reader
argument_list|,
literal|"test"
argument_list|,
literal|"x"
argument_list|,
literal|"core_node1"
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|DOWN
argument_list|)
expr_stmt|;
name|waitForCollections
argument_list|(
name|reader
argument_list|,
literal|"c1"
argument_list|)
expr_stmt|;
name|verifyReplicaStatus
argument_list|(
name|reader
argument_list|,
literal|"c1"
argument_list|,
literal|"shard1"
argument_list|,
literal|"core_node1"
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|overseerClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|method|close
specifier|private
name|void
name|close
parameter_list|(
name|ZkStateReader
name|reader
parameter_list|)
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|method|close
specifier|private
name|void
name|close
parameter_list|(
name|SolrZkClient
name|client
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|method|getClusterStateVersion
specifier|private
name|int
name|getClusterStateVersion
parameter_list|(
name|SolrZkClient
name|controllerClient
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
name|controllerClient
operator|.
name|exists
argument_list|(
name|ZkStateReader
operator|.
name|CLUSTER_STATE
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
operator|.
name|getVersion
argument_list|()
return|;
block|}
end_function
begin_function
DECL|method|electNewOverseer
specifier|private
name|SolrZkClient
name|electNewOverseer
parameter_list|(
name|String
name|address
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
throws|,
name|IOException
throws|,
name|KeeperException
throws|,
name|ParserConfigurationException
throws|,
name|SAXException
block|{
name|SolrZkClient
name|zkClient
init|=
operator|new
name|SolrZkClient
argument_list|(
name|address
argument_list|,
name|TIMEOUT
argument_list|)
decl_stmt|;
name|ZkStateReader
name|reader
init|=
operator|new
name|ZkStateReader
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
name|readers
operator|.
name|add
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|LeaderElector
name|overseerElector
init|=
operator|new
name|LeaderElector
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
if|if
condition|(
name|overseers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|overseers
operator|.
name|get
argument_list|(
name|overseers
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|overseers
operator|.
name|get
argument_list|(
name|overseers
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getZkClient
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|UpdateShardHandler
name|updateShardHandler
init|=
operator|new
name|UpdateShardHandler
argument_list|(
name|UpdateShardHandlerConfig
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|updateShardHandlers
operator|.
name|add
argument_list|(
name|updateShardHandler
argument_list|)
expr_stmt|;
name|HttpShardHandlerFactory
name|httpShardHandlerFactory
init|=
operator|new
name|HttpShardHandlerFactory
argument_list|()
decl_stmt|;
name|httpShardHandlerFactorys
operator|.
name|add
argument_list|(
name|httpShardHandlerFactory
argument_list|)
expr_stmt|;
name|Overseer
name|overseer
init|=
operator|new
name|Overseer
argument_list|(
name|httpShardHandlerFactory
operator|.
name|getShardHandler
argument_list|()
argument_list|,
name|updateShardHandler
argument_list|,
literal|"/admin/cores"
argument_list|,
name|reader
argument_list|,
literal|null
argument_list|,
operator|new
name|CloudConfig
operator|.
name|CloudConfigBuilder
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|8983
argument_list|,
literal|""
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|overseers
operator|.
name|add
argument_list|(
name|overseer
argument_list|)
expr_stmt|;
name|ElectionContext
name|ec
init|=
operator|new
name|OverseerElectionContext
argument_list|(
name|zkClient
argument_list|,
name|overseer
argument_list|,
name|address
operator|.
name|replaceAll
argument_list|(
literal|"/"
argument_list|,
literal|"_"
argument_list|)
argument_list|)
decl_stmt|;
name|overseerElector
operator|.
name|setup
argument_list|(
name|ec
argument_list|)
expr_stmt|;
name|overseerElector
operator|.
name|joinElection
argument_list|(
name|ec
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|zkClient
return|;
block|}
end_function
begin_function
annotation|@
name|Test
DECL|method|testRemovalOfLastReplica
specifier|public
name|void
name|testRemovalOfLastReplica
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Integer
name|numReplicas
init|=
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
decl_stmt|;
comment|// between 1 and 4 replicas
specifier|final
name|Integer
name|numShards
init|=
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
decl_stmt|;
comment|// between 1 and 4 shards
specifier|final
name|String
name|zkDir
init|=
name|createTempDir
argument_list|(
literal|"zkData"
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
specifier|final
name|ZkTestServer
name|server
init|=
operator|new
name|ZkTestServer
argument_list|(
name|zkDir
argument_list|)
decl_stmt|;
name|SolrZkClient
name|zkClient
init|=
literal|null
decl_stmt|;
name|ZkStateReader
name|zkStateReader
init|=
literal|null
decl_stmt|;
name|SolrZkClient
name|overseerClient
init|=
literal|null
decl_stmt|;
try|try
block|{
name|server
operator|.
name|run
argument_list|()
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|tryCleanSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|makeSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|zkClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|ZkController
operator|.
name|createClusterZkNodes
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|zkStateReader
operator|=
operator|new
name|ZkStateReader
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|zkStateReader
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
name|overseerClient
operator|=
name|electNewOverseer
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|)
expr_stmt|;
name|DistributedQueue
name|q
init|=
name|Overseer
operator|.
name|getStateUpdateQueue
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
comment|// create collection
block|{
specifier|final
name|Integer
name|maxShardsPerNode
init|=
name|numReplicas
operator|*
name|numShards
decl_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|CREATE
operator|.
name|toLower
argument_list|()
argument_list|,
literal|"name"
argument_list|,
name|collection
argument_list|,
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|,
name|numShards
operator|.
name|toString
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|REPLICATION_FACTOR
argument_list|,
literal|"1"
argument_list|,
name|ZkStateReader
operator|.
name|MAX_SHARDS_PER_NODE
argument_list|,
name|maxShardsPerNode
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|waitForCollections
argument_list|(
name|zkStateReader
argument_list|,
name|collection
argument_list|)
expr_stmt|;
comment|// create nodes with state recovering
for|for
control|(
name|int
name|rr
init|=
literal|1
init|;
name|rr
operator|<=
name|numReplicas
condition|;
operator|++
name|rr
control|)
block|{
for|for
control|(
name|int
name|ss
init|=
literal|1
init|;
name|ss
operator|<=
name|numShards
condition|;
operator|++
name|ss
control|)
block|{
specifier|final
name|int
name|N
init|=
operator|(
name|numReplicas
operator|-
name|rr
operator|)
operator|*
name|numShards
operator|+
name|ss
decl_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|STATE
operator|.
name|toLower
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
literal|"http://127.0.0.1/solr"
argument_list|,
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
literal|"shard"
operator|+
name|ss
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
literal|"node"
operator|+
name|N
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collection
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
literal|"core"
operator|+
name|N
argument_list|,
name|ZkStateReader
operator|.
name|ROLES_PROP
argument_list|,
literal|""
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|RECOVERING
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// verify recovering
for|for
control|(
name|int
name|rr
init|=
literal|1
init|;
name|rr
operator|<=
name|numReplicas
condition|;
operator|++
name|rr
control|)
block|{
for|for
control|(
name|int
name|ss
init|=
literal|1
init|;
name|ss
operator|<=
name|numShards
condition|;
operator|++
name|ss
control|)
block|{
specifier|final
name|int
name|N
init|=
operator|(
name|numReplicas
operator|-
name|rr
operator|)
operator|*
name|numShards
operator|+
name|ss
decl_stmt|;
name|verifyReplicaStatus
argument_list|(
name|zkStateReader
argument_list|,
name|collection
argument_list|,
literal|"shard"
operator|+
name|ss
argument_list|,
literal|"core_node"
operator|+
name|N
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|RECOVERING
argument_list|)
expr_stmt|;
block|}
block|}
comment|// publish node states (active)
for|for
control|(
name|int
name|rr
init|=
literal|1
init|;
name|rr
operator|<=
name|numReplicas
condition|;
operator|++
name|rr
control|)
block|{
for|for
control|(
name|int
name|ss
init|=
literal|1
init|;
name|ss
operator|<=
name|numShards
condition|;
operator|++
name|ss
control|)
block|{
specifier|final
name|int
name|N
init|=
operator|(
name|numReplicas
operator|-
name|rr
operator|)
operator|*
name|numShards
operator|+
name|ss
decl_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|STATE
operator|.
name|toLower
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
literal|"http://127.0.0.1/solr"
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
literal|"node"
operator|+
name|N
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collection
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
literal|"core"
operator|+
name|N
argument_list|,
name|ZkStateReader
operator|.
name|ROLES_PROP
argument_list|,
literal|""
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// verify active
for|for
control|(
name|int
name|rr
init|=
literal|1
init|;
name|rr
operator|<=
name|numReplicas
condition|;
operator|++
name|rr
control|)
block|{
for|for
control|(
name|int
name|ss
init|=
literal|1
init|;
name|ss
operator|<=
name|numShards
condition|;
operator|++
name|ss
control|)
block|{
specifier|final
name|int
name|N
init|=
operator|(
name|numReplicas
operator|-
name|rr
operator|)
operator|*
name|numShards
operator|+
name|ss
decl_stmt|;
name|verifyReplicaStatus
argument_list|(
name|zkStateReader
argument_list|,
name|collection
argument_list|,
literal|"shard"
operator|+
name|ss
argument_list|,
literal|"core_node"
operator|+
name|N
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
block|}
block|}
comment|// delete node
for|for
control|(
name|int
name|rr
init|=
literal|1
init|;
name|rr
operator|<=
name|numReplicas
condition|;
operator|++
name|rr
control|)
block|{
for|for
control|(
name|int
name|ss
init|=
literal|1
init|;
name|ss
operator|<=
name|numShards
condition|;
operator|++
name|ss
control|)
block|{
specifier|final
name|int
name|N
init|=
operator|(
name|numReplicas
operator|-
name|rr
operator|)
operator|*
name|numShards
operator|+
name|ss
decl_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|DELETECORE
operator|.
name|toLower
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collection
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NODE_NAME_PROP
argument_list|,
literal|"core_node"
operator|+
name|N
argument_list|)
decl_stmt|;
name|q
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|int
name|iterationsLeft
init|=
literal|100
decl_stmt|;
while|while
condition|(
name|iterationsLeft
operator|--
operator|>
literal|0
condition|)
block|{
specifier|final
name|Slice
name|slice
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
literal|"shard"
operator|+
name|ss
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|slice
operator|||
literal|null
operator|==
name|slice
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"core_node"
operator|+
name|N
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|VERBOSE
condition|)
name|log
operator|.
name|info
argument_list|(
literal|"still seeing {} shard{} core_node{}, rechecking in 50ms ({} iterations left)"
argument_list|,
name|collection
argument_list|,
name|ss
argument_list|,
name|N
argument_list|,
name|iterationsLeft
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|DocCollection
name|docCollection
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"found no "
operator|+
name|collection
argument_list|,
operator|(
literal|null
operator|!=
name|docCollection
operator|)
argument_list|)
expr_stmt|;
specifier|final
name|Slice
name|slice
init|=
name|docCollection
operator|.
name|getSlice
argument_list|(
literal|"shard"
operator|+
name|ss
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"found no "
operator|+
name|collection
operator|+
literal|" shard"
operator|+
name|ss
operator|+
literal|" slice after removal of replica "
operator|+
name|rr
operator|+
literal|" of "
operator|+
name|numReplicas
argument_list|,
operator|(
literal|null
operator|!=
name|slice
operator|)
argument_list|)
expr_stmt|;
specifier|final
name|Collection
argument_list|<
name|Replica
argument_list|>
name|replicas
init|=
name|slice
operator|.
name|getReplicas
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of "
operator|+
name|collection
operator|+
literal|" shard"
operator|+
name|ss
operator|+
literal|" replicas left, replicas="
operator|+
name|replicas
argument_list|,
name|numReplicas
operator|-
name|rr
argument_list|,
name|replicas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|close
argument_list|(
name|overseerClient
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|zkStateReader
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_function
unit|}
end_unit
