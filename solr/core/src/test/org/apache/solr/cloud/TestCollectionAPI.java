begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ShardParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_class
DECL|class|TestCollectionAPI
specifier|public
class|class
name|TestCollectionAPI
extends|extends
name|AbstractFullDistribZkTestBase
block|{
DECL|field|COLLECTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|COLLECTION_NAME
init|=
literal|"testcollection"
decl_stmt|;
DECL|field|COLLECTION_NAME1
specifier|public
specifier|static
specifier|final
name|String
name|COLLECTION_NAME1
init|=
literal|"testcollection1"
decl_stmt|;
DECL|method|TestCollectionAPI
specifier|public
name|TestCollectionAPI
parameter_list|()
block|{
name|schemaString
operator|=
literal|"schema15.xml"
expr_stmt|;
comment|// we need a string id
block|}
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|fixShardCount
operator|=
literal|true
expr_stmt|;
name|sliceCount
operator|=
literal|2
expr_stmt|;
name|shardCount
operator|=
literal|2
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doTest
specifier|public
name|void
name|doTest
parameter_list|()
throws|throws
name|Exception
block|{
name|CloudSolrServer
name|client
init|=
name|createCloudClient
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|createCollection
argument_list|(
literal|null
argument_list|,
name|COLLECTION_NAME
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|client
argument_list|,
literal|null
argument_list|,
literal|"conf1"
argument_list|)
expr_stmt|;
name|createCollection
argument_list|(
literal|null
argument_list|,
name|COLLECTION_NAME1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|client
argument_list|,
literal|null
argument_list|,
literal|"conf1"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|//remove collections
name|client
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|waitForCollection
argument_list|(
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
name|COLLECTION_NAME
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|waitForCollection
argument_list|(
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
name|COLLECTION_NAME1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|waitForRecoveriesToFinish
argument_list|(
name|COLLECTION_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|waitForRecoveriesToFinish
argument_list|(
name|COLLECTION_NAME1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|listCollection
argument_list|()
expr_stmt|;
name|clusterStatusNoCollection
argument_list|()
expr_stmt|;
name|clusterStatusWithCollection
argument_list|()
expr_stmt|;
name|clusterStatusWithCollectionAndShard
argument_list|()
expr_stmt|;
name|clusterStatusWithRouteKey
argument_list|()
expr_stmt|;
name|clusterStatusAliasTest
argument_list|()
expr_stmt|;
name|clusterStatusRolesTest
argument_list|()
expr_stmt|;
block|}
DECL|method|clusterStatusWithCollectionAndShard
specifier|private
name|void
name|clusterStatusWithCollectionAndShard
parameter_list|()
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|CloudSolrServer
name|client
init|=
name|createCloudClient
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|CLUSTERSTATUS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"collection"
argument_list|,
name|COLLECTION_NAME
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"shard"
argument_list|,
name|SHARD1
argument_list|)
expr_stmt|;
name|SolrRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|rsp
init|=
name|client
operator|.
name|request
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|cluster
init|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|rsp
operator|.
name|get
argument_list|(
literal|"cluster"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Cluster state should not be null"
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|collections
init|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|cluster
operator|.
name|get
argument_list|(
literal|"collections"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Collections should not be null in cluster state"
argument_list|,
name|collections
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|collections
operator|.
name|get
argument_list|(
name|COLLECTION_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|collections
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|collection
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|collections
operator|.
name|get
argument_list|(
name|COLLECTION_NAME
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|shardStatus
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|collection
operator|.
name|get
argument_list|(
literal|"shards"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|shardStatus
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|selectedShardStatus
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|shardStatus
operator|.
name|get
argument_list|(
name|SHARD1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|selectedShardStatus
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|//remove collections
name|client
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|listCollection
specifier|private
name|void
name|listCollection
parameter_list|()
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|CloudSolrServer
name|client
init|=
name|createCloudClient
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|LIST
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SolrRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|rsp
init|=
name|client
operator|.
name|request
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|collections
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|rsp
operator|.
name|get
argument_list|(
literal|"collections"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"control_collection was not found in list"
argument_list|,
name|collections
operator|.
name|contains
argument_list|(
literal|"control_collection"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|DEFAULT_COLLECTION
operator|+
literal|" was not found in list"
argument_list|,
name|collections
operator|.
name|contains
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|COLLECTION_NAME
operator|+
literal|" was not found in list"
argument_list|,
name|collections
operator|.
name|contains
argument_list|(
name|COLLECTION_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|COLLECTION_NAME1
operator|+
literal|" was not found in list"
argument_list|,
name|collections
operator|.
name|contains
argument_list|(
name|COLLECTION_NAME1
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|//remove collections
name|client
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|clusterStatusNoCollection
specifier|private
name|void
name|clusterStatusNoCollection
parameter_list|()
throws|throws
name|Exception
block|{
name|CloudSolrServer
name|client
init|=
name|createCloudClient
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|CLUSTERSTATUS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SolrRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|rsp
init|=
name|client
operator|.
name|request
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|cluster
init|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|rsp
operator|.
name|get
argument_list|(
literal|"cluster"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Cluster state should not be null"
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|collections
init|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|cluster
operator|.
name|get
argument_list|(
literal|"collections"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Collections should not be null in cluster state"
argument_list|,
name|collections
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|collections
operator|.
name|get
argument_list|(
name|COLLECTION_NAME1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|collections
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|liveNodes
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|cluster
operator|.
name|get
argument_list|(
literal|"live_nodes"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Live nodes should not be null"
argument_list|,
name|liveNodes
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|liveNodes
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|//remove collections
name|client
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|clusterStatusWithCollection
specifier|private
name|void
name|clusterStatusWithCollection
parameter_list|()
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|CloudSolrServer
name|client
init|=
name|createCloudClient
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|CLUSTERSTATUS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"collection"
argument_list|,
name|COLLECTION_NAME
argument_list|)
expr_stmt|;
name|SolrRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|rsp
init|=
name|client
operator|.
name|request
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|cluster
init|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|rsp
operator|.
name|get
argument_list|(
literal|"cluster"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Cluster state should not be null"
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|collections
init|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|cluster
operator|.
name|get
argument_list|(
literal|"collections"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Collections should not be null in cluster state"
argument_list|,
name|collections
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|collections
operator|.
name|get
argument_list|(
name|COLLECTION_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|collections
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|//remove collections
name|client
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|clusterStatusWithRouteKey
specifier|private
name|void
name|clusterStatusWithRouteKey
parameter_list|()
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|CloudSolrServer
name|client
init|=
name|createCloudClient
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
decl_stmt|;
try|try
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"a!123"
argument_list|)
expr_stmt|;
comment|// goes to shard2. see ShardRoutingTest for details
name|client
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|CLUSTERSTATUS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"collection"
argument_list|,
name|DEFAULT_COLLECTION
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|ShardParams
operator|.
name|_ROUTE_
argument_list|,
literal|"a!"
argument_list|)
expr_stmt|;
name|SolrRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|rsp
init|=
name|client
operator|.
name|request
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|cluster
init|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|rsp
operator|.
name|get
argument_list|(
literal|"cluster"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Cluster state should not be null"
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|collections
init|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|cluster
operator|.
name|get
argument_list|(
literal|"collections"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Collections should not be null in cluster state"
argument_list|,
name|collections
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|collections
operator|.
name|get
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|collections
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|collection
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|collections
operator|.
name|get
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|shardStatus
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|collection
operator|.
name|get
argument_list|(
literal|"shards"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|shardStatus
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|selectedShardStatus
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|shardStatus
operator|.
name|get
argument_list|(
name|SHARD2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|selectedShardStatus
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|//remove collections
name|client
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|clusterStatusAliasTest
specifier|private
name|void
name|clusterStatusAliasTest
parameter_list|()
throws|throws
name|Exception
block|{
name|CloudSolrServer
name|client
init|=
name|createCloudClient
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|CREATEALIAS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
literal|"myalias"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"collections"
argument_list|,
name|DEFAULT_COLLECTION
operator|+
literal|","
operator|+
name|COLLECTION_NAME
argument_list|)
expr_stmt|;
name|SolrRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|client
operator|.
name|request
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|CLUSTERSTATUS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"collection"
argument_list|,
name|DEFAULT_COLLECTION
argument_list|)
expr_stmt|;
name|request
operator|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|rsp
init|=
name|client
operator|.
name|request
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|cluster
init|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|rsp
operator|.
name|get
argument_list|(
literal|"cluster"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Cluster state should not be null"
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aliases
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|cluster
operator|.
name|get
argument_list|(
literal|"aliases"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Aliases should not be null"
argument_list|,
name|aliases
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Alias: myalias not found in cluster status"
argument_list|,
name|DEFAULT_COLLECTION
operator|+
literal|","
operator|+
name|COLLECTION_NAME
argument_list|,
name|aliases
operator|.
name|get
argument_list|(
literal|"myalias"
argument_list|)
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|collections
init|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|cluster
operator|.
name|get
argument_list|(
literal|"collections"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Collections should not be null in cluster state"
argument_list|,
name|collections
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|collections
operator|.
name|get
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|collection
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|collections
operator|.
name|get
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|collAlias
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|collection
operator|.
name|get
argument_list|(
literal|"aliases"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Aliases not found"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"myalias"
argument_list|)
argument_list|,
name|collAlias
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|client
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|clusterStatusRolesTest
specifier|private
name|void
name|clusterStatusRolesTest
parameter_list|()
throws|throws
name|Exception
block|{
name|CloudSolrServer
name|client
init|=
name|createCloudClient
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Replica
name|replica
init|=
name|client
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getLeaderRetry
argument_list|(
name|DEFAULT_COLLECTION
argument_list|,
name|SHARD1
argument_list|)
decl_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|ADDROLE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"node"
argument_list|,
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"role"
argument_list|,
literal|"overseer"
argument_list|)
expr_stmt|;
name|SolrRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|client
operator|.
name|request
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|CLUSTERSTATUS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"collection"
argument_list|,
name|DEFAULT_COLLECTION
argument_list|)
expr_stmt|;
name|request
operator|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|rsp
init|=
name|client
operator|.
name|request
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|cluster
init|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|rsp
operator|.
name|get
argument_list|(
literal|"cluster"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Cluster state should not be null"
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|roles
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|cluster
operator|.
name|get
argument_list|(
literal|"roles"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Role information should not be null"
argument_list|,
name|roles
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|overseer
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|roles
operator|.
name|get
argument_list|(
literal|"overseer"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|overseer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|overseer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|overseer
operator|.
name|contains
argument_list|(
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|client
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
