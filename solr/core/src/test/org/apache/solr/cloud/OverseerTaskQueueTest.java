begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|SolrResponseBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonAdminParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|OverseerTaskQueueTest
specifier|public
class|class
name|OverseerTaskQueueTest
extends|extends
name|DistributedQueueTest
block|{
comment|// TODO: OverseerTaskQueue specific tests.
annotation|@
name|Override
DECL|method|makeDistributedQueue
specifier|protected
name|OverseerTaskQueue
name|makeDistributedQueue
parameter_list|(
name|String
name|dqZNode
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|OverseerTaskQueue
argument_list|(
name|zkClient
argument_list|,
name|setupNewDistributedQueueZNode
argument_list|(
name|dqZNode
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testContainsTaskWithRequestId
specifier|public
name|void
name|testContainsTaskWithRequestId
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tqZNode
init|=
literal|"/taskqueue/test"
decl_stmt|;
name|String
name|requestId
init|=
literal|"foo"
decl_stmt|;
name|String
name|nonExistentRequestId
init|=
literal|"bar"
decl_stmt|;
name|OverseerTaskQueue
name|tq
init|=
name|makeDistributedQueue
argument_list|(
name|tqZNode
argument_list|)
decl_stmt|;
comment|// Basic ops
comment|// Put an expected Overseer task onto the queue
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|NAME
argument_list|,
literal|"coll1"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|OverseerCollectionMessageHandler
operator|.
name|COLL_CONF
argument_list|,
literal|"myconf"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|OverseerCollectionMessageHandler
operator|.
name|NUM_SLICES
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|REPLICATION_FACTOR
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|CommonAdminParams
operator|.
name|ASYNC
argument_list|,
name|requestId
argument_list|)
expr_stmt|;
name|tq
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|props
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Task queue should contain task with requestid "
operator|+
name|requestId
argument_list|,
name|tq
operator|.
name|containsTaskWithRequestId
argument_list|(
name|CommonAdminParams
operator|.
name|ASYNC
argument_list|,
name|requestId
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Task queue should not contain task with requestid "
operator|+
name|nonExistentRequestId
argument_list|,
name|tq
operator|.
name|containsTaskWithRequestId
argument_list|(
name|CommonAdminParams
operator|.
name|ASYNC
argument_list|,
name|nonExistentRequestId
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a response node as if someone is waiting for a response from the Overseer; then,
comment|// create the request node.
comment|// Here we're reaching a bit into the internals of OverseerTaskQueue in order to create the same
comment|// response node structure but without setting a watch on it and removing it immediately when
comment|// a response is set, in order to artificially create the race condition that
comment|// containsTaskWithRequestId runs while the response is still in the queue.
name|String
name|watchID
init|=
name|tq
operator|.
name|createResponseNode
argument_list|()
decl_stmt|;
name|String
name|requestId2
init|=
literal|"baz"
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|CommonAdminParams
operator|.
name|ASYNC
argument_list|,
name|requestId2
argument_list|)
expr_stmt|;
name|tq
operator|.
name|createRequestNode
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|props
argument_list|)
argument_list|,
name|watchID
argument_list|)
expr_stmt|;
comment|// Set a SolrResponse as the response node by removing the QueueEvent, as done in OverseerTaskProcessor
name|List
argument_list|<
name|OverseerTaskQueue
operator|.
name|QueueEvent
argument_list|>
name|queueEvents
init|=
name|tq
operator|.
name|peekTopN
argument_list|(
literal|2
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|OverseerTaskQueue
operator|.
name|QueueEvent
name|requestId2Event
init|=
literal|null
decl_stmt|;
for|for
control|(
name|OverseerTaskQueue
operator|.
name|QueueEvent
name|queueEvent
range|:
name|queueEvents
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|eventProps
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|Utils
operator|.
name|fromJSON
argument_list|(
name|queueEvent
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|requestId2
operator|.
name|equals
argument_list|(
name|eventProps
operator|.
name|get
argument_list|(
name|CommonAdminParams
operator|.
name|ASYNC
argument_list|)
argument_list|)
condition|)
block|{
name|requestId2Event
operator|=
name|queueEvent
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
literal|"Didn't find event with requestid "
operator|+
name|requestId2
argument_list|,
name|requestId2Event
argument_list|)
expr_stmt|;
name|requestId2Event
operator|.
name|setBytes
argument_list|(
name|SolrResponse
operator|.
name|serializable
argument_list|(
operator|new
name|SolrResponseBase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tq
operator|.
name|remove
argument_list|(
name|requestId2Event
argument_list|)
expr_stmt|;
comment|// Make sure this call to check if requestId exists doesn't barf with Json parse exception
name|assertTrue
argument_list|(
literal|"Task queue should contain task with requestid "
operator|+
name|requestId
argument_list|,
name|tq
operator|.
name|containsTaskWithRequestId
argument_list|(
name|CommonAdminParams
operator|.
name|ASYNC
argument_list|,
name|requestId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
