begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|DistributedQueue
operator|.
name|QueueEvent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|Overseer
operator|.
name|LeaderStatus
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
operator|.
name|CoreAdminAction
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|Capture
import|;
end_import
begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IAnswer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|BlockingArrayQueue
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|anyBoolean
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|anyObject
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|capture
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|createMock
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expectLastCall
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|getCurrentArguments
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|reset
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|verify
import|;
end_import
begin_class
DECL|class|OverseerCollectionProcessorTest
specifier|public
class|class
name|OverseerCollectionProcessorTest
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|ADMIN_PATH
specifier|private
specifier|static
specifier|final
name|String
name|ADMIN_PATH
init|=
literal|"/admin/cores"
decl_stmt|;
DECL|field|COLLECTION_NAME
specifier|private
specifier|static
specifier|final
name|String
name|COLLECTION_NAME
init|=
literal|"mycollection"
decl_stmt|;
DECL|field|CONFIG_NAME
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_NAME
init|=
literal|"myconfig"
decl_stmt|;
DECL|field|workQueueMock
specifier|private
specifier|static
name|DistributedQueue
name|workQueueMock
decl_stmt|;
DECL|field|shardHandlerMock
specifier|private
specifier|static
name|ShardHandler
name|shardHandlerMock
decl_stmt|;
DECL|field|zkStateReaderMock
specifier|private
specifier|static
name|ZkStateReader
name|zkStateReaderMock
decl_stmt|;
DECL|field|clusterStateMock
specifier|private
specifier|static
name|ClusterState
name|clusterStateMock
decl_stmt|;
DECL|field|solrZkClientMock
specifier|private
specifier|static
name|SolrZkClient
name|solrZkClientMock
decl_stmt|;
DECL|field|zkMap
specifier|private
specifier|final
name|Map
name|zkMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
DECL|field|collectionsSet
specifier|private
specifier|final
name|Set
name|collectionsSet
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
DECL|field|underTest
specifier|private
name|OverseerCollectionProcessorToBeTested
name|underTest
decl_stmt|;
DECL|field|thread
specifier|private
name|Thread
name|thread
decl_stmt|;
DECL|field|queue
specifier|private
name|Queue
argument_list|<
name|QueueEvent
argument_list|>
name|queue
init|=
operator|new
name|BlockingArrayQueue
argument_list|<
name|QueueEvent
argument_list|>
argument_list|()
decl_stmt|;
DECL|class|OverseerCollectionProcessorToBeTested
specifier|private
class|class
name|OverseerCollectionProcessorToBeTested
extends|extends
name|OverseerCollectionProcessor
block|{
DECL|field|lastProcessMessageResult
specifier|private
name|SolrResponse
name|lastProcessMessageResult
decl_stmt|;
DECL|method|OverseerCollectionProcessorToBeTested
specifier|public
name|OverseerCollectionProcessorToBeTested
parameter_list|(
name|ZkStateReader
name|zkStateReader
parameter_list|,
name|String
name|myId
parameter_list|,
name|ShardHandler
name|shardHandler
parameter_list|,
name|String
name|adminPath
parameter_list|,
name|DistributedQueue
name|workQueue
parameter_list|)
block|{
name|super
argument_list|(
name|zkStateReader
argument_list|,
name|myId
argument_list|,
name|shardHandler
argument_list|,
name|adminPath
argument_list|,
name|workQueue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|processMessage
specifier|protected
name|SolrResponse
name|processMessage
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|,
name|String
name|operation
parameter_list|)
block|{
name|lastProcessMessageResult
operator|=
name|super
operator|.
name|processMessage
argument_list|(
name|message
argument_list|,
name|operation
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"1 : "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|lastProcessMessageResult
return|;
block|}
annotation|@
name|Override
DECL|method|amILeader
specifier|protected
name|LeaderStatus
name|amILeader
parameter_list|()
block|{
return|return
name|LeaderStatus
operator|.
name|YES
return|;
block|}
block|}
annotation|@
name|BeforeClass
DECL|method|setUpOnce
specifier|public
specifier|static
name|void
name|setUpOnce
parameter_list|()
throws|throws
name|Exception
block|{
name|workQueueMock
operator|=
name|createMock
argument_list|(
name|DistributedQueue
operator|.
name|class
argument_list|)
expr_stmt|;
name|shardHandlerMock
operator|=
name|createMock
argument_list|(
name|ShardHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|zkStateReaderMock
operator|=
name|createMock
argument_list|(
name|ZkStateReader
operator|.
name|class
argument_list|)
expr_stmt|;
name|clusterStateMock
operator|=
name|createMock
argument_list|(
name|ClusterState
operator|.
name|class
argument_list|)
expr_stmt|;
name|solrZkClientMock
operator|=
name|createMock
argument_list|(
name|SolrZkClient
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDownOnce
specifier|public
specifier|static
name|void
name|tearDownOnce
parameter_list|()
block|{
name|workQueueMock
operator|=
literal|null
expr_stmt|;
name|shardHandlerMock
operator|=
literal|null
expr_stmt|;
name|zkStateReaderMock
operator|=
literal|null
expr_stmt|;
name|clusterStateMock
operator|=
literal|null
expr_stmt|;
name|solrZkClientMock
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|queue
operator|.
name|clear
argument_list|()
expr_stmt|;
name|reset
argument_list|(
name|workQueueMock
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|workQueueMock
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|shardHandlerMock
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|zkStateReaderMock
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|clusterStateMock
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|solrZkClientMock
argument_list|)
expr_stmt|;
name|underTest
operator|=
operator|new
name|OverseerCollectionProcessorToBeTested
argument_list|(
name|zkStateReaderMock
argument_list|,
literal|"1234"
argument_list|,
name|shardHandlerMock
argument_list|,
name|ADMIN_PATH
argument_list|,
name|workQueueMock
argument_list|)
expr_stmt|;
name|zkMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|collectionsSet
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|stopComponentUnderTest
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
DECL|method|commonMocks
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|commonMocks
parameter_list|(
name|int
name|liveNodesCount
parameter_list|)
throws|throws
name|Exception
block|{
name|workQueueMock
operator|.
name|peek
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|expectLastCall
argument_list|()
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
name|Object
name|result
decl_stmt|;
while|while
condition|(
operator|(
name|result
operator|=
name|queue
operator|.
name|peek
argument_list|()
operator|)
operator|==
literal|null
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|workQueueMock
operator|.
name|remove
argument_list|(
name|anyObject
argument_list|(
name|QueueEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|expectLastCall
argument_list|()
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
name|queue
operator|.
name|remove
argument_list|(
operator|(
name|QueueEvent
operator|)
name|getCurrentArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|workQueueMock
operator|.
name|poll
argument_list|()
expr_stmt|;
name|expectLastCall
argument_list|()
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
return|return
name|queue
operator|.
name|poll
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|zkStateReaderMock
operator|.
name|getClusterState
argument_list|()
expr_stmt|;
name|expectLastCall
argument_list|()
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
return|return
name|clusterStateMock
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|zkStateReaderMock
operator|.
name|getZkClient
argument_list|()
expr_stmt|;
name|expectLastCall
argument_list|()
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
return|return
name|solrZkClientMock
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|clusterStateMock
operator|.
name|getCollections
argument_list|()
expr_stmt|;
name|expectLastCall
argument_list|()
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
return|return
name|collectionsSet
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|liveNodes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|liveNodesCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|address
init|=
literal|"localhost:"
operator|+
operator|(
literal|8963
operator|+
name|i
operator|)
operator|+
literal|"_solr"
decl_stmt|;
name|liveNodes
operator|.
name|add
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|solrZkClientMock
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|expectLastCall
argument_list|()
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// This works as long as this test does not use a
comment|// webapp context with an underscore in it
return|return
name|address
operator|.
name|replaceAll
argument_list|(
literal|"_"
argument_list|,
literal|"/"
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
block|}
name|clusterStateMock
operator|.
name|getLiveNodes
argument_list|()
expr_stmt|;
name|expectLastCall
argument_list|()
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
return|return
name|liveNodes
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|solrZkClientMock
operator|.
name|create
argument_list|(
name|anyObject
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|anyObject
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyObject
argument_list|(
name|CreateMode
operator|.
name|class
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|expectLastCall
argument_list|()
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|getCurrentArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|zkMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|handleCrateCollMessage
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|getCurrentArguments
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
return|return
name|key
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|solrZkClientMock
operator|.
name|create
argument_list|(
name|anyObject
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|anyObject
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyObject
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|,
name|anyObject
argument_list|(
name|CreateMode
operator|.
name|class
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|expectLastCall
argument_list|()
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|getCurrentArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|zkMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|handleCrateCollMessage
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|getCurrentArguments
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
return|return
name|key
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|solrZkClientMock
operator|.
name|makePath
argument_list|(
name|anyObject
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|anyObject
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|expectLastCall
argument_list|()
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|getCurrentArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
return|return
name|key
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|solrZkClientMock
operator|.
name|exists
argument_list|(
name|anyObject
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|expectLastCall
argument_list|()
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|getCurrentArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
return|return
name|zkMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
return|return
name|liveNodes
return|;
block|}
DECL|method|handleCrateCollMessage
specifier|private
name|void
name|handleCrateCollMessage
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
try|try
block|{
name|ZkNodeProps
name|props
init|=
name|ZkNodeProps
operator|.
name|load
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"createcollection"
operator|.
name|equals
argument_list|(
name|props
operator|.
name|getStr
argument_list|(
literal|"operation"
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|collName
init|=
name|props
operator|.
name|getStr
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|collName
operator|!=
literal|null
condition|)
name|collectionsSet
operator|.
name|add
argument_list|(
name|collName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{ }
block|}
DECL|method|startComponentUnderTest
specifier|protected
name|void
name|startComponentUnderTest
parameter_list|()
block|{
name|thread
operator|=
operator|new
name|Thread
argument_list|(
name|underTest
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|stopComponentUnderTest
specifier|protected
name|void
name|stopComponentUnderTest
parameter_list|()
throws|throws
name|Exception
block|{
name|underTest
operator|.
name|close
argument_list|()
expr_stmt|;
name|thread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
DECL|class|SubmitCapture
specifier|private
class|class
name|SubmitCapture
block|{
DECL|field|shardRequestCapture
specifier|public
name|Capture
argument_list|<
name|ShardRequest
argument_list|>
name|shardRequestCapture
init|=
operator|new
name|Capture
argument_list|<
name|ShardRequest
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|nodeUrlsWithoutProtocolPartCapture
specifier|public
name|Capture
argument_list|<
name|String
argument_list|>
name|nodeUrlsWithoutProtocolPartCapture
init|=
operator|new
name|Capture
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|params
specifier|public
name|Capture
argument_list|<
name|ModifiableSolrParams
argument_list|>
name|params
init|=
operator|new
name|Capture
argument_list|<
name|ModifiableSolrParams
argument_list|>
argument_list|()
decl_stmt|;
block|}
DECL|method|mockShardHandlerForCreateJob
specifier|protected
name|List
argument_list|<
name|SubmitCapture
argument_list|>
name|mockShardHandlerForCreateJob
parameter_list|(
name|Integer
name|numberOfSlices
parameter_list|,
name|Integer
name|numberOfReplica
parameter_list|)
block|{
name|List
argument_list|<
name|SubmitCapture
argument_list|>
name|submitCaptures
init|=
operator|new
name|ArrayList
argument_list|<
name|SubmitCapture
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|numberOfSlices
operator|*
name|numberOfReplica
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|SubmitCapture
name|submitCapture
init|=
operator|new
name|SubmitCapture
argument_list|()
decl_stmt|;
name|shardHandlerMock
operator|.
name|submit
argument_list|(
name|capture
argument_list|(
name|submitCapture
operator|.
name|shardRequestCapture
argument_list|)
argument_list|,
name|capture
argument_list|(
name|submitCapture
operator|.
name|nodeUrlsWithoutProtocolPartCapture
argument_list|)
argument_list|,
name|capture
argument_list|(
name|submitCapture
operator|.
name|params
argument_list|)
argument_list|)
expr_stmt|;
name|expectLastCall
argument_list|()
expr_stmt|;
name|submitCaptures
operator|.
name|add
argument_list|(
name|submitCapture
argument_list|)
expr_stmt|;
name|ShardResponse
name|shardResponseWithoutException
init|=
operator|new
name|ShardResponse
argument_list|()
decl_stmt|;
name|shardResponseWithoutException
operator|.
name|setSolrResponse
argument_list|(
operator|new
name|QueryResponse
argument_list|()
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|shardHandlerMock
operator|.
name|takeCompletedOrError
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|shardResponseWithoutException
argument_list|)
expr_stmt|;
block|}
name|expect
argument_list|(
name|shardHandlerMock
operator|.
name|takeCompletedOrError
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|submitCaptures
return|;
block|}
DECL|method|issueCreateJob
specifier|protected
name|void
name|issueCreateJob
parameter_list|(
name|Integer
name|numberOfSlices
parameter_list|,
name|Integer
name|replicationFactor
parameter_list|,
name|Integer
name|maxShardsPerNode
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|createNodeList
parameter_list|,
name|boolean
name|sendCreateNodeList
parameter_list|)
block|{
name|ZkNodeProps
name|props
decl_stmt|;
if|if
condition|(
name|sendCreateNodeList
condition|)
block|{
name|props
operator|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerCollectionProcessor
operator|.
name|CREATECOLLECTION
argument_list|,
name|OverseerCollectionProcessor
operator|.
name|REPLICATION_FACTOR
argument_list|,
name|replicationFactor
operator|.
name|toString
argument_list|()
argument_list|,
literal|"name"
argument_list|,
name|COLLECTION_NAME
argument_list|,
literal|"collection.configName"
argument_list|,
name|CONFIG_NAME
argument_list|,
name|OverseerCollectionProcessor
operator|.
name|NUM_SLICES
argument_list|,
name|numberOfSlices
operator|.
name|toString
argument_list|()
argument_list|,
name|OverseerCollectionProcessor
operator|.
name|MAX_SHARDS_PER_NODE
argument_list|,
name|maxShardsPerNode
operator|.
name|toString
argument_list|()
argument_list|,
name|OverseerCollectionProcessor
operator|.
name|CREATE_NODE_SET
argument_list|,
operator|(
name|createNodeList
operator|!=
literal|null
operator|)
condition|?
name|StrUtils
operator|.
name|join
argument_list|(
name|createNodeList
argument_list|,
literal|','
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|props
operator|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerCollectionProcessor
operator|.
name|CREATECOLLECTION
argument_list|,
name|OverseerCollectionProcessor
operator|.
name|REPLICATION_FACTOR
argument_list|,
name|replicationFactor
operator|.
name|toString
argument_list|()
argument_list|,
literal|"name"
argument_list|,
name|COLLECTION_NAME
argument_list|,
literal|"collection.configName"
argument_list|,
name|CONFIG_NAME
argument_list|,
name|OverseerCollectionProcessor
operator|.
name|NUM_SLICES
argument_list|,
name|numberOfSlices
operator|.
name|toString
argument_list|()
argument_list|,
name|OverseerCollectionProcessor
operator|.
name|MAX_SHARDS_PER_NODE
argument_list|,
name|maxShardsPerNode
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QueueEvent
name|qe
init|=
operator|new
name|QueueEvent
argument_list|(
literal|"id"
argument_list|,
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|props
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|qe
argument_list|)
expr_stmt|;
block|}
DECL|method|verifySubmitCaptures
specifier|protected
name|void
name|verifySubmitCaptures
parameter_list|(
name|List
argument_list|<
name|SubmitCapture
argument_list|>
name|submitCaptures
parameter_list|,
name|Integer
name|numberOfSlices
parameter_list|,
name|Integer
name|numberOfReplica
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|createNodes
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|coreNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|sliceToNodeUrlsWithoutProtocolPartToNumberOfShardsRunningMapMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nodeUrlWithoutProtocolPartForLiveNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|createNodes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|nodeName
range|:
name|createNodes
control|)
block|{
name|String
name|nodeUrlWithoutProtocolPart
init|=
name|nodeName
operator|.
name|replaceAll
argument_list|(
literal|"_"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeUrlWithoutProtocolPart
operator|.
name|startsWith
argument_list|(
literal|"http://"
argument_list|)
condition|)
name|nodeUrlWithoutProtocolPart
operator|=
name|nodeUrlWithoutProtocolPart
operator|.
name|substring
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|nodeUrlWithoutProtocolPartForLiveNodes
operator|.
name|add
argument_list|(
name|nodeUrlWithoutProtocolPart
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SubmitCapture
name|submitCapture
range|:
name|submitCaptures
control|)
block|{
name|ShardRequest
name|shardRequest
init|=
name|submitCapture
operator|.
name|shardRequestCapture
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|CoreAdminAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|,
name|shardRequest
operator|.
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|)
argument_list|)
expr_stmt|;
comment|// assertEquals(shardRequest.params, submitCapture.params);
name|String
name|coreName
init|=
name|shardRequest
operator|.
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Core with name "
operator|+
name|coreName
operator|+
literal|" created twice"
argument_list|,
name|coreNames
operator|.
name|contains
argument_list|(
name|coreName
argument_list|)
argument_list|)
expr_stmt|;
name|coreNames
operator|.
name|add
argument_list|(
name|coreName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CONFIG_NAME
argument_list|,
name|shardRequest
operator|.
name|params
operator|.
name|get
argument_list|(
literal|"collection.configName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|COLLECTION_NAME
argument_list|,
name|shardRequest
operator|.
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|COLLECTION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numberOfSlices
operator|.
name|toString
argument_list|()
argument_list|,
name|shardRequest
operator|.
name|params
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ADMIN_PATH
argument_list|,
name|shardRequest
operator|.
name|params
operator|.
name|get
argument_list|(
literal|"qt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|shardRequest
operator|.
name|purpose
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|shardRequest
operator|.
name|shards
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|submitCapture
operator|.
name|nodeUrlsWithoutProtocolPartCapture
operator|.
name|getValue
argument_list|()
argument_list|,
name|shardRequest
operator|.
name|shards
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Shard "
operator|+
name|coreName
operator|+
literal|" created on wrong node "
operator|+
name|shardRequest
operator|.
name|shards
index|[
literal|0
index|]
argument_list|,
name|nodeUrlWithoutProtocolPartForLiveNodes
operator|.
name|contains
argument_list|(
name|shardRequest
operator|.
name|shards
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardRequest
operator|.
name|shards
argument_list|,
name|shardRequest
operator|.
name|actualShards
argument_list|)
expr_stmt|;
name|String
name|sliceName
init|=
name|shardRequest
operator|.
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|SHARD
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sliceToNodeUrlsWithoutProtocolPartToNumberOfShardsRunningMapMap
operator|.
name|containsKey
argument_list|(
name|sliceName
argument_list|)
condition|)
block|{
name|sliceToNodeUrlsWithoutProtocolPartToNumberOfShardsRunningMapMap
operator|.
name|put
argument_list|(
name|sliceName
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|nodeUrlsWithoutProtocolPartToNumberOfShardsRunningMap
init|=
name|sliceToNodeUrlsWithoutProtocolPartToNumberOfShardsRunningMapMap
operator|.
name|get
argument_list|(
name|sliceName
argument_list|)
decl_stmt|;
name|Integer
name|existingCount
decl_stmt|;
name|nodeUrlsWithoutProtocolPartToNumberOfShardsRunningMap
operator|.
name|put
argument_list|(
name|shardRequest
operator|.
name|shards
index|[
literal|0
index|]
argument_list|,
operator|(
operator|(
name|existingCount
operator|=
name|nodeUrlsWithoutProtocolPartToNumberOfShardsRunningMap
operator|.
name|get
argument_list|(
name|shardRequest
operator|.
name|shards
index|[
literal|0
index|]
argument_list|)
operator|)
operator|==
literal|null
operator|)
condition|?
literal|1
else|:
operator|(
name|existingCount
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|numberOfSlices
operator|*
name|numberOfReplica
argument_list|,
name|coreNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numberOfSlices
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|numberOfReplica
condition|;
name|j
operator|++
control|)
block|{
name|String
name|coreName
init|=
name|COLLECTION_NAME
operator|+
literal|"_shard"
operator|+
name|i
operator|+
literal|"_replica"
operator|+
name|j
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Shard "
operator|+
name|coreName
operator|+
literal|" was not created"
argument_list|,
name|coreNames
operator|.
name|contains
argument_list|(
name|coreName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|numberOfSlices
operator|.
name|intValue
argument_list|()
argument_list|,
name|sliceToNodeUrlsWithoutProtocolPartToNumberOfShardsRunningMapMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numberOfSlices
condition|;
name|i
operator|++
control|)
block|{
name|sliceToNodeUrlsWithoutProtocolPartToNumberOfShardsRunningMapMap
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
literal|"shard"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|int
name|minShardsPerSlicePerNode
init|=
name|numberOfReplica
operator|/
name|createNodes
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numberOfNodesSupposedToRunMaxShards
init|=
name|numberOfReplica
operator|%
name|createNodes
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numberOfNodesSupposedToRunMinShards
init|=
name|createNodes
operator|.
name|size
argument_list|()
operator|-
name|numberOfNodesSupposedToRunMaxShards
decl_stmt|;
name|int
name|maxShardsPerSlicePerNode
init|=
operator|(
name|minShardsPerSlicePerNode
operator|+
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|numberOfNodesSupposedToRunMaxShards
operator|==
literal|0
condition|)
block|{
name|numberOfNodesSupposedToRunMaxShards
operator|=
name|numberOfNodesSupposedToRunMinShards
expr_stmt|;
name|maxShardsPerSlicePerNode
operator|=
name|minShardsPerSlicePerNode
expr_stmt|;
block|}
name|boolean
name|diffBetweenMinAndMaxShardsPerSlicePerNode
init|=
operator|(
name|maxShardsPerSlicePerNode
operator|!=
name|minShardsPerSlicePerNode
operator|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|sliceToNodeUrlsWithoutProtocolPartToNumberOfShardsRunningMapMapEntry
range|:
name|sliceToNodeUrlsWithoutProtocolPartToNumberOfShardsRunningMapMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|numberOfShardsRunning
init|=
literal|0
decl_stmt|;
name|int
name|numberOfNodesRunningMinShards
init|=
literal|0
decl_stmt|;
name|int
name|numberOfNodesRunningMaxShards
init|=
literal|0
decl_stmt|;
name|int
name|numberOfNodesRunningAtLeastOneShard
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|nodeUrlsWithoutProtocolPart
range|:
name|sliceToNodeUrlsWithoutProtocolPartToNumberOfShardsRunningMapMapEntry
operator|.
name|getValue
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|int
name|numberOfShardsRunningOnThisNode
init|=
name|sliceToNodeUrlsWithoutProtocolPartToNumberOfShardsRunningMapMapEntry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|nodeUrlsWithoutProtocolPart
argument_list|)
decl_stmt|;
name|numberOfShardsRunning
operator|+=
name|numberOfShardsRunningOnThisNode
expr_stmt|;
name|numberOfNodesRunningAtLeastOneShard
operator|++
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Node "
operator|+
name|nodeUrlsWithoutProtocolPart
operator|+
literal|" is running wrong number of shards. Supposed to run "
operator|+
name|minShardsPerSlicePerNode
operator|+
operator|(
name|diffBetweenMinAndMaxShardsPerSlicePerNode
condition|?
operator|(
literal|" or "
operator|+
name|maxShardsPerSlicePerNode
operator|)
else|:
literal|""
operator|)
argument_list|,
operator|(
name|numberOfShardsRunningOnThisNode
operator|==
name|minShardsPerSlicePerNode
operator|)
operator|||
operator|(
name|numberOfShardsRunningOnThisNode
operator|==
name|maxShardsPerSlicePerNode
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|numberOfShardsRunningOnThisNode
operator|==
name|minShardsPerSlicePerNode
condition|)
name|numberOfNodesRunningMinShards
operator|++
expr_stmt|;
if|if
condition|(
name|numberOfShardsRunningOnThisNode
operator|==
name|maxShardsPerSlicePerNode
condition|)
name|numberOfNodesRunningMaxShards
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|minShardsPerSlicePerNode
operator|==
literal|0
condition|)
name|numberOfNodesRunningMinShards
operator|=
operator|(
name|createNodes
operator|.
name|size
argument_list|()
operator|-
name|numberOfNodesRunningAtLeastOneShard
operator|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Too many shards are running under slice "
operator|+
name|sliceToNodeUrlsWithoutProtocolPartToNumberOfShardsRunningMapMapEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|numberOfReplica
operator|.
name|intValue
argument_list|()
argument_list|,
name|numberOfShardsRunning
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numberOfNodesSupposedToRunMinShards
argument_list|,
name|numberOfNodesRunningMinShards
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numberOfNodesSupposedToRunMaxShards
argument_list|,
name|numberOfNodesRunningMaxShards
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|waitForEmptyQueue
specifier|protected
name|void
name|waitForEmptyQueue
parameter_list|(
name|long
name|maxWait
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|queue
operator|.
name|peek
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|>
name|maxWait
condition|)
name|fail
argument_list|(
literal|" Queue not empty within "
operator|+
name|maxWait
operator|+
literal|" ms"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
DECL|enum|CreateNodeListOptions
specifier|protected
enum|enum
name|CreateNodeListOptions
block|{
DECL|enum constant|SEND
name|SEND
block|,
DECL|enum constant|DONT_SEND
name|DONT_SEND
block|,
DECL|enum constant|SEND_NULL
name|SEND_NULL
block|}
DECL|method|testTemplate
specifier|protected
name|void
name|testTemplate
parameter_list|(
name|Integer
name|numberOfNodes
parameter_list|,
name|Integer
name|numberOfNodesToCreateOn
parameter_list|,
name|CreateNodeListOptions
name|createNodeListOption
parameter_list|,
name|Integer
name|replicationFactor
parameter_list|,
name|Integer
name|numberOfSlices
parameter_list|,
name|Integer
name|maxShardsPerNode
parameter_list|,
name|boolean
name|collectionExceptedToBeCreated
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Wrong usage of testTemplate. numberOfNodesToCreateOn "
operator|+
name|numberOfNodesToCreateOn
operator|+
literal|" is not allowed to be higher than numberOfNodes "
operator|+
name|numberOfNodes
argument_list|,
name|numberOfNodes
operator|.
name|intValue
argument_list|()
operator|>=
name|numberOfNodesToCreateOn
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Wrong usage of testTemplage. createNodeListOption has to be "
operator|+
name|CreateNodeListOptions
operator|.
name|SEND
operator|+
literal|" when numberOfNodes and numberOfNodesToCreateOn are unequal"
argument_list|,
operator|(
operator|(
name|createNodeListOption
operator|==
name|CreateNodeListOptions
operator|.
name|SEND
operator|)
operator|||
operator|(
name|numberOfNodes
operator|.
name|intValue
argument_list|()
operator|==
name|numberOfNodesToCreateOn
operator|.
name|intValue
argument_list|()
operator|)
operator|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|liveNodes
init|=
name|commonMocks
argument_list|(
name|numberOfNodes
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|createNodeList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|node
range|:
name|liveNodes
control|)
block|{
if|if
condition|(
name|i
operator|++
operator|<
name|numberOfNodesToCreateOn
condition|)
block|{
name|createNodeList
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|SubmitCapture
argument_list|>
name|submitCaptures
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|collectionExceptedToBeCreated
condition|)
block|{
name|submitCaptures
operator|=
name|mockShardHandlerForCreateJob
argument_list|(
name|numberOfSlices
argument_list|,
name|replicationFactor
argument_list|)
expr_stmt|;
block|}
name|replay
argument_list|(
name|workQueueMock
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|solrZkClientMock
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|zkStateReaderMock
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|clusterStateMock
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|shardHandlerMock
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"clusterstate "
operator|+
name|clusterStateMock
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|startComponentUnderTest
argument_list|()
expr_stmt|;
name|issueCreateJob
argument_list|(
name|numberOfSlices
argument_list|,
name|replicationFactor
argument_list|,
name|maxShardsPerNode
argument_list|,
operator|(
name|createNodeListOption
operator|!=
name|CreateNodeListOptions
operator|.
name|SEND_NULL
operator|)
condition|?
name|createNodeList
else|:
literal|null
argument_list|,
operator|(
name|createNodeListOption
operator|!=
name|CreateNodeListOptions
operator|.
name|DONT_SEND
operator|)
argument_list|)
expr_stmt|;
name|waitForEmptyQueue
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
if|if
condition|(
name|collectionExceptedToBeCreated
condition|)
block|{
name|assertNotNull
argument_list|(
name|underTest
operator|.
name|lastProcessMessageResult
operator|.
name|getResponse
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|underTest
operator|.
name|lastProcessMessageResult
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|shardHandlerMock
argument_list|)
expr_stmt|;
if|if
condition|(
name|collectionExceptedToBeCreated
condition|)
block|{
name|verifySubmitCaptures
argument_list|(
name|submitCaptures
argument_list|,
name|numberOfSlices
argument_list|,
name|replicationFactor
argument_list|,
name|createNodeList
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNoReplicationEqualNumberOfSlicesPerNode
specifier|public
name|void
name|testNoReplicationEqualNumberOfSlicesPerNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Integer
name|numberOfNodes
init|=
literal|4
decl_stmt|;
name|Integer
name|numberOfNodesToCreateOn
init|=
literal|4
decl_stmt|;
name|CreateNodeListOptions
name|createNodeListOptions
init|=
name|CreateNodeListOptions
operator|.
name|DONT_SEND
decl_stmt|;
name|Integer
name|replicationFactor
init|=
literal|1
decl_stmt|;
name|Integer
name|numberOfSlices
init|=
literal|8
decl_stmt|;
name|Integer
name|maxShardsPerNode
init|=
literal|2
decl_stmt|;
name|testTemplate
argument_list|(
name|numberOfNodes
argument_list|,
name|numberOfNodesToCreateOn
argument_list|,
name|createNodeListOptions
argument_list|,
name|replicationFactor
argument_list|,
name|numberOfSlices
argument_list|,
name|maxShardsPerNode
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReplicationEqualNumberOfSlicesPerNode
specifier|public
name|void
name|testReplicationEqualNumberOfSlicesPerNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Integer
name|numberOfNodes
init|=
literal|4
decl_stmt|;
name|Integer
name|numberOfNodesToCreateOn
init|=
literal|4
decl_stmt|;
name|CreateNodeListOptions
name|createNodeListOptions
init|=
name|CreateNodeListOptions
operator|.
name|DONT_SEND
decl_stmt|;
name|Integer
name|replicationFactor
init|=
literal|2
decl_stmt|;
name|Integer
name|numberOfSlices
init|=
literal|4
decl_stmt|;
name|Integer
name|maxShardsPerNode
init|=
literal|2
decl_stmt|;
name|testTemplate
argument_list|(
name|numberOfNodes
argument_list|,
name|numberOfNodesToCreateOn
argument_list|,
name|createNodeListOptions
argument_list|,
name|replicationFactor
argument_list|,
name|numberOfSlices
argument_list|,
name|maxShardsPerNode
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoReplicationEqualNumberOfSlicesPerNodeSendCreateNodesEqualToLiveNodes
specifier|public
name|void
name|testNoReplicationEqualNumberOfSlicesPerNodeSendCreateNodesEqualToLiveNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|Integer
name|numberOfNodes
init|=
literal|4
decl_stmt|;
name|Integer
name|numberOfNodesToCreateOn
init|=
literal|4
decl_stmt|;
name|CreateNodeListOptions
name|createNodeListOptions
init|=
name|CreateNodeListOptions
operator|.
name|SEND
decl_stmt|;
name|Integer
name|replicationFactor
init|=
literal|1
decl_stmt|;
name|Integer
name|numberOfSlices
init|=
literal|8
decl_stmt|;
name|Integer
name|maxShardsPerNode
init|=
literal|2
decl_stmt|;
name|testTemplate
argument_list|(
name|numberOfNodes
argument_list|,
name|numberOfNodesToCreateOn
argument_list|,
name|createNodeListOptions
argument_list|,
name|replicationFactor
argument_list|,
name|numberOfSlices
argument_list|,
name|maxShardsPerNode
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReplicationEqualNumberOfSlicesPerNodeSendCreateNodesEqualToLiveNodes
specifier|public
name|void
name|testReplicationEqualNumberOfSlicesPerNodeSendCreateNodesEqualToLiveNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|Integer
name|numberOfNodes
init|=
literal|4
decl_stmt|;
name|Integer
name|numberOfNodesToCreateOn
init|=
literal|4
decl_stmt|;
name|CreateNodeListOptions
name|createNodeListOptions
init|=
name|CreateNodeListOptions
operator|.
name|SEND
decl_stmt|;
name|Integer
name|replicationFactor
init|=
literal|2
decl_stmt|;
name|Integer
name|numberOfSlices
init|=
literal|4
decl_stmt|;
name|Integer
name|maxShardsPerNode
init|=
literal|2
decl_stmt|;
name|testTemplate
argument_list|(
name|numberOfNodes
argument_list|,
name|numberOfNodesToCreateOn
argument_list|,
name|createNodeListOptions
argument_list|,
name|replicationFactor
argument_list|,
name|numberOfSlices
argument_list|,
name|maxShardsPerNode
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoReplicationEqualNumberOfSlicesPerNodeSendNullCreateNodes
specifier|public
name|void
name|testNoReplicationEqualNumberOfSlicesPerNodeSendNullCreateNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|Integer
name|numberOfNodes
init|=
literal|4
decl_stmt|;
name|Integer
name|numberOfNodesToCreateOn
init|=
literal|4
decl_stmt|;
name|CreateNodeListOptions
name|createNodeListOptions
init|=
name|CreateNodeListOptions
operator|.
name|SEND_NULL
decl_stmt|;
name|Integer
name|replicationFactor
init|=
literal|1
decl_stmt|;
name|Integer
name|numberOfSlices
init|=
literal|8
decl_stmt|;
name|Integer
name|maxShardsPerNode
init|=
literal|2
decl_stmt|;
name|testTemplate
argument_list|(
name|numberOfNodes
argument_list|,
name|numberOfNodesToCreateOn
argument_list|,
name|createNodeListOptions
argument_list|,
name|replicationFactor
argument_list|,
name|numberOfSlices
argument_list|,
name|maxShardsPerNode
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReplicationEqualNumberOfSlicesPerNodeSendNullCreateNodes
specifier|public
name|void
name|testReplicationEqualNumberOfSlicesPerNodeSendNullCreateNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|Integer
name|numberOfNodes
init|=
literal|4
decl_stmt|;
name|Integer
name|numberOfNodesToCreateOn
init|=
literal|4
decl_stmt|;
name|CreateNodeListOptions
name|createNodeListOptions
init|=
name|CreateNodeListOptions
operator|.
name|SEND_NULL
decl_stmt|;
name|Integer
name|replicationFactor
init|=
literal|2
decl_stmt|;
name|Integer
name|numberOfSlices
init|=
literal|4
decl_stmt|;
name|Integer
name|maxShardsPerNode
init|=
literal|2
decl_stmt|;
name|testTemplate
argument_list|(
name|numberOfNodes
argument_list|,
name|numberOfNodesToCreateOn
argument_list|,
name|createNodeListOptions
argument_list|,
name|replicationFactor
argument_list|,
name|numberOfSlices
argument_list|,
name|maxShardsPerNode
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoReplicationUnequalNumberOfSlicesPerNode
specifier|public
name|void
name|testNoReplicationUnequalNumberOfSlicesPerNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Integer
name|numberOfNodes
init|=
literal|4
decl_stmt|;
name|Integer
name|numberOfNodesToCreateOn
init|=
literal|4
decl_stmt|;
name|CreateNodeListOptions
name|createNodeListOptions
init|=
name|CreateNodeListOptions
operator|.
name|DONT_SEND
decl_stmt|;
name|Integer
name|replicationFactor
init|=
literal|1
decl_stmt|;
name|Integer
name|numberOfSlices
init|=
literal|6
decl_stmt|;
name|Integer
name|maxShardsPerNode
init|=
literal|2
decl_stmt|;
name|testTemplate
argument_list|(
name|numberOfNodes
argument_list|,
name|numberOfNodesToCreateOn
argument_list|,
name|createNodeListOptions
argument_list|,
name|replicationFactor
argument_list|,
name|numberOfSlices
argument_list|,
name|maxShardsPerNode
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReplicationUnequalNumberOfSlicesPerNode
specifier|public
name|void
name|testReplicationUnequalNumberOfSlicesPerNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Integer
name|numberOfNodes
init|=
literal|4
decl_stmt|;
name|Integer
name|numberOfNodesToCreateOn
init|=
literal|4
decl_stmt|;
name|CreateNodeListOptions
name|createNodeListOptions
init|=
name|CreateNodeListOptions
operator|.
name|DONT_SEND
decl_stmt|;
name|Integer
name|replicationFactor
init|=
literal|2
decl_stmt|;
name|Integer
name|numberOfSlices
init|=
literal|3
decl_stmt|;
name|Integer
name|maxShardsPerNode
init|=
literal|2
decl_stmt|;
name|testTemplate
argument_list|(
name|numberOfNodes
argument_list|,
name|numberOfNodesToCreateOn
argument_list|,
name|createNodeListOptions
argument_list|,
name|replicationFactor
argument_list|,
name|numberOfSlices
argument_list|,
name|maxShardsPerNode
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoReplicationCollectionNotCreatedDueToMaxShardsPerNodeLimit
specifier|public
name|void
name|testNoReplicationCollectionNotCreatedDueToMaxShardsPerNodeLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|Integer
name|numberOfNodes
init|=
literal|4
decl_stmt|;
name|Integer
name|numberOfNodesToCreateOn
init|=
literal|4
decl_stmt|;
name|CreateNodeListOptions
name|createNodeListOptions
init|=
name|CreateNodeListOptions
operator|.
name|DONT_SEND
decl_stmt|;
name|Integer
name|replicationFactor
init|=
literal|1
decl_stmt|;
name|Integer
name|numberOfSlices
init|=
literal|6
decl_stmt|;
name|Integer
name|maxShardsPerNode
init|=
literal|1
decl_stmt|;
name|testTemplate
argument_list|(
name|numberOfNodes
argument_list|,
name|numberOfNodesToCreateOn
argument_list|,
name|createNodeListOptions
argument_list|,
name|replicationFactor
argument_list|,
name|numberOfSlices
argument_list|,
name|maxShardsPerNode
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReplicationCollectionNotCreatedDueToMaxShardsPerNodeLimit
specifier|public
name|void
name|testReplicationCollectionNotCreatedDueToMaxShardsPerNodeLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|Integer
name|numberOfNodes
init|=
literal|4
decl_stmt|;
name|Integer
name|numberOfNodesToCreateOn
init|=
literal|4
decl_stmt|;
name|CreateNodeListOptions
name|createNodeListOptions
init|=
name|CreateNodeListOptions
operator|.
name|DONT_SEND
decl_stmt|;
name|Integer
name|replicationFactor
init|=
literal|2
decl_stmt|;
name|Integer
name|numberOfSlices
init|=
literal|3
decl_stmt|;
name|Integer
name|maxShardsPerNode
init|=
literal|1
decl_stmt|;
name|testTemplate
argument_list|(
name|numberOfNodes
argument_list|,
name|numberOfNodesToCreateOn
argument_list|,
name|createNodeListOptions
argument_list|,
name|replicationFactor
argument_list|,
name|numberOfSlices
argument_list|,
name|maxShardsPerNode
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoReplicationLimitedNodesToCreateOn
specifier|public
name|void
name|testNoReplicationLimitedNodesToCreateOn
parameter_list|()
throws|throws
name|Exception
block|{
name|Integer
name|numberOfNodes
init|=
literal|4
decl_stmt|;
name|Integer
name|numberOfNodesToCreateOn
init|=
literal|2
decl_stmt|;
name|CreateNodeListOptions
name|createNodeListOptions
init|=
name|CreateNodeListOptions
operator|.
name|SEND
decl_stmt|;
name|Integer
name|replicationFactor
init|=
literal|1
decl_stmt|;
name|Integer
name|numberOfSlices
init|=
literal|6
decl_stmt|;
name|Integer
name|maxShardsPerNode
init|=
literal|3
decl_stmt|;
name|testTemplate
argument_list|(
name|numberOfNodes
argument_list|,
name|numberOfNodesToCreateOn
argument_list|,
name|createNodeListOptions
argument_list|,
name|replicationFactor
argument_list|,
name|numberOfSlices
argument_list|,
name|maxShardsPerNode
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReplicationLimitedNodesToCreateOn
specifier|public
name|void
name|testReplicationLimitedNodesToCreateOn
parameter_list|()
throws|throws
name|Exception
block|{
name|Integer
name|numberOfNodes
init|=
literal|4
decl_stmt|;
name|Integer
name|numberOfNodesToCreateOn
init|=
literal|2
decl_stmt|;
name|CreateNodeListOptions
name|createNodeListOptions
init|=
name|CreateNodeListOptions
operator|.
name|SEND
decl_stmt|;
name|Integer
name|replicationFactor
init|=
literal|2
decl_stmt|;
name|Integer
name|numberOfSlices
init|=
literal|3
decl_stmt|;
name|Integer
name|maxShardsPerNode
init|=
literal|3
decl_stmt|;
name|testTemplate
argument_list|(
name|numberOfNodes
argument_list|,
name|numberOfNodesToCreateOn
argument_list|,
name|createNodeListOptions
argument_list|,
name|replicationFactor
argument_list|,
name|numberOfSlices
argument_list|,
name|maxShardsPerNode
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoReplicationCollectionNotCreatedDueToMaxShardsPerNodeAndNodesToCreateOnLimits
specifier|public
name|void
name|testNoReplicationCollectionNotCreatedDueToMaxShardsPerNodeAndNodesToCreateOnLimits
parameter_list|()
throws|throws
name|Exception
block|{
name|Integer
name|numberOfNodes
init|=
literal|4
decl_stmt|;
name|Integer
name|numberOfNodesToCreateOn
init|=
literal|3
decl_stmt|;
name|CreateNodeListOptions
name|createNodeListOptions
init|=
name|CreateNodeListOptions
operator|.
name|SEND
decl_stmt|;
name|Integer
name|replicationFactor
init|=
literal|1
decl_stmt|;
name|Integer
name|numberOfSlices
init|=
literal|8
decl_stmt|;
name|Integer
name|maxShardsPerNode
init|=
literal|2
decl_stmt|;
name|testTemplate
argument_list|(
name|numberOfNodes
argument_list|,
name|numberOfNodesToCreateOn
argument_list|,
name|createNodeListOptions
argument_list|,
name|replicationFactor
argument_list|,
name|numberOfSlices
argument_list|,
name|maxShardsPerNode
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReplicationCollectionNotCreatedDueToMaxShardsPerNodeAndNodesToCreateOnLimits
specifier|public
name|void
name|testReplicationCollectionNotCreatedDueToMaxShardsPerNodeAndNodesToCreateOnLimits
parameter_list|()
throws|throws
name|Exception
block|{
name|Integer
name|numberOfNodes
init|=
literal|4
decl_stmt|;
name|Integer
name|numberOfNodesToCreateOn
init|=
literal|3
decl_stmt|;
name|CreateNodeListOptions
name|createNodeListOptions
init|=
name|CreateNodeListOptions
operator|.
name|SEND
decl_stmt|;
name|Integer
name|replicationFactor
init|=
literal|2
decl_stmt|;
name|Integer
name|numberOfSlices
init|=
literal|4
decl_stmt|;
name|Integer
name|maxShardsPerNode
init|=
literal|2
decl_stmt|;
name|testTemplate
argument_list|(
name|numberOfNodes
argument_list|,
name|numberOfNodesToCreateOn
argument_list|,
name|createNodeListOptions
argument_list|,
name|replicationFactor
argument_list|,
name|numberOfSlices
argument_list|,
name|maxShardsPerNode
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
