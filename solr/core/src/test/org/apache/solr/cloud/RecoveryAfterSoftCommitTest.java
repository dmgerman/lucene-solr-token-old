begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|AbstractUpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|// See SOLR-6640
end_comment
begin_class
annotation|@
name|SolrTestCaseJ4
operator|.
name|SuppressSSL
DECL|class|RecoveryAfterSoftCommitTest
specifier|public
class|class
name|RecoveryAfterSoftCommitTest
extends|extends
name|AbstractFullDistribZkTestBase
block|{
DECL|field|MAX_BUFFERED_DOCS
DECL|field|ULOG_NUM_RECORDS_TO_KEEP
specifier|private
specifier|static
specifier|final
name|int
name|MAX_BUFFERED_DOCS
init|=
literal|2
decl_stmt|,
name|ULOG_NUM_RECORDS_TO_KEEP
init|=
literal|2
decl_stmt|;
DECL|method|RecoveryAfterSoftCommitTest
specifier|public
name|RecoveryAfterSoftCommitTest
parameter_list|()
block|{
name|sliceCount
operator|=
literal|1
expr_stmt|;
name|fixShardCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|beforeTests
specifier|public
specifier|static
name|void
name|beforeTests
parameter_list|()
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.tests.maxBufferedDocs"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|MAX_BUFFERED_DOCS
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.ulog.numRecordsToKeep"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|ULOG_NUM_RECORDS_TO_KEEP
argument_list|)
argument_list|)
expr_stmt|;
comment|// the default=7000ms artificially slows down recovery and is not needed for this test
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.cloud.wait-for-updates-with-stale-state-pause"
argument_list|,
literal|"500"
argument_list|)
expr_stmt|;
comment|// avoid creating too many files, see SOLR-7421
name|System
operator|.
name|setProperty
argument_list|(
literal|"useCompoundFile"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterTest
specifier|public
specifier|static
name|void
name|afterTest
parameter_list|()
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.tests.maxBufferedDocs"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.ulog.numRecordsToKeep"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.cloud.wait-for-updates-with-stale-state-pause"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"useCompoundFile"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Overrides the parent implementation to install a SocketProxy in-front of the Jetty server.    */
annotation|@
name|Override
DECL|method|createJetty
specifier|public
name|JettySolrRunner
name|createJetty
parameter_list|(
name|File
name|solrHome
parameter_list|,
name|String
name|dataDir
parameter_list|,
name|String
name|shardList
parameter_list|,
name|String
name|solrConfigOverride
parameter_list|,
name|String
name|schemaOverride
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createProxiedJetty
argument_list|(
name|solrHome
argument_list|,
name|dataDir
argument_list|,
name|shardList
argument_list|,
name|solrConfigOverride
argument_list|,
name|schemaOverride
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|waitForRecoveriesToFinish
argument_list|(
name|DEFAULT_COLLECTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// flush twice
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|MAX_BUFFERED_DOCS
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|SolrInputDocument
name|document
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|document
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|document
operator|.
name|addField
argument_list|(
literal|"a_t"
argument_list|,
literal|"text_"
operator|+
name|i
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|add
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
comment|// soft-commit so searchers are open on un-committed but flushed segment files
name|AbstractUpdateRequest
name|request
init|=
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|setAction
argument_list|(
name|AbstractUpdateRequest
operator|.
name|ACTION
operator|.
name|COMMIT
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|cloudClient
operator|.
name|request
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Replica
name|notLeader
init|=
name|ensureAllReplicasAreActive
argument_list|(
name|DEFAULT_COLLECTION
argument_list|,
literal|"shard1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|30
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// ok, now introduce a network partition between the leader and the replica
name|SocketProxy
name|proxy
init|=
name|getProxyForReplica
argument_list|(
name|notLeader
argument_list|)
decl_stmt|;
name|proxy
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// add more than ULOG_NUM_RECORDS_TO_KEEP docs so that peer sync cannot be used for recovery
name|int
name|MAX_DOCS
init|=
literal|2
operator|+
name|MAX_BUFFERED_DOCS
operator|+
name|ULOG_NUM_RECORDS_TO_KEEP
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|MAX_DOCS
condition|;
name|i
operator|++
control|)
block|{
name|SolrInputDocument
name|document
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|document
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|document
operator|.
name|addField
argument_list|(
literal|"a_t"
argument_list|,
literal|"text_"
operator|+
name|i
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|add
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
comment|// Have the partition last at least 1 sec
comment|// While this gives the impression that recovery is timing related, this is
comment|// really only
comment|// to give time for the state to be written to ZK before the test completes.
comment|// In other words,
comment|// without a brief pause, the test finishes so quickly that it doesn't give
comment|// time for the recovery process to kick-in
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000L
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|reopen
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Replica
argument_list|>
name|notLeaders
init|=
name|ensureAllReplicasAreActive
argument_list|(
name|DEFAULT_COLLECTION
argument_list|,
literal|"shard1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|30
argument_list|)
decl_stmt|;
block|}
block|}
end_class
end_unit
