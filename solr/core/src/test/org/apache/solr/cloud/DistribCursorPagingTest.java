begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SentinelIntSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|CursorPagingTest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|LukeRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|GroupParams
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CursorMarkParams
operator|.
name|CURSOR_MARK_PARAM
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CursorMarkParams
operator|.
name|CURSOR_MARK_NEXT
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CursorMarkParams
operator|.
name|CURSOR_MARK_START
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|CursorMark
import|;
end_import
begin_comment
comment|//jdoc
end_comment
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/**  * Distributed tests of deep paging using {@link CursorMark} and {@link #CURSOR_MARK_PARAM}.  *   * NOTE: this class Reuses some utilities from {@link CursorPagingTest} that assume the same schema and configs.  *  * @see CursorPagingTest   */
end_comment
begin_class
annotation|@
name|Slow
DECL|class|DistribCursorPagingTest
specifier|public
class|class
name|DistribCursorPagingTest
extends|extends
name|AbstractFullDistribZkTestBase
block|{
DECL|field|log
specifier|public
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DistribCursorPagingTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|DistribCursorPagingTest
specifier|public
name|DistribCursorPagingTest
parameter_list|()
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.test.useFilterForSortedQuery"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|configString
operator|=
name|CursorPagingTest
operator|.
name|TEST_SOLRCONFIG_NAME
expr_stmt|;
name|schemaString
operator|=
name|CursorPagingTest
operator|.
name|TEST_SCHEMAXML_NAME
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCloudSolrConfig
specifier|protected
name|String
name|getCloudSolrConfig
parameter_list|()
block|{
return|return
name|configString
return|;
block|}
annotation|@
name|Override
DECL|method|doTest
specifier|public
name|void
name|doTest
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|testFinished
init|=
literal|false
decl_stmt|;
try|try
block|{
name|handle
operator|.
name|clear
argument_list|()
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"timestamp"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|doBadInputTest
argument_list|()
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|doSimpleTest
argument_list|()
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|doRandomSortsOnLargeIndex
argument_list|()
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|testFinished
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|testFinished
condition|)
block|{
name|printLayoutOnTearDown
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
DECL|method|doBadInputTest
specifier|private
name|void
name|doBadInputTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|// sometimes seed some data, othertimes use an empty index
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"42"
argument_list|,
literal|"str"
argument_list|,
literal|"z"
argument_list|,
literal|"float"
argument_list|,
literal|"99.99"
argument_list|,
literal|"int"
argument_list|,
literal|"42"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"66"
argument_list|,
literal|"str"
argument_list|,
literal|"x"
argument_list|,
literal|"float"
argument_list|,
literal|"22.00"
argument_list|,
literal|"int"
argument_list|,
literal|"-66"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
block|}
name|commit
argument_list|()
expr_stmt|;
comment|// empty, blank, or bogus cursor
for|for
control|(
name|String
name|c
range|:
operator|new
name|String
index|[]
block|{
literal|""
block|,
literal|"   "
block|,
literal|"all the docs please!"
block|}
control|)
block|{
name|assertFail
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"id desc"
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|c
argument_list|)
argument_list|,
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unable to parse"
argument_list|)
expr_stmt|;
block|}
comment|// no id in sort
name|assertFail
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"score desc"
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|CURSOR_MARK_START
argument_list|)
argument_list|,
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"uniqueKey field"
argument_list|)
expr_stmt|;
comment|// _docid_
name|assertFail
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"_docid_ asc, id desc"
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|CURSOR_MARK_START
argument_list|)
argument_list|,
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"_docid_"
argument_list|)
expr_stmt|;
comment|// using cursor w/ timeAllowed
name|assertFail
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"id desc"
argument_list|,
name|CommonParams
operator|.
name|TIME_ALLOWED
argument_list|,
literal|"1000"
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|CURSOR_MARK_START
argument_list|)
argument_list|,
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|CommonParams
operator|.
name|TIME_ALLOWED
argument_list|)
expr_stmt|;
comment|// using cursor w/ grouping
name|assertFail
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"id desc"
argument_list|,
name|GroupParams
operator|.
name|GROUP
argument_list|,
literal|"true"
argument_list|,
name|GroupParams
operator|.
name|GROUP_FIELD
argument_list|,
literal|"str"
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|CURSOR_MARK_START
argument_list|)
argument_list|,
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Grouping"
argument_list|)
expr_stmt|;
block|}
DECL|method|doSimpleTest
specifier|private
name|void
name|doSimpleTest
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|cursorMark
init|=
name|CURSOR_MARK_START
decl_stmt|;
name|SolrParams
name|params
init|=
literal|null
decl_stmt|;
name|QueryResponse
name|rsp
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|intsort
init|=
literal|"int"
operator|+
operator|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|""
else|:
literal|"_dv"
operator|)
decl_stmt|;
specifier|final
name|String
name|intmissingsort
init|=
name|intsort
decl_stmt|;
comment|// trivial base case: ensure cursorMark against an empty index doesn't blow up
name|cursorMark
operator|=
name|CURSOR_MARK_START
expr_stmt|;
name|params
operator|=
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"4"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"sort"
argument_list|,
literal|"id desc"
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cursorMark
argument_list|,
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
argument_list|)
expr_stmt|;
comment|// don't add in order of either field to ensure we aren't inadvertantly
comment|// counting on internal docid ordering
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|,
literal|"str"
argument_list|,
literal|"c"
argument_list|,
literal|"float"
argument_list|,
literal|"-3.2"
argument_list|,
literal|"int"
argument_list|,
literal|"42"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"str"
argument_list|,
literal|"c"
argument_list|,
literal|"float"
argument_list|,
literal|"-3.2"
argument_list|,
literal|"int"
argument_list|,
literal|"-1976"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"str"
argument_list|,
literal|"c"
argument_list|,
literal|"float"
argument_list|,
literal|"-3.2"
argument_list|,
literal|"int"
argument_list|,
literal|"666"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|,
literal|"str"
argument_list|,
literal|"b"
argument_list|,
literal|"float"
argument_list|,
literal|"64.5"
argument_list|,
literal|"int"
argument_list|,
literal|"-42"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"str"
argument_list|,
literal|"b"
argument_list|,
literal|"float"
argument_list|,
literal|"64.5"
argument_list|,
literal|"int"
argument_list|,
literal|"2001"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"str"
argument_list|,
literal|"b"
argument_list|,
literal|"float"
argument_list|,
literal|"64.5"
argument_list|,
literal|"int"
argument_list|,
literal|"4055"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"str"
argument_list|,
literal|"a"
argument_list|,
literal|"float"
argument_list|,
literal|"64.5"
argument_list|,
literal|"int"
argument_list|,
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"str"
argument_list|,
literal|"a"
argument_list|,
literal|"float"
argument_list|,
literal|"64.5"
argument_list|,
literal|"int"
argument_list|,
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"str"
argument_list|,
literal|"a"
argument_list|,
literal|"float"
argument_list|,
literal|"11.1"
argument_list|,
literal|"int"
argument_list|,
literal|"6"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"str"
argument_list|,
literal|"a"
argument_list|,
literal|"float"
argument_list|,
literal|"11.1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// int is missing
name|commit
argument_list|()
expr_stmt|;
comment|// base case: ensure cursorMark that matches no docs doesn't blow up
name|cursorMark
operator|=
name|CURSOR_MARK_START
expr_stmt|;
name|params
operator|=
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"id:9999999"
argument_list|,
literal|"rows"
argument_list|,
literal|"4"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"sort"
argument_list|,
literal|"id desc"
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cursorMark
argument_list|,
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
argument_list|)
expr_stmt|;
comment|// edge case: ensure rows=0 doesn't blow up and gives back same cursor for next
name|cursorMark
operator|=
name|CURSOR_MARK_START
expr_stmt|;
name|params
operator|=
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"sort"
argument_list|,
literal|"id desc"
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|10
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cursorMark
argument_list|,
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
argument_list|)
expr_stmt|;
comment|// simple id sort
name|cursorMark
operator|=
name|CURSOR_MARK_START
expr_stmt|;
name|params
operator|=
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"-int:6"
argument_list|,
literal|"rows"
argument_list|,
literal|"4"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"sort"
argument_list|,
literal|"id desc"
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|9
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|,
literal|9
argument_list|,
literal|8
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|cursorMark
operator|=
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
comment|//
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|9
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cursorMark
operator|=
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
comment|//
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|9
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cursorMark
operator|=
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
comment|//
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|9
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"no more docs, but cursorMark has changed"
argument_list|,
name|cursorMark
argument_list|,
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
argument_list|)
expr_stmt|;
comment|// NOTE: because field stats and queryNorms can vary amongst shards,
comment|//       not all "obvious" score based sorts can be iterated cleanly.
comment|//       queries that seem like they should result in an obvious "tie" score
comment|//       between two documents (and would tie in a single node case) may actually
comment|//       get diff scores for diff docs if they are on diff shards
comment|//
comment|//       so here, in this test, we can't assert a hardcoded score ordering -- we trust
comment|//       the full walk testing (below)
comment|// int sort with dups, id tie breaker ... and some faceting
name|cursorMark
operator|=
name|CURSOR_MARK_START
expr_stmt|;
name|params
operator|=
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"-int:2001 -int:4055"
argument_list|,
literal|"rows"
argument_list|,
literal|"3"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"str"
argument_list|,
literal|"json.nl"
argument_list|,
literal|"map"
argument_list|,
literal|"sort"
argument_list|,
name|intsort
operator|+
literal|" asc, id asc"
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|8
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|,
literal|7
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|rsp
operator|.
name|getFacetField
argument_list|(
literal|"str"
argument_list|)
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|rsp
operator|.
name|getFacetField
argument_list|(
literal|"str"
argument_list|)
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|cursorMark
operator|=
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
comment|//
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|8
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|rsp
operator|.
name|getFacetField
argument_list|(
literal|"str"
argument_list|)
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|rsp
operator|.
name|getFacetField
argument_list|(
literal|"str"
argument_list|)
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|cursorMark
operator|=
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
comment|//
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|8
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|,
literal|9
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|rsp
operator|.
name|getFacetField
argument_list|(
literal|"str"
argument_list|)
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|rsp
operator|.
name|getFacetField
argument_list|(
literal|"str"
argument_list|)
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|cursorMark
operator|=
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
comment|//
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|8
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|rsp
operator|.
name|getFacetField
argument_list|(
literal|"str"
argument_list|)
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|rsp
operator|.
name|getFacetField
argument_list|(
literal|"str"
argument_list|)
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"no more docs, but cursorMark has changed"
argument_list|,
name|cursorMark
argument_list|,
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
argument_list|)
expr_stmt|;
comment|// int missing first sort with dups, id tie breaker
name|cursorMark
operator|=
name|CURSOR_MARK_START
expr_stmt|;
name|params
operator|=
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"-int:2001 -int:4055"
argument_list|,
literal|"rows"
argument_list|,
literal|"3"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"json.nl"
argument_list|,
literal|"map"
argument_list|,
literal|"sort"
argument_list|,
name|intmissingsort
operator|+
literal|"_first  asc, id asc"
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|8
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|,
literal|3
argument_list|,
literal|7
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cursorMark
operator|=
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
comment|//
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|8
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|cursorMark
operator|=
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
comment|//
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|8
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|,
literal|9
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cursorMark
operator|=
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
comment|//
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|8
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"no more docs, but cursorMark has changed"
argument_list|,
name|cursorMark
argument_list|,
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
argument_list|)
expr_stmt|;
comment|// int missing last sort with dups, id tie breaker
name|cursorMark
operator|=
name|CURSOR_MARK_START
expr_stmt|;
name|params
operator|=
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"-int:2001 -int:4055"
argument_list|,
literal|"rows"
argument_list|,
literal|"3"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"json.nl"
argument_list|,
literal|"map"
argument_list|,
literal|"sort"
argument_list|,
name|intmissingsort
operator|+
literal|"_last asc, id asc"
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|8
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|,
literal|7
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|cursorMark
operator|=
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
comment|//
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|8
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|cursorMark
operator|=
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
comment|//
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|8
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|cursorMark
operator|=
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
comment|//
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|8
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"no more docs, but cursorMark has changed"
argument_list|,
name|cursorMark
argument_list|,
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
argument_list|)
expr_stmt|;
comment|// string sort with dups, id tie breaker
name|cursorMark
operator|=
name|CURSOR_MARK_START
expr_stmt|;
name|params
operator|=
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"6"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"sort"
argument_list|,
literal|"str asc, id desc"
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|10
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|,
literal|6
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|cursorMark
operator|=
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
comment|//
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|10
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|,
literal|7
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cursorMark
operator|=
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
comment|//
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|10
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"no more docs, but cursorMark has changed"
argument_list|,
name|cursorMark
argument_list|,
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
argument_list|)
expr_stmt|;
comment|// tri-level sort with more dups of primary then fit on a page
name|cursorMark
operator|=
name|CURSOR_MARK_START
expr_stmt|;
name|params
operator|=
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"2"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"sort"
argument_list|,
literal|"float asc, "
operator|+
name|intsort
operator|+
literal|" desc, id desc"
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|10
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|,
literal|2
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|cursorMark
operator|=
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
comment|//
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|10
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|,
literal|7
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|cursorMark
operator|=
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
comment|//
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|10
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|,
literal|3
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|cursorMark
operator|=
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
comment|//
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|10
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|cursorMark
operator|=
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
comment|//
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|10
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cursorMark
operator|=
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
comment|// we've exactly exhausted all the results, but solr had no way of know that
comment|//
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|10
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"no more docs, but cursorMark has changed"
argument_list|,
name|cursorMark
argument_list|,
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
argument_list|)
expr_stmt|;
comment|// trivial base case: rows bigger then number of matches
name|cursorMark
operator|=
name|CURSOR_MARK_START
expr_stmt|;
name|params
operator|=
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"id:3 id:7"
argument_list|,
literal|"rows"
argument_list|,
literal|"111"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"sort"
argument_list|,
name|intsort
operator|+
literal|" asc, id asc"
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|2
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|,
literal|7
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|cursorMark
operator|=
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
comment|//
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|2
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"no more docs, but cursorMark has changed"
argument_list|,
name|cursorMark
argument_list|,
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
argument_list|)
expr_stmt|;
comment|// sanity check our full walk method
name|SentinelIntSet
name|ids
decl_stmt|;
name|ids
operator|=
name|assertFullWalkNoDups
argument_list|(
literal|10
argument_list|,
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"4"
argument_list|,
literal|"sort"
argument_list|,
literal|"id desc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|ids
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ids
operator|=
name|assertFullWalkNoDups
argument_list|(
literal|9
argument_list|,
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fq"
argument_list|,
literal|"-id:4"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|ids
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"matched on id:4 unexpectedly"
argument_list|,
name|ids
operator|.
name|exists
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|ids
operator|=
name|assertFullWalkNoDups
argument_list|(
literal|9
argument_list|,
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"3"
argument_list|,
literal|"fq"
argument_list|,
literal|"-id:6"
argument_list|,
literal|"sort"
argument_list|,
literal|"float desc, id asc, int asc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|ids
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"matched on id:6 unexpectedly"
argument_list|,
name|ids
operator|.
name|exists
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|ids
operator|=
name|assertFullWalkNoDups
argument_list|(
literal|9
argument_list|,
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"float:[0 TO *] int:7 id:6"
argument_list|,
literal|"rows"
argument_list|,
literal|"3"
argument_list|,
literal|"sort"
argument_list|,
literal|"score desc, id desc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|ids
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"matched on id:9 unexpectedly"
argument_list|,
name|ids
operator|.
name|exists
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"matched on id:7 unexpectedly"
argument_list|,
name|ids
operator|.
name|exists
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"matched on id:2 unexpectedly"
argument_list|,
name|ids
operator|.
name|exists
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// strategically delete/add some docs in the middle of walking the cursor
name|cursorMark
operator|=
name|CURSOR_MARK_START
expr_stmt|;
name|params
operator|=
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"2"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"sort"
argument_list|,
literal|"str asc, id asc"
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|10
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|cursorMark
operator|=
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
comment|// delete the last guy we got
name|del
argument_list|(
literal|"id:3"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|9
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|,
literal|4
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|cursorMark
operator|=
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
comment|// delete the next guy we expect
name|del
argument_list|(
literal|"id:0"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|8
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|,
literal|5
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|cursorMark
operator|=
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
comment|// update a doc we've already seen so it repeats
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"str"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumFound
argument_list|(
literal|8
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertStartsAt
argument_list|(
literal|0
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|cursorMark
operator|=
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
comment|// update the next doc we expect so it's now in the past
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"str"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|cursorMark
operator|=
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
comment|//
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
argument_list|)
expr_stmt|;
name|assertDocList
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"no more docs, but cursorMark has changed"
argument_list|,
name|cursorMark
argument_list|,
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** randomized testing of a non-trivial number of docs using assertFullWalkNoDups     */
DECL|method|doRandomSortsOnLargeIndex
specifier|public
name|void
name|doRandomSortsOnLargeIndex
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|allFieldNames
init|=
name|getAllSortFieldNames
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numInitialDocs
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|)
decl_stmt|;
specifier|final
name|int
name|totalDocs
init|=
name|atLeast
argument_list|(
literal|500
argument_list|)
decl_stmt|;
comment|// start with a smallish number of documents, and test that we can do a full walk using a
comment|// sort on *every* field in the schema...
name|List
argument_list|<
name|SolrInputDocument
argument_list|>
name|initialDocs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numInitialDocs
condition|;
name|i
operator|++
control|)
block|{
name|SolrInputDocument
name|doc
init|=
name|CursorPagingTest
operator|.
name|buildRandomDocument
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|initialDocs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|commit
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|f
range|:
name|allFieldNames
control|)
block|{
for|for
control|(
name|String
name|order
range|:
operator|new
name|String
index|[]
block|{
literal|" asc"
block|,
literal|" desc"
block|}
control|)
block|{
name|String
name|sort
init|=
name|f
operator|+
name|order
operator|+
operator|(
literal|"id"
operator|.
name|equals
argument_list|(
name|f
argument_list|)
condition|?
literal|""
else|:
literal|", id"
operator|+
name|order
operator|)
decl_stmt|;
name|String
name|rows
init|=
literal|""
operator|+
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|13
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|SentinelIntSet
name|ids
init|=
name|assertFullWalkNoDups
argument_list|(
name|numInitialDocs
argument_list|,
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|f
argument_list|,
literal|"rows"
argument_list|,
name|rows
argument_list|,
literal|"sort"
argument_list|,
name|sort
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|numInitialDocs
operator|!=
name|ids
operator|.
name|size
argument_list|()
condition|)
block|{
name|StringBuilder
name|message
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Expected "
operator|+
name|numInitialDocs
operator|+
literal|" docs but got "
operator|+
name|ids
operator|.
name|size
argument_list|()
operator|+
literal|". "
argument_list|)
decl_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"sort="
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|sort
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|". "
argument_list|)
expr_stmt|;
if|if
condition|(
name|ids
operator|.
name|size
argument_list|()
operator|<
name|numInitialDocs
condition|)
block|{
name|message
operator|.
name|append
argument_list|(
literal|"Missing doc(s): "
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrInputDocument
name|doc
range|:
name|initialDocs
control|)
block|{
name|int
name|id
init|=
operator|(
operator|(
name|Integer
operator|)
name|doc
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ids
operator|.
name|exists
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|QueryResponse
name|rsp
init|=
name|cloudClient
operator|.
name|query
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"id:"
operator|+
name|id
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|message
operator|.
name|append
argument_list|(
literal|"<NOT RETRIEVABLE>:"
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|doc
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|message
operator|.
name|append
argument_list|(
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldValueMap
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|fail
argument_list|(
name|message
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// now add a lot more docs, and test a handful of randomized multi-level sorts
for|for
control|(
name|int
name|i
init|=
name|numInitialDocs
operator|+
literal|1
init|;
name|i
operator|<=
name|totalDocs
condition|;
name|i
operator|++
control|)
block|{
name|SolrInputDocument
name|doc
init|=
name|CursorPagingTest
operator|.
name|buildRandomDocument
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|indexDoc
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|commit
argument_list|()
expr_stmt|;
specifier|final
name|int
name|numRandomSorts
init|=
name|atLeast
argument_list|(
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRandomSorts
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|sort
init|=
name|CursorPagingTest
operator|.
name|buildRandomSort
argument_list|(
name|allFieldNames
argument_list|)
decl_stmt|;
specifier|final
name|String
name|rows
init|=
literal|""
operator|+
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|63
argument_list|,
literal|113
argument_list|)
decl_stmt|;
specifier|final
name|String
name|fl
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"id"
else|:
literal|"id,score"
decl_stmt|;
specifier|final
name|boolean
name|matchAll
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
specifier|final
name|String
name|q
init|=
name|matchAll
condition|?
literal|"*:*"
else|:
name|CursorPagingTest
operator|.
name|buildRandomQuery
argument_list|()
decl_stmt|;
name|SentinelIntSet
name|ids
init|=
name|assertFullWalkNoDups
argument_list|(
name|totalDocs
argument_list|,
name|params
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"fl"
argument_list|,
name|fl
argument_list|,
literal|"rows"
argument_list|,
name|rows
argument_list|,
literal|"sort"
argument_list|,
name|sort
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchAll
condition|)
block|{
name|assertEquals
argument_list|(
name|totalDocs
argument_list|,
name|ids
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Asks the LukeRequestHandler on the control client for a list of the fields in the     * schema and then prunes that list down to just the fields that can be used for sorting,    * and returns them as an immutable list in a deterministically random order.    */
DECL|method|getAllSortFieldNames
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getAllSortFieldNames
parameter_list|()
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|LukeRequest
name|req
init|=
operator|new
name|LukeRequest
argument_list|(
literal|"/admin/luke"
argument_list|)
decl_stmt|;
name|req
operator|.
name|setShowSchema
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|rsp
init|=
name|controlClient
operator|.
name|request
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|fields
init|=
call|(
name|NamedList
call|)
argument_list|(
operator|(
name|NamedList
operator|)
name|rsp
operator|.
name|get
argument_list|(
literal|"schema"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"fields"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|item
range|:
name|fields
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|item
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|CursorPagingTest
operator|.
name|pruneAndDeterministicallySort
argument_list|(
name|names
argument_list|)
return|;
block|}
comment|/**    * execute a request, verify that we get an expected error    */
DECL|method|assertFail
specifier|public
name|void
name|assertFail
parameter_list|(
name|SolrParams
name|p
parameter_list|,
name|ErrorCode
name|expCode
parameter_list|,
name|String
name|expSubstr
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|ignoreException
argument_list|(
name|expSubstr
argument_list|)
expr_stmt|;
name|query
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception matching expected: "
operator|+
name|expCode
operator|.
name|code
operator|+
literal|": "
operator|+
name|expSubstr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expCode
operator|.
name|code
argument_list|,
name|e
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected substr not found: "
operator|+
name|expSubstr
operator|+
literal|"<!< "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|expSubstr
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|unIgnoreException
argument_list|(
name|expSubstr
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Given a QueryResponse returned by SolrServer.query, asserts that the    * numFound on the doc list matches the expectation    * @see org.apache.solr.client.solrj.SolrClient#query    */
DECL|method|assertNumFound
specifier|private
name|void
name|assertNumFound
parameter_list|(
name|int
name|expected
parameter_list|,
name|QueryResponse
name|rsp
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|extractDocList
argument_list|(
name|rsp
argument_list|)
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Given a QueryResponse returned by SolrServer.query, asserts that the    * start on the doc list matches the expectation    * @see org.apache.solr.client.solrj.SolrClient#query    */
DECL|method|assertStartsAt
specifier|private
name|void
name|assertStartsAt
parameter_list|(
name|int
name|expected
parameter_list|,
name|QueryResponse
name|rsp
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|extractDocList
argument_list|(
name|rsp
argument_list|)
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Given a QueryResponse returned by SolrServer.query, asserts that the    * "id" of the list of documents returned matches the expected list    * @see org.apache.solr.client.solrj.SolrClient#query    */
DECL|method|assertDocList
specifier|private
name|void
name|assertDocList
parameter_list|(
name|QueryResponse
name|rsp
parameter_list|,
name|Object
modifier|...
name|ids
parameter_list|)
block|{
name|SolrDocumentList
name|docs
init|=
name|extractDocList
argument_list|(
name|rsp
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of docs in response"
argument_list|,
name|ids
operator|.
name|length
argument_list|,
name|docs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|id
range|:
name|ids
control|)
block|{
name|assertEquals
argument_list|(
name|rsp
operator|.
name|toString
argument_list|()
argument_list|,
name|id
argument_list|,
name|docs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
comment|/**    * Given a QueryResponse returned by SolrServer.query, asserts that the    * response does include {@link #CURSOR_MARK_NEXT} key and returns it    * @see org.apache.solr.client.solrj.SolrClient#query    */
DECL|method|assertHashNextCursorMark
specifier|private
name|String
name|assertHashNextCursorMark
parameter_list|(
name|QueryResponse
name|rsp
parameter_list|)
block|{
name|String
name|r
init|=
name|rsp
operator|.
name|getNextCursorMark
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|CURSOR_MARK_NEXT
operator|+
literal|" is null/missing"
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
DECL|method|extractDocList
specifier|private
name|SolrDocumentList
name|extractDocList
parameter_list|(
name|QueryResponse
name|rsp
parameter_list|)
block|{
name|SolrDocumentList
name|docs
init|=
name|rsp
operator|.
name|getResults
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"docList is null"
argument_list|,
name|docs
argument_list|)
expr_stmt|;
return|return
name|docs
return|;
block|}
comment|/**    *<p>    * Given a set of params, executes a cursor query using {@link #CURSOR_MARK_START}     * and then continuously walks the results using {@link #CURSOR_MARK_START} as long     * as a non-0 number of docs ar returned.  This method records the the set of all id's    * (must be postive ints) encountered and throws an assertion failure if any id is     * encountered more then once, or if the set grows above maxSize    *</p>    *    *<p>    * Note that this method explicily uses the "cloudClient" for executing the queries,     * instead of relying on the test infrastructure to execute the queries redundently    * aainst both the cloud client as well as a control client.  This is because term stat     * differences in a sharded setup can result in differnent scores for documents compared     * to the control index -- which can affect the sorting in some cases and cause false     * negatives in the response comparisons (even if we don't include "score" in the "fl")    *</p>    */
DECL|method|assertFullWalkNoDups
specifier|public
name|SentinelIntSet
name|assertFullWalkNoDups
parameter_list|(
name|int
name|maxSize
parameter_list|,
name|SolrParams
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|SentinelIntSet
name|ids
init|=
operator|new
name|SentinelIntSet
argument_list|(
name|maxSize
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|cursorMark
init|=
name|CURSOR_MARK_START
decl_stmt|;
name|int
name|docsOnThisPage
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
while|while
condition|(
literal|0
operator|<
name|docsOnThisPage
condition|)
block|{
specifier|final
name|SolrParams
name|p
init|=
name|p
argument_list|(
name|params
argument_list|,
name|CURSOR_MARK_PARAM
argument_list|,
name|cursorMark
argument_list|)
decl_stmt|;
name|QueryResponse
name|rsp
init|=
name|cloudClient
operator|.
name|query
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|String
name|nextCursorMark
init|=
name|assertHashNextCursorMark
argument_list|(
name|rsp
argument_list|)
decl_stmt|;
name|SolrDocumentList
name|docs
init|=
name|extractDocList
argument_list|(
name|rsp
argument_list|)
decl_stmt|;
name|docsOnThisPage
operator|=
name|docs
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|params
operator|.
name|getInt
argument_list|(
name|CommonParams
operator|.
name|ROWS
argument_list|)
condition|)
block|{
name|int
name|rows
init|=
name|params
operator|.
name|getInt
argument_list|(
name|CommonParams
operator|.
name|ROWS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Too many docs on this page: "
operator|+
name|rows
operator|+
literal|"< "
operator|+
name|docsOnThisPage
argument_list|,
name|docsOnThisPage
operator|<=
name|rows
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|0
operator|==
name|docsOnThisPage
condition|)
block|{
name|assertEquals
argument_list|(
literal|"no more docs, but "
operator|+
name|CURSOR_MARK_NEXT
operator|+
literal|" isn't same"
argument_list|,
name|cursorMark
argument_list|,
name|nextCursorMark
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SolrDocument
name|doc
range|:
name|docs
control|)
block|{
name|int
name|id
init|=
operator|(
operator|(
name|Integer
operator|)
name|doc
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|ids
operator|.
name|exists
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"("
operator|+
name|p
operator|+
literal|") walk already seen: "
operator|+
name|id
decl_stmt|;
try|try
block|{
name|queryAndCompareShards
argument_list|(
name|params
argument_list|(
literal|"distrib"
argument_list|,
literal|"false"
argument_list|,
literal|"q"
argument_list|,
literal|"id:"
operator|+
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|ae
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|msg
operator|+
literal|", found shard inconsistency that would explain it..."
argument_list|,
name|ae
argument_list|)
throw|;
block|}
name|rsp
operator|=
name|cloudClient
operator|.
name|query
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"id:"
operator|+
name|id
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|(
name|msg
operator|+
literal|", don't know why; q=id:"
operator|+
name|id
operator|+
literal|" gives: "
operator|+
name|rsp
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|ids
operator|.
name|put
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"id set bigger then max allowed ("
operator|+
name|maxSize
operator|+
literal|"): "
operator|+
name|ids
operator|.
name|size
argument_list|()
argument_list|,
name|maxSize
operator|<
name|ids
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cursorMark
operator|=
name|nextCursorMark
expr_stmt|;
block|}
return|return
name|ids
return|;
block|}
DECL|method|p
specifier|private
name|SolrParams
name|p
parameter_list|(
name|SolrParams
name|params
parameter_list|,
name|String
modifier|...
name|other
parameter_list|)
block|{
name|SolrParams
name|extras
init|=
name|params
argument_list|(
name|other
argument_list|)
decl_stmt|;
return|return
name|SolrParams
operator|.
name|wrapDefaults
argument_list|(
name|params
argument_list|,
name|extras
argument_list|)
return|;
block|}
block|}
end_class
end_unit
