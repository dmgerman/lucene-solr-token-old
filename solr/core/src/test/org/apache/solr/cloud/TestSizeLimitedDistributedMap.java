begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_class
DECL|class|TestSizeLimitedDistributedMap
specifier|public
class|class
name|TestSizeLimitedDistributedMap
extends|extends
name|SolrTestCaseJ4
block|{
DECL|method|testCleanup
specifier|public
name|void
name|testCleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|zkDir
init|=
name|createTempDir
argument_list|(
literal|"TestSizeLimitedDistributedMap"
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|ZkTestServer
name|server
init|=
operator|new
name|ZkTestServer
argument_list|(
name|zkDir
argument_list|)
decl_stmt|;
try|try
block|{
name|server
operator|.
name|run
argument_list|()
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|tryCleanSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|makeSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|SolrZkClient
name|zkClient
init|=
operator|new
name|SolrZkClient
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
literal|10000
argument_list|)
init|)
block|{
name|DistributedMap
name|map
init|=
name|Overseer
operator|.
name|getCompletedMap
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|map
operator|instanceof
name|SizeLimitedDistributedMap
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Overseer
operator|.
name|NUM_RESPONSES_TO_STORE
condition|;
name|i
operator|++
control|)
block|{
name|map
operator|.
name|put
argument_list|(
literal|"xyz_"
operator|+
name|i
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Number of items do not match"
argument_list|,
name|Overseer
operator|.
name|NUM_RESPONSES_TO_STORE
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// add another to trigger cleanup
name|map
operator|.
name|put
argument_list|(
literal|"xyz_10000"
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Distributed queue was not cleaned up"
argument_list|,
name|Overseer
operator|.
name|NUM_RESPONSES_TO_STORE
operator|-
operator|(
name|Overseer
operator|.
name|NUM_RESPONSES_TO_STORE
operator|/
literal|10
operator|)
operator|+
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|Overseer
operator|.
name|NUM_RESPONSES_TO_STORE
init|;
name|i
operator|>=
name|Overseer
operator|.
name|NUM_RESPONSES_TO_STORE
operator|/
literal|10
condition|;
name|i
operator|--
control|)
block|{
name|assertTrue
argument_list|(
name|map
operator|.
name|contains
argument_list|(
literal|"xyz_"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|Overseer
operator|.
name|NUM_RESPONSES_TO_STORE
operator|/
literal|10
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|assertFalse
argument_list|(
name|map
operator|.
name|contains
argument_list|(
literal|"xyz_"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
