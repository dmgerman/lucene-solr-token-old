begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|rules
operator|.
name|SystemPropertiesRestoreRule
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|SuppressSysoutChecks
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettyConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettyConfig
operator|.
name|Builder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|RequestStatusState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreDescriptor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RevertDefaultThreadHandlerRule
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|RuleChain
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * Test of the MiniSolrCloudCluster functionality. Keep in mind,   * MiniSolrCloudCluster is designed to be used outside of the Lucene test  * hierarchy.  */
end_comment
begin_class
annotation|@
name|SuppressSysoutChecks
argument_list|(
name|bugUrl
operator|=
literal|"Solr logs to JUL"
argument_list|)
DECL|class|TestMiniSolrCloudCluster
specifier|public
class|class
name|TestMiniSolrCloudCluster
extends|extends
name|LuceneTestCase
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|NUM_SERVERS
specifier|protected
name|int
name|NUM_SERVERS
init|=
literal|5
decl_stmt|;
DECL|field|NUM_SHARDS
specifier|protected
name|int
name|NUM_SHARDS
init|=
literal|2
decl_stmt|;
DECL|field|REPLICATION_FACTOR
specifier|protected
name|int
name|REPLICATION_FACTOR
init|=
literal|2
decl_stmt|;
DECL|method|TestMiniSolrCloudCluster
specifier|public
name|TestMiniSolrCloudCluster
parameter_list|()
block|{
name|NUM_SERVERS
operator|=
literal|5
expr_stmt|;
name|NUM_SHARDS
operator|=
literal|2
expr_stmt|;
name|REPLICATION_FACTOR
operator|=
literal|2
expr_stmt|;
block|}
annotation|@
name|Rule
DECL|field|solrTestRules
specifier|public
name|TestRule
name|solrTestRules
init|=
name|RuleChain
operator|.
name|outerRule
argument_list|(
operator|new
name|SystemPropertiesRestoreRule
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|ClassRule
DECL|field|solrClassRules
specifier|public
specifier|static
name|TestRule
name|solrClassRules
init|=
name|RuleChain
operator|.
name|outerRule
argument_list|(
operator|new
name|SystemPropertiesRestoreRule
argument_list|()
argument_list|)
operator|.
name|around
argument_list|(
operator|new
name|RevertDefaultThreadHandlerRule
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|createMiniSolrCloudCluster
specifier|private
name|MiniSolrCloudCluster
name|createMiniSolrCloudCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|Builder
name|jettyConfig
init|=
name|JettyConfig
operator|.
name|builder
argument_list|()
decl_stmt|;
name|jettyConfig
operator|.
name|waitForLoadingCoresToFinish
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
operator|new
name|MiniSolrCloudCluster
argument_list|(
name|NUM_SERVERS
argument_list|,
name|createTempDir
argument_list|()
argument_list|,
name|jettyConfig
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createCollection
specifier|private
name|void
name|createCollection
parameter_list|(
name|MiniSolrCloudCluster
name|miniCluster
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|String
name|createNodeSet
parameter_list|,
name|String
name|asyncId
parameter_list|,
name|Boolean
name|indexToPersist
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|collectionProperties
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|configName
init|=
literal|"solrCloudCollectionConfig"
decl_stmt|;
name|File
name|configDir
init|=
operator|new
name|File
argument_list|(
name|SolrTestCaseJ4
operator|.
name|TEST_HOME
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"collection1"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"conf"
argument_list|)
decl_stmt|;
name|miniCluster
operator|.
name|uploadConfigDir
argument_list|(
name|configDir
argument_list|,
name|configName
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|persistIndex
init|=
operator|(
name|indexToPersist
operator|!=
literal|null
condition|?
name|indexToPersist
operator|.
name|booleanValue
argument_list|()
else|:
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|collectionProperties
operator|==
literal|null
condition|)
block|{
name|collectionProperties
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|collectionProperties
operator|.
name|putIfAbsent
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_CONFIG
argument_list|,
literal|"solrconfig-tlog.xml"
argument_list|)
expr_stmt|;
name|collectionProperties
operator|.
name|putIfAbsent
argument_list|(
literal|"solr.tests.maxBufferedDocs"
argument_list|,
literal|"100000"
argument_list|)
expr_stmt|;
name|collectionProperties
operator|.
name|putIfAbsent
argument_list|(
literal|"solr.tests.ramBufferSizeMB"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
comment|// use non-test classes so RandomizedRunner isn't necessary
name|collectionProperties
operator|.
name|putIfAbsent
argument_list|(
literal|"solr.tests.mergePolicy"
argument_list|,
literal|"org.apache.lucene.index.TieredMergePolicy"
argument_list|)
expr_stmt|;
name|collectionProperties
operator|.
name|putIfAbsent
argument_list|(
literal|"solr.tests.mergeScheduler"
argument_list|,
literal|"org.apache.lucene.index.ConcurrentMergeScheduler"
argument_list|)
expr_stmt|;
name|collectionProperties
operator|.
name|putIfAbsent
argument_list|(
literal|"solr.directoryFactory"
argument_list|,
operator|(
name|persistIndex
condition|?
literal|"solr.StandardDirectoryFactory"
else|:
literal|"solr.RAMDirectoryFactory"
operator|)
argument_list|)
expr_stmt|;
name|miniCluster
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
name|NUM_SHARDS
argument_list|,
name|REPLICATION_FACTOR
argument_list|,
name|configName
argument_list|,
name|createNodeSet
argument_list|,
name|asyncId
argument_list|,
name|collectionProperties
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCollectionCreateSearchDelete
specifier|public
name|void
name|testCollectionCreateSearchDelete
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|collectionName
init|=
literal|"testcollection"
decl_stmt|;
name|MiniSolrCloudCluster
name|miniCluster
init|=
name|createMiniSolrCloudCluster
argument_list|()
decl_stmt|;
specifier|final
name|CloudSolrClient
name|cloudSolrClient
init|=
name|miniCluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
try|try
block|{
name|assertNotNull
argument_list|(
name|miniCluster
operator|.
name|getZkServer
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|JettySolrRunner
argument_list|>
name|jettys
init|=
name|miniCluster
operator|.
name|getJettySolrRunners
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_SERVERS
argument_list|,
name|jettys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|jettys
control|)
block|{
name|assertTrue
argument_list|(
name|jetty
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// shut down a server
name|log
operator|.
name|info
argument_list|(
literal|"#### Stopping a server"
argument_list|)
expr_stmt|;
name|JettySolrRunner
name|stoppedServer
init|=
name|miniCluster
operator|.
name|stopJettySolrRunner
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|stoppedServer
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_SERVERS
operator|-
literal|1
argument_list|,
name|miniCluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// create a server
name|log
operator|.
name|info
argument_list|(
literal|"#### Starting a server"
argument_list|)
expr_stmt|;
name|JettySolrRunner
name|startedServer
init|=
name|miniCluster
operator|.
name|startJettySolrRunner
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|startedServer
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_SERVERS
argument_list|,
name|miniCluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// create collection
name|log
operator|.
name|info
argument_list|(
literal|"#### Creating a collection"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|asyncId
init|=
operator|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|null
else|:
literal|"asyncId("
operator|+
name|collectionName
operator|+
literal|".create)="
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|)
decl_stmt|;
name|createCollection
argument_list|(
name|miniCluster
argument_list|,
name|collectionName
argument_list|,
literal|null
argument_list|,
name|asyncId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|asyncId
operator|!=
literal|null
condition|)
block|{
specifier|final
name|RequestStatusState
name|state
init|=
name|AbstractFullDistribZkTestBase
operator|.
name|getRequestStateAfterCompletion
argument_list|(
name|asyncId
argument_list|,
literal|330
argument_list|,
name|cloudSolrClient
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
literal|"did not see async createCollection completion"
argument_list|,
name|RequestStatusState
operator|.
name|COMPLETED
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
name|ZkStateReader
name|zkStateReader
init|=
name|miniCluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|collectionName
argument_list|,
name|zkStateReader
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|330
argument_list|)
expr_stmt|;
comment|// modify/query collection
name|log
operator|.
name|info
argument_list|(
literal|"#### updating a querying collection"
argument_list|)
expr_stmt|;
name|cloudSolrClient
operator|.
name|setDefaultCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|setField
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|cloudSolrClient
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|cloudSolrClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|cloudSolrClient
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove a server not hosting any replicas
name|zkStateReader
operator|.
name|updateClusterState
argument_list|()
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|JettySolrRunner
argument_list|>
name|jettyMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|JettySolrRunner
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|miniCluster
operator|.
name|getJettySolrRunners
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|jetty
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
operator|(
name|jetty
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|getProtocol
argument_list|()
operator|+
literal|"://"
operator|)
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|jettyMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|jetty
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|Slice
argument_list|>
name|slices
init|=
name|clusterState
operator|.
name|getSlices
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
comment|// track the servers not host repliacs
for|for
control|(
name|Slice
name|slice
range|:
name|slices
control|)
block|{
name|jettyMap
operator|.
name|remove
argument_list|(
name|slice
operator|.
name|getLeader
argument_list|()
operator|.
name|getNodeName
argument_list|()
operator|.
name|replace
argument_list|(
literal|"_solr"
argument_list|,
literal|"/solr"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Replica
name|replica
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
name|jettyMap
operator|.
name|remove
argument_list|(
name|replica
operator|.
name|getNodeName
argument_list|()
operator|.
name|replace
argument_list|(
literal|"_solr"
argument_list|,
literal|"/solr"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Expected to find a node without a replica"
argument_list|,
name|jettyMap
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"#### Stopping a server"
argument_list|)
expr_stmt|;
name|JettySolrRunner
name|jettyToStop
init|=
name|jettyMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|jettys
operator|=
name|miniCluster
operator|.
name|getJettySolrRunners
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jettys
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|jettys
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|jettyToStop
argument_list|)
condition|)
block|{
name|miniCluster
operator|.
name|stopJettySolrRunner
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_SERVERS
operator|-
literal|1
argument_list|,
name|miniCluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// re-create a server (to restore original NUM_SERVERS count)
name|log
operator|.
name|info
argument_list|(
literal|"#### Starting a server"
argument_list|)
expr_stmt|;
name|startedServer
operator|=
name|miniCluster
operator|.
name|startJettySolrRunner
argument_list|(
name|jettyToStop
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|startedServer
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_SERVERS
argument_list|,
name|miniCluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// delete the collection we created earlier
name|miniCluster
operator|.
name|deleteCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForCollectionToDisappear
argument_list|(
name|collectionName
argument_list|,
name|zkStateReader
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|330
argument_list|)
expr_stmt|;
comment|// create it again
name|String
name|asyncId2
init|=
operator|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|null
else|:
literal|"asyncId("
operator|+
name|collectionName
operator|+
literal|".create)="
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|)
decl_stmt|;
name|createCollection
argument_list|(
name|miniCluster
argument_list|,
name|collectionName
argument_list|,
literal|null
argument_list|,
name|asyncId2
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|asyncId2
operator|!=
literal|null
condition|)
block|{
specifier|final
name|RequestStatusState
name|state
init|=
name|AbstractFullDistribZkTestBase
operator|.
name|getRequestStateAfterCompletion
argument_list|(
name|asyncId2
argument_list|,
literal|330
argument_list|,
name|cloudSolrClient
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
literal|"did not see async createCollection completion"
argument_list|,
name|RequestStatusState
operator|.
name|COMPLETED
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|collectionName
argument_list|,
name|zkStateReader
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|330
argument_list|)
expr_stmt|;
comment|// check that there's no left-over state
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cloudSolrClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|cloudSolrClient
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|cloudSolrClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cloudSolrClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|miniCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testErrorsInStartup
specifier|public
name|void
name|testErrorsInStartup
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicInteger
name|jettyIndex
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|MiniSolrCloudCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniSolrCloudCluster
argument_list|(
literal|3
argument_list|,
name|createTempDir
argument_list|()
argument_list|,
name|JettyConfig
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|JettySolrRunner
name|startJettySolrRunner
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|context
parameter_list|,
name|JettyConfig
name|config
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|jettyIndex
operator|.
name|incrementAndGet
argument_list|()
operator|!=
literal|2
condition|)
return|return
name|super
operator|.
name|startJettySolrRunner
argument_list|(
name|name
argument_list|,
name|context
argument_list|,
name|config
argument_list|)
return|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Fake exception on startup!"
argument_list|)
throw|;
block|}
block|}
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an exception to be thrown from MiniSolrCloudCluster"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Error starting up MiniSolrCloudCluster"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected one suppressed exception"
argument_list|,
literal|1
argument_list|,
name|e
operator|.
name|getSuppressed
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Fake exception on startup!"
argument_list|,
name|e
operator|.
name|getSuppressed
argument_list|()
index|[
literal|0
index|]
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testErrorsInShutdown
specifier|public
name|void
name|testErrorsInShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicInteger
name|jettyIndex
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|MiniSolrCloudCluster
name|cluster
init|=
operator|new
name|MiniSolrCloudCluster
argument_list|(
literal|3
argument_list|,
name|createTempDir
argument_list|()
argument_list|,
name|JettyConfig
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|JettySolrRunner
name|stopJettySolrRunner
parameter_list|(
name|JettySolrRunner
name|jetty
parameter_list|)
throws|throws
name|Exception
block|{
name|JettySolrRunner
name|j
init|=
name|super
operator|.
name|stopJettySolrRunner
argument_list|(
name|jetty
argument_list|)
decl_stmt|;
if|if
condition|(
name|jettyIndex
operator|.
name|incrementAndGet
argument_list|()
operator|==
literal|2
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Fake IOException on shutdown!"
argument_list|)
throw|;
return|return
name|j
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an exception to be thrown on MiniSolrCloudCluster shutdown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Error shutting down MiniSolrCloudCluster"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected one suppressed exception"
argument_list|,
literal|1
argument_list|,
name|e
operator|.
name|getSuppressed
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Fake IOException on shutdown!"
argument_list|,
name|e
operator|.
name|getSuppressed
argument_list|()
index|[
literal|0
index|]
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testExtraFilters
specifier|public
name|void
name|testExtraFilters
parameter_list|()
throws|throws
name|Exception
block|{
name|Builder
name|jettyConfig
init|=
name|JettyConfig
operator|.
name|builder
argument_list|()
decl_stmt|;
name|jettyConfig
operator|.
name|waitForLoadingCoresToFinish
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|jettyConfig
operator|.
name|withFilter
argument_list|(
name|JettySolrRunner
operator|.
name|DebugFilter
operator|.
name|class
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|MiniSolrCloudCluster
name|cluster
init|=
operator|new
name|MiniSolrCloudCluster
argument_list|(
name|NUM_SERVERS
argument_list|,
name|createTempDir
argument_list|()
argument_list|,
name|jettyConfig
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCollectionCreateWithoutCoresThenDelete
specifier|public
name|void
name|testCollectionCreateWithoutCoresThenDelete
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|collectionName
init|=
literal|"testSolrCloudCollectionWithoutCores"
decl_stmt|;
specifier|final
name|MiniSolrCloudCluster
name|miniCluster
init|=
name|createMiniSolrCloudCluster
argument_list|()
decl_stmt|;
specifier|final
name|CloudSolrClient
name|cloudSolrClient
init|=
name|miniCluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
try|try
block|{
name|assertNotNull
argument_list|(
name|miniCluster
operator|.
name|getZkServer
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|miniCluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// create collection
specifier|final
name|String
name|asyncId
init|=
operator|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|null
else|:
literal|"asyncId("
operator|+
name|collectionName
operator|+
literal|".create)="
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|)
decl_stmt|;
name|createCollection
argument_list|(
name|miniCluster
argument_list|,
name|collectionName
argument_list|,
name|OverseerCollectionMessageHandler
operator|.
name|CREATE_NODE_SET_EMPTY
argument_list|,
name|asyncId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|asyncId
operator|!=
literal|null
condition|)
block|{
specifier|final
name|RequestStatusState
name|state
init|=
name|AbstractFullDistribZkTestBase
operator|.
name|getRequestStateAfterCompletion
argument_list|(
name|asyncId
argument_list|,
literal|330
argument_list|,
name|cloudSolrClient
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
literal|"did not see async createCollection completion"
argument_list|,
name|RequestStatusState
operator|.
name|COMPLETED
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|SolrZkClient
name|zkClient
init|=
operator|new
name|SolrZkClient
argument_list|(
name|miniCluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|AbstractZkTestCase
operator|.
name|TIMEOUT
argument_list|,
name|AbstractZkTestCase
operator|.
name|TIMEOUT
argument_list|,
literal|null
argument_list|)
init|;
name|ZkStateReader
name|zkStateReader
operator|=
operator|new
name|ZkStateReader
argument_list|(
name|zkClient
argument_list|)
init|)
block|{
comment|// wait for collection to appear
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|collectionName
argument_list|,
name|zkStateReader
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|330
argument_list|)
expr_stmt|;
comment|// check the collection's corelessness
block|{
name|int
name|coreCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|entry
range|:
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlicesMap
argument_list|(
name|collectionName
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|coreCount
operator|+=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|coreCount
argument_list|)
expr_stmt|;
block|}
comment|// delete the collection we created earlier
name|miniCluster
operator|.
name|deleteCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForCollectionToDisappear
argument_list|(
name|collectionName
argument_list|,
name|zkStateReader
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|330
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|miniCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testStopAllStartAll
specifier|public
name|void
name|testStopAllStartAll
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|collectionName
init|=
literal|"testStopAllStartAllCollection"
decl_stmt|;
specifier|final
name|MiniSolrCloudCluster
name|miniCluster
init|=
name|createMiniSolrCloudCluster
argument_list|()
decl_stmt|;
try|try
block|{
name|assertNotNull
argument_list|(
name|miniCluster
operator|.
name|getZkServer
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|JettySolrRunner
argument_list|>
name|jettys
init|=
name|miniCluster
operator|.
name|getJettySolrRunners
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_SERVERS
argument_list|,
name|jettys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|jettys
control|)
block|{
name|assertTrue
argument_list|(
name|jetty
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|createCollection
argument_list|(
name|miniCluster
argument_list|,
name|collectionName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|CloudSolrClient
name|cloudSolrClient
init|=
name|miniCluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
name|cloudSolrClient
operator|.
name|setDefaultCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
specifier|final
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
specifier|final
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
try|try
init|(
name|SolrZkClient
name|zkClient
init|=
operator|new
name|SolrZkClient
argument_list|(
name|miniCluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|AbstractZkTestCase
operator|.
name|TIMEOUT
argument_list|,
name|AbstractZkTestCase
operator|.
name|TIMEOUT
argument_list|,
literal|null
argument_list|)
init|;
name|ZkStateReader
name|zkStateReader
operator|=
operator|new
name|ZkStateReader
argument_list|(
name|zkClient
argument_list|)
init|)
block|{
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|collectionName
argument_list|,
name|zkStateReader
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|330
argument_list|)
expr_stmt|;
comment|// modify collection
specifier|final
name|int
name|numDocs
init|=
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|ii
init|=
literal|1
init|;
name|ii
operator|<=
name|numDocs
condition|;
operator|++
name|ii
control|)
block|{
name|doc
operator|.
name|setField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|ii
argument_list|)
expr_stmt|;
name|cloudSolrClient
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|ii
operator|*
literal|2
operator|==
name|numDocs
condition|)
name|cloudSolrClient
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|cloudSolrClient
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// query collection
block|{
specifier|final
name|QueryResponse
name|rsp
init|=
name|cloudSolrClient
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numDocs
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// the test itself
name|zkStateReader
operator|.
name|updateClusterState
argument_list|()
expr_stmt|;
specifier|final
name|ClusterState
name|clusterState
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
specifier|final
name|HashSet
argument_list|<
name|Integer
argument_list|>
name|leaderIndices
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|HashSet
argument_list|<
name|Integer
argument_list|>
name|followerIndices
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
block|{
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|shardLeaderMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Slice
name|slice
range|:
name|clusterState
operator|.
name|getSlices
argument_list|(
name|collectionName
argument_list|)
control|)
block|{
for|for
control|(
specifier|final
name|Replica
name|replica
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
name|shardLeaderMap
operator|.
name|put
argument_list|(
name|replica
operator|.
name|getNodeName
argument_list|()
operator|.
name|replace
argument_list|(
literal|"_solr"
argument_list|,
literal|"/solr"
argument_list|)
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
name|shardLeaderMap
operator|.
name|put
argument_list|(
name|slice
operator|.
name|getLeader
argument_list|()
operator|.
name|getNodeName
argument_list|()
operator|.
name|replace
argument_list|(
literal|"_solr"
argument_list|,
literal|"/solr"
argument_list|)
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|jettys
operator|.
name|size
argument_list|()
condition|;
operator|++
name|ii
control|)
block|{
specifier|final
name|URL
name|jettyBaseUrl
init|=
name|jettys
operator|.
name|get
argument_list|(
name|ii
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
decl_stmt|;
specifier|final
name|String
name|jettyBaseUrlString
init|=
name|jettyBaseUrl
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
operator|(
name|jettyBaseUrl
operator|.
name|getProtocol
argument_list|()
operator|+
literal|"://"
operator|)
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Boolean
name|isLeader
init|=
name|shardLeaderMap
operator|.
name|get
argument_list|(
name|jettyBaseUrlString
argument_list|)
decl_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|isLeader
argument_list|)
condition|)
block|{
name|leaderIndices
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|ii
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Boolean
operator|.
name|FALSE
operator|.
name|equals
argument_list|(
name|isLeader
argument_list|)
condition|)
block|{
name|followerIndices
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|ii
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// else neither leader nor follower i.e. node without a replica (for our collection)
block|}
block|}
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|leaderIndicesList
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|leaderIndices
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|followerIndicesList
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|followerIndices
argument_list|)
decl_stmt|;
comment|// first stop the followers (in no particular order)
name|Collections
operator|.
name|shuffle
argument_list|(
name|followerIndicesList
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|ii
range|:
name|followerIndicesList
control|)
block|{
if|if
condition|(
operator|!
name|leaderIndices
operator|.
name|contains
argument_list|(
name|ii
argument_list|)
condition|)
block|{
name|miniCluster
operator|.
name|stopJettySolrRunner
argument_list|(
name|jettys
operator|.
name|get
argument_list|(
name|ii
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// then stop the leaders (again in no particular order)
name|Collections
operator|.
name|shuffle
argument_list|(
name|leaderIndicesList
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|ii
range|:
name|leaderIndicesList
control|)
block|{
name|miniCluster
operator|.
name|stopJettySolrRunner
argument_list|(
name|jettys
operator|.
name|get
argument_list|(
name|ii
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// calculate restart order
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|restartIndicesList
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|leaderIndicesList
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|restartIndicesList
operator|.
name|addAll
argument_list|(
name|leaderIndicesList
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|followerIndicesList
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|restartIndicesList
operator|.
name|addAll
argument_list|(
name|followerIndicesList
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
name|Collections
operator|.
name|shuffle
argument_list|(
name|restartIndicesList
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
comment|// and then restart jettys in that order
for|for
control|(
name|Integer
name|ii
range|:
name|restartIndicesList
control|)
block|{
specifier|final
name|JettySolrRunner
name|jetty
init|=
name|jettys
operator|.
name|get
argument_list|(
name|ii
operator|.
name|intValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|jetty
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|miniCluster
operator|.
name|startJettySolrRunner
argument_list|(
name|jetty
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jetty
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|collectionName
argument_list|,
name|zkStateReader
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|330
argument_list|)
expr_stmt|;
name|zkStateReader
operator|.
name|updateClusterState
argument_list|()
expr_stmt|;
comment|// re-query collection
block|{
specifier|final
name|QueryResponse
name|rsp
init|=
name|cloudSolrClient
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numDocs
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// delete the collection we created earlier
name|miniCluster
operator|.
name|deleteCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForCollectionToDisappear
argument_list|(
name|collectionName
argument_list|,
name|zkStateReader
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|330
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|miniCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
