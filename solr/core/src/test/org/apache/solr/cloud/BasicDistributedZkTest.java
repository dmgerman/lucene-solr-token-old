begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|JSONTestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|AbstractUpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|ContentStreamUpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
operator|.
name|Create
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|CoreAdminResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|UpdateResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|UpdateParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|SolrCmdDistributor
operator|.
name|Request
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DefaultSolrThreadFactory
import|;
end_import
begin_comment
comment|/**  * This test simply does a bunch of basic things in solrcloud mode and asserts things  * work as expected.  */
end_comment
begin_class
annotation|@
name|Slow
DECL|class|BasicDistributedZkTest
specifier|public
class|class
name|BasicDistributedZkTest
extends|extends
name|AbstractDistribZkTestBase
block|{
DECL|field|DEFAULT_COLLECTION
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_COLLECTION
init|=
literal|"collection1"
decl_stmt|;
DECL|field|DEBUG
specifier|private
specifier|static
specifier|final
name|boolean
name|DEBUG
init|=
literal|false
decl_stmt|;
DECL|field|t1
name|String
name|t1
init|=
literal|"a_t"
decl_stmt|;
DECL|field|i1
name|String
name|i1
init|=
literal|"a_si"
decl_stmt|;
DECL|field|nint
name|String
name|nint
init|=
literal|"n_i"
decl_stmt|;
DECL|field|tint
name|String
name|tint
init|=
literal|"n_ti"
decl_stmt|;
DECL|field|nfloat
name|String
name|nfloat
init|=
literal|"n_f"
decl_stmt|;
DECL|field|tfloat
name|String
name|tfloat
init|=
literal|"n_tf"
decl_stmt|;
DECL|field|ndouble
name|String
name|ndouble
init|=
literal|"n_d"
decl_stmt|;
DECL|field|tdouble
name|String
name|tdouble
init|=
literal|"n_td"
decl_stmt|;
DECL|field|nlong
name|String
name|nlong
init|=
literal|"n_l"
decl_stmt|;
DECL|field|tlong
name|String
name|tlong
init|=
literal|"other_tl1"
decl_stmt|;
DECL|field|ndate
name|String
name|ndate
init|=
literal|"n_dt"
decl_stmt|;
DECL|field|tdate
name|String
name|tdate
init|=
literal|"n_tdt"
decl_stmt|;
DECL|field|oddField
name|String
name|oddField
init|=
literal|"oddField_s"
decl_stmt|;
DECL|field|missingField
name|String
name|missingField
init|=
literal|"ignore_exception__missing_but_valid_field_t"
decl_stmt|;
DECL|field|invalidField
name|String
name|invalidField
init|=
literal|"ignore_exception__invalid_field_not_in_schema"
decl_stmt|;
DECL|field|otherCollectionClients
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SolrServer
argument_list|>
argument_list|>
name|otherCollectionClients
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SolrServer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|oneInstanceCollection
specifier|private
name|String
name|oneInstanceCollection
init|=
literal|"oneInstanceCollection"
decl_stmt|;
DECL|field|oneInstanceCollection2
specifier|private
name|String
name|oneInstanceCollection2
init|=
literal|"oneInstanceCollection2"
decl_stmt|;
DECL|field|executor
name|ThreadPoolExecutor
name|executor
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
operator|new
name|DefaultSolrThreadFactory
argument_list|(
literal|"testExecutor"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|completionService
name|CompletionService
argument_list|<
name|Request
argument_list|>
name|completionService
decl_stmt|;
DECL|field|pending
name|Set
argument_list|<
name|Future
argument_list|<
name|Request
argument_list|>
argument_list|>
name|pending
decl_stmt|;
DECL|method|BasicDistributedZkTest
specifier|public
name|BasicDistributedZkTest
parameter_list|()
block|{
name|fixShardCount
operator|=
literal|true
expr_stmt|;
name|shardCount
operator|=
literal|3
expr_stmt|;
name|completionService
operator|=
operator|new
name|ExecutorCompletionService
argument_list|<
name|Request
argument_list|>
argument_list|(
name|executor
argument_list|)
expr_stmt|;
name|pending
operator|=
operator|new
name|HashSet
argument_list|<
name|Future
argument_list|<
name|Request
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDistributedParams
specifier|protected
name|void
name|setDistributedParams
parameter_list|(
name|ModifiableSolrParams
name|params
parameter_list|)
block|{
if|if
condition|(
name|r
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// don't set shards, let that be figured out from the cloud state
block|}
else|else
block|{
comment|// use shard ids rather than physical locations
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shardCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"shard"
operator|+
operator|(
name|i
operator|+
literal|3
operator|)
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|set
argument_list|(
literal|"shards"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doTest
specifier|public
name|void
name|doTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setLoggingLevel(null);
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|1
argument_list|,
name|i1
argument_list|,
literal|100
argument_list|,
name|tlong
argument_list|,
literal|100
argument_list|,
name|t1
argument_list|,
literal|"now is the time for all good men"
argument_list|,
literal|"foo_f"
argument_list|,
literal|1.414f
argument_list|,
literal|"foo_b"
argument_list|,
literal|"true"
argument_list|,
literal|"foo_d"
argument_list|,
literal|1.414d
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|2
argument_list|,
name|i1
argument_list|,
literal|50
argument_list|,
name|tlong
argument_list|,
literal|50
argument_list|,
name|t1
argument_list|,
literal|"to come to the aid of their country."
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|3
argument_list|,
name|i1
argument_list|,
literal|2
argument_list|,
name|tlong
argument_list|,
literal|2
argument_list|,
name|t1
argument_list|,
literal|"how now brown cow"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|4
argument_list|,
name|i1
argument_list|,
operator|-
literal|100
argument_list|,
name|tlong
argument_list|,
literal|101
argument_list|,
name|t1
argument_list|,
literal|"the quick fox jumped over the lazy dog"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|5
argument_list|,
name|i1
argument_list|,
literal|500
argument_list|,
name|tlong
argument_list|,
literal|500
argument_list|,
name|t1
argument_list|,
literal|"the quick fox jumped way over the lazy dog"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|6
argument_list|,
name|i1
argument_list|,
operator|-
literal|600
argument_list|,
name|tlong
argument_list|,
literal|600
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy sat on a wall"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|7
argument_list|,
name|i1
argument_list|,
literal|123
argument_list|,
name|tlong
argument_list|,
literal|123
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy had a great fall"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|8
argument_list|,
name|i1
argument_list|,
literal|876
argument_list|,
name|tlong
argument_list|,
literal|876
argument_list|,
name|t1
argument_list|,
literal|"all the kings horses and all the kings men"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|9
argument_list|,
name|i1
argument_list|,
literal|7
argument_list|,
name|tlong
argument_list|,
literal|7
argument_list|,
name|t1
argument_list|,
literal|"couldn't put humpty together again"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|10
argument_list|,
name|i1
argument_list|,
literal|4321
argument_list|,
name|tlong
argument_list|,
literal|4321
argument_list|,
name|t1
argument_list|,
literal|"this too shall pass"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|11
argument_list|,
name|i1
argument_list|,
operator|-
literal|987
argument_list|,
name|tlong
argument_list|,
literal|987
argument_list|,
name|t1
argument_list|,
literal|"An eye for eye only ends up making the whole world blind."
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|12
argument_list|,
name|i1
argument_list|,
literal|379
argument_list|,
name|tlong
argument_list|,
literal|379
argument_list|,
name|t1
argument_list|,
literal|"Great works are performed, not by strength, but by perseverance."
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|13
argument_list|,
name|i1
argument_list|,
literal|232
argument_list|,
name|tlong
argument_list|,
literal|232
argument_list|,
name|t1
argument_list|,
literal|"no eggs on wall, lesson learned"
argument_list|,
name|oddField
argument_list|,
literal|"odd man out"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|14
argument_list|,
literal|"SubjectTerms_mfacet"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mathematical models"
block|,
literal|"mathematical analysis"
block|}
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|15
argument_list|,
literal|"SubjectTerms_mfacet"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"test 1"
block|,
literal|"test 2"
block|,
literal|"test3"
block|}
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|16
argument_list|,
literal|"SubjectTerms_mfacet"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"test 1"
block|,
literal|"test 2"
block|,
literal|"test3"
block|}
argument_list|)
expr_stmt|;
name|String
index|[]
name|vals
init|=
operator|new
name|String
index|[
literal|100
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|vals
index|[
name|i
index|]
operator|=
literal|"test "
operator|+
name|i
expr_stmt|;
block|}
name|indexr
argument_list|(
name|id
argument_list|,
literal|17
argument_list|,
literal|"SubjectTerms_mfacet"
argument_list|,
name|vals
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|100
init|;
name|i
operator|<
literal|150
condition|;
name|i
operator|++
control|)
block|{
name|indexr
argument_list|(
name|id
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|commit
argument_list|()
expr_stmt|;
name|handle
operator|.
name|clear
argument_list|()
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"QTime"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"timestamp"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
comment|// random value sort
for|for
control|(
name|String
name|f
range|:
name|fieldNames
control|)
block|{
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|f
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|f
operator|+
literal|" asc"
argument_list|)
expr_stmt|;
block|}
comment|// these queries should be exactly ordered and scores should exactly match
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"n_tl1 asc"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"n_tl1 desc"
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"maxScore"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|i1
argument_list|)
expr_stmt|;
comment|// does not expect maxScore. So if it comes ,ignore it. JavaBinCodec.writeSolrDocumentList()
comment|//is agnostic of request params.
name|handle
operator|.
name|remove
argument_list|(
literal|"maxScore"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|i1
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
comment|// even scores should match exactly here
name|handle
operator|.
name|put
argument_list|(
literal|"highlighting"
argument_list|,
name|UNORDERED
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"response"
argument_list|,
name|UNORDERED
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"maxScore"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"quick"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"foofoofoo"
argument_list|,
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
comment|// no fields in returned docs
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"start"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"score"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"quick"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"start"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"start"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"now their fox sat had put"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"now their fox sat had put"
argument_list|,
literal|"fl"
argument_list|,
literal|"foofoofoo"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"matchesnothing"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
operator|-
literal|1
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
operator|-
literal|1
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
operator|-
literal|1
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
operator|-
literal|1
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"quick"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.offset"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// test faceting multiple things at once
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"quick"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
comment|// test filter tagging, facet exclusion, and naming (multi-select facet support)
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"{!key=myquick}quick"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"{!key=myall ex=a}all"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=mykey ex=a}"
operator|+
name|t1
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=other ex=b}"
operator|+
name|t1
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=again ex=a,b}"
operator|+
name|t1
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=a}id:[1 TO 7]"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=b}id:[3 TO 9]"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!ex=t1}SubjectTerms_mfacet"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=t1}SubjectTerms_mfacet:(test 1)"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// test field that is valid in schema but missing in all shards
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|missingField
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// test field that is valid in schema and missing in some shards
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|oddField
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
name|i1
argument_list|)
expr_stmt|;
comment|/*** TODO: the failure may come back in "exception"     try {       // test error produced for field that is invalid for schema       query("q","*:*", "rows",100, "facet","true", "facet.field",invalidField, "facet.mincount",2);       TestCase.fail("SolrServerException expected for invalid field that is not in schema");     } catch (SolrServerException ex) {       // expected     }     ***/
comment|// Try to get better coverage for refinement queries by turning off over requesting.
comment|// This makes it much more likely that we may not get the top facet values and hence
comment|// we turn of that checking.
name|handle
operator|.
name|put
argument_list|(
literal|"facet_fields"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
literal|5
argument_list|,
literal|"facet.shard.limit"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// check a complex key name
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key='a b/c \\' \\} foo'}"
operator|+
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
literal|5
argument_list|,
literal|"facet.shard.limit"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|handle
operator|.
name|remove
argument_list|(
literal|"facet_fields"
argument_list|)
expr_stmt|;
comment|// index the same document to two servers and make sure things
comment|// don't blow up.
if|if
condition|(
name|clients
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
block|{
name|index
argument_list|(
name|id
argument_list|,
literal|100
argument_list|,
name|i1
argument_list|,
literal|107
argument_list|,
name|t1
argument_list|,
literal|"oh no, a duplicate!"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clients
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|index_specific
argument_list|(
name|i
argument_list|,
name|id
argument_list|,
literal|100
argument_list|,
name|i1
argument_list|,
literal|107
argument_list|,
name|t1
argument_list|,
literal|"oh no, a duplicate!"
argument_list|)
expr_stmt|;
block|}
name|commit
argument_list|()
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"duplicate"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"fox duplicate horses"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
comment|// test debugging
name|handle
operator|.
name|put
argument_list|(
literal|"explain"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"debug"
argument_list|,
name|UNORDERED
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"time"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"now their fox sat had put"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
name|CommonParams
operator|.
name|DEBUG_QUERY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"id:[1 TO 5]"
argument_list|,
name|CommonParams
operator|.
name|DEBUG_QUERY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"id:[1 TO 5]"
argument_list|,
name|CommonParams
operator|.
name|DEBUG
argument_list|,
name|CommonParams
operator|.
name|TIMING
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"id:[1 TO 5]"
argument_list|,
name|CommonParams
operator|.
name|DEBUG
argument_list|,
name|CommonParams
operator|.
name|RESULTS
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"id:[1 TO 5]"
argument_list|,
name|CommonParams
operator|.
name|DEBUG
argument_list|,
name|CommonParams
operator|.
name|QUERY
argument_list|)
expr_stmt|;
comment|// TODO: This test currently fails because debug info is obtained only
comment|// on shards with matches.
comment|// query("q","matchesnothing","fl","*,score", "debugQuery", "true");
comment|// would be better if these where all separate tests - but much, much
comment|// slower
name|doOptimisticLockingAndUpdating
argument_list|()
expr_stmt|;
name|testMultipleCollections
argument_list|()
expr_stmt|;
name|testANewCollectionInOneInstance
argument_list|()
expr_stmt|;
name|testSearchByCollectionName
argument_list|()
expr_stmt|;
name|testANewCollectionInOneInstanceWithManualShardAssignement
argument_list|()
expr_stmt|;
name|testNumberOfCommitsWithCommitAfterAdd
argument_list|()
expr_stmt|;
name|testUpdateProcessorsRunOnlyOnce
argument_list|(
literal|"distrib-dup-test-chain-explicit"
argument_list|)
expr_stmt|;
name|testUpdateProcessorsRunOnlyOnce
argument_list|(
literal|"distrib-dup-test-chain-implicit"
argument_list|)
expr_stmt|;
name|testCollectionsAPI
argument_list|()
expr_stmt|;
comment|// Thread.sleep(10000000000L);
if|if
condition|(
name|DEBUG
condition|)
block|{
name|super
operator|.
name|printLayout
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testCollectionsAPI
specifier|private
name|void
name|testCollectionsAPI
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO: fragile - because we dont pass collection.confName, it will only
comment|// find a default if a conf set with a name matching the collection name is found, or
comment|// if there is only one conf set. That and the fact that other tests run first in this
comment|// env make this pretty fragile
comment|// create new collections rapid fire
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|collectionInfos
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
name|atLeast
argument_list|(
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numShards
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|shardCount
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|numReplicas
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
operator|+
literal|1
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"numShards"
argument_list|,
name|numShards
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"numReplicas"
argument_list|,
name|numReplicas
argument_list|)
expr_stmt|;
name|String
name|collectionName
init|=
literal|"awholynewcollection_"
operator|+
name|i
decl_stmt|;
name|int
name|clientIndex
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|numShards
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|numReplicas
argument_list|)
expr_stmt|;
name|collectionInfos
operator|.
name|put
argument_list|(
name|collectionName
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|SolrRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|clients
operator|.
name|get
argument_list|(
name|clientIndex
argument_list|)
operator|.
name|request
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|collectionInfosEntrySet
init|=
name|collectionInfos
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|entry
range|:
name|collectionInfosEntrySet
control|)
block|{
name|String
name|collection
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|checkForCollection
argument_list|(
name|collection
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|url
init|=
name|getUrlFromZk
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|HttpSolrServer
name|collectionClient
init|=
operator|new
name|HttpSolrServer
argument_list|(
name|url
argument_list|)
decl_stmt|;
comment|// poll for a second - it can take a moment before we are ready to serve
name|waitForNon404or503
argument_list|(
name|collectionClient
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|collectionNameList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|collectionNameList
operator|.
name|addAll
argument_list|(
name|collectionInfos
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|collectionName
init|=
name|collectionNameList
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|collectionNameList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|url
init|=
name|getUrlFromZk
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|HttpSolrServer
name|collectionClient
init|=
operator|new
name|HttpSolrServer
argument_list|(
name|url
argument_list|)
decl_stmt|;
comment|// lets try and use the solrj client to index and retrieve a couple documents
name|SolrInputDocument
name|doc1
init|=
name|getDoc
argument_list|(
name|id
argument_list|,
literal|6
argument_list|,
name|i1
argument_list|,
operator|-
literal|600
argument_list|,
name|tlong
argument_list|,
literal|600
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy sat on a wall"
argument_list|)
decl_stmt|;
name|SolrInputDocument
name|doc2
init|=
name|getDoc
argument_list|(
name|id
argument_list|,
literal|7
argument_list|,
name|i1
argument_list|,
operator|-
literal|600
argument_list|,
name|tlong
argument_list|,
literal|600
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy3 sat on a walls"
argument_list|)
decl_stmt|;
name|SolrInputDocument
name|doc3
init|=
name|getDoc
argument_list|(
name|id
argument_list|,
literal|8
argument_list|,
name|i1
argument_list|,
operator|-
literal|600
argument_list|,
name|tlong
argument_list|,
literal|600
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy2 sat on a walled"
argument_list|)
decl_stmt|;
name|collectionClient
operator|.
name|add
argument_list|(
name|doc1
argument_list|)
expr_stmt|;
name|collectionClient
operator|.
name|add
argument_list|(
name|doc2
argument_list|)
expr_stmt|;
name|collectionClient
operator|.
name|add
argument_list|(
name|doc3
argument_list|)
expr_stmt|;
name|collectionClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|collectionClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// lets try a collection reload
comment|// get core open times
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|urlToTimeBefore
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|collectStartTimes
argument_list|(
name|collectionName
argument_list|,
name|urlToTimeBefore
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|urlToTimeBefore
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|RELOAD
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|QueryRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
comment|// we can use this client because we just want base url
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|request
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// reloads make take a short while
name|boolean
name|allTimesAreCorrect
init|=
name|waitForReloads
argument_list|(
name|collectionName
argument_list|,
name|urlToTimeBefore
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"some core start times did not change on reload"
argument_list|,
name|allTimesAreCorrect
argument_list|)
expr_stmt|;
comment|// remove a collection
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|DELETE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|request
operator|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|request
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// ensure its out of the state
name|checkForMissingCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForReloads
specifier|private
name|boolean
name|waitForReloads
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|urlToTimeBefore
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|long
name|timeoutAt
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|30000
decl_stmt|;
name|boolean
name|allTimesAreCorrect
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeoutAt
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|urlToTimeAfter
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|collectStartTimes
argument_list|(
name|collectionName
argument_list|,
name|urlToTimeAfter
argument_list|)
expr_stmt|;
name|boolean
name|retry
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|entries
init|=
name|urlToTimeBefore
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|Long
name|beforeTime
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Long
name|afterTime
init|=
name|urlToTimeAfter
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|afterTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|afterTime
operator|<=
name|beforeTime
condition|)
block|{
name|retry
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|retry
condition|)
block|{
name|allTimesAreCorrect
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
return|return
name|allTimesAreCorrect
return|;
block|}
DECL|method|collectStartTimes
specifier|private
name|void
name|collectStartTimes
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|urlToTime
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
name|collections
init|=
name|solrj
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollectionStates
argument_list|()
decl_stmt|;
if|if
condition|(
name|collections
operator|.
name|containsKey
argument_list|(
name|collectionName
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|collections
operator|.
name|get
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
name|it
init|=
name|slices
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|sliceEntry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|sliceShards
init|=
name|sliceEntry
operator|.
name|getValue
argument_list|()
operator|.
name|getReplicasMap
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
argument_list|>
name|shardIt
init|=
name|sliceShards
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|shardIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|shardEntry
init|=
name|shardIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|ZkCoreNodeProps
name|coreProps
init|=
operator|new
name|ZkCoreNodeProps
argument_list|(
name|shardEntry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|CoreAdminResponse
name|mcr
init|=
name|CoreAdminRequest
operator|.
name|getStatus
argument_list|(
name|coreProps
operator|.
name|getCoreName
argument_list|()
argument_list|,
operator|new
name|HttpSolrServer
argument_list|(
name|coreProps
operator|.
name|getBaseUrl
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|before
init|=
name|mcr
operator|.
name|getStartTime
argument_list|(
name|coreProps
operator|.
name|getCoreName
argument_list|()
argument_list|)
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|urlToTime
operator|.
name|put
argument_list|(
name|coreProps
operator|.
name|getCoreUrl
argument_list|()
argument_list|,
name|before
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Could not find collection in :"
operator|+
name|collections
operator|.
name|keySet
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|getUrlFromZk
specifier|private
name|String
name|getUrlFromZk
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|ClusterState
name|clusterState
init|=
name|solrj
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|clusterState
operator|.
name|getCollectionStates
argument_list|()
operator|.
name|get
argument_list|(
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
name|slices
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Could not find collection:"
operator|+
name|collection
argument_list|)
throw|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|entry
range|:
name|slices
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Slice
name|slice
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|shards
init|=
name|slice
operator|.
name|getReplicasMap
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
argument_list|>
name|shardEntries
init|=
name|shards
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|shardEntry
range|:
name|shardEntries
control|)
block|{
specifier|final
name|ZkNodeProps
name|node
init|=
name|shardEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|clusterState
operator|.
name|liveNodesContain
argument_list|(
name|node
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
argument_list|)
condition|)
block|{
return|return
operator|new
name|ZkCoreNodeProps
argument_list|(
name|node
argument_list|)
operator|.
name|getCoreUrl
argument_list|()
return|;
block|}
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not find a live node for collection:"
operator|+
name|collection
argument_list|)
throw|;
block|}
DECL|method|waitForNon404or503
specifier|private
name|void
name|waitForNon404or503
parameter_list|(
name|HttpSolrServer
name|collectionClient
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrException
name|exp
init|=
literal|null
decl_stmt|;
name|long
name|timeoutAt
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|30000
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeoutAt
condition|)
block|{
name|boolean
name|missing
init|=
literal|false
decl_stmt|;
try|try
block|{
name|collectionClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|e
operator|.
name|code
argument_list|()
operator|==
literal|403
operator|||
name|e
operator|.
name|code
argument_list|()
operator|==
literal|503
operator|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
name|exp
operator|=
name|e
expr_stmt|;
name|missing
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|missing
condition|)
block|{
return|return;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
name|printLayout
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Could not find the new collection - "
operator|+
name|exp
operator|.
name|code
argument_list|()
operator|+
literal|" : "
operator|+
name|collectionClient
operator|.
name|getBaseURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkForCollection
specifier|private
name|void
name|checkForCollection
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|int
name|expectedSlices
parameter_list|)
throws|throws
name|Exception
block|{
comment|// check for an expectedSlices new collection - we poll the state
name|long
name|timeoutAt
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|60000
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|boolean
name|sliceMatch
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeoutAt
condition|)
block|{
name|solrj
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|updateClusterState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|solrj
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
name|collections
init|=
name|clusterState
operator|.
name|getCollectionStates
argument_list|()
decl_stmt|;
if|if
condition|(
name|collections
operator|.
name|containsKey
argument_list|(
name|collectionName
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|collections
operator|.
name|get
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
comment|// did we find expectedSlices slices/shards?
if|if
condition|(
name|slices
operator|.
name|size
argument_list|()
operator|==
name|expectedSlices
condition|)
block|{
name|sliceMatch
operator|=
literal|true
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
comment|// also make sure each are active
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
name|it
init|=
name|slices
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|sliceEntry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|sliceShards
init|=
name|sliceEntry
operator|.
name|getValue
argument_list|()
operator|.
name|getReplicasMap
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
argument_list|>
name|shardIt
init|=
name|sliceShards
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|shardIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|shardEntry
init|=
name|shardIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|shardEntry
operator|.
name|getValue
argument_list|()
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
operator|.
name|equals
argument_list|(
name|ZkStateReader
operator|.
name|ACTIVE
argument_list|)
condition|)
block|{
name|found
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|found
condition|)
break|break;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|printLayout
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|sliceMatch
condition|)
block|{
name|fail
argument_list|(
literal|"Could not find new "
operator|+
name|expectedSlices
operator|+
literal|" slice collection called "
operator|+
name|collectionName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Found expected # of slices, but some nodes are not active for collection called "
operator|+
name|collectionName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|checkForMissingCollection
specifier|private
name|void
name|checkForMissingCollection
parameter_list|(
name|String
name|collectionName
parameter_list|)
throws|throws
name|Exception
block|{
comment|// check for a  collection - we poll the state
name|long
name|timeoutAt
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|15000
decl_stmt|;
name|boolean
name|found
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeoutAt
condition|)
block|{
name|solrj
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|updateClusterState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|solrj
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
name|collections
init|=
name|clusterState
operator|.
name|getCollectionStates
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|collections
operator|.
name|containsKey
argument_list|(
name|collectionName
argument_list|)
condition|)
block|{
name|found
operator|=
literal|false
expr_stmt|;
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|found
condition|)
block|{
name|fail
argument_list|(
literal|"Found collection that should be gone "
operator|+
name|collectionName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Expects a RegexReplaceProcessorFactories in the chain which will    * "double up" the values in two (stored) string fields.    *<p>    * If the values are "double-doubled" or "not-doubled" then we know     * the processor was not run the appropriate number of times    *</p>    */
DECL|method|testUpdateProcessorsRunOnlyOnce
specifier|private
name|void
name|testUpdateProcessorsRunOnlyOnce
parameter_list|(
specifier|final
name|String
name|chain
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|fieldA
init|=
literal|"regex_dup_A_s"
decl_stmt|;
specifier|final
name|String
name|fieldB
init|=
literal|"regex_dup_B_s"
decl_stmt|;
specifier|final
name|String
name|val
init|=
literal|"x"
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|"x_x"
decl_stmt|;
specifier|final
name|ModifiableSolrParams
name|updateParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|updateParams
operator|.
name|add
argument_list|(
name|UpdateParams
operator|.
name|UPDATE_CHAIN
argument_list|,
name|chain
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numLoops
init|=
name|atLeast
argument_list|(
literal|50
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numLoops
condition|;
name|i
operator|++
control|)
block|{
comment|// add doc to random client
name|SolrServer
name|updateClient
init|=
name|clients
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|clients
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|addFields
argument_list|(
name|doc
argument_list|,
name|id
argument_list|,
name|i
argument_list|,
name|fieldA
argument_list|,
name|val
argument_list|,
name|fieldB
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|UpdateResponse
name|ures
init|=
name|add
argument_list|(
name|updateClient
argument_list|,
name|updateParams
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|chain
operator|+
literal|": update failed"
argument_list|,
literal|0
argument_list|,
name|ures
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|ures
operator|=
name|updateClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|chain
operator|+
literal|": commit failed"
argument_list|,
literal|0
argument_list|,
name|ures
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// query for each doc, and check both fields to ensure the value is correct
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numLoops
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|query
init|=
name|id
operator|+
literal|":"
operator|+
name|i
decl_stmt|;
name|QueryResponse
name|qres
init|=
name|queryServer
argument_list|(
operator|new
name|SolrQuery
argument_list|(
name|query
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|chain
operator|+
literal|": query failed: "
operator|+
name|query
argument_list|,
literal|0
argument_list|,
name|qres
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|chain
operator|+
literal|": didn't find correct # docs with query: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|qres
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|SolrDocument
name|doc
init|=
name|qres
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
operator|new
name|String
index|[]
block|{
name|fieldA
block|,
name|fieldB
block|}
control|)
block|{
name|assertEquals
argument_list|(
name|chain
operator|+
literal|": doc#"
operator|+
name|i
operator|+
literal|" has wrong value for "
operator|+
name|field
argument_list|,
name|expected
argument_list|,
name|doc
operator|.
name|getFirstValue
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// cloud level test mainly needed just to make sure that versions and errors are propagated correctly
DECL|method|doOptimisticLockingAndUpdating
specifier|private
name|void
name|doOptimisticLockingAndUpdating
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|sd
init|=
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|1000
argument_list|,
literal|"_version_"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|indexDoc
argument_list|(
name|sd
argument_list|)
expr_stmt|;
name|ignoreException
argument_list|(
literal|"version conflict"
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrServer
name|client
range|:
name|clients
control|)
block|{
try|try
block|{
name|client
operator|.
name|add
argument_list|(
name|sd
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|409
argument_list|,
name|e
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|unIgnoreException
argument_list|(
literal|"version conflict"
argument_list|)
expr_stmt|;
comment|// TODO: test deletes.  SolrJ needs a good way to pass version for delete...
name|sd
operator|=
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|1000
argument_list|,
literal|"foo_i"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|add
argument_list|(
name|sd
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|val
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SolrServer
name|client
range|:
name|clients
control|)
block|{
name|val
operator|+=
literal|10
expr_stmt|;
name|client
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|1000
argument_list|,
literal|"val_i"
argument_list|,
name|map
argument_list|(
literal|"add"
argument_list|,
name|val
argument_list|)
argument_list|,
literal|"foo_i"
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
name|QueryRequest
name|qr
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"id"
argument_list|,
literal|"1000"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|SolrServer
name|client
range|:
name|clients
control|)
block|{
name|val
operator|+=
literal|10
expr_stmt|;
name|NamedList
name|rsp
init|=
name|client
operator|.
name|request
argument_list|(
name|qr
argument_list|)
decl_stmt|;
name|String
name|match
init|=
name|JSONTestUtil
operator|.
name|matchObj
argument_list|(
literal|"/val_i"
argument_list|,
name|rsp
operator|.
name|get
argument_list|(
literal|"doc"
argument_list|)
argument_list|,
name|expected
argument_list|)
decl_stmt|;
if|if
condition|(
name|match
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|match
argument_list|)
throw|;
block|}
block|}
DECL|method|testNumberOfCommitsWithCommitAfterAdd
specifier|private
name|void
name|testNumberOfCommitsWithCommitAfterAdd
parameter_list|()
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|long
name|startCommits
init|=
name|getNumCommits
argument_list|(
operator|(
name|HttpSolrServer
operator|)
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|ContentStreamUpdateRequest
name|up
init|=
operator|new
name|ContentStreamUpdateRequest
argument_list|(
literal|"/update"
argument_list|)
decl_stmt|;
name|up
operator|.
name|addFile
argument_list|(
name|getFile
argument_list|(
literal|"books_numeric_ids.csv"
argument_list|)
argument_list|,
literal|"application/csv"
argument_list|)
expr_stmt|;
name|up
operator|.
name|setCommitWithin
argument_list|(
literal|900000
argument_list|)
expr_stmt|;
name|up
operator|.
name|setAction
argument_list|(
name|AbstractUpdateRequest
operator|.
name|ACTION
operator|.
name|COMMIT
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|result
init|=
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|request
argument_list|(
name|up
argument_list|)
decl_stmt|;
name|long
name|endCommits
init|=
name|getNumCommits
argument_list|(
operator|(
name|HttpSolrServer
operator|)
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|startCommits
operator|+
literal|1L
argument_list|,
name|endCommits
argument_list|)
expr_stmt|;
block|}
DECL|method|getNumCommits
specifier|private
name|Long
name|getNumCommits
parameter_list|(
name|HttpSolrServer
name|solrServer
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|HttpSolrServer
name|server
init|=
operator|new
name|HttpSolrServer
argument_list|(
name|solrServer
operator|.
name|getBaseURL
argument_list|()
argument_list|)
decl_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/admin/mbeans?key=updateHandler&stats=true"
argument_list|)
expr_stmt|;
comment|// use generic request to avoid extra processing of queries
name|QueryRequest
name|req
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|resp
init|=
name|server
operator|.
name|request
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|NamedList
name|mbeans
init|=
operator|(
name|NamedList
operator|)
name|resp
operator|.
name|get
argument_list|(
literal|"solr-mbeans"
argument_list|)
decl_stmt|;
name|NamedList
name|uhandlerCat
init|=
operator|(
name|NamedList
operator|)
name|mbeans
operator|.
name|get
argument_list|(
literal|"UPDATEHANDLER"
argument_list|)
decl_stmt|;
name|NamedList
name|uhandler
init|=
operator|(
name|NamedList
operator|)
name|uhandlerCat
operator|.
name|get
argument_list|(
literal|"updateHandler"
argument_list|)
decl_stmt|;
name|NamedList
name|stats
init|=
operator|(
name|NamedList
operator|)
name|uhandler
operator|.
name|get
argument_list|(
literal|"stats"
argument_list|)
decl_stmt|;
name|Long
name|commits
init|=
operator|(
name|Long
operator|)
name|stats
operator|.
name|get
argument_list|(
literal|"commits"
argument_list|)
decl_stmt|;
return|return
name|commits
return|;
block|}
DECL|method|testANewCollectionInOneInstanceWithManualShardAssignement
specifier|private
name|void
name|testANewCollectionInOneInstanceWithManualShardAssignement
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|SolrServer
argument_list|>
name|collectionClients
init|=
operator|new
name|ArrayList
argument_list|<
name|SolrServer
argument_list|>
argument_list|()
decl_stmt|;
name|SolrServer
name|client
init|=
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|otherCollectionClients
operator|.
name|put
argument_list|(
name|oneInstanceCollection2
argument_list|,
name|collectionClients
argument_list|)
expr_stmt|;
name|String
name|baseUrl
init|=
operator|(
operator|(
name|HttpSolrServer
operator|)
name|client
operator|)
operator|.
name|getBaseURL
argument_list|()
decl_stmt|;
name|createCollection
argument_list|(
name|oneInstanceCollection2
argument_list|,
name|collectionClients
argument_list|,
name|baseUrl
argument_list|,
literal|1
argument_list|,
literal|"slice1"
argument_list|)
expr_stmt|;
name|createCollection
argument_list|(
name|oneInstanceCollection2
argument_list|,
name|collectionClients
argument_list|,
name|baseUrl
argument_list|,
literal|2
argument_list|,
literal|"slice2"
argument_list|)
expr_stmt|;
name|createCollection
argument_list|(
name|oneInstanceCollection2
argument_list|,
name|collectionClients
argument_list|,
name|baseUrl
argument_list|,
literal|3
argument_list|,
literal|"slice2"
argument_list|)
expr_stmt|;
name|createCollection
argument_list|(
name|oneInstanceCollection2
argument_list|,
name|collectionClients
argument_list|,
name|baseUrl
argument_list|,
literal|4
argument_list|,
literal|"slice1"
argument_list|)
expr_stmt|;
while|while
condition|(
name|pending
operator|!=
literal|null
operator|&&
name|pending
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Future
argument_list|<
name|Request
argument_list|>
name|future
init|=
name|completionService
operator|.
name|take
argument_list|()
decl_stmt|;
name|pending
operator|.
name|remove
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
name|SolrServer
name|client1
init|=
name|createNewSolrServer
argument_list|(
name|oneInstanceCollection2
operator|+
literal|"1"
argument_list|,
name|baseUrl
argument_list|)
decl_stmt|;
name|SolrServer
name|client2
init|=
name|createNewSolrServer
argument_list|(
name|oneInstanceCollection2
operator|+
literal|"2"
argument_list|,
name|baseUrl
argument_list|)
decl_stmt|;
name|SolrServer
name|client3
init|=
name|createNewSolrServer
argument_list|(
name|oneInstanceCollection2
operator|+
literal|"3"
argument_list|,
name|baseUrl
argument_list|)
decl_stmt|;
name|SolrServer
name|client4
init|=
name|createNewSolrServer
argument_list|(
name|oneInstanceCollection2
operator|+
literal|"4"
argument_list|,
name|baseUrl
argument_list|)
decl_stmt|;
comment|// no one should be recovering
name|waitForRecoveriesToFinish
argument_list|(
name|oneInstanceCollection2
argument_list|,
name|solrj
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertAllActive
argument_list|(
name|oneInstanceCollection2
argument_list|,
name|solrj
operator|.
name|getZkStateReader
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: enable when we don't falsely get slice1...
comment|// solrj.getZkStateReader().getLeaderUrl(oneInstanceCollection2, "slice1", 30000);
comment|// solrj.getZkStateReader().getLeaderUrl(oneInstanceCollection2, "slice2", 30000);
name|client2
operator|.
name|add
argument_list|(
name|getDoc
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|client3
operator|.
name|add
argument_list|(
name|getDoc
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|client4
operator|.
name|add
argument_list|(
name|getDoc
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|client1
operator|.
name|commit
argument_list|()
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"distrib"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|long
name|oneDocs
init|=
name|client1
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|long
name|twoDocs
init|=
name|client2
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|long
name|threeDocs
init|=
name|client3
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|long
name|fourDocs
init|=
name|client4
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"collection"
argument_list|,
name|oneInstanceCollection2
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"distrib"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|long
name|allDocs
init|=
name|solrj
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
comment|//    System.out.println("1:" + oneDocs);
comment|//    System.out.println("2:" + twoDocs);
comment|//    System.out.println("3:" + threeDocs);
comment|//    System.out.println("4:" + fourDocs);
comment|//    System.out.println("All Docs:" + allDocs);
comment|//    assertEquals(oneDocs, threeDocs);
comment|//    assertEquals(twoDocs, fourDocs);
comment|//    assertNotSame(oneDocs, twoDocs);
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|allDocs
argument_list|)
expr_stmt|;
comment|// we added a role of none on these creates - check for it
name|ZkStateReader
name|zkStateReader
init|=
name|solrj
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|zkStateReader
operator|.
name|updateClusterState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlices
argument_list|(
name|oneInstanceCollection2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|slices
argument_list|)
expr_stmt|;
name|String
name|roles
init|=
name|slices
operator|.
name|get
argument_list|(
literal|"slice1"
argument_list|)
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|ROLES_PROP
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"none"
argument_list|,
name|roles
argument_list|)
expr_stmt|;
block|}
DECL|method|testSearchByCollectionName
specifier|private
name|void
name|testSearchByCollectionName
parameter_list|()
throws|throws
name|SolrServerException
block|{
name|SolrServer
name|client
init|=
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|baseUrl
init|=
operator|(
operator|(
name|HttpSolrServer
operator|)
name|client
operator|)
operator|.
name|getBaseURL
argument_list|()
decl_stmt|;
comment|// the cores each have different names, but if we add the collection name to the url
comment|// we should get mapped to the right core
name|SolrServer
name|client1
init|=
name|createNewSolrServer
argument_list|(
name|oneInstanceCollection
argument_list|,
name|baseUrl
argument_list|)
decl_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|long
name|oneDocs
init|=
name|client1
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|oneDocs
argument_list|)
expr_stmt|;
block|}
DECL|method|testANewCollectionInOneInstance
specifier|private
name|void
name|testANewCollectionInOneInstance
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|SolrServer
argument_list|>
name|collectionClients
init|=
operator|new
name|ArrayList
argument_list|<
name|SolrServer
argument_list|>
argument_list|()
decl_stmt|;
name|SolrServer
name|client
init|=
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|otherCollectionClients
operator|.
name|put
argument_list|(
name|oneInstanceCollection
argument_list|,
name|collectionClients
argument_list|)
expr_stmt|;
name|String
name|baseUrl
init|=
operator|(
operator|(
name|HttpSolrServer
operator|)
name|client
operator|)
operator|.
name|getBaseURL
argument_list|()
decl_stmt|;
name|createCollection
argument_list|(
name|oneInstanceCollection
argument_list|,
name|collectionClients
argument_list|,
name|baseUrl
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|createCollection
argument_list|(
name|oneInstanceCollection
argument_list|,
name|collectionClients
argument_list|,
name|baseUrl
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|createCollection
argument_list|(
name|oneInstanceCollection
argument_list|,
name|collectionClients
argument_list|,
name|baseUrl
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|createCollection
argument_list|(
name|oneInstanceCollection
argument_list|,
name|collectionClients
argument_list|,
name|baseUrl
argument_list|,
literal|4
argument_list|)
expr_stmt|;
while|while
condition|(
name|pending
operator|!=
literal|null
operator|&&
name|pending
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Future
argument_list|<
name|Request
argument_list|>
name|future
init|=
name|completionService
operator|.
name|take
argument_list|()
decl_stmt|;
if|if
condition|(
name|future
operator|==
literal|null
condition|)
return|return;
name|pending
operator|.
name|remove
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
name|SolrServer
name|client1
init|=
name|createNewSolrServer
argument_list|(
name|oneInstanceCollection
operator|+
literal|"1"
argument_list|,
name|baseUrl
argument_list|)
decl_stmt|;
name|SolrServer
name|client2
init|=
name|createNewSolrServer
argument_list|(
name|oneInstanceCollection
operator|+
literal|"2"
argument_list|,
name|baseUrl
argument_list|)
decl_stmt|;
name|SolrServer
name|client3
init|=
name|createNewSolrServer
argument_list|(
name|oneInstanceCollection
operator|+
literal|"3"
argument_list|,
name|baseUrl
argument_list|)
decl_stmt|;
name|SolrServer
name|client4
init|=
name|createNewSolrServer
argument_list|(
name|oneInstanceCollection
operator|+
literal|"4"
argument_list|,
name|baseUrl
argument_list|)
decl_stmt|;
name|waitForRecoveriesToFinish
argument_list|(
name|oneInstanceCollection
argument_list|,
name|solrj
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertAllActive
argument_list|(
name|oneInstanceCollection
argument_list|,
name|solrj
operator|.
name|getZkStateReader
argument_list|()
argument_list|)
expr_stmt|;
name|client2
operator|.
name|add
argument_list|(
name|getDoc
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|client3
operator|.
name|add
argument_list|(
name|getDoc
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|client4
operator|.
name|add
argument_list|(
name|getDoc
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|client1
operator|.
name|commit
argument_list|()
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"distrib"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|long
name|oneDocs
init|=
name|client1
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|long
name|twoDocs
init|=
name|client2
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|long
name|threeDocs
init|=
name|client3
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|long
name|fourDocs
init|=
name|client4
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"collection"
argument_list|,
name|oneInstanceCollection
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"distrib"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|long
name|allDocs
init|=
name|solrj
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
comment|//    System.out.println("1:" + oneDocs);
comment|//    System.out.println("2:" + twoDocs);
comment|//    System.out.println("3:" + threeDocs);
comment|//    System.out.println("4:" + fourDocs);
comment|//    System.out.println("All Docs:" + allDocs);
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|allDocs
argument_list|)
expr_stmt|;
block|}
DECL|method|createCollection
specifier|private
name|void
name|createCollection
parameter_list|(
name|String
name|collection
parameter_list|,
name|List
argument_list|<
name|SolrServer
argument_list|>
name|collectionClients
parameter_list|,
name|String
name|baseUrl
parameter_list|,
name|int
name|num
parameter_list|)
block|{
name|createCollection
argument_list|(
name|collection
argument_list|,
name|collectionClients
argument_list|,
name|baseUrl
argument_list|,
name|num
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|createCollection
specifier|private
name|void
name|createCollection
parameter_list|(
specifier|final
name|String
name|collection
parameter_list|,
name|List
argument_list|<
name|SolrServer
argument_list|>
name|collectionClients
parameter_list|,
specifier|final
name|String
name|baseUrl
parameter_list|,
specifier|final
name|int
name|num
parameter_list|,
specifier|final
name|String
name|shardId
parameter_list|)
block|{
name|Callable
name|call
init|=
operator|new
name|Callable
argument_list|()
block|{
specifier|public
name|Object
name|call
parameter_list|()
block|{
name|HttpSolrServer
name|server
decl_stmt|;
try|try
block|{
name|server
operator|=
operator|new
name|HttpSolrServer
argument_list|(
name|baseUrl
argument_list|)
expr_stmt|;
name|Create
name|createCmd
init|=
operator|new
name|Create
argument_list|()
decl_stmt|;
name|createCmd
operator|.
name|setRoles
argument_list|(
literal|"none"
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setCoreName
argument_list|(
name|collection
operator|+
name|num
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setCollection
argument_list|(
name|collection
argument_list|)
expr_stmt|;
if|if
condition|(
name|shardId
operator|==
literal|null
condition|)
block|{
name|createCmd
operator|.
name|setNumShards
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|createCmd
operator|.
name|setDataDir
argument_list|(
name|dataDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
name|collection
operator|+
name|num
argument_list|)
expr_stmt|;
if|if
condition|(
name|shardId
operator|!=
literal|null
condition|)
block|{
name|createCmd
operator|.
name|setShardId
argument_list|(
name|shardId
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|request
argument_list|(
name|createCmd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|//fail
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|pending
operator|.
name|add
argument_list|(
name|completionService
operator|.
name|submit
argument_list|(
name|call
argument_list|)
argument_list|)
expr_stmt|;
name|collectionClients
operator|.
name|add
argument_list|(
name|createNewSolrServer
argument_list|(
name|collection
argument_list|,
name|baseUrl
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultipleCollections
specifier|private
name|void
name|testMultipleCollections
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create another 2 collections and search across them
name|createNewCollection
argument_list|(
literal|"collection2"
argument_list|)
expr_stmt|;
name|createNewCollection
argument_list|(
literal|"collection3"
argument_list|)
expr_stmt|;
while|while
condition|(
name|pending
operator|!=
literal|null
operator|&&
name|pending
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Future
argument_list|<
name|Request
argument_list|>
name|future
init|=
name|completionService
operator|.
name|take
argument_list|()
decl_stmt|;
if|if
condition|(
name|future
operator|==
literal|null
condition|)
return|return;
name|pending
operator|.
name|remove
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
name|indexDoc
argument_list|(
literal|"collection2"
argument_list|,
name|getDoc
argument_list|(
name|id
argument_list|,
literal|"10000000"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
literal|"collection2"
argument_list|,
name|getDoc
argument_list|(
name|id
argument_list|,
literal|"10000001"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
literal|"collection2"
argument_list|,
name|getDoc
argument_list|(
name|id
argument_list|,
literal|"10000003"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
literal|"collection3"
argument_list|,
name|getDoc
argument_list|(
name|id
argument_list|,
literal|"20000000"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
literal|"collection3"
argument_list|,
name|getDoc
argument_list|(
name|id
argument_list|,
literal|"20000001"
argument_list|)
argument_list|)
expr_stmt|;
name|otherCollectionClients
operator|.
name|get
argument_list|(
literal|"collection2"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|otherCollectionClients
operator|.
name|get
argument_list|(
literal|"collection3"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|long
name|collection1Docs
init|=
name|solrj
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|long
name|collection2Docs
init|=
name|otherCollectionClients
operator|.
name|get
argument_list|(
literal|"collection2"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|long
name|collection3Docs
init|=
name|otherCollectionClients
operator|.
name|get
argument_list|(
literal|"collection3"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"collection"
argument_list|,
literal|"collection2,collection3"
argument_list|)
expr_stmt|;
name|long
name|found
init|=
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|collection2Docs
operator|+
name|collection3Docs
argument_list|,
name|found
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"collection"
argument_list|,
literal|"collection1,collection2,collection3"
argument_list|)
expr_stmt|;
name|found
operator|=
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|collection1Docs
operator|+
name|collection2Docs
operator|+
name|collection3Docs
argument_list|,
name|found
argument_list|)
expr_stmt|;
comment|// try to search multiple with cloud client
name|found
operator|=
name|solrj
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|collection1Docs
operator|+
name|collection2Docs
operator|+
name|collection3Docs
argument_list|,
name|found
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"collection"
argument_list|,
literal|"collection2,collection3"
argument_list|)
expr_stmt|;
name|found
operator|=
name|solrj
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|collection2Docs
operator|+
name|collection3Docs
argument_list|,
name|found
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"collection"
argument_list|,
literal|"collection3"
argument_list|)
expr_stmt|;
name|found
operator|=
name|solrj
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|collection3Docs
argument_list|,
name|found
argument_list|)
expr_stmt|;
name|query
operator|.
name|remove
argument_list|(
literal|"collection"
argument_list|)
expr_stmt|;
name|found
operator|=
name|solrj
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|collection1Docs
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
DECL|method|getDoc
specifier|protected
name|SolrInputDocument
name|getDoc
parameter_list|(
name|Object
modifier|...
name|fields
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|addFields
argument_list|(
name|doc
argument_list|,
name|fields
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
DECL|method|indexDoc
specifier|protected
name|void
name|indexDoc
parameter_list|(
name|String
name|collection
parameter_list|,
name|SolrInputDocument
name|doc
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|List
argument_list|<
name|SolrServer
argument_list|>
name|clients
init|=
name|otherCollectionClients
operator|.
name|get
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|int
name|which
init|=
operator|(
name|doc
operator|.
name|getField
argument_list|(
name|id
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|&
literal|0x7fffffff
operator|)
operator|%
name|clients
operator|.
name|size
argument_list|()
decl_stmt|;
name|SolrServer
name|client
init|=
name|clients
operator|.
name|get
argument_list|(
name|which
argument_list|)
decl_stmt|;
name|client
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|createNewCollection
specifier|private
name|void
name|createNewCollection
parameter_list|(
specifier|final
name|String
name|collection
parameter_list|)
throws|throws
name|InterruptedException
block|{
specifier|final
name|List
argument_list|<
name|SolrServer
argument_list|>
name|collectionClients
init|=
operator|new
name|ArrayList
argument_list|<
name|SolrServer
argument_list|>
argument_list|()
decl_stmt|;
name|otherCollectionClients
operator|.
name|put
argument_list|(
name|collection
argument_list|,
name|collectionClients
argument_list|)
expr_stmt|;
name|int
name|unique
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|SolrServer
name|client
range|:
name|clients
control|)
block|{
name|unique
operator|++
expr_stmt|;
specifier|final
name|int
name|frozeUnique
init|=
name|unique
decl_stmt|;
name|Callable
name|call
init|=
operator|new
name|Callable
argument_list|()
block|{
specifier|public
name|Object
name|call
parameter_list|()
block|{
name|HttpSolrServer
name|server
decl_stmt|;
try|try
block|{
name|server
operator|=
operator|new
name|HttpSolrServer
argument_list|(
operator|(
operator|(
name|HttpSolrServer
operator|)
name|client
operator|)
operator|.
name|getBaseURL
argument_list|()
argument_list|)
expr_stmt|;
name|Create
name|createCmd
init|=
operator|new
name|Create
argument_list|()
decl_stmt|;
name|createCmd
operator|.
name|setCoreName
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setDataDir
argument_list|(
name|dataDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
name|collection
operator|+
name|frozeUnique
argument_list|)
expr_stmt|;
name|server
operator|.
name|request
argument_list|(
name|createCmd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|//fails
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|collectionClients
operator|.
name|add
argument_list|(
name|createNewSolrServer
argument_list|(
name|collection
argument_list|,
operator|(
operator|(
name|HttpSolrServer
operator|)
name|client
operator|)
operator|.
name|getBaseURL
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|pending
operator|.
name|add
argument_list|(
name|completionService
operator|.
name|submit
argument_list|(
name|call
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|pending
operator|!=
literal|null
operator|&&
name|pending
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Future
argument_list|<
name|Request
argument_list|>
name|future
init|=
name|completionService
operator|.
name|take
argument_list|()
decl_stmt|;
if|if
condition|(
name|future
operator|==
literal|null
condition|)
return|return;
name|pending
operator|.
name|remove
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createNewSolrServer
specifier|protected
name|SolrServer
name|createNewSolrServer
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|baseUrl
parameter_list|)
block|{
try|try
block|{
comment|// setup the server...
name|HttpSolrServer
name|s
init|=
operator|new
name|HttpSolrServer
argument_list|(
name|baseUrl
operator|+
literal|"/"
operator|+
name|collection
argument_list|)
decl_stmt|;
name|s
operator|.
name|setConnectionTimeout
argument_list|(
name|DEFAULT_CONNECTION_TIMEOUT
argument_list|)
expr_stmt|;
name|s
operator|.
name|setDefaultMaxConnectionsPerHost
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|s
operator|.
name|setMaxTotalConnections
argument_list|(
literal|100
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|field|solrj
specifier|volatile
name|CloudSolrServer
name|solrj
decl_stmt|;
annotation|@
name|Override
DECL|method|queryServer
specifier|protected
name|QueryResponse
name|queryServer
parameter_list|(
name|ModifiableSolrParams
name|params
parameter_list|)
throws|throws
name|SolrServerException
block|{
if|if
condition|(
name|r
operator|.
name|nextBoolean
argument_list|()
condition|)
return|return
name|super
operator|.
name|queryServer
argument_list|(
name|params
argument_list|)
return|;
comment|// use the distributed solrj client
if|if
condition|(
name|solrj
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
try|try
block|{
name|CloudSolrServer
name|server
init|=
operator|new
name|CloudSolrServer
argument_list|(
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
decl_stmt|;
name|server
operator|.
name|setDefaultCollection
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
expr_stmt|;
name|solrj
operator|=
name|server
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|r
operator|.
name|nextBoolean
argument_list|()
condition|)
name|params
operator|.
name|set
argument_list|(
literal|"collection"
argument_list|,
name|DEFAULT_COLLECTION
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|solrj
operator|.
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
return|return
name|rsp
return|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|solrj
operator|!=
literal|null
condition|)
block|{
name|solrj
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|clearProperty
argument_list|(
literal|"zkHost"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
