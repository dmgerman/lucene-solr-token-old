begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CommonsHttpSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
operator|.
name|Create
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import
begin_comment
comment|/**  *  */
end_comment
begin_class
annotation|@
name|Ignore
argument_list|(
literal|"something broke - need to track down and fix"
argument_list|)
DECL|class|BasicDistributedZkTest
specifier|public
class|class
name|BasicDistributedZkTest
extends|extends
name|AbstractDistributedZkTestCase
block|{
DECL|field|DEFAULT_COLLECTION
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_COLLECTION
init|=
literal|"collection1"
decl_stmt|;
DECL|field|DEBUG
specifier|private
specifier|static
specifier|final
name|boolean
name|DEBUG
init|=
literal|false
decl_stmt|;
DECL|field|t1
name|String
name|t1
init|=
literal|"a_t"
decl_stmt|;
DECL|field|i1
name|String
name|i1
init|=
literal|"a_si"
decl_stmt|;
DECL|field|nint
name|String
name|nint
init|=
literal|"n_i"
decl_stmt|;
DECL|field|tint
name|String
name|tint
init|=
literal|"n_ti"
decl_stmt|;
DECL|field|nfloat
name|String
name|nfloat
init|=
literal|"n_f"
decl_stmt|;
DECL|field|tfloat
name|String
name|tfloat
init|=
literal|"n_tf"
decl_stmt|;
DECL|field|ndouble
name|String
name|ndouble
init|=
literal|"n_d"
decl_stmt|;
DECL|field|tdouble
name|String
name|tdouble
init|=
literal|"n_td"
decl_stmt|;
DECL|field|nlong
name|String
name|nlong
init|=
literal|"n_l"
decl_stmt|;
DECL|field|tlong
name|String
name|tlong
init|=
literal|"other_tl1"
decl_stmt|;
DECL|field|ndate
name|String
name|ndate
init|=
literal|"n_dt"
decl_stmt|;
DECL|field|tdate
name|String
name|tdate
init|=
literal|"n_tdt"
decl_stmt|;
DECL|field|oddField
name|String
name|oddField
init|=
literal|"oddField_s"
decl_stmt|;
DECL|field|missingField
name|String
name|missingField
init|=
literal|"ignore_exception__missing_but_valid_field_t"
decl_stmt|;
DECL|field|invalidField
name|String
name|invalidField
init|=
literal|"ignore_exception__invalid_field_not_in_schema"
decl_stmt|;
DECL|field|otherCollectionClients
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SolrServer
argument_list|>
argument_list|>
name|otherCollectionClients
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SolrServer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|oneInstanceCollectionClients
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SolrServer
argument_list|>
argument_list|>
name|oneInstanceCollectionClients
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SolrServer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|oneInstanceCollection
specifier|private
name|String
name|oneInstanceCollection
init|=
literal|"oneInstanceCollection"
decl_stmt|;
DECL|field|oneInstanceCollection2
specifier|private
name|String
name|oneInstanceCollection2
init|=
literal|"oneInstanceCollection2"
decl_stmt|;
DECL|method|BasicDistributedZkTest
specifier|public
name|BasicDistributedZkTest
parameter_list|()
block|{
name|fixShardCount
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDistributedParams
specifier|protected
name|void
name|setDistributedParams
parameter_list|(
name|ModifiableSolrParams
name|params
parameter_list|)
block|{
if|if
condition|(
name|r
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// don't set shards, let that be figured out from the cloud state
block|}
else|else
block|{
comment|// use shard ids rather than physical locations
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shardCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"shard"
operator|+
operator|(
name|i
operator|+
literal|3
operator|)
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|set
argument_list|(
literal|"shards"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doTest
specifier|public
name|void
name|doTest
parameter_list|()
throws|throws
name|Exception
block|{
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|1
argument_list|,
name|i1
argument_list|,
literal|100
argument_list|,
name|tlong
argument_list|,
literal|100
argument_list|,
name|t1
argument_list|,
literal|"now is the time for all good men"
argument_list|,
literal|"foo_f"
argument_list|,
literal|1.414f
argument_list|,
literal|"foo_b"
argument_list|,
literal|"true"
argument_list|,
literal|"foo_d"
argument_list|,
literal|1.414d
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|2
argument_list|,
name|i1
argument_list|,
literal|50
argument_list|,
name|tlong
argument_list|,
literal|50
argument_list|,
name|t1
argument_list|,
literal|"to come to the aid of their country."
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|3
argument_list|,
name|i1
argument_list|,
literal|2
argument_list|,
name|tlong
argument_list|,
literal|2
argument_list|,
name|t1
argument_list|,
literal|"how now brown cow"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|4
argument_list|,
name|i1
argument_list|,
operator|-
literal|100
argument_list|,
name|tlong
argument_list|,
literal|101
argument_list|,
name|t1
argument_list|,
literal|"the quick fox jumped over the lazy dog"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|5
argument_list|,
name|i1
argument_list|,
literal|500
argument_list|,
name|tlong
argument_list|,
literal|500
argument_list|,
name|t1
argument_list|,
literal|"the quick fox jumped way over the lazy dog"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|6
argument_list|,
name|i1
argument_list|,
operator|-
literal|600
argument_list|,
name|tlong
argument_list|,
literal|600
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy sat on a wall"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|7
argument_list|,
name|i1
argument_list|,
literal|123
argument_list|,
name|tlong
argument_list|,
literal|123
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy had a great fall"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|8
argument_list|,
name|i1
argument_list|,
literal|876
argument_list|,
name|tlong
argument_list|,
literal|876
argument_list|,
name|t1
argument_list|,
literal|"all the kings horses and all the kings men"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|9
argument_list|,
name|i1
argument_list|,
literal|7
argument_list|,
name|tlong
argument_list|,
literal|7
argument_list|,
name|t1
argument_list|,
literal|"couldn't put humpty together again"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|10
argument_list|,
name|i1
argument_list|,
literal|4321
argument_list|,
name|tlong
argument_list|,
literal|4321
argument_list|,
name|t1
argument_list|,
literal|"this too shall pass"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|11
argument_list|,
name|i1
argument_list|,
operator|-
literal|987
argument_list|,
name|tlong
argument_list|,
literal|987
argument_list|,
name|t1
argument_list|,
literal|"An eye for eye only ends up making the whole world blind."
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|12
argument_list|,
name|i1
argument_list|,
literal|379
argument_list|,
name|tlong
argument_list|,
literal|379
argument_list|,
name|t1
argument_list|,
literal|"Great works are performed, not by strength, but by perseverance."
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|13
argument_list|,
name|i1
argument_list|,
literal|232
argument_list|,
name|tlong
argument_list|,
literal|232
argument_list|,
name|t1
argument_list|,
literal|"no eggs on wall, lesson learned"
argument_list|,
name|oddField
argument_list|,
literal|"odd man out"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|14
argument_list|,
literal|"SubjectTerms_mfacet"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mathematical models"
block|,
literal|"mathematical analysis"
block|}
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|15
argument_list|,
literal|"SubjectTerms_mfacet"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"test 1"
block|,
literal|"test 2"
block|,
literal|"test3"
block|}
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|16
argument_list|,
literal|"SubjectTerms_mfacet"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"test 1"
block|,
literal|"test 2"
block|,
literal|"test3"
block|}
argument_list|)
expr_stmt|;
name|String
index|[]
name|vals
init|=
operator|new
name|String
index|[
literal|100
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|vals
index|[
name|i
index|]
operator|=
literal|"test "
operator|+
name|i
expr_stmt|;
block|}
name|indexr
argument_list|(
name|id
argument_list|,
literal|17
argument_list|,
literal|"SubjectTerms_mfacet"
argument_list|,
name|vals
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|100
init|;
name|i
operator|<
literal|150
condition|;
name|i
operator|++
control|)
block|{
name|indexr
argument_list|(
name|id
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|commit
argument_list|()
expr_stmt|;
name|handle
operator|.
name|clear
argument_list|()
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"QTime"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"timestamp"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
comment|// random value sort
for|for
control|(
name|String
name|f
range|:
name|fieldNames
control|)
block|{
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|f
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|f
operator|+
literal|" asc"
argument_list|)
expr_stmt|;
block|}
comment|// these queries should be exactly ordered and scores should exactly match
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"n_tl1 asc"
argument_list|,
literal|"fl"
argument_list|,
literal|"score"
argument_list|)
expr_stmt|;
comment|// test legacy behavior - "score"=="*,score"
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"n_tl1 desc"
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"maxScore"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|i1
argument_list|)
expr_stmt|;
comment|// does not expect maxScore. So if it comes ,ignore it. JavaBinCodec.writeSolrDocumentList()
comment|//is agnostic of request params.
name|handle
operator|.
name|remove
argument_list|(
literal|"maxScore"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|i1
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
comment|// even scores should match exactly here
name|handle
operator|.
name|put
argument_list|(
literal|"highlighting"
argument_list|,
name|UNORDERED
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"response"
argument_list|,
name|UNORDERED
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"maxScore"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"quick"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"foofoofoo"
argument_list|,
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
comment|// no fields in returned docs
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"start"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"score"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"quick"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"start"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"start"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"now their fox sat had put"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"now their fox sat had put"
argument_list|,
literal|"fl"
argument_list|,
literal|"foofoofoo"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"matchesnothing"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
operator|-
literal|1
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
operator|-
literal|1
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
operator|-
literal|1
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
operator|-
literal|1
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"quick"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.offset"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// test faceting multiple things at once
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"quick"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
comment|// test filter tagging, facet exclusion, and naming (multi-select facet support)
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"{!key=myquick}quick"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"{!key=myall ex=a}all"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=mykey ex=a}"
operator|+
name|t1
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=other ex=b}"
operator|+
name|t1
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=again ex=a,b}"
operator|+
name|t1
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=a}id:[1 TO 7]"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=b}id:[3 TO 9]"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!ex=t1}SubjectTerms_mfacet"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=t1}SubjectTerms_mfacet:(test 1)"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// test field that is valid in schema but missing in all shards
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|missingField
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// test field that is valid in schema and missing in some shards
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|oddField
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
name|i1
argument_list|)
expr_stmt|;
comment|/*** TODO: the failure may come back in "exception"     try {       // test error produced for field that is invalid for schema       query("q","*:*", "rows",100, "facet","true", "facet.field",invalidField, "facet.mincount",2);       TestCase.fail("SolrServerException expected for invalid field that is not in schema");     } catch (SolrServerException ex) {       // expected     }     ***/
comment|// Try to get better coverage for refinement queries by turning off over requesting.
comment|// This makes it much more likely that we may not get the top facet values and hence
comment|// we turn of that checking.
name|handle
operator|.
name|put
argument_list|(
literal|"facet_fields"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
literal|5
argument_list|,
literal|"facet.shard.limit"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// check a complex key name
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key='a b/c \\' \\} foo'}"
operator|+
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
literal|5
argument_list|,
literal|"facet.shard.limit"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|handle
operator|.
name|remove
argument_list|(
literal|"facet_fields"
argument_list|)
expr_stmt|;
comment|// index the same document to two servers and make sure things
comment|// don't blow up.
if|if
condition|(
name|clients
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
block|{
name|index
argument_list|(
name|id
argument_list|,
literal|100
argument_list|,
name|i1
argument_list|,
literal|107
argument_list|,
name|t1
argument_list|,
literal|"oh no, a duplicate!"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clients
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|index_specific
argument_list|(
name|i
argument_list|,
name|id
argument_list|,
literal|100
argument_list|,
name|i1
argument_list|,
literal|107
argument_list|,
name|t1
argument_list|,
literal|"oh no, a duplicate!"
argument_list|)
expr_stmt|;
block|}
name|commit
argument_list|()
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"duplicate"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"fox duplicate horses"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
comment|// test debugging
name|handle
operator|.
name|put
argument_list|(
literal|"explain"
argument_list|,
name|UNORDERED
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"debug"
argument_list|,
name|UNORDERED
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"time"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"now their fox sat had put"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
name|CommonParams
operator|.
name|DEBUG_QUERY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"id:[1 TO 5]"
argument_list|,
name|CommonParams
operator|.
name|DEBUG_QUERY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"id:[1 TO 5]"
argument_list|,
name|CommonParams
operator|.
name|DEBUG
argument_list|,
name|CommonParams
operator|.
name|TIMING
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"id:[1 TO 5]"
argument_list|,
name|CommonParams
operator|.
name|DEBUG
argument_list|,
name|CommonParams
operator|.
name|RESULTS
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"id:[1 TO 5]"
argument_list|,
name|CommonParams
operator|.
name|DEBUG
argument_list|,
name|CommonParams
operator|.
name|QUERY
argument_list|)
expr_stmt|;
comment|// TODO: This test currently fails because debug info is obtained only
comment|// on shards with matches.
comment|// query("q","matchesnothing","fl","*,score", "debugQuery", "true");
name|testMultipleCollections
argument_list|()
expr_stmt|;
name|testANewCollectionInOneInstance
argument_list|()
expr_stmt|;
name|testSearchByCollectionName
argument_list|()
expr_stmt|;
name|testANewCollectionInOneInstanceWithManualShardAssignement
argument_list|()
expr_stmt|;
comment|// Thread.sleep(10000000000L);
if|if
condition|(
name|DEBUG
condition|)
block|{
name|super
operator|.
name|printLayout
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testANewCollectionInOneInstanceWithManualShardAssignement
specifier|private
name|void
name|testANewCollectionInOneInstanceWithManualShardAssignement
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|SolrServer
argument_list|>
name|collectionClients
init|=
operator|new
name|ArrayList
argument_list|<
name|SolrServer
argument_list|>
argument_list|()
decl_stmt|;
name|SolrServer
name|client
init|=
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|oneInstanceCollectionClients
operator|.
name|put
argument_list|(
name|oneInstanceCollection
argument_list|,
name|collectionClients
argument_list|)
expr_stmt|;
name|String
name|baseUrl
init|=
operator|(
operator|(
name|CommonsHttpSolrServer
operator|)
name|client
operator|)
operator|.
name|getBaseURL
argument_list|()
decl_stmt|;
name|createCollection
argument_list|(
name|oneInstanceCollection2
argument_list|,
name|collectionClients
argument_list|,
name|baseUrl
argument_list|,
literal|1
argument_list|,
literal|"slice1"
argument_list|)
expr_stmt|;
name|createCollection
argument_list|(
name|oneInstanceCollection2
argument_list|,
name|collectionClients
argument_list|,
name|baseUrl
argument_list|,
literal|2
argument_list|,
literal|"slice2"
argument_list|)
expr_stmt|;
name|createCollection
argument_list|(
name|oneInstanceCollection2
argument_list|,
name|collectionClients
argument_list|,
name|baseUrl
argument_list|,
literal|3
argument_list|,
literal|"slice2"
argument_list|)
expr_stmt|;
name|createCollection
argument_list|(
name|oneInstanceCollection2
argument_list|,
name|collectionClients
argument_list|,
name|baseUrl
argument_list|,
literal|4
argument_list|,
literal|"slice1"
argument_list|)
expr_stmt|;
name|SolrServer
name|client1
init|=
name|createNewSolrServer
argument_list|(
name|oneInstanceCollection2
operator|+
literal|"1"
argument_list|,
name|baseUrl
argument_list|)
decl_stmt|;
name|SolrServer
name|client2
init|=
name|createNewSolrServer
argument_list|(
name|oneInstanceCollection2
operator|+
literal|"2"
argument_list|,
name|baseUrl
argument_list|)
decl_stmt|;
name|SolrServer
name|client3
init|=
name|createNewSolrServer
argument_list|(
name|oneInstanceCollection2
operator|+
literal|"3"
argument_list|,
name|baseUrl
argument_list|)
decl_stmt|;
name|SolrServer
name|client4
init|=
name|createNewSolrServer
argument_list|(
name|oneInstanceCollection2
operator|+
literal|"4"
argument_list|,
name|baseUrl
argument_list|)
decl_stmt|;
name|client2
operator|.
name|add
argument_list|(
name|getDoc
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|client3
operator|.
name|add
argument_list|(
name|getDoc
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|client4
operator|.
name|add
argument_list|(
name|getDoc
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// no one should be recovering
name|waitForRecoveriesToFinish
argument_list|(
name|oneInstanceCollection2
argument_list|,
name|solrj
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertAllActive
argument_list|(
name|oneInstanceCollection2
argument_list|,
name|solrj
operator|.
name|getZkStateReader
argument_list|()
argument_list|)
expr_stmt|;
name|client1
operator|.
name|commit
argument_list|()
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"distrib"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|long
name|oneDocs
init|=
name|client1
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|long
name|twoDocs
init|=
name|client2
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|long
name|threeDocs
init|=
name|client3
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|long
name|fourDocs
init|=
name|client4
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"collection"
argument_list|,
name|oneInstanceCollection2
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"distrib"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|long
name|allDocs
init|=
name|solrj
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
comment|//    System.out.println("1:" + oneDocs);
comment|//    System.out.println("2:" + twoDocs);
comment|//    System.out.println("3:" + threeDocs);
comment|//    System.out.println("4:" + fourDocs);
comment|//    System.out.println("All Docs:" + allDocs);
name|assertEquals
argument_list|(
name|oneDocs
argument_list|,
name|threeDocs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|twoDocs
argument_list|,
name|fourDocs
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|oneDocs
argument_list|,
name|twoDocs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|allDocs
argument_list|)
expr_stmt|;
comment|// we added a role of none on these creates - check for it
name|ZkStateReader
name|zkStateReader
init|=
name|solrj
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|zkStateReader
operator|.
name|updateCloudState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|zkStateReader
operator|.
name|getCloudState
argument_list|()
operator|.
name|getSlices
argument_list|(
name|oneInstanceCollection2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|slices
argument_list|)
expr_stmt|;
name|String
name|roles
init|=
name|slices
operator|.
name|get
argument_list|(
literal|"shard1"
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|ROLES_PROP
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"none"
argument_list|,
name|roles
argument_list|)
expr_stmt|;
block|}
DECL|method|testSearchByCollectionName
specifier|private
name|void
name|testSearchByCollectionName
parameter_list|()
throws|throws
name|SolrServerException
block|{
name|SolrServer
name|client
init|=
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|baseUrl
init|=
operator|(
operator|(
name|CommonsHttpSolrServer
operator|)
name|client
operator|)
operator|.
name|getBaseURL
argument_list|()
decl_stmt|;
comment|// the cores each have different names, but if we add the collection name to the url
comment|// we should get mapped to the right core
name|SolrServer
name|client1
init|=
name|createNewSolrServer
argument_list|(
name|oneInstanceCollection
argument_list|,
name|baseUrl
argument_list|)
decl_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|long
name|oneDocs
init|=
name|client1
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|oneDocs
argument_list|)
expr_stmt|;
block|}
DECL|method|testANewCollectionInOneInstance
specifier|private
name|void
name|testANewCollectionInOneInstance
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|SolrServer
argument_list|>
name|collectionClients
init|=
operator|new
name|ArrayList
argument_list|<
name|SolrServer
argument_list|>
argument_list|()
decl_stmt|;
name|SolrServer
name|client
init|=
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|oneInstanceCollectionClients
operator|.
name|put
argument_list|(
name|oneInstanceCollection
argument_list|,
name|collectionClients
argument_list|)
expr_stmt|;
name|String
name|baseUrl
init|=
operator|(
operator|(
name|CommonsHttpSolrServer
operator|)
name|client
operator|)
operator|.
name|getBaseURL
argument_list|()
decl_stmt|;
name|createCollection
argument_list|(
name|oneInstanceCollection
argument_list|,
name|collectionClients
argument_list|,
name|baseUrl
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|createCollection
argument_list|(
name|oneInstanceCollection
argument_list|,
name|collectionClients
argument_list|,
name|baseUrl
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|createCollection
argument_list|(
name|oneInstanceCollection
argument_list|,
name|collectionClients
argument_list|,
name|baseUrl
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|createCollection
argument_list|(
name|oneInstanceCollection
argument_list|,
name|collectionClients
argument_list|,
name|baseUrl
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|SolrServer
name|client1
init|=
name|createNewSolrServer
argument_list|(
name|oneInstanceCollection
operator|+
literal|"1"
argument_list|,
name|baseUrl
argument_list|)
decl_stmt|;
name|SolrServer
name|client2
init|=
name|createNewSolrServer
argument_list|(
name|oneInstanceCollection
operator|+
literal|"2"
argument_list|,
name|baseUrl
argument_list|)
decl_stmt|;
name|SolrServer
name|client3
init|=
name|createNewSolrServer
argument_list|(
name|oneInstanceCollection
operator|+
literal|"3"
argument_list|,
name|baseUrl
argument_list|)
decl_stmt|;
name|SolrServer
name|client4
init|=
name|createNewSolrServer
argument_list|(
name|oneInstanceCollection
operator|+
literal|"4"
argument_list|,
name|baseUrl
argument_list|)
decl_stmt|;
name|waitForRecoveriesToFinish
argument_list|(
name|oneInstanceCollection
argument_list|,
name|solrj
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertAllActive
argument_list|(
name|oneInstanceCollection
argument_list|,
name|solrj
operator|.
name|getZkStateReader
argument_list|()
argument_list|)
expr_stmt|;
name|client2
operator|.
name|add
argument_list|(
name|getDoc
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|client3
operator|.
name|add
argument_list|(
name|getDoc
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|client4
operator|.
name|add
argument_list|(
name|getDoc
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|client1
operator|.
name|commit
argument_list|()
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"distrib"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|long
name|oneDocs
init|=
name|client1
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|long
name|twoDocs
init|=
name|client2
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|long
name|threeDocs
init|=
name|client3
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|long
name|fourDocs
init|=
name|client4
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"collection"
argument_list|,
name|oneInstanceCollection
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"distrib"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|long
name|allDocs
init|=
name|solrj
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
comment|//    System.out.println("1:" + oneDocs);
comment|//    System.out.println("2:" + twoDocs);
comment|//    System.out.println("3:" + threeDocs);
comment|//    System.out.println("4:" + fourDocs);
comment|//    System.out.println("All Docs:" + allDocs);
name|assertEquals
argument_list|(
name|oneDocs
argument_list|,
name|threeDocs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|twoDocs
argument_list|,
name|fourDocs
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|oneDocs
argument_list|,
name|twoDocs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|allDocs
argument_list|)
expr_stmt|;
block|}
DECL|method|createCollection
specifier|private
name|void
name|createCollection
parameter_list|(
name|String
name|collection
parameter_list|,
name|List
argument_list|<
name|SolrServer
argument_list|>
name|collectionClients
parameter_list|,
name|String
name|baseUrl
parameter_list|,
name|int
name|num
parameter_list|)
throws|throws
name|MalformedURLException
throws|,
name|SolrServerException
throws|,
name|IOException
block|{
name|createCollection
argument_list|(
name|collection
argument_list|,
name|collectionClients
argument_list|,
name|baseUrl
argument_list|,
name|num
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|createCollection
specifier|private
name|void
name|createCollection
parameter_list|(
name|String
name|collection
parameter_list|,
name|List
argument_list|<
name|SolrServer
argument_list|>
name|collectionClients
parameter_list|,
name|String
name|baseUrl
parameter_list|,
name|int
name|num
parameter_list|,
name|String
name|shardId
parameter_list|)
throws|throws
name|MalformedURLException
throws|,
name|SolrServerException
throws|,
name|IOException
block|{
name|CommonsHttpSolrServer
name|server
init|=
operator|new
name|CommonsHttpSolrServer
argument_list|(
name|baseUrl
argument_list|)
decl_stmt|;
name|Create
name|createCmd
init|=
operator|new
name|Create
argument_list|()
decl_stmt|;
name|createCmd
operator|.
name|setRoles
argument_list|(
literal|"none"
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setCoreName
argument_list|(
name|collection
operator|+
name|num
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setCollection
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setNumShards
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setDataDir
argument_list|(
name|dataDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
name|collection
operator|+
name|num
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setShardId
argument_list|(
name|shardId
argument_list|)
expr_stmt|;
name|server
operator|.
name|request
argument_list|(
name|createCmd
argument_list|)
expr_stmt|;
name|collectionClients
operator|.
name|add
argument_list|(
name|createNewSolrServer
argument_list|(
name|collection
argument_list|,
name|baseUrl
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultipleCollections
specifier|private
name|void
name|testMultipleCollections
parameter_list|()
throws|throws
name|MalformedURLException
throws|,
name|SolrServerException
throws|,
name|IOException
throws|,
name|Exception
block|{
comment|// create another 2 collections and search across them
name|createNewCollection
argument_list|(
literal|"collection2"
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
literal|"collection2"
argument_list|,
name|getDoc
argument_list|(
name|id
argument_list|,
literal|"10000000"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
literal|"collection2"
argument_list|,
name|getDoc
argument_list|(
name|id
argument_list|,
literal|"10000001"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
literal|"collection2"
argument_list|,
name|getDoc
argument_list|(
name|id
argument_list|,
literal|"10000003"
argument_list|)
argument_list|)
expr_stmt|;
name|createNewCollection
argument_list|(
literal|"collection3"
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
literal|"collection3"
argument_list|,
name|getDoc
argument_list|(
name|id
argument_list|,
literal|"20000000"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
literal|"collection3"
argument_list|,
name|getDoc
argument_list|(
name|id
argument_list|,
literal|"20000001"
argument_list|)
argument_list|)
expr_stmt|;
name|otherCollectionClients
operator|.
name|get
argument_list|(
literal|"collection2"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|otherCollectionClients
operator|.
name|get
argument_list|(
literal|"collection3"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|long
name|collection1Docs
init|=
name|solrj
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|long
name|collection2Docs
init|=
name|otherCollectionClients
operator|.
name|get
argument_list|(
literal|"collection2"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|long
name|collection3Docs
init|=
name|otherCollectionClients
operator|.
name|get
argument_list|(
literal|"collection3"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"collection"
argument_list|,
literal|"collection2,collection3"
argument_list|)
expr_stmt|;
name|long
name|found
init|=
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|collection2Docs
operator|+
name|collection3Docs
argument_list|,
name|found
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"collection"
argument_list|,
literal|"collection1,collection2,collection3"
argument_list|)
expr_stmt|;
name|found
operator|=
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|collection1Docs
operator|+
name|collection2Docs
operator|+
name|collection3Docs
argument_list|,
name|found
argument_list|)
expr_stmt|;
comment|// try to search multiple with cloud client
name|found
operator|=
name|solrj
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|collection1Docs
operator|+
name|collection2Docs
operator|+
name|collection3Docs
argument_list|,
name|found
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"collection"
argument_list|,
literal|"collection2,collection3"
argument_list|)
expr_stmt|;
name|found
operator|=
name|solrj
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|collection2Docs
operator|+
name|collection3Docs
argument_list|,
name|found
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"collection"
argument_list|,
literal|"collection3"
argument_list|)
expr_stmt|;
name|found
operator|=
name|solrj
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|collection3Docs
argument_list|,
name|found
argument_list|)
expr_stmt|;
name|query
operator|.
name|remove
argument_list|(
literal|"collection"
argument_list|)
expr_stmt|;
name|found
operator|=
name|solrj
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|collection1Docs
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
DECL|method|getDoc
specifier|protected
name|SolrInputDocument
name|getDoc
parameter_list|(
name|Object
modifier|...
name|fields
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|addFields
argument_list|(
name|doc
argument_list|,
name|fields
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
DECL|method|indexDoc
specifier|protected
name|void
name|indexDoc
parameter_list|(
name|String
name|collection
parameter_list|,
name|SolrInputDocument
name|doc
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|List
argument_list|<
name|SolrServer
argument_list|>
name|clients
init|=
name|otherCollectionClients
operator|.
name|get
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|int
name|which
init|=
operator|(
name|doc
operator|.
name|getField
argument_list|(
name|id
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|&
literal|0x7fffffff
operator|)
operator|%
name|clients
operator|.
name|size
argument_list|()
decl_stmt|;
name|SolrServer
name|client
init|=
name|clients
operator|.
name|get
argument_list|(
name|which
argument_list|)
decl_stmt|;
name|client
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|createNewCollection
specifier|private
name|void
name|createNewCollection
parameter_list|(
name|String
name|collection
parameter_list|)
throws|throws
name|MalformedURLException
throws|,
name|SolrServerException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|SolrServer
argument_list|>
name|collectionClients
init|=
operator|new
name|ArrayList
argument_list|<
name|SolrServer
argument_list|>
argument_list|()
decl_stmt|;
name|otherCollectionClients
operator|.
name|put
argument_list|(
name|collection
argument_list|,
name|collectionClients
argument_list|)
expr_stmt|;
name|int
name|unique
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SolrServer
name|client
range|:
name|clients
control|)
block|{
name|CommonsHttpSolrServer
name|server
init|=
operator|new
name|CommonsHttpSolrServer
argument_list|(
operator|(
operator|(
name|CommonsHttpSolrServer
operator|)
name|client
operator|)
operator|.
name|getBaseURL
argument_list|()
argument_list|)
decl_stmt|;
name|Create
name|createCmd
init|=
operator|new
name|Create
argument_list|()
decl_stmt|;
name|createCmd
operator|.
name|setCoreName
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setDataDir
argument_list|(
name|dataDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
name|collection
operator|+
name|unique
operator|++
argument_list|)
expr_stmt|;
name|server
operator|.
name|request
argument_list|(
name|createCmd
argument_list|)
expr_stmt|;
name|collectionClients
operator|.
name|add
argument_list|(
name|createNewSolrServer
argument_list|(
name|collection
argument_list|,
operator|(
operator|(
name|CommonsHttpSolrServer
operator|)
name|client
operator|)
operator|.
name|getBaseURL
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createNewSolrServer
specifier|protected
name|SolrServer
name|createNewSolrServer
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|baseUrl
parameter_list|)
block|{
try|try
block|{
comment|// setup the server...
name|CommonsHttpSolrServer
name|s
init|=
operator|new
name|CommonsHttpSolrServer
argument_list|(
name|baseUrl
operator|+
literal|"/"
operator|+
name|collection
argument_list|)
decl_stmt|;
name|s
operator|.
name|setConnectionTimeout
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// 1/10th sec
name|s
operator|.
name|setDefaultMaxConnectionsPerHost
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|s
operator|.
name|setMaxTotalConnections
argument_list|(
literal|100
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|field|solrj
specifier|volatile
name|CloudSolrServer
name|solrj
decl_stmt|;
annotation|@
name|Override
DECL|method|queryServer
specifier|protected
name|QueryResponse
name|queryServer
parameter_list|(
name|ModifiableSolrParams
name|params
parameter_list|)
throws|throws
name|SolrServerException
block|{
if|if
condition|(
name|r
operator|.
name|nextBoolean
argument_list|()
condition|)
return|return
name|super
operator|.
name|queryServer
argument_list|(
name|params
argument_list|)
return|;
comment|// use the distributed solrj client
if|if
condition|(
name|solrj
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
try|try
block|{
name|CloudSolrServer
name|server
init|=
operator|new
name|CloudSolrServer
argument_list|(
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
decl_stmt|;
name|server
operator|.
name|setDefaultCollection
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
expr_stmt|;
name|solrj
operator|=
name|server
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|r
operator|.
name|nextBoolean
argument_list|()
condition|)
name|params
operator|.
name|set
argument_list|(
literal|"collection"
argument_list|,
name|DEFAULT_COLLECTION
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|solrj
operator|.
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
return|return
name|rsp
return|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|solrj
operator|!=
literal|null
condition|)
block|{
name|solrj
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|clearProperty
argument_list|(
literal|"zkHost"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
