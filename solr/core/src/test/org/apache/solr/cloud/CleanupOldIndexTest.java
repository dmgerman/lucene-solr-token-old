begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|SnapShooter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
annotation|@
name|Slow
DECL|class|CleanupOldIndexTest
specifier|public
class|class
name|CleanupOldIndexTest
extends|extends
name|AbstractFullDistribZkTestBase
block|{
DECL|field|indexThread
specifier|private
name|StoppableIndexingThread
name|indexThread
decl_stmt|;
DECL|method|CleanupOldIndexTest
specifier|public
name|CleanupOldIndexTest
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|sliceCount
operator|=
literal|1
expr_stmt|;
name|fixShardCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|schemaString
operator|=
literal|"schema15.xml"
expr_stmt|;
block|}
DECL|field|fieldNames
specifier|public
specifier|static
name|String
index|[]
name|fieldNames
init|=
operator|new
name|String
index|[]
block|{
literal|"f_i"
block|,
literal|"f_f"
block|,
literal|"f_d"
block|,
literal|"f_l"
block|,
literal|"f_dt"
block|}
decl_stmt|;
DECL|field|randVals
specifier|public
specifier|static
name|RandVal
index|[]
name|randVals
init|=
operator|new
name|RandVal
index|[]
block|{
name|rint
block|,
name|rfloat
block|,
name|rdouble
block|,
name|rlong
block|,
name|rdate
block|}
decl_stmt|;
DECL|method|getFieldNames
specifier|protected
name|String
index|[]
name|getFieldNames
parameter_list|()
block|{
return|return
name|fieldNames
return|;
block|}
DECL|method|getRandValues
specifier|protected
name|RandVal
index|[]
name|getRandValues
parameter_list|()
block|{
return|return
name|randVals
return|;
block|}
annotation|@
name|Test
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|handle
operator|.
name|clear
argument_list|()
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"timestamp"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|int
index|[]
name|maxDocList
init|=
operator|new
name|int
index|[]
block|{
literal|300
block|,
literal|700
block|,
literal|1200
block|}
decl_stmt|;
name|int
name|maxDoc
init|=
name|maxDocList
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|maxDocList
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
decl_stmt|;
name|indexThread
operator|=
operator|new
name|StoppableIndexingThread
argument_list|(
name|controlClient
argument_list|,
name|cloudClient
argument_list|,
literal|"1"
argument_list|,
literal|true
argument_list|,
name|maxDoc
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|indexThread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// give some time to index...
name|int
index|[]
name|waitTimes
init|=
operator|new
name|int
index|[]
block|{
literal|200
block|,
literal|2000
block|,
literal|3000
block|}
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|waitTimes
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|waitTimes
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
argument_list|)
expr_stmt|;
comment|// create some "old" index directories
name|JettySolrRunner
name|jetty
init|=
name|chaosMonkey
operator|.
name|getShard
argument_list|(
literal|"shard1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|CoreContainer
name|coreContainer
init|=
name|jetty
operator|.
name|getCoreContainer
argument_list|()
decl_stmt|;
name|File
name|dataDir
init|=
literal|null
decl_stmt|;
try|try
init|(
name|SolrCore
name|solrCore
init|=
name|coreContainer
operator|.
name|getCore
argument_list|(
literal|"collection1"
argument_list|)
init|)
block|{
name|dataDir
operator|=
operator|new
name|File
argument_list|(
name|solrCore
operator|.
name|getDataDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|dataDir
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|msInDay
init|=
literal|60
operator|*
literal|60
operator|*
literal|24L
decl_stmt|;
name|String
name|timestamp1
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|SnapShooter
operator|.
name|DATE_FMT
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
literal|1
operator|*
name|msInDay
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|timestamp2
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|SnapShooter
operator|.
name|DATE_FMT
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
literal|2
operator|*
name|msInDay
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|oldIndexDir1
init|=
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
literal|"index."
operator|+
name|timestamp1
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
name|oldIndexDir1
argument_list|)
expr_stmt|;
name|File
name|oldIndexDir2
init|=
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
literal|"index."
operator|+
name|timestamp2
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
name|oldIndexDir2
argument_list|)
expr_stmt|;
comment|// verify the "old" index directories exist
name|assertTrue
argument_list|(
name|oldIndexDir1
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|oldIndexDir2
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
comment|// bring shard replica down
name|JettySolrRunner
name|replica
init|=
name|chaosMonkey
operator|.
name|stopShard
argument_list|(
literal|"shard1"
argument_list|,
literal|1
argument_list|)
operator|.
name|jetty
decl_stmt|;
comment|// wait a moment - lets allow some docs to be indexed so replication time is non 0
name|Thread
operator|.
name|sleep
argument_list|(
name|waitTimes
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|waitTimes
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
argument_list|)
expr_stmt|;
comment|// bring shard replica up
name|replica
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// make sure replication can start
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|ZkStateReader
name|zkStateReader
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
comment|// stop indexing threads
name|indexThread
operator|.
name|safeStop
argument_list|()
expr_stmt|;
name|indexThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|waitForThingsToLevelOut
argument_list|(
literal|120
argument_list|)
expr_stmt|;
name|waitForRecoveriesToFinish
argument_list|(
name|DEFAULT_COLLECTION
argument_list|,
name|zkStateReader
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// test that leader and replica have same doc count
name|String
name|fail
init|=
name|checkShardConsistency
argument_list|(
literal|"shard1"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|fail
operator|!=
literal|null
condition|)
name|fail
argument_list|(
name|fail
argument_list|)
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setParam
argument_list|(
literal|"distrib"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|long
name|client1Docs
init|=
name|shardToJetty
operator|.
name|get
argument_list|(
literal|"shard1"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|client
operator|.
name|solrClient
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|long
name|client2Docs
init|=
name|shardToJetty
operator|.
name|get
argument_list|(
literal|"shard1"
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|client
operator|.
name|solrClient
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|client1Docs
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|client1Docs
argument_list|,
name|client2Docs
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|oldIndexDir1
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|oldIndexDir2
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|indexDoc
specifier|protected
name|void
name|indexDoc
parameter_list|(
name|SolrInputDocument
name|doc
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|controlClient
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|distribTearDown
specifier|public
name|void
name|distribTearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// make sure threads have been stopped...
name|indexThread
operator|.
name|safeStop
argument_list|()
expr_stmt|;
name|indexThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|super
operator|.
name|distribTearDown
argument_list|()
expr_stmt|;
block|}
comment|// skip the randoms - they can deadlock...
annotation|@
name|Override
DECL|method|indexr
specifier|protected
name|void
name|indexr
parameter_list|(
name|Object
modifier|...
name|fields
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|addFields
argument_list|(
name|doc
argument_list|,
name|fields
argument_list|)
expr_stmt|;
name|addFields
argument_list|(
name|doc
argument_list|,
literal|"rnd_b"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
