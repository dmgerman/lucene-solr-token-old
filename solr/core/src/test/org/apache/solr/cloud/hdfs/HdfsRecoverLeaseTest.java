begin_unit
begin_package
DECL|package|org.apache.solr.cloud.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|hdfs
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|BadHdfsThreadsFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|FSHDFSUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|FSHDFSUtils
operator|.
name|CallerInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakFilters
import|;
end_import
begin_class
annotation|@
name|ThreadLeakFilters
argument_list|(
name|defaultFilters
operator|=
literal|true
argument_list|,
name|filters
operator|=
block|{
name|BadHdfsThreadsFilter
operator|.
name|class
comment|// hdfs currently leaks thread(s)
block|}
argument_list|)
DECL|class|HdfsRecoverLeaseTest
specifier|public
class|class
name|HdfsRecoverLeaseTest
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|dfsCluster
specifier|private
specifier|static
name|MiniDFSCluster
name|dfsCluster
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|dfsCluster
operator|=
name|HdfsTestUtil
operator|.
name|setupClass
argument_list|(
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsTestUtil
operator|.
name|teardownClass
argument_list|(
name|dfsCluster
argument_list|)
expr_stmt|;
name|dfsCluster
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasic
specifier|public
name|void
name|testBasic
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|startRecoverLeaseSuccessCount
init|=
name|FSHDFSUtils
operator|.
name|RECOVER_LEASE_SUCCESS_COUNT
operator|.
name|get
argument_list|()
decl_stmt|;
name|URI
name|uri
init|=
name|dfsCluster
operator|.
name|getURI
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"fs.hdfs.impl.disable.cache"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FileSystem
name|fs1
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
operator|+
literal|"/testfile"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs1
operator|.
name|create
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|out
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|FSHDFSUtils
operator|.
name|recoverFileLease
argument_list|(
name|fs1
argument_list|,
name|testFile
argument_list|,
name|conf
argument_list|,
operator|new
name|CallerInfo
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isCallerClosed
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|FSHDFSUtils
operator|.
name|RECOVER_LEASE_SUCCESS_COUNT
operator|.
name|get
argument_list|()
operator|-
name|startRecoverLeaseSuccessCount
argument_list|)
expr_stmt|;
name|fs1
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileSystem
name|fs2
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Path
name|testFile2
init|=
operator|new
name|Path
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
operator|+
literal|"/testfile2"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out2
init|=
name|fs2
operator|.
name|create
argument_list|(
name|testFile2
argument_list|)
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|int
name|cnt
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|out2
operator|.
name|write
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20000
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out2
operator|.
name|hflush
argument_list|()
expr_stmt|;
block|}
comment|// closing the fs will close the file it seems
comment|// fs2.close();
name|FileSystem
name|fs3
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FSHDFSUtils
operator|.
name|recoverFileLease
argument_list|(
name|fs3
argument_list|,
name|testFile2
argument_list|,
name|conf
argument_list|,
operator|new
name|CallerInfo
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isCallerClosed
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|FSHDFSUtils
operator|.
name|RECOVER_LEASE_SUCCESS_COUNT
operator|.
name|get
argument_list|()
operator|-
name|startRecoverLeaseSuccessCount
argument_list|)
expr_stmt|;
name|fs3
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiThreaded
specifier|public
name|void
name|testMultiThreaded
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|startRecoverLeaseSuccessCount
init|=
name|FSHDFSUtils
operator|.
name|RECOVER_LEASE_SUCCESS_COUNT
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|URI
name|uri
init|=
name|dfsCluster
operator|.
name|getURI
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|uri
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"fs.hdfs.impl.disable.cache"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// n threads create files
class|class
name|WriterThread
extends|extends
name|Thread
block|{
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|int
name|id
decl_stmt|;
specifier|public
name|WriterThread
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
try|try
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
operator|+
literal|"/file-"
operator|+
name|id
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
decl_stmt|;
try|try
block|{
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|testFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|int
name|cnt
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20000
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|hflush
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getFileId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
block|}
class|class
name|RecoverThread
extends|extends
name|Thread
block|{
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|int
name|id
decl_stmt|;
specifier|public
name|RecoverThread
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
try|try
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
operator|+
literal|"/file-"
operator|+
name|id
argument_list|)
decl_stmt|;
try|try
block|{
name|FSHDFSUtils
operator|.
name|recoverFileLease
argument_list|(
name|fs
argument_list|,
name|testFile
argument_list|,
name|conf
argument_list|,
operator|new
name|CallerInfo
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isCallerClosed
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|WriterThread
argument_list|>
name|writerThreads
init|=
operator|new
name|HashSet
argument_list|<
name|WriterThread
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|RecoverThread
argument_list|>
name|recoverThreads
init|=
operator|new
name|HashSet
argument_list|<
name|RecoverThread
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|threadCount
init|=
literal|3
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
name|WriterThread
name|wt
init|=
operator|new
name|WriterThread
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|writerThreads
operator|.
name|add
argument_list|(
name|wt
argument_list|)
expr_stmt|;
name|wt
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|WriterThread
name|wt
range|:
name|writerThreads
control|)
block|{
name|wt
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
for|for
control|(
name|WriterThread
name|wt
range|:
name|writerThreads
control|)
block|{
name|RecoverThread
name|rt
init|=
operator|new
name|RecoverThread
argument_list|(
name|wt
operator|.
name|getFileId
argument_list|()
argument_list|)
decl_stmt|;
name|recoverThreads
operator|.
name|add
argument_list|(
name|rt
argument_list|)
expr_stmt|;
name|rt
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|WriterThread
name|wt
range|:
name|writerThreads
control|)
block|{
name|wt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|RecoverThread
name|rt
range|:
name|recoverThreads
control|)
block|{
name|rt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|threadCount
argument_list|,
name|FSHDFSUtils
operator|.
name|RECOVER_LEASE_SUCCESS_COUNT
operator|.
name|get
argument_list|()
operator|-
name|startRecoverLeaseSuccessCount
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
