begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_class
DECL|class|RollingRestartTest
specifier|public
class|class
name|RollingRestartTest
extends|extends
name|AbstractFullDistribZkTestBase
block|{
DECL|field|log
specifier|public
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ChaosMonkeyNothingIsSafeTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|RollingRestartTest
specifier|public
name|RollingRestartTest
parameter_list|()
block|{
name|fixShardCount
operator|=
literal|true
expr_stmt|;
name|sliceCount
operator|=
literal|2
expr_stmt|;
name|shardCount
operator|=
literal|16
expr_stmt|;
block|}
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"numShards"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|sliceCount
argument_list|)
argument_list|)
expr_stmt|;
name|useFactory
argument_list|(
literal|"solr.StandardDirectoryFactory"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"numShards"
argument_list|)
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|resetExceptionIgnores
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doTest
specifier|public
name|void
name|doTest
parameter_list|()
throws|throws
name|Exception
block|{
name|waitForRecoveriesToFinish
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|restartWithRolesTest
argument_list|()
expr_stmt|;
name|waitForRecoveriesToFinish
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|restartWithRolesTest
specifier|public
name|void
name|restartWithRolesTest
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|leader
init|=
name|OverseerCollectionProcessor
operator|.
name|getLeaderNode
argument_list|(
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getZkClient
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|leader
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Current overseer leader = {}"
argument_list|,
name|leader
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getZkClient
argument_list|()
operator|.
name|printLayoutToStdOut
argument_list|()
expr_stmt|;
name|int
name|numOverseers
init|=
literal|3
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|designates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CloudJettyRunner
argument_list|>
name|overseerDesignates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOverseers
condition|;
name|i
operator|++
control|)
block|{
name|int
name|n
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|shardCount
argument_list|)
decl_stmt|;
name|String
name|nodeName
init|=
name|cloudJettys
operator|.
name|get
argument_list|(
name|n
argument_list|)
operator|.
name|nodeName
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Chose {} as overseer designate"
argument_list|,
name|nodeName
argument_list|)
expr_stmt|;
name|invokeCollectionApi
argument_list|(
name|CollectionParams
operator|.
name|ACTION
argument_list|,
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|ADDROLE
operator|.
name|toLower
argument_list|()
argument_list|,
literal|"role"
argument_list|,
literal|"overseer"
argument_list|,
literal|"node"
argument_list|,
name|nodeName
argument_list|)
expr_stmt|;
name|designates
operator|.
name|add
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
name|overseerDesignates
operator|.
name|add
argument_list|(
name|cloudJettys
operator|.
name|get
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|waitUntilOverseerDesignateIsLeader
argument_list|(
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getZkClient
argument_list|()
argument_list|,
name|designates
argument_list|,
literal|60
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getZkClient
argument_list|()
operator|.
name|printLayoutToStdOut
argument_list|()
expr_stmt|;
name|int
name|numRestarts
init|=
literal|4
decl_stmt|;
comment|// 1 + random().nextInt(5);
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRestarts
condition|;
name|i
operator|++
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Rolling restart #{}"
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|CloudJettyRunner
name|cloudJetty
range|:
name|overseerDesignates
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Restarting {}"
argument_list|,
name|cloudJetty
argument_list|)
expr_stmt|;
name|chaosMonkey
operator|.
name|stopJetty
argument_list|(
name|cloudJetty
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|waitUntilOverseerDesignateIsLeader
argument_list|(
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getZkClient
argument_list|()
argument_list|,
name|designates
argument_list|,
literal|60
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|leader
operator|=
name|OverseerCollectionProcessor
operator|.
name|getLeaderNode
argument_list|(
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getZkClient
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|leader
operator|==
literal|null
condition|)
name|log
operator|.
name|error
argument_list|(
literal|"NOOVERSEER election queue is :"
operator|+
name|OverseerCollectionProcessor
operator|.
name|getSortedElectionNodes
argument_list|(
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getZkClient
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"No overseer designate as leader found after restart #"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|": "
operator|+
name|leader
argument_list|)
expr_stmt|;
block|}
name|cloudJetty
operator|.
name|jetty
operator|.
name|start
argument_list|()
expr_stmt|;
name|success
operator|=
name|waitUntilOverseerDesignateIsLeader
argument_list|(
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getZkClient
argument_list|()
argument_list|,
name|designates
argument_list|,
literal|60
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|leader
operator|=
name|OverseerCollectionProcessor
operator|.
name|getLeaderNode
argument_list|(
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getZkClient
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|leader
operator|==
literal|null
condition|)
name|log
operator|.
name|error
argument_list|(
literal|"NOOVERSEER election queue is :"
operator|+
name|OverseerCollectionProcessor
operator|.
name|getSortedElectionNodes
argument_list|(
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getZkClient
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"No overseer leader found after restart #"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|": "
operator|+
name|leader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|leader
operator|=
name|OverseerCollectionProcessor
operator|.
name|getLeaderNode
argument_list|(
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getZkClient
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|leader
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Current overseer leader (after restart) = {}"
argument_list|,
name|leader
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getZkClient
argument_list|()
operator|.
name|printLayoutToStdOut
argument_list|()
expr_stmt|;
block|}
DECL|method|waitUntilOverseerDesignateIsLeader
specifier|static
name|boolean
name|waitUntilOverseerDesignateIsLeader
parameter_list|(
name|SolrZkClient
name|testZkClient
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|overseerDesignates
parameter_list|,
name|int
name|timeoutInSeconds
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|long
name|now
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|long
name|timeout
init|=
name|now
operator|+
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|convert
argument_list|(
name|timeoutInSeconds
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|boolean
name|firstTime
init|=
literal|true
decl_stmt|;
name|int
name|stableCheckTimeout
init|=
literal|2000
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|<
name|timeout
condition|)
block|{
name|String
name|newLeader
init|=
name|OverseerCollectionProcessor
operator|.
name|getLeaderNode
argument_list|(
name|testZkClient
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|overseerDesignates
operator|.
name|contains
argument_list|(
name|newLeader
argument_list|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|firstTime
condition|)
block|{
name|firstTime
operator|=
literal|false
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|stableCheckTimeout
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class
end_unit
