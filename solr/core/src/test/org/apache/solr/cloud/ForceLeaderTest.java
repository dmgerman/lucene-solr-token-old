begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
operator|.
name|METHOD
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|GenericSolrRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|SimpleSolrResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|overseer
operator|.
name|OverseerAction
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
operator|.
name|State
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
operator|.
name|CoreAdminAction
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NoNodeException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
import|;
end_import
begin_class
DECL|class|ForceLeaderTest
specifier|public
class|class
name|ForceLeaderTest
extends|extends
name|HttpPartitionTest
block|{
DECL|field|log
specifier|protected
specifier|static
specifier|final
specifier|transient
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ForceLeaderTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
annotation|@
name|Override
annotation|@
name|Ignore
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{    }
comment|/***    * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,    * hence resulting in a leaderless shard.    */
annotation|@
name|Test
annotation|@
name|Slow
DECL|method|testReplicasInLIRNoLeader
specifier|public
name|void
name|testReplicasInLIRNoLeader
parameter_list|()
throws|throws
name|Exception
block|{
name|handle
operator|.
name|put
argument_list|(
literal|"maxScore"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"timestamp"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|String
name|testCollectionName
init|=
literal|"forceleader_test_collection"
decl_stmt|;
name|createCollection
argument_list|(
name|testCollectionName
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|setDefaultCollection
argument_list|(
name|testCollectionName
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Replica
argument_list|>
name|notLeaders
init|=
name|ensureAllReplicasAreActive
argument_list|(
name|testCollectionName
argument_list|,
name|SHARD1
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
name|maxWaitSecsToSeeAllActive
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 2 replicas for collection "
operator|+
name|testCollectionName
operator|+
literal|" but found "
operator|+
name|notLeaders
operator|.
name|size
argument_list|()
operator|+
literal|"; clusterState: "
operator|+
name|printClusterStateInfo
argument_list|(
name|testCollectionName
argument_list|)
argument_list|,
literal|2
argument_list|,
name|notLeaders
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Replica
name|leader
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getLeaderRetry
argument_list|(
name|testCollectionName
argument_list|,
name|SHARD1
argument_list|)
decl_stmt|;
name|JettySolrRunner
name|notLeader0
init|=
name|getJettyOnPort
argument_list|(
name|getReplicaPort
argument_list|(
name|notLeaders
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ZkController
name|zkController
init|=
name|notLeader0
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getZkController
argument_list|()
decl_stmt|;
name|putNonLeadersIntoLIR
argument_list|(
name|testCollectionName
argument_list|,
name|SHARD1
argument_list|,
name|zkController
argument_list|,
name|leader
argument_list|,
name|notLeaders
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|updateClusterState
argument_list|()
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|int
name|numActiveReplicas
init|=
name|getNumberOfActiveReplicas
argument_list|(
name|clusterState
argument_list|,
name|testCollectionName
argument_list|,
name|SHARD1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected only 0 active replica but found "
operator|+
name|numActiveReplicas
operator|+
literal|"; clusterState: "
operator|+
name|printClusterStateInfo
argument_list|()
argument_list|,
literal|0
argument_list|,
name|numActiveReplicas
argument_list|)
expr_stmt|;
name|int
name|numReplicasOnLiveNodes
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Replica
name|rep
range|:
name|clusterState
operator|.
name|getSlice
argument_list|(
name|testCollectionName
argument_list|,
name|SHARD1
argument_list|)
operator|.
name|getReplicas
argument_list|()
control|)
block|{
if|if
condition|(
name|clusterState
operator|.
name|getLiveNodes
argument_list|()
operator|.
name|contains
argument_list|(
name|rep
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
name|numReplicasOnLiveNodes
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|numReplicasOnLiveNodes
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Before forcing leader: "
operator|+
name|printClusterStateInfo
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert there is no leader yet
name|assertNull
argument_list|(
literal|"Expected no leader right now. State: "
operator|+
name|clusterState
operator|.
name|getSlice
argument_list|(
name|testCollectionName
argument_list|,
name|SHARD1
argument_list|)
argument_list|,
name|clusterState
operator|.
name|getSlice
argument_list|(
name|testCollectionName
argument_list|,
name|SHARD1
argument_list|)
operator|.
name|getLeader
argument_list|()
argument_list|)
expr_stmt|;
name|assertSendDocFails
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|doForceLeader
argument_list|(
name|cloudClient
argument_list|,
name|testCollectionName
argument_list|,
name|SHARD1
argument_list|)
expr_stmt|;
comment|// By now we have an active leader. Wait for recoveries to begin
name|waitForRecoveriesToFinish
argument_list|(
name|testCollectionName
argument_list|,
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|updateClusterState
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"After forcing leader: "
operator|+
name|clusterState
operator|.
name|getSlice
argument_list|(
name|testCollectionName
argument_list|,
name|SHARD1
argument_list|)
argument_list|)
expr_stmt|;
comment|// we have a leader
name|Replica
name|newLeader
init|=
name|clusterState
operator|.
name|getSlice
argument_list|(
name|testCollectionName
argument_list|,
name|SHARD1
argument_list|)
operator|.
name|getLeader
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|newLeader
argument_list|)
expr_stmt|;
comment|// leader is active
name|assertEquals
argument_list|(
name|State
operator|.
name|ACTIVE
argument_list|,
name|newLeader
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|numActiveReplicas
operator|=
name|getNumberOfActiveReplicas
argument_list|(
name|clusterState
argument_list|,
name|testCollectionName
argument_list|,
name|SHARD1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|numActiveReplicas
argument_list|)
expr_stmt|;
comment|// Assert that indexing works again
name|log
operator|.
name|info
argument_list|(
literal|"Sending doc 4..."
argument_list|)
expr_stmt|;
name|sendDoc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Committing..."
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Doc 4 sent and commit issued"
argument_list|)
expr_stmt|;
name|assertDocsExistInAllReplicas
argument_list|(
name|notLeaders
argument_list|,
name|testCollectionName
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertDocsExistInAllReplicas
argument_list|(
name|notLeaders
argument_list|,
name|testCollectionName
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.
name|log
operator|.
name|info
argument_list|(
literal|"Checking doc counts..."
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected only 2 documents in the index"
argument_list|,
literal|2
argument_list|,
name|cloudClient
operator|.
name|query
argument_list|(
name|params
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|bringBackOldLeaderAndSendDoc
argument_list|(
name|testCollectionName
argument_list|,
name|leader
argument_list|,
name|notLeaders
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Cleaning up after the test."
argument_list|)
expr_stmt|;
comment|// try to clean up
try|try
block|{
name|CollectionAdminRequest
operator|.
name|Delete
name|req
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|Delete
argument_list|()
decl_stmt|;
name|req
operator|.
name|setCollectionName
argument_list|(
name|testCollectionName
argument_list|)
expr_stmt|;
name|req
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// don't fail the test
name|log
operator|.
name|warn
argument_list|(
literal|"Could not delete collection {} after test completed"
argument_list|,
name|testCollectionName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test that FORCELEADER can set last published state of all down (live) replicas to active (so    * that they become worthy candidates for leader election).    */
annotation|@
name|Slow
DECL|method|testLastPublishedStateIsActive
specifier|public
name|void
name|testLastPublishedStateIsActive
parameter_list|()
throws|throws
name|Exception
block|{
name|handle
operator|.
name|put
argument_list|(
literal|"maxScore"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"timestamp"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|String
name|testCollectionName
init|=
literal|"forceleader_last_published"
decl_stmt|;
name|createCollection
argument_list|(
name|testCollectionName
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|setDefaultCollection
argument_list|(
name|testCollectionName
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Collection created: "
operator|+
name|testCollectionName
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Replica
argument_list|>
name|notLeaders
init|=
name|ensureAllReplicasAreActive
argument_list|(
name|testCollectionName
argument_list|,
name|SHARD1
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
name|maxWaitSecsToSeeAllActive
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 2 replicas for collection "
operator|+
name|testCollectionName
operator|+
literal|" but found "
operator|+
name|notLeaders
operator|.
name|size
argument_list|()
operator|+
literal|"; clusterState: "
operator|+
name|printClusterStateInfo
argument_list|(
name|testCollectionName
argument_list|)
argument_list|,
literal|2
argument_list|,
name|notLeaders
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Replica
name|leader
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getLeaderRetry
argument_list|(
name|testCollectionName
argument_list|,
name|SHARD1
argument_list|)
decl_stmt|;
name|JettySolrRunner
name|notLeader0
init|=
name|getJettyOnPort
argument_list|(
name|getReplicaPort
argument_list|(
name|notLeaders
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ZkController
name|zkController
init|=
name|notLeader0
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getZkController
argument_list|()
decl_stmt|;
comment|// Mark all replicas down
name|setReplicaState
argument_list|(
name|testCollectionName
argument_list|,
name|SHARD1
argument_list|,
name|leader
argument_list|,
name|State
operator|.
name|DOWN
argument_list|)
expr_stmt|;
for|for
control|(
name|Replica
name|rep
range|:
name|notLeaders
control|)
block|{
name|setReplicaState
argument_list|(
name|testCollectionName
argument_list|,
name|SHARD1
argument_list|,
name|rep
argument_list|,
name|State
operator|.
name|DOWN
argument_list|)
expr_stmt|;
block|}
name|zkController
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|updateClusterState
argument_list|()
expr_stmt|;
comment|// Assert all replicas are down and that there is no leader
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getActiveOrRecoveringReplicas
argument_list|(
name|testCollectionName
argument_list|,
name|SHARD1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now force leader
name|doForceLeader
argument_list|(
name|cloudClient
argument_list|,
name|testCollectionName
argument_list|,
name|SHARD1
argument_list|)
expr_stmt|;
comment|// Assert that last published states of the two replicas are active now
for|for
control|(
name|Replica
name|rep
range|:
name|notLeaders
control|)
block|{
name|assertEquals
argument_list|(
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|,
name|getLastPublishedState
argument_list|(
name|testCollectionName
argument_list|,
name|SHARD1
argument_list|,
name|rep
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Cleaning up after the test."
argument_list|)
expr_stmt|;
comment|// try to clean up
try|try
block|{
name|CollectionAdminRequest
operator|.
name|Delete
name|req
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|Delete
argument_list|()
decl_stmt|;
name|req
operator|.
name|setCollectionName
argument_list|(
name|testCollectionName
argument_list|)
expr_stmt|;
name|req
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// don't fail the test
name|log
operator|.
name|warn
argument_list|(
literal|"Could not delete collection {} after test completed"
argument_list|,
name|testCollectionName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|unsetLeader
specifier|protected
name|void
name|unsetLeader
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|slice
parameter_list|)
throws|throws
name|Exception
block|{
name|DistributedQueue
name|inQueue
init|=
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getZkClient
argument_list|()
argument_list|)
decl_stmt|;
name|ZkStateReader
name|zkStateReader
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|LEADER
operator|.
name|toLower
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
name|slice
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collection
argument_list|)
decl_stmt|;
name|inQueue
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|ClusterState
name|clusterState
init|=
literal|null
decl_stmt|;
name|boolean
name|transition
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|counter
init|=
literal|10
init|;
name|counter
operator|>
literal|0
condition|;
name|counter
operator|--
control|)
block|{
name|zkStateReader
operator|.
name|updateClusterState
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
expr_stmt|;
name|Replica
name|newLeader
init|=
name|clusterState
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|slice
argument_list|)
operator|.
name|getLeader
argument_list|()
decl_stmt|;
if|if
condition|(
name|newLeader
operator|==
literal|null
condition|)
block|{
name|transition
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|transition
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not unset replica leader"
operator|+
literal|". Cluster state: "
operator|+
name|printClusterStateInfo
argument_list|(
name|collection
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|setReplicaState
specifier|protected
name|void
name|setReplicaState
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|slice
parameter_list|,
name|Replica
name|replica
parameter_list|,
name|Replica
operator|.
name|State
name|state
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|DistributedQueue
name|inQueue
init|=
name|Overseer
operator|.
name|getInQueue
argument_list|(
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getZkClient
argument_list|()
argument_list|)
decl_stmt|;
name|ZkStateReader
name|zkStateReader
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|String
name|baseUrl
init|=
name|zkStateReader
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|)
decl_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|STATE
operator|.
name|toLower
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
name|baseUrl
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
name|slice
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collection
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|replica
operator|.
name|getStr
argument_list|(
name|CORE_NAME_PROP
argument_list|)
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NODE_NAME_PROP
argument_list|,
name|replica
operator|.
name|getName
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|state
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|inQueue
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|transition
init|=
literal|false
decl_stmt|;
name|Replica
operator|.
name|State
name|replicaState
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|counter
init|=
literal|10
init|;
name|counter
operator|>
literal|0
condition|;
name|counter
operator|--
control|)
block|{
name|zkStateReader
operator|.
name|updateClusterState
argument_list|()
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|replicaState
operator|=
name|clusterState
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|slice
argument_list|)
operator|.
name|getReplica
argument_list|(
name|replica
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
expr_stmt|;
if|if
condition|(
name|replicaState
operator|==
name|state
condition|)
block|{
name|transition
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|transition
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not set replica ["
operator|+
name|replica
operator|.
name|getName
argument_list|()
operator|+
literal|"] as "
operator|+
name|state
operator|+
literal|". Last known state of the replica: "
operator|+
name|replicaState
argument_list|)
throw|;
block|}
block|}
comment|/*protected void setLastPublishedState(String collection, String slice, Replica replica, Replica.State state) throws SolrServerException, IOException,   KeeperException, InterruptedException {     ZkStateReader zkStateReader = cloudClient.getZkStateReader();     String baseUrl = zkStateReader.getBaseUrlForNodeName(replica.getNodeName());      ModifiableSolrParams params = new ModifiableSolrParams();     params.set(CoreAdminParams.ACTION, CoreAdminAction.FORCEPREPAREFORLEADERSHIP.toString());     params.set(CoreAdminParams.CORE, replica.getStr("core"));     params.set(ZkStateReader.STATE_PROP, state.toString());      SolrRequest<SimpleSolrResponse> req = new GenericSolrRequest(METHOD.GET, "/admin/cores", params);     NamedList resp = null;     try (HttpSolrClient hsc = new HttpSolrClient(baseUrl)) {        resp = hsc.request(req);     }   }*/
DECL|method|getLastPublishedState
specifier|protected
name|Replica
operator|.
name|State
name|getLastPublishedState
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|slice
parameter_list|,
name|Replica
name|replica
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|ZkStateReader
name|zkStateReader
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|String
name|baseUrl
init|=
name|zkStateReader
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|)
decl_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|STATUS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|,
name|replica
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|)
expr_stmt|;
name|SolrRequest
argument_list|<
name|SimpleSolrResponse
argument_list|>
name|req
init|=
operator|new
name|GenericSolrRequest
argument_list|(
name|METHOD
operator|.
name|GET
argument_list|,
literal|"/admin/cores"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|NamedList
name|resp
init|=
literal|null
decl_stmt|;
try|try
init|(
name|HttpSolrClient
name|hsc
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|baseUrl
argument_list|)
init|)
block|{
name|resp
operator|=
name|hsc
operator|.
name|request
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
name|String
name|lastPublished
init|=
operator|(
operator|(
operator|(
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|String
argument_list|>
argument_list|>
operator|)
name|resp
operator|.
name|get
argument_list|(
literal|"status"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
name|replica
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"lastPublished"
argument_list|)
decl_stmt|;
return|return
name|Replica
operator|.
name|State
operator|.
name|getState
argument_list|(
name|lastPublished
argument_list|)
return|;
block|}
DECL|method|assertSendDocFails
name|void
name|assertSendDocFails
parameter_list|(
name|int
name|docId
parameter_list|)
throws|throws
name|Exception
block|{
comment|// sending a doc in this state fails
try|try
block|{
name|sendDoc
argument_list|(
name|docId
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"Should've failed indexing during a down state. Cluster state: "
operator|+
name|printClusterStateInfo
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should've failed indexing during a down state."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Document couldn't be sent, which is expected."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|putNonLeadersIntoLIR
name|void
name|putNonLeadersIntoLIR
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|String
name|shard
parameter_list|,
name|ZkController
name|zkController
parameter_list|,
name|Replica
name|leader
parameter_list|,
name|List
argument_list|<
name|Replica
argument_list|>
name|notLeaders
parameter_list|)
throws|throws
name|Exception
block|{
name|SocketProxy
index|[]
name|nonLeaderProxies
init|=
operator|new
name|SocketProxy
index|[
name|notLeaders
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|notLeaders
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|nonLeaderProxies
index|[
name|i
index|]
operator|=
name|getProxyForReplica
argument_list|(
name|notLeaders
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|sendDoc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// ok, now introduce a network partition between the leader and both replicas
name|log
operator|.
name|info
argument_list|(
literal|"Closing proxies for the non-leader replicas..."
argument_list|)
expr_stmt|;
for|for
control|(
name|SocketProxy
name|proxy
range|:
name|nonLeaderProxies
control|)
name|proxy
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// indexing during a partition
name|log
operator|.
name|info
argument_list|(
literal|"Sending a doc during the network partition..."
argument_list|)
expr_stmt|;
name|sendDoc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Wait a little
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// Kill the leader
name|log
operator|.
name|info
argument_list|(
literal|"Killing leader for shard1 of "
operator|+
name|collectionName
operator|+
literal|" on node "
operator|+
name|leader
operator|.
name|getNodeName
argument_list|()
operator|+
literal|""
argument_list|)
expr_stmt|;
name|JettySolrRunner
name|leaderJetty
init|=
name|getJettyOnPort
argument_list|(
name|getReplicaPort
argument_list|(
name|leader
argument_list|)
argument_list|)
decl_stmt|;
name|getProxyForReplica
argument_list|(
name|leader
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|leaderJetty
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// Wait for a steady state, till LIR flags have been set and the shard is leaderless
name|log
operator|.
name|info
argument_list|(
literal|"Sleep and periodically wake up to check for state..."
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|State
name|lirStates
index|[]
init|=
operator|new
name|State
index|[
name|notLeaders
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|notLeaders
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
name|lirStates
index|[
name|j
index|]
operator|=
name|zkController
operator|.
name|getLeaderInitiatedRecoveryState
argument_list|(
name|collectionName
argument_list|,
name|shard
argument_list|,
name|notLeaders
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|zkController
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|updateClusterState
argument_list|()
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|zkController
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|boolean
name|allDown
init|=
literal|true
decl_stmt|;
for|for
control|(
name|State
name|lirState
range|:
name|lirStates
control|)
if|if
condition|(
name|Replica
operator|.
name|State
operator|.
name|DOWN
operator|.
name|equals
argument_list|(
name|lirState
argument_list|)
operator|==
literal|false
condition|)
name|allDown
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|allDown
operator|&&
name|clusterState
operator|.
name|getSlice
argument_list|(
name|collectionName
argument_list|,
name|shard
argument_list|)
operator|.
name|getLeader
argument_list|()
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|log
operator|.
name|warn
argument_list|(
literal|"Attempt "
operator|+
name|i
operator|+
literal|", waiting on for 1 sec to settle down in the steady state. State: "
operator|+
name|printClusterStateInfo
argument_list|(
name|collectionName
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"LIR state: "
operator|+
name|getLIRState
argument_list|(
name|zkController
argument_list|,
name|collectionName
argument_list|,
name|shard
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Waking up..."
argument_list|)
expr_stmt|;
comment|// remove the network partition
name|log
operator|.
name|info
argument_list|(
literal|"Reopening the proxies for the non-leader replicas..."
argument_list|)
expr_stmt|;
for|for
control|(
name|SocketProxy
name|proxy
range|:
name|nonLeaderProxies
control|)
name|proxy
operator|.
name|reopen
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"LIR state: "
operator|+
name|getLIRState
argument_list|(
name|zkController
argument_list|,
name|collectionName
argument_list|,
name|shard
argument_list|)
argument_list|)
expr_stmt|;
name|State
name|lirStates
index|[]
init|=
operator|new
name|State
index|[
name|notLeaders
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|notLeaders
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
name|lirStates
index|[
name|j
index|]
operator|=
name|zkController
operator|.
name|getLeaderInitiatedRecoveryState
argument_list|(
name|collectionName
argument_list|,
name|shard
argument_list|,
name|notLeaders
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|State
name|lirState
range|:
name|lirStates
control|)
name|assertEquals
argument_list|(
literal|"Expected that the LIR state would've been down by now"
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|DOWN
argument_list|,
operator|(
name|lirState
operator|)
argument_list|)
expr_stmt|;
block|}
DECL|method|bringBackOldLeaderAndSendDoc
specifier|protected
name|void
name|bringBackOldLeaderAndSendDoc
parameter_list|(
name|String
name|collection
parameter_list|,
name|Replica
name|leader
parameter_list|,
name|List
argument_list|<
name|Replica
argument_list|>
name|notLeaders
parameter_list|,
name|int
name|docid
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Bring back the leader which was stopped
name|log
operator|.
name|info
argument_list|(
literal|"Bringing back originally killed leader..."
argument_list|)
expr_stmt|;
name|JettySolrRunner
name|leaderJetty
init|=
name|getJettyOnPort
argument_list|(
name|getReplicaPort
argument_list|(
name|leader
argument_list|)
argument_list|)
decl_stmt|;
name|leaderJetty
operator|.
name|start
argument_list|()
expr_stmt|;
name|waitForRecoveriesToFinish
argument_list|(
name|collection
argument_list|,
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|updateClusterState
argument_list|()
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"After bringing back leader: "
operator|+
name|clusterState
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|SHARD1
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|numActiveReplicas
init|=
name|getNumberOfActiveReplicas
argument_list|(
name|clusterState
argument_list|,
name|collection
argument_list|,
name|SHARD1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|+
name|notLeaders
operator|.
name|size
argument_list|()
argument_list|,
name|numActiveReplicas
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sending doc "
operator|+
name|docid
operator|+
literal|"..."
argument_list|)
expr_stmt|;
name|sendDoc
argument_list|(
name|docid
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Committing..."
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Doc "
operator|+
name|docid
operator|+
literal|" sent and commit issued"
argument_list|)
expr_stmt|;
name|assertDocsExistInAllReplicas
argument_list|(
name|notLeaders
argument_list|,
name|collection
argument_list|,
name|docid
argument_list|,
name|docid
argument_list|)
expr_stmt|;
name|assertDocsExistInAllReplicas
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|leader
argument_list|)
argument_list|,
name|collection
argument_list|,
name|docid
argument_list|,
name|docid
argument_list|)
expr_stmt|;
block|}
DECL|method|getLIRState
specifier|protected
name|String
name|getLIRState
parameter_list|(
name|ZkController
name|zkController
parameter_list|,
name|String
name|collection
parameter_list|,
name|String
name|shard
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|zkController
operator|.
name|getLeaderInitiatedRecoveryZnodePath
argument_list|(
name|collection
argument_list|,
name|shard
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
return|return
literal|null
return|;
try|try
block|{
name|zkController
operator|.
name|getZkClient
argument_list|()
operator|.
name|printLayout
argument_list|(
name|path
argument_list|,
literal|4
argument_list|,
name|sb
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoNodeException
name|ex
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|sendDoc
specifier|protected
name|int
name|sendDoc
parameter_list|(
name|int
name|docId
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
name|id
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|docId
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"a_t"
argument_list|,
literal|"hello"
operator|+
name|docId
argument_list|)
expr_stmt|;
return|return
name|sendDocsWithRetry
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|doc
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
return|;
block|}
DECL|method|doForceLeader
specifier|private
name|void
name|doForceLeader
parameter_list|(
name|SolrClient
name|client
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|String
name|shard
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|CollectionAdminRequest
operator|.
name|ForceLeader
name|forceLeader
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|ForceLeader
argument_list|()
decl_stmt|;
name|forceLeader
operator|.
name|setCollectionName
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|forceLeader
operator|.
name|setShardName
argument_list|(
name|shard
argument_list|)
expr_stmt|;
name|client
operator|.
name|request
argument_list|(
name|forceLeader
argument_list|)
expr_stmt|;
block|}
DECL|method|getNumberOfActiveReplicas
specifier|protected
name|int
name|getNumberOfActiveReplicas
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|String
name|collection
parameter_list|,
name|String
name|sliceId
parameter_list|)
block|{
name|int
name|numActiveReplicas
init|=
literal|0
decl_stmt|;
comment|// Assert all replicas are active
for|for
control|(
name|Replica
name|rep
range|:
name|clusterState
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
name|sliceId
argument_list|)
operator|.
name|getReplicas
argument_list|()
control|)
block|{
if|if
condition|(
name|rep
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|State
operator|.
name|ACTIVE
argument_list|)
condition|)
block|{
name|numActiveReplicas
operator|++
expr_stmt|;
block|}
block|}
return|return
name|numActiveReplicas
return|;
block|}
block|}
end_class
end_unit
