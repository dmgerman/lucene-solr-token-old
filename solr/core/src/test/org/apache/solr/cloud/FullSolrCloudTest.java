begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CommonsHttpSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|CloudState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|SolrDispatchFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import
begin_comment
comment|/**  *   * TODO: we should still test this works as a custom update chain as well as  * what we test now - the default update chain  *   */
end_comment
begin_class
annotation|@
name|Ignore
DECL|class|FullSolrCloudTest
specifier|public
class|class
name|FullSolrCloudTest
extends|extends
name|AbstractDistributedZkTestCase
block|{
DECL|field|SHARD2
specifier|private
specifier|static
specifier|final
name|String
name|SHARD2
init|=
literal|"shard2"
decl_stmt|;
DECL|field|DEFAULT_COLLECTION
specifier|protected
specifier|static
specifier|final
name|String
name|DEFAULT_COLLECTION
init|=
literal|"collection1"
decl_stmt|;
DECL|field|printLayoutOnTearDown
specifier|private
name|boolean
name|printLayoutOnTearDown
init|=
literal|false
decl_stmt|;
DECL|field|t1
name|String
name|t1
init|=
literal|"a_t"
decl_stmt|;
DECL|field|i1
name|String
name|i1
init|=
literal|"a_si"
decl_stmt|;
DECL|field|nint
name|String
name|nint
init|=
literal|"n_i"
decl_stmt|;
DECL|field|tint
name|String
name|tint
init|=
literal|"n_ti"
decl_stmt|;
DECL|field|nfloat
name|String
name|nfloat
init|=
literal|"n_f"
decl_stmt|;
DECL|field|tfloat
name|String
name|tfloat
init|=
literal|"n_tf"
decl_stmt|;
DECL|field|ndouble
name|String
name|ndouble
init|=
literal|"n_d"
decl_stmt|;
DECL|field|tdouble
name|String
name|tdouble
init|=
literal|"n_td"
decl_stmt|;
DECL|field|nlong
name|String
name|nlong
init|=
literal|"n_l"
decl_stmt|;
DECL|field|tlong
name|String
name|tlong
init|=
literal|"other_tl1"
decl_stmt|;
DECL|field|ndate
name|String
name|ndate
init|=
literal|"n_dt"
decl_stmt|;
DECL|field|tdate
name|String
name|tdate
init|=
literal|"n_tdt"
decl_stmt|;
DECL|field|oddField
name|String
name|oddField
init|=
literal|"oddField_s"
decl_stmt|;
DECL|field|missingField
name|String
name|missingField
init|=
literal|"ignore_exception__missing_but_valid_field_t"
decl_stmt|;
DECL|field|invalidField
name|String
name|invalidField
init|=
literal|"ignore_exception__invalid_field_not_in_schema"
decl_stmt|;
DECL|field|sliceCount
specifier|protected
name|int
name|sliceCount
decl_stmt|;
DECL|field|cloudClient
specifier|protected
specifier|volatile
name|CloudSolrServer
name|cloudClient
decl_stmt|;
DECL|field|jettyToInfo
specifier|protected
name|Map
argument_list|<
name|JettySolrRunner
argument_list|,
name|ZkNodeProps
argument_list|>
name|jettyToInfo
init|=
operator|new
name|HashMap
argument_list|<
name|JettySolrRunner
argument_list|,
name|ZkNodeProps
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|clientToInfo
specifier|protected
name|Map
argument_list|<
name|CloudSolrServerClient
argument_list|,
name|ZkNodeProps
argument_list|>
name|clientToInfo
init|=
operator|new
name|HashMap
argument_list|<
name|CloudSolrServerClient
argument_list|,
name|ZkNodeProps
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|shardToClient
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SolrServer
argument_list|>
argument_list|>
name|shardToClient
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SolrServer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|shardToJetty
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CloudJettyRunner
argument_list|>
argument_list|>
name|shardToJetty
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CloudJettyRunner
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|jettyIntCntr
specifier|private
name|AtomicInteger
name|jettyIntCntr
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|chaosMonkey
specifier|protected
name|ChaosMonkey
name|chaosMonkey
decl_stmt|;
DECL|field|zkStateReader
specifier|protected
specifier|volatile
name|ZkStateReader
name|zkStateReader
decl_stmt|;
DECL|field|shardToLeaderClient
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|SolrServer
argument_list|>
name|shardToLeaderClient
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SolrServer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|shardToLeaderJetty
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|CloudJettyRunner
argument_list|>
name|shardToLeaderJetty
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CloudJettyRunner
argument_list|>
argument_list|()
decl_stmt|;
DECL|class|CloudJettyRunner
class|class
name|CloudJettyRunner
block|{
DECL|field|jetty
name|JettySolrRunner
name|jetty
decl_stmt|;
DECL|field|nodeName
name|String
name|nodeName
decl_stmt|;
DECL|field|coreNodeName
name|String
name|coreNodeName
decl_stmt|;
block|}
DECL|class|CloudSolrServerClient
specifier|static
class|class
name|CloudSolrServerClient
block|{
DECL|field|client
name|SolrServer
name|client
decl_stmt|;
DECL|field|shardName
name|String
name|shardName
decl_stmt|;
DECL|method|CloudSolrServerClient
specifier|public
name|CloudSolrServerClient
parameter_list|()
block|{}
DECL|method|CloudSolrServerClient
specifier|public
name|CloudSolrServerClient
parameter_list|(
name|SolrServer
name|client
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|client
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|client
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|CloudSolrServerClient
name|other
init|=
operator|(
name|CloudSolrServerClient
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|client
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|client
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|client
operator|.
name|equals
argument_list|(
name|other
operator|.
name|client
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|ignoreException
argument_list|(
literal|".*"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"numShards"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|sliceCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.directoryFactory"
argument_list|,
literal|"solr.StandardDirectoryFactory"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solrcloud.update.delay"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"enable.update.log"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"remove.version.field"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.directoryFactory"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solrcloud.update.delay"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"enable.update.log"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"remove.version.field"
argument_list|)
expr_stmt|;
block|}
DECL|method|FullSolrCloudTest
specifier|public
name|FullSolrCloudTest
parameter_list|()
block|{
name|fixShardCount
operator|=
literal|true
expr_stmt|;
name|shardCount
operator|=
literal|4
expr_stmt|;
name|sliceCount
operator|=
literal|2
expr_stmt|;
comment|// TODO: for now, turn off stress because it uses regular clients, and we
comment|// need the cloud client because we kill servers
name|stress
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|initCloud
specifier|protected
name|void
name|initCloud
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|zkStateReader
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|zkStateReader
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|zkStateReader
operator|=
operator|new
name|ZkStateReader
argument_list|(
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|,
literal|10000
argument_list|,
name|AbstractZkTestCase
operator|.
name|TIMEOUT
argument_list|)
expr_stmt|;
name|zkStateReader
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
block|}
name|chaosMonkey
operator|=
operator|new
name|ChaosMonkey
argument_list|(
name|zkServer
argument_list|,
name|zkStateReader
argument_list|,
name|DEFAULT_COLLECTION
argument_list|,
name|shardToJetty
argument_list|,
name|shardToClient
argument_list|,
name|shardToLeaderClient
argument_list|,
name|shardToLeaderJetty
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
comment|// wait until shards have started registering...
while|while
condition|(
operator|!
name|zkStateReader
operator|.
name|getCloudState
argument_list|()
operator|.
name|getCollections
argument_list|()
operator|.
name|contains
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|zkStateReader
operator|.
name|getCloudState
argument_list|()
operator|.
name|getSlices
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
operator|.
name|size
argument_list|()
operator|!=
name|sliceCount
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
comment|// use the distributed solrj client
if|if
condition|(
name|cloudClient
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|cloudClient
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|CloudSolrServer
name|server
init|=
operator|new
name|CloudSolrServer
argument_list|(
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
decl_stmt|;
name|server
operator|.
name|setDefaultCollection
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
expr_stmt|;
name|server
operator|.
name|getLbServer
argument_list|()
operator|.
name|getHttpClient
argument_list|()
operator|.
name|getParams
argument_list|()
operator|.
name|setConnectionManagerTimeout
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|server
operator|.
name|getLbServer
argument_list|()
operator|.
name|getHttpClient
argument_list|()
operator|.
name|getParams
argument_list|()
operator|.
name|setSoTimeout
argument_list|(
literal|15000
argument_list|)
expr_stmt|;
name|cloudClient
operator|=
name|server
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|createServers
specifier|protected
name|void
name|createServers
parameter_list|(
name|int
name|numServers
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"collection"
argument_list|,
literal|"control_collection"
argument_list|)
expr_stmt|;
name|String
name|numShards
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|)
decl_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|)
expr_stmt|;
name|controlJetty
operator|=
name|createJetty
argument_list|(
name|testDir
argument_list|,
name|testDir
operator|+
literal|"/control/data"
argument_list|,
literal|"control_shard"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"collection"
argument_list|)
expr_stmt|;
if|if
condition|(
name|numShards
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|,
name|numShards
argument_list|)
expr_stmt|;
block|}
name|controlClient
operator|=
name|createNewSolrServer
argument_list|(
name|controlJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|createJettys
argument_list|(
name|numServers
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|createJettys
specifier|private
name|List
argument_list|<
name|JettySolrRunner
argument_list|>
name|createJettys
parameter_list|(
name|int
name|numJettys
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createJettys
argument_list|(
name|numJettys
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * @param numJettys    * @param checkCreatedVsState    *          if true, make sure the number created (numJettys) matches the    *          number in the cluster state - if you add more jetties this may not    *          be the case    * @return    * @throws Exception    */
DECL|method|createJettys
specifier|private
name|List
argument_list|<
name|JettySolrRunner
argument_list|>
name|createJettys
parameter_list|(
name|int
name|numJettys
parameter_list|,
name|boolean
name|checkCreatedVsState
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|JettySolrRunner
argument_list|>
name|jettys
init|=
operator|new
name|ArrayList
argument_list|<
name|JettySolrRunner
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SolrServer
argument_list|>
name|clients
init|=
operator|new
name|ArrayList
argument_list|<
name|SolrServer
argument_list|>
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numJettys
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|JettySolrRunner
name|j
init|=
name|createJetty
argument_list|(
name|testDir
argument_list|,
name|testDir
operator|+
literal|"/jetty"
operator|+
name|this
operator|.
name|jettyIntCntr
operator|.
name|incrementAndGet
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|"solrconfig.xml"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|jettys
operator|.
name|add
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|SolrServer
name|client
init|=
name|createNewSolrServer
argument_list|(
name|j
operator|.
name|getLocalPort
argument_list|()
argument_list|)
decl_stmt|;
name|clients
operator|.
name|add
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
name|initCloud
argument_list|()
expr_stmt|;
name|this
operator|.
name|jettys
operator|.
name|addAll
argument_list|(
name|jettys
argument_list|)
expr_stmt|;
name|this
operator|.
name|clients
operator|.
name|addAll
argument_list|(
name|clients
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkCreatedVsState
condition|)
block|{
comment|// now wait until we see that the number of shards in the cluster state
comment|// matches what we expect
name|int
name|numShards
init|=
name|getNumShards
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
decl_stmt|;
name|int
name|retries
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|numShards
operator|!=
name|shardCount
condition|)
block|{
name|numShards
operator|=
name|getNumShards
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
expr_stmt|;
if|if
condition|(
name|numShards
operator|==
name|shardCount
condition|)
break|break;
if|if
condition|(
name|retries
operator|++
operator|==
literal|60
condition|)
block|{
name|printLayoutOnTearDown
operator|=
literal|true
expr_stmt|;
name|fail
argument_list|(
literal|"Shards in the state does not match what we set:"
operator|+
name|numShards
operator|+
literal|" vs "
operator|+
name|shardCount
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
comment|// also make sure we have a leader for each shard
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|sliceCount
condition|;
name|i
operator|++
control|)
block|{
name|zkStateReader
operator|.
name|getLeaderProps
argument_list|(
name|DEFAULT_COLLECTION
argument_list|,
literal|"shard"
operator|+
name|i
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
block|}
name|updateMappingsFromZk
argument_list|(
name|this
operator|.
name|jettys
argument_list|,
name|this
operator|.
name|clients
argument_list|)
expr_stmt|;
comment|// build the shard string
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numJettys
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|JettySolrRunner
name|j
init|=
name|this
operator|.
name|jettys
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|JettySolrRunner
name|j2
init|=
name|this
operator|.
name|jettys
operator|.
name|get
argument_list|(
name|i
operator|+
operator|(
name|numJettys
operator|/
literal|2
operator|-
literal|1
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"localhost:"
argument_list|)
operator|.
name|append
argument_list|(
name|j
operator|.
name|getLocalPort
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"|localhost:"
argument_list|)
operator|.
name|append
argument_list|(
name|j2
operator|.
name|getLocalPort
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|shards
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
return|return
name|jettys
return|;
block|}
DECL|method|getNumShards
specifier|private
name|int
name|getNumShards
parameter_list|(
name|String
name|defaultCollection
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|this
operator|.
name|zkStateReader
operator|.
name|getCloudState
argument_list|()
operator|.
name|getSlices
argument_list|(
name|defaultCollection
argument_list|)
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|entry
range|:
name|slices
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|cnt
operator|+=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getShards
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|cnt
return|;
block|}
DECL|method|createJetty
specifier|public
name|JettySolrRunner
name|createJetty
parameter_list|(
name|String
name|dataDir
parameter_list|,
name|String
name|shardList
parameter_list|,
name|String
name|solrConfigOverride
parameter_list|)
throws|throws
name|Exception
block|{
name|JettySolrRunner
name|jetty
init|=
operator|new
name|JettySolrRunner
argument_list|(
name|getSolrHome
argument_list|()
argument_list|,
literal|"/solr"
argument_list|,
literal|0
argument_list|,
name|solrConfigOverride
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|jetty
operator|.
name|setShards
argument_list|(
name|shardList
argument_list|)
expr_stmt|;
name|jetty
operator|.
name|setDataDir
argument_list|(
name|dataDir
argument_list|)
expr_stmt|;
name|jetty
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|jetty
return|;
block|}
DECL|method|updateMappingsFromZk
specifier|protected
name|void
name|updateMappingsFromZk
parameter_list|(
name|List
argument_list|<
name|JettySolrRunner
argument_list|>
name|jettys
parameter_list|,
name|List
argument_list|<
name|SolrServer
argument_list|>
name|clients
parameter_list|)
throws|throws
name|Exception
throws|,
name|IOException
throws|,
name|KeeperException
throws|,
name|URISyntaxException
block|{
name|zkStateReader
operator|.
name|updateCloudState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|shardToClient
operator|.
name|clear
argument_list|()
expr_stmt|;
name|shardToJetty
operator|.
name|clear
argument_list|()
expr_stmt|;
name|jettyToInfo
operator|.
name|clear
argument_list|()
expr_stmt|;
name|CloudState
name|cloudState
init|=
name|zkStateReader
operator|.
name|getCloudState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|cloudState
operator|.
name|getSlices
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|slices
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No slices found for collection "
operator|+
name|DEFAULT_COLLECTION
operator|+
literal|" in "
operator|+
name|cloudState
operator|.
name|getCollections
argument_list|()
argument_list|)
throw|;
block|}
for|for
control|(
name|SolrServer
name|client
range|:
name|clients
control|)
block|{
comment|// find info for this client in zk
name|nextClient
label|:
comment|// we find ou state by simply matching ports...
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slice
range|:
name|slices
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ZkNodeProps
argument_list|>
name|theShards
init|=
name|slice
operator|.
name|getValue
argument_list|()
operator|.
name|getShards
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ZkNodeProps
argument_list|>
name|shard
range|:
name|theShards
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|port
init|=
operator|new
name|URI
argument_list|(
operator|(
operator|(
name|CommonsHttpSolrServer
operator|)
name|client
operator|)
operator|.
name|getBaseURL
argument_list|()
argument_list|)
operator|.
name|getPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|shard
operator|.
name|getKey
argument_list|()
operator|.
name|contains
argument_list|(
literal|":"
operator|+
name|port
operator|+
literal|"_"
argument_list|)
condition|)
block|{
name|CloudSolrServerClient
name|csc
init|=
operator|new
name|CloudSolrServerClient
argument_list|()
decl_stmt|;
name|csc
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|csc
operator|.
name|shardName
operator|=
name|shard
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
expr_stmt|;
name|boolean
name|isLeader
init|=
name|shard
operator|.
name|getValue
argument_list|()
operator|.
name|containsKey
argument_list|(
name|ZkStateReader
operator|.
name|LEADER_PROP
argument_list|)
decl_stmt|;
name|clientToInfo
operator|.
name|put
argument_list|(
name|csc
argument_list|,
name|shard
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SolrServer
argument_list|>
name|list
init|=
name|shardToClient
operator|.
name|get
argument_list|(
name|slice
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|SolrServer
argument_list|>
argument_list|()
expr_stmt|;
name|shardToClient
operator|.
name|put
argument_list|(
name|slice
operator|.
name|getKey
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|client
argument_list|)
expr_stmt|;
if|if
condition|(
name|isLeader
condition|)
block|{
name|shardToLeaderClient
operator|.
name|put
argument_list|(
name|slice
operator|.
name|getKey
argument_list|()
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
break|break
name|nextClient
break|;
block|}
block|}
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slice
range|:
name|slices
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// check that things look right
name|assertEquals
argument_list|(
name|slice
operator|.
name|getValue
argument_list|()
operator|.
name|getShards
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|shardToClient
operator|.
name|get
argument_list|(
name|slice
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|jettys
control|)
block|{
name|int
name|port
init|=
name|jetty
operator|.
name|getLocalPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|port
operator|==
operator|-
literal|1
condition|)
block|{
continue|continue;
comment|// If we cannot get the port, this jetty is down
block|}
name|nextJetty
label|:
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slice
range|:
name|slices
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ZkNodeProps
argument_list|>
name|theShards
init|=
name|slice
operator|.
name|getValue
argument_list|()
operator|.
name|getShards
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ZkNodeProps
argument_list|>
name|shard
range|:
name|theShards
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|shard
operator|.
name|getKey
argument_list|()
operator|.
name|contains
argument_list|(
literal|":"
operator|+
name|port
operator|+
literal|"_"
argument_list|)
condition|)
block|{
name|jettyToInfo
operator|.
name|put
argument_list|(
name|jetty
argument_list|,
name|shard
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CloudJettyRunner
argument_list|>
name|list
init|=
name|shardToJetty
operator|.
name|get
argument_list|(
name|slice
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|CloudJettyRunner
argument_list|>
argument_list|()
expr_stmt|;
name|shardToJetty
operator|.
name|put
argument_list|(
name|slice
operator|.
name|getKey
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isLeader
init|=
name|shard
operator|.
name|getValue
argument_list|()
operator|.
name|containsKey
argument_list|(
name|ZkStateReader
operator|.
name|LEADER_PROP
argument_list|)
decl_stmt|;
name|CloudJettyRunner
name|cjr
init|=
operator|new
name|CloudJettyRunner
argument_list|()
decl_stmt|;
name|cjr
operator|.
name|jetty
operator|=
name|jetty
expr_stmt|;
name|cjr
operator|.
name|nodeName
operator|=
name|shard
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
expr_stmt|;
name|cjr
operator|.
name|coreNodeName
operator|=
name|shard
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|cjr
argument_list|)
expr_stmt|;
if|if
condition|(
name|isLeader
condition|)
block|{
name|shardToLeaderJetty
operator|.
name|put
argument_list|(
name|slice
operator|.
name|getKey
argument_list|()
argument_list|,
name|cjr
argument_list|)
expr_stmt|;
block|}
break|break
name|nextJetty
break|;
block|}
block|}
block|}
block|}
comment|// # of jetties may not match replicas in shard here, because we don't map
comment|// jetties that are not running - every shard should have at least one
comment|// running jetty though
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slice
range|:
name|slices
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// check that things look right
name|List
argument_list|<
name|CloudJettyRunner
argument_list|>
name|jetties
init|=
name|shardToJetty
operator|.
name|get
argument_list|(
name|slice
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Test setup problem: We found no jetties for shard: "
operator|+
name|slice
operator|.
name|getKey
argument_list|()
operator|+
literal|" just:"
operator|+
name|shardToJetty
operator|.
name|keySet
argument_list|()
argument_list|,
name|jetties
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jetties
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setDistributedParams
specifier|protected
name|void
name|setDistributedParams
parameter_list|(
name|ModifiableSolrParams
name|params
parameter_list|)
block|{
if|if
condition|(
name|r
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// don't set shards, let that be figured out from the cloud state
block|}
else|else
block|{
comment|// use shard ids rather than physical locations
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sliceCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"shard"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|set
argument_list|(
literal|"shards"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|indexDoc
specifier|protected
name|void
name|indexDoc
parameter_list|(
name|SolrInputDocument
name|doc
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|controlClient
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// if we wanted to randomly pick a client - but sometimes they may be
comment|// down...
comment|// boolean pick = random.nextBoolean();
comment|//
comment|// int which = (doc.getField(id).toString().hashCode()& 0x7fffffff) %
comment|// sliceCount;
comment|//
comment|// if (pick&& sliceCount> 1) {
comment|// which = which + ((shardCount / sliceCount) *
comment|// random.nextInt(sliceCount-1));
comment|// }
comment|//
comment|// CommonsHttpSolrServer client = (CommonsHttpSolrServer)
comment|// clients.get(which);
name|UpdateRequest
name|ureq
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|ureq
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// ureq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);
name|ureq
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
block|}
DECL|method|index_specific
specifier|protected
name|void
name|index_specific
parameter_list|(
name|int
name|serverNumber
parameter_list|,
name|Object
modifier|...
name|fields
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|doc
operator|.
name|addField
argument_list|(
call|(
name|String
call|)
argument_list|(
name|fields
index|[
name|i
index|]
argument_list|)
argument_list|,
name|fields
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|controlClient
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|CommonsHttpSolrServer
name|client
init|=
operator|(
name|CommonsHttpSolrServer
operator|)
name|clients
operator|.
name|get
argument_list|(
name|serverNumber
argument_list|)
decl_stmt|;
name|UpdateRequest
name|ureq
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|ureq
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// ureq.setParam("update.chain", DISTRIB_UPDATE_CHAIN);
name|ureq
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
DECL|method|index_specific
specifier|protected
name|void
name|index_specific
parameter_list|(
name|SolrServer
name|client
parameter_list|,
name|Object
modifier|...
name|fields
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|doc
operator|.
name|addField
argument_list|(
call|(
name|String
call|)
argument_list|(
name|fields
index|[
name|i
index|]
argument_list|)
argument_list|,
name|fields
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|UpdateRequest
name|ureq
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|ureq
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// ureq.setParam("update.chain", DISTRIB_UPDATE_CHAIN);
name|ureq
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
comment|// add to control second in case adding to shards fails
name|controlClient
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|del
specifier|protected
name|void
name|del
parameter_list|(
name|String
name|q
parameter_list|)
throws|throws
name|Exception
block|{
name|controlClient
operator|.
name|deleteByQuery
argument_list|(
name|q
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrServer
name|client
range|:
name|clients
control|)
block|{
name|UpdateRequest
name|ureq
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
comment|// ureq.setParam("update.chain", DISTRIB_UPDATE_CHAIN);
name|ureq
operator|.
name|deleteByQuery
argument_list|(
name|q
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
block|}
comment|// serial commit...
comment|/*    * (non-Javadoc)    *     * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()    *     * Create 3 shards, each with one replica    */
annotation|@
name|Override
DECL|method|doTest
specifier|public
name|void
name|doTest
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|testFinished
init|=
literal|false
decl_stmt|;
try|try
block|{
name|handle
operator|.
name|clear
argument_list|()
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"QTime"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"timestamp"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|1
argument_list|,
name|i1
argument_list|,
literal|100
argument_list|,
name|tlong
argument_list|,
literal|100
argument_list|,
name|t1
argument_list|,
literal|"now is the time for all good men"
argument_list|,
literal|"foo_f"
argument_list|,
literal|1.414f
argument_list|,
literal|"foo_b"
argument_list|,
literal|"true"
argument_list|,
literal|"foo_d"
argument_list|,
literal|1.414d
argument_list|)
expr_stmt|;
comment|// make sure we are in a steady state...
name|waitForRecoveriesToFinish
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|assertDocCounts
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|indexAbunchOfDocs
argument_list|()
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|assertDocCounts
argument_list|(
name|VERBOSE
argument_list|)
expr_stmt|;
name|checkQueries
argument_list|()
expr_stmt|;
name|assertDocCounts
argument_list|(
name|VERBOSE
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"n_tl1 desc"
argument_list|)
expr_stmt|;
name|brindDownShardIndexSomeDocsAndRecover
argument_list|()
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"n_tl1 desc"
argument_list|)
expr_stmt|;
comment|// test adding another replica to a shard - it should do a
comment|// recovery/replication to pick up the index from the leader
name|addNewReplica
argument_list|()
expr_stmt|;
name|long
name|docId
init|=
name|testUpdateAndDelete
argument_list|()
decl_stmt|;
comment|// index a bad doc...
try|try
block|{
name|indexr
argument_list|(
name|t1
argument_list|,
literal|"a doc with no id"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"this should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// TODO: bring this to it's own method?
comment|// try indexing to a leader that has no replicas up
name|ZkNodeProps
name|leaderProps
init|=
name|zkStateReader
operator|.
name|getLeaderProps
argument_list|(
name|DEFAULT_COLLECTION
argument_list|,
name|SHARD2
argument_list|)
decl_stmt|;
name|String
name|nodeName
init|=
name|leaderProps
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
decl_stmt|;
name|chaosMonkey
operator|.
name|stopShardExcept
argument_list|(
name|SHARD2
argument_list|,
name|nodeName
argument_list|)
expr_stmt|;
name|SolrServer
name|client
init|=
name|getClient
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
name|index_specific
argument_list|(
name|client
argument_list|,
literal|"id"
argument_list|,
name|docId
operator|+
literal|1
argument_list|,
name|t1
argument_list|,
literal|"what happens here?"
argument_list|)
expr_stmt|;
comment|// expire a session...
name|CloudJettyRunner
name|cloudJetty
init|=
name|shardToJetty
operator|.
name|get
argument_list|(
literal|"shard1"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|chaosMonkey
operator|.
name|expireSession
argument_list|(
name|cloudJetty
operator|.
name|jetty
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
name|docId
operator|+
literal|1
argument_list|,
name|t1
argument_list|,
literal|"slip this doc in"
argument_list|)
expr_stmt|;
name|waitForRecoveriesToFinish
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|checkShardConsistency
argument_list|(
literal|"shard1"
argument_list|)
expr_stmt|;
name|testFinished
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|testFinished
condition|)
block|{
name|printLayoutOnTearDown
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
DECL|method|testUpdateAndDelete
specifier|private
name|long
name|testUpdateAndDelete
parameter_list|()
throws|throws
name|Exception
throws|,
name|SolrServerException
throws|,
name|IOException
block|{
name|long
name|docId
init|=
literal|99999999L
decl_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
name|docId
argument_list|,
name|t1
argument_list|,
literal|"originalcontent"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
name|t1
operator|+
literal|":originalcontent"
argument_list|)
expr_stmt|;
name|QueryResponse
name|results
init|=
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// update doc
name|indexr
argument_list|(
literal|"id"
argument_list|,
name|docId
argument_list|,
name|t1
argument_list|,
literal|"updatedcontent"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|results
operator|=
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|query
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
name|t1
operator|+
literal|":updatedcontent"
argument_list|)
expr_stmt|;
name|results
operator|=
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|query
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|UpdateRequest
name|uReq
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
comment|// uReq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);
name|uReq
operator|.
name|deleteById
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|docId
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|results
operator|=
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|query
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|docId
return|;
block|}
DECL|method|addNewReplica
specifier|private
name|void
name|addNewReplica
parameter_list|()
throws|throws
name|Exception
throws|,
name|InterruptedException
throws|,
name|TimeoutException
throws|,
name|IOException
throws|,
name|KeeperException
throws|,
name|URISyntaxException
throws|,
name|SolrServerException
block|{
name|JettySolrRunner
name|newReplica
init|=
name|createJettys
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|waitForRecoveriesToFinish
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// new server should be part of first shard
comment|// how many docs are on the new shard?
for|for
control|(
name|SolrServer
name|client
range|:
name|shardToClient
operator|.
name|get
argument_list|(
literal|"shard1"
argument_list|)
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"total:"
operator|+
name|client
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|checkShardConsistency
argument_list|(
literal|"shard1"
argument_list|)
expr_stmt|;
name|assertDocCounts
argument_list|(
name|VERBOSE
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForRecoveriesToFinish
specifier|protected
name|void
name|waitForRecoveriesToFinish
parameter_list|(
name|boolean
name|verbose
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|boolean
name|cont
init|=
literal|true
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|cont
condition|)
block|{
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
name|boolean
name|sawLiveRecovering
init|=
literal|false
decl_stmt|;
name|zkStateReader
operator|.
name|updateCloudState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|CloudState
name|cloudState
init|=
name|zkStateReader
operator|.
name|getCloudState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|cloudState
operator|.
name|getSlices
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|entry
range|:
name|slices
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ZkNodeProps
argument_list|>
name|shards
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getShards
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ZkNodeProps
argument_list|>
name|shard
range|:
name|shards
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"rstate:"
operator|+
name|shard
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
operator|+
literal|" live:"
operator|+
name|cloudState
operator|.
name|liveNodesContain
argument_list|(
name|shard
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|state
init|=
name|shard
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|state
operator|.
name|equals
argument_list|(
name|ZkStateReader
operator|.
name|RECOVERING
argument_list|)
operator|||
name|state
operator|.
name|equals
argument_list|(
name|ZkStateReader
operator|.
name|SYNC
argument_list|)
operator|)
operator|&&
name|cloudState
operator|.
name|liveNodesContain
argument_list|(
name|shard
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
argument_list|)
condition|)
block|{
name|sawLiveRecovering
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|sawLiveRecovering
operator|||
name|cnt
operator|==
literal|10
condition|)
block|{
if|if
condition|(
operator|!
name|sawLiveRecovering
condition|)
block|{
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"no one is recoverying"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"gave up waiting for recovery to finish.."
argument_list|)
expr_stmt|;
block|}
name|cont
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
name|cnt
operator|++
expr_stmt|;
block|}
block|}
DECL|method|brindDownShardIndexSomeDocsAndRecover
specifier|private
name|void
name|brindDownShardIndexSomeDocsAndRecover
parameter_list|()
throws|throws
name|Exception
throws|,
name|SolrServerException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|commit
argument_list|()
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"n_tl1 desc"
argument_list|)
expr_stmt|;
comment|// kill a shard
name|JettySolrRunner
name|deadShard
init|=
name|chaosMonkey
operator|.
name|stopShard
argument_list|(
name|SHARD2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|cloudClient
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|tries
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getCloudState
argument_list|()
operator|.
name|liveNodesContain
argument_list|(
name|clientToInfo
operator|.
name|get
argument_list|(
operator|new
name|CloudSolrServerClient
argument_list|(
name|shardToClient
operator|.
name|get
argument_list|(
name|SHARD2
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|tries
operator|++
operator|==
literal|60
condition|)
block|{
name|fail
argument_list|(
literal|"Shard still reported as live in zk"
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
comment|// ensure shard is dead
try|try
block|{
comment|// TODO: ignore fail
name|index_specific
argument_list|(
name|shardToClient
operator|.
name|get
argument_list|(
name|SHARD2
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|id
argument_list|,
literal|999
argument_list|,
name|i1
argument_list|,
literal|107
argument_list|,
name|t1
argument_list|,
literal|"specific doc!"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"This server should be down and this update should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
comment|// expected..
block|}
name|commit
argument_list|()
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"n_tl1 desc"
argument_list|)
expr_stmt|;
comment|// long cloudClientDocs = cloudClient.query(new
comment|// SolrQuery("*:*")).getResults().getNumFound();
comment|// System.out.println("clouddocs:" + cloudClientDocs);
comment|// try to index to a living shard at shard2
comment|// we are careful to make sure the downed node is not longer in the state,
comment|// because on some systems (especially freebsd w/ blackhole enabled), trying
comment|// to talk to a downed node causes grief
name|tries
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|(
operator|(
name|SolrDispatchFilter
operator|)
name|shardToJetty
operator|.
name|get
argument_list|(
name|SHARD2
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|jetty
operator|.
name|getDispatchFilter
argument_list|()
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getCores
argument_list|()
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getCloudState
argument_list|()
operator|.
name|liveNodesContain
argument_list|(
name|clientToInfo
operator|.
name|get
argument_list|(
operator|new
name|CloudSolrServerClient
argument_list|(
name|shardToClient
operator|.
name|get
argument_list|(
name|SHARD2
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|tries
operator|++
operator|==
literal|60
condition|)
block|{
name|fail
argument_list|(
literal|"Shard still reported as live in zk"
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|index_specific
argument_list|(
name|shardToClient
operator|.
name|get
argument_list|(
name|SHARD2
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|id
argument_list|,
literal|1000
argument_list|,
name|i1
argument_list|,
literal|108
argument_list|,
name|t1
argument_list|,
literal|"specific doc!"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|checkShardConsistency
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"n_tl1 desc"
argument_list|)
expr_stmt|;
comment|// try adding a doc with CloudSolrServer
name|cloudClient
operator|.
name|setDefaultCollection
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|long
name|numFound1
init|=
name|cloudClient
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|1001
argument_list|)
expr_stmt|;
name|controlClient
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|UpdateRequest
name|ureq
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|ureq
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// ureq.setParam("update.chain", DISTRIB_UPDATE_CHAIN);
name|ureq
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"n_tl1 desc"
argument_list|)
expr_stmt|;
name|long
name|numFound2
init|=
name|cloudClient
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
comment|// lets just check that the one doc since last commit made it in...
name|assertEquals
argument_list|(
name|numFound1
operator|+
literal|1
argument_list|,
name|numFound2
argument_list|)
expr_stmt|;
comment|// test debugging
name|testDebugQueries
argument_list|()
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|controlClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrServer
name|client
range|:
name|clients
control|)
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|client
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                    }
block|}
block|}
comment|// TODO: This test currently fails because debug info is obtained only
comment|// on shards with matches.
comment|// query("q","matchesnothing","fl","*,score", "debugQuery", "true");
comment|// this should trigger a recovery phase on deadShard
name|deadShard
operator|.
name|start
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// make sure we have published we are recoverying
name|Thread
operator|.
name|sleep
argument_list|(
literal|1500
argument_list|)
expr_stmt|;
name|waitForRecoveriesToFinish
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SolrServer
argument_list|>
name|s2c
init|=
name|shardToClient
operator|.
name|get
argument_list|(
name|SHARD2
argument_list|)
decl_stmt|;
comment|// if we properly recovered, we should now have the couple missing docs that
comment|// came in while shard was down
name|assertEquals
argument_list|(
name|s2c
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|,
name|s2c
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDebugQueries
specifier|private
name|void
name|testDebugQueries
parameter_list|()
throws|throws
name|Exception
block|{
name|handle
operator|.
name|put
argument_list|(
literal|"explain"
argument_list|,
name|UNORDERED
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"debug"
argument_list|,
name|UNORDERED
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"time"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"now their fox sat had put"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
name|CommonParams
operator|.
name|DEBUG_QUERY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"id:[1 TO 5]"
argument_list|,
name|CommonParams
operator|.
name|DEBUG_QUERY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"id:[1 TO 5]"
argument_list|,
name|CommonParams
operator|.
name|DEBUG
argument_list|,
name|CommonParams
operator|.
name|TIMING
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"id:[1 TO 5]"
argument_list|,
name|CommonParams
operator|.
name|DEBUG
argument_list|,
name|CommonParams
operator|.
name|RESULTS
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"id:[1 TO 5]"
argument_list|,
name|CommonParams
operator|.
name|DEBUG
argument_list|,
name|CommonParams
operator|.
name|QUERY
argument_list|)
expr_stmt|;
block|}
DECL|method|checkQueries
specifier|private
name|void
name|checkQueries
parameter_list|()
throws|throws
name|Exception
block|{
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"n_tl1 desc"
argument_list|)
expr_stmt|;
comment|// random value sort
for|for
control|(
name|String
name|f
range|:
name|fieldNames
control|)
block|{
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|f
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|f
operator|+
literal|" asc"
argument_list|)
expr_stmt|;
block|}
comment|// these queries should be exactly ordered and scores should exactly match
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"n_tl1 asc"
argument_list|,
literal|"fl"
argument_list|,
literal|"score"
argument_list|)
expr_stmt|;
comment|// test legacy
comment|// behavior -
comment|// "score"=="*,score"
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"n_tl1 desc"
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"maxScore"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|i1
argument_list|)
expr_stmt|;
comment|// does not expect maxScore. So if it comes
comment|// ,ignore it.
comment|// JavaBinCodec.writeSolrDocumentList()
comment|// is agnostic of request params.
name|handle
operator|.
name|remove
argument_list|(
literal|"maxScore"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|i1
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
comment|// even scores should match
comment|// exactly here
name|handle
operator|.
name|put
argument_list|(
literal|"highlighting"
argument_list|,
name|UNORDERED
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"response"
argument_list|,
name|UNORDERED
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"maxScore"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"quick"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"foofoofoo"
argument_list|,
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
comment|// no fields in returned
comment|// docs
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"start"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"score"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"quick"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"start"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"start"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"now their fox sat had put"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"now their fox sat had put"
argument_list|,
literal|"fl"
argument_list|,
literal|"foofoofoo"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"matchesnothing"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
operator|-
literal|1
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
operator|-
literal|1
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
operator|-
literal|1
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
operator|-
literal|1
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"quick"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.offset"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// test faceting multiple things at once
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"quick"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
comment|// test filter tagging, facet exclusion, and naming (multi-select facet
comment|// support)
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"{!key=myquick}quick"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"{!key=myall ex=a}all"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=mykey ex=a}"
operator|+
name|t1
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=other ex=b}"
operator|+
name|t1
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=again ex=a,b}"
operator|+
name|t1
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=a}id:[1 TO 7]"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=b}id:[3 TO 9]"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!ex=t1}SubjectTerms_mfacet"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=t1}SubjectTerms_mfacet:(test 1)"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// test field that is valid in schema but missing in all shards
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|missingField
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// test field that is valid in schema and missing in some shards
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|oddField
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
name|i1
argument_list|)
expr_stmt|;
comment|// Try to get better coverage for refinement queries by turning off over
comment|// requesting.
comment|// This makes it much more likely that we may not get the top facet values
comment|// and hence
comment|// we turn of that checking.
name|handle
operator|.
name|put
argument_list|(
literal|"facet_fields"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
literal|5
argument_list|,
literal|"facet.shard.limit"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// check a complex key name
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key='a b/c \\' \\} foo'}"
operator|+
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
literal|5
argument_list|,
literal|"facet.shard.limit"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|handle
operator|.
name|remove
argument_list|(
literal|"facet_fields"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"n_tl1 desc"
argument_list|)
expr_stmt|;
comment|// index the same document to two shards and make sure things
comment|// don't blow up.
comment|// assumes first n clients are first n shards
if|if
condition|(
name|clients
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
block|{
name|index
argument_list|(
name|id
argument_list|,
literal|100
argument_list|,
name|i1
argument_list|,
literal|107
argument_list|,
name|t1
argument_list|,
literal|"oh no, a duplicate!"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shardCount
condition|;
name|i
operator|++
control|)
block|{
name|index_specific
argument_list|(
name|i
argument_list|,
name|id
argument_list|,
literal|100
argument_list|,
name|i1
argument_list|,
literal|107
argument_list|,
name|t1
argument_list|,
literal|"oh no, a duplicate!"
argument_list|)
expr_stmt|;
block|}
name|commit
argument_list|()
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"duplicate"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"fox duplicate horses"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|indexAbunchOfDocs
specifier|private
name|void
name|indexAbunchOfDocs
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|2
argument_list|,
name|i1
argument_list|,
literal|50
argument_list|,
name|tlong
argument_list|,
literal|50
argument_list|,
name|t1
argument_list|,
literal|"to come to the aid of their country."
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|3
argument_list|,
name|i1
argument_list|,
literal|2
argument_list|,
name|tlong
argument_list|,
literal|2
argument_list|,
name|t1
argument_list|,
literal|"how now brown cow"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|4
argument_list|,
name|i1
argument_list|,
operator|-
literal|100
argument_list|,
name|tlong
argument_list|,
literal|101
argument_list|,
name|t1
argument_list|,
literal|"the quick fox jumped over the lazy dog"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|5
argument_list|,
name|i1
argument_list|,
literal|500
argument_list|,
name|tlong
argument_list|,
literal|500
argument_list|,
name|t1
argument_list|,
literal|"the quick fox jumped way over the lazy dog"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|6
argument_list|,
name|i1
argument_list|,
operator|-
literal|600
argument_list|,
name|tlong
argument_list|,
literal|600
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy sat on a wall"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|7
argument_list|,
name|i1
argument_list|,
literal|123
argument_list|,
name|tlong
argument_list|,
literal|123
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy had a great fall"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|8
argument_list|,
name|i1
argument_list|,
literal|876
argument_list|,
name|tlong
argument_list|,
literal|876
argument_list|,
name|t1
argument_list|,
literal|"all the kings horses and all the kings men"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|9
argument_list|,
name|i1
argument_list|,
literal|7
argument_list|,
name|tlong
argument_list|,
literal|7
argument_list|,
name|t1
argument_list|,
literal|"couldn't put humpty together again"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|10
argument_list|,
name|i1
argument_list|,
literal|4321
argument_list|,
name|tlong
argument_list|,
literal|4321
argument_list|,
name|t1
argument_list|,
literal|"this too shall pass"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|11
argument_list|,
name|i1
argument_list|,
operator|-
literal|987
argument_list|,
name|tlong
argument_list|,
literal|987
argument_list|,
name|t1
argument_list|,
literal|"An eye for eye only ends up making the whole world blind."
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|12
argument_list|,
name|i1
argument_list|,
literal|379
argument_list|,
name|tlong
argument_list|,
literal|379
argument_list|,
name|t1
argument_list|,
literal|"Great works are performed, not by strength, but by perseverance."
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|13
argument_list|,
name|i1
argument_list|,
literal|232
argument_list|,
name|tlong
argument_list|,
literal|232
argument_list|,
name|t1
argument_list|,
literal|"no eggs on wall, lesson learned"
argument_list|,
name|oddField
argument_list|,
literal|"odd man out"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|14
argument_list|,
literal|"SubjectTerms_mfacet"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mathematical models"
block|,
literal|"mathematical analysis"
block|}
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|15
argument_list|,
literal|"SubjectTerms_mfacet"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"test 1"
block|,
literal|"test 2"
block|,
literal|"test3"
block|}
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|16
argument_list|,
literal|"SubjectTerms_mfacet"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"test 1"
block|,
literal|"test 2"
block|,
literal|"test3"
block|}
argument_list|)
expr_stmt|;
name|String
index|[]
name|vals
init|=
operator|new
name|String
index|[
literal|100
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|vals
index|[
name|i
index|]
operator|=
literal|"test "
operator|+
name|i
expr_stmt|;
block|}
name|indexr
argument_list|(
name|id
argument_list|,
literal|17
argument_list|,
literal|"SubjectTerms_mfacet"
argument_list|,
name|vals
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|100
init|;
name|i
operator|<
literal|150
condition|;
name|i
operator|++
control|)
block|{
name|indexr
argument_list|(
name|id
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkShardConsistency
specifier|protected
name|void
name|checkShardConsistency
parameter_list|(
name|String
name|shard
parameter_list|)
throws|throws
name|Exception
block|{
name|checkShardConsistency
argument_list|(
name|shard
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|checkShardConsistency
specifier|protected
name|String
name|checkShardConsistency
parameter_list|(
name|String
name|shard
parameter_list|,
name|boolean
name|verbose
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|SolrServer
argument_list|>
name|solrClients
init|=
name|shardToClient
operator|.
name|get
argument_list|(
name|shard
argument_list|)
decl_stmt|;
if|if
condition|(
name|solrClients
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"shard not found:"
operator|+
name|shard
operator|+
literal|" keys:"
operator|+
name|shardToClient
operator|.
name|keySet
argument_list|()
argument_list|)
throw|;
block|}
name|long
name|num
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|lastNum
init|=
operator|-
literal|1
decl_stmt|;
name|String
name|failMessage
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"check const of "
operator|+
name|shard
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The client count does not match up with the shard count for slice:"
operator|+
name|shard
argument_list|,
name|zkStateReader
operator|.
name|getCloudState
argument_list|()
operator|.
name|getSlice
argument_list|(
name|DEFAULT_COLLECTION
argument_list|,
name|shard
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|solrClients
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrServer
name|client
range|:
name|solrClients
control|)
block|{
name|ZkNodeProps
name|props
init|=
name|clientToInfo
operator|.
name|get
argument_list|(
operator|new
name|CloudSolrServerClient
argument_list|(
name|client
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"client"
operator|+
name|cnt
operator|++
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"PROPS:"
operator|+
name|props
argument_list|)
expr_stmt|;
try|try
block|{
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"distrib"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|num
operator|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"error contacting client: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|boolean
name|live
init|=
literal|false
decl_stmt|;
name|String
name|nodeName
init|=
name|props
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
name|zkStateReader
operator|.
name|getCloudState
argument_list|()
operator|.
name|liveNodesContain
argument_list|(
name|nodeName
argument_list|)
condition|)
block|{
name|live
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" live:"
operator|+
name|live
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" num:"
operator|+
name|num
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|boolean
name|active
init|=
name|props
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
operator|.
name|equals
argument_list|(
name|ZkStateReader
operator|.
name|ACTIVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|active
operator|&&
name|live
condition|)
block|{
if|if
condition|(
name|lastNum
operator|>
operator|-
literal|1
operator|&&
name|lastNum
operator|!=
name|num
operator|&&
name|failMessage
operator|==
literal|null
condition|)
block|{
name|failMessage
operator|=
name|shard
operator|+
literal|" is not consistent, expected:"
operator|+
name|lastNum
operator|+
literal|" and got:"
operator|+
name|num
expr_stmt|;
block|}
name|lastNum
operator|=
name|num
expr_stmt|;
block|}
block|}
return|return
name|failMessage
return|;
block|}
DECL|method|checkShardConsistency
specifier|protected
name|void
name|checkShardConsistency
parameter_list|()
throws|throws
name|Exception
block|{
name|checkShardConsistency
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|checkShardConsistency
specifier|protected
name|void
name|checkShardConsistency
parameter_list|(
name|boolean
name|checkVsControl
parameter_list|,
name|boolean
name|verbose
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|docs
init|=
name|controlClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Control Docs:"
operator|+
name|docs
argument_list|)
expr_stmt|;
name|updateMappingsFromZk
argument_list|(
name|jettys
argument_list|,
name|clients
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|theShards
init|=
name|shardToClient
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|String
name|failMessage
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|shard
range|:
name|theShards
control|)
block|{
name|String
name|shardFailMessage
init|=
name|checkShardConsistency
argument_list|(
name|shard
argument_list|,
name|verbose
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardFailMessage
operator|!=
literal|null
operator|&&
name|failMessage
operator|==
literal|null
condition|)
block|{
name|failMessage
operator|=
name|shardFailMessage
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failMessage
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
name|failMessage
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkVsControl
condition|)
block|{
comment|// now check that the right # are on each shard
name|theShards
operator|=
name|shardToClient
operator|.
name|keySet
argument_list|()
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|theShards
control|)
block|{
name|int
name|times
init|=
name|shardToClient
operator|.
name|get
argument_list|(
name|s
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|times
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|SolrServer
name|client
init|=
name|shardToClient
operator|.
name|get
argument_list|(
name|s
argument_list|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ZkNodeProps
name|props
init|=
name|clientToInfo
operator|.
name|get
argument_list|(
operator|new
name|CloudSolrServerClient
argument_list|(
name|client
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|active
init|=
name|props
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
operator|.
name|equals
argument_list|(
name|ZkStateReader
operator|.
name|ACTIVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|active
condition|)
block|{
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"distrib"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|long
name|results
init|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|ZkCoreNodeProps
argument_list|(
name|props
argument_list|)
operator|.
name|getCoreUrl
argument_list|()
operator|+
literal|" : "
operator|+
name|results
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"shard:"
operator|+
name|props
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|cnt
operator|+=
name|results
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
comment|// if we have a problem, try the next one
if|if
condition|(
name|i
operator|==
name|times
operator|-
literal|1
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
name|SolrQuery
name|q
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|long
name|cloudClientDocs
init|=
name|cloudClient
operator|.
name|query
argument_list|(
name|q
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"adding up the # of docs on each shard does not match the control - cloud client returns:"
operator|+
name|cloudClientDocs
argument_list|,
name|docs
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getClient
specifier|private
name|SolrServer
name|getClient
parameter_list|(
name|String
name|nodeName
parameter_list|)
block|{
for|for
control|(
name|CloudSolrServerClient
name|client
range|:
name|clientToInfo
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|client
operator|.
name|shardName
operator|.
name|equals
argument_list|(
name|nodeName
argument_list|)
condition|)
block|{
return|return
name|client
operator|.
name|client
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|assertDocCounts
specifier|protected
name|void
name|assertDocCounts
parameter_list|(
name|boolean
name|verbose
parameter_list|)
throws|throws
name|Exception
block|{
comment|// TODO: as we create the clients, we should build a map from shard to
comment|// node/client
comment|// and node/client to shard?
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"control docs:"
operator|+
name|controlClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
name|long
name|controlCount
init|=
name|controlClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
comment|// do some really inefficient mapping...
name|ZkStateReader
name|zk
init|=
operator|new
name|ZkStateReader
argument_list|(
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|,
literal|10000
argument_list|,
name|AbstractZkTestCase
operator|.
name|TIMEOUT
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
literal|null
decl_stmt|;
name|CloudState
name|cloudState
decl_stmt|;
try|try
block|{
name|zk
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
name|cloudState
operator|=
name|zk
operator|.
name|getCloudState
argument_list|()
expr_stmt|;
name|slices
operator|=
name|cloudState
operator|.
name|getSlices
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|zk
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|slices
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not find collection "
operator|+
name|DEFAULT_COLLECTION
operator|+
literal|" in "
operator|+
name|cloudState
operator|.
name|getCollections
argument_list|()
argument_list|)
throw|;
block|}
for|for
control|(
name|SolrServer
name|client
range|:
name|clients
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slice
range|:
name|slices
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ZkNodeProps
argument_list|>
name|theShards
init|=
name|slice
operator|.
name|getValue
argument_list|()
operator|.
name|getShards
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ZkNodeProps
argument_list|>
name|shard
range|:
name|theShards
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|shardName
init|=
operator|new
name|URI
argument_list|(
operator|(
operator|(
name|CommonsHttpSolrServer
operator|)
name|client
operator|)
operator|.
name|getBaseURL
argument_list|()
argument_list|)
operator|.
name|getPort
argument_list|()
operator|+
literal|"_solr_"
decl_stmt|;
if|if
condition|(
name|verbose
operator|&&
name|shard
operator|.
name|getKey
argument_list|()
operator|.
name|endsWith
argument_list|(
name|shardName
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"shard:"
operator|+
name|slice
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|shard
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|long
name|count
init|=
literal|0
decl_stmt|;
name|String
name|currentState
init|=
name|clientToInfo
operator|.
name|get
argument_list|(
operator|new
name|CloudSolrServerClient
argument_list|(
name|client
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentState
operator|!=
literal|null
operator|&&
name|currentState
operator|.
name|equals
argument_list|(
name|ZkStateReader
operator|.
name|ACTIVE
argument_list|)
condition|)
block|{
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"distrib"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|count
operator|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"client docs:"
operator|+
name|count
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"control docs:"
operator|+
name|controlClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Doc Counts do not add up"
argument_list|,
name|controlCount
argument_list|,
name|cloudClient
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|queryServer
specifier|protected
name|QueryResponse
name|queryServer
parameter_list|(
name|ModifiableSolrParams
name|params
parameter_list|)
throws|throws
name|SolrServerException
block|{
if|if
condition|(
name|r
operator|.
name|nextBoolean
argument_list|()
condition|)
name|params
operator|.
name|set
argument_list|(
literal|"collection"
argument_list|,
name|DEFAULT_COLLECTION
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|cloudClient
operator|.
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
return|return
name|rsp
return|;
block|}
DECL|class|StopableIndexingThread
class|class
name|StopableIndexingThread
extends|extends
name|Thread
block|{
DECL|field|stop
specifier|private
specifier|volatile
name|boolean
name|stop
init|=
literal|false
decl_stmt|;
DECL|field|startI
specifier|protected
specifier|final
name|int
name|startI
decl_stmt|;
DECL|field|deletes
specifier|protected
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|deletes
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|fails
specifier|protected
specifier|final
name|AtomicInteger
name|fails
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|doDeletes
specifier|protected
name|boolean
name|doDeletes
decl_stmt|;
DECL|method|StopableIndexingThread
specifier|public
name|StopableIndexingThread
parameter_list|(
name|int
name|startI
parameter_list|,
name|boolean
name|doDeletes
parameter_list|)
block|{
name|super
argument_list|(
literal|"StopableIndexingThread"
argument_list|)
expr_stmt|;
name|this
operator|.
name|startI
operator|=
name|startI
expr_stmt|;
name|this
operator|.
name|doDeletes
operator|=
name|doDeletes
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|int
name|i
init|=
name|startI
decl_stmt|;
name|int
name|numDeletes
init|=
literal|0
decl_stmt|;
name|int
name|numAdds
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
operator|&&
operator|!
name|stop
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|doDeletes
operator|&&
name|random
operator|.
name|nextBoolean
argument_list|()
operator|&&
name|deletes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Integer
name|delete
init|=
name|deletes
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|numDeletes
operator|++
expr_stmt|;
name|controlClient
operator|.
name|deleteById
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|delete
argument_list|)
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|deleteById
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|delete
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"REQUEST FAILED:"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fails
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
try|try
block|{
name|numAdds
operator|++
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
name|i
argument_list|,
name|i1
argument_list|,
literal|50
argument_list|,
name|tlong
argument_list|,
literal|50
argument_list|,
name|t1
argument_list|,
literal|"to come to the aid of their country."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"REQUEST FAILED:"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fails
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|doDeletes
operator|&&
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|deletes
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"added docs:"
operator|+
name|numAdds
operator|+
literal|" with "
operator|+
name|fails
operator|+
literal|" fails"
operator|+
literal|" deletes:"
operator|+
name|numDeletes
argument_list|)
expr_stmt|;
block|}
DECL|method|safeStop
specifier|public
name|void
name|safeStop
parameter_list|()
block|{
name|stop
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getFails
specifier|public
name|int
name|getFails
parameter_list|()
block|{
return|return
name|fails
operator|.
name|get
argument_list|()
return|;
block|}
block|}
empty_stmt|;
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|VERBOSE
operator|||
name|printLayoutOnTearDown
condition|)
block|{
name|super
operator|.
name|printLayout
argument_list|()
expr_stmt|;
block|}
operator|(
operator|(
name|CommonsHttpSolrServer
operator|)
name|controlClient
operator|)
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|cloudClient
operator|!=
literal|null
condition|)
block|{
name|cloudClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|zkStateReader
operator|!=
literal|null
condition|)
block|{
name|zkStateReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"zkHost"
argument_list|)
expr_stmt|;
block|}
DECL|method|commit
specifier|protected
name|void
name|commit
parameter_list|()
throws|throws
name|Exception
block|{
name|controlClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|cloudClient
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|destroyServers
specifier|protected
name|void
name|destroyServers
parameter_list|()
throws|throws
name|Exception
block|{
name|ChaosMonkey
operator|.
name|stop
argument_list|(
name|controlJetty
argument_list|)
expr_stmt|;
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|jettys
control|)
block|{
try|try
block|{
name|ChaosMonkey
operator|.
name|stop
argument_list|(
name|jetty
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|clients
operator|.
name|clear
argument_list|()
expr_stmt|;
name|jettys
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|createNewSolrServer
specifier|protected
name|SolrServer
name|createNewSolrServer
parameter_list|(
name|int
name|port
parameter_list|)
block|{
try|try
block|{
comment|// setup the server...
name|String
name|url
init|=
literal|"http://localhost:"
operator|+
name|port
operator|+
name|context
operator|+
literal|"/"
operator|+
name|DEFAULT_COLLECTION
decl_stmt|;
name|CommonsHttpSolrServer
name|s
init|=
operator|new
name|CommonsHttpSolrServer
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|s
operator|.
name|setConnectionTimeout
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// 1/10th sec
name|s
operator|.
name|setSoTimeout
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
name|s
operator|.
name|setDefaultMaxConnectionsPerHost
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|s
operator|.
name|setMaxTotalConnections
argument_list|(
literal|100
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class
end_unit
