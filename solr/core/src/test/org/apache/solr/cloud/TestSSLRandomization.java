begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|SSLTestConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * A "test the test" method that verifies the SSL options randomized by {@link SolrTestCaseJ4} are   * correctly used in the various helper methods available from the test framework and  * {@link MiniSolrCloudCluster}.  *  * @see TestMiniSolrCloudClusterSSL  */
end_comment
begin_class
DECL|class|TestSSLRandomization
specifier|public
class|class
name|TestSSLRandomization
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|createMiniSolrCloudCluster
specifier|public
specifier|static
name|void
name|createMiniSolrCloudCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|configureCluster
argument_list|(
name|TestMiniSolrCloudClusterSSL
operator|.
name|NUM_SERVERS
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
block|}
DECL|method|testRandomizedSslAndClientAuth
specifier|public
name|void
name|testRandomizedSslAndClientAuth
parameter_list|()
throws|throws
name|Exception
block|{
name|TestMiniSolrCloudClusterSSL
operator|.
name|checkClusterWithCollectionCreations
argument_list|(
name|cluster
argument_list|,
name|sslConfig
argument_list|)
expr_stmt|;
block|}
DECL|method|testBaseUrl
specifier|public
name|void
name|testBaseUrl
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
name|buildUrl
argument_list|(
literal|6666
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sslConfig
operator|.
name|isSSLMode
argument_list|()
condition|?
literal|"https://127.0.0.1:6666/foo"
else|:
literal|"http://127.0.0.1:6666/foo"
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
