begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
operator|.
name|SuppressSSL
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|SSLTestConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RandomizeSSL
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RandomizeSSL
operator|.
name|SSLRandomizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * A "test the test" method that verifies the SSL options randomized by {@link SolrTestCaseJ4} are   * correctly used in the various helper methods available from the test framework and  * {@link MiniSolrCloudCluster}.  *  * @see TestMiniSolrCloudClusterSSL  */
end_comment
begin_class
annotation|@
name|RandomizeSSL
argument_list|(
name|ssl
operator|=
literal|0.5
argument_list|,
name|reason
operator|=
literal|"frequent SSL usage to make test worth while"
argument_list|)
DECL|class|TestSSLRandomization
specifier|public
class|class
name|TestSSLRandomization
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|createMiniSolrCloudCluster
specifier|public
specifier|static
name|void
name|createMiniSolrCloudCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|configureCluster
argument_list|(
name|TestMiniSolrCloudClusterSSL
operator|.
name|NUM_SERVERS
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
block|}
DECL|method|testRandomizedSslAndClientAuth
specifier|public
name|void
name|testRandomizedSslAndClientAuth
parameter_list|()
throws|throws
name|Exception
block|{
name|TestMiniSolrCloudClusterSSL
operator|.
name|checkClusterWithCollectionCreations
argument_list|(
name|cluster
argument_list|,
name|sslConfig
argument_list|)
expr_stmt|;
block|}
DECL|method|testBaseUrl
specifier|public
name|void
name|testBaseUrl
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
name|buildUrl
argument_list|(
literal|6666
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sslConfig
operator|.
name|isSSLMode
argument_list|()
condition|?
literal|"https://127.0.0.1:6666/foo"
else|:
literal|"http://127.0.0.1:6666/foo"
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
comment|/** Used by {@link #testSSLRandomizer} */
annotation|@
name|RandomizeSSL
argument_list|(
name|ssl
operator|=
literal|0.42
argument_list|,
name|clientAuth
operator|=
literal|0.33
argument_list|,
name|reason
operator|=
literal|"foo"
argument_list|)
DECL|class|FullyAnnotated
specifier|public
class|class
name|FullyAnnotated
block|{ }
empty_stmt|;
comment|/** Used by {@link #testSSLRandomizer} */
DECL|class|InheritedFullyAnnotated
specifier|public
class|class
name|InheritedFullyAnnotated
extends|extends
name|FullyAnnotated
block|{ }
empty_stmt|;
comment|/** Used by {@link #testSSLRandomizer} */
DECL|class|NotAnnotated
specifier|public
class|class
name|NotAnnotated
block|{ }
empty_stmt|;
comment|/** Used by {@link #testSSLRandomizer} */
DECL|class|InheritedNotAnnotated
specifier|public
class|class
name|InheritedNotAnnotated
extends|extends
name|NotAnnotated
block|{ }
empty_stmt|;
comment|/** Used by {@link #testSSLRandomizer} */
annotation|@
name|SuppressSSL
argument_list|(
name|bugUrl
operator|=
literal|"fakeBugUrl"
argument_list|)
DECL|class|Suppressed
specifier|public
class|class
name|Suppressed
block|{ }
empty_stmt|;
comment|/** Used by {@link #testSSLRandomizer} */
DECL|class|InheritedSuppressed
specifier|public
class|class
name|InheritedSuppressed
extends|extends
name|Suppressed
block|{ }
empty_stmt|;
comment|/** Used by {@link #testSSLRandomizer} */
annotation|@
name|SuppressSSL
argument_list|(
name|bugUrl
operator|=
literal|"fakeBugUrl"
argument_list|)
DECL|class|InheritedAnnotationButSuppressed
specifier|public
class|class
name|InheritedAnnotationButSuppressed
extends|extends
name|FullyAnnotated
block|{ }
empty_stmt|;
comment|/** Used by {@link #testSSLRandomizer} */
annotation|@
name|RandomizeSSL
argument_list|(
name|ssl
operator|=
literal|0.42
argument_list|,
name|clientAuth
operator|=
literal|0.33
argument_list|,
name|reason
operator|=
literal|"foo"
argument_list|)
DECL|class|InheritedSuppressedWithIgnoredAnnotation
specifier|public
class|class
name|InheritedSuppressedWithIgnoredAnnotation
extends|extends
name|Suppressed
block|{
comment|// Even with direct annotation, supression at superclass overrules us.
comment|//
comment|// (If it didn't work this way, it would be a pain in the ass to quickly disable SSL for a
comment|// broad hierarchy of tests)
block|}
empty_stmt|;
comment|/** Used by {@link #testSSLRandomizer} */
annotation|@
name|RandomizeSSL
argument_list|()
DECL|class|EmptyAnnotated
specifier|public
class|class
name|EmptyAnnotated
block|{ }
empty_stmt|;
comment|/** Used by {@link #testSSLRandomizer} */
DECL|class|InheritedEmptyAnnotated
specifier|public
class|class
name|InheritedEmptyAnnotated
extends|extends
name|EmptyAnnotated
block|{ }
empty_stmt|;
comment|/** Used by {@link #testSSLRandomizer} */
annotation|@
name|RandomizeSSL
argument_list|(
literal|0.5
argument_list|)
DECL|class|InheritedEmptyAnnotatationWithOverride
specifier|public
class|class
name|InheritedEmptyAnnotatationWithOverride
extends|extends
name|EmptyAnnotated
block|{ }
empty_stmt|;
comment|/** Used by {@link #testSSLRandomizer} */
annotation|@
name|RandomizeSSL
argument_list|(
name|ssl
operator|=
literal|0.42
argument_list|,
name|clientAuth
operator|=
literal|0.33
argument_list|,
name|reason
operator|=
literal|"foo"
argument_list|)
DECL|class|GrandchildInheritedEmptyAnnotatationWithOverride
specifier|public
class|class
name|GrandchildInheritedEmptyAnnotatationWithOverride
extends|extends
name|InheritedEmptyAnnotated
block|{ }
empty_stmt|;
comment|/** Used by {@link #testSSLRandomizer} */
annotation|@
name|RandomizeSSL
argument_list|(
literal|0.5
argument_list|)
DECL|class|SimplyAnnotated
specifier|public
class|class
name|SimplyAnnotated
block|{ }
empty_stmt|;
comment|/** Used by {@link #testSSLRandomizer} */
annotation|@
name|RandomizeSSL
argument_list|(
literal|0.0
argument_list|)
DECL|class|MinAnnotated
specifier|public
class|class
name|MinAnnotated
block|{ }
empty_stmt|;
comment|/** Used by {@link #testSSLRandomizer} */
annotation|@
name|RandomizeSSL
argument_list|(
literal|1
argument_list|)
DECL|class|MaxAnnotated
specifier|public
class|class
name|MaxAnnotated
block|{ }
empty_stmt|;
comment|/** Used by {@link #testSSLRandomizer} */
annotation|@
name|RandomizeSSL
argument_list|(
name|ssl
operator|=
literal|0.42
argument_list|)
DECL|class|SSlButNoClientAuthAnnotated
specifier|public
class|class
name|SSlButNoClientAuthAnnotated
block|{ }
empty_stmt|;
comment|/** Used by {@link #testSSLRandomizer} */
annotation|@
name|RandomizeSSL
argument_list|(
name|clientAuth
operator|=
literal|0.42
argument_list|)
DECL|class|ClientAuthButNoSSLAnnotated
specifier|public
class|class
name|ClientAuthButNoSSLAnnotated
block|{ }
empty_stmt|;
comment|/** Used by {@link #testSSLRandomizer} */
annotation|@
name|RandomizeSSL
argument_list|(
name|ssl
operator|=
literal|42.0
argument_list|)
DECL|class|SSLOutOfRangeAnnotated
specifier|public
class|class
name|SSLOutOfRangeAnnotated
block|{ }
empty_stmt|;
comment|/** Used by {@link #testSSLRandomizer} */
annotation|@
name|RandomizeSSL
argument_list|(
name|clientAuth
operator|=
literal|42.0
argument_list|)
DECL|class|ClientAuthOutOfRangeAnnotated
specifier|public
class|class
name|ClientAuthOutOfRangeAnnotated
block|{ }
empty_stmt|;
comment|/** Used by {@link #testSSLRandomizer} */
DECL|class|InheritedOutOfRangeAnnotated
specifier|public
class|class
name|InheritedOutOfRangeAnnotated
extends|extends
name|ClientAuthOutOfRangeAnnotated
block|{ }
empty_stmt|;
DECL|method|testSSLRandomizer
specifier|public
name|void
name|testSSLRandomizer
parameter_list|()
block|{
name|SSLRandomizer
name|r
decl_stmt|;
comment|// for some cases, we know exactly what the config should be regardless of randomization factors
name|SSLTestConfig
name|conf
decl_stmt|;
for|for
control|(
name|Class
name|c
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|FullyAnnotated
operator|.
name|class
argument_list|,
name|InheritedFullyAnnotated
operator|.
name|class
argument_list|,
name|GrandchildInheritedEmptyAnnotatationWithOverride
operator|.
name|class
argument_list|)
control|)
block|{
name|r
operator|=
name|SSLRandomizer
operator|.
name|getSSLRandomizerForClass
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|,
literal|0.42D
argument_list|,
name|r
operator|.
name|ssl
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|,
literal|0.33D
argument_list|,
name|r
operator|.
name|clientAuth
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|,
name|r
operator|.
name|debug
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Class
name|c
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|NotAnnotated
operator|.
name|class
argument_list|,
name|InheritedNotAnnotated
operator|.
name|class
argument_list|)
control|)
block|{
name|r
operator|=
name|SSLRandomizer
operator|.
name|getSSLRandomizerForClass
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|,
literal|0.0D
argument_list|,
name|r
operator|.
name|ssl
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|,
literal|0.0D
argument_list|,
name|r
operator|.
name|clientAuth
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|,
name|r
operator|.
name|debug
operator|.
name|contains
argument_list|(
literal|"not specified"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|=
name|r
operator|.
name|createSSLTestConfig
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|,
name|conf
operator|.
name|isSSLMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|,
name|conf
operator|.
name|isClientAuthMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Class
name|c
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|Suppressed
operator|.
name|class
argument_list|,
name|InheritedSuppressed
operator|.
name|class
argument_list|,
name|InheritedAnnotationButSuppressed
operator|.
name|class
argument_list|,
name|InheritedSuppressedWithIgnoredAnnotation
operator|.
name|class
argument_list|)
control|)
block|{
name|r
operator|=
name|SSLRandomizer
operator|.
name|getSSLRandomizerForClass
argument_list|(
name|Suppressed
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|,
literal|0.0D
argument_list|,
name|r
operator|.
name|ssl
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|,
literal|0.0D
argument_list|,
name|r
operator|.
name|clientAuth
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|,
name|r
operator|.
name|debug
operator|.
name|contains
argument_list|(
literal|"SuppressSSL"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|,
name|r
operator|.
name|debug
operator|.
name|contains
argument_list|(
literal|"fakeBugUrl"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|=
name|r
operator|.
name|createSSLTestConfig
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|,
name|conf
operator|.
name|isSSLMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|,
name|conf
operator|.
name|isClientAuthMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Class
name|c
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|EmptyAnnotated
operator|.
name|class
argument_list|,
name|InheritedEmptyAnnotated
operator|.
name|class
argument_list|)
control|)
block|{
name|r
operator|=
name|SSLRandomizer
operator|.
name|getSSLRandomizerForClass
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|,
name|RandomizeSSL
operator|.
name|DEFAULT_ODDS
argument_list|,
name|r
operator|.
name|ssl
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|,
name|RandomizeSSL
operator|.
name|DEFAULT_ODDS
argument_list|,
name|r
operator|.
name|clientAuth
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Class
name|c
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|SimplyAnnotated
operator|.
name|class
argument_list|,
name|InheritedEmptyAnnotatationWithOverride
operator|.
name|class
argument_list|)
control|)
block|{
name|r
operator|=
name|SSLRandomizer
operator|.
name|getSSLRandomizerForClass
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|,
literal|0.5D
argument_list|,
name|r
operator|.
name|ssl
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|,
literal|0.5D
argument_list|,
name|r
operator|.
name|clientAuth
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
block|}
name|r
operator|=
name|SSLRandomizer
operator|.
name|getSSLRandomizerForClass
argument_list|(
name|MinAnnotated
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0D
argument_list|,
name|r
operator|.
name|ssl
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0D
argument_list|,
name|r
operator|.
name|clientAuth
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|conf
operator|=
name|r
operator|.
name|createSSLTestConfig
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|conf
operator|.
name|isSSLMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|conf
operator|.
name|isClientAuthMode
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|SSLRandomizer
operator|.
name|getSSLRandomizerForClass
argument_list|(
name|MaxAnnotated
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0D
argument_list|,
name|r
operator|.
name|ssl
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0D
argument_list|,
name|r
operator|.
name|clientAuth
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|conf
operator|=
name|r
operator|.
name|createSSLTestConfig
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|conf
operator|.
name|isSSLMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|conf
operator|.
name|isClientAuthMode
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|SSLRandomizer
operator|.
name|getSSLRandomizerForClass
argument_list|(
name|SSlButNoClientAuthAnnotated
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.42D
argument_list|,
name|r
operator|.
name|ssl
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.42D
argument_list|,
name|r
operator|.
name|clientAuth
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|r
operator|=
name|SSLRandomizer
operator|.
name|getSSLRandomizerForClass
argument_list|(
name|ClientAuthButNoSSLAnnotated
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RandomizeSSL
operator|.
name|DEFAULT_ODDS
argument_list|,
name|r
operator|.
name|ssl
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.42D
argument_list|,
name|r
operator|.
name|clientAuth
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
for|for
control|(
name|Class
name|c
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|SSLOutOfRangeAnnotated
operator|.
name|class
argument_list|,
name|ClientAuthOutOfRangeAnnotated
operator|.
name|class
argument_list|,
name|InheritedOutOfRangeAnnotated
operator|.
name|class
argument_list|)
control|)
block|{
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|Object
name|trash
init|=
name|SSLRandomizer
operator|.
name|getSSLRandomizerForClass
argument_list|(
name|c
argument_list|)
decl_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSSLRandomizerEffectiveOdds
specifier|public
name|void
name|testSSLRandomizerEffectiveOdds
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|RandomizeSSL
operator|.
name|DEFAULT_ODDS
argument_list|,
name|SSLRandomizer
operator|.
name|getEffectiveOdds
argument_list|(
name|RandomizeSSL
operator|.
name|DEFAULT_ODDS
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0.0005D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.2727D
argument_list|,
name|SSLRandomizer
operator|.
name|getEffectiveOdds
argument_list|(
name|RandomizeSSL
operator|.
name|DEFAULT_ODDS
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0.0005D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0100D
argument_list|,
name|SSLRandomizer
operator|.
name|getEffectiveOdds
argument_list|(
literal|0.01D
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0.0005D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.1000D
argument_list|,
name|SSLRandomizer
operator|.
name|getEffectiveOdds
argument_list|(
literal|0.01D
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0.0005D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.6206D
argument_list|,
name|SSLRandomizer
operator|.
name|getEffectiveOdds
argument_list|(
literal|0.01D
argument_list|,
literal|false
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|0.0005D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.5000D
argument_list|,
name|SSLRandomizer
operator|.
name|getEffectiveOdds
argument_list|(
literal|0.5D
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0.0005D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.5454D
argument_list|,
name|SSLRandomizer
operator|.
name|getEffectiveOdds
argument_list|(
literal|0.5D
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0.0005D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.8083D
argument_list|,
name|SSLRandomizer
operator|.
name|getEffectiveOdds
argument_list|(
literal|0.5D
argument_list|,
literal|false
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|0.0005D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.8000D
argument_list|,
name|SSLRandomizer
operator|.
name|getEffectiveOdds
argument_list|(
literal|0.8D
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0.0005D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.8181D
argument_list|,
name|SSLRandomizer
operator|.
name|getEffectiveOdds
argument_list|(
literal|0.8D
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0.0005D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.9233D
argument_list|,
name|SSLRandomizer
operator|.
name|getEffectiveOdds
argument_list|(
literal|0.8D
argument_list|,
literal|false
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|0.0005D
argument_list|)
expr_stmt|;
comment|// never ever
name|assertEquals
argument_list|(
literal|0.0D
argument_list|,
name|SSLRandomizer
operator|.
name|getEffectiveOdds
argument_list|(
literal|0.0D
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0D
argument_list|,
name|SSLRandomizer
operator|.
name|getEffectiveOdds
argument_list|(
literal|0.0D
argument_list|,
literal|true
argument_list|,
literal|100
argument_list|)
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0D
argument_list|,
name|SSLRandomizer
operator|.
name|getEffectiveOdds
argument_list|(
literal|0.0D
argument_list|,
literal|false
argument_list|,
literal|100
argument_list|)
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0D
argument_list|,
name|SSLRandomizer
operator|.
name|getEffectiveOdds
argument_list|(
literal|0.0D
argument_list|,
literal|true
argument_list|,
literal|10000
argument_list|)
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0D
argument_list|,
name|SSLRandomizer
operator|.
name|getEffectiveOdds
argument_list|(
literal|0.0D
argument_list|,
literal|false
argument_list|,
literal|10000
argument_list|)
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0D
argument_list|,
name|SSLRandomizer
operator|.
name|getEffectiveOdds
argument_list|(
literal|0.0D
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
comment|// always
name|assertEquals
argument_list|(
literal|1.0D
argument_list|,
name|SSLRandomizer
operator|.
name|getEffectiveOdds
argument_list|(
literal|1.0D
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0D
argument_list|,
name|SSLRandomizer
operator|.
name|getEffectiveOdds
argument_list|(
literal|1.0D
argument_list|,
literal|true
argument_list|,
literal|100
argument_list|)
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0D
argument_list|,
name|SSLRandomizer
operator|.
name|getEffectiveOdds
argument_list|(
literal|1.0D
argument_list|,
literal|false
argument_list|,
literal|100
argument_list|)
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0D
argument_list|,
name|SSLRandomizer
operator|.
name|getEffectiveOdds
argument_list|(
literal|1.0D
argument_list|,
literal|true
argument_list|,
literal|10000
argument_list|)
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0D
argument_list|,
name|SSLRandomizer
operator|.
name|getEffectiveOdds
argument_list|(
literal|1.0D
argument_list|,
literal|false
argument_list|,
literal|10000
argument_list|)
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0D
argument_list|,
name|SSLRandomizer
operator|.
name|getEffectiveOdds
argument_list|(
literal|1.0D
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
