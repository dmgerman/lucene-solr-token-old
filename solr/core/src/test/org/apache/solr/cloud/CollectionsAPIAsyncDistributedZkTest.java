begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
operator|.
name|Create
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
operator|.
name|SplitShard
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/**  * Tests the Cloud Collections API.  */
end_comment
begin_class
annotation|@
name|Slow
DECL|class|CollectionsAPIAsyncDistributedZkTest
specifier|public
class|class
name|CollectionsAPIAsyncDistributedZkTest
extends|extends
name|AbstractFullDistribZkTestBase
block|{
DECL|field|MAX_TIMEOUT_SECONDS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_TIMEOUT_SECONDS
init|=
literal|60
decl_stmt|;
DECL|method|CollectionsAPIAsyncDistributedZkTest
specifier|public
name|CollectionsAPIAsyncDistributedZkTest
parameter_list|()
block|{
name|sliceCount
operator|=
literal|1
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|ShardsFixed
argument_list|(
name|num
operator|=
literal|1
argument_list|)
DECL|method|testSolrJAPICalls
specifier|public
name|void
name|testSolrJAPICalls
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|SolrClient
name|client
init|=
name|createNewSolrClient
argument_list|(
literal|""
argument_list|,
name|getBaseUrl
argument_list|(
operator|(
name|HttpSolrClient
operator|)
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|Create
name|createCollectionRequest
init|=
operator|new
name|Create
argument_list|()
operator|.
name|setCollectionName
argument_list|(
literal|"testasynccollectioncreation"
argument_list|)
operator|.
name|setNumShards
argument_list|(
literal|1
argument_list|)
operator|.
name|setConfigName
argument_list|(
literal|"conf1"
argument_list|)
operator|.
name|setAsyncId
argument_list|(
literal|"1001"
argument_list|)
decl_stmt|;
name|createCollectionRequest
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|String
name|state
init|=
name|getRequestStateAfterCompletion
argument_list|(
literal|"1001"
argument_list|,
name|MAX_TIMEOUT_SECONDS
argument_list|,
name|client
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"CreateCollection task did not complete!"
argument_list|,
literal|"completed"
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|createCollectionRequest
operator|=
operator|new
name|Create
argument_list|()
operator|.
name|setCollectionName
argument_list|(
literal|"testasynccollectioncreation"
argument_list|)
operator|.
name|setNumShards
argument_list|(
literal|1
argument_list|)
operator|.
name|setConfigName
argument_list|(
literal|"conf1"
argument_list|)
operator|.
name|setAsyncId
argument_list|(
literal|"1002"
argument_list|)
expr_stmt|;
name|createCollectionRequest
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|state
operator|=
name|getRequestStateAfterCompletion
argument_list|(
literal|"1002"
argument_list|,
name|MAX_TIMEOUT_SECONDS
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Recreating a collection with the same name didn't fail, should have."
argument_list|,
literal|"failed"
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|AddReplica
name|addReplica
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|AddReplica
argument_list|()
operator|.
name|setCollectionName
argument_list|(
literal|"testasynccollectioncreation"
argument_list|)
operator|.
name|setShardName
argument_list|(
literal|"shard1"
argument_list|)
operator|.
name|setAsyncId
argument_list|(
literal|"1003"
argument_list|)
decl_stmt|;
name|client
operator|.
name|request
argument_list|(
name|addReplica
argument_list|)
expr_stmt|;
name|state
operator|=
name|getRequestStateAfterCompletion
argument_list|(
literal|"1003"
argument_list|,
name|MAX_TIMEOUT_SECONDS
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Add replica did not complete"
argument_list|,
literal|"completed"
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|SplitShard
name|splitShardRequest
init|=
operator|new
name|SplitShard
argument_list|()
operator|.
name|setCollectionName
argument_list|(
literal|"testasynccollectioncreation"
argument_list|)
operator|.
name|setShardName
argument_list|(
literal|"shard1"
argument_list|)
operator|.
name|setAsyncId
argument_list|(
literal|"1004"
argument_list|)
decl_stmt|;
name|splitShardRequest
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|state
operator|=
name|getRequestStateAfterCompletion
argument_list|(
literal|"1004"
argument_list|,
name|MAX_TIMEOUT_SECONDS
operator|*
literal|2
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Shard split did not complete. Last recorded state: "
operator|+
name|state
argument_list|,
literal|"completed"
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
