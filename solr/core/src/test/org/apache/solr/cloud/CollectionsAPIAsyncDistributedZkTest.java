begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
operator|.
name|Create
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
operator|.
name|SplitShard
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|RequestStatusState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/**  * Tests the Cloud Collections API.  */
end_comment
begin_class
annotation|@
name|Slow
DECL|class|CollectionsAPIAsyncDistributedZkTest
specifier|public
class|class
name|CollectionsAPIAsyncDistributedZkTest
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|MAX_TIMEOUT_SECONDS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_TIMEOUT_SECONDS
init|=
literal|60
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupCluster
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|configureCluster
argument_list|(
literal|2
argument_list|)
operator|.
name|addConfig
argument_list|(
literal|"conf1"
argument_list|,
name|TEST_PATH
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"configsets"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"cloud-minimal"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"conf"
argument_list|)
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSolrJAPICalls
specifier|public
name|void
name|testSolrJAPICalls
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CloudSolrClient
name|client
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
name|RequestStatusState
name|state
init|=
operator|new
name|Create
argument_list|()
operator|.
name|setCollectionName
argument_list|(
literal|"testasynccollectioncreation"
argument_list|)
operator|.
name|setNumShards
argument_list|(
literal|1
argument_list|)
operator|.
name|setReplicationFactor
argument_list|(
literal|1
argument_list|)
operator|.
name|setConfigName
argument_list|(
literal|"conf1"
argument_list|)
operator|.
name|processAndWait
argument_list|(
name|client
argument_list|,
name|MAX_TIMEOUT_SECONDS
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
literal|"CreateCollection task did not complete!"
argument_list|,
name|RequestStatusState
operator|.
name|COMPLETED
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|state
operator|=
operator|new
name|Create
argument_list|()
operator|.
name|setCollectionName
argument_list|(
literal|"testasynccollectioncreation"
argument_list|)
operator|.
name|setNumShards
argument_list|(
literal|1
argument_list|)
operator|.
name|setConfigName
argument_list|(
literal|"conf1"
argument_list|)
operator|.
name|processAndWait
argument_list|(
name|client
argument_list|,
name|MAX_TIMEOUT_SECONDS
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Recreating a collection with the same should have failed."
argument_list|,
name|RequestStatusState
operator|.
name|FAILED
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|state
operator|=
operator|new
name|CollectionAdminRequest
operator|.
name|AddReplica
argument_list|()
operator|.
name|setCollectionName
argument_list|(
literal|"testasynccollectioncreation"
argument_list|)
operator|.
name|setShardName
argument_list|(
literal|"shard1"
argument_list|)
operator|.
name|processAndWait
argument_list|(
name|client
argument_list|,
name|MAX_TIMEOUT_SECONDS
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Add replica did not complete"
argument_list|,
name|RequestStatusState
operator|.
name|COMPLETED
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|state
operator|=
operator|new
name|SplitShard
argument_list|()
operator|.
name|setCollectionName
argument_list|(
literal|"testasynccollectioncreation"
argument_list|)
operator|.
name|setShardName
argument_list|(
literal|"shard1"
argument_list|)
operator|.
name|processAndWait
argument_list|(
name|client
argument_list|,
name|MAX_TIMEOUT_SECONDS
operator|*
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Shard split did not complete. Last recorded state: "
operator|+
name|state
argument_list|,
name|RequestStatusState
operator|.
name|COMPLETED
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsyncRequests
specifier|public
name|void
name|testAsyncRequests
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|collection
init|=
literal|"testAsyncOperations"
decl_stmt|;
specifier|final
name|CloudSolrClient
name|client
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
name|RequestStatusState
name|state
init|=
operator|new
name|Create
argument_list|()
operator|.
name|setCollectionName
argument_list|(
name|collection
argument_list|)
operator|.
name|setNumShards
argument_list|(
literal|1
argument_list|)
operator|.
name|setRouterName
argument_list|(
literal|"implicit"
argument_list|)
operator|.
name|setShards
argument_list|(
literal|"shard1"
argument_list|)
operator|.
name|setConfigName
argument_list|(
literal|"conf1"
argument_list|)
operator|.
name|processAndWait
argument_list|(
name|client
argument_list|,
name|MAX_TIMEOUT_SECONDS
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
literal|"CreateCollection task did not complete!"
argument_list|,
name|RequestStatusState
operator|.
name|COMPLETED
argument_list|,
name|state
argument_list|)
expr_stmt|;
comment|//Add a few documents to shard1
name|int
name|numDocs
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SolrInputDocument
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"_route_"
argument_list|,
literal|"shard1"
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|add
argument_list|(
name|collection
argument_list|,
name|docs
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"shards"
argument_list|,
literal|"shard1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numDocs
argument_list|,
name|client
operator|.
name|query
argument_list|(
name|collection
argument_list|,
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|state
operator|=
operator|new
name|CollectionAdminRequest
operator|.
name|Reload
argument_list|()
operator|.
name|setCollectionName
argument_list|(
name|collection
argument_list|)
operator|.
name|processAndWait
argument_list|(
name|client
argument_list|,
name|MAX_TIMEOUT_SECONDS
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"ReloadCollection did not complete"
argument_list|,
name|RequestStatusState
operator|.
name|COMPLETED
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|state
operator|=
operator|new
name|CollectionAdminRequest
operator|.
name|CreateShard
argument_list|()
operator|.
name|setCollectionName
argument_list|(
name|collection
argument_list|)
operator|.
name|setShardName
argument_list|(
literal|"shard2"
argument_list|)
operator|.
name|processAndWait
argument_list|(
name|client
argument_list|,
name|MAX_TIMEOUT_SECONDS
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"CreateShard did not complete"
argument_list|,
name|RequestStatusState
operator|.
name|COMPLETED
argument_list|,
name|state
argument_list|)
expr_stmt|;
comment|//Add a doc to shard2 to make sure shard2 was created properly
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
name|numDocs
operator|+
literal|1
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"_route_"
argument_list|,
literal|"shard2"
argument_list|)
expr_stmt|;
name|client
operator|.
name|add
argument_list|(
name|collection
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"shards"
argument_list|,
literal|"shard2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|client
operator|.
name|query
argument_list|(
name|collection
argument_list|,
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|state
operator|=
operator|new
name|CollectionAdminRequest
operator|.
name|DeleteShard
argument_list|()
operator|.
name|setCollectionName
argument_list|(
name|collection
argument_list|)
operator|.
name|setShardName
argument_list|(
literal|"shard2"
argument_list|)
operator|.
name|processAndWait
argument_list|(
name|client
argument_list|,
name|MAX_TIMEOUT_SECONDS
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"DeleteShard did not complete"
argument_list|,
name|RequestStatusState
operator|.
name|COMPLETED
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|state
operator|=
operator|new
name|CollectionAdminRequest
operator|.
name|AddReplica
argument_list|()
operator|.
name|setCollectionName
argument_list|(
name|collection
argument_list|)
operator|.
name|setShardName
argument_list|(
literal|"shard1"
argument_list|)
operator|.
name|processAndWait
argument_list|(
name|client
argument_list|,
name|MAX_TIMEOUT_SECONDS
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"AddReplica did not complete"
argument_list|,
name|RequestStatusState
operator|.
name|COMPLETED
argument_list|,
name|state
argument_list|)
expr_stmt|;
comment|//cloudClient watch might take a couple of seconds to reflect it
name|Slice
name|shard1
init|=
name|client
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
name|collection
argument_list|,
literal|"shard1"
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|shard1
operator|.
name|getReplicas
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
if|if
condition|(
name|count
operator|++
operator|>
literal|1000
condition|)
block|{
name|fail
argument_list|(
literal|"2nd Replica not reflecting in the cluster state"
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|state
operator|=
operator|new
name|CollectionAdminRequest
operator|.
name|CreateAlias
argument_list|()
operator|.
name|setAliasName
argument_list|(
literal|"myalias"
argument_list|)
operator|.
name|setAliasedCollections
argument_list|(
name|collection
argument_list|)
operator|.
name|processAndWait
argument_list|(
name|client
argument_list|,
name|MAX_TIMEOUT_SECONDS
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"CreateAlias did not complete"
argument_list|,
name|RequestStatusState
operator|.
name|COMPLETED
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"shards"
argument_list|,
literal|"shard1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numDocs
argument_list|,
name|client
operator|.
name|query
argument_list|(
literal|"myalias"
argument_list|,
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|state
operator|=
operator|new
name|CollectionAdminRequest
operator|.
name|DeleteAlias
argument_list|()
operator|.
name|setAliasName
argument_list|(
literal|"myalias"
argument_list|)
operator|.
name|processAndWait
argument_list|(
name|client
argument_list|,
name|MAX_TIMEOUT_SECONDS
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"DeleteAlias did not complete"
argument_list|,
name|RequestStatusState
operator|.
name|COMPLETED
argument_list|,
name|state
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|query
argument_list|(
literal|"myalias"
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Alias should not exist"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
comment|//expected
block|}
name|String
name|replica
init|=
name|shard1
operator|.
name|getReplicas
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|state
operator|=
operator|new
name|CollectionAdminRequest
operator|.
name|DeleteReplica
argument_list|()
operator|.
name|setCollectionName
argument_list|(
name|collection
argument_list|)
operator|.
name|setShardName
argument_list|(
literal|"shard1"
argument_list|)
operator|.
name|setReplica
argument_list|(
name|replica
argument_list|)
operator|.
name|processAndWait
argument_list|(
name|client
argument_list|,
name|MAX_TIMEOUT_SECONDS
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"DeleteReplica did not complete"
argument_list|,
name|RequestStatusState
operator|.
name|COMPLETED
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|state
operator|=
operator|new
name|CollectionAdminRequest
operator|.
name|Delete
argument_list|()
operator|.
name|setCollectionName
argument_list|(
name|collection
argument_list|)
operator|.
name|processAndWait
argument_list|(
name|client
argument_list|,
name|MAX_TIMEOUT_SECONDS
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"DeleteCollection did not complete"
argument_list|,
name|RequestStatusState
operator|.
name|COMPLETED
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
