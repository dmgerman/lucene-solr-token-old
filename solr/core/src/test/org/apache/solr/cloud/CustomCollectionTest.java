begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
operator|.
name|SuppressSSL
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ImplicitDocRouter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ExecutorUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|DirectUpdateHandler2
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DefaultSolrThreadFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionProcessor
operator|.
name|NUM_SLICES
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionProcessor
operator|.
name|SHARDS_PROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
operator|.
name|DOC_ROUTER
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|MAX_SHARDS_PER_NODE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|REPLICATION_FACTOR
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ShardParams
operator|.
name|_ROUTE_
import|;
end_import
begin_comment
comment|/**  * Tests the Custom Sharding API.  */
end_comment
begin_class
annotation|@
name|Slow
annotation|@
name|SuppressSSL
argument_list|(
name|bugUrl
operator|=
literal|"https://issues.apache.org/jira/browse/SOLR-5776"
argument_list|)
DECL|class|CustomCollectionTest
specifier|public
class|class
name|CustomCollectionTest
extends|extends
name|AbstractFullDistribZkTestBase
block|{
DECL|field|DEFAULT_COLLECTION
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_COLLECTION
init|=
literal|"collection1"
decl_stmt|;
DECL|field|DEBUG
specifier|private
specifier|static
specifier|final
name|boolean
name|DEBUG
init|=
literal|false
decl_stmt|;
DECL|method|getSolrXml
specifier|protected
name|String
name|getSolrXml
parameter_list|()
block|{
return|return
literal|"solr-no-core.xml"
return|;
block|}
DECL|method|CustomCollectionTest
specifier|public
name|CustomCollectionTest
parameter_list|()
block|{
name|sliceCount
operator|=
literal|2
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDistributedParams
specifier|protected
name|void
name|setDistributedParams
parameter_list|(
name|ModifiableSolrParams
name|params
parameter_list|)
block|{
if|if
condition|(
name|r
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// don't set shards, let that be figured out from the cloud state
block|}
else|else
block|{
comment|// use shard ids rather than physical locations
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getShardCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"shard"
operator|+
operator|(
name|i
operator|+
literal|3
operator|)
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|set
argument_list|(
literal|"shards"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|ShardsFixed
argument_list|(
name|num
operator|=
literal|4
argument_list|)
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|testCustomCollectionsAPI
argument_list|()
expr_stmt|;
name|testRouteFieldForHashRouter
argument_list|()
expr_stmt|;
name|testCreateShardRepFactor
argument_list|()
expr_stmt|;
if|if
condition|(
name|DEBUG
condition|)
block|{
name|super
operator|.
name|printLayout
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testCustomCollectionsAPI
specifier|private
name|void
name|testCustomCollectionsAPI
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|COLL_PREFIX
init|=
literal|"implicitcoll"
decl_stmt|;
comment|// TODO: fragile - because we dont pass collection.confName, it will only
comment|// find a default if a conf set with a name matching the collection name is found, or
comment|// if there is only one conf set. That and the fact that other tests run first in this
comment|// env make this pretty fragile
comment|// create new collections rapid fire
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|collectionInfos
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|replicationFactor
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
operator|+
literal|2
decl_stmt|;
name|int
name|cnt
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|int
name|numShards
init|=
literal|3
decl_stmt|;
name|int
name|maxShardsPerNode
init|=
operator|(
operator|(
operator|(
operator|(
name|numShards
operator|+
literal|1
operator|)
operator|*
name|replicationFactor
operator|)
operator|/
name|getCommonCloudSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLiveNodes
argument_list|()
operator|.
name|size
argument_list|()
operator|)
operator|)
operator|+
literal|1
decl_stmt|;
name|CloudSolrClient
name|client
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
comment|// Test if we can create a collection through CloudSolrServer where
comment|// you havnt set default-collection
comment|// This is nice because you want to be able to create you first
comment|// collection using CloudSolrServer, and in such case there is
comment|// nothing reasonable to set as default-collection
name|client
operator|=
name|createCloudClient
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
comment|// Test if we can create a collection through CloudSolrServer where
comment|// you have set default-collection to a non-existing collection
comment|// This is nice because you want to be able to create you first
comment|// collection using CloudSolrServer, and in such case there is
comment|// nothing reasonable to set as default-collection, but you might want
comment|// to use the same CloudSolrServer throughout the entire
comment|// lifetime of your client-application, so it is nice to be able to
comment|// set a default-collection on this CloudSolrServer once and for all
comment|// and use this CloudSolrServer to create the collection
name|client
operator|=
name|createCloudClient
argument_list|(
name|COLL_PREFIX
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|ZkNodeProps
operator|.
name|makeMap
argument_list|(
literal|"router.name"
argument_list|,
name|ImplicitDocRouter
operator|.
name|NAME
argument_list|,
name|REPLICATION_FACTOR
argument_list|,
name|replicationFactor
argument_list|,
name|MAX_SHARDS_PER_NODE
argument_list|,
name|maxShardsPerNode
argument_list|,
name|SHARDS_PROP
argument_list|,
literal|"a,b,c"
argument_list|)
decl_stmt|;
name|createCollection
argument_list|(
name|collectionInfos
argument_list|,
name|COLL_PREFIX
operator|+
name|i
argument_list|,
name|props
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|collectionInfosEntrySet
init|=
name|collectionInfos
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|entry
range|:
name|collectionInfosEntrySet
control|)
block|{
name|String
name|collection
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|checkForCollection
argument_list|(
name|collection
argument_list|,
name|list
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|url
init|=
name|getUrlFromZk
argument_list|(
name|getCommonCloudSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
argument_list|,
name|collection
argument_list|)
decl_stmt|;
try|try
init|(
name|HttpSolrClient
name|collectionClient
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|url
argument_list|)
init|)
block|{
comment|// poll for a second - it can take a moment before we are ready to serve
name|waitForNon403or404or503
argument_list|(
name|collectionClient
argument_list|)
expr_stmt|;
block|}
block|}
name|ZkStateReader
name|zkStateReader
init|=
name|getCommonCloudSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cnt
condition|;
name|j
operator|++
control|)
block|{
name|waitForRecoveriesToFinish
argument_list|(
name|COLL_PREFIX
operator|+
name|j
argument_list|,
name|zkStateReader
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|ClusterState
name|clusterState
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|DocCollection
name|coll
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|COLL_PREFIX
operator|+
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"implicit"
argument_list|,
operator|(
operator|(
name|Map
operator|)
name|coll
operator|.
name|get
argument_list|(
name|DOC_ROUTER
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|coll
operator|.
name|getStr
argument_list|(
name|REPLICATION_FACTOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|coll
operator|.
name|getStr
argument_list|(
name|MAX_SHARDS_PER_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"A shard of a Collection configured with implicit router must have null range"
argument_list|,
name|coll
operator|.
name|getSlice
argument_list|(
literal|"a"
argument_list|)
operator|.
name|getRange
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|collectionNameList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|collectionNameList
operator|.
name|addAll
argument_list|(
name|collectionInfos
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Collections created : "
operator|+
name|collectionNameList
argument_list|)
expr_stmt|;
name|String
name|collectionName
init|=
name|collectionNameList
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|collectionNameList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|url
init|=
name|getUrlFromZk
argument_list|(
name|getCommonCloudSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
argument_list|,
name|collectionName
argument_list|)
decl_stmt|;
name|String
name|shard_fld
init|=
literal|"shard_s"
decl_stmt|;
try|try
init|(
name|HttpSolrClient
name|collectionClient
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|url
argument_list|)
init|)
block|{
comment|// lets try and use the solrj client to index a couple documents
name|collectionClient
operator|.
name|add
argument_list|(
name|getDoc
argument_list|(
name|id
argument_list|,
literal|6
argument_list|,
name|i1
argument_list|,
operator|-
literal|600
argument_list|,
name|tlong
argument_list|,
literal|600
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy sat on a wall"
argument_list|,
name|_ROUTE_
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|collectionClient
operator|.
name|add
argument_list|(
name|getDoc
argument_list|(
name|id
argument_list|,
literal|7
argument_list|,
name|i1
argument_list|,
operator|-
literal|600
argument_list|,
name|tlong
argument_list|,
literal|600
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy3 sat on a walls"
argument_list|,
name|_ROUTE_
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|collectionClient
operator|.
name|add
argument_list|(
name|getDoc
argument_list|(
name|id
argument_list|,
literal|8
argument_list|,
name|i1
argument_list|,
operator|-
literal|600
argument_list|,
name|tlong
argument_list|,
literal|600
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy2 sat on a walled"
argument_list|,
name|_ROUTE_
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|collectionClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|collectionClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|collectionClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|setParam
argument_list|(
name|_ROUTE_
argument_list|,
literal|"b"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|collectionClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|setParam
argument_list|(
name|_ROUTE_
argument_list|,
literal|"a"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|collectionClient
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|collectionClient
operator|.
name|commit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|collectionClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|UpdateRequest
name|up
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|up
operator|.
name|setParam
argument_list|(
name|_ROUTE_
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|up
operator|.
name|setParam
argument_list|(
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|up
operator|.
name|add
argument_list|(
name|getDoc
argument_list|(
name|id
argument_list|,
literal|9
argument_list|,
name|i1
argument_list|,
operator|-
literal|600
argument_list|,
name|tlong
argument_list|,
literal|600
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy sat on a wall"
argument_list|)
argument_list|)
expr_stmt|;
name|up
operator|.
name|add
argument_list|(
name|getDoc
argument_list|(
name|id
argument_list|,
literal|10
argument_list|,
name|i1
argument_list|,
operator|-
literal|600
argument_list|,
name|tlong
argument_list|,
literal|600
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy3 sat on a walls"
argument_list|)
argument_list|)
expr_stmt|;
name|up
operator|.
name|add
argument_list|(
name|getDoc
argument_list|(
name|id
argument_list|,
literal|11
argument_list|,
name|i1
argument_list|,
operator|-
literal|600
argument_list|,
name|tlong
argument_list|,
literal|600
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy2 sat on a walled"
argument_list|)
argument_list|)
expr_stmt|;
name|collectionClient
operator|.
name|request
argument_list|(
name|up
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|collectionClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|collectionClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|setParam
argument_list|(
name|_ROUTE_
argument_list|,
literal|"a"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|collectionClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|setParam
argument_list|(
name|_ROUTE_
argument_list|,
literal|"c"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|//Testing CREATESHARD
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|CREATESHARD
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"collection"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"shard"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|SolrRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
try|try
init|(
name|SolrClient
name|server
init|=
name|createNewSolrClient
argument_list|(
literal|""
argument_list|,
name|getBaseUrl
argument_list|(
operator|(
name|HttpSolrClient
operator|)
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|server
operator|.
name|request
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
name|waitForCollection
argument_list|(
name|zkStateReader
argument_list|,
name|collectionName
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|//wait for all the replicas to become active
name|int
name|attempts
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|attempts
operator|>
literal|30
condition|)
name|fail
argument_list|(
literal|"Not enough active replicas in the shard 'x'"
argument_list|)
expr_stmt|;
name|attempts
operator|++
expr_stmt|;
name|int
name|activeReplicaCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Replica
name|x
range|:
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
operator|.
name|getSlice
argument_list|(
literal|"x"
argument_list|)
operator|.
name|getReplicas
argument_list|()
control|)
block|{
if|if
condition|(
name|x
operator|.
name|getState
argument_list|()
operator|==
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
condition|)
block|{
name|activeReplicaCount
operator|++
expr_stmt|;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
if|if
condition|(
name|activeReplicaCount
operator|>=
name|replicationFactor
condition|)
break|break;
block|}
name|log
operator|.
name|info
argument_list|(
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|collectionClient
operator|.
name|add
argument_list|(
name|getDoc
argument_list|(
name|id
argument_list|,
literal|66
argument_list|,
name|i1
argument_list|,
operator|-
literal|600
argument_list|,
name|tlong
argument_list|,
literal|600
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy sat on a wall"
argument_list|,
name|_ROUTE_
argument_list|,
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|collectionClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|collectionClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|setParam
argument_list|(
name|_ROUTE_
argument_list|,
literal|"x"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numShards
init|=
literal|4
decl_stmt|;
name|replicationFactor
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
operator|+
literal|2
expr_stmt|;
name|int
name|maxShardsPerNode
init|=
operator|(
operator|(
operator|(
name|numShards
operator|*
name|replicationFactor
operator|)
operator|/
name|getCommonCloudSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLiveNodes
argument_list|()
operator|.
name|size
argument_list|()
operator|)
operator|)
operator|+
literal|1
decl_stmt|;
try|try
init|(
name|CloudSolrClient
name|client
init|=
name|createCloudClient
argument_list|(
literal|null
argument_list|)
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|ZkNodeProps
operator|.
name|makeMap
argument_list|(
literal|"router.name"
argument_list|,
name|ImplicitDocRouter
operator|.
name|NAME
argument_list|,
name|REPLICATION_FACTOR
argument_list|,
name|replicationFactor
argument_list|,
name|MAX_SHARDS_PER_NODE
argument_list|,
name|maxShardsPerNode
argument_list|,
name|SHARDS_PROP
argument_list|,
literal|"a,b,c,d"
argument_list|,
literal|"router.field"
argument_list|,
name|shard_fld
argument_list|)
decl_stmt|;
name|collectionName
operator|=
name|COLL_PREFIX
operator|+
literal|"withShardField"
expr_stmt|;
name|createCollection
argument_list|(
name|collectionInfos
argument_list|,
name|collectionName
argument_list|,
name|props
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|collectionInfos
operator|.
name|get
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|checkForCollection
argument_list|(
name|collectionName
argument_list|,
name|list
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|url
operator|=
name|getUrlFromZk
argument_list|(
name|getCommonCloudSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|HttpSolrClient
name|collectionClient
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|url
argument_list|)
init|)
block|{
comment|// poll for a second - it can take a moment before we are ready to serve
name|waitForNon403or404or503
argument_list|(
name|collectionClient
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|HttpSolrClient
name|collectionClient
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|url
argument_list|)
init|)
block|{
comment|// lets try and use the solrj client to index a couple documents
name|collectionClient
operator|.
name|add
argument_list|(
name|getDoc
argument_list|(
name|id
argument_list|,
literal|6
argument_list|,
name|i1
argument_list|,
operator|-
literal|600
argument_list|,
name|tlong
argument_list|,
literal|600
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy sat on a wall"
argument_list|,
name|shard_fld
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|collectionClient
operator|.
name|add
argument_list|(
name|getDoc
argument_list|(
name|id
argument_list|,
literal|7
argument_list|,
name|i1
argument_list|,
operator|-
literal|600
argument_list|,
name|tlong
argument_list|,
literal|600
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy3 sat on a walls"
argument_list|,
name|shard_fld
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|collectionClient
operator|.
name|add
argument_list|(
name|getDoc
argument_list|(
name|id
argument_list|,
literal|8
argument_list|,
name|i1
argument_list|,
operator|-
literal|600
argument_list|,
name|tlong
argument_list|,
literal|600
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy2 sat on a walled"
argument_list|,
name|shard_fld
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|collectionClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|collectionClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|collectionClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|setParam
argument_list|(
name|_ROUTE_
argument_list|,
literal|"b"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO debug the following case
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|collectionClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|setParam
argument_list|(
name|_ROUTE_
argument_list|,
literal|"a"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRouteFieldForHashRouter
specifier|private
name|void
name|testRouteFieldForHashRouter
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|collectionName
init|=
literal|"routeFieldColl"
decl_stmt|;
name|int
name|numShards
init|=
literal|4
decl_stmt|;
name|int
name|replicationFactor
init|=
literal|2
decl_stmt|;
name|int
name|maxShardsPerNode
init|=
operator|(
operator|(
operator|(
name|numShards
operator|*
name|replicationFactor
operator|)
operator|/
name|getCommonCloudSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLiveNodes
argument_list|()
operator|.
name|size
argument_list|()
operator|)
operator|)
operator|+
literal|1
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|collectionInfos
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|shard_fld
init|=
literal|"shard_s"
decl_stmt|;
try|try
init|(
name|CloudSolrClient
name|client
init|=
name|createCloudClient
argument_list|(
literal|null
argument_list|)
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|ZkNodeProps
operator|.
name|makeMap
argument_list|(
name|REPLICATION_FACTOR
argument_list|,
name|replicationFactor
argument_list|,
name|MAX_SHARDS_PER_NODE
argument_list|,
name|maxShardsPerNode
argument_list|,
name|NUM_SLICES
argument_list|,
name|numShards
argument_list|,
literal|"router.field"
argument_list|,
name|shard_fld
argument_list|)
decl_stmt|;
name|createCollection
argument_list|(
name|collectionInfos
argument_list|,
name|collectionName
argument_list|,
name|props
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|collectionInfos
operator|.
name|get
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|checkForCollection
argument_list|(
name|collectionName
argument_list|,
name|list
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|url
init|=
name|getUrlFromZk
argument_list|(
name|getCommonCloudSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
argument_list|,
name|collectionName
argument_list|)
decl_stmt|;
try|try
init|(
name|HttpSolrClient
name|collectionClient
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|url
argument_list|)
init|)
block|{
comment|// poll for a second - it can take a moment before we are ready to serve
name|waitForNon403or404or503
argument_list|(
name|collectionClient
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|HttpSolrClient
name|collectionClient
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|url
argument_list|)
init|)
block|{
comment|// lets try and use the solrj client to index a couple documents
name|collectionClient
operator|.
name|add
argument_list|(
name|getDoc
argument_list|(
name|id
argument_list|,
literal|6
argument_list|,
name|i1
argument_list|,
operator|-
literal|600
argument_list|,
name|tlong
argument_list|,
literal|600
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy sat on a wall"
argument_list|,
name|shard_fld
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|collectionClient
operator|.
name|add
argument_list|(
name|getDoc
argument_list|(
name|id
argument_list|,
literal|7
argument_list|,
name|i1
argument_list|,
operator|-
literal|600
argument_list|,
name|tlong
argument_list|,
literal|600
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy3 sat on a walls"
argument_list|,
name|shard_fld
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|collectionClient
operator|.
name|add
argument_list|(
name|getDoc
argument_list|(
name|id
argument_list|,
literal|8
argument_list|,
name|i1
argument_list|,
operator|-
literal|600
argument_list|,
name|tlong
argument_list|,
literal|600
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy2 sat on a walled"
argument_list|,
name|shard_fld
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|collectionClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|collectionClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO debug the following case
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|collectionClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|setParam
argument_list|(
name|_ROUTE_
argument_list|,
literal|"a"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|collectionClient
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|collectionClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|collectionClient
operator|.
name|add
argument_list|(
name|getDoc
argument_list|(
name|id
argument_list|,
literal|100
argument_list|,
name|shard_fld
argument_list|,
literal|"b!doc1"
argument_list|)
argument_list|)
expr_stmt|;
name|collectionClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|collectionClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|setParam
argument_list|(
name|_ROUTE_
argument_list|,
literal|"b!"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCreateShardRepFactor
specifier|private
name|void
name|testCreateShardRepFactor
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|collectionName
init|=
literal|"testCreateShardRepFactor"
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|collectionInfos
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|CloudSolrClient
name|client
init|=
name|createCloudClient
argument_list|(
literal|null
argument_list|)
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|ZkNodeProps
operator|.
name|makeMap
argument_list|(
name|REPLICATION_FACTOR
argument_list|,
literal|1
argument_list|,
name|MAX_SHARDS_PER_NODE
argument_list|,
literal|5
argument_list|,
name|NUM_SLICES
argument_list|,
literal|2
argument_list|,
literal|"shards"
argument_list|,
literal|"a,b"
argument_list|,
literal|"router.name"
argument_list|,
literal|"implicit"
argument_list|)
decl_stmt|;
name|createCollection
argument_list|(
name|collectionInfos
argument_list|,
name|collectionName
argument_list|,
name|props
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
name|ZkStateReader
name|zkStateReader
init|=
name|getCommonCloudSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|waitForRecoveriesToFinish
argument_list|(
name|collectionName
argument_list|,
name|zkStateReader
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|CREATESHARD
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"collection"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"shard"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|SolrRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
try|try
init|(
name|SolrClient
name|server
init|=
name|createNewSolrClient
argument_list|(
literal|""
argument_list|,
name|getBaseUrl
argument_list|(
operator|(
name|HttpSolrClient
operator|)
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|server
operator|.
name|request
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
name|waitForRecoveriesToFinish
argument_list|(
name|collectionName
argument_list|,
name|zkStateReader
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|int
name|replicaCount
init|=
literal|0
decl_stmt|;
name|int
name|attempts
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|attempts
operator|>
literal|30
condition|)
name|fail
argument_list|(
literal|"Not enough active replicas in the shard 'x'"
argument_list|)
expr_stmt|;
name|zkStateReader
operator|.
name|updateClusterState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|attempts
operator|++
expr_stmt|;
name|replicaCount
operator|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
name|collectionName
argument_list|,
literal|"x"
argument_list|)
operator|.
name|getReplicas
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|replicaCount
operator|>=
literal|1
condition|)
break|break;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"CREATESHARD API created more than replicationFactor number of replicas"
argument_list|,
literal|1
argument_list|,
name|replicaCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|queryServer
specifier|protected
name|QueryResponse
name|queryServer
parameter_list|(
name|ModifiableSolrParams
name|params
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
if|if
condition|(
name|r
operator|.
name|nextBoolean
argument_list|()
condition|)
return|return
name|super
operator|.
name|queryServer
argument_list|(
name|params
argument_list|)
return|;
if|if
condition|(
name|r
operator|.
name|nextBoolean
argument_list|()
condition|)
name|params
operator|.
name|set
argument_list|(
literal|"collection"
argument_list|,
name|DEFAULT_COLLECTION
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|getCommonCloudSolrClient
argument_list|()
operator|.
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
return|return
name|rsp
return|;
block|}
block|}
end_class
end_unit
