begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerMessageHandler
operator|.
name|Lock
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Pair
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|ADDREPLICAPROP
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|DELETEREPLICA
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|MODIFYCOLLECTION
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|SPLITSHARD
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|TestLockTree
specifier|public
class|class
name|TestLockTree
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|testLocks
specifier|public
name|void
name|testLocks
parameter_list|()
throws|throws
name|Exception
block|{
name|LockTree
name|lockTree
init|=
operator|new
name|LockTree
argument_list|()
decl_stmt|;
name|Lock
name|coll1Lock
init|=
name|lockTree
operator|.
name|getSession
argument_list|()
operator|.
name|lock
argument_list|(
name|CollectionAction
operator|.
name|CREATE
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"coll1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|coll1Lock
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Should not be able to lock coll1/shard1"
argument_list|,
name|lockTree
operator|.
name|getSession
argument_list|()
operator|.
name|lock
argument_list|(
name|CollectionAction
operator|.
name|BALANCESHARDUNIQUE
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"coll1"
argument_list|,
literal|"shard1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|lockTree
operator|.
name|getSession
argument_list|()
operator|.
name|lock
argument_list|(
name|ADDREPLICAPROP
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"coll1"
argument_list|,
literal|"shard1"
argument_list|,
literal|"core_node2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|coll1Lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|Lock
name|shard1Lock
init|=
name|lockTree
operator|.
name|getSession
argument_list|()
operator|.
name|lock
argument_list|(
name|CollectionAction
operator|.
name|BALANCESHARDUNIQUE
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"coll1"
argument_list|,
literal|"shard1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|shard1Lock
argument_list|)
expr_stmt|;
name|shard1Lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|Lock
name|replica1Lock
init|=
name|lockTree
operator|.
name|getSession
argument_list|()
operator|.
name|lock
argument_list|(
name|ADDREPLICAPROP
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"coll1"
argument_list|,
literal|"shard1"
argument_list|,
literal|"core_node2"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|replica1Lock
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|CollectionAction
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|operations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|operations
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<>
argument_list|(
name|ADDREPLICAPROP
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"coll1"
argument_list|,
literal|"shard1"
argument_list|,
literal|"core_node2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|operations
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<>
argument_list|(
name|MODIFYCOLLECTION
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"coll1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|operations
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<>
argument_list|(
name|SPLITSHARD
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"coll1"
argument_list|,
literal|"shard1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|operations
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<>
argument_list|(
name|SPLITSHARD
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"coll2"
argument_list|,
literal|"shard2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|operations
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<>
argument_list|(
name|MODIFYCOLLECTION
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"coll2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|operations
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<>
argument_list|(
name|DELETEREPLICA
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"coll2"
argument_list|,
literal|"shard1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|orderOfExecution
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"coll1/shard1/core_node2"
argument_list|,
literal|"coll2/shard2"
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"coll1"
argument_list|,
literal|"coll2"
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"coll1/shard1"
argument_list|,
literal|"coll2/shard1"
argument_list|)
argument_list|)
decl_stmt|;
name|lockTree
operator|=
operator|new
name|LockTree
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|counter
init|=
literal|0
init|;
name|counter
operator|<
name|orderOfExecution
operator|.
name|size
argument_list|()
condition|;
name|counter
operator|++
control|)
block|{
name|LockTree
operator|.
name|Session
name|session
init|=
name|lockTree
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|CollectionAction
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|completedOps
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Lock
argument_list|>
name|locks
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operations
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Pair
argument_list|<
name|CollectionAction
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|operation
init|=
name|operations
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|session
operator|.
name|lock
argument_list|(
name|operation
operator|.
name|first
argument_list|()
argument_list|,
name|operation
operator|.
name|second
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|getRunnable
argument_list|(
name|completedOps
argument_list|,
name|operation
argument_list|,
name|locks
argument_list|,
name|lock
argument_list|)
argument_list|)
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
if|if
condition|(
name|locks
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not attain lock for anything "
operator|+
name|operations
argument_list|)
throw|;
name|Set
argument_list|<
name|String
argument_list|>
name|expectedOps
init|=
name|orderOfExecution
operator|.
name|get
argument_list|(
name|counter
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"counter : {} , expected : {}, actual : {}"
argument_list|,
name|counter
argument_list|,
name|expectedOps
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedOps
operator|.
name|size
argument_list|()
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Lock
name|lock
range|:
name|locks
control|)
name|assertTrue
argument_list|(
literal|"locks : "
operator|+
name|locks
operator|+
literal|" expectedOps : "
operator|+
name|expectedOps
argument_list|,
name|expectedOps
operator|.
name|contains
argument_list|(
name|lock
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|locks
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|CollectionAction
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|completedOp
range|:
name|completedOps
control|)
block|{
name|operations
operator|.
name|remove
argument_list|(
name|completedOp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getRunnable
specifier|private
name|Runnable
name|getRunnable
parameter_list|(
name|List
argument_list|<
name|Pair
argument_list|<
name|CollectionAction
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|completedOps
parameter_list|,
name|Pair
argument_list|<
name|CollectionAction
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|operation
parameter_list|,
name|List
argument_list|<
name|Lock
argument_list|>
name|locks
parameter_list|,
name|Lock
name|lock
parameter_list|)
block|{
return|return
parameter_list|()
lambda|->
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|completedOps
operator|.
name|add
argument_list|(
name|operation
argument_list|)
expr_stmt|;
name|locks
operator|.
name|add
argument_list|(
name|lock
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class
end_unit
