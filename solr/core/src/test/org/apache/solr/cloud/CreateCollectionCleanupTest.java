begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|CollectionAdminResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|CreateCollectionCleanupTest
specifier|public
class|class
name|CreateCollectionCleanupTest
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|CLOUD_SOLR_XML_WITH_10S_CREATE_COLL_WAIT
specifier|protected
specifier|static
specifier|final
name|String
name|CLOUD_SOLR_XML_WITH_10S_CREATE_COLL_WAIT
init|=
literal|"<solr>\n"
operator|+
literal|"\n"
operator|+
literal|"<str name=\"shareSchema\">${shareSchema:false}</str>\n"
operator|+
literal|"<str name=\"configSetBaseDir\">${configSetBaseDir:configsets}</str>\n"
operator|+
literal|"<str name=\"coreRootDirectory\">${coreRootDirectory:.}</str>\n"
operator|+
literal|"\n"
operator|+
literal|"<shardHandlerFactory name=\"shardHandlerFactory\" class=\"HttpShardHandlerFactory\">\n"
operator|+
literal|"<str name=\"urlScheme\">${urlScheme:}</str>\n"
operator|+
literal|"<int name=\"socketTimeout\">${socketTimeout:90000}</int>\n"
operator|+
literal|"<int name=\"connTimeout\">${connTimeout:15000}</int>\n"
operator|+
literal|"</shardHandlerFactory>\n"
operator|+
literal|"\n"
operator|+
literal|"<solrcloud>\n"
operator|+
literal|"<str name=\"host\">127.0.0.1</str>\n"
operator|+
literal|"<int name=\"hostPort\">${hostPort:8983}</int>\n"
operator|+
literal|"<str name=\"hostContext\">${hostContext:solr}</str>\n"
operator|+
literal|"<int name=\"zkClientTimeout\">${solr.zkclienttimeout:30000}</int>\n"
operator|+
literal|"<bool name=\"genericCoreNodeNames\">${genericCoreNodeNames:true}</bool>\n"
operator|+
literal|"<int name=\"leaderVoteWait\">10000</int>\n"
operator|+
literal|"<int name=\"distribUpdateConnTimeout\">${distribUpdateConnTimeout:45000}</int>\n"
operator|+
literal|"<int name=\"distribUpdateSoTimeout\">${distribUpdateSoTimeout:340000}</int>\n"
operator|+
literal|"<int name=\"createCollectionWaitTimeTillActive\">${createCollectionWaitTimeTillActive:10}</int>\n"
operator|+
literal|"</solrcloud>\n"
operator|+
literal|"  \n"
operator|+
literal|"</solr>\n"
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|createCluster
specifier|public
specifier|static
name|void
name|createCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|configureCluster
argument_list|(
literal|1
argument_list|)
operator|.
name|addConfig
argument_list|(
literal|"conf1"
argument_list|,
name|TEST_PATH
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"configsets"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"cloud-minimal"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"conf"
argument_list|)
argument_list|)
operator|.
name|withSolrXml
argument_list|(
name|CLOUD_SOLR_XML_WITH_10S_CREATE_COLL_WAIT
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateCollectionCleanup
specifier|public
name|void
name|testCreateCollectionCleanup
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CloudSolrClient
name|cloudClient
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
comment|// Create a collection that would fail
name|CollectionAdminRequest
operator|.
name|Create
name|create
init|=
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"foo"
argument_list|,
literal|"conf1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|CoreAdminParams
operator|.
name|DATA_DIR
argument_list|,
literal|"/some_invalid_dir/foo"
argument_list|)
expr_stmt|;
name|create
operator|.
name|setProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|CollectionAdminResponse
name|rsp
init|=
name|create
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|rsp
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// Confirm using LIST that the collection does not exist
name|CollectionAdminRequest
operator|.
name|List
name|list
init|=
name|CollectionAdminRequest
operator|.
name|listCollections
argument_list|()
decl_stmt|;
name|rsp
operator|=
name|list
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
operator|(
name|ArrayList
operator|)
name|rsp
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"collections"
argument_list|)
operator|)
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
