begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocRouter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ImplicitDocRouter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_class
DECL|class|AssignTest
specifier|public
class|class
name|AssignTest
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|log
specifier|protected
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AssignTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAssignNode
specifier|public
name|void
name|testAssignNode
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|cname
init|=
literal|"collection1"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|DocCollection
argument_list|>
name|collectionStates
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|replicas
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
literal|"state"
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
literal|"ACTIVE"
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
literal|"0.0.0.0"
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
literal|"core1"
argument_list|,
name|ZkStateReader
operator|.
name|ROLES_PROP
argument_list|,
literal|null
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
literal|"0_0_0_0"
argument_list|,
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
literal|"shard1"
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|cname
argument_list|,
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|,
literal|"1"
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NODE_NAME_PROP
argument_list|,
literal|"core_node1"
argument_list|)
decl_stmt|;
name|Replica
name|replica
init|=
operator|new
name|Replica
argument_list|(
literal|"core_node1"
argument_list|,
name|m
operator|.
name|getProperties
argument_list|()
argument_list|)
decl_stmt|;
name|replicas
operator|.
name|put
argument_list|(
literal|"core_node1"
argument_list|,
name|replica
argument_list|)
expr_stmt|;
name|Slice
name|slice
init|=
operator|new
name|Slice
argument_list|(
literal|"slice1"
argument_list|,
name|replicas
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|slices
operator|.
name|put
argument_list|(
literal|"slice1"
argument_list|,
name|slice
argument_list|)
expr_stmt|;
name|DocRouter
name|router
init|=
operator|new
name|ImplicitDocRouter
argument_list|()
decl_stmt|;
name|DocCollection
name|docCollection
init|=
operator|new
name|DocCollection
argument_list|(
name|cname
argument_list|,
name|slices
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|router
argument_list|)
decl_stmt|;
name|collectionStates
operator|.
name|put
argument_list|(
name|cname
argument_list|,
name|docCollection
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|liveNodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|ClusterState
name|state
init|=
operator|new
name|ClusterState
argument_list|(
operator|-
literal|1
argument_list|,
name|liveNodes
argument_list|,
name|collectionStates
argument_list|)
decl_stmt|;
name|String
name|nodeName
init|=
name|Assign
operator|.
name|assignNode
argument_list|(
literal|"collection1"
argument_list|,
name|state
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"core_node2"
argument_list|,
name|nodeName
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
