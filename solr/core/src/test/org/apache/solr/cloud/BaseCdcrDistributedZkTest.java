begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|params
operator|.
name|CoreConnectionPNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|CollectionAdminResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|CdcrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|SolrDispatchFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionProcessor
operator|.
name|*
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|MAX_SHARDS_PER_NODE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|REPLICATION_FACTOR
import|;
end_import
begin_comment
comment|/**  *<p>  * Abstract class for CDCR unit testing. This class emulates two clusters, a source and target, by using different  * collections in the same SolrCloud cluster. Therefore, the two clusters will share the same Zookeeper cluster. In  * real scenario, the two collections/clusters will likely have their own zookeeper cluster.  *</p>  *<p>  * This class will automatically create two collections, the source and the target. Each collection will have  * {@link #shardCount} shards, and {@link #replicationFactor} replicas per shard. One jetty instance will  * be created per core.  *</p>  *<p>  * The source and target collection can be reinitialised at will by calling {@link #clearSourceCollection()} and  * {@link #clearTargetCollection()}. After reinitialisation, a collection will have a new fresh index and update log.  *</p>  *<p>  * Servers can be restarted at will by calling  * {@link #restartServer(BaseCdcrDistributedZkTest.CloudJettyRunner)} or  * {@link #restartServers(java.util.List)}.  *</p>  *<p>  * The creation of the target collection can be disabled with the flag {@link #createTargetCollection};  *</p>  *<p>  * NB: We cannot use multiple cores per jetty instance, as jetty will load only one core when restarting. It seems  * that this is a limitation of the {@link org.apache.solr.client.solrj.embedded.JettySolrRunner}. This class  * tries to ensure that there always is one single core per jetty instance.  *</p>  */
end_comment
begin_class
DECL|class|BaseCdcrDistributedZkTest
specifier|public
class|class
name|BaseCdcrDistributedZkTest
extends|extends
name|AbstractDistribZkTestBase
block|{
DECL|field|shardCount
specifier|protected
name|int
name|shardCount
init|=
literal|2
decl_stmt|;
DECL|field|replicationFactor
specifier|protected
name|int
name|replicationFactor
init|=
literal|2
decl_stmt|;
DECL|field|createTargetCollection
specifier|protected
name|boolean
name|createTargetCollection
init|=
literal|true
decl_stmt|;
DECL|field|CDCR_PATH
specifier|private
specifier|static
specifier|final
name|String
name|CDCR_PATH
init|=
literal|"/cdcr"
decl_stmt|;
DECL|field|SOURCE_COLLECTION
specifier|protected
specifier|static
specifier|final
name|String
name|SOURCE_COLLECTION
init|=
literal|"source_collection"
decl_stmt|;
DECL|field|TARGET_COLLECTION
specifier|protected
specifier|static
specifier|final
name|String
name|TARGET_COLLECTION
init|=
literal|"target_collection"
decl_stmt|;
DECL|field|SHARD1
specifier|public
specifier|static
specifier|final
name|String
name|SHARD1
init|=
literal|"shard1"
decl_stmt|;
DECL|field|SHARD2
specifier|public
specifier|static
specifier|final
name|String
name|SHARD2
init|=
literal|"shard2"
decl_stmt|;
annotation|@
name|Override
DECL|method|getCloudSolrConfig
specifier|protected
name|String
name|getCloudSolrConfig
parameter_list|()
block|{
return|return
literal|"solrconfig-cdcr.xml"
return|;
block|}
annotation|@
name|Override
DECL|method|distribSetUp
specifier|public
name|void
name|distribSetUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|distribSetUp
argument_list|()
expr_stmt|;
if|if
condition|(
name|shardCount
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"numShards"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|shardCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"numShards"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isSSLMode
argument_list|()
condition|)
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"urlScheme"
argument_list|)
expr_stmt|;
name|ZkStateReader
name|zkStateReader
init|=
operator|new
name|ZkStateReader
argument_list|(
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|AbstractZkTestCase
operator|.
name|TIMEOUT
argument_list|,
name|AbstractZkTestCase
operator|.
name|TIMEOUT
argument_list|)
decl_stmt|;
try|try
block|{
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|create
argument_list|(
name|ZkStateReader
operator|.
name|CLUSTER_PROPS
argument_list|,
name|Utils
operator|.
name|toJSON
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"urlScheme"
argument_list|,
literal|"https"
argument_list|)
argument_list|)
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|zkStateReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|createServers
specifier|protected
name|void
name|createServers
parameter_list|(
name|int
name|numServers
parameter_list|)
throws|throws
name|Exception
block|{   }
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"solrcloud.update.delay"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solrcloud.update.delay"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|baseBefore
specifier|public
name|void
name|baseBefore
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|createSourceCollection
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|createTargetCollection
condition|)
name|this
operator|.
name|createTargetCollection
argument_list|()
expr_stmt|;
name|RandVal
operator|.
name|uniqueValues
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
comment|//reset random values
block|}
annotation|@
name|After
DECL|method|baseAfter
specifier|public
name|void
name|baseAfter
parameter_list|()
throws|throws
name|Exception
block|{
name|destroyServers
argument_list|()
expr_stmt|;
block|}
DECL|method|createCloudClient
specifier|protected
name|CloudSolrClient
name|createCloudClient
parameter_list|(
name|String
name|defaultCollection
parameter_list|)
block|{
name|CloudSolrClient
name|server
init|=
operator|new
name|CloudSolrClient
argument_list|(
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|server
operator|.
name|setParallelUpdates
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultCollection
operator|!=
literal|null
condition|)
name|server
operator|.
name|setDefaultCollection
argument_list|(
name|defaultCollection
argument_list|)
expr_stmt|;
name|server
operator|.
name|getLbClient
argument_list|()
operator|.
name|getHttpClient
argument_list|()
operator|.
name|getParams
argument_list|()
operator|.
name|setParameter
argument_list|(
name|CoreConnectionPNames
operator|.
name|CONNECTION_TIMEOUT
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
return|return
name|server
return|;
block|}
DECL|method|printLayout
specifier|protected
name|void
name|printLayout
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrZkClient
name|zkClient
init|=
operator|new
name|SolrZkClient
argument_list|(
name|zkServer
operator|.
name|getZkHost
argument_list|()
argument_list|,
name|AbstractZkTestCase
operator|.
name|TIMEOUT
argument_list|)
decl_stmt|;
name|zkClient
operator|.
name|printLayoutToStdOut
argument_list|()
expr_stmt|;
name|zkClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getDoc
specifier|protected
name|SolrInputDocument
name|getDoc
parameter_list|(
name|Object
modifier|...
name|fields
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|addFields
argument_list|(
name|doc
argument_list|,
name|fields
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
DECL|method|index
specifier|protected
name|void
name|index
parameter_list|(
name|String
name|collection
parameter_list|,
name|SolrInputDocument
name|doc
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|CloudSolrClient
name|client
init|=
name|createCloudClient
argument_list|(
name|collection
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|index
specifier|protected
name|void
name|index
parameter_list|(
name|String
name|collection
parameter_list|,
name|List
argument_list|<
name|SolrInputDocument
argument_list|>
name|docs
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|CloudSolrClient
name|client
init|=
name|createCloudClient
argument_list|(
name|collection
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|add
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|deleteById
specifier|protected
name|void
name|deleteById
parameter_list|(
name|String
name|collection
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|CloudSolrClient
name|client
init|=
name|createCloudClient
argument_list|(
name|collection
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|deleteById
argument_list|(
name|ids
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|deleteByQuery
specifier|protected
name|void
name|deleteByQuery
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|q
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|CloudSolrClient
name|client
init|=
name|createCloudClient
argument_list|(
name|collection
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|deleteByQuery
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Invokes a commit on the given collection.    */
DECL|method|commit
specifier|protected
name|void
name|commit
parameter_list|(
name|String
name|collection
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|CloudSolrClient
name|client
init|=
name|createCloudClient
argument_list|(
name|collection
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|commit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Returns the number of documents in a given collection    */
DECL|method|getNumDocs
specifier|protected
name|long
name|getNumDocs
parameter_list|(
name|String
name|collection
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|CloudSolrClient
name|client
init|=
name|createCloudClient
argument_list|(
name|collection
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|client
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
return|;
block|}
finally|finally
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Invokes a CDCR action on a given node.    */
DECL|method|invokeCdcrAction
specifier|protected
name|NamedList
name|invokeCdcrAction
parameter_list|(
name|CloudJettyRunner
name|jetty
parameter_list|,
name|CdcrParams
operator|.
name|CdcrAction
name|action
parameter_list|)
throws|throws
name|Exception
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|ACTION
argument_list|,
name|action
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SolrRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
name|CDCR_PATH
argument_list|)
expr_stmt|;
return|return
name|jetty
operator|.
name|client
operator|.
name|request
argument_list|(
name|request
argument_list|)
return|;
block|}
DECL|method|waitForCdcrStateReplication
specifier|protected
name|void
name|waitForCdcrStateReplication
parameter_list|(
name|String
name|collection
parameter_list|)
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Wait for CDCR state to replicate - collection: "
operator|+
name|collection
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|30
decl_stmt|;
while|while
condition|(
name|cnt
operator|>
literal|0
condition|)
block|{
name|NamedList
name|status
init|=
literal|null
decl_stmt|;
name|boolean
name|allEquals
init|=
literal|true
decl_stmt|;
for|for
control|(
name|CloudJettyRunner
name|jetty
range|:
name|cloudJettys
operator|.
name|get
argument_list|(
name|collection
argument_list|)
control|)
block|{
comment|// check all replicas
name|NamedList
name|rsp
init|=
name|invokeCdcrAction
argument_list|(
name|jetty
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|STATUS
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
name|status
operator|=
operator|(
name|NamedList
operator|)
name|rsp
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|STATUS
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|allEquals
operator|&=
name|status
operator|.
name|equals
argument_list|(
name|rsp
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|STATUS
operator|.
name|toLower
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allEquals
condition|)
block|{
break|break;
block|}
else|else
block|{
if|if
condition|(
name|cnt
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Timeout waiting for CDCR state to replicate: collection="
operator|+
name|collection
argument_list|)
throw|;
block|}
name|cnt
operator|--
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"CDCR state is identical across nodes - collection: "
operator|+
name|collection
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assert the state of CDCR on each nodes of the given collection.    */
DECL|method|assertState
specifier|protected
name|void
name|assertState
parameter_list|(
name|String
name|collection
parameter_list|,
name|CdcrParams
operator|.
name|ProcessState
name|processState
parameter_list|,
name|CdcrParams
operator|.
name|BufferState
name|bufferState
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|waitForCdcrStateReplication
argument_list|(
name|collection
argument_list|)
expr_stmt|;
comment|// ensure that cdcr state is replicated and stable
for|for
control|(
name|CloudJettyRunner
name|jetty
range|:
name|cloudJettys
operator|.
name|get
argument_list|(
name|collection
argument_list|)
control|)
block|{
comment|// check all replicas
name|NamedList
name|rsp
init|=
name|invokeCdcrAction
argument_list|(
name|jetty
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|STATUS
argument_list|)
decl_stmt|;
name|NamedList
name|status
init|=
operator|(
name|NamedList
operator|)
name|rsp
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|STATUS
operator|.
name|toLower
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|processState
operator|.
name|toLower
argument_list|()
argument_list|,
name|status
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|ProcessState
operator|.
name|getParam
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bufferState
operator|.
name|toLower
argument_list|()
argument_list|,
name|status
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|BufferState
operator|.
name|getParam
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A mapping between collection and node names. This is used when creating the collection in    * {@link #createCollection(String)}.    */
DECL|field|collectionToNodeNames
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|collectionToNodeNames
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Starts the servers, saves and associates the node names to the source collection,    * and finally creates the source collection.    */
DECL|method|createSourceCollection
specifier|private
name|void
name|createSourceCollection
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nodeNames
init|=
name|this
operator|.
name|startServers
argument_list|(
name|shardCount
operator|*
name|replicationFactor
argument_list|)
decl_stmt|;
name|this
operator|.
name|collectionToNodeNames
operator|.
name|put
argument_list|(
name|SOURCE_COLLECTION
argument_list|,
name|nodeNames
argument_list|)
expr_stmt|;
name|this
operator|.
name|createCollection
argument_list|(
name|SOURCE_COLLECTION
argument_list|)
expr_stmt|;
name|this
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|SOURCE_COLLECTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|updateMappingsFromZk
argument_list|(
name|SOURCE_COLLECTION
argument_list|)
expr_stmt|;
block|}
comment|/**    * Clear the source collection. It will delete then create the collection through the collection API.    * The collection will have a new fresh index, i.e., including a new update log.    */
DECL|method|clearSourceCollection
specifier|protected
name|void
name|clearSourceCollection
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|deleteCollection
argument_list|(
name|SOURCE_COLLECTION
argument_list|)
expr_stmt|;
name|this
operator|.
name|waitForCollectionToDisappear
argument_list|(
name|SOURCE_COLLECTION
argument_list|)
expr_stmt|;
name|this
operator|.
name|createCollection
argument_list|(
name|SOURCE_COLLECTION
argument_list|)
expr_stmt|;
name|this
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|SOURCE_COLLECTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|updateMappingsFromZk
argument_list|(
name|SOURCE_COLLECTION
argument_list|)
expr_stmt|;
block|}
comment|/**    * Starts the servers, saves and associates the node names to the target collection,    * and finally creates the target collection.    */
DECL|method|createTargetCollection
specifier|private
name|void
name|createTargetCollection
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nodeNames
init|=
name|this
operator|.
name|startServers
argument_list|(
name|shardCount
operator|*
name|replicationFactor
argument_list|)
decl_stmt|;
name|this
operator|.
name|collectionToNodeNames
operator|.
name|put
argument_list|(
name|TARGET_COLLECTION
argument_list|,
name|nodeNames
argument_list|)
expr_stmt|;
name|this
operator|.
name|createCollection
argument_list|(
name|TARGET_COLLECTION
argument_list|)
expr_stmt|;
name|this
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|TARGET_COLLECTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|updateMappingsFromZk
argument_list|(
name|TARGET_COLLECTION
argument_list|)
expr_stmt|;
block|}
comment|/**    * Clear the source collection. It will delete then create the collection through the collection API.    * The collection will have a new fresh index, i.e., including a new update log.    */
DECL|method|clearTargetCollection
specifier|protected
name|void
name|clearTargetCollection
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|deleteCollection
argument_list|(
name|TARGET_COLLECTION
argument_list|)
expr_stmt|;
name|this
operator|.
name|waitForCollectionToDisappear
argument_list|(
name|TARGET_COLLECTION
argument_list|)
expr_stmt|;
name|this
operator|.
name|createCollection
argument_list|(
name|TARGET_COLLECTION
argument_list|)
expr_stmt|;
name|this
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|TARGET_COLLECTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|updateMappingsFromZk
argument_list|(
name|TARGET_COLLECTION
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new collection through the Collection API. It enforces the use of one max shard per node.    * It will define the nodes to spread the new collection across by using the mapping {@link #collectionToNodeNames},    * to ensure that a node will not host more than one core (which will create problem when trying to restart servers).    */
DECL|method|createCollection
specifier|private
name|void
name|createCollection
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|CloudSolrClient
name|client
init|=
name|createCloudClient
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Create the target collection
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|collectionInfos
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|maxShardsPerNode
init|=
literal|1
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|nodeName
range|:
name|collectionToNodeNames
operator|.
name|get
argument_list|(
name|name
argument_list|)
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|deleteCharAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|createCollection
argument_list|(
name|collectionInfos
argument_list|,
name|name
argument_list|,
name|shardCount
argument_list|,
name|replicationFactor
argument_list|,
name|maxShardsPerNode
argument_list|,
name|client
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createCollection
specifier|private
name|CollectionAdminResponse
name|createCollection
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|collectionInfos
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|int
name|numShards
parameter_list|,
name|int
name|replicationFactor
parameter_list|,
name|int
name|maxShardsPerNode
parameter_list|,
name|SolrClient
name|client
parameter_list|,
name|String
name|createNodeSetStr
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
return|return
name|createCollection
argument_list|(
name|collectionInfos
argument_list|,
name|collectionName
argument_list|,
name|Utils
operator|.
name|makeMap
argument_list|(
name|NUM_SLICES
argument_list|,
name|numShards
argument_list|,
name|REPLICATION_FACTOR
argument_list|,
name|replicationFactor
argument_list|,
name|CREATE_NODE_SET
argument_list|,
name|createNodeSetStr
argument_list|,
name|MAX_SHARDS_PER_NODE
argument_list|,
name|maxShardsPerNode
argument_list|)
argument_list|,
name|client
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createCollection
specifier|private
name|CollectionAdminResponse
name|createCollection
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|collectionInfos
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|collectionProps
parameter_list|,
name|SolrClient
name|client
parameter_list|,
name|String
name|confSetName
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|collectionProps
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
name|params
operator|.
name|set
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Integer
name|numShards
init|=
operator|(
name|Integer
operator|)
name|collectionProps
operator|.
name|get
argument_list|(
name|NUM_SLICES
argument_list|)
decl_stmt|;
if|if
condition|(
name|numShards
operator|==
literal|null
condition|)
block|{
name|String
name|shardNames
init|=
operator|(
name|String
operator|)
name|collectionProps
operator|.
name|get
argument_list|(
name|SHARDS_PROP
argument_list|)
decl_stmt|;
name|numShards
operator|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|shardNames
argument_list|,
literal|','
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|Integer
name|replicationFactor
init|=
operator|(
name|Integer
operator|)
name|collectionProps
operator|.
name|get
argument_list|(
name|REPLICATION_FACTOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|replicationFactor
operator|==
literal|null
condition|)
block|{
name|replicationFactor
operator|=
operator|(
name|Integer
operator|)
name|OverseerCollectionProcessor
operator|.
name|COLL_PROPS
operator|.
name|get
argument_list|(
name|REPLICATION_FACTOR
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|confSetName
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
literal|"collection.configName"
argument_list|,
name|confSetName
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|numShards
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|replicationFactor
argument_list|)
expr_stmt|;
if|if
condition|(
name|collectionInfos
operator|!=
literal|null
condition|)
block|{
name|collectionInfos
operator|.
name|put
argument_list|(
name|collectionName
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|SolrRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|CollectionAdminResponse
name|res
init|=
operator|new
name|CollectionAdminResponse
argument_list|()
decl_stmt|;
name|res
operator|.
name|setResponse
argument_list|(
name|client
operator|.
name|request
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
comment|/**    * Delete a collection through the Collection API.    */
DECL|method|deleteCollection
specifier|protected
name|CollectionAdminResponse
name|deleteCollection
parameter_list|(
name|String
name|collectionName
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrClient
name|client
init|=
name|createCloudClient
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|CollectionAdminResponse
name|res
decl_stmt|;
try|try
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|DELETE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|QueryRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|res
operator|=
operator|new
name|CollectionAdminResponse
argument_list|()
expr_stmt|;
name|res
operator|.
name|setResponse
argument_list|(
name|client
operator|.
name|request
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error while deleting the collection "
operator|+
name|collectionName
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|CollectionAdminResponse
argument_list|()
return|;
block|}
finally|finally
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
DECL|method|waitForCollectionToDisappear
specifier|private
name|void
name|waitForCollectionToDisappear
parameter_list|(
name|String
name|collection
parameter_list|)
throws|throws
name|Exception
block|{
name|CloudSolrClient
name|client
init|=
name|this
operator|.
name|createCloudClient
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|connect
argument_list|()
expr_stmt|;
name|ZkStateReader
name|zkStateReader
init|=
name|client
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForCollectionToDisappear
argument_list|(
name|collection
argument_list|,
name|zkStateReader
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|15
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|waitForRecoveriesToFinish
specifier|private
name|void
name|waitForRecoveriesToFinish
parameter_list|(
name|String
name|collection
parameter_list|,
name|boolean
name|verbose
parameter_list|)
throws|throws
name|Exception
block|{
name|CloudSolrClient
name|client
init|=
name|this
operator|.
name|createCloudClient
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|connect
argument_list|()
expr_stmt|;
name|ZkStateReader
name|zkStateReader
init|=
name|client
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|super
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|collection
argument_list|,
name|zkStateReader
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Asserts that the collection has the correct number of shards and replicas    */
DECL|method|assertCollectionExpectations
specifier|protected
name|void
name|assertCollectionExpectations
parameter_list|(
name|String
name|collectionName
parameter_list|)
throws|throws
name|Exception
block|{
name|CloudSolrClient
name|client
init|=
name|this
operator|.
name|createCloudClient
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|connect
argument_list|()
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|client
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Could not find new collection "
operator|+
name|collectionName
argument_list|,
name|clusterState
operator|.
name|hasCollection
argument_list|(
name|collectionName
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|shards
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
operator|.
name|getSlicesMap
argument_list|()
decl_stmt|;
comment|// did we find expectedSlices shards/shards?
name|assertEquals
argument_list|(
literal|"Found new collection "
operator|+
name|collectionName
operator|+
literal|", but mismatch on number of shards."
argument_list|,
name|shardCount
argument_list|,
name|shards
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|totalShards
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|shardName
range|:
name|shards
operator|.
name|keySet
argument_list|()
control|)
block|{
name|totalShards
operator|+=
name|shards
operator|.
name|get
argument_list|(
name|shardName
argument_list|)
operator|.
name|getReplicas
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|int
name|expectedTotalShards
init|=
name|shardCount
operator|*
name|replicationFactor
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Found new collection "
operator|+
name|collectionName
operator|+
literal|" with correct number of shards, but mismatch on number "
operator|+
literal|"of shards."
argument_list|,
name|expectedTotalShards
argument_list|,
name|totalShards
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Restart a server.    */
DECL|method|restartServer
specifier|protected
name|void
name|restartServer
parameter_list|(
name|CloudJettyRunner
name|server
parameter_list|)
throws|throws
name|Exception
block|{
comment|// it seems we need to set the collection property to have the jetty properly restarted
name|System
operator|.
name|setProperty
argument_list|(
literal|"collection"
argument_list|,
name|server
operator|.
name|collection
argument_list|)
expr_stmt|;
name|JettySolrRunner
name|jetty
init|=
name|server
operator|.
name|jetty
decl_stmt|;
name|ChaosMonkey
operator|.
name|stop
argument_list|(
name|jetty
argument_list|)
expr_stmt|;
name|ChaosMonkey
operator|.
name|start
argument_list|(
name|jetty
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"collection"
argument_list|)
expr_stmt|;
name|waitForRecoveriesToFinish
argument_list|(
name|server
operator|.
name|collection
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|updateMappingsFromZk
argument_list|(
name|server
operator|.
name|collection
argument_list|)
expr_stmt|;
comment|// must update the mapping as the core node name might have changed
block|}
comment|/**    * Restarts a list of servers.    */
DECL|method|restartServers
specifier|protected
name|void
name|restartServers
parameter_list|(
name|List
argument_list|<
name|CloudJettyRunner
argument_list|>
name|servers
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|CloudJettyRunner
name|server
range|:
name|servers
control|)
block|{
name|this
operator|.
name|restartServer
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|jettys
specifier|private
name|List
argument_list|<
name|JettySolrRunner
argument_list|>
name|jettys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Creates and starts a given number of servers.    */
DECL|method|startServers
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|startServers
parameter_list|(
name|int
name|nServer
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|temporaryCollection
init|=
literal|"tmp_collection"
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"collection"
argument_list|,
name|temporaryCollection
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|nServer
condition|;
name|i
operator|++
control|)
block|{
comment|// give everyone there own solrhome
name|File
name|jettyDir
init|=
name|createTempDir
argument_list|(
literal|"jetty"
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|jettyDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|setupJettySolrHome
argument_list|(
name|jettyDir
argument_list|)
expr_stmt|;
name|JettySolrRunner
name|jetty
init|=
name|createJetty
argument_list|(
name|jettyDir
argument_list|,
literal|null
argument_list|,
literal|"shard"
operator|+
name|i
argument_list|)
decl_stmt|;
name|jettys
operator|.
name|add
argument_list|(
name|jetty
argument_list|)
expr_stmt|;
block|}
name|ZkStateReader
name|zkStateReader
init|=
operator|(
operator|(
name|SolrDispatchFilter
operator|)
name|jettys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDispatchFilter
argument_list|()
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getCores
argument_list|()
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
comment|// now wait till we see the leader for each shard
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|shardCount
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|printLayout
argument_list|()
expr_stmt|;
name|zkStateReader
operator|.
name|getLeaderRetry
argument_list|(
name|temporaryCollection
argument_list|,
literal|"shard"
operator|+
name|i
argument_list|,
literal|15000
argument_list|)
expr_stmt|;
block|}
comment|// store the node names
name|List
argument_list|<
name|String
argument_list|>
name|nodeNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Slice
name|shard
range|:
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|temporaryCollection
argument_list|)
operator|.
name|getSlices
argument_list|()
control|)
block|{
for|for
control|(
name|Replica
name|replica
range|:
name|shard
operator|.
name|getReplicas
argument_list|()
control|)
block|{
name|nodeNames
operator|.
name|add
argument_list|(
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// delete the temporary collection - we will create our own collections later
name|this
operator|.
name|deleteCollection
argument_list|(
name|temporaryCollection
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"collection"
argument_list|)
expr_stmt|;
return|return
name|nodeNames
return|;
block|}
annotation|@
name|Override
DECL|method|destroyServers
specifier|protected
name|void
name|destroyServers
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|JettySolrRunner
name|runner
range|:
name|jettys
control|)
block|{
try|try
block|{
name|ChaosMonkey
operator|.
name|stop
argument_list|(
name|runner
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|jettys
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * Mapping from collection to jettys    */
DECL|field|cloudJettys
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CloudJettyRunner
argument_list|>
argument_list|>
name|cloudJettys
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Mapping from collection/shard to jettys    */
DECL|field|shardToJetty
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CloudJettyRunner
argument_list|>
argument_list|>
argument_list|>
name|shardToJetty
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Mapping from collection/shard leader to jettys    */
DECL|field|shardToLeaderJetty
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|CloudJettyRunner
argument_list|>
argument_list|>
name|shardToLeaderJetty
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Updates the mappings between the jetty's instances and the zookeeper cluster state.    */
DECL|method|updateMappingsFromZk
specifier|protected
name|void
name|updateMappingsFromZk
parameter_list|(
name|String
name|collection
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|CloudJettyRunner
argument_list|>
name|cloudJettys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CloudJettyRunner
argument_list|>
argument_list|>
name|shardToJetty
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|CloudJettyRunner
argument_list|>
name|shardToLeaderJetty
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|CloudSolrClient
name|cloudClient
init|=
name|this
operator|.
name|createCloudClient
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|cloudClient
operator|.
name|connect
argument_list|()
expr_stmt|;
name|ZkStateReader
name|zkStateReader
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|zkStateReader
operator|.
name|updateClusterState
argument_list|()
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|DocCollection
name|coll
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collection
argument_list|)
decl_stmt|;
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|jettys
control|)
block|{
name|int
name|port
init|=
name|jetty
operator|.
name|getLocalPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|port
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot find the port for jetty"
argument_list|)
throw|;
block|}
name|nextJetty
label|:
for|for
control|(
name|Slice
name|shard
range|:
name|coll
operator|.
name|getSlices
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
argument_list|>
name|entries
init|=
name|shard
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|Replica
name|replica
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|)
operator|.
name|contains
argument_list|(
literal|":"
operator|+
name|port
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|shardToJetty
operator|.
name|containsKey
argument_list|(
name|shard
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|shardToJetty
operator|.
name|put
argument_list|(
name|shard
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|CloudJettyRunner
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isLeader
init|=
name|shard
operator|.
name|getLeader
argument_list|()
operator|==
name|replica
decl_stmt|;
name|CloudJettyRunner
name|cjr
init|=
operator|new
name|CloudJettyRunner
argument_list|(
name|jetty
argument_list|,
name|replica
argument_list|,
name|collection
argument_list|,
name|shard
operator|.
name|getName
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|shardToJetty
operator|.
name|get
argument_list|(
name|shard
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|cjr
argument_list|)
expr_stmt|;
if|if
condition|(
name|isLeader
condition|)
block|{
name|shardToLeaderJetty
operator|.
name|put
argument_list|(
name|shard
operator|.
name|getName
argument_list|()
argument_list|,
name|cjr
argument_list|)
expr_stmt|;
block|}
name|cloudJettys
operator|.
name|add
argument_list|(
name|cjr
argument_list|)
expr_stmt|;
break|break
name|nextJetty
break|;
block|}
block|}
block|}
block|}
name|this
operator|.
name|cloudJettys
operator|.
name|put
argument_list|(
name|collection
argument_list|,
name|cloudJettys
argument_list|)
expr_stmt|;
name|this
operator|.
name|shardToJetty
operator|.
name|put
argument_list|(
name|collection
argument_list|,
name|shardToJetty
argument_list|)
expr_stmt|;
name|this
operator|.
name|shardToLeaderJetty
operator|.
name|put
argument_list|(
name|collection
argument_list|,
name|shardToLeaderJetty
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cloudClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Wrapper around a {@link org.apache.solr.client.solrj.embedded.JettySolrRunner} to map the jetty    * instance to various information of the cloud cluster, such as the collection and shard    * that is served by the jetty instance, the node name, core node name, url, etc.    */
DECL|class|CloudJettyRunner
specifier|public
specifier|static
class|class
name|CloudJettyRunner
block|{
DECL|field|jetty
specifier|public
name|JettySolrRunner
name|jetty
decl_stmt|;
DECL|field|nodeName
specifier|public
name|String
name|nodeName
decl_stmt|;
DECL|field|coreNodeName
specifier|public
name|String
name|coreNodeName
decl_stmt|;
DECL|field|url
specifier|public
name|String
name|url
decl_stmt|;
DECL|field|client
specifier|public
name|SolrClient
name|client
decl_stmt|;
DECL|field|info
specifier|public
name|Replica
name|info
decl_stmt|;
DECL|field|shard
specifier|public
name|String
name|shard
decl_stmt|;
DECL|field|collection
specifier|public
name|String
name|collection
decl_stmt|;
DECL|method|CloudJettyRunner
specifier|public
name|CloudJettyRunner
parameter_list|(
name|JettySolrRunner
name|jetty
parameter_list|,
name|Replica
name|replica
parameter_list|,
name|String
name|collection
parameter_list|,
name|String
name|shard
parameter_list|,
name|String
name|coreNodeName
parameter_list|)
block|{
name|this
operator|.
name|jetty
operator|=
name|jetty
expr_stmt|;
name|this
operator|.
name|info
operator|=
name|replica
expr_stmt|;
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
comment|// we need to update the jetty's shard so that it registers itself to the right shard when restarted
name|this
operator|.
name|shard
operator|=
name|shard
expr_stmt|;
name|this
operator|.
name|jetty
operator|.
name|setShards
argument_list|(
name|this
operator|.
name|shard
argument_list|)
expr_stmt|;
comment|// we need to update the jetty's shard so that it registers itself under the right core name when restarted
name|this
operator|.
name|coreNodeName
operator|=
name|coreNodeName
expr_stmt|;
name|this
operator|.
name|jetty
operator|.
name|setCoreNodeName
argument_list|(
name|this
operator|.
name|coreNodeName
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeName
operator|=
name|replica
operator|.
name|getNodeName
argument_list|()
expr_stmt|;
name|ZkCoreNodeProps
name|coreNodeProps
init|=
operator|new
name|ZkCoreNodeProps
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|this
operator|.
name|url
operator|=
name|coreNodeProps
operator|.
name|getCoreUrl
argument_list|()
expr_stmt|;
comment|// strip the trailing slash as this can cause issues when executing requests
name|this
operator|.
name|client
operator|=
name|createNewSolrServer
argument_list|(
name|this
operator|.
name|url
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|url
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|url
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|url
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|CloudJettyRunner
name|other
init|=
operator|(
name|CloudJettyRunner
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|url
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|url
operator|.
name|equals
argument_list|(
name|other
operator|.
name|url
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"CloudJettyRunner [url="
operator|+
name|url
operator|+
literal|"]"
return|;
block|}
block|}
DECL|method|createNewSolrServer
specifier|protected
specifier|static
name|SolrClient
name|createNewSolrServer
parameter_list|(
name|String
name|baseUrl
parameter_list|)
block|{
try|try
block|{
comment|// setup the server...
name|HttpSolrClient
name|s
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|baseUrl
argument_list|)
decl_stmt|;
name|s
operator|.
name|setConnectionTimeout
argument_list|(
name|DEFAULT_CONNECTION_TIMEOUT
argument_list|)
expr_stmt|;
name|s
operator|.
name|setDefaultMaxConnectionsPerHost
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|s
operator|.
name|setMaxTotalConnections
argument_list|(
literal|100
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|waitForReplicationToComplete
specifier|protected
name|void
name|waitForReplicationToComplete
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|String
name|shardId
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|cnt
init|=
literal|15
decl_stmt|;
while|while
condition|(
name|cnt
operator|>
literal|0
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Checking queue size @ {}:{}"
argument_list|,
name|collectionName
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
name|long
name|size
init|=
name|this
operator|.
name|getQueueSize
argument_list|(
name|collectionName
argument_list|,
name|shardId
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
comment|// if we received -1, it means that the log reader is not yet initialised, we should wait
return|return;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Waiting for replication to complete. Queue size: {} @ {}:{}"
argument_list|,
name|size
argument_list|,
name|collectionName
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
name|cnt
operator|--
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// wait a bit for the replication to complete
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Timeout waiting for CDCR replication to complete @"
operator|+
name|collectionName
operator|+
literal|":"
operator|+
name|shardId
argument_list|)
throw|;
block|}
DECL|method|getQueueSize
specifier|protected
name|long
name|getQueueSize
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|String
name|shardId
parameter_list|)
throws|throws
name|Exception
block|{
name|NamedList
name|rsp
init|=
name|this
operator|.
name|invokeCdcrAction
argument_list|(
name|shardToLeaderJetty
operator|.
name|get
argument_list|(
name|collectionName
argument_list|)
operator|.
name|get
argument_list|(
name|shardId
argument_list|)
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|QUEUES
argument_list|)
decl_stmt|;
name|NamedList
name|host
init|=
call|(
name|NamedList
call|)
argument_list|(
operator|(
name|NamedList
operator|)
name|rsp
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|QUEUES
argument_list|)
argument_list|)
operator|.
name|getVal
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|NamedList
name|status
init|=
operator|(
name|NamedList
operator|)
name|host
operator|.
name|get
argument_list|(
name|TARGET_COLLECTION
argument_list|)
decl_stmt|;
return|return
operator|(
name|Long
operator|)
name|status
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|QUEUE_SIZE
argument_list|)
return|;
block|}
DECL|method|collectInfo
specifier|protected
name|CollectionInfo
name|collectInfo
parameter_list|(
name|String
name|collection
parameter_list|)
throws|throws
name|Exception
block|{
name|CollectionInfo
name|info
init|=
operator|new
name|CollectionInfo
argument_list|(
name|collection
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|shard
range|:
name|shardToJetty
operator|.
name|get
argument_list|(
name|collection
argument_list|)
operator|.
name|keySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|CloudJettyRunner
argument_list|>
name|jettyRunners
init|=
name|shardToJetty
operator|.
name|get
argument_list|(
name|collection
argument_list|)
operator|.
name|get
argument_list|(
name|shard
argument_list|)
decl_stmt|;
for|for
control|(
name|CloudJettyRunner
name|jettyRunner
range|:
name|jettyRunners
control|)
block|{
name|SolrDispatchFilter
name|filter
init|=
operator|(
name|SolrDispatchFilter
operator|)
name|jettyRunner
operator|.
name|jetty
operator|.
name|getDispatchFilter
argument_list|()
operator|.
name|getFilter
argument_list|()
decl_stmt|;
for|for
control|(
name|SolrCore
name|core
range|:
name|filter
operator|.
name|getCores
argument_list|()
operator|.
name|getCores
argument_list|()
control|)
block|{
name|info
operator|.
name|addCore
argument_list|(
name|core
argument_list|,
name|shard
argument_list|,
name|shardToLeaderJetty
operator|.
name|get
argument_list|(
name|collection
argument_list|)
operator|.
name|containsValue
argument_list|(
name|jettyRunner
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|info
return|;
block|}
DECL|class|CollectionInfo
specifier|protected
class|class
name|CollectionInfo
block|{
DECL|field|coreInfos
name|List
argument_list|<
name|CoreInfo
argument_list|>
name|coreInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|collection
name|String
name|collection
decl_stmt|;
DECL|method|CollectionInfo
name|CollectionInfo
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
block|}
comment|/**      * @return Returns a map shard -> list of cores      */
DECL|method|getShardToCoresMap
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CoreInfo
argument_list|>
argument_list|>
name|getShardToCoresMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CoreInfo
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|CoreInfo
name|info
range|:
name|coreInfos
control|)
block|{
name|List
argument_list|<
name|CoreInfo
argument_list|>
name|list
init|=
name|map
operator|.
name|get
argument_list|(
name|info
operator|.
name|shard
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|info
operator|.
name|shard
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
DECL|method|getLeader
name|CoreInfo
name|getLeader
parameter_list|(
name|String
name|shard
parameter_list|)
block|{
name|List
argument_list|<
name|CoreInfo
argument_list|>
name|coreInfos
init|=
name|getShardToCoresMap
argument_list|()
operator|.
name|get
argument_list|(
name|shard
argument_list|)
decl_stmt|;
for|for
control|(
name|CoreInfo
name|info
range|:
name|coreInfos
control|)
block|{
if|if
condition|(
name|info
operator|.
name|isLeader
condition|)
block|{
return|return
name|info
return|;
block|}
block|}
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"There is no leader for collection %s shard %s"
argument_list|,
name|collection
argument_list|,
name|shard
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
DECL|method|getReplicas
name|List
argument_list|<
name|CoreInfo
argument_list|>
name|getReplicas
parameter_list|(
name|String
name|shard
parameter_list|)
block|{
name|List
argument_list|<
name|CoreInfo
argument_list|>
name|coreInfos
init|=
name|getShardToCoresMap
argument_list|()
operator|.
name|get
argument_list|(
name|shard
argument_list|)
decl_stmt|;
name|coreInfos
operator|.
name|remove
argument_list|(
name|getLeader
argument_list|(
name|shard
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|coreInfos
return|;
block|}
DECL|method|addCore
name|void
name|addCore
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|String
name|shard
parameter_list|,
name|boolean
name|isLeader
parameter_list|)
throws|throws
name|Exception
block|{
name|CoreInfo
name|info
init|=
operator|new
name|CoreInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|collectionName
operator|=
name|core
operator|.
name|getName
argument_list|()
expr_stmt|;
name|info
operator|.
name|shard
operator|=
name|shard
expr_stmt|;
name|info
operator|.
name|isLeader
operator|=
name|isLeader
expr_stmt|;
name|info
operator|.
name|ulogDir
operator|=
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
operator|.
name|getLogDir
argument_list|()
expr_stmt|;
name|this
operator|.
name|coreInfos
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
DECL|class|CoreInfo
specifier|public
class|class
name|CoreInfo
block|{
DECL|field|collectionName
name|String
name|collectionName
decl_stmt|;
DECL|field|shard
name|String
name|shard
decl_stmt|;
DECL|field|isLeader
name|boolean
name|isLeader
decl_stmt|;
DECL|field|ulogDir
name|String
name|ulogDir
decl_stmt|;
block|}
block|}
block|}
end_class
end_unit
