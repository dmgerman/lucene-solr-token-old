begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Nightly
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
operator|.
name|SuppressSSL
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NodeExistsException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
annotation|@
name|Slow
annotation|@
name|SuppressSSL
argument_list|(
name|bugUrl
operator|=
literal|"https://issues.apache.org/jira/browse/SOLR-5776"
argument_list|)
annotation|@
name|Nightly
DECL|class|LeaderInitiatedRecoveryOnShardRestartTest
specifier|public
class|class
name|LeaderInitiatedRecoveryOnShardRestartTest
extends|extends
name|AbstractFullDistribZkTestBase
block|{
DECL|method|LeaderInitiatedRecoveryOnShardRestartTest
specifier|public
name|LeaderInitiatedRecoveryOnShardRestartTest
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|sliceCount
operator|=
literal|1
expr_stmt|;
name|fixShardCount
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRestartWithAllInLIR
specifier|public
name|void
name|testRestartWithAllInLIR
parameter_list|()
throws|throws
name|Exception
block|{
name|waitForThingsToLevelOut
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
name|String
name|testCollectionName
init|=
literal|"all_in_lir"
decl_stmt|;
name|String
name|shardId
init|=
literal|"shard1"
decl_stmt|;
name|createCollection
argument_list|(
name|testCollectionName
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|setDefaultCollection
argument_list|(
name|testCollectionName
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|stateObj
init|=
name|Utils
operator|.
name|makeMap
argument_list|()
decl_stmt|;
name|stateObj
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
literal|"down"
argument_list|)
expr_stmt|;
name|stateObj
operator|.
name|put
argument_list|(
literal|"createdByNodeName"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|stateObj
operator|.
name|put
argument_list|(
literal|"createdByCoreNodeName"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|znodeData
init|=
name|Utils
operator|.
name|toJSON
argument_list|(
name|stateObj
argument_list|)
decl_stmt|;
name|SolrZkClient
name|zkClient
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getZkClient
argument_list|()
decl_stmt|;
name|zkClient
operator|.
name|makePath
argument_list|(
literal|"/collections/"
operator|+
name|testCollectionName
operator|+
literal|"/leader_initiated_recovery/"
operator|+
name|shardId
operator|+
literal|"/core_node1"
argument_list|,
name|znodeData
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|makePath
argument_list|(
literal|"/collections/"
operator|+
name|testCollectionName
operator|+
literal|"/leader_initiated_recovery/"
operator|+
name|shardId
operator|+
literal|"/core_node2"
argument_list|,
name|znodeData
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|makePath
argument_list|(
literal|"/collections/"
operator|+
name|testCollectionName
operator|+
literal|"/leader_initiated_recovery/"
operator|+
name|shardId
operator|+
literal|"/core_node3"
argument_list|,
name|znodeData
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// printLayout();
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|jettys
control|)
block|{
name|ChaosMonkey
operator|.
name|stop
argument_list|(
name|jetty
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|jettys
control|)
block|{
name|ChaosMonkey
operator|.
name|start
argument_list|(
name|jetty
argument_list|)
expr_stmt|;
block|}
comment|// recoveries will not finish without SOLR-8075
name|waitForRecoveriesToFinish
argument_list|(
name|testCollectionName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// now expire each node
try|try
block|{
name|zkClient
operator|.
name|makePath
argument_list|(
literal|"/collections/"
operator|+
name|testCollectionName
operator|+
literal|"/leader_initiated_recovery/"
operator|+
name|shardId
operator|+
literal|"/core_node1"
argument_list|,
name|znodeData
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NodeExistsException
name|e
parameter_list|)
block|{          }
try|try
block|{
name|zkClient
operator|.
name|makePath
argument_list|(
literal|"/collections/"
operator|+
name|testCollectionName
operator|+
literal|"/leader_initiated_recovery/"
operator|+
name|shardId
operator|+
literal|"/core_node2"
argument_list|,
name|znodeData
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NodeExistsException
name|e
parameter_list|)
block|{          }
try|try
block|{
name|zkClient
operator|.
name|makePath
argument_list|(
literal|"/collections/"
operator|+
name|testCollectionName
operator|+
literal|"/leader_initiated_recovery/"
operator|+
name|shardId
operator|+
literal|"/core_node3"
argument_list|,
name|znodeData
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NodeExistsException
name|e
parameter_list|)
block|{          }
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|jettys
control|)
block|{
name|chaosMonkey
operator|.
name|expireSession
argument_list|(
name|jetty
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// recoveries will not finish without SOLR-8075
name|waitForRecoveriesToFinish
argument_list|(
name|testCollectionName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
