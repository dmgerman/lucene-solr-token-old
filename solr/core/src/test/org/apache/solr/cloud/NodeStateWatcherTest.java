begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|NodeStateWatcher
operator|.
name|NodeStateChangeListener
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerTest
operator|.
name|MockZKController
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|CoreState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_class
DECL|class|NodeStateWatcherTest
specifier|public
class|class
name|NodeStateWatcherTest
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|TIMEOUT
specifier|private
name|int
name|TIMEOUT
init|=
literal|10000
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|()
expr_stmt|;
block|}
DECL|method|testCoreAddDelete
specifier|public
name|void
name|testCoreAddDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|zkDir
init|=
name|dataDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"zookeeper/server1/data"
decl_stmt|;
name|ZkTestServer
name|server
init|=
operator|new
name|ZkTestServer
argument_list|(
name|zkDir
argument_list|)
decl_stmt|;
name|SolrZkClient
name|zkClient
init|=
literal|null
decl_stmt|;
name|ZkStateReader
name|reader
init|=
literal|null
decl_stmt|;
name|SolrZkClient
name|overseerClient
init|=
literal|null
decl_stmt|;
name|MockZKController
name|controller
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|String
name|NODE_NAME
init|=
literal|"node1"
decl_stmt|;
name|server
operator|.
name|run
argument_list|()
expr_stmt|;
name|zkClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|tryCleanSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractZkTestCase
operator|.
name|makeSolrZkNode
argument_list|(
name|server
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|makePath
argument_list|(
literal|"/live_nodes"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|ZkStateReader
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|reader
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
name|controller
operator|=
operator|new
name|MockZKController
argument_list|(
name|server
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|NODE_NAME
argument_list|,
literal|"collection1"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|path
init|=
name|Overseer
operator|.
name|STATES_NODE
operator|+
literal|"/"
operator|+
name|NODE_NAME
decl_stmt|;
specifier|final
name|AtomicInteger
name|callCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|NodeStateWatcher
name|watcher
init|=
operator|new
name|NodeStateWatcher
argument_list|(
name|zkClient
argument_list|,
name|NODE_NAME
argument_list|,
name|path
argument_list|,
operator|new
name|NodeStateChangeListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|coreChanged
parameter_list|(
name|String
name|nodeName
parameter_list|,
name|Set
argument_list|<
name|CoreState
argument_list|>
name|states
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|callCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|coreDeleted
parameter_list|(
name|String
name|nodeName
parameter_list|,
name|Collection
argument_list|<
name|CoreState
argument_list|>
name|states
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|callCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|controller
operator|.
name|publishState
argument_list|(
literal|"core1"
argument_list|,
literal|"state1"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|waitForCall
argument_list|(
literal|1
argument_list|,
name|callCounter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|watcher
operator|.
name|getCurrentState
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|publishState
argument_list|(
literal|"core2"
argument_list|,
literal|"state1"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|waitForCall
argument_list|(
literal|2
argument_list|,
name|callCounter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|watcher
operator|.
name|getCurrentState
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|publishState
argument_list|(
literal|"core1"
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|waitForCall
argument_list|(
literal|3
argument_list|,
name|callCounter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|watcher
operator|.
name|getCurrentState
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|publishState
argument_list|(
literal|"core2"
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|waitForCall
argument_list|(
literal|4
argument_list|,
name|callCounter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|watcher
operator|.
name|getCurrentState
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|clearProperty
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|)
expr_stmt|;
if|if
condition|(
name|zkClient
operator|!=
literal|null
condition|)
block|{
name|zkClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|controller
operator|!=
literal|null
condition|)
block|{
name|controller
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|overseerClient
operator|!=
literal|null
condition|)
block|{
name|overseerClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|waitForCall
specifier|private
name|void
name|waitForCall
parameter_list|(
name|int
name|i
parameter_list|,
name|AtomicInteger
name|callCounter
parameter_list|)
throws|throws
name|InterruptedException
block|{
while|while
condition|(
name|i
operator|>
name|callCounter
operator|.
name|get
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
