begin_unit
begin_package
DECL|package|org.apache.solr.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|BaseTokenStreamTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import
begin_comment
comment|/**  * Simple tests to ensure the Hindi filter Factories are working.  */
end_comment
begin_class
DECL|class|TestHindiFilters
specifier|public
class|class
name|TestHindiFilters
extends|extends
name|BaseTokenStreamTestCase
block|{
comment|/**    * Test IndicNormalizationFilterFactory    */
DECL|method|testIndicNormalizer
specifier|public
name|void
name|testIndicNormalizer
parameter_list|()
throws|throws
name|Exception
block|{
name|Reader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
literal|"à¦¤à§â à¤à¤¾à¥à¤°"
argument_list|)
decl_stmt|;
name|StandardTokenizerFactory
name|factory
init|=
operator|new
name|StandardTokenizerFactory
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setLuceneMatchVersion
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|)
expr_stmt|;
name|IndicNormalizationFilterFactory
name|filterFactory
init|=
operator|new
name|IndicNormalizationFilterFactory
argument_list|()
decl_stmt|;
name|filterFactory
operator|.
name|setLuceneMatchVersion
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
name|factory
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|filterFactory
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|Tokenizer
name|tokenizer
init|=
name|factory
operator|.
name|create
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|TokenStream
name|stream
init|=
name|filterFactory
operator|.
name|create
argument_list|(
name|tokenizer
argument_list|)
decl_stmt|;
name|assertTokenStreamContents
argument_list|(
name|stream
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"à§"
block|,
literal|"à¤à¤°"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test HindiNormalizationFilterFactory    */
DECL|method|testHindiNormalizer
specifier|public
name|void
name|testHindiNormalizer
parameter_list|()
throws|throws
name|Exception
block|{
name|Reader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
literal|"à¥à¤¿à¤¤à¤¾à¤¬"
argument_list|)
decl_stmt|;
name|StandardTokenizerFactory
name|factory
init|=
operator|new
name|StandardTokenizerFactory
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setLuceneMatchVersion
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|)
expr_stmt|;
name|IndicNormalizationFilterFactory
name|indicFilterFactory
init|=
operator|new
name|IndicNormalizationFilterFactory
argument_list|()
decl_stmt|;
name|HindiNormalizationFilterFactory
name|hindiFilterFactory
init|=
operator|new
name|HindiNormalizationFilterFactory
argument_list|()
decl_stmt|;
name|hindiFilterFactory
operator|.
name|setLuceneMatchVersion
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
name|factory
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|hindiFilterFactory
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|Tokenizer
name|tokenizer
init|=
name|factory
operator|.
name|create
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|TokenStream
name|stream
init|=
name|indicFilterFactory
operator|.
name|create
argument_list|(
name|tokenizer
argument_list|)
decl_stmt|;
name|stream
operator|=
name|hindiFilterFactory
operator|.
name|create
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
name|stream
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"à¤à¤¿à¤¤à¤¾à¤¬"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test HindiStemFilterFactory    */
DECL|method|testStemmer
specifier|public
name|void
name|testStemmer
parameter_list|()
throws|throws
name|Exception
block|{
name|Reader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
literal|"à¤à¤¿à¤¤à¤¾à¤¬à¥à¤"
argument_list|)
decl_stmt|;
name|StandardTokenizerFactory
name|factory
init|=
operator|new
name|StandardTokenizerFactory
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setLuceneMatchVersion
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|)
expr_stmt|;
name|IndicNormalizationFilterFactory
name|indicFilterFactory
init|=
operator|new
name|IndicNormalizationFilterFactory
argument_list|()
decl_stmt|;
name|HindiNormalizationFilterFactory
name|hindiFilterFactory
init|=
operator|new
name|HindiNormalizationFilterFactory
argument_list|()
decl_stmt|;
name|HindiStemFilterFactory
name|stemFactory
init|=
operator|new
name|HindiStemFilterFactory
argument_list|()
decl_stmt|;
name|stemFactory
operator|.
name|setLuceneMatchVersion
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
name|factory
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|stemFactory
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|Tokenizer
name|tokenizer
init|=
name|factory
operator|.
name|create
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|TokenStream
name|stream
init|=
name|indicFilterFactory
operator|.
name|create
argument_list|(
name|tokenizer
argument_list|)
decl_stmt|;
name|stream
operator|=
name|hindiFilterFactory
operator|.
name|create
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|stream
operator|=
name|stemFactory
operator|.
name|create
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
name|stream
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"à¤à¤¿à¤¤à¤¾à¤¬"
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
