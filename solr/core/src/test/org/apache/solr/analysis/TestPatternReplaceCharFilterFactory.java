begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * Simple tests to ensure this factory is working  */
end_comment
begin_class
DECL|class|TestPatternReplaceCharFilterFactory
specifier|public
class|class
name|TestPatternReplaceCharFilterFactory
extends|extends
name|BaseTokenStreamTestCase
block|{
comment|//           1111
comment|// 01234567890123
comment|// this is test.
DECL|method|testNothingChange
specifier|public
name|void
name|testNothingChange
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|BLOCK
init|=
literal|"this is test."
decl_stmt|;
name|PatternReplaceCharFilterFactory
name|factory
init|=
operator|new
name|PatternReplaceCharFilterFactory
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"pattern"
argument_list|,
literal|"(aa)\\s+(bb)\\s+(cc)"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"replacement"
argument_list|,
literal|"$1$2$3"
argument_list|)
expr_stmt|;
name|factory
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|CharStream
name|cs
init|=
name|factory
operator|.
name|create
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|BLOCK
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|MockTokenizer
argument_list|(
name|cs
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"this"
block|,
literal|"is"
block|,
literal|"test."
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|5
block|,
literal|8
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|7
block|,
literal|13
block|}
argument_list|)
expr_stmt|;
block|}
comment|// 012345678
comment|// aa bb cc
DECL|method|testReplaceByEmpty
specifier|public
name|void
name|testReplaceByEmpty
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|BLOCK
init|=
literal|"aa bb cc"
decl_stmt|;
name|PatternReplaceCharFilterFactory
name|factory
init|=
operator|new
name|PatternReplaceCharFilterFactory
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"pattern"
argument_list|,
literal|"(aa)\\s+(bb)\\s+(cc)"
argument_list|)
expr_stmt|;
name|factory
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|CharStream
name|cs
init|=
name|factory
operator|.
name|create
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|BLOCK
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|MockTokenizer
argument_list|(
name|cs
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ts
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|ts
operator|.
name|incrementToken
argument_list|()
argument_list|)
expr_stmt|;
name|ts
operator|.
name|end
argument_list|()
expr_stmt|;
name|ts
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// 012345678
comment|// aa bb cc
comment|// aa#bb#cc
DECL|method|test1block1matchSameLength
specifier|public
name|void
name|test1block1matchSameLength
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|BLOCK
init|=
literal|"aa bb cc"
decl_stmt|;
name|PatternReplaceCharFilterFactory
name|factory
init|=
operator|new
name|PatternReplaceCharFilterFactory
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"pattern"
argument_list|,
literal|"(aa)\\s+(bb)\\s+(cc)"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"replacement"
argument_list|,
literal|"$1#$2#$3"
argument_list|)
expr_stmt|;
name|factory
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|CharStream
name|cs
init|=
name|factory
operator|.
name|create
argument_list|(
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
name|BLOCK
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|MockTokenizer
argument_list|(
name|cs
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"aa#bb#cc"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|8
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
