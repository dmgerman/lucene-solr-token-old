begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|InitializationException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_class
DECL|class|TestMappingCharFilterFactory
specifier|public
class|class
name|TestMappingCharFilterFactory
extends|extends
name|LuceneTestCase
block|{
DECL|method|testParseString
specifier|public
name|void
name|testParseString
parameter_list|()
throws|throws
name|Exception
block|{
name|MappingCharFilterFactory
name|f
init|=
operator|new
name|MappingCharFilterFactory
argument_list|()
decl_stmt|;
try|try
block|{
name|f
operator|.
name|parseString
argument_list|(
literal|"\\"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"escape character cannot be alone."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InitializationException
name|expected
parameter_list|)
block|{}
name|assertEquals
argument_list|(
literal|"unexpected escaped characters"
argument_list|,
literal|"\\\"\n\t\r\b\f"
argument_list|,
name|f
operator|.
name|parseString
argument_list|(
literal|"\\\\\\\"\\n\\t\\r\\b\\f"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected escaped characters"
argument_list|,
literal|"A"
argument_list|,
name|f
operator|.
name|parseString
argument_list|(
literal|"\\u0041"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected escaped characters"
argument_list|,
literal|"AB"
argument_list|,
name|f
operator|.
name|parseString
argument_list|(
literal|"\\u0041\\u0042"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|f
operator|.
name|parseString
argument_list|(
literal|"\\u000"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"invalid length check."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InitializationException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|f
operator|.
name|parseString
argument_list|(
literal|"\\u123x"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"invalid hex number check."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|expected
parameter_list|)
block|{}
block|}
block|}
end_class
end_unit
