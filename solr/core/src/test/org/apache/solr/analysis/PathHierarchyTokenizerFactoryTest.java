begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_class
DECL|class|PathHierarchyTokenizerFactoryTest
specifier|public
class|class
name|PathHierarchyTokenizerFactoryTest
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeTests
specifier|public
specifier|static
name|void
name|beforeTests
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"11"
argument_list|,
literal|"cat_path"
argument_list|,
literal|"Movies/Fic/War"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"31"
argument_list|,
literal|"cat_path"
argument_list|,
literal|"Books/Fic"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"31"
argument_list|,
literal|"cat_path"
argument_list|,
literal|"Books/Fic/Law"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"32"
argument_list|,
literal|"cat_path"
argument_list|,
literal|"Books/Fic/Science"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"40"
argument_list|,
literal|"cat_path"
argument_list|,
literal|"Books/NonFic"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"41"
argument_list|,
literal|"cat_path"
argument_list|,
literal|"Books/NonFic/Law"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"42"
argument_list|,
literal|"cat_path"
argument_list|,
literal|"Books/NonFic/Law"
argument_list|,
literal|"cat_path"
argument_list|,
literal|"Books/NonFic/Science"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"43"
argument_list|,
literal|"cat_path"
argument_list|,
literal|"Books/NonFic/Science/Physics"
argument_list|,
literal|"cat_path"
argument_list|,
literal|"Books/NonFic/History"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDescendents
specifier|public
name|void
name|testDescendents
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!field f=cat_path}Books/NonFic"
argument_list|)
argument_list|,
literal|"//*[@numFound='4']"
argument_list|,
literal|"//int[@name='id' and .='40']"
argument_list|,
literal|"//int[@name='id' and .='41']"
argument_list|,
literal|"//int[@name='id' and .='42']"
argument_list|,
literal|"//int[@name='id' and .='43']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!field f=cat_path}Books/NonFic/Law"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//int[@name='id' and .='41']"
argument_list|,
literal|"//int[@name='id' and .='42']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!field f=cat_path}Books/NonFic/Science"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//int[@name='id' and .='42']"
argument_list|,
literal|"//int[@name='id' and .='43']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testAncestors
specifier|public
name|void
name|testAncestors
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!field f=cat_ancestor}Books/NonFic/Science"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//int[@name='id' and .='40']"
argument_list|,
literal|"//int[@name='id' and .='42']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!field f=cat_ancestor}Books/NonFic/Law"
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//int[@name='id' and .='40']"
argument_list|,
literal|"//int[@name='id' and .='41']"
argument_list|,
literal|"//int[@name='id' and .='42']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!field f=cat_ancestor}Books/NonFic/Science/Physics"
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//int[@name='id' and .='40']"
argument_list|,
literal|"//int[@name='id' and .='42']"
argument_list|,
literal|"//int[@name='id' and .='43']"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
