begin_unit
begin_package
DECL|package|org.apache.solr.store.blockcache
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|store
operator|.
name|blockcache
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|BlockCacheTest
specifier|public
class|class
name|BlockCacheTest
extends|extends
name|LuceneTestCase
block|{
annotation|@
name|Test
DECL|method|testBlockCache
specifier|public
name|void
name|testBlockCache
parameter_list|()
block|{
name|int
name|blocksInTest
init|=
literal|2000000
decl_stmt|;
name|int
name|blockSize
init|=
literal|1024
decl_stmt|;
name|int
name|slabSize
init|=
name|blockSize
operator|*
literal|4096
decl_stmt|;
name|long
name|totalMemory
init|=
literal|2
operator|*
name|slabSize
decl_stmt|;
name|BlockCache
name|blockCache
init|=
operator|new
name|BlockCache
argument_list|(
operator|new
name|Metrics
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
name|totalMemory
argument_list|,
name|slabSize
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|Random
name|random
init|=
name|random
argument_list|()
decl_stmt|;
name|byte
index|[]
name|newData
init|=
operator|new
name|byte
index|[
name|blockSize
index|]
decl_stmt|;
name|AtomicLong
name|hitsInCache
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|AtomicLong
name|missesInCache
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|long
name|storeTime
init|=
literal|0
decl_stmt|;
name|long
name|fetchTime
init|=
literal|0
decl_stmt|;
name|int
name|passes
init|=
literal|10000
decl_stmt|;
name|BlockCacheKey
name|blockCacheKey
init|=
operator|new
name|BlockCacheKey
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|passes
condition|;
name|j
operator|++
control|)
block|{
name|long
name|block
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|blocksInTest
argument_list|)
decl_stmt|;
name|int
name|file
init|=
literal|0
decl_stmt|;
name|blockCacheKey
operator|.
name|setBlock
argument_list|(
name|block
argument_list|)
expr_stmt|;
name|blockCacheKey
operator|.
name|setFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|blockCache
operator|.
name|fetch
argument_list|(
name|blockCacheKey
argument_list|,
name|buffer
argument_list|)
condition|)
block|{
name|hitsInCache
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|missesInCache
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
name|testData
init|=
name|testData
argument_list|(
name|random
argument_list|,
name|blockSize
argument_list|,
name|newData
argument_list|)
decl_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|blockCache
operator|.
name|store
argument_list|(
name|blockCacheKey
argument_list|,
literal|0
argument_list|,
name|testData
argument_list|,
literal|0
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|storeTime
operator|+=
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|t1
operator|)
expr_stmt|;
name|long
name|t3
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|blockCache
operator|.
name|fetch
argument_list|(
name|blockCacheKey
argument_list|,
name|buffer
argument_list|)
condition|)
block|{
name|fetchTime
operator|+=
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|t3
operator|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|testData
argument_list|,
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Cache Hits    = "
operator|+
name|hitsInCache
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Cache Misses  = "
operator|+
name|missesInCache
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Store         = "
operator|+
operator|(
name|storeTime
operator|/
operator|(
name|double
operator|)
name|passes
operator|)
operator|/
literal|1000000.0
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Fetch         = "
operator|+
operator|(
name|fetchTime
operator|/
operator|(
name|double
operator|)
name|passes
operator|)
operator|/
literal|1000000.0
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"# of Elements = "
operator|+
name|blockCache
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify checking of buffer size limits against the cached block size.    */
annotation|@
name|Test
DECL|method|testLongBuffer
specifier|public
name|void
name|testLongBuffer
parameter_list|()
block|{
name|Random
name|random
init|=
name|random
argument_list|()
decl_stmt|;
name|int
name|blockSize
init|=
name|BlockCache
operator|.
name|_32K
decl_stmt|;
name|int
name|slabSize
init|=
name|blockSize
operator|*
literal|1024
decl_stmt|;
name|long
name|totalMemory
init|=
literal|2
operator|*
name|slabSize
decl_stmt|;
name|BlockCache
name|blockCache
init|=
operator|new
name|BlockCache
argument_list|(
operator|new
name|Metrics
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
name|totalMemory
argument_list|,
name|slabSize
argument_list|)
decl_stmt|;
name|BlockCacheKey
name|blockCacheKey
init|=
operator|new
name|BlockCacheKey
argument_list|()
decl_stmt|;
name|blockCacheKey
operator|.
name|setBlock
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|blockCacheKey
operator|.
name|setFile
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|byte
index|[]
name|newData
init|=
operator|new
name|byte
index|[
name|blockSize
operator|*
literal|3
index|]
decl_stmt|;
name|byte
index|[]
name|testData
init|=
name|testData
argument_list|(
name|random
argument_list|,
name|blockSize
argument_list|,
name|newData
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|blockCache
operator|.
name|store
argument_list|(
name|blockCacheKey
argument_list|,
literal|0
argument_list|,
name|testData
argument_list|,
literal|0
argument_list|,
name|blockSize
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|blockCache
operator|.
name|store
argument_list|(
name|blockCacheKey
argument_list|,
literal|0
argument_list|,
name|testData
argument_list|,
name|blockSize
argument_list|,
name|blockSize
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|blockCache
operator|.
name|store
argument_list|(
name|blockCacheKey
argument_list|,
literal|0
argument_list|,
name|testData
argument_list|,
name|blockSize
operator|*
literal|2
argument_list|,
name|blockSize
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|blockCache
operator|.
name|store
argument_list|(
name|blockCacheKey
argument_list|,
literal|1
argument_list|,
name|testData
argument_list|,
literal|0
argument_list|,
name|blockSize
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|blockCache
operator|.
name|store
argument_list|(
name|blockCacheKey
argument_list|,
literal|1
argument_list|,
name|testData
argument_list|,
name|blockSize
argument_list|,
name|blockSize
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|blockCache
operator|.
name|store
argument_list|(
name|blockCacheKey
argument_list|,
literal|1
argument_list|,
name|testData
argument_list|,
name|blockSize
operator|*
literal|2
argument_list|,
name|blockSize
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testData
specifier|private
specifier|static
name|byte
index|[]
name|testData
parameter_list|(
name|Random
name|random
parameter_list|,
name|int
name|size
parameter_list|,
name|byte
index|[]
name|buf
parameter_list|)
block|{
name|random
operator|.
name|nextBytes
argument_list|(
name|buf
argument_list|)
expr_stmt|;
return|return
name|buf
return|;
block|}
block|}
end_class
end_unit
