begin_unit
begin_package
DECL|package|org.apache.solr.rest.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|rest
operator|.
name|schema
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RestTestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RestTestHarness
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|JSONParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|ObjectBuilder
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_class
DECL|class|TestBulkSchemaAPI
specifier|public
class|class
name|TestBulkSchemaAPI
extends|extends
name|RestTestBase
block|{
DECL|field|tmpSolrHome
specifier|private
specifier|static
name|File
name|tmpSolrHome
decl_stmt|;
annotation|@
name|Before
DECL|method|before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|tmpSolrHome
operator|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|copyDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|TEST_HOME
argument_list|()
argument_list|)
argument_list|,
name|tmpSolrHome
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"managed.schema.mutable"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"enable.update.log"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|createJettyAndHarness
argument_list|(
name|tmpSolrHome
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"solrconfig-managed-schema.xml"
argument_list|,
literal|"schema-rest.xml"
argument_list|,
literal|"/solr"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|after
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|jetty
operator|!=
literal|null
condition|)
block|{
name|jetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|jetty
operator|=
literal|null
expr_stmt|;
block|}
name|client
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|restTestHarness
operator|!=
literal|null
condition|)
block|{
name|restTestHarness
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|restTestHarness
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|testMultipleAddFieldWithErrors
specifier|public
name|void
name|testMultipleAddFieldWithErrors
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|payload
init|=
literal|"{\n"
operator|+
literal|"    'add-field' : {\n"
operator|+
literal|"                 'name':'a1',\n"
operator|+
literal|"                 'type': 'string1',\n"
operator|+
literal|"                 'stored':true,\n"
operator|+
literal|"                 'indexed':false\n"
operator|+
literal|"                 },\n"
operator|+
literal|"    'add-field' : {\n"
operator|+
literal|"                 'type': 'string',\n"
operator|+
literal|"                 'stored':true,\n"
operator|+
literal|"                 'indexed':true\n"
operator|+
literal|"                 }\n"
operator|+
literal|"    }"
decl_stmt|;
name|String
name|response
init|=
name|restTestHarness
operator|.
name|post
argument_list|(
literal|"/schema?wt=json"
argument_list|,
name|json
argument_list|(
name|payload
argument_list|)
argument_list|)
decl_stmt|;
name|Map
name|map
init|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|getVal
argument_list|(
operator|new
name|JSONParser
argument_list|(
operator|new
name|StringReader
argument_list|(
name|response
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
name|l
init|=
operator|(
name|List
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"errors"
argument_list|)
decl_stmt|;
name|List
name|errorList
init|=
call|(
name|List
call|)
argument_list|(
operator|(
name|Map
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"errorMessages"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|errorList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|String
operator|)
name|errorList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|contains
argument_list|(
literal|"No such field type"
argument_list|)
argument_list|)
expr_stmt|;
name|errorList
operator|=
call|(
name|List
call|)
argument_list|(
operator|(
name|Map
operator|)
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"errorMessages"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|errorList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|String
operator|)
name|errorList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|contains
argument_list|(
literal|"is a required field"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultipleCommands
specifier|public
name|void
name|testMultipleCommands
parameter_list|()
throws|throws
name|Exception
block|{
name|RestTestHarness
name|harness
init|=
name|restTestHarness
decl_stmt|;
name|Map
name|m
init|=
name|getObj
argument_list|(
name|harness
argument_list|,
literal|"wdf_nocase"
argument_list|,
literal|"fields"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"'wdf_nocase' field does not exist in the schema"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|m
operator|=
name|getObj
argument_list|(
name|harness
argument_list|,
literal|"wdf_nocase"
argument_list|,
literal|"fieldTypes"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"'wdf_nocase' field type does not exist in the schema"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|m
operator|=
name|getObj
argument_list|(
name|harness
argument_list|,
literal|"boolean"
argument_list|,
literal|"fieldTypes"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"'boolean' field type does not exist in the schema"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|m
operator|.
name|get
argument_list|(
literal|"sortMissingFirst"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|Boolean
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"sortMissingLast"
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|=
name|getObj
argument_list|(
name|harness
argument_list|,
literal|"name"
argument_list|,
literal|"fields"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"'name' field does not exist in the schema"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nametext"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|=
name|getObj
argument_list|(
name|harness
argument_list|,
literal|"bind"
argument_list|,
literal|"fields"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"'bind' field does not exist in the schema"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"boolean"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|=
name|getObj
argument_list|(
name|harness
argument_list|,
literal|"attr_*"
argument_list|,
literal|"dynamicFields"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"'attr_*' dynamic field does not exist in the schema"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|List
name|l
init|=
name|getSourceCopyFields
argument_list|(
name|harness
argument_list|,
literal|"*_i"
argument_list|)
decl_stmt|;
name|Set
name|s
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"dest"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"dest"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|l
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"dest"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|l
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"dest"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|contains
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|contains
argument_list|(
literal|"*_s"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|payload
init|=
literal|"{\n"
operator|+
literal|"          'add-field' : {\n"
operator|+
literal|"                       'name':'a1',\n"
operator|+
literal|"                       'type': 'string',\n"
operator|+
literal|"                       'stored':true,\n"
operator|+
literal|"                       'indexed':false\n"
operator|+
literal|"                       },\n"
operator|+
literal|"          'add-field' : {\n"
operator|+
literal|"                       'name':'a2',\n"
operator|+
literal|"                       'type': 'string',\n"
operator|+
literal|"                       'stored':true,\n"
operator|+
literal|"                       'indexed':true\n"
operator|+
literal|"                       },\n"
operator|+
literal|"          'add-dynamic-field' : {\n"
operator|+
literal|"                       'name' :'*_lol',\n"
operator|+
literal|"                       'type':'string',\n"
operator|+
literal|"                       'stored':true,\n"
operator|+
literal|"                       'indexed':true\n"
operator|+
literal|"                       },\n"
operator|+
literal|"          'add-copy-field' : {\n"
operator|+
literal|"                       'source' :'a1',\n"
operator|+
literal|"                       'dest':['a2','hello_lol']\n"
operator|+
literal|"                       },\n"
operator|+
literal|"          'add-field-type' : {\n"
operator|+
literal|"                       'name' :'mystr',\n"
operator|+
literal|"                       'class' : 'solr.StrField',\n"
operator|+
literal|"                       'sortMissingLast':'true'\n"
operator|+
literal|"                       },\n"
operator|+
literal|"          'add-field-type' : {"
operator|+
literal|"                       'name' : 'myNewTxtField',\n"
operator|+
literal|"                       'class':'solr.TextField',\n"
operator|+
literal|"                       'positionIncrementGap':'100',\n"
operator|+
literal|"                       'analyzer' : {\n"
operator|+
literal|"                               'charFilters':[\n"
operator|+
literal|"                                          {\n"
operator|+
literal|"                                           'class':'solr.PatternReplaceCharFilterFactory',\n"
operator|+
literal|"                                           'replacement':'$1$1',\n"
operator|+
literal|"                                           'pattern':'([a-zA-Z])\\\\\\\\1+'\n"
operator|+
literal|"                                          }\n"
operator|+
literal|"                                         ],\n"
operator|+
literal|"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\n"
operator|+
literal|"                               'filters':[\n"
operator|+
literal|"                                          {\n"
operator|+
literal|"                                           'class':'solr.WordDelimiterFilterFactory',\n"
operator|+
literal|"                                           'preserveOriginal':'0'\n"
operator|+
literal|"                                          },\n"
operator|+
literal|"                                          {\n"
operator|+
literal|"                                           'class':'solr.StopFilterFactory',\n"
operator|+
literal|"                                           'words':'stopwords.txt',\n"
operator|+
literal|"                                           'ignoreCase':'true'\n"
operator|+
literal|"                                          },\n"
operator|+
literal|"                                          {'class':'solr.LowerCaseFilterFactory'},\n"
operator|+
literal|"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\n"
operator|+
literal|"                                          {'class':'solr.KStemFilterFactory'}\n"
operator|+
literal|"                                         ]\n"
operator|+
literal|"                               }\n"
operator|+
literal|"                       },\n"
operator|+
literal|"          'add-field' : {\n"
operator|+
literal|"                       'name':'a3',\n"
operator|+
literal|"                       'type': 'myNewTxtField',\n"
operator|+
literal|"                       'stored':true,\n"
operator|+
literal|"                       'indexed':true\n"
operator|+
literal|"                       },\n"
operator|+
literal|"          'delete-field' : {'name':'wdf_nocase'},\n"
operator|+
literal|"          'delete-field-type' : {'name':'wdf_nocase'},\n"
operator|+
literal|"          'delete-dynamic-field' : {'name':'*_tt'},\n"
operator|+
literal|"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\n"
operator|+
literal|"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\n"
operator|+
literal|"          'replace-field-type' : {\n"
operator|+
literal|"                       'name':'boolean',\n"
operator|+
literal|"                       'class':'solr.BoolField',\n"
operator|+
literal|"                       'sortMissingFirst':true\n"
operator|+
literal|"                       },\n"
operator|+
literal|"          'replace-field' : {\n"
operator|+
literal|"                       'name':'name',\n"
operator|+
literal|"                       'type':'string',\n"
operator|+
literal|"                       'indexed':true,\n"
operator|+
literal|"                       'stored':true\n"
operator|+
literal|"                       },\n"
operator|+
literal|"          'replace-dynamic-field' : {\n"
operator|+
literal|"                       'name':'attr_*',\n"
operator|+
literal|"                       'type':'string',\n"
operator|+
literal|"                       'indexed':true,\n"
operator|+
literal|"                       'stored':true,\n"
operator|+
literal|"                       'multiValued':true\n"
operator|+
literal|"                       }\n"
operator|+
literal|"          }\n"
decl_stmt|;
name|String
name|response
init|=
name|harness
operator|.
name|post
argument_list|(
literal|"/schema?wt=json"
argument_list|,
name|json
argument_list|(
name|payload
argument_list|)
argument_list|)
decl_stmt|;
name|Map
name|map
init|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|getVal
argument_list|(
operator|new
name|JSONParser
argument_list|(
operator|new
name|StringReader
argument_list|(
name|response
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|response
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"errors"
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|=
name|getObj
argument_list|(
name|harness
argument_list|,
literal|"a1"
argument_list|,
literal|"fields"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"field a1 not created"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"stored"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"indexed"
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|=
name|getObj
argument_list|(
name|harness
argument_list|,
literal|"a2"
argument_list|,
literal|"fields"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"field a2 not created"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"stored"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"indexed"
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|=
name|getObj
argument_list|(
name|harness
argument_list|,
literal|"*_lol"
argument_list|,
literal|"dynamicFields"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"field *_lol not created"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"stored"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"indexed"
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|=
name|getSourceCopyFields
argument_list|(
name|harness
argument_list|,
literal|"a1"
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"dest"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|contains
argument_list|(
literal|"hello_lol"
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|=
name|getSourceCopyFields
argument_list|(
name|harness
argument_list|,
literal|"*_i"
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"dest"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"dest"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|s
operator|.
name|contains
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|s
operator|.
name|contains
argument_list|(
literal|"*_s"
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|=
name|getObj
argument_list|(
name|harness
argument_list|,
literal|"mystr"
argument_list|,
literal|"fieldTypes"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"solr.StrField"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"class"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|m
operator|.
name|get
argument_list|(
literal|"sortMissingLast"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|=
name|getObj
argument_list|(
name|harness
argument_list|,
literal|"myNewTxtField"
argument_list|,
literal|"fieldTypes"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|=
name|getObj
argument_list|(
name|harness
argument_list|,
literal|"a3"
argument_list|,
literal|"fields"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"field a3 not created"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myNewTxtField"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|=
name|getObj
argument_list|(
name|harness
argument_list|,
literal|"wdf_nocase"
argument_list|,
literal|"fields"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"field 'wdf_nocase' not deleted"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|m
operator|=
name|getObj
argument_list|(
name|harness
argument_list|,
literal|"wdf_nocase"
argument_list|,
literal|"fieldTypes"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"field type 'wdf_nocase' not deleted"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|m
operator|=
name|getObj
argument_list|(
name|harness
argument_list|,
literal|"*_tt"
argument_list|,
literal|"dynamicFields"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"dynamic field '*_tt' not deleted"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|m
operator|=
name|getObj
argument_list|(
name|harness
argument_list|,
literal|"boolean"
argument_list|,
literal|"fieldTypes"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"'boolean' field type does not exist in the schema"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|m
operator|.
name|get
argument_list|(
literal|"sortMissingLast"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|Boolean
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"sortMissingFirst"
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|=
name|getObj
argument_list|(
name|harness
argument_list|,
literal|"bind"
argument_list|,
literal|"fields"
argument_list|)
expr_stmt|;
comment|// this field will be rebuilt when "boolean" field type is replaced
name|assertNotNull
argument_list|(
literal|"'bind' field does not exist in the schema"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|m
operator|=
name|getObj
argument_list|(
name|harness
argument_list|,
literal|"name"
argument_list|,
literal|"fields"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"'name' field does not exist in the schema"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|=
name|getObj
argument_list|(
name|harness
argument_list|,
literal|"attr_*"
argument_list|,
literal|"dynamicFields"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"'attr_*' dynamic field does not exist in the schema"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDeleteAndReplace
specifier|public
name|void
name|testDeleteAndReplace
parameter_list|()
throws|throws
name|Exception
block|{
name|RestTestHarness
name|harness
init|=
name|restTestHarness
decl_stmt|;
name|Map
name|map
init|=
name|getObj
argument_list|(
name|harness
argument_list|,
literal|"NewField1"
argument_list|,
literal|"fields"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Field 'NewField1' already exists in the schema"
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|map
operator|=
name|getObj
argument_list|(
name|harness
argument_list|,
literal|"NewField2"
argument_list|,
literal|"fields"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Field 'NewField2' already exists in the schema"
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|map
operator|=
name|getObj
argument_list|(
name|harness
argument_list|,
literal|"NewFieldType"
argument_list|,
literal|"fieldTypes"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"'NewFieldType' field type already exists in the schema"
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|List
name|list
init|=
name|getSourceCopyFields
argument_list|(
name|harness
argument_list|,
literal|"NewField1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"There is already a copy field with source 'NewField1' in the schema"
argument_list|,
literal|0
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|=
name|getObj
argument_list|(
name|harness
argument_list|,
literal|"NewDynamicField1*"
argument_list|,
literal|"dynamicFields"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Dynamic field 'NewDynamicField1*' already exists in the schema"
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|map
operator|=
name|getObj
argument_list|(
name|harness
argument_list|,
literal|"NewDynamicField2*"
argument_list|,
literal|"dynamicFields"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Dynamic field 'NewDynamicField2*' already exists in the schema"
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|String
name|cmds
init|=
literal|"{\n"
operator|+
literal|"     'add-field-type': {   'name':'NewFieldType',     'class':'solr.StrField'                    },\n"
operator|+
literal|"          'add-field': [{  'name':'NewField1',         'type':'NewFieldType'                    },\n"
operator|+
literal|"                        {  'name':'NewField2',         'type':'NewFieldType'                    },\n"
operator|+
literal|"                        {  'name':'NewField3',         'type':'NewFieldType'                    },\n"
operator|+
literal|"                        {  'name':'NewField4',         'type':'NewFieldType'                    }],\n"
operator|+
literal|"  'add-dynamic-field': [{  'name':'NewDynamicField1*', 'type':'NewFieldType'                    },\n"
operator|+
literal|"                        {  'name':'NewDynamicField2*', 'type':'NewFieldType'                    },\n"
operator|+
literal|"                        {  'name':'NewDynamicField3*', 'type':'NewFieldType'                    }],\n"
operator|+
literal|"     'add-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']},\n"
operator|+
literal|"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                       },\n"
operator|+
literal|"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                       },\n"
operator|+
literal|"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                       },\n"
operator|+
literal|"                        {'source':'NewField4',         'dest':'NewField3'                       },\n"
operator|+
literal|"                        {'source':'NewField4',         'dest':'NewField2', maxChars: 100        },\n"
operator|+
literal|"                        {'source':'NewField4',         'dest':['NewField1'], maxChars: 3333     }]\n"
operator|+
literal|"}\n"
decl_stmt|;
name|String
name|response
init|=
name|harness
operator|.
name|post
argument_list|(
literal|"/schema?wt=json"
argument_list|,
name|json
argument_list|(
name|cmds
argument_list|)
argument_list|)
decl_stmt|;
name|map
operator|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|getVal
argument_list|(
operator|new
name|JSONParser
argument_list|(
operator|new
name|StringReader
argument_list|(
name|response
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|response
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"errors"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
name|getObj
argument_list|(
name|harness
argument_list|,
literal|"NewFieldType"
argument_list|,
literal|"fieldTypes"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"'NewFieldType' is not in the schema"
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|map
operator|=
name|getObj
argument_list|(
name|harness
argument_list|,
literal|"NewField1"
argument_list|,
literal|"fields"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Field 'NewField1' is not in the schema"
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|map
operator|=
name|getObj
argument_list|(
name|harness
argument_list|,
literal|"NewField2"
argument_list|,
literal|"fields"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Field 'NewField2' is not in the schema"
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|map
operator|=
name|getObj
argument_list|(
name|harness
argument_list|,
literal|"NewField3"
argument_list|,
literal|"fields"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Field 'NewField3' is not in the schema"
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|map
operator|=
name|getObj
argument_list|(
name|harness
argument_list|,
literal|"NewField4"
argument_list|,
literal|"fields"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Field 'NewField4' is not in the schema"
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|list
operator|=
name|getSourceCopyFields
argument_list|(
name|harness
argument_list|,
literal|"NewField1"
argument_list|)
expr_stmt|;
name|Set
name|set
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|list
control|)
block|{
name|set
operator|.
name|add
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|obj
operator|)
operator|.
name|get
argument_list|(
literal|"dest"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|"NewField2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|"NewDynamicField1A"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|=
name|getSourceCopyFields
argument_list|(
name|harness
argument_list|,
literal|"NewDynamicField1*"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NewField2"
argument_list|,
operator|(
operator|(
name|Map
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"dest"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|=
name|getSourceCopyFields
argument_list|(
name|harness
argument_list|,
literal|"NewDynamicField2*"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NewField2"
argument_list|,
operator|(
operator|(
name|Map
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"dest"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|=
name|getSourceCopyFields
argument_list|(
name|harness
argument_list|,
literal|"NewDynamicField3*"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NewField3"
argument_list|,
operator|(
operator|(
name|Map
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"dest"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|=
name|getSourceCopyFields
argument_list|(
name|harness
argument_list|,
literal|"NewField4"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|list
control|)
block|{
name|map
operator|.
name|put
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|obj
operator|)
operator|.
name|get
argument_list|(
literal|"dest"
argument_list|)
argument_list|,
operator|(
operator|(
name|Map
operator|)
name|obj
operator|)
operator|.
name|get
argument_list|(
literal|"maxChars"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"NewField1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3333L
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"NewField1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"NewField2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100L
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"NewField2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"NewField3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"NewField3"
argument_list|)
argument_list|)
expr_stmt|;
name|cmds
operator|=
literal|"{'delete-field-type' : {'name':'NewFieldType'}}"
expr_stmt|;
name|response
operator|=
name|harness
operator|.
name|post
argument_list|(
literal|"/schema?wt=json"
argument_list|,
name|json
argument_list|(
name|cmds
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|getVal
argument_list|(
operator|new
name|JSONParser
argument_list|(
operator|new
name|StringReader
argument_list|(
name|response
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|errors
init|=
name|map
operator|.
name|get
argument_list|(
literal|"errors"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|errors
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|errors
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Can't delete 'NewFieldType' because it's the field type of "
argument_list|)
argument_list|)
expr_stmt|;
name|cmds
operator|=
literal|"{'delete-field' : {'name':'NewField1'}}"
expr_stmt|;
name|response
operator|=
name|harness
operator|.
name|post
argument_list|(
literal|"/schema?wt=json"
argument_list|,
name|json
argument_list|(
name|cmds
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|getVal
argument_list|(
operator|new
name|JSONParser
argument_list|(
operator|new
name|StringReader
argument_list|(
name|response
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|errors
operator|=
name|map
operator|.
name|get
argument_list|(
literal|"errors"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|errors
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|errors
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Can't delete field 'NewField1' because it's referred to by at least one copy field directive"
argument_list|)
argument_list|)
expr_stmt|;
name|cmds
operator|=
literal|"{'delete-field' : {'name':'NewField2'}}"
expr_stmt|;
name|response
operator|=
name|harness
operator|.
name|post
argument_list|(
literal|"/schema?wt=json"
argument_list|,
name|json
argument_list|(
name|cmds
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|getVal
argument_list|(
operator|new
name|JSONParser
argument_list|(
operator|new
name|StringReader
argument_list|(
name|response
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|errors
operator|=
name|map
operator|.
name|get
argument_list|(
literal|"errors"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|errors
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|errors
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Can't delete field 'NewField2' because it's referred to by at least one copy field directive"
argument_list|)
argument_list|)
expr_stmt|;
name|cmds
operator|=
literal|"{'replace-field' : {'name':'NewField1', 'type':'string'}}"
expr_stmt|;
name|response
operator|=
name|harness
operator|.
name|post
argument_list|(
literal|"/schema?wt=json"
argument_list|,
name|json
argument_list|(
name|cmds
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|getVal
argument_list|(
operator|new
name|JSONParser
argument_list|(
operator|new
name|StringReader
argument_list|(
name|response
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"errors"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure the copy field directives with source NewField1 are preserved
name|list
operator|=
name|getSourceCopyFields
argument_list|(
name|harness
argument_list|,
literal|"NewField1"
argument_list|)
expr_stmt|;
name|set
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|list
control|)
block|{
name|set
operator|.
name|add
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|obj
operator|)
operator|.
name|get
argument_list|(
literal|"dest"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|"NewField2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|"NewDynamicField1A"
argument_list|)
argument_list|)
expr_stmt|;
name|cmds
operator|=
literal|"{'delete-dynamic-field' : {'name':'NewDynamicField1*'}}"
expr_stmt|;
name|response
operator|=
name|harness
operator|.
name|post
argument_list|(
literal|"/schema?wt=json"
argument_list|,
name|json
argument_list|(
name|cmds
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|getVal
argument_list|(
operator|new
name|JSONParser
argument_list|(
operator|new
name|StringReader
argument_list|(
name|response
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|errors
operator|=
name|map
operator|.
name|get
argument_list|(
literal|"errors"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|errors
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|errors
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"copyField dest :'NewDynamicField1A' is not an explicit field and doesn't match a dynamicField."
argument_list|)
argument_list|)
expr_stmt|;
name|cmds
operator|=
literal|"{'replace-field' : {'name':'NewField2', 'type':'string'}}"
expr_stmt|;
name|response
operator|=
name|harness
operator|.
name|post
argument_list|(
literal|"/schema?wt=json"
argument_list|,
name|json
argument_list|(
name|cmds
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|getVal
argument_list|(
operator|new
name|JSONParser
argument_list|(
operator|new
name|StringReader
argument_list|(
name|response
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|errors
operator|=
name|map
operator|.
name|get
argument_list|(
literal|"errors"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|errors
argument_list|)
expr_stmt|;
comment|// Make sure the copy field directives with destination NewField2 are preserved
name|list
operator|=
name|getDestCopyFields
argument_list|(
name|harness
argument_list|,
literal|"NewField2"
argument_list|)
expr_stmt|;
name|set
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|list
control|)
block|{
name|set
operator|.
name|add
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|obj
operator|)
operator|.
name|get
argument_list|(
literal|"source"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|"NewField1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|"NewField4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|"NewDynamicField1*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|"NewDynamicField2*"
argument_list|)
argument_list|)
expr_stmt|;
name|cmds
operator|=
literal|"{'replace-dynamic-field' : {'name':'NewDynamicField2*', 'type':'string'}}"
expr_stmt|;
name|response
operator|=
name|harness
operator|.
name|post
argument_list|(
literal|"/schema?wt=json"
argument_list|,
name|json
argument_list|(
name|cmds
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|getVal
argument_list|(
operator|new
name|JSONParser
argument_list|(
operator|new
name|StringReader
argument_list|(
name|response
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|errors
operator|=
name|map
operator|.
name|get
argument_list|(
literal|"errors"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|errors
argument_list|)
expr_stmt|;
comment|// Make sure the copy field directives with source NewDynamicField2* are preserved
name|list
operator|=
name|getSourceCopyFields
argument_list|(
name|harness
argument_list|,
literal|"NewDynamicField2*"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NewField2"
argument_list|,
operator|(
operator|(
name|Map
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"dest"
argument_list|)
argument_list|)
expr_stmt|;
name|cmds
operator|=
literal|"{'replace-dynamic-field' : {'name':'NewDynamicField1*', 'type':'string'}}"
expr_stmt|;
name|response
operator|=
name|harness
operator|.
name|post
argument_list|(
literal|"/schema?wt=json"
argument_list|,
name|json
argument_list|(
name|cmds
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|getVal
argument_list|(
operator|new
name|JSONParser
argument_list|(
operator|new
name|StringReader
argument_list|(
name|response
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|errors
operator|=
name|map
operator|.
name|get
argument_list|(
literal|"errors"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|errors
argument_list|)
expr_stmt|;
comment|// Make sure the copy field directives with destinations matching NewDynamicField1* are preserved
name|list
operator|=
name|getDestCopyFields
argument_list|(
name|harness
argument_list|,
literal|"NewDynamicField1A"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NewField1"
argument_list|,
operator|(
operator|(
name|Map
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"source"
argument_list|)
argument_list|)
expr_stmt|;
name|cmds
operator|=
literal|"{'replace-field-type': {'name':'NewFieldType', 'class':'solr.BinaryField'}}"
expr_stmt|;
name|response
operator|=
name|harness
operator|.
name|post
argument_list|(
literal|"/schema?wt=json"
argument_list|,
name|json
argument_list|(
name|cmds
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|getVal
argument_list|(
operator|new
name|JSONParser
argument_list|(
operator|new
name|StringReader
argument_list|(
name|response
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"errors"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure the copy field directives with sources and destinations of type NewFieldType are preserved
name|list
operator|=
name|getDestCopyFields
argument_list|(
name|harness
argument_list|,
literal|"NewField3"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|list
control|)
block|{
name|set
operator|.
name|add
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|obj
operator|)
operator|.
name|get
argument_list|(
literal|"source"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|"NewField4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|"NewDynamicField3*"
argument_list|)
argument_list|)
expr_stmt|;
name|cmds
operator|=
literal|"{\n"
operator|+
literal|"  'delete-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']     },\n"
operator|+
literal|"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                            },\n"
operator|+
literal|"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                            },\n"
operator|+
literal|"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                            },\n"
operator|+
literal|"                        {'source':'NewField4',         'dest':['NewField1', 'NewField2', 'NewField3']}]\n"
operator|+
literal|"}\n"
expr_stmt|;
name|response
operator|=
name|harness
operator|.
name|post
argument_list|(
literal|"/schema?wt=json"
argument_list|,
name|json
argument_list|(
name|cmds
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|getVal
argument_list|(
operator|new
name|JSONParser
argument_list|(
operator|new
name|StringReader
argument_list|(
name|response
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"errors"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|=
name|getSourceCopyFields
argument_list|(
name|harness
argument_list|,
literal|"NewField1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|=
name|getSourceCopyFields
argument_list|(
name|harness
argument_list|,
literal|"NewDynamicField1*"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|=
name|getSourceCopyFields
argument_list|(
name|harness
argument_list|,
literal|"NewDynamicField2*"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|=
name|getSourceCopyFields
argument_list|(
name|harness
argument_list|,
literal|"NewDynamicField3*"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|=
name|getSourceCopyFields
argument_list|(
name|harness
argument_list|,
literal|"NewField4"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cmds
operator|=
literal|"{'delete-field': [{'name':'NewField1'},{'name':'NewField2'},{'name':'NewField3'},{'name':'NewField4'}]}"
expr_stmt|;
name|response
operator|=
name|harness
operator|.
name|post
argument_list|(
literal|"/schema?wt=json"
argument_list|,
name|json
argument_list|(
name|cmds
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|getVal
argument_list|(
operator|new
name|JSONParser
argument_list|(
operator|new
name|StringReader
argument_list|(
name|response
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"errors"
argument_list|)
argument_list|)
expr_stmt|;
name|cmds
operator|=
literal|"{'delete-dynamic-field': [{'name':'NewDynamicField1*'},"
operator|+
literal|"                             {'name':'NewDynamicField2*'},\n"
operator|+
literal|"                             {'name':'NewDynamicField3*'}]\n"
operator|+
literal|"}\n"
expr_stmt|;
name|response
operator|=
name|harness
operator|.
name|post
argument_list|(
literal|"/schema?wt=json"
argument_list|,
name|json
argument_list|(
name|cmds
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|getVal
argument_list|(
operator|new
name|JSONParser
argument_list|(
operator|new
name|StringReader
argument_list|(
name|response
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"errors"
argument_list|)
argument_list|)
expr_stmt|;
name|cmds
operator|=
literal|"{'delete-field-type':{'name':'NewFieldType'}}"
expr_stmt|;
name|response
operator|=
name|harness
operator|.
name|post
argument_list|(
literal|"/schema?wt=json"
argument_list|,
name|json
argument_list|(
name|cmds
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|getVal
argument_list|(
operator|new
name|JSONParser
argument_list|(
operator|new
name|StringReader
argument_list|(
name|response
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"errors"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getObj
specifier|public
specifier|static
name|Map
name|getObj
parameter_list|(
name|RestTestHarness
name|restHarness
parameter_list|,
name|String
name|fld
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
name|map
init|=
name|getRespMap
argument_list|(
name|restHarness
argument_list|)
decl_stmt|;
name|List
name|l
init|=
call|(
name|List
call|)
argument_list|(
operator|(
name|Map
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"schema"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|l
control|)
block|{
name|Map
name|m
init|=
operator|(
name|Map
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|fld
operator|.
name|equals
argument_list|(
name|m
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
condition|)
return|return
name|m
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getRespMap
specifier|public
specifier|static
name|Map
name|getRespMap
parameter_list|(
name|RestTestHarness
name|restHarness
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getAsMap
argument_list|(
literal|"/schema?wt=json"
argument_list|,
name|restHarness
argument_list|)
return|;
block|}
DECL|method|getAsMap
specifier|public
specifier|static
name|Map
name|getAsMap
parameter_list|(
name|String
name|uri
parameter_list|,
name|RestTestHarness
name|restHarness
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|response
init|=
name|restHarness
operator|.
name|query
argument_list|(
name|uri
argument_list|)
decl_stmt|;
return|return
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|getVal
argument_list|(
operator|new
name|JSONParser
argument_list|(
operator|new
name|StringReader
argument_list|(
name|response
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getSourceCopyFields
specifier|public
specifier|static
name|List
name|getSourceCopyFields
parameter_list|(
name|RestTestHarness
name|harness
parameter_list|,
name|String
name|src
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
name|map
init|=
name|getRespMap
argument_list|(
name|harness
argument_list|)
decl_stmt|;
name|List
name|l
init|=
call|(
name|List
call|)
argument_list|(
operator|(
name|Map
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"schema"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"copyFields"
argument_list|)
decl_stmt|;
name|List
name|result
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|l
control|)
block|{
name|Map
name|m
init|=
operator|(
name|Map
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|src
operator|.
name|equals
argument_list|(
name|m
operator|.
name|get
argument_list|(
literal|"source"
argument_list|)
argument_list|)
condition|)
name|result
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getDestCopyFields
specifier|public
specifier|static
name|List
name|getDestCopyFields
parameter_list|(
name|RestTestHarness
name|harness
parameter_list|,
name|String
name|dest
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
name|map
init|=
name|getRespMap
argument_list|(
name|harness
argument_list|)
decl_stmt|;
name|List
name|l
init|=
call|(
name|List
call|)
argument_list|(
operator|(
name|Map
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"schema"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"copyFields"
argument_list|)
decl_stmt|;
name|List
name|result
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|l
control|)
block|{
name|Map
name|m
init|=
operator|(
name|Map
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|dest
operator|.
name|equals
argument_list|(
name|m
operator|.
name|get
argument_list|(
literal|"dest"
argument_list|)
argument_list|)
condition|)
name|result
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class
end_unit
