begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.rest
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|rest
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|rest
operator|.
name|ManagedResourceStorage
operator|.
name|StorageIO
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|JSONParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|ObjectBuilder
import|;
end_import
begin_comment
comment|/**  * Tests {@link ManagedResource} functionality.  */
end_comment
begin_class
DECL|class|TestManagedResource
specifier|public
class|class
name|TestManagedResource
extends|extends
name|SolrTestCaseJ4
block|{
comment|/**    * Mock class that acts like an analysis component that depends on    * data managed by a ManagedResource    */
DECL|class|MockAnalysisComponent
specifier|private
class|class
name|MockAnalysisComponent
implements|implements
name|ManagedResourceObserver
block|{
DECL|field|wasNotified
specifier|private
name|boolean
name|wasNotified
init|=
literal|false
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|onManagedResourceInitialized
specifier|public
name|void
name|onManagedResourceInitialized
parameter_list|(
name|NamedList
argument_list|<
name|?
argument_list|>
name|args
parameter_list|,
name|ManagedResource
name|res
parameter_list|)
throws|throws
name|SolrException
block|{
name|assertEquals
argument_list|(
literal|"someVal"
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|"someArg"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|instanceof
name|ManagedTestResource
argument_list|)
expr_stmt|;
name|ManagedTestResource
name|testRes
init|=
operator|(
name|ManagedTestResource
operator|)
name|res
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|data
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|testRes
operator|.
name|managedData
decl_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|wasNotified
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|class|ManagedTestResource
specifier|private
class|class
name|ManagedTestResource
extends|extends
name|ManagedResource
block|{
DECL|field|managedData
specifier|private
name|Object
name|managedData
decl_stmt|;
DECL|method|ManagedTestResource
specifier|private
name|ManagedTestResource
parameter_list|(
name|String
name|resourceId
parameter_list|,
name|SolrResourceLoader
name|loader
parameter_list|,
name|StorageIO
name|storageIO
parameter_list|)
throws|throws
name|SolrException
block|{
name|super
argument_list|(
name|resourceId
argument_list|,
name|loader
argument_list|,
name|storageIO
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onManagedDataLoadedFromStorage
specifier|protected
name|void
name|onManagedDataLoadedFromStorage
parameter_list|(
name|NamedList
argument_list|<
name|?
argument_list|>
name|managedInitArgs
parameter_list|,
name|Object
name|managedData
parameter_list|)
throws|throws
name|SolrException
block|{
name|assertNotNull
argument_list|(
name|managedData
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|managedData
operator|instanceof
name|List
argument_list|)
expr_stmt|;
comment|// {'initArgs':{'someArg':'someVal', 'arg2':true, 'arg3':['one','two','three'],
comment|//              'arg4':18, 'arg5':0.9, 'arg6':{ 'uno':1, 'dos':2 }},'"
name|assertEquals
argument_list|(
literal|"someVal"
argument_list|,
name|managedInitArgs
operator|.
name|get
argument_list|(
literal|"someArg"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|managedInitArgs
operator|.
name|get
argument_list|(
literal|"arg2"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|arg3List
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"one"
argument_list|,
literal|"two"
argument_list|,
literal|"three"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|arg3List
argument_list|,
name|managedInitArgs
operator|.
name|get
argument_list|(
literal|"arg3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|18L
argument_list|,
name|managedInitArgs
operator|.
name|get
argument_list|(
literal|"arg4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.9
argument_list|,
name|managedInitArgs
operator|.
name|get
argument_list|(
literal|"arg5"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|arg6map
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|arg6map
operator|.
name|put
argument_list|(
literal|"uno"
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|arg6map
operator|.
name|put
argument_list|(
literal|"dos"
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|arg6map
argument_list|,
name|managedInitArgs
operator|.
name|get
argument_list|(
literal|"arg6"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|managedData
operator|=
name|managedData
expr_stmt|;
block|}
comment|// NOTE: These methods are better tested from the REST API
comment|// so they are stubbed out here and not used in this test
annotation|@
name|Override
DECL|method|applyUpdatesToManagedData
specifier|protected
name|Object
name|applyUpdatesToManagedData
parameter_list|(
name|Object
name|updates
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|doDeleteChild
specifier|public
name|void
name|doDeleteChild
parameter_list|(
name|BaseSolrResource
name|endpoint
parameter_list|,
name|String
name|childId
parameter_list|)
block|{}
annotation|@
name|Override
DECL|method|doGet
specifier|public
name|void
name|doGet
parameter_list|(
name|BaseSolrResource
name|endpoint
parameter_list|,
name|String
name|childId
parameter_list|)
block|{}
block|}
comment|/**    * Implements a Java serialization based storage format.    */
DECL|class|SerializableStorage
specifier|private
class|class
name|SerializableStorage
extends|extends
name|ManagedResourceStorage
block|{
DECL|method|SerializableStorage
name|SerializableStorage
parameter_list|(
name|StorageIO
name|storageIO
parameter_list|,
name|SolrResourceLoader
name|loader
parameter_list|)
block|{
name|super
argument_list|(
name|storageIO
argument_list|,
name|loader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|load
specifier|public
name|Object
name|load
parameter_list|(
name|String
name|resourceId
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|storedId
init|=
name|getStoredResourceId
argument_list|(
name|resourceId
argument_list|)
decl_stmt|;
name|InputStream
name|inputStream
init|=
name|storageIO
operator|.
name|openInputStream
argument_list|(
name|storedId
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputStream
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Object
name|serialized
init|=
literal|null
decl_stmt|;
name|ObjectInputStream
name|ois
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ois
operator|=
operator|new
name|ObjectInputStream
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
name|serialized
operator|=
name|ois
operator|.
name|readObject
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// unlikely
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|ois
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ois
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{}
block|}
block|}
return|return
name|serialized
return|;
block|}
annotation|@
name|Override
DECL|method|store
specifier|public
name|void
name|store
parameter_list|(
name|String
name|resourceId
parameter_list|,
name|Object
name|toStore
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
name|toStore
operator|instanceof
name|Serializable
operator|)
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Instance of "
operator|+
name|toStore
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" is not Serializable!"
argument_list|)
throw|;
name|String
name|storedId
init|=
name|getStoredResourceId
argument_list|(
name|resourceId
argument_list|)
decl_stmt|;
name|ObjectOutputStream
name|oos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|oos
operator|=
operator|new
name|ObjectOutputStream
argument_list|(
name|storageIO
operator|.
name|openOutputStream
argument_list|(
name|storedId
argument_list|)
argument_list|)
expr_stmt|;
name|oos
operator|.
name|writeObject
argument_list|(
name|toStore
argument_list|)
expr_stmt|;
name|oos
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|oos
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|oos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getStoredResourceId
specifier|public
name|String
name|getStoredResourceId
parameter_list|(
name|String
name|resourceId
parameter_list|)
block|{
return|return
name|resourceId
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'_'
argument_list|)
operator|+
literal|".bin"
return|;
block|}
block|}
DECL|class|CustomStorageFormatResource
specifier|private
class|class
name|CustomStorageFormatResource
extends|extends
name|ManagedTestResource
block|{
DECL|method|CustomStorageFormatResource
specifier|private
name|CustomStorageFormatResource
parameter_list|(
name|String
name|resourceId
parameter_list|,
name|SolrResourceLoader
name|loader
parameter_list|,
name|StorageIO
name|storageIO
parameter_list|)
throws|throws
name|SolrException
block|{
name|super
argument_list|(
name|resourceId
argument_list|,
name|loader
argument_list|,
name|storageIO
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createStorage
specifier|protected
name|ManagedResourceStorage
name|createStorage
parameter_list|(
name|StorageIO
name|storageIO
parameter_list|,
name|SolrResourceLoader
name|loader
parameter_list|)
throws|throws
name|SolrException
block|{
return|return
operator|new
name|SerializableStorage
argument_list|(
name|storageIO
argument_list|,
name|loader
argument_list|)
return|;
block|}
block|}
comment|/**    * Tests managed data storage to and loading from {@link ManagedResourceStorage.InMemoryStorageIO}.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|testLoadingAndStoringOfManagedData
specifier|public
name|void
name|testLoadingAndStoringOfManagedData
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|resourceId
init|=
literal|"/config/test/foo"
decl_stmt|;
name|String
name|storedResourceId
init|=
literal|"_config_test_foo.json"
decl_stmt|;
name|MockAnalysisComponent
name|observer
init|=
operator|new
name|MockAnalysisComponent
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ManagedResourceObserver
argument_list|>
name|observers
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|ManagedResourceObserver
operator|)
name|observer
argument_list|)
decl_stmt|;
comment|// put some data in the storage impl so that we can test
comment|// initialization of managed data from storage
name|String
name|storedJson
init|=
literal|"{'initArgs':{'someArg':'someVal', 'arg2':true, 'arg3':['one','two','three'],"
operator|+
literal|" 'arg4':18, 'arg5':0.9, 'arg6':{ 'uno':1, 'dos':2}},'"
operator|+
name|ManagedResource
operator|.
name|MANAGED_JSON_LIST_FIELD
operator|+
literal|"':['1','2','3']}"
decl_stmt|;
name|ManagedResourceStorage
operator|.
name|InMemoryStorageIO
name|storageIO
init|=
operator|new
name|ManagedResourceStorage
operator|.
name|InMemoryStorageIO
argument_list|()
decl_stmt|;
name|storageIO
operator|.
name|storage
operator|.
name|put
argument_list|(
name|storedResourceId
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|json
argument_list|(
name|storedJson
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ManagedTestResource
name|res
init|=
operator|new
name|ManagedTestResource
argument_list|(
name|resourceId
argument_list|,
operator|new
name|SolrResourceLoader
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"./"
argument_list|)
argument_list|)
argument_list|,
name|storageIO
argument_list|)
decl_stmt|;
name|res
operator|.
name|loadManagedDataAndNotify
argument_list|(
name|observers
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Observer was not notified by ManagedResource!"
argument_list|,
name|observer
operator|.
name|wasNotified
argument_list|)
expr_stmt|;
comment|// now update the managed data (as if it came from the REST API)
name|List
argument_list|<
name|String
argument_list|>
name|updatedData
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|updatedData
operator|.
name|add
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|updatedData
operator|.
name|add
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|updatedData
operator|.
name|add
argument_list|(
literal|"3"
argument_list|)
expr_stmt|;
name|updatedData
operator|.
name|add
argument_list|(
literal|"4"
argument_list|)
expr_stmt|;
name|res
operator|.
name|storeManagedData
argument_list|(
name|updatedData
argument_list|)
expr_stmt|;
name|StringReader
name|stringReader
init|=
operator|new
name|StringReader
argument_list|(
name|storageIO
operator|.
name|storage
operator|.
name|get
argument_list|(
name|storedResourceId
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jsonObject
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|ObjectBuilder
operator|.
name|getVal
argument_list|(
operator|new
name|JSONParser
argument_list|(
name|stringReader
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|jsonList
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|jsonObject
operator|.
name|get
argument_list|(
name|ManagedResource
operator|.
name|MANAGED_JSON_LIST_FIELD
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Managed data was not updated correctly!"
argument_list|,
name|jsonList
operator|.
name|contains
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * The ManagedResource storage framework allows the end developer to use a different    * storage format other than JSON, as demonstrated by this test.     */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Test
DECL|method|testCustomStorageFormat
specifier|public
name|void
name|testCustomStorageFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|resourceId
init|=
literal|"/schema/test/foo"
decl_stmt|;
name|String
name|storedResourceId
init|=
literal|"_schema_test_foo.bin"
decl_stmt|;
name|MockAnalysisComponent
name|observer
init|=
operator|new
name|MockAnalysisComponent
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ManagedResourceObserver
argument_list|>
name|observers
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|ManagedResourceObserver
operator|)
name|observer
argument_list|)
decl_stmt|;
comment|// put some data in the storage impl so that we can test
comment|// initialization of managed data from storage
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|storedData
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|initArgs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// {'initArgs':{'someArg':'someVal', 'arg2':true, 'arg3':['one','two','three'],
comment|//              'arg4':18, 'arg5':0.9, 'arg6':{ 'uno':1, 'dos':2 }},'"
name|initArgs
operator|.
name|put
argument_list|(
literal|"someArg"
argument_list|,
literal|"someVal"
argument_list|)
expr_stmt|;
name|initArgs
operator|.
name|put
argument_list|(
literal|"arg2"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|arg3list
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"one"
argument_list|,
literal|"two"
argument_list|,
literal|"three"
argument_list|)
decl_stmt|;
name|initArgs
operator|.
name|put
argument_list|(
literal|"arg3"
argument_list|,
name|arg3list
argument_list|)
expr_stmt|;
name|initArgs
operator|.
name|put
argument_list|(
literal|"arg4"
argument_list|,
literal|18L
argument_list|)
expr_stmt|;
name|initArgs
operator|.
name|put
argument_list|(
literal|"arg5"
argument_list|,
literal|0.9
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|arg6map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|arg6map
operator|.
name|put
argument_list|(
literal|"uno"
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|arg6map
operator|.
name|put
argument_list|(
literal|"dos"
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|initArgs
operator|.
name|put
argument_list|(
literal|"arg6"
argument_list|,
name|arg6map
argument_list|)
expr_stmt|;
name|storedData
operator|.
name|put
argument_list|(
literal|"initArgs"
argument_list|,
name|initArgs
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|managedList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|managedList
operator|.
name|add
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|managedList
operator|.
name|add
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|managedList
operator|.
name|add
argument_list|(
literal|"3"
argument_list|)
expr_stmt|;
name|storedData
operator|.
name|put
argument_list|(
name|ManagedResource
operator|.
name|MANAGED_JSON_LIST_FIELD
argument_list|,
name|managedList
argument_list|)
expr_stmt|;
name|ManagedResourceStorage
operator|.
name|InMemoryStorageIO
name|storageIO
init|=
operator|new
name|ManagedResourceStorage
operator|.
name|InMemoryStorageIO
argument_list|()
decl_stmt|;
name|storageIO
operator|.
name|storage
operator|.
name|put
argument_list|(
name|storedResourceId
argument_list|,
name|ser2bytes
argument_list|(
operator|(
name|Serializable
operator|)
name|storedData
argument_list|)
argument_list|)
expr_stmt|;
name|CustomStorageFormatResource
name|res
init|=
operator|new
name|CustomStorageFormatResource
argument_list|(
name|resourceId
argument_list|,
operator|new
name|SolrResourceLoader
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"./"
argument_list|)
argument_list|)
argument_list|,
name|storageIO
argument_list|)
decl_stmt|;
name|res
operator|.
name|loadManagedDataAndNotify
argument_list|(
name|observers
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Observer was not notified by ManagedResource!"
argument_list|,
name|observer
operator|.
name|wasNotified
argument_list|)
expr_stmt|;
comment|// now store some data (as if it came from the REST API)
name|List
argument_list|<
name|String
argument_list|>
name|updatedData
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|updatedData
operator|.
name|add
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|updatedData
operator|.
name|add
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|updatedData
operator|.
name|add
argument_list|(
literal|"3"
argument_list|)
expr_stmt|;
name|updatedData
operator|.
name|add
argument_list|(
literal|"4"
argument_list|)
expr_stmt|;
name|res
operator|.
name|storeManagedData
argument_list|(
name|updatedData
argument_list|)
expr_stmt|;
name|Object
name|stored
init|=
name|res
operator|.
name|storage
operator|.
name|load
argument_list|(
name|resourceId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|stored
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stored
operator|instanceof
name|Map
argument_list|)
expr_stmt|;
name|Map
name|storedMap
init|=
operator|(
name|Map
operator|)
name|stored
decl_stmt|;
name|assertNotNull
argument_list|(
name|storedMap
operator|.
name|get
argument_list|(
literal|"initArgs"
argument_list|)
argument_list|)
expr_stmt|;
name|List
name|storedList
init|=
operator|(
name|List
operator|)
name|storedMap
operator|.
name|get
argument_list|(
name|ManagedResource
operator|.
name|MANAGED_JSON_LIST_FIELD
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|storedList
operator|.
name|contains
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Converts the given Serializable object to bytes    */
DECL|method|ser2bytes
specifier|private
name|BytesRef
name|ser2bytes
parameter_list|(
name|Serializable
name|ser
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ObjectOutputStream
name|oos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|oos
operator|=
operator|new
name|ObjectOutputStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|oos
operator|.
name|writeObject
argument_list|(
name|ser
argument_list|)
expr_stmt|;
name|oos
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|oos
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|oos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{}
block|}
block|}
return|return
operator|new
name|BytesRef
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class
end_unit
