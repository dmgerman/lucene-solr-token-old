begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.rest
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|rest
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|AwaitsFix
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractZkTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|rest
operator|.
name|ManagedResourceStorage
operator|.
name|FileStorageIO
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|rest
operator|.
name|ManagedResourceStorage
operator|.
name|JsonStorage
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|rest
operator|.
name|ManagedResourceStorage
operator|.
name|StorageIO
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|rest
operator|.
name|ManagedResourceStorage
operator|.
name|ZooKeeperStorageIO
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/**  * Depends on ZK for testing ZooKeeper backed storage logic.  */
end_comment
begin_class
annotation|@
name|Slow
annotation|@
name|AwaitsFix
argument_list|(
name|bugUrl
operator|=
literal|"https://issues.apache.org/jira/browse/SOLR-6444"
argument_list|)
DECL|class|TestManagedResourceStorage
specifier|public
class|class
name|TestManagedResourceStorage
extends|extends
name|AbstractZkTestCase
block|{
comment|/**    * Runs persisted managed resource creation and update tests on Zookeeper storage.    */
annotation|@
name|Test
DECL|method|testZkBasedJsonStorage
specifier|public
name|void
name|testZkBasedJsonStorage
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test using ZooKeeper
name|assertTrue
argument_list|(
literal|"Not using ZooKeeper"
argument_list|,
name|h
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|isZooKeeperAware
argument_list|()
argument_list|)
expr_stmt|;
name|SolrZkClient
name|zkClient
init|=
name|h
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkClient
argument_list|()
decl_stmt|;
name|SolrResourceLoader
name|loader
init|=
operator|new
name|SolrResourceLoader
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"./"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Solr unit tests can only write to their working directory due to
comment|// a custom Java Security Manager installed in the test environment
name|NamedList
argument_list|<
name|String
argument_list|>
name|initArgs
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|ZooKeeperStorageIO
name|zkStorageIO
init|=
operator|new
name|ZooKeeperStorageIO
argument_list|(
name|zkClient
argument_list|,
literal|"/test"
argument_list|)
decl_stmt|;
name|zkStorageIO
operator|.
name|configure
argument_list|(
name|loader
argument_list|,
name|initArgs
argument_list|)
expr_stmt|;
name|doStorageTests
argument_list|(
name|loader
argument_list|,
name|zkStorageIO
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|loader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Runs persisted managed resource creation and update tests on JSON storage.    */
annotation|@
name|Test
DECL|method|testFileBasedJsonStorage
specifier|public
name|void
name|testFileBasedJsonStorage
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|instanceDir
init|=
name|createTempDir
argument_list|(
literal|"json-storage"
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|SolrResourceLoader
name|loader
init|=
operator|new
name|SolrResourceLoader
argument_list|(
name|instanceDir
operator|.
name|toPath
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|NamedList
argument_list|<
name|String
argument_list|>
name|initArgs
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|managedDir
init|=
name|instanceDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"managed"
decl_stmt|;
name|initArgs
operator|.
name|add
argument_list|(
name|ManagedResourceStorage
operator|.
name|STORAGE_DIR_INIT_ARG
argument_list|,
name|managedDir
argument_list|)
expr_stmt|;
name|FileStorageIO
name|fileStorageIO
init|=
operator|new
name|FileStorageIO
argument_list|()
decl_stmt|;
name|fileStorageIO
operator|.
name|configure
argument_list|(
name|loader
argument_list|,
name|initArgs
argument_list|)
expr_stmt|;
name|doStorageTests
argument_list|(
name|loader
argument_list|,
name|fileStorageIO
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|loader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Called from tests for each storage type to run creation and update tests    * on a persisted managed resource.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|doStorageTests
specifier|private
name|void
name|doStorageTests
parameter_list|(
name|SolrResourceLoader
name|loader
parameter_list|,
name|StorageIO
name|storageIO
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|resourceId
init|=
literal|"/test/foo"
decl_stmt|;
name|JsonStorage
name|jsonStorage
init|=
operator|new
name|JsonStorage
argument_list|(
name|storageIO
argument_list|,
name|loader
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|managedInitArgs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|managedInitArgs
operator|.
name|put
argument_list|(
literal|"ignoreCase"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|managedInitArgs
operator|.
name|put
argument_list|(
literal|"dontIgnoreCase"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|managedList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// we need a mutable List for this test
name|managedList
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|toStore
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|toStore
operator|.
name|put
argument_list|(
name|ManagedResource
operator|.
name|INIT_ARGS_JSON_FIELD
argument_list|,
name|managedInitArgs
argument_list|)
expr_stmt|;
name|toStore
operator|.
name|put
argument_list|(
name|ManagedResource
operator|.
name|MANAGED_JSON_LIST_FIELD
argument_list|,
name|managedList
argument_list|)
expr_stmt|;
name|jsonStorage
operator|.
name|store
argument_list|(
name|resourceId
argument_list|,
name|toStore
argument_list|)
expr_stmt|;
name|String
name|storedResourceId
init|=
name|jsonStorage
operator|.
name|getStoredResourceId
argument_list|(
name|resourceId
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|storedResourceId
operator|+
literal|" file not found!"
argument_list|,
name|storageIO
operator|.
name|exists
argument_list|(
name|storedResourceId
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|fromStorage
init|=
name|jsonStorage
operator|.
name|load
argument_list|(
name|resourceId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|fromStorage
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|storedMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|fromStorage
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|storedArgs
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|storedMap
operator|.
name|get
argument_list|(
name|ManagedResource
operator|.
name|INIT_ARGS_JSON_FIELD
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|storedArgs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|storedArgs
operator|.
name|get
argument_list|(
literal|"ignoreCase"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|storedList
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|storedMap
operator|.
name|get
argument_list|(
name|ManagedResource
operator|.
name|MANAGED_JSON_LIST_FIELD
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|storedList
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|storedList
operator|.
name|size
argument_list|()
operator|==
name|managedList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|storedList
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
comment|// now verify you can update existing data
name|managedInitArgs
operator|.
name|put
argument_list|(
literal|"anotherArg"
argument_list|,
literal|"someValue"
argument_list|)
expr_stmt|;
name|managedList
operator|.
name|add
argument_list|(
literal|"f"
argument_list|)
expr_stmt|;
name|jsonStorage
operator|.
name|store
argument_list|(
name|resourceId
argument_list|,
name|toStore
argument_list|)
expr_stmt|;
name|fromStorage
operator|=
name|jsonStorage
operator|.
name|load
argument_list|(
name|resourceId
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|fromStorage
argument_list|)
expr_stmt|;
name|storedMap
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|fromStorage
expr_stmt|;
name|storedArgs
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|storedMap
operator|.
name|get
argument_list|(
name|ManagedResource
operator|.
name|INIT_ARGS_JSON_FIELD
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|storedArgs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"someValue"
argument_list|,
name|storedArgs
operator|.
name|get
argument_list|(
literal|"anotherArg"
argument_list|)
argument_list|)
expr_stmt|;
name|storedList
operator|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|storedMap
operator|.
name|get
argument_list|(
name|ManagedResource
operator|.
name|MANAGED_JSON_LIST_FIELD
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|storedList
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|storedList
operator|.
name|size
argument_list|()
operator|==
name|managedList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|storedList
operator|.
name|contains
argument_list|(
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
