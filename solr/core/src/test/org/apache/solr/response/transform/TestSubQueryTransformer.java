begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.response.transform
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|transform
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|ByteArrayOutputStream
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|JavaBinCodec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|BinaryQueryResponseWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|TestSubQueryTransformer
specifier|public
class|class
name|TestSubQueryTransformer
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|peopleMultiplier
specifier|private
specifier|static
name|int
name|peopleMultiplier
decl_stmt|;
DECL|field|deptMultiplier
specifier|private
specifier|static
name|int
name|deptMultiplier
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeTests
specifier|public
specifier|static
name|void
name|beforeTests
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"enable.update.log"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|initCore
argument_list|(
literal|"solrconfig-basic.xml"
argument_list|,
literal|"schema-docValuesJoin.xml"
argument_list|)
expr_stmt|;
name|peopleMultiplier
operator|=
name|atLeast
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|deptMultiplier
operator|=
name|atLeast
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|peopleMultiplier
condition|;
name|p
operator|++
control|)
block|{
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|id
operator|++
argument_list|,
literal|"name_s"
argument_list|,
literal|"john"
argument_list|,
literal|"title_s"
argument_list|,
literal|"Director"
argument_list|,
literal|"dept_ss_dv"
argument_list|,
literal|"Engineering"
argument_list|,
literal|"dept_i"
argument_list|,
literal|"0"
argument_list|,
literal|"dept_is"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|id
operator|++
argument_list|,
literal|"name_s"
argument_list|,
literal|"mark"
argument_list|,
literal|"title_s"
argument_list|,
literal|"VP"
argument_list|,
literal|"dept_ss_dv"
argument_list|,
literal|"Marketing"
argument_list|,
literal|"dept_i"
argument_list|,
literal|"1"
argument_list|,
literal|"dept_is"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|id
operator|++
argument_list|,
literal|"name_s"
argument_list|,
literal|"nancy"
argument_list|,
literal|"title_s"
argument_list|,
literal|"MTS"
argument_list|,
literal|"dept_ss_dv"
argument_list|,
literal|"Sales"
argument_list|,
literal|"dept_i"
argument_list|,
literal|"2"
argument_list|,
literal|"dept_is"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|id
operator|++
argument_list|,
literal|"name_s"
argument_list|,
literal|"dave"
argument_list|,
literal|"title_s"
argument_list|,
literal|"MTS"
argument_list|,
literal|"dept_ss_dv"
argument_list|,
literal|"Support"
argument_list|,
literal|"dept_ss_dv"
argument_list|,
literal|"Engineering"
argument_list|,
literal|"dept_i"
argument_list|,
literal|"3"
argument_list|,
literal|"dept_is"
argument_list|,
literal|"3"
argument_list|,
literal|"dept_is"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|id
operator|++
argument_list|,
literal|"name_s"
argument_list|,
literal|"tina"
argument_list|,
literal|"title_s"
argument_list|,
literal|"VP"
argument_list|,
literal|"dept_ss_dv"
argument_list|,
literal|"Engineering"
argument_list|,
literal|"dept_i"
argument_list|,
literal|"0"
argument_list|,
literal|"dept_is"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|assertU
argument_list|(
name|commit
argument_list|(
literal|"softCommit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|deptMultiplier
condition|;
name|d
operator|++
control|)
block|{
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|id
argument_list|,
literal|"id_i"
argument_list|,
literal|""
operator|+
name|id
operator|++
argument_list|,
literal|"dept_id_s"
argument_list|,
literal|"Engineering"
argument_list|,
literal|"text_t"
argument_list|,
literal|"These guys develop stuff"
argument_list|,
literal|"salary_i_dv"
argument_list|,
literal|"1000"
argument_list|,
literal|"dept_id_i"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|id
operator|++
argument_list|,
literal|"id_i"
argument_list|,
literal|""
operator|+
name|id
operator|++
argument_list|,
literal|"dept_id_s"
argument_list|,
literal|"Marketing"
argument_list|,
literal|"text_t"
argument_list|,
literal|"These guys make you look good"
argument_list|,
literal|"salary_i_dv"
argument_list|,
literal|"1500"
argument_list|,
literal|"dept_id_i"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|id
argument_list|,
literal|"id_i"
argument_list|,
literal|""
operator|+
name|id
operator|++
argument_list|,
literal|"dept_id_s"
argument_list|,
literal|"Sales"
argument_list|,
literal|"text_t"
argument_list|,
literal|"These guys sell stuff"
argument_list|,
literal|"salary_i_dv"
argument_list|,
literal|"1600"
argument_list|,
literal|"dept_id_i"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|id
argument_list|,
literal|"id_i"
argument_list|,
literal|""
operator|+
name|id
operator|++
argument_list|,
literal|"dept_id_s"
argument_list|,
literal|"Support"
argument_list|,
literal|"text_t"
argument_list|,
literal|"These guys help customers"
argument_list|,
literal|"salary_i_dv"
argument_list|,
literal|"800"
argument_list|,
literal|"dept_id_i"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|assertU
argument_list|(
name|commit
argument_list|(
literal|"softCommit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJohnOrNancySingleField
specifier|public
name|void
name|testJohnOrNancySingleField
parameter_list|()
throws|throws
name|Exception
block|{
comment|//System.out.println("p "+peopleMultiplier+" d "+deptMultiplier);
name|assertQ
argument_list|(
literal|"subq1.fl is limited to single field"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"name_s:(john nancy)"
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"fl"
argument_list|,
literal|"name_s_dv,depts:[subquery]"
argument_list|,
literal|"rows"
argument_list|,
literal|""
operator|+
operator|(
literal|2
operator|*
name|peopleMultiplier
operator|)
argument_list|,
literal|"depts.q"
argument_list|,
literal|"{!term f=dept_id_s v=$row.dept_ss_dv}"
argument_list|,
literal|"depts.fl"
argument_list|,
literal|"text_t"
argument_list|,
literal|"depts.indent"
argument_list|,
literal|"true"
argument_list|,
literal|"depts.rows"
argument_list|,
literal|""
operator|+
name|deptMultiplier
argument_list|)
argument_list|,
literal|"count(//result/doc/str[@name='name_s_dv'][.='john']/../result[@name='depts'][@numFound='"
operator|+
name|deptMultiplier
operator|+
literal|"']/doc/str[@name='text_t'][.='These guys develop stuff'])="
operator|+
operator|(
name|peopleMultiplier
operator|*
name|deptMultiplier
operator|)
argument_list|,
literal|"count(//result/doc/str[@name='name_s_dv'][.='nancy']/../result[@name='depts'][@numFound='"
operator|+
name|deptMultiplier
operator|+
literal|"']/doc/str[@name='text_t'][.='These guys sell stuff'])="
operator|+
operator|(
name|peopleMultiplier
operator|*
name|deptMultiplier
operator|)
argument_list|,
literal|"count((//result/doc/str[@name='name_s_dv'][.='john']/..)[1]/result[@name='depts']/doc[1]/*)=1"
argument_list|,
literal|"count((//result/doc/str[@name='name_s_dv'][.='john']/..)[1]/result[@name='depts']/doc["
operator|+
name|deptMultiplier
operator|+
literal|"]/*)=1"
argument_list|,
literal|"count((//result/doc/str[@name='name_s_dv'][.='john']/..)["
operator|+
name|peopleMultiplier
operator|+
literal|"]/result[@name='depts'][@numFound='"
operator|+
name|deptMultiplier
operator|+
literal|"']/doc[1]/*)=1"
argument_list|,
literal|"count((//result/doc/str[@name='name_s_dv'][.='john']/..)["
operator|+
name|peopleMultiplier
operator|+
literal|"]/result[@name='depts'][@numFound='"
operator|+
name|deptMultiplier
operator|+
literal|"']/doc["
operator|+
name|deptMultiplier
operator|+
literal|"]/*)=1"
argument_list|)
expr_stmt|;
block|}
DECL|field|johnAndNancyParams
specifier|final
name|String
index|[]
name|johnAndNancyParams
init|=
operator|new
name|String
index|[]
block|{
literal|"q"
block|,
literal|"name_s:(john nancy)"
block|,
literal|"indent"
block|,
literal|"true"
block|,
literal|"fl"
block|,
literal|"name_s_dv,depts:[subquery]"
block|,
literal|"fl"
block|,
literal|"depts_i:[subquery]"
block|,
literal|"rows"
block|,
literal|""
operator|+
operator|(
literal|2
operator|*
name|peopleMultiplier
operator|)
block|,
literal|"depts.q"
block|,
literal|"{!term f=dept_id_s v=$row.dept_ss_dv}"
block|,
literal|"depts.fl"
block|,
literal|"text_t"
block|,
literal|"depts.indent"
block|,
literal|"true"
block|,
literal|"depts.rows"
block|,
literal|""
operator|+
name|deptMultiplier
block|,
literal|"depts_i.q"
block|,
literal|"{!term f=dept_id_i v=$row.dept_i_dv}"
block|,
literal|"depts_i.fl"
block|,
literal|"text_t"
block|,
comment|// multi val subquery param check
literal|"depts_i.fl"
block|,
literal|"dept_id_s_dv"
block|,
literal|"depts_i.indent"
block|,
literal|"true"
block|,
literal|"depts_i.rows"
block|,
literal|""
operator|+
name|deptMultiplier
block|}
decl_stmt|;
annotation|@
name|Test
DECL|method|testTwoSubQueriesAndByNumberWithTwoFields
specifier|public
name|void
name|testTwoSubQueriesAndByNumberWithTwoFields
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|SolrQueryRequest
name|johnOrNancyTwoFL
init|=
name|req
argument_list|(
name|johnAndNancyParams
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
literal|"call subquery twice a row, once by number, with two fls via multival params"
argument_list|,
name|johnOrNancyTwoFL
argument_list|,
literal|"count(//result/doc/str[@name='name_s_dv'][.='john']/../result[@name='depts']/doc/str[@name='text_t'][.='These guys develop stuff'])="
operator|+
operator|(
name|peopleMultiplier
operator|*
name|deptMultiplier
operator|)
argument_list|,
literal|"count(//result/doc/str[@name='name_s_dv'][.='john']/../result[@name='depts_i']/doc/str[@name='dept_id_s_dv'][.='Engineering'])="
operator|+
operator|(
name|peopleMultiplier
operator|*
name|deptMultiplier
operator|)
argument_list|,
literal|"count(//result/doc/str[@name='name_s_dv'][.='nancy']/../result[@name='depts_i']/doc/str[@name='text_t'][.='These guys sell stuff'])="
operator|+
operator|(
name|peopleMultiplier
operator|*
name|deptMultiplier
operator|)
argument_list|,
literal|"count(//result/doc/str[@name='name_s_dv'][.='nancy']/../result[@name='depts_i']/doc/str[@name='dept_id_s_dv'][.='Sales'])="
operator|+
operator|(
name|peopleMultiplier
operator|*
name|deptMultiplier
operator|)
argument_list|,
literal|"count((//result/doc/str[@name='name_s_dv'][.='john']/..)["
operator|+
name|peopleMultiplier
operator|+
literal|"]/result[@name='depts_i']/doc["
operator|+
name|deptMultiplier
operator|+
literal|"]/str[@name='dept_id_s_dv'][.='Engineering'])=1"
argument_list|,
literal|"count((//result/doc/str[@name='name_s_dv'][.='john']/..)["
operator|+
name|peopleMultiplier
operator|+
literal|"]/result[@name='depts_i']/doc["
operator|+
name|deptMultiplier
operator|+
literal|"]/str[@name='text_t'][.='These guys develop stuff'])=1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRowsStartForSubqueryAndScores
specifier|public
name|void
name|testRowsStartForSubqueryAndScores
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|johnDeptsIds
init|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"q"
block|,
literal|"{!join from=dept_ss_dv to=dept_id_s}name_s:john"
block|,
literal|"wt"
block|,
literal|"csv"
block|,
literal|"csv.header"
block|,
literal|"false"
block|,
literal|"fl"
block|,
literal|"id"
block|,
literal|"rows"
block|,
literal|""
operator|+
name|deptMultiplier
block|,
literal|"sort"
block|,
literal|"id_i desc"
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|deptIds
init|=
name|Collections
operator|.
name|list
argument_list|(
operator|new
name|StringTokenizer
argument_list|(
name|johnDeptsIds
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|a
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|deptMultiplier
operator|+
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|deptMultiplier
operator|+
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|start
init|=
name|Math
operator|.
name|min
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
specifier|final
name|int
name|toIndex
init|=
name|Math
operator|.
name|max
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|expectIds
init|=
name|deptIds
operator|.
name|subList
argument_list|(
name|start
argument_list|,
name|toIndex
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|assertions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// count((//result/doc/str[@name='name_s_dv'][.='john']/../result[@name='depts'])[1]/doc/str[@name='id'])
comment|// random().nextInt(peopleMultiplier);
name|assertions
operator|.
name|add
argument_list|(
literal|"count((//result/doc/str[@name='name_s_dv'][.='john']/.."
operator|+
literal|"/result[@name='depts'][@numFound='"
operator|+
name|deptMultiplier
operator|+
literal|"'][@start='"
operator|+
name|start
operator|+
literal|"'])["
operator|+
operator|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|peopleMultiplier
argument_list|)
operator|+
literal|1
operator|)
operator|+
literal|"]/doc/str[@name='id'])="
operator|+
operator|(
name|toIndex
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
comment|// System.out.println(expectIds);
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectIds
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// (//result/doc/str[@name='name_s_dv'][.='john']/../result[@name='depts'])[1]/doc[1]/str[@name='id']='15'
name|String
name|ithDoc
init|=
literal|"(//result/doc/str[@name='name_s_dv'][.='john']/.."
operator|+
literal|"/result[@name='depts'][@numFound='"
operator|+
name|deptMultiplier
operator|+
literal|"'][@start='"
operator|+
name|start
operator|+
literal|"'])["
operator|+
operator|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|peopleMultiplier
argument_list|)
operator|+
literal|1
operator|)
operator|+
literal|"]/doc["
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|"]"
decl_stmt|;
name|assertions
operator|.
name|add
argument_list|(
name|ithDoc
operator|+
literal|"/str[@name='id'][.='"
operator|+
name|expectIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|"']"
argument_list|)
expr_stmt|;
comment|// let's test scores right there
name|assertions
operator|.
name|add
argument_list|(
name|ithDoc
operator|+
literal|"/float[@name='score'][.='"
operator|+
name|expectIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|".0']"
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|john
init|=
operator|new
name|String
index|[]
block|{
literal|"q"
block|,
literal|"name_s:john"
block|,
literal|"indent"
block|,
literal|"true"
block|,
literal|"fl"
block|,
literal|"name_s_dv,depts:[subquery]"
block|,
literal|"rows"
block|,
literal|""
operator|+
operator|(
literal|2
operator|*
name|peopleMultiplier
operator|)
block|,
literal|"depts.q"
block|,
literal|"+{!term f=dept_id_s v=$row.dept_ss_dv}^=0 _val_:id_i"
block|,
literal|"depts.fl"
block|,
literal|"id"
block|,
literal|"depts.fl"
block|,
literal|"score"
block|,
literal|"depts.indent"
block|,
literal|"true"
block|,
literal|"depts.rows"
block|,
literal|""
operator|+
operator|(
name|toIndex
operator|-
name|start
operator|)
block|,
literal|"depts.start"
block|,
literal|""
operator|+
name|start
block|}
decl_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|john
argument_list|)
argument_list|,
name|assertions
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThreeLevel
specifier|public
name|void
name|testThreeLevel
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|asserts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// dave works in both dept, get his coworkers from both
for|for
control|(
name|String
name|dept
range|:
operator|new
name|String
index|[]
block|{
literal|"Engineering"
block|,
literal|"Support"
block|}
control|)
block|{
comment|//dept_id_s_dv">Engineering
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|deptWorkers
init|=
name|Collections
operator|.
name|list
argument_list|(
operator|new
name|StringTokenizer
argument_list|(
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"dept_ss_dv:"
operator|+
name|dept
argument_list|,
comment|//dept_id_i_dv
literal|"wt"
argument_list|,
literal|"csv"
argument_list|,
literal|"csv.header"
argument_list|,
literal|"false"
argument_list|,
literal|"fl"
argument_list|,
literal|"name_s_dv"
argument_list|,
literal|"rows"
argument_list|,
literal|""
operator|+
name|peopleMultiplier
operator|*
literal|3
argument_list|,
comment|// dave has three coworkers in two depts
literal|"sort"
argument_list|,
literal|"id desc"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// System.out.println(deptWorkers);
comment|// looping dave clones
for|for
control|(
name|int
name|p
range|:
operator|new
name|int
index|[]
block|{
literal|1
block|,
name|peopleMultiplier
block|}
control|)
block|{
comment|// looping dept clones
for|for
control|(
name|int
name|d
range|:
operator|new
name|int
index|[]
block|{
literal|1
block|,
name|deptMultiplier
block|}
control|)
block|{
comment|// looping coworkers
name|int
name|wPos
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Object
name|mate
range|:
name|deptWorkers
control|)
block|{
comment|// (/response/result/doc/str[@name='name_s_dv'][.='dave']/..)[1]
comment|//  /result[@name='subq1']/doc/str[@name='dept_id_s_dv'][.='Engineering']/..
comment|//  /result[@name='neighbours']/doc/str[@name='name_s_dv'][.='tina']
name|asserts
operator|.
name|add
argument_list|(
literal|"((/response/result/doc/str[@name='name_s_dv'][.='dave']/..)["
operator|+
name|p
operator|+
literal|"]"
operator|+
literal|"/result[@name='subq1']/doc/str[@name='dept_id_s_dv'][.='"
operator|+
name|dept
operator|+
literal|"']/..)["
operator|+
name|d
operator|+
literal|"]"
operator|+
literal|"/result[@name='neighbours']/doc["
operator|+
name|wPos
operator|+
literal|"]/str[@name='name_s_dv'][.='"
operator|+
name|mate
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|wPos
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//System.out.println(asserts);
name|assertQ
argument_list|(
literal|"dave works at both dept with other folks"
argument_list|,
comment|//  System.out.println(h.query(
name|req
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"q"
block|,
literal|"name_s:dave"
block|,
literal|"indent"
block|,
literal|"true"
block|,
literal|"fl"
block|,
literal|"name_s_dv,subq1:[subquery]"
block|,
literal|"rows"
block|,
literal|""
operator|+
name|peopleMultiplier
block|,
literal|"subq1.q"
block|,
literal|"{!terms f=dept_id_s v=$row.dept_ss_dv}"
block|,
literal|"subq1.fl"
block|,
literal|"text_t,dept_id_s_dv,neighbours:[subquery]"
block|,
literal|"subq1.indent"
block|,
literal|"true"
block|,
literal|"subq1.rows"
block|,
literal|""
operator|+
operator|(
name|deptMultiplier
operator|*
literal|2
operator|)
block|,
literal|"subq1.neighbours.q"
block|,
comment|//flipping via numbers
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"{!terms f=dept_ss_dv v=$row.dept_id_s_dv}"
else|:
literal|"{!terms f=dept_is v=$row.dept_id_i_dv}"
block|,
literal|"subq1.neighbours.fl"
block|,
literal|"name_s_dv"
block|,
literal|"subq1.neighbours.rows"
block|,
literal|""
operator|+
name|peopleMultiplier
operator|*
literal|3
block|}
argument_list|,
literal|"subq1.neighbours.sort"
argument_list|,
literal|"id desc"
argument_list|)
comment|//,
argument_list|,
name|asserts
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
comment|//        )
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoExplicitName
specifier|public
name|void
name|testNoExplicitName
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|john
init|=
operator|new
name|String
index|[]
block|{
literal|"q"
block|,
literal|"name_s:john"
block|,
literal|"indent"
block|,
literal|"true"
block|,
literal|"fl"
block|,
literal|"name_s_dv,"
operator|+
literal|"[subquery]"
block|,
literal|"rows"
block|,
literal|""
operator|+
operator|(
literal|2
operator|*
name|peopleMultiplier
operator|)
block|,
literal|"depts.q"
block|,
literal|"+{!term f=dept_id_s v=$row.dept_ss_dv}^=0 _val_:id_i"
block|,
literal|"depts.fl"
block|,
literal|"id"
block|,
literal|"depts.fl"
block|,
literal|"score"
block|,
literal|"depts.indent"
block|,
literal|"true"
block|,
literal|"depts.rows"
block|,
literal|""
operator|+
name|deptMultiplier
block|,
literal|"depts.start"
block|,
literal|"0"
block|}
decl_stmt|;
name|assertQEx
argument_list|(
literal|"no prefix, no subquery"
argument_list|,
name|req
argument_list|(
name|john
argument_list|)
argument_list|,
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"no prefix, no subsubquery"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"name_s:john"
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"fl"
argument_list|,
literal|"name_s_dv,"
operator|+
literal|"depts:[subquery]"
argument_list|,
literal|"rows"
argument_list|,
literal|""
operator|+
operator|(
literal|2
operator|*
name|peopleMultiplier
operator|)
argument_list|,
literal|"depts.q"
argument_list|,
literal|"+{!term f=dept_id_s v=$row.dept_ss_dv}^=0 _val_:id_i"
argument_list|,
literal|"depts.fl"
argument_list|,
literal|"id"
argument_list|,
literal|"depts.fl"
argument_list|,
literal|"score"
argument_list|,
literal|"depts.fl"
argument_list|,
literal|"[subquery]"
argument_list|,
comment|//<- here is a trouble
literal|"depts.indent"
argument_list|,
literal|"true"
argument_list|,
literal|"depts.rows"
argument_list|,
literal|""
operator|+
name|deptMultiplier
argument_list|,
literal|"depts.start"
argument_list|,
literal|"0"
argument_list|)
argument_list|,
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDupePrefix
specifier|public
name|void
name|testDupePrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQEx
argument_list|(
literal|"subquery name clash"
argument_list|,
name|req
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"q"
block|,
literal|"name_s:(john nancy)"
block|,
literal|"indent"
block|,
literal|"true"
block|,
literal|"fl"
block|,
literal|"name_s_dv,depts:[subquery]"
block|,
literal|"fl"
block|,
literal|"depts:[subquery]"
block|,
literal|"rows"
block|,
literal|""
operator|+
operator|(
literal|2
operator|*
name|peopleMultiplier
operator|)
block|,
literal|"depts.q"
block|,
literal|"{!term f=dept_id_s v=$row.dept_ss_dv}"
block|,
literal|"depts.fl"
block|,
literal|"text_t"
block|,
literal|"depts.indent"
block|,
literal|"true"
block|,
literal|"depts.rows"
block|,
literal|""
operator|+
name|deptMultiplier
block|,
literal|"depts_i.q"
block|,
literal|"{!term f=dept_id_i v=$depts_i.row.dept_i_dv}"
block|,
literal|"depts_i.fl"
block|,
literal|"text_t"
block|,
comment|// multi val subquery param check
literal|"depts_i.fl"
block|,
literal|"dept_id_s_dv"
block|,
literal|"depts_i.indent"
block|,
literal|"true"
block|,
literal|"depts_i.rows"
block|,
literal|""
operator|+
name|deptMultiplier
block|}
argument_list|)
argument_list|,
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJustJohnJson
specifier|public
name|void
name|testJustJohnJson
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|SolrQueryRequest
name|johnTwoFL
init|=
name|req
argument_list|(
name|johnAndNancyParams
argument_list|)
decl_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|johnTwoFL
operator|.
name|getParams
argument_list|()
argument_list|)
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
literal|"name_s:john"
argument_list|)
expr_stmt|;
name|johnTwoFL
operator|.
name|setParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|johnTwoFL
argument_list|,
literal|"/response/docs/[0]/depts/docs/[0]=={text_t:\"These guys develop stuff\"}"
argument_list|,
literal|"/response/docs/["
operator|+
operator|(
name|peopleMultiplier
operator|-
literal|1
operator|)
operator|+
literal|"]/depts/docs/["
operator|+
operator|(
name|deptMultiplier
operator|-
literal|1
operator|)
operator|+
literal|"]=={text_t:\"These guys develop stuff\"}"
argument_list|,
literal|"/response/docs/[0]/depts_i/docs/[0]=={dept_id_s_dv:\"Engineering\", text_t:\"These guys develop stuff\"}"
argument_list|,
comment|// seem like key order doesn't matter , well
literal|"/response/docs/["
operator|+
operator|(
name|peopleMultiplier
operator|-
literal|1
operator|)
operator|+
literal|"]/depts_i/docs/["
operator|+
operator|(
name|deptMultiplier
operator|-
literal|1
operator|)
operator|+
literal|"]=="
operator|+
literal|"{text_t:\"These guys develop stuff\", dept_id_s_dv:\"Engineering\"}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|testJustJohnJavabin
specifier|public
name|void
name|testJustJohnJavabin
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|SolrQueryRequest
name|johnTwoFL
init|=
name|req
argument_list|(
name|johnAndNancyParams
argument_list|)
decl_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|johnTwoFL
operator|.
name|getParams
argument_list|()
argument_list|)
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
literal|"name_s:john"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"wt"
argument_list|,
literal|"javabin"
argument_list|)
expr_stmt|;
name|johnTwoFL
operator|.
name|setParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
specifier|final
name|NamedList
argument_list|<
name|Object
argument_list|>
name|unmarshalled
decl_stmt|;
block|{
name|SolrCore
name|core
init|=
name|johnTwoFL
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|SolrQueryResponse
name|rsp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
name|SolrRequestInfo
operator|.
name|setRequestInfo
argument_list|(
operator|new
name|SolrRequestInfo
argument_list|(
name|johnTwoFL
argument_list|,
name|rsp
argument_list|)
argument_list|)
expr_stmt|;
name|SolrQueryResponse
name|response
init|=
name|h
operator|.
name|queryAndResponse
argument_list|(
name|johnTwoFL
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|)
argument_list|,
name|johnTwoFL
argument_list|)
decl_stmt|;
name|BinaryQueryResponseWriter
name|responseWriter
init|=
operator|(
name|BinaryQueryResponseWriter
operator|)
name|core
operator|.
name|getQueryResponseWriter
argument_list|(
name|johnTwoFL
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bytes
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|responseWriter
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
name|johnTwoFL
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|unmarshalled
operator|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
operator|new
name|JavaBinCodec
argument_list|()
operator|.
name|unmarshal
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|johnTwoFL
operator|.
name|close
argument_list|()
expr_stmt|;
name|SolrRequestInfo
operator|.
name|clearRequestInfo
argument_list|()
expr_stmt|;
block|}
name|SolrDocumentList
name|resultDocs
init|=
call|(
name|SolrDocumentList
call|)
argument_list|(
name|unmarshalled
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
argument_list|)
decl_stmt|;
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|engText
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|engText
operator|.
name|put
argument_list|(
literal|"text_t"
argument_list|,
literal|"These guys develop stuff"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|engId
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|engId
operator|.
name|put
argument_list|(
literal|"text_t"
argument_list|,
literal|"These guys develop stuff"
argument_list|)
expr_stmt|;
name|engId
operator|.
name|put
argument_list|(
literal|"dept_id_s_dv"
argument_list|,
literal|"Engineering"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|docNum
range|:
operator|new
name|int
index|[]
block|{
literal|0
block|,
name|peopleMultiplier
operator|-
literal|1
block|}
control|)
block|{
name|SolrDocument
name|employeeDoc
init|=
name|resultDocs
operator|.
name|get
argument_list|(
name|docNum
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"john"
argument_list|,
name|employeeDoc
operator|.
name|getFieldValue
argument_list|(
literal|"name_s_dv"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|subResult
range|:
operator|new
name|String
index|[]
block|{
literal|"depts"
block|,
literal|"depts_i"
block|}
control|)
block|{
name|SolrDocumentList
name|subDoc
init|=
operator|(
name|SolrDocumentList
operator|)
name|employeeDoc
operator|.
name|getFieldValue
argument_list|(
name|subResult
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|deptNum
range|:
operator|new
name|int
index|[]
block|{
literal|0
block|,
name|deptMultiplier
operator|-
literal|1
block|}
control|)
block|{
name|SolrDocument
name|deptDoc
init|=
name|subDoc
operator|.
name|get
argument_list|(
name|deptNum
argument_list|)
decl_stmt|;
name|Object
name|expectedDept
init|=
operator|(
name|subResult
operator|.
name|equals
argument_list|(
literal|"depts"
argument_list|)
condition|?
name|engText
else|:
name|engId
operator|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|""
operator|+
name|expectedDept
operator|+
literal|" equals to "
operator|+
name|deptDoc
argument_list|,
name|expectedDept
operator|.
name|equals
argument_list|(
name|deptDoc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testExceptionPropagation
specifier|public
name|void
name|testExceptionPropagation
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|SolrQueryRequest
name|r
init|=
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"name_s:dave"
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"fl"
argument_list|,
literal|"depts:[subquery]"
argument_list|,
literal|"rows"
argument_list|,
literal|""
operator|+
operator|(
name|peopleMultiplier
operator|)
argument_list|,
literal|"depts.q"
argument_list|,
literal|"{!lucene}("
argument_list|,
literal|"depts.fl"
argument_list|,
literal|"text_t"
argument_list|,
literal|"depts.indent"
argument_list|,
literal|"true"
argument_list|,
literal|"depts.rows"
argument_list|,
literal|""
operator|+
operator|(
name|deptMultiplier
operator|*
literal|2
operator|)
argument_list|,
literal|"depts.logParamsList"
argument_list|,
literal|"q,fl,rows,subq1.row.dept_ss_dv"
argument_list|)
decl_stmt|;
comment|// System.out.println(h.query(r));
name|assertQEx
argument_list|(
literal|"wrong subquery"
argument_list|,
name|r
argument_list|,
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|""
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"name_s:dave"
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"fl"
argument_list|,
literal|"depts:[subquery]"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"depts.q"
argument_list|,
literal|"{!lucene}"
argument_list|,
literal|"depts.fl"
argument_list|,
literal|"text_t"
argument_list|,
literal|"depts.indent"
argument_list|,
literal|"true"
argument_list|,
literal|"depts.rows"
argument_list|,
literal|"NAN"
argument_list|,
literal|"depts.logParamsList"
argument_list|,
literal|"q,fl,rows,subq1.row.dept_ss_dv"
argument_list|)
argument_list|,
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiValue
specifier|public
name|void
name|testMultiValue
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|happyPathAsserts
init|=
operator|new
name|String
index|[]
block|{
literal|"count(//result/doc/str[@name='name_s_dv'][.='dave']/../result[@name='subq1']/doc/str[@name='text_t'][.='These guys develop stuff'])="
operator|+
operator|(
name|peopleMultiplier
operator|*
name|deptMultiplier
operator|)
block|,
literal|"count(//result/doc/str[@name='name_s_dv'][.='dave']/../result[@name='subq1']/doc/str[@name='text_t'][.='These guys help customers'])="
operator|+
operator|(
name|peopleMultiplier
operator|*
name|deptMultiplier
operator|)
block|,
literal|"//result[@numFound="
operator|+
name|peopleMultiplier
operator|+
literal|"]"
block|}
decl_stmt|;
name|Random
name|random1
init|=
name|random
argument_list|()
decl_stmt|;
name|assertQ
argument_list|(
literal|"dave works at both, whether we set a  default separator or both"
argument_list|,
name|req
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"q"
block|,
literal|"name_s:dave"
block|,
literal|"indent"
block|,
literal|"true"
block|,
literal|"fl"
block|,
operator|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"name_s_dv"
else|:
literal|"*"
operator|)
operator|+
comment|//"dept_ss_dv,
literal|",subq1:[subquery "
operator|+
operator|(
operator|(
name|random1
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|""
else|:
literal|"separator=,"
operator|)
operator|)
operator|+
literal|"]"
block|,
literal|"rows"
block|,
literal|""
operator|+
name|peopleMultiplier
block|,
literal|"subq1.q"
block|,
literal|"{!terms f=dept_id_s v=$row.dept_ss_dv "
operator|+
operator|(
operator|(
name|random1
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|""
else|:
literal|"separator=,"
operator|)
operator|)
operator|+
literal|"}"
block|,
literal|"subq1.fl"
block|,
literal|"text_t"
block|,
literal|"subq1.indent"
block|,
literal|"true"
block|,
literal|"subq1.rows"
block|,
literal|""
operator|+
operator|(
name|deptMultiplier
operator|*
literal|2
operator|)
block|,
literal|"subq1.logParamsList"
block|,
literal|"q,fl,rows,row.dept_ss_dv"
block|}
argument_list|)
argument_list|,
name|happyPathAsserts
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"even via numbers"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"name_s:dave"
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"fl"
argument_list|,
literal|"dept_is_dv,name_s_dv,subq1:[subquery]"
argument_list|,
literal|"rows"
argument_list|,
literal|""
operator|+
operator|(
name|peopleMultiplier
operator|)
argument_list|,
literal|"subq1.q"
argument_list|,
literal|"{!terms f=dept_id_i v=$row.dept_is_dv}"
argument_list|,
literal|"subq1.fl"
argument_list|,
literal|"text_t"
argument_list|,
literal|"subq1.indent"
argument_list|,
literal|"true"
argument_list|,
literal|"subq1.rows"
argument_list|,
literal|""
operator|+
operator|(
name|deptMultiplier
operator|*
literal|2
operator|)
argument_list|)
argument_list|,
name|happyPathAsserts
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"even if we set a separator both"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"name_s:dave"
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"fl"
argument_list|,
literal|"dept_ss_dv,name_s_dv,name_s_dv,subq1:[subquery separator=\" \"]"
argument_list|,
literal|"rows"
argument_list|,
literal|""
operator|+
operator|(
name|peopleMultiplier
operator|)
argument_list|,
literal|"subq1.q"
argument_list|,
literal|"{!terms f=dept_id_s v=$row.dept_ss_dv separator=\" \"}"
argument_list|,
literal|"subq1.fl"
argument_list|,
literal|"text_t"
argument_list|,
literal|"subq1.indent"
argument_list|,
literal|"true"
argument_list|,
literal|"subq1.rows"
argument_list|,
literal|""
operator|+
operator|(
name|deptMultiplier
operator|*
literal|2
operator|)
argument_list|)
argument_list|,
name|happyPathAsserts
argument_list|)
expr_stmt|;
name|String
index|[]
name|noMatchAtSubQ
init|=
operator|new
name|String
index|[]
block|{
literal|"count(//result/doc/str[@name='name_s_dv'][.='dave']/../result[@name='subq1'][@numFound=0])="
operator|+
operator|(
name|peopleMultiplier
operator|)
block|,
literal|"//result[@numFound="
operator|+
name|peopleMultiplier
operator|+
literal|"]"
block|}
decl_stmt|;
name|assertQ
argument_list|(
literal|"different separators, no match"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"name_s:dave"
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"fl"
argument_list|,
literal|"dept_ss_dv,name_s_dv,subq1:[subquery]"
argument_list|,
literal|"rows"
argument_list|,
literal|""
operator|+
operator|(
name|peopleMultiplier
operator|)
argument_list|,
literal|"subq1.q"
argument_list|,
literal|"{!terms f=dept_id_s v=$row.dept_ss_dv separator=\" \"}"
argument_list|,
literal|"subq1.fl"
argument_list|,
literal|"text_t"
argument_list|,
literal|"subq1.indent"
argument_list|,
literal|"true"
argument_list|,
literal|"subq1.rows"
argument_list|,
literal|""
operator|+
operator|(
name|deptMultiplier
operator|*
literal|2
operator|)
argument_list|)
argument_list|,
name|noMatchAtSubQ
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"and no matter where"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"name_s:dave"
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"fl"
argument_list|,
literal|"dept_ss_dv,name_s_dv,subq1:[subquery separator=\" \"]"
argument_list|,
literal|"rows"
argument_list|,
literal|""
operator|+
operator|(
name|peopleMultiplier
operator|)
argument_list|,
literal|"subq1.q"
argument_list|,
literal|"{!terms f=dept_id_s v=$row.dept_ss_dv}"
argument_list|,
literal|"subq1.fl"
argument_list|,
literal|"text_t"
argument_list|,
literal|"subq1.indent"
argument_list|,
literal|"true"
argument_list|,
literal|"subq1.rows"
argument_list|,
literal|""
operator|+
operator|(
name|deptMultiplier
operator|*
literal|2
operator|)
argument_list|)
argument_list|,
name|noMatchAtSubQ
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"setting a wrong parser gets you nowhere"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"name_s:dave"
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"fl"
argument_list|,
literal|"dept_ss_dv,name_s_dv,subq1:[subquery]"
argument_list|,
literal|"rows"
argument_list|,
literal|""
operator|+
operator|(
name|peopleMultiplier
operator|)
argument_list|,
literal|"subq1.q"
argument_list|,
literal|"{!term f=dept_id_s v=$row.dept_ss_dv}"
argument_list|,
literal|"subq1.fl"
argument_list|,
literal|"text_t"
argument_list|,
literal|"subq1.indent"
argument_list|,
literal|"true"
argument_list|,
literal|"subq1.rows"
argument_list|,
literal|""
operator|+
operator|(
name|deptMultiplier
operator|*
literal|2
operator|)
argument_list|)
argument_list|,
name|noMatchAtSubQ
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"but it luckily works with default query parser, but it's not really reliable"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"name_s:dave"
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"fl"
argument_list|,
literal|"dept_ss_dv,name_s_dv,subq1:[subquery separator=\" \"]"
argument_list|,
literal|"rows"
argument_list|,
literal|""
operator|+
operator|(
name|peopleMultiplier
operator|)
argument_list|,
literal|"subq1.q"
argument_list|,
literal|"{!lucene df=dept_id_s v=$row.dept_ss_dv}"
argument_list|,
literal|"subq1.fl"
argument_list|,
literal|"text_t"
argument_list|,
literal|"subq1.indent"
argument_list|,
literal|"true"
argument_list|,
literal|"subq1.rows"
argument_list|,
literal|""
operator|+
operator|(
name|deptMultiplier
operator|*
literal|2
operator|)
argument_list|)
argument_list|,
name|happyPathAsserts
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"even lucene qp can't help at any separator but space"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"name_s:dave"
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"fl"
argument_list|,
literal|"dept_ss_dv,name_s_dv,"
operator|+
literal|"subq1:[subquery "
operator|+
operator|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|""
else|:
literal|"separator="
operator|+
operator|(
operator|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|)
operator|)
operator|+
literal|"]"
argument_list|,
literal|"rows"
argument_list|,
literal|""
operator|+
operator|(
name|peopleMultiplier
operator|)
argument_list|,
literal|"subq1.q"
argument_list|,
literal|"{!lucene df=dept_id_s v=$row.dept_ss_dv}"
argument_list|,
literal|"subq1.fl"
argument_list|,
literal|"text_t"
argument_list|,
literal|"subq1.indent"
argument_list|,
literal|"true"
argument_list|,
literal|"subq1.rows"
argument_list|,
literal|""
operator|+
operator|(
name|deptMultiplier
operator|*
literal|2
operator|)
argument_list|)
argument_list|,
name|noMatchAtSubQ
argument_list|)
expr_stmt|;
block|}
DECL|method|daveMultiValueSearchParams
specifier|static
name|String
index|[]
name|daveMultiValueSearchParams
parameter_list|(
name|Random
name|random
parameter_list|,
name|int
name|peopleMult
parameter_list|,
name|int
name|deptMult
parameter_list|)
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"q"
block|,
literal|"name_s:dave"
block|,
literal|"indent"
block|,
literal|"true"
block|,
literal|"fl"
block|,
operator|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"name_s_dv"
else|:
literal|"*"
operator|)
operator|+
comment|//"dept_ss_dv,
literal|",subq1:[subquery "
operator|+
operator|(
operator|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|""
else|:
literal|"separator=,"
operator|)
operator|)
operator|+
literal|"]"
block|,
literal|"rows"
block|,
literal|""
operator|+
name|peopleMult
block|,
literal|"subq1.q"
block|,
literal|"{!terms f=dept_id_s v=$row.dept_ss_dv "
operator|+
operator|(
operator|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|""
else|:
literal|"separator=,"
operator|)
operator|)
operator|+
literal|"}"
block|,
literal|"subq1.fl"
block|,
literal|"text_t"
block|,
literal|"subq1.indent"
block|,
literal|"true"
block|,
literal|"subq1.rows"
block|,
literal|""
operator|+
operator|(
name|deptMult
operator|*
literal|2
operator|)
block|,
literal|"subq1.logParamsList"
block|,
literal|"q,fl,rows,row.dept_ss_dv"
block|}
return|;
block|}
block|}
end_class
end_unit
