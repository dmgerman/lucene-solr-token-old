begin_unit
begin_package
DECL|package|org.apache.solr.response
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|StreamComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|graph
operator|.
name|Traversal
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|TupleStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|Explanation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|TestGraphMLResponseWriter
specifier|public
class|class
name|TestGraphMLResponseWriter
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"enable.update.log"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
comment|// schema12 doesn't support _version_
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema12.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGraphMLOutput
specifier|public
name|void
name|testGraphMLOutput
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrQueryRequest
name|request
init|=
name|req
argument_list|(
literal|"blah"
argument_list|,
literal|"blah"
argument_list|)
decl_stmt|;
comment|// Just need a request to attach the stream and traversal to.
name|SolrQueryResponse
name|response
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
name|Map
name|context
init|=
name|request
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|TupleStream
name|stream
init|=
operator|new
name|TestStream
argument_list|()
decl_stmt|;
comment|//Simulates a GatherNodesStream
name|Traversal
name|traversal
init|=
operator|new
name|Traversal
argument_list|()
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"traversal"
argument_list|,
name|traversal
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"stream"
argument_list|,
name|stream
argument_list|)
expr_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GraphMLResponseWriter
name|graphMLResponseWriter
init|=
operator|new
name|GraphMLResponseWriter
argument_list|()
decl_stmt|;
name|graphMLResponseWriter
operator|.
name|write
argument_list|(
name|writer
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|String
name|graphML
init|=
name|writer
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|//Validate the nodes
name|String
name|error
init|=
name|h
operator|.
name|validateXPath
argument_list|(
name|graphML
argument_list|,
literal|"//graph/node[1][@id ='bill']"
argument_list|,
literal|"//graph/node[2][@id ='jim']"
argument_list|,
literal|"//graph/node[3][@id ='max']"
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|error
argument_list|)
throw|;
block|}
comment|//Validate the edges
name|error
operator|=
name|h
operator|.
name|validateXPath
argument_list|(
name|graphML
argument_list|,
literal|"//graph/edge[1][@source ='jim']"
argument_list|,
literal|"//graph/edge[1][@target ='bill']"
argument_list|,
literal|"//graph/edge[2][@source ='max']"
argument_list|,
literal|"//graph/edge[2][@target ='bill']"
argument_list|,
literal|"//graph/edge[3][@source ='max']"
argument_list|,
literal|"//graph/edge[3][@target ='jim']"
argument_list|,
literal|"//graph/edge[4][@source ='jim']"
argument_list|,
literal|"//graph/edge[4][@target ='max']"
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|error
argument_list|)
throw|;
block|}
block|}
DECL|class|TestStream
specifier|private
class|class
name|TestStream
extends|extends
name|TupleStream
block|{
DECL|field|tuples
specifier|private
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
DECL|method|TestStream
specifier|public
name|TestStream
parameter_list|()
block|{
comment|//Create some nodes
name|List
argument_list|<
name|Tuple
argument_list|>
name|testTuples
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Map
name|m1
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|an1
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|an1
operator|.
name|add
argument_list|(
literal|"jim"
argument_list|)
expr_stmt|;
name|an1
operator|.
name|add
argument_list|(
literal|"max"
argument_list|)
expr_stmt|;
name|m1
operator|.
name|put
argument_list|(
literal|"node"
argument_list|,
literal|"bill"
argument_list|)
expr_stmt|;
name|m1
operator|.
name|put
argument_list|(
literal|"ancestors"
argument_list|,
name|an1
argument_list|)
expr_stmt|;
name|testTuples
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|(
name|m1
argument_list|)
argument_list|)
expr_stmt|;
name|Map
name|m2
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|an2
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|an2
operator|.
name|add
argument_list|(
literal|"max"
argument_list|)
expr_stmt|;
name|m2
operator|.
name|put
argument_list|(
literal|"node"
argument_list|,
literal|"jim"
argument_list|)
expr_stmt|;
name|m2
operator|.
name|put
argument_list|(
literal|"ancestors"
argument_list|,
name|an2
argument_list|)
expr_stmt|;
name|testTuples
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|(
name|m2
argument_list|)
argument_list|)
expr_stmt|;
name|Map
name|m3
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|an3
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|an3
operator|.
name|add
argument_list|(
literal|"jim"
argument_list|)
expr_stmt|;
name|m3
operator|.
name|put
argument_list|(
literal|"node"
argument_list|,
literal|"max"
argument_list|)
expr_stmt|;
name|m3
operator|.
name|put
argument_list|(
literal|"ancestors"
argument_list|,
name|an3
argument_list|)
expr_stmt|;
name|testTuples
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|(
name|m3
argument_list|)
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|testTuples
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
DECL|method|getStreamSort
specifier|public
name|StreamComparator
name|getStreamSort
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{      }
DECL|method|open
specifier|public
name|void
name|open
parameter_list|()
block|{      }
DECL|method|children
specifier|public
name|List
argument_list|<
name|TupleStream
argument_list|>
name|children
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|read
specifier|public
name|Tuple
name|read
parameter_list|()
block|{
if|if
condition|(
name|tuples
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|tuples
operator|.
name|next
argument_list|()
return|;
block|}
else|else
block|{
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"EOF"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
operator|new
name|Tuple
argument_list|(
name|map
argument_list|)
return|;
block|}
block|}
DECL|method|setStreamContext
specifier|public
name|void
name|setStreamContext
parameter_list|(
name|StreamContext
name|streamContext
parameter_list|)
block|{      }
DECL|method|toExplanation
specifier|public
name|Explanation
name|toExplanation
parameter_list|(
name|StreamFactory
name|factory
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class
end_unit
