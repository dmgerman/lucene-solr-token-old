begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.response
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|transform
operator|.
name|DocTransformer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|util
operator|.
name|Strings
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|TestCustomDocTransformer
specifier|public
class|class
name|TestCustomDocTransformer
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-doctransformers.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|delQ
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCustomTransformer
specifier|public
name|void
name|testCustomTransformer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Build a simple index
name|int
name|max
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|max
condition|;
name|i
operator|++
control|)
block|{
name|SolrInputDocument
name|sdoc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|sdoc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|sdoc
operator|.
name|addField
argument_list|(
literal|"subject"
argument_list|,
literal|"xx"
argument_list|)
expr_stmt|;
name|sdoc
operator|.
name|addField
argument_list|(
literal|"title"
argument_list|,
literal|"title_"
operator|+
name|i
argument_list|)
expr_stmt|;
name|updateJ
argument_list|(
name|jsonAdd
argument_list|(
name|sdoc
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
name|max
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,out:[custom extra=subject,title]"
argument_list|)
argument_list|,
comment|// Check that the concatinated fields make it in the results
literal|"//*[@numFound='"
operator|+
name|max
operator|+
literal|"']"
argument_list|,
literal|"//str[.='xx#title_0#']"
argument_list|,
literal|"//str[.='xx#title_1#']"
argument_list|,
literal|"//str[.='xx#title_2#']"
argument_list|,
literal|"//str[.='xx#title_3#']"
argument_list|)
expr_stmt|;
block|}
DECL|class|CustomTransformerFactory
specifier|public
specifier|static
class|class
name|CustomTransformerFactory
extends|extends
name|TransformerFactory
block|{
annotation|@
name|Override
DECL|method|create
specifier|public
name|DocTransformer
name|create
parameter_list|(
name|String
name|field
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|)
block|{
name|String
index|[]
name|extra
init|=
literal|null
decl_stmt|;
name|String
name|ext
init|=
name|params
operator|.
name|get
argument_list|(
literal|"extra"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ext
operator|!=
literal|null
condition|)
block|{
name|extra
operator|=
name|Strings
operator|.
name|split
argument_list|(
name|ext
argument_list|,
literal|','
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|CustomTransformer
argument_list|(
name|field
argument_list|,
name|extra
argument_list|)
return|;
block|}
block|}
DECL|class|CustomTransformer
specifier|public
specifier|static
class|class
name|CustomTransformer
extends|extends
name|DocTransformer
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|extra
specifier|final
name|String
index|[]
name|extra
decl_stmt|;
DECL|field|str
specifier|final
name|StringBuilder
name|str
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
DECL|method|CustomTransformer
specifier|public
name|CustomTransformer
parameter_list|(
name|String
name|name
parameter_list|,
name|String
index|[]
name|extra
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|extra
operator|=
name|extra
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"custom"
return|;
block|}
annotation|@
name|Override
DECL|method|getExtraRequestFields
specifier|public
name|String
index|[]
name|getExtraRequestFields
parameter_list|()
block|{
return|return
name|extra
return|;
block|}
comment|/**      * This transformer simply concatinates the values of multipe fields      */
annotation|@
name|Override
DECL|method|transform
specifier|public
name|void
name|transform
parameter_list|(
name|SolrDocument
name|doc
parameter_list|,
name|int
name|docid
parameter_list|,
name|float
name|score
parameter_list|)
throws|throws
name|IOException
block|{
name|str
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|extra
control|)
block|{
name|String
name|v
init|=
name|getAsString
argument_list|(
name|s
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|str
operator|.
name|append
argument_list|(
name|v
argument_list|)
operator|.
name|append
argument_list|(
literal|'#'
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"HELLO: "
operator|+
name|str
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setField
argument_list|(
name|name
argument_list|,
name|str
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getAsString
specifier|public
specifier|static
name|String
name|getAsString
parameter_list|(
name|String
name|field
parameter_list|,
name|SolrDocument
name|doc
parameter_list|)
block|{
name|Object
name|v
init|=
name|doc
operator|.
name|getFirstValue
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|v
operator|instanceof
name|IndexableField
condition|)
block|{
return|return
operator|(
operator|(
name|IndexableField
operator|)
name|v
operator|)
operator|.
name|stringValue
argument_list|()
return|;
block|}
return|return
name|v
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class
end_unit
