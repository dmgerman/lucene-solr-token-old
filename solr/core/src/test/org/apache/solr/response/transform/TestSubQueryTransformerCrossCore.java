begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.response.transform
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|transform
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|DirectSolrConnection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import
begin_class
DECL|class|TestSubQueryTransformerCrossCore
specifier|public
class|class
name|TestSubQueryTransformerCrossCore
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|fromCore
specifier|private
specifier|static
name|SolrCore
name|fromCore
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeTests
specifier|public
specifier|static
name|void
name|beforeTests
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"enable.update.log"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
comment|// schema12 doesn't support _version_
name|initCore
argument_list|(
literal|"solrconfig-basic.xml"
argument_list|,
literal|"schema-docValuesJoin.xml"
argument_list|)
expr_stmt|;
specifier|final
name|CoreContainer
name|coreContainer
init|=
name|h
operator|.
name|getCoreContainer
argument_list|()
decl_stmt|;
name|fromCore
operator|=
name|coreContainer
operator|.
name|create
argument_list|(
literal|"fromCore"
argument_list|,
comment|//FileSystems.getDefault().getPath( TEST_HOME()), ImmutableMap.of("config","solrconfig-basic.xml","schema","schema-docValuesJoin.xml"
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"configSet"
argument_list|,
literal|"minimal"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"name_s"
argument_list|,
literal|"john"
argument_list|,
literal|"title_s"
argument_list|,
literal|"Director"
argument_list|,
literal|"dept_ss_dv"
argument_list|,
literal|"Engineering"
argument_list|,
literal|"text_t"
argument_list|,
literal|"These guys develop stuff"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"name_s"
argument_list|,
literal|"mark"
argument_list|,
literal|"title_s"
argument_list|,
literal|"VP"
argument_list|,
literal|"dept_ss_dv"
argument_list|,
literal|"Marketing"
argument_list|,
literal|"text_t"
argument_list|,
literal|"These guys make you look good"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"name_s"
argument_list|,
literal|"nancy"
argument_list|,
literal|"title_s"
argument_list|,
literal|"MTS"
argument_list|,
literal|"dept_ss_dv"
argument_list|,
literal|"Sales"
argument_list|,
literal|"text_t"
argument_list|,
literal|"These guys sell stuff"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"name_s"
argument_list|,
literal|"dave"
argument_list|,
literal|"title_s"
argument_list|,
literal|"MTS"
argument_list|,
literal|"dept_ss_dv"
argument_list|,
literal|"Support"
argument_list|,
literal|"dept_ss_dv"
argument_list|,
literal|"Engineering"
argument_list|,
literal|"text_t"
argument_list|,
literal|"These guys help customers"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"name_s"
argument_list|,
literal|"tina"
argument_list|,
literal|"title_s"
argument_list|,
literal|"VP"
argument_list|,
literal|"dept_ss_dv"
argument_list|,
literal|"Engineering"
argument_list|,
literal|"text_t"
argument_list|,
literal|"These guys develop stuff"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|update
argument_list|(
name|fromCore
argument_list|,
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|,
literal|"dept_id_s"
argument_list|,
literal|"Engineering"
argument_list|,
literal|"text_t"
argument_list|,
literal|"These guys develop stuff"
argument_list|,
literal|"salary_i_dv"
argument_list|,
literal|"1000"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|update
argument_list|(
name|fromCore
argument_list|,
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"11"
argument_list|,
literal|"dept_id_s"
argument_list|,
literal|"Marketing"
argument_list|,
literal|"text_t"
argument_list|,
literal|"These guys make you look good"
argument_list|,
literal|"salary_i_dv"
argument_list|,
literal|"1500"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|update
argument_list|(
name|fromCore
argument_list|,
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"12"
argument_list|,
literal|"dept_id_s"
argument_list|,
literal|"Sales"
argument_list|,
literal|"text_t"
argument_list|,
literal|"These guys sell stuff"
argument_list|,
literal|"salary_i_dv"
argument_list|,
literal|"1600"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|update
argument_list|(
name|fromCore
argument_list|,
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"13"
argument_list|,
literal|"dept_id_s"
argument_list|,
literal|"Support"
argument_list|,
literal|"text_t"
argument_list|,
literal|"These guys help customers"
argument_list|,
literal|"salary_i_dv"
argument_list|,
literal|"800"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|update
argument_list|(
name|fromCore
argument_list|,
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|update
specifier|public
specifier|static
name|String
name|update
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|String
name|xml
parameter_list|)
throws|throws
name|Exception
block|{
name|DirectSolrConnection
name|connection
init|=
operator|new
name|DirectSolrConnection
argument_list|(
name|core
argument_list|)
decl_stmt|;
name|SolrRequestHandler
name|handler
init|=
name|core
operator|.
name|getRequestHandler
argument_list|(
literal|"/update"
argument_list|)
decl_stmt|;
return|return
name|connection
operator|.
name|request
argument_list|(
name|handler
argument_list|,
literal|null
argument_list|,
name|xml
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testSameCoreSingleField
specifier|public
name|void
name|testSameCoreSingleField
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQ
argument_list|(
literal|"subq1.fl is limited to single field"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"name_s:john"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,depts:[subquery fromIndex=fromCore]"
argument_list|,
literal|"depts.q"
argument_list|,
literal|"{!term f=dept_id_s v=$row.dept_ss_dv}"
argument_list|,
literal|"depts.fl"
argument_list|,
literal|"text_t"
argument_list|)
argument_list|,
literal|"//result/doc/str[@name='name_s_dv'][.='john']/../result[@name='depts']/doc/str[@name='text_t'][.='These guys develop stuff']"
argument_list|,
literal|"count(//result/doc/str[@name='name_s_dv'][.='john']/../result[@name='depts']/doc/*)=1"
argument_list|)
expr_stmt|;
comment|// only text_t
block|}
annotation|@
name|Test
DECL|method|testAbsentCore
specifier|public
name|void
name|testAbsentCore
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQEx
argument_list|(
literal|"from index not exist"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"name_s:dave"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,depts:[subquery fromIndex=fromCore2]"
argument_list|,
literal|"depts.q"
argument_list|,
literal|"{!term f=dept_id_s v=$row.dept_ss_dv}"
argument_list|,
literal|"depts.fl"
argument_list|,
literal|"text_t"
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCrossCoreSubQueryTransformer
specifier|public
name|void
name|testCrossCoreSubQueryTransformer
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQ
argument_list|(
literal|"make sure request is parsed in this core"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"name_s:john"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,depts:[subquery]"
argument_list|,
comment|// text is tokenized and can be found, despite there is no substitution magic
literal|"depts.q"
argument_list|,
literal|"{!field f=text_t}These guys"
argument_list|)
argument_list|,
literal|"//result/doc/str[@name='name_s_dv'][.='john']/../result[@name='depts']/doc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"make sure request is parsed in that core"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"name_s:john"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,depts:[subquery fromIndex=fromCore]"
argument_list|,
comment|// text is NOT tokenized and can NOT be found
literal|"depts.q"
argument_list|,
literal|"{!field f=text_t}These guys"
argument_list|)
argument_list|,
literal|"count(//result/doc/str[@name='name_s_dv'][.='john']/../result[@name='depts']/doc)=0"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"make sure request is parsed in that core"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"-name_s:dave"
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,depts:[subquery fromIndex=fromCore]"
argument_list|,
comment|// stored text (text_t is string in minimal configset) can be found as
literal|"depts.q"
argument_list|,
literal|"{!field f=text_t v=$row.text_t}"
argument_list|,
literal|"depts.fl"
argument_list|,
literal|"dept_id_s"
argument_list|)
argument_list|,
literal|"//result/doc/str[@name='name_s_dv'][.='john']/.."
operator|+
literal|"/result[@name='depts']/doc/str[@name='dept_id_s'][.='Engineering']"
argument_list|,
literal|"//result/doc/str[@name='name_s_dv'][.='tina']/.."
operator|+
literal|"/result[@name='depts']/doc/str[@name='dept_id_s'][.='Engineering']"
argument_list|,
literal|"//result/doc/str[@name='name_s_dv'][.='mark']/.."
operator|+
literal|"/result[@name='depts']/doc/str[@name='dept_id_s'][.='Marketing']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|nukeAll
specifier|public
specifier|static
name|void
name|nukeAll
parameter_list|()
block|{
name|fromCore
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class
end_unit
