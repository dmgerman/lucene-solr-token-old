begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.update.processor
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|UpdateCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|AddUpdateCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|CommitUpdateCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|DeleteUpdateCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|MergeIndexesCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|RollbackUpdateCommand
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import
begin_comment
comment|/**  * This Factory can optionally save refrences to the commands it receives in   * BlockingQueues that tests can poll from to observe that the exepected commands   * are executed.  By default, this factory does nothing except return the "next"   * processor from the chain unless it's told to {@link #startRecording()}  */
end_comment
begin_class
DECL|class|RecordingUpdateProcessorFactory
specifier|public
specifier|final
class|class
name|RecordingUpdateProcessorFactory
extends|extends
name|UpdateRequestProcessorFactory
block|{
DECL|field|recording
specifier|private
name|boolean
name|recording
init|=
literal|false
decl_stmt|;
comment|/** The queue containing commands that were recorded    * @see #startRecording    */
DECL|field|commandQueue
specifier|public
specifier|final
name|BlockingQueue
argument_list|<
name|UpdateCommand
argument_list|>
name|commandQueue
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|UpdateCommand
argument_list|>
argument_list|()
decl_stmt|;
comment|/**     * @see #stopRecording     * @see #commandQueue    */
DECL|method|startRecording
specifier|public
specifier|synchronized
name|void
name|startRecording
parameter_list|()
block|{
name|recording
operator|=
literal|true
expr_stmt|;
block|}
comment|/** @see #startRecording */
DECL|method|stopRecording
specifier|public
specifier|synchronized
name|void
name|stopRecording
parameter_list|()
block|{
name|recording
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getInstance
specifier|public
specifier|synchronized
name|UpdateRequestProcessor
name|getInstance
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|UpdateRequestProcessor
name|next
parameter_list|)
block|{
return|return
name|recording
condition|?
operator|new
name|RecordingUpdateRequestProcessor
argument_list|(
name|commandQueue
argument_list|,
name|next
argument_list|)
else|:
name|next
return|;
block|}
DECL|class|RecordingUpdateRequestProcessor
specifier|private
specifier|static
specifier|final
class|class
name|RecordingUpdateRequestProcessor
extends|extends
name|UpdateRequestProcessor
block|{
DECL|field|commandQueue
specifier|private
specifier|final
name|BlockingQueue
argument_list|<
name|UpdateCommand
argument_list|>
name|commandQueue
decl_stmt|;
DECL|method|RecordingUpdateRequestProcessor
specifier|public
name|RecordingUpdateRequestProcessor
parameter_list|(
name|BlockingQueue
argument_list|<
name|UpdateCommand
argument_list|>
name|commandQueue
parameter_list|,
name|UpdateRequestProcessor
name|next
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|this
operator|.
name|commandQueue
operator|=
name|commandQueue
expr_stmt|;
block|}
DECL|method|record
specifier|private
name|void
name|record
parameter_list|(
name|UpdateCommand
name|cmd
parameter_list|)
block|{
if|if
condition|(
operator|!
name|commandQueue
operator|.
name|offer
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"WTF: commandQueue should be unbounded but offer failed: "
operator|+
name|cmd
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|processAdd
specifier|public
name|void
name|processAdd
parameter_list|(
name|AddUpdateCommand
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
name|record
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|super
operator|.
name|processAdd
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|processDelete
specifier|public
name|void
name|processDelete
parameter_list|(
name|DeleteUpdateCommand
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
name|record
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|super
operator|.
name|processDelete
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|processMergeIndexes
specifier|public
name|void
name|processMergeIndexes
parameter_list|(
name|MergeIndexesCommand
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
name|record
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|super
operator|.
name|processMergeIndexes
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|processCommit
specifier|public
name|void
name|processCommit
parameter_list|(
name|CommitUpdateCommand
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
name|record
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|super
operator|.
name|processCommit
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|processRollback
specifier|public
name|void
name|processRollback
parameter_list|(
name|RollbackUpdateCommand
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
name|record
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|super
operator|.
name|processRollback
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
