begin_unit
begin_package
DECL|package|org.apache.solr.update
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLInputFactory
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|ByteArrayOutputStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|QueryWrapperFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermRangeQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|BitDocIdSetCachingWrapperFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|ScoreMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|ToParentBlockJoinQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|RequestWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|JavaBinCodec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|loader
operator|.
name|XMLLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DefaultSolrThreadFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import
begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|DocumentHelper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment
begin_class
DECL|class|AddBlockUpdateTest
specifier|public
class|class
name|AddBlockUpdateTest
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|child
specifier|private
specifier|static
specifier|final
name|String
name|child
init|=
literal|"child_s"
decl_stmt|;
DECL|field|parent
specifier|private
specifier|static
specifier|final
name|String
name|parent
init|=
literal|"parent_s"
decl_stmt|;
DECL|field|type
specifier|private
specifier|static
specifier|final
name|String
name|type
init|=
literal|"type_s"
decl_stmt|;
DECL|field|exe
specifier|private
specifier|static
name|ExecutorService
name|exe
decl_stmt|;
DECL|field|counter
specifier|private
specifier|static
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|cachedMode
specifier|private
specifier|static
name|boolean
name|cachedMode
decl_stmt|;
DECL|field|inputFactory
specifier|private
specifier|static
name|XMLInputFactory
name|inputFactory
decl_stmt|;
DECL|field|searcherRef
specifier|private
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searcherRef
decl_stmt|;
DECL|field|_searcher
specifier|private
name|SolrIndexSearcher
name|_searcher
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|oldCacheNamePropValue
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"blockJoinParentFilterCache"
argument_list|)
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"blockJoinParentFilterCache"
argument_list|,
operator|(
name|cachedMode
operator|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
operator|)
condition|?
literal|"blockJoinParentFilterCache"
else|:
literal|"don't cache"
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldCacheNamePropValue
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"blockJoinParentFilterCache"
argument_list|,
name|oldCacheNamePropValue
argument_list|)
expr_stmt|;
block|}
name|inputFactory
operator|=
name|XMLInputFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|exe
operator|=
comment|// Executors.newSingleThreadExecutor();
name|rarely
argument_list|()
condition|?
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|atLeast
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|DefaultSolrThreadFactory
argument_list|(
literal|"AddBlockUpdateTest"
argument_list|)
argument_list|)
else|:
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
operator|new
name|DefaultSolrThreadFactory
argument_list|(
literal|"AddBlockUpdateTest"
argument_list|)
argument_list|)
expr_stmt|;
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema15.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|prepare
specifier|public
name|void
name|prepare
parameter_list|()
block|{
comment|// assertU("<rollback/>");
name|assertU
argument_list|(
name|delQ
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|(
literal|"expungeDeletes"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getSearcher
specifier|private
name|SolrIndexSearcher
name|getSearcher
parameter_list|()
block|{
if|if
condition|(
name|_searcher
operator|==
literal|null
condition|)
block|{
name|searcherRef
operator|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSearcher
argument_list|()
expr_stmt|;
name|_searcher
operator|=
name|searcherRef
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
return|return
name|_searcher
return|;
block|}
annotation|@
name|After
DECL|method|cleanup
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
if|if
condition|(
name|searcherRef
operator|!=
literal|null
operator|||
name|_searcher
operator|!=
literal|null
condition|)
block|{
name|searcherRef
operator|.
name|decref
argument_list|()
expr_stmt|;
name|searcherRef
operator|=
literal|null
expr_stmt|;
name|_searcher
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|exe
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|exe
operator|=
literal|null
expr_stmt|;
name|inputFactory
operator|=
literal|null
expr_stmt|;
name|counter
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOverwrite
specifier|public
name|void
name|testOverwrite
parameter_list|()
throws|throws
name|IOException
block|{
name|assertU
argument_list|(
name|add
argument_list|(
name|nest
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"X"
argument_list|,
name|parent
argument_list|,
literal|"X"
argument_list|)
argument_list|,
name|doc
argument_list|(
name|child
argument_list|,
literal|"a"
argument_list|,
literal|"id"
argument_list|,
literal|"66"
argument_list|)
argument_list|,
name|doc
argument_list|(
name|child
argument_list|,
literal|"b"
argument_list|,
literal|"id"
argument_list|,
literal|"66"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|nest
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"Y"
argument_list|,
name|parent
argument_list|,
literal|"Y"
argument_list|)
argument_list|,
name|doc
argument_list|(
name|child
argument_list|,
literal|"a"
argument_list|,
literal|"id"
argument_list|,
literal|"66"
argument_list|)
argument_list|,
name|doc
argument_list|(
name|child
argument_list|,
literal|"b"
argument_list|,
literal|"id"
argument_list|,
literal|"66"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|overwritten
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"X"
else|:
literal|"Y"
decl_stmt|;
name|String
name|dubbed
init|=
name|overwritten
operator|==
literal|"X"
condition|?
literal|"Y"
else|:
literal|"X"
decl_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|nest
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
name|overwritten
argument_list|,
name|parent
argument_list|,
name|overwritten
argument_list|)
argument_list|,
name|doc
argument_list|(
name|child
argument_list|,
literal|"c"
argument_list|,
literal|"id"
argument_list|,
literal|"66"
argument_list|)
argument_list|,
name|doc
argument_list|(
name|child
argument_list|,
literal|"d"
argument_list|,
literal|"id"
argument_list|,
literal|"66"
argument_list|)
argument_list|)
argument_list|,
literal|"overwrite"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|nest
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
name|dubbed
argument_list|,
name|parent
argument_list|,
name|dubbed
argument_list|)
argument_list|,
name|doc
argument_list|(
name|child
argument_list|,
literal|"c"
argument_list|,
literal|"id"
argument_list|,
literal|"66"
argument_list|)
argument_list|,
name|doc
argument_list|(
name|child
argument_list|,
literal|"d"
argument_list|,
literal|"id"
argument_list|,
literal|"66"
argument_list|)
argument_list|)
argument_list|,
literal|"overwrite"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|parent
operator|+
literal|":"
operator|+
name|overwritten
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|parent
operator|+
literal|":"
operator|+
name|dubbed
argument_list|,
literal|"//*[@numFound='2']"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|SolrIndexSearcher
name|searcher
init|=
name|getSearcher
argument_list|()
decl_stmt|;
name|assertSingleParentOf
argument_list|(
name|searcher
argument_list|,
name|one
argument_list|(
literal|"ab"
argument_list|)
argument_list|,
name|dubbed
argument_list|)
expr_stmt|;
specifier|final
name|TopDocs
name|docs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|join
argument_list|(
name|one
argument_list|(
literal|"cd"
argument_list|)
argument_list|)
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
specifier|final
name|String
name|pAct
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|docs
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
name|parent
argument_list|)
operator|+
name|searcher
operator|.
name|doc
argument_list|(
name|docs
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pAct
operator|.
name|contains
argument_list|(
name|dubbed
argument_list|)
operator|&&
name|pAct
operator|.
name|contains
argument_list|(
name|overwritten
argument_list|)
operator|&&
name|pAct
operator|.
name|length
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:66"
argument_list|,
literal|"//*[@numFound='6']"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|child
operator|+
literal|":(a b)"
argument_list|,
literal|"//*[@numFound='2']"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|child
operator|+
literal|":(c d)"
argument_list|,
literal|"//*[@numFound='4']"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|nest
specifier|private
specifier|static
name|XmlDoc
name|nest
parameter_list|(
name|XmlDoc
name|parent
parameter_list|,
name|XmlDoc
modifier|...
name|children
parameter_list|)
block|{
name|XmlDoc
name|xmlDoc
init|=
operator|new
name|XmlDoc
argument_list|()
decl_stmt|;
name|xmlDoc
operator|.
name|xml
operator|=
name|parent
operator|.
name|xml
operator|.
name|replace
argument_list|(
literal|"</doc>"
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|children
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"[\\[\\]]"
argument_list|,
literal|""
argument_list|)
operator|+
literal|"</doc>"
argument_list|)
expr_stmt|;
return|return
name|xmlDoc
return|;
block|}
annotation|@
name|Test
DECL|method|testBasics
specifier|public
name|void
name|testBasics
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Document
argument_list|>
name|blocks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|block
argument_list|(
literal|"abcD"
argument_list|)
argument_list|,
name|block
argument_list|(
literal|"efgH"
argument_list|)
argument_list|,
name|merge
argument_list|(
name|block
argument_list|(
literal|"ijkL"
argument_list|)
argument_list|,
name|block
argument_list|(
literal|"mnoP"
argument_list|)
argument_list|)
argument_list|,
name|merge
argument_list|(
name|block
argument_list|(
literal|"qrsT"
argument_list|)
argument_list|,
name|block
argument_list|(
literal|"uvwX"
argument_list|)
argument_list|)
argument_list|,
name|block
argument_list|(
literal|"Y"
argument_list|)
argument_list|,
name|block
argument_list|(
literal|"Z"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|blocks
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"{}"
argument_list|,
name|blocks
argument_list|)
expr_stmt|;
for|for
control|(
name|Future
argument_list|<
name|Void
argument_list|>
name|f
range|:
name|exe
operator|.
name|invokeAll
argument_list|(
name|callables
argument_list|(
name|blocks
argument_list|)
argument_list|)
control|)
block|{
name|f
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// exceptions?
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|SolrIndexSearcher
name|searcher
init|=
name|getSearcher
argument_list|()
decl_stmt|;
comment|// final String resp = h.query(req("q","*:*", "sort","_docid_ asc", "rows",
comment|// "10000"));
comment|// log.trace(resp);
name|int
name|parentsNum
init|=
literal|"DHLPTXYZ"
operator|.
name|length
argument_list|()
decl_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|parent
operator|+
literal|":[* TO *]"
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
name|parentsNum
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|child
operator|+
literal|":[* TO *]"
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
operator|(
operator|(
literal|'z'
operator|-
literal|'a'
operator|+
literal|1
operator|)
operator|-
name|parentsNum
operator|)
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"*:*"
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
operator|(
literal|'z'
operator|-
literal|'a'
operator|+
literal|1
operator|)
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertSingleParentOf
argument_list|(
name|searcher
argument_list|,
name|one
argument_list|(
literal|"abc"
argument_list|)
argument_list|,
literal|"D"
argument_list|)
expr_stmt|;
name|assertSingleParentOf
argument_list|(
name|searcher
argument_list|,
name|one
argument_list|(
literal|"efg"
argument_list|)
argument_list|,
literal|"H"
argument_list|)
expr_stmt|;
name|assertSingleParentOf
argument_list|(
name|searcher
argument_list|,
name|one
argument_list|(
literal|"ijk"
argument_list|)
argument_list|,
literal|"L"
argument_list|)
expr_stmt|;
name|assertSingleParentOf
argument_list|(
name|searcher
argument_list|,
name|one
argument_list|(
literal|"mno"
argument_list|)
argument_list|,
literal|"P"
argument_list|)
expr_stmt|;
name|assertSingleParentOf
argument_list|(
name|searcher
argument_list|,
name|one
argument_list|(
literal|"qrs"
argument_list|)
argument_list|,
literal|"T"
argument_list|)
expr_stmt|;
name|assertSingleParentOf
argument_list|(
name|searcher
argument_list|,
name|one
argument_list|(
literal|"uvw"
argument_list|)
argument_list|,
literal|"X"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|child
operator|+
literal|":(a b c)"
argument_list|,
literal|"sort"
argument_list|,
literal|"_docid_ asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
comment|// assert physical order of children
literal|"//doc[1]/arr[@name='child_s']/str[text()='a']"
argument_list|,
literal|"//doc[2]/arr[@name='child_s']/str[text()='b']"
argument_list|,
literal|"//doc[3]/arr[@name='child_s']/str[text()='c']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExceptionThrown
specifier|public
name|void
name|testExceptionThrown
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|abcD
init|=
name|block
argument_list|(
literal|"abcD"
argument_list|)
operator|.
name|asXML
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|abcD
argument_list|)
expr_stmt|;
name|assertBlockU
argument_list|(
name|abcD
argument_list|)
expr_stmt|;
name|Document
name|docToFail
init|=
name|DocumentHelper
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|Element
name|root
init|=
name|docToFail
operator|.
name|addElement
argument_list|(
literal|"add"
argument_list|)
decl_stmt|;
name|Element
name|doc1
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"doc"
argument_list|)
decl_stmt|;
name|attachField
argument_list|(
name|doc1
argument_list|,
literal|"id"
argument_list|,
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|attachField
argument_list|(
name|doc1
argument_list|,
name|parent
argument_list|,
literal|"Y"
argument_list|)
expr_stmt|;
name|attachField
argument_list|(
name|doc1
argument_list|,
literal|"sample_i"
argument_list|,
literal|"notanumber/ignore_exception"
argument_list|)
expr_stmt|;
name|Element
name|subDoc1
init|=
name|doc1
operator|.
name|addElement
argument_list|(
literal|"doc"
argument_list|)
decl_stmt|;
name|attachField
argument_list|(
name|subDoc1
argument_list|,
literal|"id"
argument_list|,
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|attachField
argument_list|(
name|subDoc1
argument_list|,
name|child
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|Element
name|doc2
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"doc"
argument_list|)
decl_stmt|;
name|attachField
argument_list|(
name|doc2
argument_list|,
literal|"id"
argument_list|,
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|attachField
argument_list|(
name|doc2
argument_list|,
name|parent
argument_list|,
literal|"W"
argument_list|)
expr_stmt|;
name|assertFailedBlockU
argument_list|(
name|docToFail
operator|.
name|asXML
argument_list|()
argument_list|)
expr_stmt|;
name|assertBlockU
argument_list|(
name|block
argument_list|(
literal|"efgH"
argument_list|)
operator|.
name|asXML
argument_list|()
argument_list|)
expr_stmt|;
name|assertBlockU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|SolrIndexSearcher
name|searcher
init|=
name|getSearcher
argument_list|()
decl_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,parent_s,child_s"
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
literal|"abcDefgH"
operator|.
name|length
argument_list|()
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertSingleParentOf
argument_list|(
name|searcher
argument_list|,
name|one
argument_list|(
literal|"abc"
argument_list|)
argument_list|,
literal|"D"
argument_list|)
expr_stmt|;
name|assertSingleParentOf
argument_list|(
name|searcher
argument_list|,
name|one
argument_list|(
literal|"efg"
argument_list|)
argument_list|,
literal|"H"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|child
operator|+
literal|":x"
argument_list|)
argument_list|,
literal|"//*[@numFound='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|parent
operator|+
literal|":Y"
argument_list|)
argument_list|,
literal|"//*[@numFound='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|parent
operator|+
literal|":W"
argument_list|)
argument_list|,
literal|"//*[@numFound='0']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
annotation|@
name|Test
DECL|method|testSolrJXML
specifier|public
name|void
name|testSolrJXML
parameter_list|()
throws|throws
name|IOException
block|{
name|UpdateRequest
name|req
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SolrInputDocument
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|SolrInputDocument
name|document1
init|=
operator|new
name|SolrInputDocument
argument_list|()
block|{
block|{
specifier|final
name|String
name|id
init|=
name|id
argument_list|()
decl_stmt|;
name|addField
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|addField
argument_list|(
literal|"parent_s"
argument_list|,
literal|"X"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|SolrInputDocument
argument_list|>
name|ch1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|SolrInputDocument
argument_list|()
block|{
block|{
name|addField
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|addField
argument_list|(
literal|"child_s"
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
operator|new
name|SolrInputDocument
argument_list|()
block|{
block|{
name|addField
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|addField
argument_list|(
literal|"child_s"
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|ch1
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|addChildDocuments
parameter_list|(
name|ch1
parameter_list|)
constructor_decl|;
block|}
block|}
decl_stmt|;
name|SolrInputDocument
name|document2
init|=
operator|new
name|SolrInputDocument
argument_list|()
block|{
block|{
specifier|final
name|String
name|id
init|=
name|id
argument_list|()
decl_stmt|;
name|addField
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|addField
argument_list|(
literal|"parent_s"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|addChildDocument
argument_list|(
operator|new
name|SolrInputDocument
argument_list|()
block|{
block|{
name|addField
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|addField
argument_list|(
literal|"child_s"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addChildDocument
argument_list|(
operator|new
name|SolrInputDocument
argument_list|()
block|{
block|{
name|addField
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|addField
argument_list|(
literal|"child_s"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|document1
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|document2
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|docs
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|add
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|RequestWriter
name|requestWriter
init|=
operator|new
name|RequestWriter
argument_list|()
decl_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|requestWriter
operator|.
name|write
argument_list|(
name|req
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|assertBlockU
argument_list|(
name|os
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|SolrIndexSearcher
name|searcher
init|=
name|getSearcher
argument_list|()
decl_stmt|;
name|assertSingleParentOf
argument_list|(
name|searcher
argument_list|,
name|one
argument_list|(
literal|"yz"
argument_list|)
argument_list|,
literal|"X"
argument_list|)
expr_stmt|;
name|assertSingleParentOf
argument_list|(
name|searcher
argument_list|,
name|one
argument_list|(
literal|"bc"
argument_list|)
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
block|}
comment|//This is the same as testSolrJXML above but uses the XMLLoader
comment|// to illustrate the structure of the XML documents
annotation|@
name|Test
DECL|method|testXML
specifier|public
name|void
name|testXML
parameter_list|()
throws|throws
name|IOException
throws|,
name|XMLStreamException
block|{
name|UpdateRequest
name|req
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SolrInputDocument
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|xml_doc1
init|=
literal|"<doc>"
operator|+
literal|"<field name=\"id\">1</field>"
operator|+
literal|"<field name=\"parent_s\">X</field>"
operator|+
literal|"<doc>  "
operator|+
literal|"<field name=\"id\">2</field>"
operator|+
literal|"<field name=\"child_s\">y</field>"
operator|+
literal|"</doc>"
operator|+
literal|"<doc>  "
operator|+
literal|"<field name=\"id\">3</field>"
operator|+
literal|"<field name=\"child_s\">z</field>"
operator|+
literal|"</doc>"
operator|+
literal|"</doc>"
decl_stmt|;
name|String
name|xml_doc2
init|=
literal|"<doc>"
operator|+
literal|"<field name=\"id\">4</field>"
operator|+
literal|"<field name=\"parent_s\">A</field>"
operator|+
literal|"<doc>  "
operator|+
literal|"<field name=\"id\">5</field>"
operator|+
literal|"<field name=\"child_s\">b</field>"
operator|+
literal|"</doc>"
operator|+
literal|"<doc>  "
operator|+
literal|"<field name=\"id\">6</field>"
operator|+
literal|"<field name=\"child_s\">c</field>"
operator|+
literal|"</doc>"
operator|+
literal|"</doc>"
decl_stmt|;
name|XMLStreamReader
name|parser
init|=
name|inputFactory
operator|.
name|createXMLStreamReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml_doc1
argument_list|)
argument_list|)
decl_stmt|;
name|parser
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// read the START document...
comment|//null for the processor is all right here
name|XMLLoader
name|loader
init|=
operator|new
name|XMLLoader
argument_list|()
decl_stmt|;
name|SolrInputDocument
name|document1
init|=
name|loader
operator|.
name|readDoc
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|XMLStreamReader
name|parser2
init|=
name|inputFactory
operator|.
name|createXMLStreamReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml_doc2
argument_list|)
argument_list|)
decl_stmt|;
name|parser2
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// read the START document...
comment|//null for the processor is all right here
comment|//XMLLoader loader = new XMLLoader();
name|SolrInputDocument
name|document2
init|=
name|loader
operator|.
name|readDoc
argument_list|(
name|parser2
argument_list|)
decl_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|document1
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|document2
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|docs
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|add
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|RequestWriter
name|requestWriter
init|=
operator|new
name|RequestWriter
argument_list|()
decl_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|requestWriter
operator|.
name|write
argument_list|(
name|req
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|assertBlockU
argument_list|(
name|os
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|SolrIndexSearcher
name|searcher
init|=
name|getSearcher
argument_list|()
decl_stmt|;
name|assertSingleParentOf
argument_list|(
name|searcher
argument_list|,
name|one
argument_list|(
literal|"yz"
argument_list|)
argument_list|,
literal|"X"
argument_list|)
expr_stmt|;
name|assertSingleParentOf
argument_list|(
name|searcher
argument_list|,
name|one
argument_list|(
literal|"bc"
argument_list|)
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJavaBinCodec
specifier|public
name|void
name|testJavaBinCodec
parameter_list|()
throws|throws
name|IOException
block|{
comment|//actually this test must be in other test class
name|SolrInputDocument
name|topDocument
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|topDocument
operator|.
name|addField
argument_list|(
literal|"parent_f1"
argument_list|,
literal|"v1"
argument_list|)
expr_stmt|;
name|topDocument
operator|.
name|addField
argument_list|(
literal|"parent_f2"
argument_list|,
literal|"v2"
argument_list|)
expr_stmt|;
name|int
name|childsNum
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|childsNum
condition|;
operator|++
name|index
control|)
block|{
name|addChildren
argument_list|(
literal|"child"
argument_list|,
name|topDocument
argument_list|,
name|index
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
operator|new
name|JavaBinCodec
argument_list|()
operator|.
name|marshal
argument_list|(
name|topDocument
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
name|os
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
comment|//now read the Object back
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|SolrInputDocument
name|result
init|=
operator|(
name|SolrInputDocument
operator|)
operator|new
name|JavaBinCodec
argument_list|()
operator|.
name|unmarshal
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v1"
argument_list|,
name|result
operator|.
name|getFieldValue
argument_list|(
literal|"parent_f1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v2"
argument_list|,
name|result
operator|.
name|getFieldValue
argument_list|(
literal|"parent_f2"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SolrInputDocument
argument_list|>
name|resultChilds
init|=
name|result
operator|.
name|getChildDocuments
argument_list|()
decl_stmt|;
name|int
name|resultChildsSize
init|=
name|resultChilds
operator|==
literal|null
condition|?
literal|0
else|:
name|resultChilds
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|childsNum
argument_list|,
name|resultChildsSize
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|childIndex
init|=
literal|0
init|;
name|childIndex
operator|<
name|childsNum
condition|;
operator|++
name|childIndex
control|)
block|{
name|SolrInputDocument
name|child
init|=
name|resultChilds
operator|.
name|get
argument_list|(
name|childIndex
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|fieldNum
init|=
literal|0
init|;
name|fieldNum
operator|<
name|childIndex
condition|;
operator|++
name|fieldNum
control|)
block|{
name|assertEquals
argument_list|(
name|childIndex
operator|+
literal|"value"
operator|+
name|fieldNum
argument_list|,
name|child
operator|.
name|getFieldValue
argument_list|(
name|childIndex
operator|+
literal|"child"
operator|+
name|fieldNum
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|SolrInputDocument
argument_list|>
name|grandChilds
init|=
name|child
operator|.
name|getChildDocuments
argument_list|()
decl_stmt|;
name|int
name|grandChildsSize
init|=
name|grandChilds
operator|==
literal|null
condition|?
literal|0
else|:
name|grandChilds
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|childIndex
operator|*
literal|2
argument_list|,
name|grandChildsSize
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|grandIndex
init|=
literal|0
init|;
name|grandIndex
operator|<
name|childIndex
operator|*
literal|2
condition|;
operator|++
name|grandIndex
control|)
block|{
name|SolrInputDocument
name|grandChild
init|=
name|grandChilds
operator|.
name|get
argument_list|(
name|grandIndex
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|grandChild
operator|.
name|hasChildDocuments
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|fieldNum
init|=
literal|0
init|;
name|fieldNum
operator|<
name|grandIndex
condition|;
operator|++
name|fieldNum
control|)
block|{
name|assertEquals
argument_list|(
name|grandIndex
operator|+
literal|"value"
operator|+
name|fieldNum
argument_list|,
name|grandChild
operator|.
name|getFieldValue
argument_list|(
name|grandIndex
operator|+
literal|"grand"
operator|+
name|fieldNum
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|addChildren
specifier|private
name|void
name|addChildren
parameter_list|(
name|String
name|prefix
parameter_list|,
name|SolrInputDocument
name|topDocument
parameter_list|,
name|int
name|childIndex
parameter_list|,
name|boolean
name|lastLevel
parameter_list|)
block|{
name|SolrInputDocument
name|childDocument
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|childIndex
condition|;
operator|++
name|index
control|)
block|{
name|childDocument
operator|.
name|addField
argument_list|(
name|childIndex
operator|+
name|prefix
operator|+
name|index
argument_list|,
name|childIndex
operator|+
literal|"value"
operator|+
name|index
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|lastLevel
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childIndex
operator|*
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|addChildren
argument_list|(
literal|"grand"
argument_list|,
name|childDocument
argument_list|,
name|i
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|topDocument
operator|.
name|addChildDocument
argument_list|(
name|childDocument
argument_list|)
expr_stmt|;
block|}
comment|/**    * on the given abcD it generates one parent doc, taking D from the tail and    * two subdocs relaitons ab and c uniq ids are supplied also    *     *<pre>    * {@code    *<add>    *<doc>    *<field name="parent_s">D</field>     *<doc>     *<field name="child_s">a</field>    *<field name="type_s">1</field>    *</doc>     *<doc>     *<field name="child_s">b</field>     *<field name="type_s">1</field>    *</doc>     *<doc>     *<field name="child_s">c</field>    *<field name="type_s">2</field>     *</doc>     *</doc>     *</add>    * }    *</pre>    * */
DECL|method|block
specifier|private
name|Document
name|block
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|Document
name|document
init|=
name|DocumentHelper
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|Element
name|root
init|=
name|document
operator|.
name|addElement
argument_list|(
literal|"add"
argument_list|)
decl_stmt|;
name|Element
name|doc
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"doc"
argument_list|)
decl_stmt|;
if|if
condition|(
name|string
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// last character is a top parent
name|attachField
argument_list|(
name|doc
argument_list|,
name|parent
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|string
operator|.
name|charAt
argument_list|(
name|string
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|attachField
argument_list|(
name|doc
argument_list|,
literal|"id"
argument_list|,
name|id
argument_list|()
argument_list|)
expr_stmt|;
comment|// add subdocs
name|int
name|type
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|string
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|String
name|relation
init|=
name|string
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|i
operator|+
literal|2
argument_list|,
name|string
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|attachSubDocs
argument_list|(
name|doc
argument_list|,
name|relation
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|type
operator|++
expr_stmt|;
block|}
block|}
return|return
name|document
return|;
block|}
DECL|method|attachSubDocs
specifier|private
name|void
name|attachSubDocs
parameter_list|(
name|Element
name|parent
parameter_list|,
name|String
name|relation
parameter_list|,
name|int
name|typeValue
parameter_list|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|relation
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Element
name|document
init|=
name|parent
operator|.
name|addElement
argument_list|(
literal|"doc"
argument_list|)
decl_stmt|;
name|attachField
argument_list|(
name|document
argument_list|,
name|child
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|relation
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|attachField
argument_list|(
name|document
argument_list|,
literal|"id"
argument_list|,
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|attachField
argument_list|(
name|document
argument_list|,
name|type
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|typeValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Merges two documents like    *     *<pre>    * {@code<add>...</add> +<add>...</add> =<add>... + ...</add>}    *</pre>    *     * @param doc1    *          first document    * @param doc2    *          second document    * @return merged document    */
DECL|method|merge
specifier|private
name|Document
name|merge
parameter_list|(
name|Document
name|doc1
parameter_list|,
name|Document
name|doc2
parameter_list|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|list
init|=
name|doc2
operator|.
name|getRootElement
argument_list|()
operator|.
name|elements
argument_list|()
decl_stmt|;
for|for
control|(
name|Element
name|element
range|:
name|list
control|)
block|{
name|doc1
operator|.
name|getRootElement
argument_list|()
operator|.
name|add
argument_list|(
name|element
operator|.
name|detach
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|doc1
return|;
block|}
DECL|method|attachField
specifier|private
name|void
name|attachField
parameter_list|(
name|Element
name|root
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|Element
name|field
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|field
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
name|field
operator|.
name|addText
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|id
specifier|private
specifier|static
name|String
name|id
parameter_list|()
block|{
return|return
literal|""
operator|+
name|counter
operator|.
name|incrementAndGet
argument_list|()
return|;
block|}
DECL|method|one
specifier|private
name|String
name|one
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
literal|""
operator|+
name|string
operator|.
name|charAt
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|string
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|assertSingleParentOf
specifier|protected
name|void
name|assertSingleParentOf
parameter_list|(
specifier|final
name|SolrIndexSearcher
name|searcher
parameter_list|,
specifier|final
name|String
name|childTerm
parameter_list|,
name|String
name|parentExp
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|TopDocs
name|docs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|join
argument_list|(
name|childTerm
argument_list|)
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
specifier|final
name|String
name|pAct
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|docs
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|parentExp
argument_list|,
name|pAct
argument_list|)
expr_stmt|;
block|}
DECL|method|join
specifier|protected
name|ToParentBlockJoinQuery
name|join
parameter_list|(
specifier|final
name|String
name|childTerm
parameter_list|)
block|{
return|return
operator|new
name|ToParentBlockJoinQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|child
argument_list|,
name|childTerm
argument_list|)
argument_list|)
argument_list|,
operator|new
name|BitDocIdSetCachingWrapperFilter
argument_list|(
operator|new
name|QueryWrapperFilter
argument_list|(
operator|new
name|TermRangeQuery
argument_list|(
name|parent
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|ScoreMode
operator|.
name|None
argument_list|)
return|;
block|}
DECL|method|callables
specifier|private
name|Collection
argument_list|<
name|?
extends|extends
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|>
name|callables
parameter_list|(
name|List
argument_list|<
name|Document
argument_list|>
name|blocks
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|>
name|rez
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Document
name|block
range|:
name|blocks
control|)
block|{
specifier|final
name|String
name|msg
init|=
name|block
operator|.
name|asXML
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|rez
operator|.
name|add
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
block|{
name|assertBlockU
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|rez
operator|.
name|add
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
block|{
name|assertBlockU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|rez
return|;
block|}
DECL|method|assertBlockU
specifier|private
name|void
name|assertBlockU
parameter_list|(
specifier|final
name|String
name|msg
parameter_list|)
block|{
name|assertBlockU
argument_list|(
name|msg
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertFailedBlockU
specifier|private
name|void
name|assertFailedBlockU
parameter_list|(
specifier|final
name|String
name|msg
parameter_list|)
block|{
try|try
block|{
name|assertBlockU
argument_list|(
name|msg
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expecting fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// gotcha
block|}
block|}
DECL|method|assertBlockU
specifier|private
name|void
name|assertBlockU
parameter_list|(
specifier|final
name|String
name|msg
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
try|try
block|{
name|String
name|res
init|=
name|h
operator|.
name|checkUpdateStatus
argument_list|(
name|msg
argument_list|,
name|expected
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"update was not successful: "
operator|+
name|res
operator|+
literal|" expected: "
operator|+
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid XML"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class
end_unit
