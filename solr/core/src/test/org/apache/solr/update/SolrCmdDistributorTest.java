begin_unit
begin_package
DECL|package|org.apache.solr.update
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LogDocMergePolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|BaseDistributedSearchTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|LukeRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|UpdateParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrEventListener
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|SolrDispatchFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|MockStreamingSolrClients
operator|.
name|Exp
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|SolrCmdDistributor
operator|.
name|Error
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|SolrCmdDistributor
operator|.
name|Node
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|SolrCmdDistributor
operator|.
name|RetryNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|SolrCmdDistributor
operator|.
name|StdNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
operator|.
name|DistributedUpdateProcessor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_class
DECL|class|SolrCmdDistributorTest
specifier|public
class|class
name|SolrCmdDistributorTest
extends|extends
name|BaseDistributedSearchTestCase
block|{
DECL|field|id
specifier|private
name|AtomicInteger
name|id
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// we can't use the Randomized merge policy because the test depends on
comment|// being able to call optimize to have all deletes expunged.
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.tests.mergePolicy"
argument_list|,
name|LogDocMergePolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|field|updateShardHandler
specifier|private
name|UpdateShardHandler
name|updateShardHandler
decl_stmt|;
DECL|method|SolrCmdDistributorTest
specifier|public
name|SolrCmdDistributorTest
parameter_list|()
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|updateShardHandler
operator|=
operator|new
name|UpdateShardHandler
argument_list|(
name|UpdateShardHandlerConfig
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|stress
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|getSchemaFile
specifier|public
specifier|static
name|String
name|getSchemaFile
parameter_list|()
block|{
return|return
literal|"schema.xml"
return|;
block|}
DECL|method|getSolrConfigFile
specifier|public
specifier|static
name|String
name|getSolrConfigFile
parameter_list|()
block|{
comment|// use this because it has /update and is minimal
return|return
literal|"solrconfig-tlog.xml"
return|;
block|}
comment|// TODO: for now we redefine this method so that it pulls from the above
comment|// we don't get helpful override behavior due to the method being static
annotation|@
name|Override
DECL|method|createServers
specifier|protected
name|void
name|createServers
parameter_list|(
name|int
name|numShards
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"configSetBaseDir"
argument_list|,
name|TEST_HOME
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|controlHome
init|=
name|testDir
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"control"
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|seedSolrHome
argument_list|(
name|controlHome
argument_list|)
expr_stmt|;
name|writeCoreProperties
argument_list|(
name|controlHome
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"cores"
argument_list|)
operator|.
name|resolve
argument_list|(
name|DEFAULT_TEST_CORENAME
argument_list|)
argument_list|,
name|DEFAULT_TEST_CORENAME
argument_list|)
expr_stmt|;
name|controlJetty
operator|=
name|createJetty
argument_list|(
name|controlHome
argument_list|,
name|testDir
operator|+
literal|"/control/data"
argument_list|,
literal|null
argument_list|,
name|getSolrConfigFile
argument_list|()
argument_list|,
name|getSchemaFile
argument_list|()
argument_list|)
expr_stmt|;
name|controlClient
operator|=
name|createNewSolrClient
argument_list|(
name|controlJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|shardsArr
operator|=
operator|new
name|String
index|[
name|numShards
index|]
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numShards
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|String
name|shardname
init|=
literal|"shard"
operator|+
name|i
decl_stmt|;
name|Path
name|shardHome
init|=
name|testDir
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|shardname
argument_list|)
decl_stmt|;
name|seedSolrHome
argument_list|(
name|shardHome
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|coresPath
init|=
name|shardHome
operator|.
name|resolve
argument_list|(
literal|"cores"
argument_list|)
decl_stmt|;
name|writeCoreProperties
argument_list|(
name|coresPath
operator|.
name|resolve
argument_list|(
name|DEFAULT_TEST_CORENAME
argument_list|)
argument_list|,
name|DEFAULT_TEST_CORENAME
argument_list|)
expr_stmt|;
name|JettySolrRunner
name|j
init|=
name|createJetty
argument_list|(
name|shardHome
operator|.
name|toFile
argument_list|()
argument_list|,
name|testDir
operator|+
literal|"/shard"
operator|+
name|i
operator|+
literal|"/data"
argument_list|,
literal|null
argument_list|,
name|getSolrConfigFile
argument_list|()
argument_list|,
name|getSchemaFile
argument_list|()
argument_list|)
decl_stmt|;
name|jettys
operator|.
name|add
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|clients
operator|.
name|add
argument_list|(
name|createNewSolrClient
argument_list|(
name|j
operator|.
name|getLocalPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|shardStr
init|=
name|buildUrl
argument_list|(
name|j
operator|.
name|getLocalPort
argument_list|()
argument_list|)
decl_stmt|;
name|shardsArr
index|[
name|i
index|]
operator|=
name|shardStr
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|shardStr
argument_list|)
expr_stmt|;
block|}
name|shards
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|ShardsFixed
argument_list|(
name|num
operator|=
literal|4
argument_list|)
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|SolrCmdDistributor
name|cmdDistrib
init|=
operator|new
name|SolrCmdDistributor
argument_list|(
name|updateShardHandler
argument_list|)
decl_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Node
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ZkNodeProps
name|nodeProps
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
operator|(
operator|(
name|HttpSolrClient
operator|)
name|controlClient
operator|)
operator|.
name|getBaseURL
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
operator|new
name|StdNode
argument_list|(
operator|new
name|ZkCoreNodeProps
argument_list|(
name|nodeProps
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// add one doc to controlClient
name|AddUpdateCommand
name|cmd
init|=
operator|new
name|AddUpdateCommand
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|solrDoc
operator|=
name|sdoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|cmdDistrib
operator|.
name|distribAdd
argument_list|(
name|cmd
argument_list|,
name|nodes
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|CommitUpdateCommand
name|ccmd
init|=
operator|new
name|CommitUpdateCommand
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|DistributedUpdateProcessor
operator|.
name|COMMIT_END_POINT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cmdDistrib
operator|.
name|distribCommit
argument_list|(
name|ccmd
argument_list|,
name|nodes
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|cmdDistrib
operator|.
name|finish
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Error
argument_list|>
name|errors
init|=
name|cmdDistrib
operator|.
name|getErrors
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|errors
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|errors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|numFound
init|=
name|controlClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numFound
argument_list|)
expr_stmt|;
name|HttpSolrClient
name|client
init|=
operator|(
name|HttpSolrClient
operator|)
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|nodeProps
operator|=
operator|new
name|ZkNodeProps
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
name|client
operator|.
name|getBaseURL
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
operator|new
name|StdNode
argument_list|(
operator|new
name|ZkCoreNodeProps
argument_list|(
name|nodeProps
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// add another 2 docs to control and 3 to client
name|cmdDistrib
operator|=
operator|new
name|SolrCmdDistributor
argument_list|(
name|updateShardHandler
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|solrDoc
operator|=
name|sdoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|DistributedUpdateProcessor
operator|.
name|COMMIT_END_POINT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cmdDistrib
operator|.
name|distribAdd
argument_list|(
name|cmd
argument_list|,
name|nodes
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|int
name|id2
init|=
name|id
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|AddUpdateCommand
name|cmd2
init|=
operator|new
name|AddUpdateCommand
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|cmd2
operator|.
name|solrDoc
operator|=
name|sdoc
argument_list|(
literal|"id"
argument_list|,
name|id2
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|DistributedUpdateProcessor
operator|.
name|COMMIT_END_POINT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cmdDistrib
operator|.
name|distribAdd
argument_list|(
name|cmd2
argument_list|,
name|nodes
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|AddUpdateCommand
name|cmd3
init|=
operator|new
name|AddUpdateCommand
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|cmd3
operator|.
name|solrDoc
operator|=
name|sdoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|DistributedUpdateProcessor
operator|.
name|COMMIT_END_POINT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cmdDistrib
operator|.
name|distribAdd
argument_list|(
name|cmd3
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|nodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|DistributedUpdateProcessor
operator|.
name|COMMIT_END_POINT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cmdDistrib
operator|.
name|distribCommit
argument_list|(
name|ccmd
argument_list|,
name|nodes
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|cmdDistrib
operator|.
name|finish
argument_list|()
expr_stmt|;
name|errors
operator|=
name|cmdDistrib
operator|.
name|getErrors
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|errors
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|errors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SolrDocumentList
name|results
init|=
name|controlClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
decl_stmt|;
name|numFound
operator|=
name|results
operator|.
name|getNumFound
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|results
operator|.
name|toString
argument_list|()
argument_list|,
literal|3
argument_list|,
name|numFound
argument_list|)
expr_stmt|;
name|numFound
operator|=
name|client
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|numFound
argument_list|)
expr_stmt|;
comment|// now delete doc 2 which is on both control and client1
name|DeleteUpdateCommand
name|dcmd
init|=
operator|new
name|DeleteUpdateCommand
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|dcmd
operator|.
name|id
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|id2
argument_list|)
expr_stmt|;
name|cmdDistrib
operator|=
operator|new
name|SolrCmdDistributor
argument_list|(
name|updateShardHandler
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|DistributedUpdateProcessor
operator|.
name|COMMIT_END_POINT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cmdDistrib
operator|.
name|distribDelete
argument_list|(
name|dcmd
argument_list|,
name|nodes
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|DistributedUpdateProcessor
operator|.
name|COMMIT_END_POINT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cmdDistrib
operator|.
name|distribCommit
argument_list|(
name|ccmd
argument_list|,
name|nodes
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|cmdDistrib
operator|.
name|finish
argument_list|()
expr_stmt|;
name|errors
operator|=
name|cmdDistrib
operator|.
name|getErrors
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|errors
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|errors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|controlClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
expr_stmt|;
name|numFound
operator|=
name|results
operator|.
name|getNumFound
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|results
operator|.
name|toString
argument_list|()
argument_list|,
literal|2
argument_list|,
name|numFound
argument_list|)
expr_stmt|;
name|numFound
operator|=
name|client
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|results
operator|.
name|toString
argument_list|()
argument_list|,
literal|2
argument_list|,
name|numFound
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrClient
name|c
range|:
name|clients
control|)
block|{
name|c
operator|.
name|optimize
argument_list|()
expr_stmt|;
comment|//System.out.println(clients.get(0).request(new LukeRequest()));
block|}
name|cmdDistrib
operator|=
operator|new
name|SolrCmdDistributor
argument_list|(
name|updateShardHandler
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
name|atLeast
argument_list|(
literal|303
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|nodes
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|SolrClient
name|c
range|:
name|clients
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|HttpSolrClient
name|httpClient
init|=
operator|(
name|HttpSolrClient
operator|)
name|c
decl_stmt|;
name|nodeProps
operator|=
operator|new
name|ZkNodeProps
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
name|httpClient
operator|.
name|getBaseURL
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
operator|new
name|StdNode
argument_list|(
operator|new
name|ZkCoreNodeProps
argument_list|(
name|nodeProps
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AddUpdateCommand
name|c
init|=
operator|new
name|AddUpdateCommand
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|c
operator|.
name|solrDoc
operator|=
name|sdoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|cmdDistrib
operator|.
name|distribAdd
argument_list|(
name|c
argument_list|,
name|nodes
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
name|nodes
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|SolrClient
name|c
range|:
name|clients
control|)
block|{
name|HttpSolrClient
name|httpClient
init|=
operator|(
name|HttpSolrClient
operator|)
name|c
decl_stmt|;
name|nodeProps
operator|=
operator|new
name|ZkNodeProps
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
name|httpClient
operator|.
name|getBaseURL
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
operator|new
name|StdNode
argument_list|(
operator|new
name|ZkCoreNodeProps
argument_list|(
name|nodeProps
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|AtomicInteger
name|commits
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|jettys
control|)
block|{
name|CoreContainer
name|cores
init|=
operator|(
operator|(
name|SolrDispatchFilter
operator|)
name|jetty
operator|.
name|getDispatchFilter
argument_list|()
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getCores
argument_list|()
decl_stmt|;
try|try
init|(
name|SolrCore
name|core
init|=
name|cores
operator|.
name|getCore
argument_list|(
literal|"collection1"
argument_list|)
init|)
block|{
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|registerCommitCallback
argument_list|(
operator|new
name|SolrEventListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{           }
annotation|@
name|Override
specifier|public
name|void
name|postSoftCommit
parameter_list|()
block|{           }
annotation|@
name|Override
specifier|public
name|void
name|postCommit
parameter_list|()
block|{
name|commits
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|newSearcher
parameter_list|(
name|SolrIndexSearcher
name|newSearcher
parameter_list|,
name|SolrIndexSearcher
name|currentSearcher
parameter_list|)
block|{           }
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|DistributedUpdateProcessor
operator|.
name|COMMIT_END_POINT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cmdDistrib
operator|.
name|distribCommit
argument_list|(
name|ccmd
argument_list|,
name|nodes
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|cmdDistrib
operator|.
name|finish
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|getShardCount
argument_list|()
argument_list|,
name|commits
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrClient
name|c
range|:
name|clients
control|)
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|resp
init|=
name|c
operator|.
name|request
argument_list|(
operator|new
name|LukeRequest
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"SOLR-3428: We only did adds - there should be no deletes"
argument_list|,
operator|(
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|resp
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"numDocs"
argument_list|)
argument_list|,
operator|(
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|resp
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"maxDoc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|testMaxRetries
argument_list|()
expr_stmt|;
name|testOneRetry
argument_list|()
expr_stmt|;
name|testRetryNodeAgainstBadAddress
argument_list|()
expr_stmt|;
name|testRetryNodeWontRetrySocketError
argument_list|()
expr_stmt|;
name|testDistribOpenSearcher
argument_list|()
expr_stmt|;
block|}
DECL|method|testMaxRetries
specifier|private
name|void
name|testMaxRetries
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|MockStreamingSolrClients
name|streamingClients
init|=
operator|new
name|MockStreamingSolrClients
argument_list|(
name|updateShardHandler
argument_list|)
decl_stmt|;
name|SolrCmdDistributor
name|cmdDistrib
init|=
operator|new
name|SolrCmdDistributor
argument_list|(
name|streamingClients
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|streamingClients
operator|.
name|setExp
argument_list|(
name|Exp
operator|.
name|CONNECT_EXCEPTION
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|HttpSolrClient
name|solrclient1
init|=
operator|(
name|HttpSolrClient
operator|)
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|retries
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|ZkNodeProps
name|nodeProps
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
name|solrclient1
operator|.
name|getBaseURL
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|RetryNode
name|retryNode
init|=
operator|new
name|RetryNode
argument_list|(
operator|new
name|ZkCoreNodeProps
argument_list|(
name|nodeProps
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"collection1"
argument_list|,
literal|"shard1"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|checkRetry
parameter_list|()
block|{
name|retries
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|retryNode
argument_list|)
expr_stmt|;
name|AddUpdateCommand
name|cmd
init|=
operator|new
name|AddUpdateCommand
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|solrDoc
operator|=
name|sdoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|cmdDistrib
operator|.
name|distribAdd
argument_list|(
name|cmd
argument_list|,
name|nodes
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|cmdDistrib
operator|.
name|finish
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|retries
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cmdDistrib
operator|.
name|getErrors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testOneRetry
specifier|private
name|void
name|testOneRetry
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HttpSolrClient
name|solrclient
init|=
operator|(
name|HttpSolrClient
operator|)
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|long
name|numFoundBefore
init|=
name|solrclient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
specifier|final
name|MockStreamingSolrClients
name|streamingClients
init|=
operator|new
name|MockStreamingSolrClients
argument_list|(
name|updateShardHandler
argument_list|)
decl_stmt|;
name|SolrCmdDistributor
name|cmdDistrib
init|=
operator|new
name|SolrCmdDistributor
argument_list|(
name|streamingClients
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|streamingClients
operator|.
name|setExp
argument_list|(
name|Exp
operator|.
name|CONNECT_EXCEPTION
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ZkNodeProps
name|nodeProps
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
name|solrclient
operator|.
name|getBaseURL
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|retries
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|nodeProps
operator|=
operator|new
name|ZkNodeProps
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
name|solrclient
operator|.
name|getBaseURL
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|RetryNode
name|retryNode
init|=
operator|new
name|RetryNode
argument_list|(
operator|new
name|ZkCoreNodeProps
argument_list|(
name|nodeProps
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"collection1"
argument_list|,
literal|"shard1"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|checkRetry
parameter_list|()
block|{
name|streamingClients
operator|.
name|setExp
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|retries
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|retryNode
argument_list|)
expr_stmt|;
name|AddUpdateCommand
name|cmd
init|=
operator|new
name|AddUpdateCommand
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|solrDoc
operator|=
name|sdoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|CommitUpdateCommand
name|ccmd
init|=
operator|new
name|CommitUpdateCommand
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|cmdDistrib
operator|.
name|distribAdd
argument_list|(
name|cmd
argument_list|,
name|nodes
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|cmdDistrib
operator|.
name|distribCommit
argument_list|(
name|ccmd
argument_list|,
name|nodes
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|cmdDistrib
operator|.
name|finish
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|retries
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|numFoundAfter
init|=
name|solrclient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
comment|// we will get java.net.ConnectException which we retry on
name|assertEquals
argument_list|(
name|numFoundBefore
operator|+
literal|1
argument_list|,
name|numFoundAfter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmdDistrib
operator|.
name|getErrors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRetryNodeWontRetrySocketError
specifier|private
name|void
name|testRetryNodeWontRetrySocketError
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HttpSolrClient
name|solrclient
init|=
operator|(
name|HttpSolrClient
operator|)
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|long
name|numFoundBefore
init|=
name|solrclient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
specifier|final
name|MockStreamingSolrClients
name|streamingClients
init|=
operator|new
name|MockStreamingSolrClients
argument_list|(
name|updateShardHandler
argument_list|)
decl_stmt|;
name|SolrCmdDistributor
name|cmdDistrib
init|=
operator|new
name|SolrCmdDistributor
argument_list|(
name|streamingClients
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|streamingClients
operator|.
name|setExp
argument_list|(
name|Exp
operator|.
name|SOCKET_EXCEPTION
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ZkNodeProps
name|nodeProps
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
name|solrclient
operator|.
name|getBaseURL
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|retries
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|nodeProps
operator|=
operator|new
name|ZkNodeProps
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
name|solrclient
operator|.
name|getBaseURL
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|RetryNode
name|retryNode
init|=
operator|new
name|RetryNode
argument_list|(
operator|new
name|ZkCoreNodeProps
argument_list|(
name|nodeProps
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"collection1"
argument_list|,
literal|"shard1"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|checkRetry
parameter_list|()
block|{
name|retries
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|retryNode
argument_list|)
expr_stmt|;
name|AddUpdateCommand
name|cmd
init|=
operator|new
name|AddUpdateCommand
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|solrDoc
operator|=
name|sdoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|CommitUpdateCommand
name|ccmd
init|=
operator|new
name|CommitUpdateCommand
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|cmdDistrib
operator|.
name|distribAdd
argument_list|(
name|cmd
argument_list|,
name|nodes
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|streamingClients
operator|.
name|setExp
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|cmdDistrib
operator|.
name|distribCommit
argument_list|(
name|ccmd
argument_list|,
name|nodes
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|cmdDistrib
operator|.
name|finish
argument_list|()
expr_stmt|;
comment|// it will checkRetry, but not actually do it...
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|retries
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|numFoundAfter
init|=
name|solrclient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
comment|// we will get java.net.SocketException: Network is unreachable, which we don't retry on
name|assertEquals
argument_list|(
name|numFoundBefore
argument_list|,
name|numFoundAfter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cmdDistrib
operator|.
name|getErrors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRetryNodeAgainstBadAddress
specifier|private
name|void
name|testRetryNodeAgainstBadAddress
parameter_list|()
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
comment|// Test RetryNode
name|SolrCmdDistributor
name|cmdDistrib
init|=
operator|new
name|SolrCmdDistributor
argument_list|(
name|updateShardHandler
argument_list|)
decl_stmt|;
specifier|final
name|HttpSolrClient
name|solrclient
init|=
operator|(
name|HttpSolrClient
operator|)
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|long
name|numFoundBefore
init|=
name|solrclient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ZkNodeProps
name|nodeProps
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
literal|"[ff01::114]:33332"
operator|+
name|context
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|RetryNode
name|retryNode
init|=
operator|new
name|RetryNode
argument_list|(
operator|new
name|ZkCoreNodeProps
argument_list|(
name|nodeProps
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"collection1"
argument_list|,
literal|"shard1"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|checkRetry
parameter_list|()
block|{
name|ZkNodeProps
name|leaderProps
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
name|solrclient
operator|.
name|getBaseURL
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|this
operator|.
name|nodeProps
operator|=
operator|new
name|ZkCoreNodeProps
argument_list|(
name|leaderProps
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|retryNode
argument_list|)
expr_stmt|;
name|AddUpdateCommand
name|cmd
init|=
operator|new
name|AddUpdateCommand
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|solrDoc
operator|=
name|sdoc
argument_list|(
literal|"id"
argument_list|,
name|id
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|cmdDistrib
operator|.
name|distribAdd
argument_list|(
name|cmd
argument_list|,
name|nodes
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|CommitUpdateCommand
name|ccmd
init|=
operator|new
name|CommitUpdateCommand
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|DistributedUpdateProcessor
operator|.
name|COMMIT_END_POINT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cmdDistrib
operator|.
name|distribCommit
argument_list|(
name|ccmd
argument_list|,
name|nodes
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|cmdDistrib
operator|.
name|finish
argument_list|()
expr_stmt|;
name|long
name|numFoundAfter
init|=
name|solrclient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
comment|// different OS's will throw different exceptions for the bad address above
if|if
condition|(
name|numFoundBefore
operator|!=
name|numFoundAfter
condition|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmdDistrib
operator|.
name|getErrors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numFoundBefore
operator|+
literal|1
argument_list|,
name|numFoundAfter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we will get java.net.SocketException: Network is unreachable and not retry
name|assertEquals
argument_list|(
name|numFoundBefore
argument_list|,
name|numFoundAfter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cmdDistrib
operator|.
name|getErrors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|distribTearDown
specifier|public
name|void
name|distribTearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|updateShardHandler
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|distribTearDown
argument_list|()
expr_stmt|;
block|}
DECL|method|testDistribOpenSearcher
specifier|private
name|void
name|testDistribOpenSearcher
parameter_list|()
block|{
name|SolrCmdDistributor
name|cmdDistrib
init|=
operator|new
name|SolrCmdDistributor
argument_list|(
name|updateShardHandler
argument_list|)
decl_stmt|;
name|UpdateRequest
name|updateRequest
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|CommitUpdateCommand
name|ccmd
init|=
operator|new
name|CommitUpdateCommand
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|//test default value (should be true)
name|cmdDistrib
operator|.
name|addCommit
argument_list|(
name|updateRequest
argument_list|,
name|ccmd
argument_list|)
expr_stmt|;
name|boolean
name|openSearcher
init|=
name|updateRequest
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
name|UpdateParams
operator|.
name|OPEN_SEARCHER
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|openSearcher
argument_list|)
expr_stmt|;
comment|//test openSearcher = false
name|ccmd
operator|.
name|openSearcher
operator|=
literal|false
expr_stmt|;
name|cmdDistrib
operator|.
name|addCommit
argument_list|(
name|updateRequest
argument_list|,
name|ccmd
argument_list|)
expr_stmt|;
name|openSearcher
operator|=
name|updateRequest
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
name|UpdateParams
operator|.
name|OPEN_SEARCHER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|openSearcher
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
