begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.update.processor
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import
begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import
begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|ISODateTimeFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_comment
comment|/**  * Tests for the field mutating update processors  * that parse Dates, Longs, Doubles, and Booleans.  */
end_comment
begin_class
DECL|class|ParsingFieldUpdateProcessorsTest
specifier|public
class|class
name|ParsingFieldUpdateProcessorsTest
extends|extends
name|UpdateProcessorTestBase
block|{
DECL|field|EPSILON
specifier|private
specifier|static
specifier|final
name|double
name|EPSILON
init|=
literal|1E
operator|-
literal|15
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-parsing-update-processor-chains.xml"
argument_list|,
literal|"schema12.xml"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseDateRoundTrip
specifier|public
name|void
name|testParseDateRoundTrip
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"date_dt"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match "*_dt" dynamic field
name|String
name|dateString
init|=
literal|"2010-11-12T13:14:15.168Z"
decl_stmt|;
name|SolrInputDocument
name|d
init|=
name|processAdd
argument_list|(
literal|"parse-date"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"date_dt"
argument_list|,
name|dateString
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|DateTimeFormatter
name|dateTimeFormatter
init|=
name|ISODateTimeFormat
operator|.
name|dateTime
argument_list|()
decl_stmt|;
name|DateTime
name|dateTime
init|=
name|dateTimeFormatter
operator|.
name|parseDateTime
argument_list|(
name|dateString
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"date_dt"
argument_list|)
operator|instanceof
name|Date
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dateTime
operator|.
name|getMillis
argument_list|()
argument_list|,
operator|(
operator|(
name|Date
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"date_dt"
argument_list|)
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:9"
argument_list|)
argument_list|,
literal|"//date[@name='date_dt'][.='"
operator|+
name|dateString
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseTrieDateRoundTrip
specifier|public
name|void
name|testParseTrieDateRoundTrip
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"date_tdt"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match "*_tdt" dynamic field
name|String
name|dateString
init|=
literal|"2010-11-12T13:14:15.168Z"
decl_stmt|;
name|SolrInputDocument
name|d
init|=
name|processAdd
argument_list|(
literal|"parse-date"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"39"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"date_tdt"
argument_list|,
name|dateString
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|DateTimeFormatter
name|dateTimeFormatter
init|=
name|ISODateTimeFormat
operator|.
name|dateTime
argument_list|()
decl_stmt|;
name|DateTime
name|dateTime
init|=
name|dateTimeFormatter
operator|.
name|parseDateTime
argument_list|(
name|dateString
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"date_tdt"
argument_list|)
operator|instanceof
name|Date
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dateTime
operator|.
name|getMillis
argument_list|()
argument_list|,
operator|(
operator|(
name|Date
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"date_tdt"
argument_list|)
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:39"
argument_list|)
argument_list|,
literal|"//date[@name='date_tdt'][.='"
operator|+
name|dateString
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseDateFieldNotInSchema
specifier|public
name|void
name|testParseDateFieldNotInSchema
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"not_in_schema"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|dateString
init|=
literal|"2010-11-12T13:14:15.168Z"
decl_stmt|;
name|DateTimeFormatter
name|dateTimeFormatter
init|=
name|ISODateTimeFormat
operator|.
name|dateTime
argument_list|()
decl_stmt|;
name|DateTime
name|dateTime
init|=
name|dateTimeFormatter
operator|.
name|parseDateTime
argument_list|(
name|dateString
argument_list|)
decl_stmt|;
name|SolrInputDocument
name|d
init|=
name|processAdd
argument_list|(
literal|"parse-date-no-run-processor"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"18"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"not_in_schema"
argument_list|,
name|dateString
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"not_in_schema"
argument_list|)
operator|instanceof
name|Date
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dateTime
operator|.
name|getMillis
argument_list|()
argument_list|,
operator|(
operator|(
name|Date
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"not_in_schema"
argument_list|)
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"parse-date-no-run-processor"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"36"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"not_in_schema"
argument_list|,
literal|"not a date"
argument_list|,
name|dateString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|val
range|:
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"not_in_schema"
argument_list|)
control|)
block|{
comment|// check that nothing was mutated, since not all field values are parseable as dates
name|assertTrue
argument_list|(
name|val
operator|instanceof
name|String
argument_list|)
expr_stmt|;
block|}
name|d
operator|=
name|processAdd
argument_list|(
literal|"parse-date-no-run-processor"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"72"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"not_in_schema"
argument_list|,
name|dateString
argument_list|,
literal|"not a date"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|val
range|:
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"not_in_schema"
argument_list|)
control|)
block|{
comment|// check again that nothing was mutated, but with a valid date first this time
name|assertTrue
argument_list|(
name|val
operator|instanceof
name|String
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParseDateNonUTCdefaultTimeZoneRoundTrip
specifier|public
name|void
name|testParseDateNonUTCdefaultTimeZoneRoundTrip
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"date_dt"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match "*_dt" dynamic field
name|String
name|dateStringNoTimeZone
init|=
literal|"2010-11-12T13:14:15.168"
decl_stmt|;
name|String
name|dateStringUTC
init|=
name|dateStringNoTimeZone
operator|+
literal|"Z"
decl_stmt|;
comment|// dateStringNoTimeZone interpreted as being in timeZone America/New_York, then printed as UTC
name|String
name|dateStringUSEasternTimeAsUTC
init|=
literal|"2010-11-12T18:14:15.168Z"
decl_stmt|;
name|SolrInputDocument
name|d
init|=
name|processAdd
argument_list|(
literal|"parse-date-non-UTC-defaultTimeZone"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"99"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"dateUTC_dt"
argument_list|,
name|dateStringUTC
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"dateNoTimeZone_dt"
argument_list|,
name|dateStringNoTimeZone
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|String
name|pattern
init|=
literal|"yyyy-MM-dd'T'HH:mm:ss.SSSZ"
decl_stmt|;
name|DateTimeFormatter
name|dateTimeFormatterUTC
init|=
name|DateTimeFormat
operator|.
name|forPattern
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|DateTime
name|dateTimeUTC
init|=
name|dateTimeFormatterUTC
operator|.
name|parseDateTime
argument_list|(
name|dateStringUTC
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"dateUTC_dt"
argument_list|)
operator|instanceof
name|Date
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"dateNoTimeZone_dt"
argument_list|)
operator|instanceof
name|Date
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dateTimeUTC
operator|.
name|getMillis
argument_list|()
argument_list|,
operator|(
operator|(
name|Date
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"dateUTC_dt"
argument_list|)
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:99"
argument_list|)
argument_list|,
literal|"//date[@name='dateUTC_dt'][.='"
operator|+
name|dateStringUTC
operator|+
literal|"']"
argument_list|,
literal|"//date[@name='dateNoTimeZone_dt'][.='"
operator|+
name|dateStringUSEasternTimeAsUTC
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseDateExplicitNotInSchemaSelector
specifier|public
name|void
name|testParseDateExplicitNotInSchemaSelector
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"not_in_schema"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|dateString
init|=
literal|"2010-11-12T13:14:15.168Z"
decl_stmt|;
name|DateTimeFormatter
name|dateTimeFormatter
init|=
name|ISODateTimeFormat
operator|.
name|dateTime
argument_list|()
decl_stmt|;
name|DateTime
name|dateTime
init|=
name|dateTimeFormatter
operator|.
name|parseDateTime
argument_list|(
name|dateString
argument_list|)
decl_stmt|;
name|SolrInputDocument
name|d
init|=
name|processAdd
argument_list|(
literal|"parse-date-explicit-not-in-schema-selector-no-run-processor"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"88"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"not_in_schema"
argument_list|,
name|dateString
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"not_in_schema"
argument_list|)
operator|instanceof
name|Date
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dateTime
operator|.
name|getMillis
argument_list|()
argument_list|,
operator|(
operator|(
name|Date
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"not_in_schema"
argument_list|)
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseDateExplicitTypeClassSelector
specifier|public
name|void
name|testParseDateExplicitTypeClassSelector
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"date_dt"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|dateString
init|=
literal|"2010-11-12T13:14:15.168Z"
decl_stmt|;
name|DateTimeFormatter
name|dateTimeFormatter
init|=
name|ISODateTimeFormat
operator|.
name|dateTime
argument_list|()
decl_stmt|;
name|DateTime
name|dateTime
init|=
name|dateTimeFormatter
operator|.
name|parseDateTime
argument_list|(
name|dateString
argument_list|)
decl_stmt|;
name|SolrInputDocument
name|d
init|=
name|processAdd
argument_list|(
literal|"parse-date-explicit-typeclass-selector-no-run-processor"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"77"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"date_dt"
argument_list|,
name|dateString
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"date_dt"
argument_list|)
operator|instanceof
name|Date
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dateTime
operator|.
name|getMillis
argument_list|()
argument_list|,
operator|(
operator|(
name|Date
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"date_dt"
argument_list|)
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseUSPacificDate
specifier|public
name|void
name|testParseUSPacificDate
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"not_in_schema"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|dateString
init|=
literal|"8/9/2010"
decl_stmt|;
comment|// Interpreted as 00:00 US Pacific Daylight Time = UTC+07:00
name|String
name|dateStringUTC
init|=
literal|"2010-08-09T07:00:00.000Z"
decl_stmt|;
name|SolrInputDocument
name|d
init|=
name|processAdd
argument_list|(
literal|"US-Pacific-parse-date-no-run-processor"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"288"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"not_in_schema"
argument_list|,
name|dateString
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"not_in_schema"
argument_list|)
operator|instanceof
name|Date
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dateStringUTC
argument_list|,
operator|(
operator|new
name|DateTime
argument_list|(
operator|(
operator|(
name|Date
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"not_in_schema"
argument_list|)
operator|)
operator|.
name|getTime
argument_list|()
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseDateFormats
specifier|public
name|void
name|testParseDateFormats
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|formatExamples
init|=
block|{
literal|"yyyy-MM-dd'T'HH:mm:ss.SSSZ"
block|,
literal|"2010-01-15T00:00:00.000Z"
block|,
literal|"yyyy-MM-dd'T'HH:mm:ss,SSSZ"
block|,
literal|"2010-01-15T00:00:00,000Z"
block|,
literal|"yyyy-MM-dd'T'HH:mm:ss.SSS"
block|,
literal|"2010-01-15T00:00:00.000"
block|,
literal|"yyyy-MM-dd'T'HH:mm:ss,SSS"
block|,
literal|"2010-01-15T00:00:00,000"
block|,
literal|"yyyy-MM-dd'T'HH:mm:ssZ"
block|,
literal|"2010-01-15T00:00:00Z"
block|,
literal|"yyyy-MM-dd'T'HH:mm:ss"
block|,
literal|"2010-01-15T00:00:00"
block|,
literal|"yyyy-MM-dd'T'HH:mmZ"
block|,
literal|"2010-01-15T00:00Z"
block|,
literal|"yyyy-MM-dd'T'HH:mm"
block|,
literal|"2010-01-15T00:00"
block|,
literal|"yyyy-MM-dd HH:mm:ss.SSSZ"
block|,
literal|"2010-01-15 00:00:00.000Z"
block|,
literal|"yyyy-MM-dd HH:mm:ss,SSSZ"
block|,
literal|"2010-01-15 00:00:00,000Z"
block|,
literal|"yyyy-MM-dd HH:mm:ss.SSS"
block|,
literal|"2010-01-15 00:00:00.000"
block|,
literal|"yyyy-MM-dd HH:mm:ss,SSS"
block|,
literal|"2010-01-15 00:00:00,000"
block|,
literal|"yyyy-MM-dd HH:mm:ssZ"
block|,
literal|"2010-01-15 00:00:00Z"
block|,
literal|"yyyy-MM-dd HH:mm:ss"
block|,
literal|"2010-01-15 00:00:00"
block|,
literal|"yyyy-MM-dd HH:mmZ"
block|,
literal|"2010-01-15 00:00Z"
block|,
literal|"yyyy-MM-dd HH:mm"
block|,
literal|"2010-01-15 00:00"
block|,
literal|"yyyy-MM-dd hh:mm a"
block|,
literal|"2010-01-15 12:00 AM"
block|,
literal|"yyyy-MM-dd hh:mma"
block|,
literal|"2010-01-15 12:00AM"
block|,
literal|"yyyy-MM-dd"
block|,
literal|"2010-01-15"
block|,
literal|"EEE MMM dd HH:mm:ss Z yyyy"
block|,
literal|"Fri Jan 15 00:00:00 +0000 2010"
block|,
literal|"EEE MMM dd HH:mm:ss yyyy Z"
block|,
literal|"Fri Jan 15 00:00:00 2010 +00:00"
block|,
literal|"EEE MMM dd HH:mm:ss yyyy"
block|,
literal|"Fri Jan 15 00:00:00 2010"
block|,
literal|"EEE, dd MMM yyyy HH:mm:ss Z"
block|,
literal|"Fri, 15 Jan 2010 00:00:00 +00:00"
block|,
literal|"EEEE, dd-MMM-yy HH:mm:ss Z"
block|,
literal|"Friday, 15-Jan-10 00:00:00 +00:00"
block|,
literal|"EEEE, MMMM dd, yyyy"
block|,
literal|"Friday, January 15, 2010"
block|,
literal|"MMMM dd, yyyy"
block|,
literal|"January 15, 2010"
block|,
literal|"MMM. dd, yyyy"
block|,
literal|"Jan. 15, 2010"
block|}
decl_stmt|;
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"dateUTC_dt"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match "*_dt" dynamic field
name|String
name|dateTimePattern
init|=
literal|"yyyy-MM-dd'T'HH:mm:ss.SSSZ"
decl_stmt|;
name|DateTimeFormatter
name|dateTimeFormatterUTC
init|=
name|DateTimeFormat
operator|.
name|forPattern
argument_list|(
name|dateTimePattern
argument_list|)
decl_stmt|;
name|DateTime
name|dateTimeUTC
init|=
name|dateTimeFormatterUTC
operator|.
name|parseDateTime
argument_list|(
name|formatExamples
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|formatExamples
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|String
name|format
init|=
name|formatExamples
index|[
name|i
index|]
decl_stmt|;
name|String
name|dateString
init|=
name|formatExamples
index|[
name|i
operator|+
literal|1
index|]
decl_stmt|;
name|String
name|id
init|=
literal|"95"
operator|+
name|i
decl_stmt|;
name|SolrInputDocument
name|d
init|=
name|processAdd
argument_list|(
literal|"parse-date-UTC-defaultTimeZone-no-run-processor"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"dateUTC_dt"
argument_list|,
name|dateString
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"date '"
operator|+
name|dateString
operator|+
literal|"' with format '"
operator|+
name|format
operator|+
literal|"' is not mutated to a Date"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"dateUTC_dt"
argument_list|)
operator|instanceof
name|Date
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"date '"
operator|+
name|dateString
operator|+
literal|"' with format '"
operator|+
name|format
operator|+
literal|"' mismatched milliseconds"
argument_list|,
name|dateTimeUTC
operator|.
name|getMillis
argument_list|()
argument_list|,
operator|(
operator|(
name|Date
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"dateUTC_dt"
argument_list|)
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParseFrenchDate
specifier|public
name|void
name|testParseFrenchDate
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"not_in_schema"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|frenchDateString
init|=
literal|"le vendredi 15 janvier 2010"
decl_stmt|;
name|String
name|dateString
init|=
literal|"2010-01-15T00:00:00.000Z"
decl_stmt|;
name|DateTimeFormatter
name|dateTimeFormatter
init|=
name|ISODateTimeFormat
operator|.
name|dateTime
argument_list|()
decl_stmt|;
name|DateTime
name|dateTime
init|=
name|dateTimeFormatter
operator|.
name|parseDateTime
argument_list|(
name|dateString
argument_list|)
decl_stmt|;
name|SolrInputDocument
name|d
init|=
name|processAdd
argument_list|(
literal|"parse-french-date-UTC-defaultTimeZone-no-run-processor"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"88"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"not_in_schema"
argument_list|,
name|frenchDateString
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"not_in_schema"
argument_list|)
operator|instanceof
name|Date
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dateTime
operator|.
name|getMillis
argument_list|()
argument_list|,
operator|(
operator|(
name|Date
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"not_in_schema"
argument_list|)
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailedParseMixedDate
specifier|public
name|void
name|testFailedParseMixedDate
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"not_in_schema"
argument_list|)
argument_list|)
expr_stmt|;
name|DateTimeFormatter
name|dateTimeFormatter
init|=
name|ISODateTimeFormat
operator|.
name|dateOptionalTimeParser
argument_list|()
operator|.
name|withZoneUTC
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|mixed
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|dateStrings
init|=
block|{
literal|"2020-05-13T18:47"
block|,
literal|"1989-12-14"
block|,
literal|"1682-07-22T18:33:00.000Z"
block|}
decl_stmt|;
for|for
control|(
name|String
name|dateString
range|:
name|dateStrings
control|)
block|{
name|mixed
operator|.
name|put
argument_list|(
name|dateTimeFormatter
operator|.
name|parseDateTime
argument_list|(
name|dateString
argument_list|)
operator|.
name|toDate
argument_list|()
argument_list|,
name|dateString
argument_list|)
expr_stmt|;
block|}
name|Double
name|extraDouble
init|=
literal|29.554d
decl_stmt|;
name|mixed
operator|.
name|put
argument_list|(
name|extraDouble
argument_list|,
name|extraDouble
argument_list|)
expr_stmt|;
comment|// Double-typed field value
name|SolrInputDocument
name|d
init|=
name|processAdd
argument_list|(
literal|"parse-date-no-run-processor"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"7201"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"not_in_schema"
argument_list|,
name|mixed
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|boolean
name|foundDouble
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"not_in_schema"
argument_list|)
control|)
block|{
if|if
condition|(
name|extraDouble
operator|==
name|o
condition|)
block|{
name|foundDouble
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|String
argument_list|)
expr_stmt|;
block|}
name|mixed
operator|.
name|values
argument_list|()
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|foundDouble
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mixed
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseIntRoundTrip
specifier|public
name|void
name|testParseIntRoundTrip
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"int1_i"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match dynamic field "*_i"
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"int2_i"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match dynamic field "*_i"
name|int
name|value
init|=
literal|1089883491
decl_stmt|;
name|String
name|intString1
init|=
literal|"1089883491"
decl_stmt|;
name|String
name|intString2
init|=
literal|"1,089,883,491"
decl_stmt|;
name|SolrInputDocument
name|d
init|=
name|processAdd
argument_list|(
literal|"parse-int"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"113"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"int1_i"
argument_list|,
name|intString1
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"int2_i"
argument_list|,
name|intString2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"int1_i"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
operator|(
operator|(
name|Integer
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"int1_i"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"int2_i"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
operator|(
operator|(
name|Integer
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"int2_i"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:113"
argument_list|)
argument_list|,
literal|"//int[@name='int1_i'][.='"
operator|+
name|value
operator|+
literal|"']"
argument_list|,
literal|"//int[@name='int2_i'][.='"
operator|+
name|value
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseIntNonRootLocale
specifier|public
name|void
name|testParseIntNonRootLocale
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"int_i"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match dynamic field "*_i"
name|assertNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"not_in_schema"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|value
init|=
literal|1089883491
decl_stmt|;
name|String
name|intString1
init|=
literal|"1089883491"
decl_stmt|;
name|String
name|intString2
init|=
literal|"1Â 089Â 883Â 491"
decl_stmt|;
comment|// no-break space U+00A0
name|SolrInputDocument
name|d
init|=
name|processAdd
argument_list|(
literal|"parse-int-russian-no-run-processor"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"113"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"int_i"
argument_list|,
name|intString1
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"not_in_schema"
argument_list|,
name|intString2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"int_i"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
operator|(
operator|(
name|Integer
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"int_i"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"not_in_schema"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
operator|(
operator|(
name|Integer
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"not_in_schema"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseTrieIntRoundTrip
specifier|public
name|void
name|testParseTrieIntRoundTrip
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"int1_ti"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match dynamic field "*_ti"
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"int2_ti"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match dynamic field "*_ti"
name|int
name|value
init|=
literal|1089883491
decl_stmt|;
name|String
name|intString1
init|=
literal|"1089883491"
decl_stmt|;
name|String
name|intString2
init|=
literal|"1,089,883,491"
decl_stmt|;
name|SolrInputDocument
name|d
init|=
name|processAdd
argument_list|(
literal|"parse-int"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"113"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"int1_ti"
argument_list|,
name|intString1
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"int2_ti"
argument_list|,
name|intString2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"int1_ti"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
operator|(
operator|(
name|Integer
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"int1_ti"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"int2_ti"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
operator|(
operator|(
name|Integer
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"int2_ti"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:113"
argument_list|)
argument_list|,
literal|"//int[@name='int1_ti'][.='"
operator|+
name|value
operator|+
literal|"']"
argument_list|,
literal|"//int[@name='int2_ti'][.='"
operator|+
name|value
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testIntOverflow
specifier|public
name|void
name|testIntOverflow
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"not_in_schema1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"not_in_schema2"
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|longValue1
init|=
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|100L
decl_stmt|;
name|long
name|longValue2
init|=
operator|(
name|long
operator|)
name|Integer
operator|.
name|MIN_VALUE
operator|-
literal|100L
decl_stmt|;
name|String
name|longString1
init|=
name|Long
operator|.
name|toString
argument_list|(
name|longValue1
argument_list|)
decl_stmt|;
name|String
name|longString2
init|=
name|Long
operator|.
name|toString
argument_list|(
name|longValue2
argument_list|)
decl_stmt|;
name|SolrInputDocument
name|d
init|=
name|processAdd
argument_list|(
literal|"parse-int-no-run-processor"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"282"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"not_in_schema1"
argument_list|,
name|longString1
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"not_in_schema2"
argument_list|,
name|longString2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"not_in_schema1"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"not_in_schema2"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailedParseMixedInt
specifier|public
name|void
name|testFailedParseMixedInt
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"not_in_schema"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|mixed
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Float
name|floatVal
init|=
literal|294423.0f
decl_stmt|;
name|mixed
operator|.
name|put
argument_list|(
literal|85
argument_list|,
literal|"85"
argument_list|)
expr_stmt|;
name|mixed
operator|.
name|put
argument_list|(
name|floatVal
argument_list|,
name|floatVal
argument_list|)
expr_stmt|;
comment|// Float-typed field value
name|mixed
operator|.
name|put
argument_list|(
operator|-
literal|2894518
argument_list|,
literal|"-2,894,518"
argument_list|)
expr_stmt|;
name|mixed
operator|.
name|put
argument_list|(
literal|1879472193
argument_list|,
literal|"1,879,472,193"
argument_list|)
expr_stmt|;
name|SolrInputDocument
name|d
init|=
name|processAdd
argument_list|(
literal|"parse-int-no-run-processor"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"7202"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"not_in_schema"
argument_list|,
name|mixed
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|boolean
name|foundFloat
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"not_in_schema"
argument_list|)
control|)
block|{
if|if
condition|(
name|floatVal
operator|==
name|o
condition|)
block|{
name|foundFloat
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|String
argument_list|)
expr_stmt|;
block|}
name|mixed
operator|.
name|values
argument_list|()
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|foundFloat
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mixed
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseLongRoundTrip
specifier|public
name|void
name|testParseLongRoundTrip
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"long1_l"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match dynamic field "*_l"
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"long2_l"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match dynamic field "*_l"
name|long
name|value
init|=
literal|1089883491L
decl_stmt|;
name|String
name|longString1
init|=
literal|"1089883491"
decl_stmt|;
name|String
name|longString2
init|=
literal|"1,089,883,491"
decl_stmt|;
name|SolrInputDocument
name|d
init|=
name|processAdd
argument_list|(
literal|"parse-long"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"113"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"long1_l"
argument_list|,
name|longString1
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"long2_l"
argument_list|,
name|longString2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"long1_l"
argument_list|)
operator|instanceof
name|Long
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"long1_l"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"long2_l"
argument_list|)
operator|instanceof
name|Long
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"long2_l"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:113"
argument_list|)
argument_list|,
literal|"//long[@name='long1_l'][.='"
operator|+
name|value
operator|+
literal|"']"
argument_list|,
literal|"//long[@name='long2_l'][.='"
operator|+
name|value
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseLongNonRootLocale
specifier|public
name|void
name|testParseLongNonRootLocale
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"long_l"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match dynamic field "*_l"
name|assertNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"not_in_schema"
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|value
init|=
literal|1089883491L
decl_stmt|;
name|String
name|longString1
init|=
literal|"1089883491"
decl_stmt|;
name|String
name|longString2
init|=
literal|"1Â 089Â 883Â 491"
decl_stmt|;
comment|// no-break space U+00A0
name|SolrInputDocument
name|d
init|=
name|processAdd
argument_list|(
literal|"parse-long-russian-no-run-processor"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"113"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"long_l"
argument_list|,
name|longString1
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"not_in_schema"
argument_list|,
name|longString2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"long_l"
argument_list|)
operator|instanceof
name|Long
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"long_l"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"not_in_schema"
argument_list|)
operator|instanceof
name|Long
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"not_in_schema"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseTrieLongRoundTrip
specifier|public
name|void
name|testParseTrieLongRoundTrip
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"long1_tl"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match dynamic field "*_tl"
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"long2_tl"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match dynamic field "*_tl"
name|long
name|value
init|=
literal|1089883491L
decl_stmt|;
name|String
name|longString1
init|=
literal|"1089883491"
decl_stmt|;
name|String
name|longString2
init|=
literal|"1,089,883,491"
decl_stmt|;
name|SolrInputDocument
name|d
init|=
name|processAdd
argument_list|(
literal|"parse-long"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"113"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"long1_tl"
argument_list|,
name|longString1
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"long2_tl"
argument_list|,
name|longString2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"long1_tl"
argument_list|)
operator|instanceof
name|Long
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"long1_tl"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"long2_tl"
argument_list|)
operator|instanceof
name|Long
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"long2_tl"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:113"
argument_list|)
argument_list|,
literal|"//long[@name='long1_tl'][.='"
operator|+
name|value
operator|+
literal|"']"
argument_list|,
literal|"//long[@name='long2_tl'][.='"
operator|+
name|value
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailedParseMixedLong
specifier|public
name|void
name|testFailedParseMixedLong
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"not_in_schema"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|mixed
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Float
name|floatVal
init|=
literal|294423.0f
decl_stmt|;
name|mixed
operator|.
name|put
argument_list|(
literal|85L
argument_list|,
literal|"85"
argument_list|)
expr_stmt|;
name|mixed
operator|.
name|put
argument_list|(
name|floatVal
argument_list|,
name|floatVal
argument_list|)
expr_stmt|;
comment|// Float-typed field value
name|mixed
operator|.
name|put
argument_list|(
operator|-
literal|2894518L
argument_list|,
literal|"-2,894,518"
argument_list|)
expr_stmt|;
name|mixed
operator|.
name|put
argument_list|(
literal|1879472193L
argument_list|,
literal|"1,879,472,193"
argument_list|)
expr_stmt|;
name|SolrInputDocument
name|d
init|=
name|processAdd
argument_list|(
literal|"parse-long-no-run-processor"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"7204"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"not_in_schema"
argument_list|,
name|mixed
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|boolean
name|foundFloat
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"not_in_schema"
argument_list|)
control|)
block|{
if|if
condition|(
name|floatVal
operator|==
name|o
condition|)
block|{
name|foundFloat
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|String
argument_list|)
expr_stmt|;
block|}
name|mixed
operator|.
name|values
argument_list|()
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|foundFloat
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mixed
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseFloatRoundTrip
specifier|public
name|void
name|testParseFloatRoundTrip
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"float1_f"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match dynamic field "*_f"
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"float2_f"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match dynamic field "*_f"
name|float
name|value
init|=
literal|10898.83491f
decl_stmt|;
name|String
name|floatString1
init|=
literal|"10898.83491"
decl_stmt|;
name|String
name|floatString2
init|=
literal|"10,898.83491"
decl_stmt|;
name|SolrInputDocument
name|d
init|=
name|processAdd
argument_list|(
literal|"parse-float"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"128"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"float1_f"
argument_list|,
name|floatString1
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"float2_f"
argument_list|,
name|floatString2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"float1_f"
argument_list|)
operator|instanceof
name|Float
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
operator|(
name|Float
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"float1_f"
argument_list|)
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"float2_f"
argument_list|)
operator|instanceof
name|Float
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
operator|(
name|Float
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"float2_f"
argument_list|)
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:128"
argument_list|)
argument_list|,
literal|"//float[@name='float1_f'][.='"
operator|+
name|value
operator|+
literal|"']"
argument_list|,
literal|"//float[@name='float2_f'][.='"
operator|+
name|value
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseFloatNonRootLocale
specifier|public
name|void
name|testParseFloatNonRootLocale
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"float_f"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match dynamic field "*_f"
name|assertNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"not_in_schema"
argument_list|)
argument_list|)
expr_stmt|;
name|float
name|value
init|=
literal|10898.83491f
decl_stmt|;
name|String
name|floatString1
init|=
literal|"10898,83491"
decl_stmt|;
name|String
name|floatString2
init|=
literal|"10Â 898,83491"
decl_stmt|;
comment|// no-break space: U+00A0
name|SolrInputDocument
name|d
init|=
name|processAdd
argument_list|(
literal|"parse-float-french-no-run-processor"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"140"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"float_f"
argument_list|,
name|floatString1
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"not_in_schema"
argument_list|,
name|floatString2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"float_f"
argument_list|)
operator|instanceof
name|Float
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
operator|(
name|Float
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"float_f"
argument_list|)
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"not_in_schema"
argument_list|)
operator|instanceof
name|Float
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
operator|(
name|Float
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"not_in_schema"
argument_list|)
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseTrieFloatRoundTrip
specifier|public
name|void
name|testParseTrieFloatRoundTrip
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"float1_tf"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match dynamic field "*_tf"
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"float2_tf"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match dynamic field "*_tf"
name|float
name|value
init|=
literal|10898.83491f
decl_stmt|;
name|String
name|floatString1
init|=
literal|"10898.83491"
decl_stmt|;
name|String
name|floatString2
init|=
literal|"10,898.83491"
decl_stmt|;
name|SolrInputDocument
name|d
init|=
name|processAdd
argument_list|(
literal|"parse-float"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"728"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"float1_tf"
argument_list|,
name|floatString1
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"float2_tf"
argument_list|,
name|floatString2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"float1_tf"
argument_list|)
operator|instanceof
name|Float
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
operator|(
name|Float
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"float1_tf"
argument_list|)
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"float2_tf"
argument_list|)
operator|instanceof
name|Float
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
operator|(
name|Float
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"float2_tf"
argument_list|)
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:728"
argument_list|)
argument_list|,
literal|"//float[@name='float1_tf'][.='"
operator|+
name|value
operator|+
literal|"']"
argument_list|,
literal|"//float[@name='float2_tf'][.='"
operator|+
name|value
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMixedFloats
specifier|public
name|void
name|testMixedFloats
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"float_tf"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match dynamic field "*_tf"
name|Map
argument_list|<
name|Float
argument_list|,
name|Object
argument_list|>
name|mixedFloats
init|=
operator|new
name|HashMap
argument_list|<
name|Float
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|mixedFloats
operator|.
name|put
argument_list|(
literal|85.0f
argument_list|,
literal|"85"
argument_list|)
expr_stmt|;
name|mixedFloats
operator|.
name|put
argument_list|(
literal|2894518.0f
argument_list|,
literal|"2,894,518"
argument_list|)
expr_stmt|;
name|mixedFloats
operator|.
name|put
argument_list|(
literal|2.94423E
operator|-
literal|9f
argument_list|,
literal|2.94423E
operator|-
literal|9f
argument_list|)
expr_stmt|;
comment|// Float-typed field value
name|mixedFloats
operator|.
name|put
argument_list|(
literal|48794721.937f
argument_list|,
literal|"48,794,721.937"
argument_list|)
expr_stmt|;
name|SolrInputDocument
name|d
init|=
name|processAdd
argument_list|(
literal|"parse-float-no-run-processor"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"342"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"float_tf"
argument_list|,
name|mixedFloats
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"float_tf"
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|Float
argument_list|)
expr_stmt|;
name|mixedFloats
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|mixedFloats
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailedParseMixedFloat
specifier|public
name|void
name|testFailedParseMixedFloat
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"not_in_schema"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|mixed
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Long
name|longVal
init|=
literal|294423L
decl_stmt|;
name|mixed
operator|.
name|put
argument_list|(
literal|85L
argument_list|,
literal|"85"
argument_list|)
expr_stmt|;
name|mixed
operator|.
name|put
argument_list|(
name|longVal
argument_list|,
name|longVal
argument_list|)
expr_stmt|;
comment|// Float-typed field value
name|mixed
operator|.
name|put
argument_list|(
operator|-
literal|2894518L
argument_list|,
literal|"-2,894,518"
argument_list|)
expr_stmt|;
name|mixed
operator|.
name|put
argument_list|(
literal|1879472193L
argument_list|,
literal|"1,879,472,193"
argument_list|)
expr_stmt|;
name|SolrInputDocument
name|d
init|=
name|processAdd
argument_list|(
literal|"parse-float-no-run-processor"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"7205"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"not_in_schema"
argument_list|,
name|mixed
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|boolean
name|foundLong
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"not_in_schema"
argument_list|)
control|)
block|{
if|if
condition|(
name|longVal
operator|==
name|o
condition|)
block|{
name|foundLong
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|String
argument_list|)
expr_stmt|;
block|}
name|mixed
operator|.
name|values
argument_list|()
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|foundLong
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mixed
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseDoubleRoundTrip
specifier|public
name|void
name|testParseDoubleRoundTrip
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"double1_d"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match dynamic field "*_d"
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"double2_d"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match dynamic field "*_d"
name|double
name|value
init|=
literal|10898.83491
decl_stmt|;
name|String
name|doubleString1
init|=
literal|"10898.83491"
decl_stmt|;
name|String
name|doubleString2
init|=
literal|"10,898.83491"
decl_stmt|;
name|SolrInputDocument
name|d
init|=
name|processAdd
argument_list|(
literal|"parse-double"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"128"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"double1_d"
argument_list|,
name|doubleString1
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"double2_d"
argument_list|,
name|doubleString2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"double1_d"
argument_list|)
operator|instanceof
name|Double
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
operator|(
name|Double
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"double1_d"
argument_list|)
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"double2_d"
argument_list|)
operator|instanceof
name|Double
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
operator|(
name|Double
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"double2_d"
argument_list|)
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:128"
argument_list|)
argument_list|,
literal|"//double[@name='double1_d'][.='"
operator|+
name|value
operator|+
literal|"']"
argument_list|,
literal|"//double[@name='double2_d'][.='"
operator|+
name|value
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseDoubleNonRootLocale
specifier|public
name|void
name|testParseDoubleNonRootLocale
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"double_d"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match dynamic field "*_d"
name|assertNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"not_in_schema"
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|value
init|=
literal|10898.83491
decl_stmt|;
name|String
name|doubleString1
init|=
literal|"10898,83491"
decl_stmt|;
name|String
name|doubleString2
init|=
literal|"10Â 898,83491"
decl_stmt|;
comment|// no-break space: U+00A0
name|SolrInputDocument
name|d
init|=
name|processAdd
argument_list|(
literal|"parse-double-french-no-run-processor"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"140"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"double_d"
argument_list|,
name|doubleString1
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"not_in_schema"
argument_list|,
name|doubleString2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"double_d"
argument_list|)
operator|instanceof
name|Double
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
operator|(
name|Double
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"double_d"
argument_list|)
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"not_in_schema"
argument_list|)
operator|instanceof
name|Double
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
operator|(
name|Double
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"not_in_schema"
argument_list|)
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseTrieDoubleRoundTrip
specifier|public
name|void
name|testParseTrieDoubleRoundTrip
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"double1_td"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match dynamic field "*_td"
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"double2_td"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match dynamic field "*_td"
name|double
name|value
init|=
literal|10898.83491
decl_stmt|;
name|String
name|doubleString1
init|=
literal|"10898.83491"
decl_stmt|;
name|String
name|doubleString2
init|=
literal|"10,898.83491"
decl_stmt|;
name|SolrInputDocument
name|d
init|=
name|processAdd
argument_list|(
literal|"parse-double"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"728"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"double1_td"
argument_list|,
name|doubleString1
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"double2_td"
argument_list|,
name|doubleString2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"double1_td"
argument_list|)
operator|instanceof
name|Double
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
operator|(
name|Double
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"double1_td"
argument_list|)
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"double2_td"
argument_list|)
operator|instanceof
name|Double
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
operator|(
name|Double
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"double2_td"
argument_list|)
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:728"
argument_list|)
argument_list|,
literal|"//double[@name='double1_td'][.='"
operator|+
name|value
operator|+
literal|"']"
argument_list|,
literal|"//double[@name='double2_td'][.='"
operator|+
name|value
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailedParseMixedDouble
specifier|public
name|void
name|testFailedParseMixedDouble
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"not_in_schema"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|mixed
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Long
name|longVal
init|=
literal|294423L
decl_stmt|;
name|mixed
operator|.
name|put
argument_list|(
literal|85
argument_list|,
literal|"85.0"
argument_list|)
expr_stmt|;
name|mixed
operator|.
name|put
argument_list|(
name|longVal
argument_list|,
name|longVal
argument_list|)
expr_stmt|;
comment|// Float-typed field value
name|mixed
operator|.
name|put
argument_list|(
operator|-
literal|2894.518
argument_list|,
literal|"-2,894.518"
argument_list|)
expr_stmt|;
name|mixed
operator|.
name|put
argument_list|(
literal|187947.2193
argument_list|,
literal|"187,947.2193"
argument_list|)
expr_stmt|;
name|SolrInputDocument
name|d
init|=
name|processAdd
argument_list|(
literal|"parse-double-no-run-processor"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"7206"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"not_in_schema"
argument_list|,
name|mixed
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|boolean
name|foundLong
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"not_in_schema"
argument_list|)
control|)
block|{
if|if
condition|(
name|longVal
operator|==
name|o
condition|)
block|{
name|foundLong
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|String
argument_list|)
expr_stmt|;
block|}
name|mixed
operator|.
name|values
argument_list|()
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|foundLong
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mixed
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseBooleanRoundTrip
specifier|public
name|void
name|testParseBooleanRoundTrip
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"boolean1_b"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match dynamic field "*_b"
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"boolean2_b"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match dynamic field "*_b"
name|boolean
name|value1
init|=
literal|true
decl_stmt|;
name|boolean
name|value2
init|=
literal|false
decl_stmt|;
name|SolrInputDocument
name|d
init|=
name|processAdd
argument_list|(
literal|"parse-boolean"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"141"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"boolean1_b"
argument_list|,
name|value1
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"boolean2_b"
argument_list|,
name|value2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"boolean1_b"
argument_list|)
operator|instanceof
name|Boolean
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value1
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"boolean1_b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"boolean2_b"
argument_list|)
operator|instanceof
name|Boolean
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value2
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"boolean2_b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:141"
argument_list|)
argument_list|,
literal|"//bool[@name='boolean1_b'][.='"
operator|+
name|value1
operator|+
literal|"']"
argument_list|,
literal|"//bool[@name='boolean2_b'][.='"
operator|+
name|value2
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseAlternateValueBooleans
specifier|public
name|void
name|testParseAlternateValueBooleans
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"boolean1_b"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match dynamic field "*_b"
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"boolean2_b"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match dynamic field "*_b"
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"boolean3_b"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match dynamic field "*_b"
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"boolean4_b"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match dynamic field "*_b"
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"boolean5_b"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match dynamic field "*_b"
name|assertNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"not_in_schema"
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
index|[]
name|values
init|=
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|}
decl_stmt|;
name|String
index|[]
name|stringValues
init|=
block|{
literal|"on"
block|,
literal|"yes"
block|,
literal|"True"
block|,
literal|"Off"
block|,
literal|"no"
block|,
literal|"FALSE"
block|}
decl_stmt|;
name|String
index|[]
name|fieldNames
init|=
block|{
literal|"boolean1_b"
block|,
literal|"boolean2_b"
block|,
literal|"boolean3_b"
block|,
literal|"boolean4_b"
block|,
literal|"boolean5_b"
block|,
literal|"not_in_schema"
block|}
decl_stmt|;
name|SolrInputDocument
name|d
init|=
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"55"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|d
operator|.
name|addField
argument_list|(
name|fieldNames
index|[
name|i
index|]
argument_list|,
name|stringValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|d
operator|=
name|processAdd
argument_list|(
literal|"parse-boolean-alternate-values-no-run-processor"
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
name|fieldNames
index|[
name|i
index|]
argument_list|)
operator|instanceof
name|Boolean
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
name|i
index|]
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
name|fieldNames
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParseAlternateSingleValuesBooleans
specifier|public
name|void
name|testParseAlternateSingleValuesBooleans
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"boolean1_b"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match dynamic field "*_b"
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"boolean2_b"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should match dynamic field "*_b"
name|boolean
index|[]
name|values
init|=
block|{
literal|true
block|,
literal|false
block|}
decl_stmt|;
name|String
index|[]
name|stringValues
init|=
block|{
literal|"yup"
block|,
literal|"nope"
block|}
decl_stmt|;
name|String
index|[]
name|fieldNames
init|=
block|{
literal|"boolean1_b"
block|,
literal|"boolean2_b"
block|}
decl_stmt|;
name|SolrInputDocument
name|d
init|=
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"59"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|d
operator|.
name|addField
argument_list|(
name|fieldNames
index|[
name|i
index|]
argument_list|,
name|stringValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|d
operator|=
name|processAdd
argument_list|(
literal|"parse-boolean-alternate-single-values-no-run-processor"
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
name|fieldNames
index|[
name|i
index|]
argument_list|)
operator|instanceof
name|Boolean
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
name|i
index|]
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
name|fieldNames
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Standard boolean values should not be mutated, since they're not configured
name|stringValues
operator|=
operator|new
name|String
index|[]
block|{
literal|"true"
block|,
literal|"false"
block|}
expr_stmt|;
name|d
operator|=
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"593"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|d
operator|.
name|addField
argument_list|(
name|fieldNames
index|[
name|i
index|]
argument_list|,
name|stringValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|d
operator|=
name|processAdd
argument_list|(
literal|"parse-boolean-alternate-single-values-no-run-processor"
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldValue
argument_list|(
name|fieldNames
index|[
name|i
index|]
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFailedParseMixedBoolean
specifier|public
name|void
name|testFailedParseMixedBoolean
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
literal|"not_in_schema"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|mixed
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Long
name|longVal
init|=
literal|294423L
decl_stmt|;
name|mixed
operator|.
name|put
argument_list|(
literal|true
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|mixed
operator|.
name|put
argument_list|(
name|longVal
argument_list|,
name|longVal
argument_list|)
expr_stmt|;
comment|// Float-typed field value
name|mixed
operator|.
name|put
argument_list|(
literal|false
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|mixed
operator|.
name|put
argument_list|(
literal|true
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|SolrInputDocument
name|d
init|=
name|processAdd
argument_list|(
literal|"parse-boolean-no-run-processor"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"7207"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"not_in_schema"
argument_list|,
name|mixed
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|boolean
name|foundLong
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"not_in_schema"
argument_list|)
control|)
block|{
if|if
condition|(
name|longVal
operator|==
name|o
condition|)
block|{
name|foundLong
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|String
argument_list|)
expr_stmt|;
block|}
name|mixed
operator|.
name|values
argument_list|()
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|foundLong
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mixed
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCascadingParsers
specifier|public
name|void
name|testCascadingParsers
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
specifier|final
name|String
name|fieldName
init|=
literal|"not_in_schema"
decl_stmt|;
name|assertNull
argument_list|(
name|schema
operator|.
name|getFieldOrNull
argument_list|(
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
name|SolrInputDocument
name|d
init|=
literal|null
decl_stmt|;
name|String
name|chain
init|=
literal|"cascading-parsers-no-run-processor"
decl_stmt|;
name|Map
argument_list|<
name|Boolean
argument_list|,
name|String
argument_list|>
name|booleans
init|=
operator|new
name|HashMap
argument_list|<
name|Boolean
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|booleans
operator|.
name|put
argument_list|(
literal|true
argument_list|,
literal|"truE"
argument_list|)
expr_stmt|;
name|booleans
operator|.
name|put
argument_list|(
literal|false
argument_list|,
literal|"False"
argument_list|)
expr_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
name|chain
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"341"
argument_list|)
argument_list|,
name|f
argument_list|(
name|fieldName
argument_list|,
name|booleans
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|d
operator|.
name|getFieldValues
argument_list|(
name|fieldName
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|Boolean
argument_list|)
expr_stmt|;
name|booleans
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|booleans
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|ints
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ints
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|ints
operator|.
name|put
argument_list|(
literal|50928
argument_list|,
literal|"50928"
argument_list|)
expr_stmt|;
name|ints
operator|.
name|put
argument_list|(
literal|86942008
argument_list|,
literal|"86,942,008"
argument_list|)
expr_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
name|chain
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"333"
argument_list|)
argument_list|,
name|f
argument_list|(
name|fieldName
argument_list|,
name|ints
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|d
operator|.
name|getFieldValues
argument_list|(
name|fieldName
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|ints
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|ints
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|longs
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|longs
operator|.
name|put
argument_list|(
literal|2L
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|longs
operator|.
name|put
argument_list|(
literal|50928L
argument_list|,
literal|"50928"
argument_list|)
expr_stmt|;
name|longs
operator|.
name|put
argument_list|(
literal|86942008987654L
argument_list|,
literal|"86,942,008,987,654"
argument_list|)
expr_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
name|chain
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"342"
argument_list|)
argument_list|,
name|f
argument_list|(
name|fieldName
argument_list|,
name|longs
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|d
operator|.
name|getFieldValues
argument_list|(
name|fieldName
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|Long
argument_list|)
expr_stmt|;
name|longs
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|longs
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|/*     // Disabling this test because unlike Integer/Long, Float parsing can perform     // rounding to make values fit.  See      Map<Float,String> floats = new HashMap<Float,String>();     floats.put(2.0, "2.");     floats.put(509.28, "509.28");     floats.put(86942.008, "86,942.008");     d = processAdd(chain, doc(f("id", "342"), f(fieldName, floats.values())));     assertNotNull(d);     for (Object o : d.getFieldValues(fieldName)) {       assertTrue(o instanceof float);       longs.remove(o);     }     */
name|Map
argument_list|<
name|Double
argument_list|,
name|String
argument_list|>
name|doubles
init|=
operator|new
name|HashMap
argument_list|<
name|Double
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|doubles
operator|.
name|put
argument_list|(
literal|2.0
argument_list|,
literal|"2."
argument_list|)
expr_stmt|;
name|doubles
operator|.
name|put
argument_list|(
literal|509.28
argument_list|,
literal|"509.28"
argument_list|)
expr_stmt|;
name|doubles
operator|.
name|put
argument_list|(
literal|86942.008
argument_list|,
literal|"86,942.008"
argument_list|)
expr_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
name|chain
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"342"
argument_list|)
argument_list|,
name|f
argument_list|(
name|fieldName
argument_list|,
name|doubles
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|d
operator|.
name|getFieldValues
argument_list|(
name|fieldName
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|Double
argument_list|)
expr_stmt|;
name|longs
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|DateTimeFormatter
name|dateTimeFormatter
init|=
name|ISODateTimeFormat
operator|.
name|dateOptionalTimeParser
argument_list|()
operator|.
name|withZoneUTC
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Date
argument_list|,
name|String
argument_list|>
name|dates
init|=
operator|new
name|HashMap
argument_list|<
name|Date
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|dateStrings
init|=
block|{
literal|"2020-05-13T18:47"
block|,
literal|"1989-12-14"
block|,
literal|"1682-07-22T18:33:00.000Z"
block|}
decl_stmt|;
for|for
control|(
name|String
name|dateString
range|:
name|dateStrings
control|)
block|{
name|dates
operator|.
name|put
argument_list|(
name|dateTimeFormatter
operator|.
name|parseDateTime
argument_list|(
name|dateString
argument_list|)
operator|.
name|toDate
argument_list|()
argument_list|,
name|dateString
argument_list|)
expr_stmt|;
block|}
name|d
operator|=
name|processAdd
argument_list|(
name|chain
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"343"
argument_list|)
argument_list|,
name|f
argument_list|(
name|fieldName
argument_list|,
name|dates
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|d
operator|.
name|getFieldValues
argument_list|(
name|fieldName
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|Date
argument_list|)
expr_stmt|;
name|dates
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|dates
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Double
argument_list|,
name|String
argument_list|>
name|mixedLongsAndDoubles
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Double
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// preserve order
name|mixedLongsAndDoubles
operator|.
name|put
argument_list|(
literal|85.0
argument_list|,
literal|"85"
argument_list|)
expr_stmt|;
name|mixedLongsAndDoubles
operator|.
name|put
argument_list|(
literal|2.94423E
operator|-
literal|9
argument_list|,
literal|"2.94423E-9"
argument_list|)
expr_stmt|;
name|mixedLongsAndDoubles
operator|.
name|put
argument_list|(
literal|2894518.0
argument_list|,
literal|"2,894,518"
argument_list|)
expr_stmt|;
name|mixedLongsAndDoubles
operator|.
name|put
argument_list|(
literal|48794721.937
argument_list|,
literal|"48,794,721.937"
argument_list|)
expr_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
name|chain
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"344"
argument_list|)
argument_list|,
name|f
argument_list|(
name|fieldName
argument_list|,
name|mixedLongsAndDoubles
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|d
operator|.
name|getFieldValues
argument_list|(
name|fieldName
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|Double
argument_list|)
expr_stmt|;
name|mixedLongsAndDoubles
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|mixedLongsAndDoubles
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|mixed
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|mixed
operator|.
name|add
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|mixed
operator|.
name|add
argument_list|(
literal|"1682-07-22T18:33:00.000Z"
argument_list|)
expr_stmt|;
name|mixed
operator|.
name|add
argument_list|(
literal|"2,894,518"
argument_list|)
expr_stmt|;
name|mixed
operator|.
name|add
argument_list|(
literal|"308,393,131,379,900"
argument_list|)
expr_stmt|;
name|mixed
operator|.
name|add
argument_list|(
literal|"48,794,721.937"
argument_list|)
expr_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
name|chain
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"345"
argument_list|)
argument_list|,
name|f
argument_list|(
name|fieldName
argument_list|,
name|mixed
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|d
operator|.
name|getFieldValues
argument_list|(
name|fieldName
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|String
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|Double
argument_list|,
name|Object
argument_list|>
name|mixedDoubles
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Double
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// preserve order
name|mixedDoubles
operator|.
name|put
argument_list|(
literal|85.0
argument_list|,
literal|"85"
argument_list|)
expr_stmt|;
name|mixedDoubles
operator|.
name|put
argument_list|(
literal|2.94423E
operator|-
literal|9
argument_list|,
literal|2.94423E
operator|-
literal|9
argument_list|)
expr_stmt|;
comment|// Double-typed field value
name|mixedDoubles
operator|.
name|put
argument_list|(
literal|2894518.0
argument_list|,
literal|"2,894,518"
argument_list|)
expr_stmt|;
name|mixedDoubles
operator|.
name|put
argument_list|(
literal|48794721.937
argument_list|,
literal|"48,794,721.937"
argument_list|)
expr_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
name|chain
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"3391"
argument_list|)
argument_list|,
name|f
argument_list|(
name|fieldName
argument_list|,
name|mixedDoubles
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|d
operator|.
name|getFieldValues
argument_list|(
name|fieldName
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|Double
argument_list|)
expr_stmt|;
name|mixedDoubles
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|mixedDoubles
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
name|mixedInts
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// preserve order
name|mixedInts
operator|.
name|put
argument_list|(
literal|85
argument_list|,
literal|"85"
argument_list|)
expr_stmt|;
name|mixedInts
operator|.
name|put
argument_list|(
literal|294423
argument_list|,
literal|294423
argument_list|)
expr_stmt|;
comment|// Integer-typed field value
name|mixedInts
operator|.
name|put
argument_list|(
operator|-
literal|2894518
argument_list|,
literal|"-2,894,518"
argument_list|)
expr_stmt|;
name|mixedInts
operator|.
name|put
argument_list|(
literal|1879472193
argument_list|,
literal|"1,879,472,193"
argument_list|)
expr_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
name|chain
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"3392"
argument_list|)
argument_list|,
name|f
argument_list|(
name|fieldName
argument_list|,
name|mixedInts
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|d
operator|.
name|getFieldValues
argument_list|(
name|fieldName
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|mixedInts
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|mixedInts
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Object
argument_list|>
name|mixedLongs
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Long
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// preserve order
name|mixedLongs
operator|.
name|put
argument_list|(
literal|85L
argument_list|,
literal|"85"
argument_list|)
expr_stmt|;
name|mixedLongs
operator|.
name|put
argument_list|(
literal|42944233L
argument_list|,
literal|42944233L
argument_list|)
expr_stmt|;
comment|// Long-typed field value
name|mixedLongs
operator|.
name|put
argument_list|(
literal|2894518L
argument_list|,
literal|"2,894,518"
argument_list|)
expr_stmt|;
name|mixedLongs
operator|.
name|put
argument_list|(
literal|48794721937L
argument_list|,
literal|"48,794,721,937"
argument_list|)
expr_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
name|chain
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"3393"
argument_list|)
argument_list|,
name|f
argument_list|(
name|fieldName
argument_list|,
name|mixedLongs
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|d
operator|.
name|getFieldValues
argument_list|(
name|fieldName
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|Long
argument_list|)
expr_stmt|;
name|mixedLongs
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|mixedLongs
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Boolean
argument_list|,
name|Object
argument_list|>
name|mixedBooleans
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Boolean
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// preserve order
name|mixedBooleans
operator|.
name|put
argument_list|(
literal|true
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|mixedBooleans
operator|.
name|put
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Boolean-typed field value
name|mixedBooleans
operator|.
name|put
argument_list|(
literal|false
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|mixedBooleans
operator|.
name|put
argument_list|(
literal|true
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
name|chain
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"3394"
argument_list|)
argument_list|,
name|f
argument_list|(
name|fieldName
argument_list|,
name|mixedBooleans
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|d
operator|.
name|getFieldValues
argument_list|(
name|fieldName
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|Boolean
argument_list|)
expr_stmt|;
name|mixedBooleans
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|mixedBooleans
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|dateTimeFormatter
operator|=
name|ISODateTimeFormat
operator|.
name|dateOptionalTimeParser
argument_list|()
operator|.
name|withZoneUTC
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|Date
argument_list|,
name|Object
argument_list|>
name|mixedDates
init|=
operator|new
name|HashMap
argument_list|<
name|Date
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|dateStrings
operator|=
operator|new
name|String
index|[]
block|{
literal|"2020-05-13T18:47"
block|,
literal|"1989-12-14"
block|,
literal|"1682-07-22T18:33:00.000Z"
block|}
expr_stmt|;
for|for
control|(
name|String
name|dateString
range|:
name|dateStrings
control|)
block|{
name|mixedDates
operator|.
name|put
argument_list|(
name|dateTimeFormatter
operator|.
name|parseDateTime
argument_list|(
name|dateString
argument_list|)
operator|.
name|toDate
argument_list|()
argument_list|,
name|dateString
argument_list|)
expr_stmt|;
block|}
name|Date
name|extraDate
init|=
name|dateTimeFormatter
operator|.
name|parseDateTime
argument_list|(
literal|"2003-04-24"
argument_list|)
operator|.
name|toDate
argument_list|()
decl_stmt|;
name|mixedDates
operator|.
name|put
argument_list|(
name|extraDate
argument_list|,
name|extraDate
argument_list|)
expr_stmt|;
comment|// Date-typed field value
name|d
operator|=
name|processAdd
argument_list|(
name|chain
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"3395"
argument_list|)
argument_list|,
name|f
argument_list|(
name|fieldName
argument_list|,
name|mixedDates
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|d
operator|.
name|getFieldValues
argument_list|(
name|fieldName
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|Date
argument_list|)
expr_stmt|;
name|mixedDates
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|mixedDates
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
