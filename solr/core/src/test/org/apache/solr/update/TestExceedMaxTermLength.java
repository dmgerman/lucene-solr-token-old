begin_unit
begin_package
DECL|package|org.apache.solr.update
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|TestExceedMaxTermLength
specifier|public
class|class
name|TestExceedMaxTermLength
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|TEST_SOLRCONFIG_NAME
specifier|public
specifier|final
specifier|static
name|String
name|TEST_SOLRCONFIG_NAME
init|=
literal|"solrconfig.xml"
decl_stmt|;
DECL|field|TEST_SCHEMAXML_NAME
specifier|public
specifier|final
specifier|static
name|String
name|TEST_SCHEMAXML_NAME
init|=
literal|"schema11.xml"
decl_stmt|;
DECL|field|minTestTermLength
specifier|private
specifier|final
specifier|static
name|int
name|minTestTermLength
init|=
name|IndexWriter
operator|.
name|MAX_TERM_LENGTH
operator|+
literal|1
decl_stmt|;
DECL|field|maxTestTermLength
specifier|private
specifier|final
specifier|static
name|int
name|maxTestTermLength
init|=
name|IndexWriter
operator|.
name|MAX_TERM_LENGTH
operator|*
literal|2
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeTests
specifier|public
specifier|static
name|void
name|beforeTests
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
name|TEST_SOLRCONFIG_NAME
argument_list|,
name|TEST_SCHEMAXML_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|delQ
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExceededMaxTermLength
specifier|public
name|void
name|testExceededMaxTermLength
parameter_list|()
block|{
comment|// problematic field
specifier|final
name|String
name|longFieldName
init|=
literal|"cat"
decl_stmt|;
specifier|final
name|String
name|longFieldValue
init|=
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
name|minTestTermLength
argument_list|,
name|maxTestTermLength
argument_list|)
decl_stmt|;
specifier|final
name|String
name|okayFieldName
init|=
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|50
argument_list|)
operator|+
literal|"_sS"
decl_stmt|;
comment|//Dynamic field
specifier|final
name|String
name|okayFieldValue
init|=
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
name|minTestTermLength
argument_list|,
name|maxTestTermLength
argument_list|)
decl_stmt|;
name|boolean
name|includeOkayFields
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|//Use XML
name|String
name|doc
decl_stmt|;
if|if
condition|(
name|includeOkayFields
condition|)
block|{
name|doc
operator|=
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|longFieldName
argument_list|,
name|longFieldValue
argument_list|,
name|okayFieldName
argument_list|,
name|okayFieldValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|=
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|longFieldName
argument_list|,
name|longFieldValue
argument_list|)
expr_stmt|;
block|}
name|assertFailedU
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//Use JSON
try|try
block|{
if|if
condition|(
name|includeOkayFields
condition|)
block|{
name|String
name|jsonStr
init|=
literal|"[{'id':'1','%s':'%s', '%s': '%s'}]"
decl_stmt|;
name|jsonStr
operator|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
name|jsonStr
argument_list|,
name|longFieldName
argument_list|,
name|longFieldValue
argument_list|,
name|okayFieldName
argument_list|,
name|okayFieldValue
argument_list|)
expr_stmt|;
name|updateJ
argument_list|(
name|json
argument_list|(
name|jsonStr
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|jsonStr
init|=
literal|"[{'id':'1','%s':'%s'}]"
decl_stmt|;
name|jsonStr
operator|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
name|jsonStr
argument_list|,
name|longFieldName
argument_list|,
name|longFieldValue
argument_list|)
expr_stmt|;
name|updateJ
argument_list|(
name|json
argument_list|(
name|jsonStr
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//expected
name|String
name|msg
init|=
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|contains
argument_list|(
literal|"one immense term in field=\"cat\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
argument_list|,
literal|"//*[@numFound='0']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExceededMaxTermLengthWithLimitingFilter
specifier|public
name|void
name|testExceededMaxTermLengthWithLimitingFilter
parameter_list|()
block|{
comment|// problematic field
specifier|final
name|String
name|longFieldName
init|=
literal|"cat_length"
decl_stmt|;
specifier|final
name|String
name|longFieldValue
init|=
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
name|minTestTermLength
argument_list|,
name|maxTestTermLength
argument_list|)
decl_stmt|;
specifier|final
name|String
name|okayFieldName
init|=
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|50
argument_list|)
operator|+
literal|"_sS"
decl_stmt|;
comment|//Dynamic field
specifier|final
name|String
name|okayFieldValue
init|=
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
name|minTestTermLength
argument_list|,
name|maxTestTermLength
argument_list|)
decl_stmt|;
name|boolean
name|includeOkayFields
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|//Use XML
name|String
name|doc
decl_stmt|;
if|if
condition|(
name|includeOkayFields
condition|)
block|{
name|doc
operator|=
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|longFieldName
argument_list|,
name|longFieldValue
argument_list|,
name|okayFieldName
argument_list|,
name|okayFieldValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|=
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|longFieldName
argument_list|,
name|longFieldValue
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//Use JSON
name|String
name|jsonStr
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|includeOkayFields
condition|)
block|{
name|jsonStr
operator|=
literal|"[{'id':'1','%s':'%s', '%s': '%s'}]"
expr_stmt|;
name|jsonStr
operator|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
name|jsonStr
argument_list|,
name|longFieldName
argument_list|,
name|longFieldValue
argument_list|,
name|okayFieldName
argument_list|,
name|okayFieldValue
argument_list|)
expr_stmt|;
name|updateJ
argument_list|(
name|json
argument_list|(
name|jsonStr
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jsonStr
operator|=
literal|"[{'id':'1','%s':'%s'}]"
expr_stmt|;
name|jsonStr
operator|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
name|jsonStr
argument_list|,
name|longFieldName
argument_list|,
name|longFieldValue
argument_list|)
expr_stmt|;
name|updateJ
argument_list|(
name|json
argument_list|(
name|jsonStr
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not have failed adding doc "
operator|+
name|jsonStr
argument_list|)
expr_stmt|;
name|String
name|msg
init|=
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|contains
argument_list|(
literal|"one immense term in field=\"cat\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
