begin_unit
begin_package
DECL|package|org.apache.solr.update
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
operator|.
name|DistributedUpdateProcessor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|ObjectBuilder
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
operator|.
name|DistributingUpdateProcessorFactory
operator|.
name|DISTRIB_UPDATE_PARAM
import|;
end_import
begin_class
annotation|@
name|Slow
DECL|class|CdcrUpdateLogTest
specifier|public
class|class
name|CdcrUpdateLogTest
extends|extends
name|SolrTestCaseJ4
block|{
comment|// means that we've seen the leader and have version info (i.e. we are a non-leader replica)
DECL|field|FROM_LEADER
specifier|private
specifier|static
name|String
name|FROM_LEADER
init|=
name|DistributedUpdateProcessor
operator|.
name|DistribPhase
operator|.
name|FROMLEADER
operator|.
name|toString
argument_list|()
decl_stmt|;
DECL|field|timeout
specifier|private
specifier|static
name|int
name|timeout
init|=
literal|60
decl_stmt|;
comment|// acquire timeout in seconds.  change this to a huge number when debugging to prevent threads from advancing.
comment|// TODO: fix this test to not require FSDirectory
DECL|field|savedFactory
specifier|static
name|String
name|savedFactory
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|savedFactory
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"solr.DirectoryFactory"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.directoryFactory"
argument_list|,
literal|"org.apache.solr.core.MockFSDirectoryFactory"
argument_list|)
expr_stmt|;
name|initCore
argument_list|(
literal|"solrconfig-cdcrupdatelog.xml"
argument_list|,
literal|"schema15.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
block|{
if|if
condition|(
name|savedFactory
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.directoryFactory"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.directoryFactory"
argument_list|,
name|savedFactory
argument_list|)
expr_stmt|;
block|}
block|}
comment|// since we make up fake versions in these tests, we can get messed up by a DBQ with a real version
comment|// since Solr can think following updates were reordered.
annotation|@
name|Override
DECL|method|clearIndex
specifier|public
name|void
name|clearIndex
parameter_list|()
block|{
try|try
block|{
name|deleteByQueryAndGetVersion
argument_list|(
literal|"*:*"
argument_list|,
name|params
argument_list|(
literal|"_version_"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
operator|-
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|DISTRIB_UPDATE_PARAM
argument_list|,
name|FROM_LEADER
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|clearCore
specifier|private
name|void
name|clearCore
parameter_list|()
throws|throws
name|IOException
block|{
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|UpdateLog
name|ulog
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
name|File
name|logDir
init|=
operator|new
name|File
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
operator|.
name|getLogDir
argument_list|()
argument_list|)
decl_stmt|;
name|h
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
index|[]
name|files
init|=
name|ulog
operator|.
name|getLogList
argument_list|(
name|logDir
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|File
name|toDelete
init|=
operator|new
name|File
argument_list|(
name|logDir
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|Files
operator|.
name|delete
argument_list|(
name|toDelete
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Should we really error out here?
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ulog
operator|.
name|getLogList
argument_list|(
name|logDir
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|createCore
argument_list|()
expr_stmt|;
block|}
DECL|method|deleteByQuery
specifier|private
name|void
name|deleteByQuery
parameter_list|(
name|String
name|q
parameter_list|)
throws|throws
name|Exception
block|{
name|deleteByQueryAndGetVersion
argument_list|(
name|q
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|addDocs
specifier|private
name|void
name|addDocs
parameter_list|(
name|int
name|nDocs
parameter_list|,
name|int
name|start
parameter_list|,
name|LinkedList
argument_list|<
name|Long
argument_list|>
name|versions
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nDocs
condition|;
name|i
operator|++
control|)
block|{
name|versions
operator|.
name|addFirst
argument_list|(
name|addAndGetVersion
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|start
operator|+
name|i
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getVer
specifier|private
specifier|static
name|Long
name|getVer
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|response
init|=
name|JQ
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|Map
name|rsp
init|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|fromJSON
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|Map
name|doc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rsp
operator|.
name|containsKey
argument_list|(
literal|"doc"
argument_list|)
condition|)
block|{
name|doc
operator|=
operator|(
name|Map
operator|)
name|rsp
operator|.
name|get
argument_list|(
literal|"doc"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rsp
operator|.
name|containsKey
argument_list|(
literal|"docs"
argument_list|)
condition|)
block|{
name|List
name|lst
init|=
operator|(
name|List
operator|)
name|rsp
operator|.
name|get
argument_list|(
literal|"docs"
argument_list|)
decl_stmt|;
if|if
condition|(
name|lst
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|doc
operator|=
operator|(
name|Map
operator|)
name|lst
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|rsp
operator|.
name|containsKey
argument_list|(
literal|"response"
argument_list|)
condition|)
block|{
name|Map
name|responseMap
init|=
operator|(
name|Map
operator|)
name|rsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
decl_stmt|;
name|List
name|lst
init|=
operator|(
name|List
operator|)
name|responseMap
operator|.
name|get
argument_list|(
literal|"docs"
argument_list|)
decl_stmt|;
if|if
condition|(
name|lst
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|doc
operator|=
operator|(
name|Map
operator|)
name|lst
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|(
name|Long
operator|)
name|doc
operator|.
name|get
argument_list|(
literal|"_version_"
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testLogReaderNext
specifier|public
name|void
name|testLogReaderNext
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|clearCore
argument_list|()
expr_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
name|UpdateLog
name|ulog
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
name|CdcrUpdateLog
operator|.
name|CdcrLogReader
name|reader
init|=
operator|(
operator|(
name|CdcrUpdateLog
operator|)
name|ulog
operator|)
operator|.
name|newLogReader
argument_list|()
decl_stmt|;
comment|// test reader on empty updates log
name|LinkedList
argument_list|<
name|Long
argument_list|>
name|versions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|addDocs
argument_list|(
literal|10
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|10
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|addDocs
argument_list|(
literal|11
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|11
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
comment|// 10 adds
name|assertNotNull
argument_list|(
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Object
name|o
init|=
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|List
name|entry
init|=
operator|(
name|List
operator|)
name|o
decl_stmt|;
name|int
name|opAndFlags
init|=
operator|(
name|Integer
operator|)
name|entry
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|UpdateLog
operator|.
name|COMMIT
argument_list|,
name|opAndFlags
operator|&
name|UpdateLog
operator|.
name|OPERATION_MASK
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|11
condition|;
name|i
operator|++
control|)
block|{
comment|// 11 adds
name|assertNotNull
argument_list|(
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|o
operator|=
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|entry
operator|=
operator|(
name|List
operator|)
name|o
expr_stmt|;
name|opAndFlags
operator|=
operator|(
name|Integer
operator|)
name|entry
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UpdateLog
operator|.
name|COMMIT
argument_list|,
name|opAndFlags
operator|&
name|UpdateLog
operator|.
name|OPERATION_MASK
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// add a new tlog after having exhausted the reader
name|addDocs
argument_list|(
literal|10
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|10
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// the reader should pick up the new tlog
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|11
condition|;
name|i
operator|++
control|)
block|{
comment|// 10 adds + 1 commit
name|assertNotNull
argument_list|(
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check the seek method of the log reader.    */
annotation|@
name|Test
DECL|method|testLogReaderSeek
specifier|public
name|void
name|testLogReaderSeek
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|clearCore
argument_list|()
expr_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
name|UpdateLog
name|ulog
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
name|CdcrUpdateLog
operator|.
name|CdcrLogReader
name|reader1
init|=
operator|(
operator|(
name|CdcrUpdateLog
operator|)
name|ulog
operator|)
operator|.
name|newLogReader
argument_list|()
decl_stmt|;
name|CdcrUpdateLog
operator|.
name|CdcrLogReader
name|reader2
init|=
operator|(
operator|(
name|CdcrUpdateLog
operator|)
name|ulog
operator|)
operator|.
name|newLogReader
argument_list|()
decl_stmt|;
name|CdcrUpdateLog
operator|.
name|CdcrLogReader
name|reader3
init|=
operator|(
operator|(
name|CdcrUpdateLog
operator|)
name|ulog
operator|)
operator|.
name|newLogReader
argument_list|()
decl_stmt|;
name|LinkedList
argument_list|<
name|Long
argument_list|>
name|versions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|addDocs
argument_list|(
literal|10
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|10
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|addDocs
argument_list|(
literal|11
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|11
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|addDocs
argument_list|(
literal|10
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|10
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test case where target version is equal to startVersion of tlog file
name|long
name|targetVersion
init|=
name|getVer
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:10"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|reader1
operator|.
name|seek
argument_list|(
name|targetVersion
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|reader1
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|List
name|entry
init|=
operator|(
name|List
operator|)
name|o
decl_stmt|;
name|long
name|version
init|=
operator|(
name|Long
operator|)
name|entry
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|targetVersion
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|reader1
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// test case where target version is superior to startVersion of tlog file
name|targetVersion
operator|=
name|getVer
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:26"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reader2
operator|.
name|seek
argument_list|(
name|targetVersion
argument_list|)
argument_list|)
expr_stmt|;
name|o
operator|=
name|reader2
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|entry
operator|=
operator|(
name|List
operator|)
name|o
expr_stmt|;
name|version
operator|=
operator|(
name|Long
operator|)
name|entry
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targetVersion
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|reader2
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// test case where target version is inferior to startVersion of oldest tlog file
name|targetVersion
operator|=
name|getVer
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:0"
argument_list|)
argument_list|)
operator|-
literal|1
expr_stmt|;
name|assertFalse
argument_list|(
name|reader3
operator|.
name|seek
argument_list|(
name|targetVersion
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check that the log reader is able to read the new tlog    * and pick up new entries as they appear.    */
annotation|@
name|Test
DECL|method|testLogReaderNextOnNewTLog
specifier|public
name|void
name|testLogReaderNextOnNewTLog
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|clearCore
argument_list|()
expr_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
name|UpdateLog
name|ulog
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
name|CdcrUpdateLog
operator|.
name|CdcrLogReader
name|reader
init|=
operator|(
operator|(
name|CdcrUpdateLog
operator|)
name|ulog
operator|)
operator|.
name|newLogReader
argument_list|()
decl_stmt|;
name|LinkedList
argument_list|<
name|Long
argument_list|>
name|versions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|addDocs
argument_list|(
literal|10
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|10
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|addDocs
argument_list|(
literal|11
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|11
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|22
condition|;
name|i
operator|++
control|)
block|{
comment|// 21 adds + 1 commit
name|assertNotNull
argument_list|(
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// we should have reach the end of the new tlog
name|assertNull
argument_list|(
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|addDocs
argument_list|(
literal|5
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|5
expr_stmt|;
comment|// the reader should now pick up the new updates
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
comment|// 5 adds
name|assertNotNull
argument_list|(
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveOldLogs
specifier|public
name|void
name|testRemoveOldLogs
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|clearCore
argument_list|()
expr_stmt|;
name|UpdateLog
name|ulog
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
name|File
name|logDir
init|=
operator|new
name|File
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
operator|.
name|getLogDir
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
name|int
name|maxReq
init|=
literal|50
decl_stmt|;
name|LinkedList
argument_list|<
name|Long
argument_list|>
name|versions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|addDocs
argument_list|(
literal|10
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|10
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"getVersions"
argument_list|,
literal|""
operator|+
name|maxReq
argument_list|)
argument_list|,
literal|"/versions=="
operator|+
name|versions
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|maxReq
argument_list|,
name|start
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"getVersions"
argument_list|,
literal|""
operator|+
name|maxReq
argument_list|)
argument_list|,
literal|"/versions=="
operator|+
name|versions
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|maxReq
argument_list|,
name|start
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|addDocs
argument_list|(
literal|10
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|10
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"getVersions"
argument_list|,
literal|""
operator|+
name|maxReq
argument_list|)
argument_list|,
literal|"/versions=="
operator|+
name|versions
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|maxReq
argument_list|,
name|start
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"getVersions"
argument_list|,
literal|""
operator|+
name|maxReq
argument_list|)
argument_list|,
literal|"/versions=="
operator|+
name|versions
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|maxReq
argument_list|,
name|start
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ulog
operator|.
name|getLogList
argument_list|(
name|logDir
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Get a cdcr log reader to initialise a log pointer
name|CdcrUpdateLog
operator|.
name|CdcrLogReader
name|reader
init|=
operator|(
operator|(
name|CdcrUpdateLog
operator|)
name|ulog
operator|)
operator|.
name|newLogReader
argument_list|()
decl_stmt|;
name|addDocs
argument_list|(
literal|105
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|105
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"getVersions"
argument_list|,
literal|""
operator|+
name|maxReq
argument_list|)
argument_list|,
literal|"/versions=="
operator|+
name|versions
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|maxReq
argument_list|,
name|start
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"getVersions"
argument_list|,
literal|""
operator|+
name|maxReq
argument_list|)
argument_list|,
literal|"/versions=="
operator|+
name|versions
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|maxReq
argument_list|,
name|start
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// the previous two tlogs should not be removed
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|ulog
operator|.
name|getLogList
argument_list|(
name|logDir
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// move the pointer past the first tlog
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|11
condition|;
name|i
operator|++
control|)
block|{
comment|// 10 adds + 1 commit
name|assertNotNull
argument_list|(
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addDocs
argument_list|(
literal|10
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|10
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"getVersions"
argument_list|,
literal|""
operator|+
name|maxReq
argument_list|)
argument_list|,
literal|"/versions=="
operator|+
name|versions
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|maxReq
argument_list|,
name|start
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"getVersions"
argument_list|,
literal|""
operator|+
name|maxReq
argument_list|)
argument_list|,
literal|"/versions=="
operator|+
name|versions
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|maxReq
argument_list|,
name|start
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// the first tlog should be removed
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|ulog
operator|.
name|getLogList
argument_list|(
name|logDir
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|h
operator|.
name|close
argument_list|()
expr_stmt|;
name|createCore
argument_list|()
expr_stmt|;
name|ulog
operator|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
expr_stmt|;
name|addDocs
argument_list|(
literal|105
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|105
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"getVersions"
argument_list|,
literal|""
operator|+
name|maxReq
argument_list|)
argument_list|,
literal|"/versions=="
operator|+
name|versions
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|maxReq
argument_list|,
name|start
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"getVersions"
argument_list|,
literal|""
operator|+
name|maxReq
argument_list|)
argument_list|,
literal|"/versions=="
operator|+
name|versions
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|maxReq
argument_list|,
name|start
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// previous tlogs should be gone now
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ulog
operator|.
name|getLogList
argument_list|(
name|logDir
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check that the removal of old logs is taking into consideration    * multiple log pointers. Check also that the removal takes into consideration the    * numRecordsToKeep limit, even if the log pointers are ahead.    */
annotation|@
name|Test
DECL|method|testRemoveOldLogsMultiplePointers
specifier|public
name|void
name|testRemoveOldLogsMultiplePointers
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|clearCore
argument_list|()
expr_stmt|;
name|UpdateLog
name|ulog
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
name|File
name|logDir
init|=
operator|new
name|File
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
operator|.
name|getLogDir
argument_list|()
argument_list|)
decl_stmt|;
name|CdcrUpdateLog
operator|.
name|CdcrLogReader
name|reader1
init|=
operator|(
operator|(
name|CdcrUpdateLog
operator|)
name|ulog
operator|)
operator|.
name|newLogReader
argument_list|()
decl_stmt|;
name|CdcrUpdateLog
operator|.
name|CdcrLogReader
name|reader2
init|=
operator|(
operator|(
name|CdcrUpdateLog
operator|)
name|ulog
operator|)
operator|.
name|newLogReader
argument_list|()
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
name|LinkedList
argument_list|<
name|Long
argument_list|>
name|versions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|addDocs
argument_list|(
literal|10
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|10
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|addDocs
argument_list|(
literal|10
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|10
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|addDocs
argument_list|(
literal|105
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|105
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// the previous two tlogs should not be removed
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|ulog
operator|.
name|getLogList
argument_list|(
name|logDir
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// move the first pointer past the first tlog
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|11
condition|;
name|i
operator|++
control|)
block|{
comment|// 10 adds + 1 commit
name|assertNotNull
argument_list|(
name|reader1
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addDocs
argument_list|(
literal|10
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|10
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// the first tlog should not be removed
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|ulog
operator|.
name|getLogList
argument_list|(
name|logDir
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// move the second pointer past the first tlog
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|11
condition|;
name|i
operator|++
control|)
block|{
comment|// 10 adds + 1 commit
name|assertNotNull
argument_list|(
name|reader2
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addDocs
argument_list|(
literal|10
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|10
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// the first tlog should be removed
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|ulog
operator|.
name|getLogList
argument_list|(
name|logDir
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// exhaust the readers
while|while
condition|(
name|reader1
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{     }
while|while
condition|(
name|reader2
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{     }
comment|// the readers should point to the new tlog
comment|// now add enough documents to trigger the numRecordsToKeep limit
name|addDocs
argument_list|(
literal|80
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|80
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// the update log should kept the last 3 tlogs, which sum up to 100 records
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|ulog
operator|.
name|getLogList
argument_list|(
name|logDir
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check that the output stream of an uncapped tlog is correctly reopen    * and that the commit is written during recovery.    */
annotation|@
name|Test
DECL|method|testClosingOutputStreamAfterLogReplay
specifier|public
name|void
name|testClosingOutputStreamAfterLogReplay
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|clearCore
argument_list|()
expr_stmt|;
name|DirectUpdateHandler2
operator|.
name|commitOnClose
operator|=
literal|false
expr_stmt|;
specifier|final
name|Semaphore
name|logReplay
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Semaphore
name|logReplayFinish
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|UpdateLog
operator|.
name|testing_logReplayHook
operator|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|assertTrue
argument_list|(
name|logReplay
operator|.
name|tryAcquire
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
expr_stmt|;
name|UpdateLog
operator|.
name|testing_logReplayFinishHook
operator|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|logReplayFinish
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|Deque
argument_list|<
name|Long
argument_list|>
name|versions
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
name|versions
operator|.
name|addFirst
argument_list|(
name|addAndGetVersion
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"A11"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|versions
operator|.
name|addFirst
argument_list|(
name|addAndGetVersion
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"A12"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|versions
operator|.
name|addFirst
argument_list|(
name|addAndGetVersion
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"A13"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"getVersions"
argument_list|,
literal|""
operator|+
name|versions
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
literal|"/versions=="
operator|+
name|versions
argument_list|)
expr_stmt|;
name|h
operator|.
name|close
argument_list|()
expr_stmt|;
name|createCore
argument_list|()
expr_stmt|;
comment|// Solr should kick this off now
comment|// h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();
comment|// verify that previous close didn't do a commit
comment|// recovery should be blocked by our hook
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
comment|// unblock recovery
name|logReplay
operator|.
name|release
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// wait until recovery has finished
name|assertTrue
argument_list|(
name|logReplayFinish
operator|.
name|tryAcquire
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
argument_list|,
literal|"/response/numFound==3"
argument_list|)
expr_stmt|;
comment|// The transaction log should have written a commit and close its output stream
name|UpdateLog
name|ulog
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ulog
operator|.
name|logs
operator|.
name|peekLast
argument_list|()
operator|.
name|refcount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ulog
operator|.
name|logs
operator|.
name|peekLast
argument_list|()
operator|.
name|channel
argument_list|)
expr_stmt|;
name|ulog
operator|.
name|logs
operator|.
name|peekLast
argument_list|()
operator|.
name|incref
argument_list|()
expr_stmt|;
comment|// reopen the output stream to check if its ends with a commit
name|assertTrue
argument_list|(
name|ulog
operator|.
name|logs
operator|.
name|peekLast
argument_list|()
operator|.
name|endsWithCommit
argument_list|()
argument_list|)
expr_stmt|;
name|ulog
operator|.
name|logs
operator|.
name|peekLast
argument_list|()
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
comment|/**    * Check the buffering of the old tlogs    */
annotation|@
name|Test
DECL|method|testBuffering
specifier|public
name|void
name|testBuffering
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|clearCore
argument_list|()
expr_stmt|;
name|CdcrUpdateLog
name|ulog
init|=
operator|(
name|CdcrUpdateLog
operator|)
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
name|File
name|logDir
init|=
operator|new
name|File
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
operator|.
name|getLogDir
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
name|LinkedList
argument_list|<
name|Long
argument_list|>
name|versions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|addDocs
argument_list|(
literal|10
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|10
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|addDocs
argument_list|(
literal|10
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|10
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|addDocs
argument_list|(
literal|105
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|105
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// the first two tlogs should have been removed
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ulog
operator|.
name|getLogList
argument_list|(
name|logDir
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// enable buffer
name|ulog
operator|.
name|enableBuffer
argument_list|()
expr_stmt|;
name|addDocs
argument_list|(
literal|10
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|10
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|addDocs
argument_list|(
literal|10
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|10
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|addDocs
argument_list|(
literal|105
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|105
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// no tlog should have been removed
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|ulog
operator|.
name|getLogList
argument_list|(
name|logDir
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// disable buffer
name|ulog
operator|.
name|disableBuffer
argument_list|()
expr_stmt|;
name|addDocs
argument_list|(
literal|10
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|10
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// old tlogs should have been removed
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ulog
operator|.
name|getLogList
argument_list|(
name|logDir
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSubReader
specifier|public
name|void
name|testSubReader
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|clearCore
argument_list|()
expr_stmt|;
name|CdcrUpdateLog
name|ulog
init|=
operator|(
name|CdcrUpdateLog
operator|)
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
name|File
name|logDir
init|=
operator|new
name|File
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
operator|.
name|getLogDir
argument_list|()
argument_list|)
decl_stmt|;
name|CdcrUpdateLog
operator|.
name|CdcrLogReader
name|reader
init|=
name|ulog
operator|.
name|newLogReader
argument_list|()
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
name|LinkedList
argument_list|<
name|Long
argument_list|>
name|versions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|addDocs
argument_list|(
literal|10
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|10
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|addDocs
argument_list|(
literal|10
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|10
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ulog
operator|.
name|getLogList
argument_list|(
name|logDir
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// start to read the first tlog
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertNotNull
argument_list|(
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// instantiate a sub reader, and finish to read the first tlog (commit operation), plus start to read the
comment|// second tlog (first five adds)
name|CdcrUpdateLog
operator|.
name|CdcrLogReader
name|subReader
init|=
name|reader
operator|.
name|getSubReader
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|assertNotNull
argument_list|(
name|subReader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Five adds + one commit
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|subReader
operator|.
name|getNumberOfRemainingRecords
argument_list|()
argument_list|)
expr_stmt|;
comment|// Generate a new tlog
name|addDocs
argument_list|(
literal|105
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|105
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// Even if the subreader is past the first tlog, the first tlog should not have been removed
comment|// since the parent reader is still pointing to it
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|ulog
operator|.
name|getLogList
argument_list|(
name|logDir
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// fast forward the parent reader with the subreader
name|reader
operator|.
name|forwardSeek
argument_list|(
name|subReader
argument_list|)
expr_stmt|;
name|subReader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// After fast forward, the parent reader should be position on the doc15
name|List
name|o
init|=
operator|(
name|List
operator|)
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|o
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|instanceof
name|SolrInputDocument
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"15"
argument_list|,
operator|(
operator|(
name|SolrInputDocument
operator|)
name|o
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Finish to read the second tlog, and start to read the third one
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|assertNotNull
argument_list|(
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|105
argument_list|,
name|reader
operator|.
name|getNumberOfRemainingRecords
argument_list|()
argument_list|)
expr_stmt|;
comment|// Generate a new tlog to activate tlog cleaning
name|addDocs
argument_list|(
literal|10
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|10
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// If the parent reader was correctly fast forwarded, it should be on the third tlog, and the first two should
comment|// have been removed.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ulog
operator|.
name|getLogList
argument_list|(
name|logDir
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check that the reader is correctly reset to its last position    */
annotation|@
name|Test
DECL|method|testResetToLastPosition
specifier|public
name|void
name|testResetToLastPosition
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|clearCore
argument_list|()
expr_stmt|;
name|CdcrUpdateLog
name|ulog
init|=
operator|(
name|CdcrUpdateLog
operator|)
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
name|File
name|logDir
init|=
operator|new
name|File
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
operator|.
name|getLogDir
argument_list|()
argument_list|)
decl_stmt|;
name|CdcrUpdateLog
operator|.
name|CdcrLogReader
name|reader
init|=
name|ulog
operator|.
name|newLogReader
argument_list|()
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
name|LinkedList
argument_list|<
name|Long
argument_list|>
name|versions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|addDocs
argument_list|(
literal|10
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|10
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|addDocs
argument_list|(
literal|10
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|10
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ulog
operator|.
name|getLogList
argument_list|(
name|logDir
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|22
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o
init|=
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
comment|// reset to last position
name|reader
operator|.
name|resetToLastPosition
argument_list|()
expr_stmt|;
comment|// we should read the same update operation, i.e., same version number
name|assertEquals
argument_list|(
operator|(
operator|(
name|List
operator|)
name|o
operator|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|(
operator|(
name|List
operator|)
name|reader
operator|.
name|next
argument_list|()
operator|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check that the reader is correctly reset to its last position    */
annotation|@
name|Test
DECL|method|testGetNumberOfRemainingRecords
specifier|public
name|void
name|testGetNumberOfRemainingRecords
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|DirectUpdateHandler2
operator|.
name|commitOnClose
operator|=
literal|false
expr_stmt|;
specifier|final
name|Semaphore
name|logReplayFinish
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|UpdateLog
operator|.
name|testing_logReplayFinishHook
operator|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|logReplayFinish
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|this
operator|.
name|clearCore
argument_list|()
expr_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
name|LinkedList
argument_list|<
name|Long
argument_list|>
name|versions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|addDocs
argument_list|(
literal|10
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|10
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|addDocs
argument_list|(
literal|10
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|10
expr_stmt|;
name|h
operator|.
name|close
argument_list|()
expr_stmt|;
name|logReplayFinish
operator|.
name|drainPermits
argument_list|()
expr_stmt|;
name|createCore
argument_list|()
expr_stmt|;
comment|// At this stage, we have re-opened a capped tlog, and an uncapped tlog.
comment|// check that the number of remaining records is correctly computed in these two cases
name|CdcrUpdateLog
name|ulog
init|=
operator|(
name|CdcrUpdateLog
operator|)
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
name|CdcrUpdateLog
operator|.
name|CdcrLogReader
name|reader
init|=
name|ulog
operator|.
name|newLogReader
argument_list|()
decl_stmt|;
comment|// wait for the replay to finish
name|assertTrue
argument_list|(
name|logReplayFinish
operator|.
name|tryAcquire
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// 20 records + 2 commits
name|assertEquals
argument_list|(
literal|22
argument_list|,
name|reader
operator|.
name|getNumberOfRemainingRecords
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|22
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o
init|=
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|22
operator|-
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|reader
operator|.
name|getNumberOfRemainingRecords
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|getNumberOfRemainingRecords
argument_list|()
argument_list|)
expr_stmt|;
comment|// It should pick up the new tlog files
name|addDocs
argument_list|(
literal|10
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|reader
operator|.
name|getNumberOfRemainingRecords
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|DirectUpdateHandler2
operator|.
name|commitOnClose
operator|=
literal|true
expr_stmt|;
name|UpdateLog
operator|.
name|testing_logReplayFinishHook
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Check that the initialisation of the log reader is picking up the tlog file that is currently being    * written.    */
annotation|@
name|Test
DECL|method|testLogReaderInitOnNewTlog
specifier|public
name|void
name|testLogReaderInitOnNewTlog
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|clearCore
argument_list|()
expr_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
comment|// Start to index some documents to instantiate the new tlog
name|LinkedList
argument_list|<
name|Long
argument_list|>
name|versions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|addDocs
argument_list|(
literal|10
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|10
expr_stmt|;
comment|// Create the reader after the instantiation of the new tlog
name|UpdateLog
name|ulog
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
name|CdcrUpdateLog
operator|.
name|CdcrLogReader
name|reader
init|=
operator|(
operator|(
name|CdcrUpdateLog
operator|)
name|ulog
operator|)
operator|.
name|newLogReader
argument_list|()
decl_stmt|;
comment|// Continue to index documents and commits
name|addDocs
argument_list|(
literal|11
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|11
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that the log reader was initialised with the new tlog
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|22
condition|;
name|i
operator|++
control|)
block|{
comment|// 21 adds + 1 commit
name|assertNotNull
argument_list|(
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// we should have reach the end of the new tlog
name|assertNull
argument_list|(
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check that the absolute version number is used for the update log index and for the last entry read    */
annotation|@
name|Test
DECL|method|testAbsoluteLastVersion
specifier|public
name|void
name|testAbsoluteLastVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|clearCore
argument_list|()
expr_stmt|;
name|CdcrUpdateLog
name|ulog
init|=
operator|(
name|CdcrUpdateLog
operator|)
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
name|File
name|logDir
init|=
operator|new
name|File
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
operator|.
name|getLogDir
argument_list|()
argument_list|)
decl_stmt|;
name|CdcrUpdateLog
operator|.
name|CdcrLogReader
name|reader
init|=
name|ulog
operator|.
name|newLogReader
argument_list|()
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
name|LinkedList
argument_list|<
name|Long
argument_list|>
name|versions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|addDocs
argument_list|(
literal|10
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|10
expr_stmt|;
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|addDocs
argument_list|(
literal|10
argument_list|,
name|start
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|start
operator|+=
literal|10
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ulog
operator|.
name|getLogList
argument_list|(
name|logDir
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|version
range|:
name|ulog
operator|.
name|getStartingVersions
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|version
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
comment|// first delete
name|Object
name|o
init|=
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
call|(
name|Long
call|)
argument_list|(
operator|(
name|List
operator|)
name|o
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|getLastVersion
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// commit
comment|// second delete
name|o
operator|=
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
call|(
name|Long
call|)
argument_list|(
operator|(
name|List
operator|)
name|o
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|getLastVersion
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
