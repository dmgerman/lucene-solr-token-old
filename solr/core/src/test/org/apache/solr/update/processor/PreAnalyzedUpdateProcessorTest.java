begin_unit
begin_package
DECL|package|org.apache.solr.update.processor
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|PreAnalyzedUpdateProcessorTest
specifier|public
class|class
name|PreAnalyzedUpdateProcessorTest
extends|extends
name|UpdateProcessorTestBase
block|{
DECL|field|simpleTitle
name|String
index|[]
name|simpleTitle
init|=
operator|new
name|String
index|[]
block|{
literal|"not pre-analyzed"
block|,
literal|"1 =string value=foo bar"
block|}
decl_stmt|;
DECL|field|jsonTitle
name|String
index|[]
name|jsonTitle
init|=
operator|new
name|String
index|[]
block|{
literal|"not pre-analyzed"
block|,
literal|"{\"v\":\"1\",\"str\":\"string value\",\"tokens\":[{\"t\":\"foo\"},{\"t\":\"bar\"}]}"
block|,   }
decl_stmt|;
DECL|field|simpleTeststop
name|String
index|[]
name|simpleTeststop
init|=
operator|new
name|String
index|[]
block|{
literal|"1 =this is a test.=one two three"
block|,
literal|"1 =this is a test.=three four five"
block|}
decl_stmt|;
DECL|field|jsonTeststop
name|String
index|[]
name|jsonTeststop
init|=
operator|new
name|String
index|[]
block|{
literal|"{\"v\":\"1\",\"str\":\"this is a test.\",\"tokens\":[{\"t\":\"one\"},{\"t\":\"two\"},{\"t\":\"three\"}]}"
block|,
literal|"{\"v\":\"1\",\"str\":\"this is a test.\",\"tokens\":[{\"t\":\"three\"},{\"t\":\"four\"},{\"t\":\"five\"}]}"
block|,   }
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-update-processor-chains.xml"
argument_list|,
literal|"schema12.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimple
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"pre-analyzed-simple"
argument_list|,
name|simpleTitle
argument_list|,
name|simpleTeststop
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJson
specifier|public
name|void
name|testJson
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"pre-analyzed-json"
argument_list|,
name|jsonTitle
argument_list|,
name|jsonTeststop
argument_list|)
expr_stmt|;
block|}
DECL|method|test
specifier|private
name|void
name|test
parameter_list|(
name|String
name|chain
parameter_list|,
name|String
index|[]
name|title
parameter_list|,
name|String
index|[]
name|teststop
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|doc
init|=
name|processAdd
argument_list|(
name|chain
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"title"
argument_list|,
name|title
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"teststop"
argument_list|,
name|teststop
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"nonexistent"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"ssto"
argument_list|,
name|teststop
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"sind"
argument_list|,
name|teststop
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"title should be unchanged"
argument_list|,
name|title
index|[
literal|0
index|]
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"teststop should be a Field"
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"teststop"
argument_list|)
operator|instanceof
name|Field
argument_list|)
expr_stmt|;
name|Field
name|f
init|=
operator|(
name|Field
operator|)
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"teststop"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"teststop should have stringValue"
argument_list|,
literal|"this is a test."
argument_list|,
name|f
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"teststop should have tokensStreamValue"
argument_list|,
name|f
operator|.
name|tokenStreamValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"nonexistent should be dropped"
argument_list|,
name|doc
operator|.
name|getField
argument_list|(
literal|"nonexistent"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check how SchemaField type affects stored/indexed part processing
name|f
operator|=
operator|(
name|Field
operator|)
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"ssto"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"should have ssto"
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"should have stringValue"
argument_list|,
name|f
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"should not have tokenStreamValue"
argument_list|,
name|f
operator|.
name|tokenStreamValue
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|=
operator|(
name|Field
operator|)
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"sind"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"should have sind"
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"should not have stringValue: '"
operator|+
name|f
operator|.
name|stringValue
argument_list|()
operator|+
literal|"'"
argument_list|,
name|f
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"should have tokenStreamValue"
argument_list|,
name|f
operator|.
name|tokenStreamValue
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|=
name|processAdd
argument_list|(
name|chain
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"title"
argument_list|,
name|title
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"teststop"
argument_list|,
name|teststop
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"nonexistent"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"ssto"
argument_list|,
name|teststop
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"sind"
argument_list|,
name|teststop
index|[
literal|1
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"title should be a Field"
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"title"
argument_list|)
operator|instanceof
name|Field
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"teststop should be a Field"
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"teststop"
argument_list|)
operator|instanceof
name|Field
argument_list|)
expr_stmt|;
name|f
operator|=
operator|(
name|Field
operator|)
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"teststop"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"teststop should have stringValue"
argument_list|,
literal|"this is a test."
argument_list|,
name|f
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"teststop should have tokensStreamValue"
argument_list|,
name|f
operator|.
name|tokenStreamValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"nonexistent should be dropped"
argument_list|,
name|doc
operator|.
name|getField
argument_list|(
literal|"nonexistent"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check how SchemaField type affects stored/indexed part processing
name|f
operator|=
operator|(
name|Field
operator|)
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"ssto"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"should have ssto"
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"should have stringValue"
argument_list|,
name|f
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"should not have tokenStreamValue"
argument_list|,
name|f
operator|.
name|tokenStreamValue
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|=
operator|(
name|Field
operator|)
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"sind"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"should have sind"
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"should not have stringValue: '"
operator|+
name|f
operator|.
name|stringValue
argument_list|()
operator|+
literal|"'"
argument_list|,
name|f
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"should have tokenStreamValue"
argument_list|,
name|f
operator|.
name|tokenStreamValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"teststop:\"one two three\""
argument_list|)
argument_list|,
literal|"//str[@name='id'][.='1']"
argument_list|,
literal|"//str[@name='teststop'][.='this is a test.']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"teststop:three"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.='1']"
argument_list|,
literal|"//result/doc[1]/str[@name='title'][.='not pre-analyzed']"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.='2']"
argument_list|,
literal|"//result/doc[2]/arr[@name='title']/str[.='string value']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"ssto:three"
argument_list|)
argument_list|,
literal|"//*[@numFound='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"sind:three"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
