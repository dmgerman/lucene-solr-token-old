begin_unit
begin_package
DECL|package|org.apache.solr.update
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_class
DECL|class|MockStreamingSolrServers
specifier|public
class|class
name|MockStreamingSolrServers
extends|extends
name|StreamingSolrServers
block|{
DECL|field|log
specifier|public
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MockStreamingSolrServers
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|enum|Exp
DECL|enum constant|CONNECT_EXCEPTION
DECL|enum constant|SOCKET_EXCEPTION
specifier|public
enum|enum
name|Exp
block|{
name|CONNECT_EXCEPTION
block|,
name|SOCKET_EXCEPTION
block|}
empty_stmt|;
DECL|field|exp
specifier|private
specifier|volatile
name|Exp
name|exp
init|=
literal|null
decl_stmt|;
DECL|method|MockStreamingSolrServers
specifier|public
name|MockStreamingSolrServers
parameter_list|(
name|UpdateShardHandler
name|updateShardHandler
parameter_list|)
block|{
name|super
argument_list|(
name|updateShardHandler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSolrServer
specifier|public
specifier|synchronized
name|SolrServer
name|getSolrServer
parameter_list|(
specifier|final
name|SolrCmdDistributor
operator|.
name|Req
name|req
parameter_list|)
block|{
name|SolrServer
name|server
init|=
name|super
operator|.
name|getSolrServer
argument_list|(
name|req
argument_list|)
decl_stmt|;
return|return
operator|new
name|MockSolrServer
argument_list|(
name|server
argument_list|)
return|;
block|}
DECL|method|setExp
specifier|public
name|void
name|setExp
parameter_list|(
name|Exp
name|exp
parameter_list|)
block|{
name|this
operator|.
name|exp
operator|=
name|exp
expr_stmt|;
block|}
DECL|method|exception
specifier|private
name|IOException
name|exception
parameter_list|()
block|{
switch|switch
condition|(
name|exp
condition|)
block|{
case|case
name|CONNECT_EXCEPTION
case|:
return|return
operator|new
name|ConnectException
argument_list|()
return|;
case|case
name|SOCKET_EXCEPTION
case|:
return|return
operator|new
name|SocketException
argument_list|()
return|;
default|default:
break|break;
block|}
return|return
literal|null
return|;
block|}
DECL|class|MockSolrServer
class|class
name|MockSolrServer
extends|extends
name|SolrServer
block|{
DECL|field|solrServer
specifier|private
name|SolrServer
name|solrServer
decl_stmt|;
DECL|method|MockSolrServer
specifier|public
name|MockSolrServer
parameter_list|(
name|SolrServer
name|solrServer
parameter_list|)
block|{
name|this
operator|.
name|solrServer
operator|=
name|solrServer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|request
specifier|public
name|NamedList
argument_list|<
name|Object
argument_list|>
name|request
parameter_list|(
name|SolrRequest
name|request
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
if|if
condition|(
name|exp
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exception
argument_list|()
throw|;
block|}
return|return
name|solrServer
operator|.
name|request
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|shutdown
specifier|public
name|void
name|shutdown
parameter_list|()
block|{}
block|}
block|}
end_class
end_unit
