begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.update.processor
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_comment
comment|/**  * Tests the basics of configuring FieldMutatingUpdateProcessors    * (mainly via TrimFieldUpdateProcessor) and the logic of other various   * subclasses.  */
end_comment
begin_class
DECL|class|FieldMutatingUpdateProcessorTest
specifier|public
class|class
name|FieldMutatingUpdateProcessorTest
extends|extends
name|UpdateProcessorTestBase
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-update-processor-chains.xml"
argument_list|,
literal|"schema12.xml"
argument_list|)
expr_stmt|;
block|}
DECL|method|testComprehensive
specifier|public
name|void
name|testComprehensive
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|countMe
init|=
literal|"how long is this string?"
decl_stmt|;
specifier|final
name|int
name|count
init|=
name|countMe
operator|.
name|length
argument_list|()
decl_stmt|;
name|processAdd
argument_list|(
literal|"comprehensive"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"primary_author_s1"
argument_list|,
literal|"XXXX"
argument_list|,
literal|"Adam"
argument_list|,
literal|"Sam"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"all_authors_s1"
argument_list|,
literal|"XXXX"
argument_list|,
literal|"Adam"
argument_list|,
literal|"Sam"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_is"
argument_list|,
name|countMe
argument_list|,
operator|new
name|Integer
argument_list|(
literal|42
argument_list|)
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"first_foo_l"
argument_list|,
name|countMe
argument_list|,
operator|new
name|Integer
argument_list|(
operator|-
literal|34
argument_list|)
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"max_foo_l"
argument_list|,
name|countMe
argument_list|,
operator|new
name|Integer
argument_list|(
operator|-
literal|34
argument_list|)
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"min_foo_l"
argument_list|,
name|countMe
argument_list|,
operator|new
name|Integer
argument_list|(
operator|-
literal|34
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:1111"
argument_list|)
argument_list|,
literal|"//str[@name='primary_author_s1'][.='XXXX']"
argument_list|,
literal|"//str[@name='all_authors_s1'][.='XXXX; Adam; Sam']"
argument_list|,
literal|"//arr[@name='foo_is']/int[1][.='"
operator|+
name|count
operator|+
literal|"']"
argument_list|,
literal|"//arr[@name='foo_is']/int[2][.='42']"
argument_list|,
literal|"//long[@name='max_foo_l'][.='"
operator|+
name|count
operator|+
literal|"']"
argument_list|,
literal|"//long[@name='first_foo_l'][.='"
operator|+
name|count
operator|+
literal|"']"
argument_list|,
literal|"//long[@name='min_foo_l'][.='-34']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testTrimAll
specifier|public
name|void
name|testTrimAll
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|d
init|=
literal|null
decl_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"trim-all"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"name"
argument_list|,
literal|" Hoss "
argument_list|,
operator|new
name|StringBuilder
argument_list|(
literal|" Man"
argument_list|)
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_t"
argument_list|,
literal|" some text "
argument_list|,
literal|"other Text\t"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_d"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|42
argument_list|)
argument_list|)
argument_list|,
name|field
argument_list|(
literal|"foo_s"
argument_list|,
literal|5.0F
argument_list|,
literal|" string "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
comment|// simple stuff
name|assertEquals
argument_list|(
literal|"string"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"some text"
argument_list|,
literal|"other Text"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"foo_t"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Hoss"
argument_list|,
literal|"Man"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
comment|// slightly more interesting
name|assertEquals
argument_list|(
literal|"processor borked non string value"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|42
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong boost"
argument_list|,
literal|5.0F
argument_list|,
name|d
operator|.
name|getField
argument_list|(
literal|"foo_s"
argument_list|)
operator|.
name|getBoost
argument_list|()
argument_list|,
literal|0.0F
argument_list|)
expr_stmt|;
block|}
DECL|method|testUniqValues
specifier|public
name|void
name|testUniqValues
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|chain
init|=
literal|"uniq-values"
decl_stmt|;
name|SolrInputDocument
name|d
init|=
literal|null
decl_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
name|chain
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"name"
argument_list|,
literal|"Hoss"
argument_list|,
literal|"Man"
argument_list|,
literal|"Hoss"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"uniq_1_s"
argument_list|,
literal|"Hoss"
argument_list|,
literal|"Man"
argument_list|,
literal|"Hoss"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"uniq_2_s"
argument_list|,
literal|"Foo"
argument_list|,
literal|"Hoss"
argument_list|,
literal|"Man"
argument_list|,
literal|"Hoss"
argument_list|,
literal|"Bar"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"uniq_3_s"
argument_list|,
literal|5.0F
argument_list|,
literal|23
argument_list|,
literal|"string"
argument_list|,
literal|5.0F
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Hoss"
argument_list|,
literal|"Man"
argument_list|,
literal|"Hoss"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Hoss"
argument_list|,
literal|"Man"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"uniq_1_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Foo"
argument_list|,
literal|"Hoss"
argument_list|,
literal|"Man"
argument_list|,
literal|"Bar"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"uniq_2_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|5.0F
argument_list|,
literal|23
argument_list|,
literal|"string"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"uniq_3_s"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTrimFields
specifier|public
name|void
name|testTrimFields
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|chain
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"trim-fields"
argument_list|,
literal|"trim-fields-arr"
argument_list|)
control|)
block|{
name|SolrInputDocument
name|d
init|=
literal|null
decl_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
name|chain
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"name"
argument_list|,
literal|" Hoss "
argument_list|,
literal|" Man"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_t"
argument_list|,
literal|" some text "
argument_list|,
literal|"other Text\t"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_s"
argument_list|,
literal|" string "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" string "
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"some text"
argument_list|,
literal|"other Text"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"foo_t"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Hoss"
argument_list|,
literal|"Man"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testTrimField
specifier|public
name|void
name|testTrimField
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|d
init|=
literal|null
decl_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"trim-field"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"name"
argument_list|,
literal|" Hoss "
argument_list|,
literal|" Man"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_t"
argument_list|,
literal|" some text "
argument_list|,
literal|"other Text\t"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_s"
argument_list|,
literal|" string "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" string "
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"some text"
argument_list|,
literal|"other Text"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"foo_t"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|" Hoss "
argument_list|,
literal|" Man"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTrimRegex
specifier|public
name|void
name|testTrimRegex
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|d
init|=
literal|null
decl_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"trim-field-regexes"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_t"
argument_list|,
literal|" string1 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foozat_s"
argument_list|,
literal|" string2 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_t"
argument_list|,
literal|" string3 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_s"
argument_list|,
literal|" string4 "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string1"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_t"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string2"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foozat_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" string3 "
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"bar_t"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string4"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"bar_s"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTrimTypes
specifier|public
name|void
name|testTrimTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|d
init|=
literal|null
decl_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"trim-types"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_sw"
argument_list|,
literal|" string0 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"name"
argument_list|,
literal|" string1 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"title"
argument_list|,
literal|" string2 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_t"
argument_list|,
literal|" string3 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_s"
argument_list|,
literal|" string4 "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string0"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_sw"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string1"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string2"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" string3 "
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"bar_t"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" string4 "
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"bar_s"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTrimClasses
specifier|public
name|void
name|testTrimClasses
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|d
init|=
literal|null
decl_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"trim-classes"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_t"
argument_list|,
literal|" string1 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_s"
argument_list|,
literal|" string2 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_dt"
argument_list|,
literal|" string3 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_pdt"
argument_list|,
literal|" string4 "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" string1 "
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_t"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string2"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string3"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"bar_dt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string4"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"bar_pdt"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTrimMultipleRules
specifier|public
name|void
name|testTrimMultipleRules
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|d
init|=
literal|null
decl_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"trim-multi"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_t"
argument_list|,
literal|" string1 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_s"
argument_list|,
literal|" string2 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_dt"
argument_list|,
literal|" string3 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_pdt"
argument_list|,
literal|" string4 "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" string1 "
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_t"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string2"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" string3 "
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"bar_dt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string4"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_pdt"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTrimExclusions
specifier|public
name|void
name|testTrimExclusions
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|d
init|=
literal|null
decl_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"trim-most"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_t"
argument_list|,
literal|" string1 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_s"
argument_list|,
literal|" string2 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_dt"
argument_list|,
literal|" string3 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_pdt"
argument_list|,
literal|" string4 "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" string1 "
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_t"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string2"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string3"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"bar_dt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string4"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_pdt"
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"trim-many"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_t"
argument_list|,
literal|" string1 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_s"
argument_list|,
literal|" string2 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_dt"
argument_list|,
literal|" string3 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_HOSS_s"
argument_list|,
literal|" string4 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_pdt"
argument_list|,
literal|" string5 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_HOSS_pdt"
argument_list|,
literal|" string6 "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string1"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_t"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string2"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string3"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"bar_dt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" string4 "
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"bar_HOSS_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string5"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_pdt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" string6 "
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_HOSS_pdt"
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"trim-few"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_t"
argument_list|,
literal|" string1 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_s"
argument_list|,
literal|" string2 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_dt"
argument_list|,
literal|" string3 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_HOSS_s"
argument_list|,
literal|" string4 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_pdt"
argument_list|,
literal|" string5 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_HOSS_pdt"
argument_list|,
literal|" string6 "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string1"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_t"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string2"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" string3 "
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"bar_dt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" string4 "
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"bar_HOSS_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" string5 "
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_pdt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" string6 "
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_HOSS_pdt"
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"trim-some"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_t"
argument_list|,
literal|" string1 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_s"
argument_list|,
literal|" string2 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_dt"
argument_list|,
literal|" string3 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_HOSS_s"
argument_list|,
literal|" string4 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_pdt"
argument_list|,
literal|" string5 "
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_HOSS_pdt"
argument_list|,
literal|" string6 "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string1"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_t"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string2"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string3"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"bar_dt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string4"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"bar_HOSS_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string5"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_pdt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" string6 "
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_HOSS_pdt"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveBlanks
specifier|public
name|void
name|testRemoveBlanks
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|d
init|=
literal|null
decl_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"remove-all-blanks"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_s"
argument_list|,
literal|"string1"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_dt"
argument_list|,
literal|"string2"
argument_list|,
literal|""
argument_list|,
literal|"string3"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"yak_t"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_d"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|42
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"string1"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"string2"
argument_list|,
literal|"string3"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"bar_dt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"shouldn't be any values for yak_t"
argument_list|,
name|d
operator|.
name|containsKey
argument_list|(
literal|"yak_t"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"processor borked non string value"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|42
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testStrLength
specifier|public
name|void
name|testStrLength
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|d
init|=
literal|null
decl_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"length-none"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_s"
argument_list|,
literal|"string1"
argument_list|,
literal|"string222"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_dt"
argument_list|,
literal|"string3"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"yak_t"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_d"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|42
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"string1"
argument_list|,
literal|"string222"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string3"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"bar_dt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"yak_t"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"processor borked non string value"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|42
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_d"
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"length-some"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_s"
argument_list|,
literal|"string1"
argument_list|,
literal|"string222"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_dt"
argument_list|,
literal|"string3"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"yak_t"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_d"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|42
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Integer
argument_list|(
literal|7
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|9
argument_list|)
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string3"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"bar_dt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"yak_t"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"processor borked non string value"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|42
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRegexReplace
specifier|public
name|void
name|testRegexReplace
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|d
init|=
literal|null
decl_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"regex-replace"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"doc1"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"content"
argument_list|,
literal|"This is         a text\t with a lot\n     of whitespace"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"title"
argument_list|,
literal|"This\ttitle     has a lot of    spaces"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ThisXisXaXtextXwithXaXlotXofXwhitespace"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ThisXtitleXhasXaXlotXofXspaces"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFirstValue
specifier|public
name|void
name|testFirstValue
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|d
init|=
literal|null
decl_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"first-value"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_s"
argument_list|,
literal|"string1"
argument_list|,
literal|"string222"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_s"
argument_list|,
literal|"string3"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"yak_t"
argument_list|,
literal|"string4"
argument_list|,
literal|"string5"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"string1"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"string3"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"bar_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"string4"
argument_list|,
literal|"string5"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"yak_t"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLastValue
specifier|public
name|void
name|testLastValue
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|d
init|=
literal|null
decl_stmt|;
comment|// basics
name|d
operator|=
name|processAdd
argument_list|(
literal|"last-value"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_s"
argument_list|,
literal|"string1"
argument_list|,
literal|"string222"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_s"
argument_list|,
literal|"string3"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"yak_t"
argument_list|,
literal|"string4"
argument_list|,
literal|"string5"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"string222"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"string3"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"bar_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"string4"
argument_list|,
literal|"string5"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"yak_t"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test optimizations (and force test of defaults)
name|SolrInputField
name|special
init|=
literal|null
decl_stmt|;
comment|// test something that's definitely a SortedSet
name|special
operator|=
operator|new
name|SolrInputField
argument_list|(
literal|"foo_s"
argument_list|)
expr_stmt|;
name|special
operator|.
name|setValue
argument_list|(
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ggg"
argument_list|,
literal|"first"
argument_list|,
literal|"last"
argument_list|,
literal|"hhh"
argument_list|)
argument_list|)
argument_list|,
literal|1.2F
argument_list|)
expr_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"last-value"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|special
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"last"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test something that's definitely a List
name|special
operator|=
operator|new
name|SolrInputField
argument_list|(
literal|"foo_s"
argument_list|)
expr_stmt|;
name|special
operator|.
name|setValue
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"first"
argument_list|,
literal|"ggg"
argument_list|,
literal|"hhh"
argument_list|,
literal|"last"
argument_list|)
argument_list|,
literal|1.2F
argument_list|)
expr_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"last-value"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|special
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"last"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test something that is definitely not a List or SortedSet
comment|// (ie: get default behavior of Collection using iterator)
name|special
operator|=
operator|new
name|SolrInputField
argument_list|(
literal|"foo_s"
argument_list|)
expr_stmt|;
name|special
operator|.
name|setValue
argument_list|(
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"first"
argument_list|,
literal|"ggg"
argument_list|,
literal|"hhh"
argument_list|,
literal|"last"
argument_list|)
argument_list|)
argument_list|,
literal|1.2F
argument_list|)
expr_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"last-value"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|special
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"last"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinValue
specifier|public
name|void
name|testMinValue
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|d
init|=
literal|null
decl_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"min-value"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_s"
argument_list|,
literal|"zzz"
argument_list|,
literal|"aaa"
argument_list|,
literal|"bbb"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|42
argument_list|,
literal|128
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_s"
argument_list|,
literal|"aaa"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"yak_t"
argument_list|,
literal|"aaa"
argument_list|,
literal|"bbb"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"aaa"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|-
literal|3
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"foo_i"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"aaa"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"bar_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"aaa"
argument_list|,
literal|"bbb"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"yak_t"
argument_list|)
argument_list|)
expr_stmt|;
comment|// failure when un-comparable
name|SolrException
name|error
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ignoreException
argument_list|(
literal|".*Unable to mutate field.*"
argument_list|)
expr_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"min-value"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_s"
argument_list|,
literal|"zzz"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|42
argument_list|)
argument_list|,
literal|"bbb"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_s"
argument_list|,
literal|"aaa"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"yak_t"
argument_list|,
literal|"aaa"
argument_list|,
literal|"bbb"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
block|}
finally|finally
block|{
name|resetExceptionIgnores
argument_list|()
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"no error on un-comparable values"
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"error doesn't mention field name"
argument_list|,
literal|0
operator|<=
name|error
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMaxValue
specifier|public
name|void
name|testMaxValue
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|d
init|=
literal|null
decl_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"max-value"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_s"
argument_list|,
literal|"zzz"
argument_list|,
literal|"aaa"
argument_list|,
literal|"bbb"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_i"
argument_list|,
literal|42
argument_list|,
literal|128
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_s"
argument_list|,
literal|"aaa"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"yak_t"
argument_list|,
literal|"aaa"
argument_list|,
literal|"bbb"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"zzz"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|128
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"foo_i"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"aaa"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"bar_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"aaa"
argument_list|,
literal|"bbb"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"yak_t"
argument_list|)
argument_list|)
expr_stmt|;
comment|// failure when un-comparable
name|SolrException
name|error
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ignoreException
argument_list|(
literal|".*Unable to mutate field.*"
argument_list|)
expr_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"min-value"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_s"
argument_list|,
literal|"zzz"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|42
argument_list|)
argument_list|,
literal|"bbb"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_s"
argument_list|,
literal|"aaa"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"yak_t"
argument_list|,
literal|"aaa"
argument_list|,
literal|"bbb"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
block|}
finally|finally
block|{
name|resetExceptionIgnores
argument_list|()
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"no error on un-comparable values"
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"error doesn't mention field name"
argument_list|,
literal|0
operator|<=
name|error
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testHtmlStrip
specifier|public
name|void
name|testHtmlStrip
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|d
init|=
literal|null
decl_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"html-strip"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"html_s"
argument_list|,
literal|"<body>hi&amp; bye"
argument_list|,
literal|"aaa"
argument_list|,
literal|"bbb"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_s"
argument_list|,
literal|"<body>hi&amp; bye"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"hi& bye"
argument_list|,
literal|"aaa"
argument_list|,
literal|"bbb"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"html_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<body>hi&amp; bye"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"bar_s"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTruncate
specifier|public
name|void
name|testTruncate
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|d
init|=
literal|null
decl_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"truncate"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"trunc"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"12345"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"trunc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIgnore
specifier|public
name|void
name|testIgnore
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
literal|"test expects 'foo_giberish' to not be a valid field, looks like schema was changed out from under us"
argument_list|,
name|schema
operator|.
name|getFieldTypeNoEx
argument_list|(
literal|"foo_giberish"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"test expects 'bar_giberish' to not be a valid field, looks like schema was changed out from under us"
argument_list|,
name|schema
operator|.
name|getFieldTypeNoEx
argument_list|(
literal|"bar_giberish"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"test expects 't_raw' to be a valid field, looks like schema was changed out from under us"
argument_list|,
name|schema
operator|.
name|getFieldTypeNoEx
argument_list|(
literal|"t_raw"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"test expects 'foo_s' to be a valid field, looks like schema was changed out from under us"
argument_list|,
name|schema
operator|.
name|getFieldTypeNoEx
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
name|SolrInputDocument
name|d
init|=
literal|null
decl_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"ignore-not-in-schema"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_giberish"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_giberish"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"t_raw"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_s"
argument_list|,
literal|"hoss"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|d
operator|.
name|containsKey
argument_list|(
literal|"bar_giberish"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|d
operator|.
name|containsKey
argument_list|(
literal|"foo_giberish"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"t_raw"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hoss"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"ignore-some"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_giberish"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_giberish"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"t_raw"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_s"
argument_list|,
literal|"hoss"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"foo_giberish"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"bar_giberish"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|d
operator|.
name|containsKey
argument_list|(
literal|"t_raw"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hoss"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"ignore-not-in-schema-explicit-selector"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_giberish"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_giberish"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"t_raw"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_s"
argument_list|,
literal|"hoss"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|d
operator|.
name|containsKey
argument_list|(
literal|"foo_giberish"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|d
operator|.
name|containsKey
argument_list|(
literal|"bar_giberish"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"t_raw"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hoss"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"ignore-not-in-schema-and-foo-name-prefix"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_giberish"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_giberish"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"t_raw"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_s"
argument_list|,
literal|"hoss"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|d
operator|.
name|containsKey
argument_list|(
literal|"foo_giberish"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"bar_giberish"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"t_raw"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hoss"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"ignore-foo-name-prefix-except-not-schema"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_giberish"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_giberish"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"t_raw"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_s"
argument_list|,
literal|"hoss"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"foo_giberish"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"bar_giberish"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"t_raw"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|d
operator|.
name|containsKey
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"ignore-in-schema"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_giberish"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_giberish"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"t_raw"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_s"
argument_list|,
literal|"hoss"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|containsKey
argument_list|(
literal|"foo_giberish"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|containsKey
argument_list|(
literal|"bar_giberish"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|d
operator|.
name|containsKey
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|d
operator|.
name|containsKey
argument_list|(
literal|"t_raw"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|d
operator|.
name|containsKey
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"ignore-not-in-schema-explicit-str-selector"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_giberish"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_giberish"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"t_raw"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_s"
argument_list|,
literal|"hoss"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|d
operator|.
name|containsKey
argument_list|(
literal|"foo_giberish"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|d
operator|.
name|containsKey
argument_list|(
literal|"bar_giberish"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"t_raw"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hoss"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"ignore-in-schema-str-selector"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_giberish"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_giberish"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"t_raw"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_s"
argument_list|,
literal|"hoss"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|containsKey
argument_list|(
literal|"foo_giberish"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|containsKey
argument_list|(
literal|"bar_giberish"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|d
operator|.
name|containsKey
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|d
operator|.
name|containsKey
argument_list|(
literal|"t_raw"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|d
operator|.
name|containsKey
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCloneField
specifier|public
name|void
name|testCloneField
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|d
init|=
literal|null
decl_stmt|;
comment|// regardless of chain, all of these should be equivilent
for|for
control|(
name|String
name|chain
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"clone-single"
argument_list|,
literal|"clone-multi"
argument_list|,
literal|"clone-array"
argument_list|,
literal|"clone-selector"
argument_list|)
control|)
block|{
comment|// simple clone
name|d
operator|=
name|processAdd
argument_list|(
name|chain
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"source0_s"
argument_list|,
literal|"NOT COPIED"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"source1_s"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|chain
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|chain
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"source1_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|chain
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"dest_s"
argument_list|)
argument_list|)
expr_stmt|;
comment|// append to existing values, preserve boost
name|d
operator|=
name|processAdd
argument_list|(
name|chain
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|field
argument_list|(
literal|"dest_s"
argument_list|,
literal|2.3f
argument_list|,
literal|"orig1"
argument_list|,
literal|"orig2"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"source0_s"
argument_list|,
literal|"NOT COPIED"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"source1_s"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|chain
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|chain
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"source1_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|chain
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"orig1"
argument_list|,
literal|"orig2"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"dest_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|chain
operator|+
literal|": dest boost changed"
argument_list|,
literal|2.3f
argument_list|,
name|d
operator|.
name|getField
argument_list|(
literal|"dest_s"
argument_list|)
operator|.
name|getBoost
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
block|}
comment|// should be equivilent for any chain matching source1_s and source2_s
for|for
control|(
name|String
name|chain
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"clone-multi"
argument_list|,
literal|"clone-array"
argument_list|,
literal|"clone-selector"
argument_list|)
control|)
block|{
comment|// simple clone
name|d
operator|=
name|processAdd
argument_list|(
name|chain
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"source0_s"
argument_list|,
literal|"NOT COPIED"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"source1_s"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"source2_s"
argument_list|,
literal|"xxx"
argument_list|,
literal|999
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|chain
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|chain
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"source1_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|chain
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"xxx"
argument_list|,
literal|999
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"source2_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|chain
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|,
literal|"xxx"
argument_list|,
literal|999
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"dest_s"
argument_list|)
argument_list|)
expr_stmt|;
comment|// append to existing values, preserve boost
name|d
operator|=
name|processAdd
argument_list|(
name|chain
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|field
argument_list|(
literal|"dest_s"
argument_list|,
literal|2.3f
argument_list|,
literal|"orig1"
argument_list|,
literal|"orig2"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"source0_s"
argument_list|,
literal|"NOT COPIED"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"source1_s"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"source2_s"
argument_list|,
literal|"xxx"
argument_list|,
literal|999
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|chain
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|chain
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"source1_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|chain
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"xxx"
argument_list|,
literal|999
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"source2_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|chain
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"orig1"
argument_list|,
literal|"orig2"
argument_list|,
literal|"123456789"
argument_list|,
literal|""
argument_list|,
literal|42
argument_list|,
literal|"abcd"
argument_list|,
literal|"xxx"
argument_list|,
literal|999
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"dest_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|chain
operator|+
literal|": dest boost changed"
argument_list|,
literal|2.3f
argument_list|,
name|d
operator|.
name|getField
argument_list|(
literal|"dest_s"
argument_list|)
operator|.
name|getBoost
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCloneFieldExample
specifier|public
name|void
name|testCloneFieldExample
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|d
init|=
literal|null
decl_stmt|;
comment|// test example from the javadocs
name|d
operator|=
name|processAdd
argument_list|(
literal|"multiple-clones"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"category"
argument_list|,
literal|"misc"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"authors"
argument_list|,
literal|"Isaac Asimov"
argument_list|,
literal|"John Brunner"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"editors"
argument_list|,
literal|"John W. Campbell"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"store1_price"
argument_list|,
literal|87
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"store2_price"
argument_list|,
literal|78
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"list_price"
argument_list|,
literal|1000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"misc"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"category"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"misc"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"category_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Isaac Asimov"
argument_list|,
literal|"John Brunner"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"authors"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"John W. Campbell"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"editors"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Isaac Asimov"
argument_list|,
literal|"John Brunner"
argument_list|,
literal|"John W. Campbell"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"contributors"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|87
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"store1_price"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|78
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"store2_price"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"list_price"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|87
argument_list|,
literal|78
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"all_prices"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCountValues
specifier|public
name|void
name|testCountValues
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|d
init|=
literal|null
decl_stmt|;
comment|// trivial
name|d
operator|=
name|processAdd
argument_list|(
literal|"count"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"count_field"
argument_list|,
literal|"aaa"
argument_list|,
literal|"bbb"
argument_list|,
literal|"ccc"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"count_field"
argument_list|)
argument_list|)
expr_stmt|;
comment|// edge case: no values to count, means no count
comment|// (use default if you want one)
name|d
operator|=
name|processAdd
argument_list|(
literal|"count"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|d
operator|.
name|containsKey
argument_list|(
literal|"count_field"
argument_list|)
argument_list|)
expr_stmt|;
comment|// typical usecase: clone and count
name|d
operator|=
name|processAdd
argument_list|(
literal|"clone-then-count"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"category"
argument_list|,
literal|"scifi"
argument_list|,
literal|"war"
argument_list|,
literal|"space"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"editors"
argument_list|,
literal|"John W. Campbell"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"list_price"
argument_list|,
literal|1000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"scifi"
argument_list|,
literal|"war"
argument_list|,
literal|"space"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"category"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"category_count"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"John W. Campbell"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"editors"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"list_price"
argument_list|)
argument_list|)
expr_stmt|;
comment|// typical usecase: clone and count demonstrating default
name|d
operator|=
name|processAdd
argument_list|(
literal|"clone-then-count"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"editors"
argument_list|,
literal|"Anonymous"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"list_price"
argument_list|,
literal|1000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"category_count"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Anonymous"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"editors"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"list_price"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCloneCombinations
specifier|public
name|void
name|testCloneCombinations
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|d
init|=
literal|null
decl_stmt|;
comment|// maxChars
name|d
operator|=
name|processAdd
argument_list|(
literal|"clone-max-chars"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"field1"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"field1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tex"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"toField"
argument_list|)
argument_list|)
expr_stmt|;
comment|// move
name|d
operator|=
name|processAdd
argument_list|(
literal|"clone-move"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"field1"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"toField"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|d
operator|.
name|containsKey
argument_list|(
literal|"field1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// replace
name|d
operator|=
name|processAdd
argument_list|(
literal|"clone-replace"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"toField"
argument_list|,
literal|"IGNORED"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"field1"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"field1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"toField"
argument_list|)
argument_list|)
expr_stmt|;
comment|// append
name|d
operator|=
name|processAdd
argument_list|(
literal|"clone-append"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"toField"
argument_list|,
literal|"aaa"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"field1"
argument_list|,
literal|"bbb"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"field2"
argument_list|,
literal|"ccc"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bbb"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"field1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ccc"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"field2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aaa; bbb; ccc"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"toField"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testConcatDefaults
specifier|public
name|void
name|testConcatDefaults
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|d
init|=
literal|null
decl_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
literal|"concat-defaults"
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|,
literal|"222"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"attr_foo"
argument_list|,
literal|"string1"
argument_list|,
literal|"string2"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_s1"
argument_list|,
literal|"string3"
argument_list|,
literal|"string4"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_dt"
argument_list|,
literal|"string5"
argument_list|,
literal|"string6"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"bar_HOSS_s"
argument_list|,
literal|"string7"
argument_list|,
literal|"string8"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_d"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|42
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1111, 222"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"string1"
argument_list|,
literal|"string2"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"attr_foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string3, string4"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_s1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"string5"
argument_list|,
literal|"string6"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"bar_dt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"string7"
argument_list|,
literal|"string8"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"bar_HOSS_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"processor borked non string value"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|42
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testConcatExplicit
specifier|public
name|void
name|testConcatExplicit
parameter_list|()
throws|throws
name|Exception
block|{
name|doSimpleDelimTest
argument_list|(
literal|"concat-field"
argument_list|,
literal|", "
argument_list|)
expr_stmt|;
block|}
DECL|method|testConcatExplicitWithDelim
specifier|public
name|void
name|testConcatExplicitWithDelim
parameter_list|()
throws|throws
name|Exception
block|{
name|doSimpleDelimTest
argument_list|(
literal|"concat-type-delim"
argument_list|,
literal|"; "
argument_list|)
expr_stmt|;
block|}
DECL|method|doSimpleDelimTest
specifier|private
name|void
name|doSimpleDelimTest
parameter_list|(
specifier|final
name|String
name|chain
parameter_list|,
specifier|final
name|String
name|delim
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|d
init|=
literal|null
decl_stmt|;
name|d
operator|=
name|processAdd
argument_list|(
name|chain
argument_list|,
name|doc
argument_list|(
name|f
argument_list|(
literal|"id"
argument_list|,
literal|"1111"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_t"
argument_list|,
literal|"string1"
argument_list|,
literal|"string2"
argument_list|)
argument_list|,
name|f
argument_list|(
literal|"foo_d"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|42
argument_list|)
argument_list|)
argument_list|,
name|field
argument_list|(
literal|"foo_s"
argument_list|,
literal|3.0F
argument_list|,
literal|"string3"
argument_list|,
literal|"string4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"string1"
argument_list|,
literal|"string2"
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValues
argument_list|(
literal|"foo_t"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string3"
operator|+
name|delim
operator|+
literal|"string4"
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
comment|// slightly more interesting
name|assertEquals
argument_list|(
literal|"processor borked non string value"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|42
argument_list|)
argument_list|,
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"foo_d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong boost"
argument_list|,
literal|3.0F
argument_list|,
name|d
operator|.
name|getField
argument_list|(
literal|"foo_s"
argument_list|)
operator|.
name|getBoost
argument_list|()
argument_list|,
literal|0.0F
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
