begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|AbstractSolrTestCase
import|;
end_import
begin_class
DECL|class|TestExtendedDismaxParser
specifier|public
class|class
name|TestExtendedDismaxParser
extends|extends
name|AbstractSolrTestCase
block|{
annotation|@
name|Override
DECL|method|getSchemaFile
specifier|public
name|String
name|getSchemaFile
parameter_list|()
block|{
return|return
literal|"schema12.xml"
return|;
block|}
annotation|@
name|Override
DECL|method|getSolrConfigFile
specifier|public
name|String
name|getSolrConfigFile
parameter_list|()
block|{
return|return
literal|"solrconfig.xml"
return|;
block|}
comment|// public String getCoreName() { return "collection1"; }
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// if you override setUp or tearDown, you better call
comment|// the super classes version
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"42"
argument_list|,
literal|"trait_ss"
argument_list|,
literal|"Tool"
argument_list|,
literal|"trait_ss"
argument_list|,
literal|"Obnoxious"
argument_list|,
literal|"name"
argument_list|,
literal|"Zapp Brannigan"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"43"
argument_list|,
literal|"title"
argument_list|,
literal|"Democratic Order op Planets"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"44"
argument_list|,
literal|"trait_ss"
argument_list|,
literal|"Tool"
argument_list|,
literal|"name"
argument_list|,
literal|"The Zapper"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"45"
argument_list|,
literal|"trait_ss"
argument_list|,
literal|"Chauvinist"
argument_list|,
literal|"title"
argument_list|,
literal|"25 star General"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"46"
argument_list|,
literal|"trait_ss"
argument_list|,
literal|"Obnoxious"
argument_list|,
literal|"subject"
argument_list|,
literal|"Defeated the pacifists op the Gandhi nebula"
argument_list|,
literal|"t_special"
argument_list|,
literal|"literal:colon value"
argument_list|,
literal|"movies_t"
argument_list|,
literal|"first is Mission: Impossible, second is Terminator 2: Judgement Day.  Terminator:3 ok..."
argument_list|,
literal|"foo_i"
argument_list|,
literal|"8"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"47"
argument_list|,
literal|"trait_ss"
argument_list|,
literal|"Pig"
argument_list|,
literal|"text"
argument_list|,
literal|"line up and fly directly at the enemy death cannons, clogging them with wreckage!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"48"
argument_list|,
literal|"text_sw"
argument_list|,
literal|"this has gigabyte potential"
argument_list|,
literal|"foo_i"
argument_list|,
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"49"
argument_list|,
literal|"text_sw"
argument_list|,
literal|"start the big apple end"
argument_list|,
literal|"foo_i"
argument_list|,
literal|"-100"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"50"
argument_list|,
literal|"text_sw"
argument_list|,
literal|"start new big city end"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"51"
argument_list|,
literal|"store"
argument_list|,
literal|"12.34,-56.78"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"52"
argument_list|,
literal|"text_sw"
argument_list|,
literal|"tekna theou klethomen"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"53"
argument_list|,
literal|"text_sw"
argument_list|,
literal|"nun tekna theou esmen"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"54"
argument_list|,
literal|"text_sw"
argument_list|,
literal|"phanera estin ta tekna tou theou"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// if you override setUp or tearDown, you better call
comment|// the super classes version
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|// test the edismax query parser based on the dismax parser
DECL|method|testFocusQueryParser
specifier|public
name|void
name|testFocusQueryParser
parameter_list|()
block|{
name|String
name|allq
init|=
literal|"id:[42 TO 51]"
decl_stmt|;
name|String
name|allr
init|=
literal|"*[count(//doc)=10]"
decl_stmt|;
name|String
name|oner
init|=
literal|"*[count(//doc)=1]"
decl_stmt|;
name|String
name|twor
init|=
literal|"*[count(//doc)=2]"
decl_stmt|;
name|String
name|nor
init|=
literal|"*[count(//doc)=0]"
decl_stmt|;
name|assertQ
argument_list|(
literal|"blank q"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|" "
argument_list|,
literal|"q.alt"
argument_list|,
name|allq
argument_list|,
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|)
argument_list|,
name|allr
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"expected doc is missing (using un-escaped edismax w/qf)"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"literal:colon"
argument_list|,
literal|"qf"
argument_list|,
literal|"t_special"
argument_list|,
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|)
argument_list|,
literal|"//doc[1]/str[@name='id'][.='46']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"standard request handler returns all matches"
argument_list|,
name|req
argument_list|(
name|allq
argument_list|)
argument_list|,
name|allr
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"edismax query parser returns all matches"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
name|allq
argument_list|,
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|)
argument_list|,
name|allr
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"qf"
argument_list|,
literal|"trait_ss"
argument_list|,
literal|"q"
argument_list|,
literal|"Tool"
argument_list|)
argument_list|,
name|twor
argument_list|)
expr_stmt|;
comment|// test that field types that aren't applicable don't cause an exception to be thrown
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"qf"
argument_list|,
literal|"trait_ss foo_i foo_f foo_dt foo_l foo_d foo_b"
argument_list|,
literal|"q"
argument_list|,
literal|"Tool"
argument_list|)
argument_list|,
name|twor
argument_list|)
expr_stmt|;
comment|// test that numeric field types can be queried
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"qf"
argument_list|,
literal|"text_sw"
argument_list|,
literal|"q"
argument_list|,
literal|"foo_i:100"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
comment|// test that numeric field types can be queried
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"qf"
argument_list|,
literal|"text_sw"
argument_list|,
literal|"q"
argument_list|,
literal|"foo_i:-100"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
comment|// test that numeric field types can be queried  via qf
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"qf"
argument_list|,
literal|"text_sw foo_i"
argument_list|,
literal|"q"
argument_list|,
literal|"100"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"qf defaults to defaultSearchField"
argument_list|,
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"q"
argument_list|,
literal|"op"
argument_list|)
argument_list|,
name|twor
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"qf"
argument_list|,
literal|"name title subject text"
argument_list|,
literal|"q"
argument_list|,
literal|"op"
argument_list|)
argument_list|,
name|twor
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"qf"
argument_list|,
literal|"name title subject text"
argument_list|,
literal|"q.op"
argument_list|,
literal|"AND"
argument_list|,
literal|"q"
argument_list|,
literal|"Order op"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"qf"
argument_list|,
literal|"name title subject text"
argument_list|,
literal|"q.op"
argument_list|,
literal|"OR"
argument_list|,
literal|"q"
argument_list|,
literal|"Order op"
argument_list|)
argument_list|,
name|twor
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"qf"
argument_list|,
literal|"name title subject text"
argument_list|,
literal|"q"
argument_list|,
literal|"Order AND op"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"qf"
argument_list|,
literal|"name title subject text"
argument_list|,
literal|"q"
argument_list|,
literal|"Order and op"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"qf"
argument_list|,
literal|"name title subject text"
argument_list|,
literal|"q"
argument_list|,
literal|"+Order op"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"qf"
argument_list|,
literal|"name title subject text"
argument_list|,
literal|"q"
argument_list|,
literal|"Order OR op"
argument_list|)
argument_list|,
name|twor
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"qf"
argument_list|,
literal|"name title subject text"
argument_list|,
literal|"q"
argument_list|,
literal|"Order or op"
argument_list|)
argument_list|,
name|twor
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"qf"
argument_list|,
literal|"name title subject text"
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
argument_list|,
name|allr
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"qf"
argument_list|,
literal|"name title subject text"
argument_list|,
literal|"q"
argument_list|,
literal|"star OR (-star)"
argument_list|)
argument_list|,
name|allr
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"qf"
argument_list|,
literal|"name title subject text"
argument_list|,
literal|"q"
argument_list|,
literal|"id:42 OR (-id:42)"
argument_list|)
argument_list|,
name|allr
argument_list|)
expr_stmt|;
comment|// test that basic synonyms work
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"qf"
argument_list|,
literal|"text_sw"
argument_list|,
literal|"q"
argument_list|,
literal|"GB"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
comment|// test for stopword removal in main query part
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"qf"
argument_list|,
literal|"text_sw"
argument_list|,
literal|"q"
argument_list|,
literal|"the big"
argument_list|)
argument_list|,
name|twor
argument_list|)
expr_stmt|;
comment|// test for stopwords not removed
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"qf"
argument_list|,
literal|"text_sw"
argument_list|,
literal|"stopwords"
argument_list|,
literal|"false"
argument_list|,
literal|"q.op"
argument_list|,
literal|"AND"
argument_list|,
literal|"q"
argument_list|,
literal|"the big"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
comment|// searching for a literal colon value when clearly not used for a field
name|assertQ
argument_list|(
literal|"expected doc is missing (using standard)"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"t_special:literal\\:colon"
argument_list|)
argument_list|,
literal|"//doc[1]/str[@name='id'][.='46']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"expected doc is missing (using escaped edismax w/field)"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"t_special:literal\\:colon"
argument_list|,
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|)
argument_list|,
literal|"//doc[1]/str[@name='id'][.='46']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"expected doc is missing (using un-escaped edismax w/field)"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"t_special:literal:colon"
argument_list|,
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|)
argument_list|,
literal|"//doc[1]/str[@name='id'][.='46']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"expected doc is missing (using escaped edismax w/qf)"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"literal\\:colon"
argument_list|,
literal|"qf"
argument_list|,
literal|"t_special"
argument_list|,
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|)
argument_list|,
literal|"//doc[1]/str[@name='id'][.='46']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"expected doc is missing (using un-escaped edismax w/qf)"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"literal:colon"
argument_list|,
literal|"qf"
argument_list|,
literal|"t_special"
argument_list|,
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|)
argument_list|,
literal|"//doc[1]/str[@name='id'][.='46']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"mm"
argument_list|,
literal|"100%"
argument_list|,
literal|"q"
argument_list|,
literal|"terminator:3"
argument_list|,
literal|"qf"
argument_list|,
literal|"movies_t"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"mm"
argument_list|,
literal|"100%"
argument_list|,
literal|"q"
argument_list|,
literal|"Mission:Impossible"
argument_list|,
literal|"qf"
argument_list|,
literal|"movies_t"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"mm"
argument_list|,
literal|"100%"
argument_list|,
literal|"q"
argument_list|,
literal|"Mission : Impossible"
argument_list|,
literal|"qf"
argument_list|,
literal|"movies_t"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"mm"
argument_list|,
literal|"100%"
argument_list|,
literal|"q"
argument_list|,
literal|"Mission: Impossible"
argument_list|,
literal|"qf"
argument_list|,
literal|"movies_t"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"mm"
argument_list|,
literal|"100%"
argument_list|,
literal|"q"
argument_list|,
literal|"Terminator 2: Judgement Day"
argument_list|,
literal|"qf"
argument_list|,
literal|"movies_t"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
comment|// make sure the clause wasn't eliminated
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"mm"
argument_list|,
literal|"100%"
argument_list|,
literal|"q"
argument_list|,
literal|"Terminator 10: Judgement Day"
argument_list|,
literal|"qf"
argument_list|,
literal|"movies_t"
argument_list|)
argument_list|,
name|nor
argument_list|)
expr_stmt|;
comment|// throw in a numeric field
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"mm"
argument_list|,
literal|"0"
argument_list|,
literal|"q"
argument_list|,
literal|"Terminator: 100"
argument_list|,
literal|"qf"
argument_list|,
literal|"movies_t foo_i"
argument_list|)
argument_list|,
name|twor
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"mm"
argument_list|,
literal|"100%"
argument_list|,
literal|"q"
argument_list|,
literal|"Terminator: 100"
argument_list|,
literal|"qf"
argument_list|,
literal|"movies_t foo_i"
argument_list|)
argument_list|,
name|nor
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"mm"
argument_list|,
literal|"100%"
argument_list|,
literal|"q"
argument_list|,
literal|"Terminator: 8"
argument_list|,
literal|"qf"
argument_list|,
literal|"movies_t foo_i"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"mm"
argument_list|,
literal|"0"
argument_list|,
literal|"q"
argument_list|,
literal|"movies_t:Terminator 100"
argument_list|,
literal|"qf"
argument_list|,
literal|"movies_t foo_i"
argument_list|)
argument_list|,
name|twor
argument_list|)
expr_stmt|;
comment|// special psuedo-fields like _query_ and _val_
comment|// special fields (and real field id) should be included by default
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"mm"
argument_list|,
literal|"100%"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:51"
argument_list|,
literal|"q"
argument_list|,
literal|"_query_:\"{!geofilt d=20 sfield=store pt=12.34,-56.78}\""
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
comment|// should also work when explicitly allowed
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"mm"
argument_list|,
literal|"100%"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:51"
argument_list|,
literal|"uf"
argument_list|,
literal|"id _query_"
argument_list|,
literal|"q"
argument_list|,
literal|"_query_:\"{!geofilt d=20 sfield=store pt=12.34,-56.78}\""
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"mm"
argument_list|,
literal|"100%"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:51"
argument_list|,
literal|"uf"
argument_list|,
literal|"id"
argument_list|,
literal|"uf"
argument_list|,
literal|"_query_"
argument_list|,
literal|"q"
argument_list|,
literal|"_query_:\"{!geofilt d=20 sfield=store pt=12.34,-56.78}\""
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
comment|// should fail when prohibited
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"mm"
argument_list|,
literal|"100%"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:51"
argument_list|,
literal|"uf"
argument_list|,
literal|"* -_query_"
argument_list|,
comment|// explicitly excluded
literal|"q"
argument_list|,
literal|"_query_:\"{!geofilt d=20 sfield=store pt=12.34,-56.78}\""
argument_list|)
argument_list|,
name|nor
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"mm"
argument_list|,
literal|"100%"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:51"
argument_list|,
literal|"uf"
argument_list|,
literal|"id"
argument_list|,
comment|// excluded by ommision
literal|"q"
argument_list|,
literal|"_query_:\"{!geofilt d=20 sfield=store pt=12.34,-56.78}\""
argument_list|)
argument_list|,
name|nor
argument_list|)
expr_stmt|;
comment|/** stopword removal in conjunction with multi-word synonyms at query time      * break this test.      // multi-word synonyms      // remove id:50 which contans the false match           assertQ(req("defType", "edismax", "qf", "text_t", "indent","true", "debugQuery","true",            "q","-id:50 nyc"), oner     );     **/
comment|/*** these fail because multi-word synonyms are being used at query time     // this will incorrectly match "new big city"     assertQ(req("defType", "edismax", "qf", "id title",            "q","nyc"), oner     );      // this will incorrectly match "new big city"     assertQ(req("defType", "edismax", "qf", "title",            "q","the big apple"), nor     );     ***/
block|}
DECL|method|testBoostQuery
specifier|public
name|void
name|testBoostQuery
parameter_list|()
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"tekna"
argument_list|,
literal|"qf"
argument_list|,
literal|"text_sw"
argument_list|,
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"bq"
argument_list|,
literal|"id:54^100"
argument_list|,
literal|"bq"
argument_list|,
literal|"id:53^10"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[52 TO 54]"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|)
argument_list|,
literal|"//doc[1]/str[@name='id'][.='54']"
argument_list|,
literal|"//doc[2]/str[@name='id'][.='53']"
argument_list|,
literal|"//doc[3]/str[@name='id'][.='52']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"tekna"
argument_list|,
literal|"qf"
argument_list|,
literal|"text_sw"
argument_list|,
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"bq"
argument_list|,
literal|"id:54^-100"
argument_list|,
literal|"bq"
argument_list|,
literal|"id:53^10"
argument_list|,
literal|"bq"
argument_list|,
literal|"id:52"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[52 TO 54]"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|)
argument_list|,
literal|"//doc[1]/str[@name='id'][.='53']"
argument_list|,
literal|"//doc[2]/str[@name='id'][.='52']"
argument_list|,
literal|"//doc[3]/str[@name='id'][.='54']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testUserFields
specifier|public
name|void
name|testUserFields
parameter_list|()
block|{
name|String
name|oner
init|=
literal|"*[count(//doc)=1]"
decl_stmt|;
name|String
name|nor
init|=
literal|"*[count(//doc)=0]"
decl_stmt|;
comment|// User fields
comment|// Default is allow all "*"
comment|// If a list of fields are given, only those are allowed "foo bar"
comment|// Possible to invert with "-" syntax:
comment|//   Disallow all: "-*"
comment|//   Allow all but id: "* -id"
comment|// Also supports "dynamic" field name wildcarding
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"q"
argument_list|,
literal|"id:42"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"uf"
argument_list|,
literal|"*"
argument_list|,
literal|"q"
argument_list|,
literal|"id:42"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"uf"
argument_list|,
literal|"id"
argument_list|,
literal|"q"
argument_list|,
literal|"id:42"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"uf"
argument_list|,
literal|"-*"
argument_list|,
literal|"q"
argument_list|,
literal|"id:42"
argument_list|)
argument_list|,
name|nor
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"uf"
argument_list|,
literal|"loremipsum"
argument_list|,
literal|"q"
argument_list|,
literal|"id:42"
argument_list|)
argument_list|,
name|nor
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"uf"
argument_list|,
literal|"* -id"
argument_list|,
literal|"q"
argument_list|,
literal|"id:42"
argument_list|)
argument_list|,
name|nor
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"uf"
argument_list|,
literal|"* -loremipsum"
argument_list|,
literal|"q"
argument_list|,
literal|"id:42"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"uf"
argument_list|,
literal|"id^5.0"
argument_list|,
literal|"q"
argument_list|,
literal|"id:42"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"uf"
argument_list|,
literal|"*^5.0"
argument_list|,
literal|"q"
argument_list|,
literal|"id:42"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"uf"
argument_list|,
literal|"id^5.0"
argument_list|,
literal|"q"
argument_list|,
literal|"id:42^10.0"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"uf"
argument_list|,
literal|"na*"
argument_list|,
literal|"q"
argument_list|,
literal|"name:Zapp"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"uf"
argument_list|,
literal|"*me"
argument_list|,
literal|"q"
argument_list|,
literal|"name:Zapp"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"uf"
argument_list|,
literal|"* -na*"
argument_list|,
literal|"q"
argument_list|,
literal|"name:Zapp"
argument_list|)
argument_list|,
name|nor
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"uf"
argument_list|,
literal|"*me -name"
argument_list|,
literal|"q"
argument_list|,
literal|"name:Zapp"
argument_list|)
argument_list|,
name|nor
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"uf"
argument_list|,
literal|"*ame -*e"
argument_list|,
literal|"q"
argument_list|,
literal|"name:Zapp"
argument_list|)
argument_list|,
name|nor
argument_list|)
expr_stmt|;
comment|// Boosts from user fields
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"debugQuery"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"q"
argument_list|,
literal|"id:42"
argument_list|)
argument_list|,
literal|"//str[@name='parsedquery_toString'][.='+id:42']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"debugQuery"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"uf"
argument_list|,
literal|"*^5.0"
argument_list|,
literal|"q"
argument_list|,
literal|"id:42"
argument_list|)
argument_list|,
literal|"//str[@name='parsedquery_toString'][.='+id:42^5.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"debugQuery"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"uf"
argument_list|,
literal|"*^2.0 id^5.0 -xyz"
argument_list|,
literal|"q"
argument_list|,
literal|"name:foo"
argument_list|)
argument_list|,
literal|"//str[@name='parsedquery_toString'][.='+name:foo^2.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"debugQuery"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"uf"
argument_list|,
literal|"i*^5.0"
argument_list|,
literal|"q"
argument_list|,
literal|"id:42"
argument_list|)
argument_list|,
literal|"//str[@name='parsedquery_toString'][.='+id:42^5.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"uf"
argument_list|,
literal|"-*"
argument_list|,
literal|"q"
argument_list|,
literal|"cannons"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"uf"
argument_list|,
literal|"* -id"
argument_list|,
literal|"q"
argument_list|,
literal|"42"
argument_list|,
literal|"qf"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
block|}
DECL|method|testAliasing
specifier|public
name|void
name|testAliasing
parameter_list|()
throws|throws
name|IOException
throws|,
name|Exception
block|{
name|String
name|oner
init|=
literal|"*[count(//doc)=1]"
decl_stmt|;
name|String
name|twor
init|=
literal|"*[count(//doc)=2]"
decl_stmt|;
name|String
name|nor
init|=
literal|"*[count(//doc)=0]"
decl_stmt|;
comment|// Aliasing
comment|// Single field
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"q"
argument_list|,
literal|"myalias:Zapp"
argument_list|)
argument_list|,
name|nor
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"q"
argument_list|,
literal|"myalias:Zapp"
argument_list|,
literal|"f.myalias.qf"
argument_list|,
literal|"name"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
comment|// Multi field
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"uf"
argument_list|,
literal|"myalias"
argument_list|,
literal|"q"
argument_list|,
literal|"myalias:(Zapp Obnoxious)"
argument_list|,
literal|"f.myalias.qf"
argument_list|,
literal|"name^2.0 mytrait_ss^5.0"
argument_list|,
literal|"mm"
argument_list|,
literal|"50%"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
comment|// Multi field
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"q"
argument_list|,
literal|"Zapp Obnoxious"
argument_list|,
literal|"f.myalias.qf"
argument_list|,
literal|"name^2.0 mytrait_ss^5.0"
argument_list|)
argument_list|,
name|nor
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"q"
argument_list|,
literal|"Zapp Obnoxious"
argument_list|,
literal|"qf"
argument_list|,
literal|"myalias^10.0"
argument_list|,
literal|"f.myalias.qf"
argument_list|,
literal|"name^2.0 mytrait_ss^5.0"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"q"
argument_list|,
literal|"Zapp Obnoxious"
argument_list|,
literal|"qf"
argument_list|,
literal|"myalias^10.0"
argument_list|,
literal|"f.myalias.qf"
argument_list|,
literal|"name^2.0 trait_ss^5.0"
argument_list|)
argument_list|,
name|twor
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"q"
argument_list|,
literal|"Zapp Obnoxious"
argument_list|,
literal|"qf"
argument_list|,
literal|"myalias^10.0"
argument_list|,
literal|"f.myalias.qf"
argument_list|,
literal|"name^2.0 trait_ss^5.0"
argument_list|,
literal|"mm"
argument_list|,
literal|"100%"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"q"
argument_list|,
literal|"Zapp Obnoxious"
argument_list|,
literal|"qf"
argument_list|,
literal|"who^10.0 where^3.0"
argument_list|,
literal|"f.who.qf"
argument_list|,
literal|"name^2.0"
argument_list|,
literal|"f.where.qf"
argument_list|,
literal|"mytrait_ss^5.0"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"q"
argument_list|,
literal|"Zapp Obnoxious"
argument_list|,
literal|"qf"
argument_list|,
literal|"myalias"
argument_list|,
literal|"f.myalias.qf"
argument_list|,
literal|"name mytrait_ss"
argument_list|,
literal|"uf"
argument_list|,
literal|"myalias"
argument_list|)
argument_list|,
name|oner
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"uf"
argument_list|,
literal|"who"
argument_list|,
literal|"q"
argument_list|,
literal|"who:(Zapp Obnoxious)"
argument_list|,
literal|"f.who.qf"
argument_list|,
literal|"name^2.0 trait_ss^5.0"
argument_list|,
literal|"qf"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
name|twor
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"uf"
argument_list|,
literal|"* -name"
argument_list|,
literal|"q"
argument_list|,
literal|"who:(Zapp Obnoxious)"
argument_list|,
literal|"f.who.qf"
argument_list|,
literal|"name^2.0 trait_ss^5.0"
argument_list|)
argument_list|,
name|twor
argument_list|)
expr_stmt|;
block|}
DECL|method|testAliasingBoost
specifier|public
name|void
name|testAliasingBoost
parameter_list|()
throws|throws
name|IOException
throws|,
name|Exception
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"q"
argument_list|,
literal|"Zapp Pig"
argument_list|,
literal|"qf"
argument_list|,
literal|"myalias"
argument_list|,
literal|"f.myalias.qf"
argument_list|,
literal|"name trait_ss^0.5"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id']=42"
argument_list|,
literal|"//result/doc[2]/str[@name='id']=47"
argument_list|)
expr_stmt|;
comment|//doc 42 should score higher than 46
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"q"
argument_list|,
literal|"Zapp Pig"
argument_list|,
literal|"qf"
argument_list|,
literal|"myalias^100 name"
argument_list|,
literal|"f.myalias.qf"
argument_list|,
literal|"trait_ss^0.5"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id']=47"
argument_list|,
literal|"//result/doc[2]/str[@name='id']=42"
argument_list|)
expr_stmt|;
comment|//Now the order should be inverse
block|}
DECL|method|testCyclicAliasing
specifier|public
name|void
name|testCyclicAliasing
parameter_list|()
throws|throws
name|IOException
throws|,
name|Exception
block|{
try|try
block|{
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"q"
argument_list|,
literal|"ignore_exception"
argument_list|,
literal|"qf"
argument_list|,
literal|"who"
argument_list|,
literal|"f.who.qf"
argument_list|,
literal|"name"
argument_list|,
literal|"f.name.qf"
argument_list|,
literal|"who"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Simple cyclic alising"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Field aliases lead to a cycle"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"q"
argument_list|,
literal|"ignore_exception"
argument_list|,
literal|"qf"
argument_list|,
literal|"who"
argument_list|,
literal|"f.who.qf"
argument_list|,
literal|"name"
argument_list|,
literal|"f.name.qf"
argument_list|,
literal|"myalias"
argument_list|,
literal|"f.myalias.qf"
argument_list|,
literal|"who"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Field aliases lead to a cycle"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"q"
argument_list|,
literal|"ignore_exception"
argument_list|,
literal|"qf"
argument_list|,
literal|"field1"
argument_list|,
literal|"f.field1.qf"
argument_list|,
literal|"field2 field3"
argument_list|,
literal|"f.field2.qf"
argument_list|,
literal|"field4 field5"
argument_list|,
literal|"f.field4.qf"
argument_list|,
literal|"field5"
argument_list|,
literal|"f.field5.qf"
argument_list|,
literal|"field6"
argument_list|,
literal|"f.field3.qf"
argument_list|,
literal|"field6"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"This is not cyclic alising"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"q"
argument_list|,
literal|"ignore_exception"
argument_list|,
literal|"qf"
argument_list|,
literal|"field1"
argument_list|,
literal|"f.field1.qf"
argument_list|,
literal|"field2 field3"
argument_list|,
literal|"f.field2.qf"
argument_list|,
literal|"field4 field5"
argument_list|,
literal|"f.field4.qf"
argument_list|,
literal|"field5"
argument_list|,
literal|"f.field5.qf"
argument_list|,
literal|"field4"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Field aliases lead to a cycle"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"q"
argument_list|,
literal|"who:(Zapp Pig) ignore_exception"
argument_list|,
literal|"qf"
argument_list|,
literal|"field1"
argument_list|,
literal|"f.who.qf"
argument_list|,
literal|"name"
argument_list|,
literal|"f.name.qf"
argument_list|,
literal|"myalias"
argument_list|,
literal|"f.myalias.qf"
argument_list|,
literal|"who"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Field aliases lead to a cycle"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testOperatorsWithLiteralColons
specifier|public
name|void
name|testOperatorsWithLiteralColons
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"142"
argument_list|,
literal|"a_s"
argument_list|,
literal|"bogus:xxx"
argument_list|,
literal|"text_s"
argument_list|,
literal|"yak"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"143"
argument_list|,
literal|"a_s"
argument_list|,
literal|"bogus:xxx"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"144"
argument_list|,
literal|"text_s"
argument_list|,
literal|"yak"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"145"
argument_list|,
literal|"a_s"
argument_list|,
literal|"a_s:xxx"
argument_list|,
literal|"text_s"
argument_list|,
literal|"yak"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"146"
argument_list|,
literal|"a_s"
argument_list|,
literal|"a_s:xxx"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"147"
argument_list|,
literal|"a_s"
argument_list|,
literal|"AND"
argument_list|,
literal|"a_s"
argument_list|,
literal|"NOT"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"bogus:xxx AND text_s:yak"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"qf"
argument_list|,
literal|"a_s b_s"
argument_list|,
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"mm"
argument_list|,
literal|"0"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//str[@name='id'][.='142']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"a_s:xxx AND text_s:yak"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"qf"
argument_list|,
literal|"a_s b_s"
argument_list|,
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"mm"
argument_list|,
literal|"0"
argument_list|,
literal|"uf"
argument_list|,
literal|"text_s"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//str[@name='id'][.='145']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"NOT bogus:xxx +text_s:yak"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"qf"
argument_list|,
literal|"a_s b_s"
argument_list|,
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"mm"
argument_list|,
literal|"0"
argument_list|,
literal|"debugQuery"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//str[@name='id'][.='144']"
argument_list|,
literal|"//str[@name='id'][.='145']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"NOT a_s:xxx +text_s:yak"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"qf"
argument_list|,
literal|"a_s b_s"
argument_list|,
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"mm"
argument_list|,
literal|"0"
argument_list|,
literal|"uf"
argument_list|,
literal|"text_s"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//str[@name='id'][.='142']"
argument_list|,
literal|"//str[@name='id'][.='144']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"+bogus:xxx yak"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"qf"
argument_list|,
literal|"a_s b_s text_s"
argument_list|,
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"mm"
argument_list|,
literal|"0"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//str[@name='id'][.='142']"
argument_list|,
literal|"//str[@name='id'][.='143']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"+a_s:xxx yak"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"qf"
argument_list|,
literal|"a_s b_s text_s"
argument_list|,
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"mm"
argument_list|,
literal|"0"
argument_list|,
literal|"uf"
argument_list|,
literal|"b_s"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//str[@name='id'][.='145']"
argument_list|,
literal|"//str[@name='id'][.='146']"
argument_list|)
expr_stmt|;
block|}
comment|// test phrase fields including pf2 pf3 and phrase slop
DECL|method|testPfPs
specifier|public
name|void
name|testPfPs
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"s0"
argument_list|,
literal|"phrase_sw"
argument_list|,
literal|"foo bar a b c"
argument_list|,
literal|"boost_d"
argument_list|,
literal|"1.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"s1"
argument_list|,
literal|"phrase_sw"
argument_list|,
literal|"foo a bar b c"
argument_list|,
literal|"boost_d"
argument_list|,
literal|"2.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"s2"
argument_list|,
literal|"phrase_sw"
argument_list|,
literal|"foo a b bar c"
argument_list|,
literal|"boost_d"
argument_list|,
literal|"3.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"s3"
argument_list|,
literal|"phrase_sw"
argument_list|,
literal|"foo a b c bar"
argument_list|,
literal|"boost_d"
argument_list|,
literal|"4.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"default order assumption wrong"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"foo bar"
argument_list|,
literal|"qf"
argument_list|,
literal|"phrase_sw"
argument_list|,
literal|"bf"
argument_list|,
literal|"boost_d"
argument_list|,
literal|"fl"
argument_list|,
literal|"score,*"
argument_list|,
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|)
argument_list|,
literal|"//doc[1]/str[@name='id'][.='s3']"
argument_list|,
literal|"//doc[2]/str[@name='id'][.='s2']"
argument_list|,
literal|"//doc[3]/str[@name='id'][.='s1']"
argument_list|,
literal|"//doc[4]/str[@name='id'][.='s0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"pf not working"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"foo bar"
argument_list|,
literal|"qf"
argument_list|,
literal|"phrase_sw"
argument_list|,
literal|"pf"
argument_list|,
literal|"phrase_sw^10"
argument_list|,
literal|"bf"
argument_list|,
literal|"boost_d"
argument_list|,
literal|"fl"
argument_list|,
literal|"score,*"
argument_list|,
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|)
argument_list|,
literal|"//doc[1]/str[@name='id'][.='s0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"pf2 not working"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"foo bar"
argument_list|,
literal|"qf"
argument_list|,
literal|"phrase_sw"
argument_list|,
literal|"pf2"
argument_list|,
literal|"phrase_sw^10"
argument_list|,
literal|"bf"
argument_list|,
literal|"boost_d"
argument_list|,
literal|"fl"
argument_list|,
literal|"score,*"
argument_list|,
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|)
argument_list|,
literal|"//doc[1]/str[@name='id'][.='s0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"pf3 not working"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"a b bar"
argument_list|,
literal|"qf"
argument_list|,
literal|"phrase_sw"
argument_list|,
literal|"pf3"
argument_list|,
literal|"phrase_sw^10"
argument_list|,
literal|"bf"
argument_list|,
literal|"boost_d"
argument_list|,
literal|"fl"
argument_list|,
literal|"score,*"
argument_list|,
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|)
argument_list|,
literal|"//doc[1]/str[@name='id'][.='s2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"ps not working for pf2"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"bar foo"
argument_list|,
literal|"qf"
argument_list|,
literal|"phrase_sw"
argument_list|,
literal|"pf2"
argument_list|,
literal|"phrase_sw^10"
argument_list|,
literal|"ps"
argument_list|,
literal|"2"
argument_list|,
literal|"bf"
argument_list|,
literal|"boost_d"
argument_list|,
literal|"fl"
argument_list|,
literal|"score,*"
argument_list|,
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|)
argument_list|,
literal|"//doc[1]/str[@name='id'][.='s0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"ps not working for pf3"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"a bar foo"
argument_list|,
literal|"qf"
argument_list|,
literal|"phrase_sw"
argument_list|,
literal|"pf3"
argument_list|,
literal|"phrase_sw^10"
argument_list|,
literal|"ps"
argument_list|,
literal|"3"
argument_list|,
literal|"bf"
argument_list|,
literal|"boost_d"
argument_list|,
literal|"fl"
argument_list|,
literal|"score,*"
argument_list|,
literal|"debugQuery"
argument_list|,
literal|"true"
argument_list|,
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|)
argument_list|,
literal|"//doc[1]/str[@name='id'][.='s1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"ps/ps2/ps3 with default slop overrides not working"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"zzzz xxxx cccc vvvv"
argument_list|,
literal|"qf"
argument_list|,
literal|"phrase_sw"
argument_list|,
literal|"pf"
argument_list|,
literal|"phrase_sw~1^10 phrase_sw~2^20 phrase_sw^30"
argument_list|,
literal|"pf2"
argument_list|,
literal|"phrase_sw~2^22 phrase_sw^33"
argument_list|,
literal|"pf3"
argument_list|,
literal|"phrase_sw~2^222 phrase_sw^333"
argument_list|,
literal|"ps"
argument_list|,
literal|"3"
argument_list|,
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|,
literal|"debugQuery"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"//str[@name='parsedquery'][contains(.,'phrase_sw:\"zzzz xxxx cccc vvvv\"~1^10.0')]"
argument_list|,
literal|"//str[@name='parsedquery'][contains(.,'phrase_sw:\"zzzz xxxx cccc vvvv\"~2^20.0')]"
argument_list|,
literal|"//str[@name='parsedquery'][contains(.,'phrase_sw:\"zzzz xxxx cccc vvvv\"~3^30.0')]"
argument_list|,
literal|"//str[@name='parsedquery'][contains(.,'phrase_sw:\"zzzz xxxx\"~2^22.0')]"
argument_list|,
literal|"//str[@name='parsedquery'][contains(.,'phrase_sw:\"xxxx cccc\"~2^22.0')]"
argument_list|,
literal|"//str[@name='parsedquery'][contains(.,'phrase_sw:\"cccc vvvv\"~2^22.0')]"
argument_list|,
literal|"//str[@name='parsedquery'][contains(.,'phrase_sw:\"zzzz xxxx\"~3^33.0')]"
argument_list|,
literal|"//str[@name='parsedquery'][contains(.,'phrase_sw:\"xxxx cccc\"~3^33.0')]"
argument_list|,
literal|"//str[@name='parsedquery'][contains(.,'phrase_sw:\"cccc vvvv\"~3^33.0')]"
argument_list|,
literal|"//str[@name='parsedquery'][contains(.,'phrase_sw:\"zzzz xxxx cccc\"~2^222.0')]"
argument_list|,
literal|"//str[@name='parsedquery'][contains(.,'phrase_sw:\"xxxx cccc vvvv\"~2^222.0')]"
argument_list|,
literal|"//str[@name='parsedquery'][contains(.,'phrase_sw:\"zzzz xxxx cccc\"~3^333.0')]"
argument_list|,
literal|"//str[@name='parsedquery'][contains(.,'phrase_sw:\"xxxx cccc vvvv\"~3^333.0')]"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
