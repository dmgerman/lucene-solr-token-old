begin_unit
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|SuppressCodecs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|CollapsingQParserPlugin
operator|.
name|GroupHeadSelector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|CollapsingQParserPlugin
operator|.
name|GroupHeadSelectorType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|//We want codecs that support DocValues, and ones supporting blank/empty values.
end_comment
begin_class
annotation|@
name|SuppressCodecs
argument_list|(
block|{
literal|"Appending"
block|,
literal|"Lucene3x"
block|,
literal|"Lucene40"
block|,
literal|"Lucene41"
block|,
literal|"Lucene42"
block|}
argument_list|)
DECL|class|TestGraphTermsQParserPlugin
specifier|public
class|class
name|TestGraphTermsQParserPlugin
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-collapseqparser.xml"
argument_list|,
literal|"schema11.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// if you override setUp or tearDown, you better call
comment|// the super classes version
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueries
specifier|public
name|void
name|testQueries
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|group
init|=
literal|"group_s"
decl_stmt|;
name|String
index|[]
name|doc
init|=
block|{
literal|"id"
block|,
literal|"1"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
name|group
block|,
literal|"1"
block|,
literal|"test_ti"
block|,
literal|"5"
block|,
literal|"test_tl"
block|,
literal|"10"
block|,
literal|"test_tf"
block|,
literal|"2000"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc1
init|=
block|{
literal|"id"
block|,
literal|"2"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
name|group
block|,
literal|"1"
block|,
literal|"test_ti"
block|,
literal|"5"
block|,
literal|"test_tl"
block|,
literal|"100"
block|,
literal|"test_tf"
block|,
literal|"200"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc1
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc2
init|=
block|{
literal|"id"
block|,
literal|"3"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
literal|"test_ti"
block|,
literal|"5000"
block|,
literal|"test_tl"
block|,
literal|"100"
block|,
literal|"test_tf"
block|,
literal|"200"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc2
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc3
init|=
block|{
literal|"id"
block|,
literal|"4"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
literal|"test_ti"
block|,
literal|"500"
block|,
literal|"test_tl"
block|,
literal|"1000"
block|,
literal|"test_tf"
block|,
literal|"2000"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc3
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc4
init|=
block|{
literal|"id"
block|,
literal|"5"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
name|group
block|,
literal|"2"
block|,
literal|"test_ti"
block|,
literal|"5"
block|,
literal|"test_tl"
block|,
literal|"10"
block|,
literal|"test_tf"
block|,
literal|"2000"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc4
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc5
init|=
block|{
literal|"id"
block|,
literal|"6"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
name|group
block|,
literal|"2"
block|,
literal|"test_ti"
block|,
literal|"10"
block|,
literal|"test_tl"
block|,
literal|"100"
block|,
literal|"test_tf"
block|,
literal|"200"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc5
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc6
init|=
block|{
literal|"id"
block|,
literal|"7"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
name|group
block|,
literal|"1"
block|,
literal|"test_ti"
block|,
literal|"10"
block|,
literal|"test_tl"
block|,
literal|"50"
block|,
literal|"test_tf"
block|,
literal|"300"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc6
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"{!graphTerms f=group_s maxDocFreq=10}1,2"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|,
literal|"indent"
argument_list|,
literal|"on"
argument_list|)
argument_list|,
literal|"*[count(//doc)=5]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='1.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='2.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[4]/float[@name='id'][.='6.0']"
argument_list|,
literal|"//result/doc[5]/float[@name='id'][.='7.0']"
argument_list|)
expr_stmt|;
comment|//Test without maxDocFreq param. Should default to Integer.MAX_VALUE and match all terms.
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"{!graphTerms f=group_s}1,2"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|,
literal|"indent"
argument_list|,
literal|"on"
argument_list|)
argument_list|,
literal|"*[count(//doc)=5]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='1.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='2.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[4]/float[@name='id'][.='6.0']"
argument_list|,
literal|"//result/doc[5]/float[@name='id'][.='7.0']"
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"{!graphTerms f=group_s maxDocFreq=1}1,2"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|,
literal|"indent"
argument_list|,
literal|"on"
argument_list|)
argument_list|,
literal|"*[count(//doc)=0]"
argument_list|)
expr_stmt|;
comment|//Test with int field
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"{!graphTerms f=test_ti maxDocFreq=10}5,10"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|,
literal|"indent"
argument_list|,
literal|"on"
argument_list|)
argument_list|,
literal|"*[count(//doc)=5]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='1.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='2.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[4]/float[@name='id'][.='6.0']"
argument_list|,
literal|"//result/doc[5]/float[@name='id'][.='7.0']"
argument_list|)
expr_stmt|;
comment|//Test with int field
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"{!graphTerms f=test_ti maxDocFreq=2}5,10"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|,
literal|"indent"
argument_list|,
literal|"on"
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='6.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='7.0']"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
