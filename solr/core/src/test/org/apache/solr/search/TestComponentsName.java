begin_unit
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|DebugComponent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|FacetComponent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|MoreLikeThisComponent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|QueryComponent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|StatsComponent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|TestComponentsName
specifier|public
class|class
name|TestComponentsName
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-components-name.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|delQ
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
operator|(
name|commit
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testComponentsName
specifier|public
name|void
name|testComponentsName
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|,
literal|"name"
argument_list|,
literal|"Zapp Brannigan"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"name"
argument_list|,
literal|"The Zapper"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
operator|(
name|commit
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"match all docs query"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
argument_list|,
literal|"//result[@numFound='2']"
argument_list|,
literal|"/response/str[@name='component1'][.='foo']"
argument_list|,
literal|"/response/str[@name='component2'][.='bar']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"use debugQuery"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"debugQuery"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"//result[@numFound='2']"
argument_list|,
literal|"/response/str[@name='component1'][.='foo']"
argument_list|,
literal|"/response/str[@name='component2'][.='bar']"
argument_list|,
literal|"/response/lst[@name='debug']/lst[@name='timing']/lst[@name='prepare']/lst[@name='component1']"
argument_list|,
literal|"/response/lst[@name='debug']/lst[@name='timing']/lst[@name='prepare']/lst[@name='"
operator|+
name|QueryComponent
operator|.
name|COMPONENT_NAME
operator|+
literal|"']"
argument_list|,
literal|"/response/lst[@name='debug']/lst[@name='timing']/lst[@name='prepare']/lst[@name='"
operator|+
name|FacetComponent
operator|.
name|COMPONENT_NAME
operator|+
literal|"']"
argument_list|,
literal|"/response/lst[@name='debug']/lst[@name='timing']/lst[@name='prepare']/lst[@name='"
operator|+
name|MoreLikeThisComponent
operator|.
name|COMPONENT_NAME
operator|+
literal|"']"
argument_list|,
literal|"/response/lst[@name='debug']/lst[@name='timing']/lst[@name='prepare']/lst[@name='"
operator|+
name|StatsComponent
operator|.
name|COMPONENT_NAME
operator|+
literal|"']"
argument_list|,
literal|"/response/lst[@name='debug']/lst[@name='timing']/lst[@name='prepare']/lst[@name='"
operator|+
name|DebugComponent
operator|.
name|COMPONENT_NAME
operator|+
literal|"']"
argument_list|,
literal|"/response/lst[@name='debug']/lst[@name='timing']/lst[@name='prepare']/lst[@name='component2']"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
