begin_unit
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|HighlightParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|AbstractSolrTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TestHarness
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_class
DECL|class|TestComplexPhraseQParserPlugin
specifier|public
class|class
name|TestComplexPhraseQParserPlugin
extends|extends
name|AbstractSolrTestCase
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-query-parser-init.xml"
argument_list|,
literal|"schema-complex-phrase.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultField
specifier|public
name|void
name|testDefaultField
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"text"
argument_list|,
literal|"john smith"
argument_list|,
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"text"
argument_list|,
literal|"johathon smith"
argument_list|,
literal|"id"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"text"
argument_list|,
literal|"john percival smith"
argument_list|,
literal|"id"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|optimize
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!complexphrase} \"john smith\""
argument_list|)
argument_list|,
literal|"//result[@numFound='1']"
argument_list|,
literal|"//doc[./int[@name='id']='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!complexphrase} \"j* smyth~\""
argument_list|)
argument_list|,
literal|"//result[@numFound='2']"
argument_list|,
literal|"//doc[./int[@name='id']='1']"
argument_list|,
literal|"//doc[./int[@name='id']='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!complexphrase} \"(jo* -john) smith\""
argument_list|)
argument_list|,
literal|"//result[@numFound='1']"
argument_list|,
literal|"//doc[./int[@name='id']='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!complexphrase} \"jo* smith\"~2"
argument_list|)
argument_list|,
literal|"//result[@numFound='3']"
argument_list|,
literal|"//doc[./int[@name='id']='1']"
argument_list|,
literal|"//doc[./int[@name='id']='2']"
argument_list|,
literal|"//doc[./int[@name='id']='3']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!complexphrase} \"jo* [sma TO smz]\""
argument_list|)
argument_list|,
literal|"//result[@numFound='2']"
argument_list|,
literal|"//doc[./int[@name='id']='1']"
argument_list|,
literal|"//doc[./int[@name='id']='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!complexphrase} \"john\""
argument_list|)
argument_list|,
literal|"//result[@numFound='2']"
argument_list|,
literal|"//doc[./int[@name='id']='1']"
argument_list|,
literal|"//doc[./int[@name='id']='3']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!complexphrase} \"(john johathon) smith\""
argument_list|)
argument_list|,
literal|"//result[@numFound='2']"
argument_list|,
literal|"//doc[./int[@name='id']='1']"
argument_list|,
literal|"//doc[./int[@name='id']='2']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
name|QueryParsing
operator|.
name|DEFTYPE
argument_list|,
name|ComplexPhraseQParserPlugin
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|,
literal|"id"
argument_list|)
expr_stmt|;
name|TestHarness
operator|.
name|LocalRequestFactory
name|sumLRF
init|=
name|h
operator|.
name|getRequestFactory
argument_list|(
literal|"standard"
argument_list|,
literal|0
argument_list|,
literal|200
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"name"
argument_list|,
literal|"john smith"
argument_list|,
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"name"
argument_list|,
literal|"johathon smith"
argument_list|,
literal|"id"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"name"
argument_list|,
literal|"john percival smith"
argument_list|,
literal|"id"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|optimize
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Simple multi-term still works"
argument_list|,
name|sumLRF
operator|.
name|makeRequest
argument_list|(
literal|"name:\"john smith\""
argument_list|)
argument_list|,
literal|"//doc[./int[@name='id']='1']"
argument_list|,
literal|"//result[@numFound='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!complexphrase} name:\"john smith\""
argument_list|)
argument_list|,
literal|"//doc[./int[@name='id']='1']"
argument_list|,
literal|"//result[@numFound='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"wildcards and fuzzies are OK in phrases"
argument_list|,
name|sumLRF
operator|.
name|makeRequest
argument_list|(
literal|"name:\"j* smyth~\""
argument_list|)
argument_list|,
literal|"//doc[./int[@name='id']='1']"
argument_list|,
literal|"//doc[./int[@name='id']='2']"
argument_list|,
literal|"//result[@numFound='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"boolean logic works"
argument_list|,
name|sumLRF
operator|.
name|makeRequest
argument_list|(
literal|"name:\"(jo* -john) smith\""
argument_list|)
argument_list|,
literal|"//doc[./int[@name='id']='2']"
argument_list|,
literal|"//result[@numFound='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"position logic works"
argument_list|,
name|sumLRF
operator|.
name|makeRequest
argument_list|(
literal|"name:\"jo*  smith\"~2"
argument_list|)
argument_list|,
literal|"//doc[./int[@name='id']='1']"
argument_list|,
literal|"//doc[./int[@name='id']='2']"
argument_list|,
literal|"//doc[./int[@name='id']='3']"
argument_list|,
literal|"//result[@numFound='3']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"range queries supported"
argument_list|,
name|sumLRF
operator|.
name|makeRequest
argument_list|(
literal|"name:\"jo* [sma TO smz]\""
argument_list|)
argument_list|,
literal|"//doc[./int[@name='id']='1']"
argument_list|,
literal|"//doc[./int[@name='id']='2']"
argument_list|,
literal|"//result[@numFound='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Simple single-term still works"
argument_list|,
name|sumLRF
operator|.
name|makeRequest
argument_list|(
literal|"name:\"john\""
argument_list|)
argument_list|,
literal|"//doc[./int[@name='id']='1']"
argument_list|,
literal|"//doc[./int[@name='id']='3']"
argument_list|,
literal|"//result[@numFound='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"OR inside phrase works"
argument_list|,
name|sumLRF
operator|.
name|makeRequest
argument_list|(
literal|"name:\"(john johathon) smith\""
argument_list|)
argument_list|,
literal|"//doc[./int[@name='id']='1']"
argument_list|,
literal|"//doc[./int[@name='id']='2']"
argument_list|,
literal|"//result[@numFound='2']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPhraseHighlighter
specifier|public
name|void
name|testPhraseHighlighter
parameter_list|()
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
name|QueryParsing
operator|.
name|DEFTYPE
argument_list|,
name|ComplexPhraseQParserPlugin
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|,
literal|"id"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|HighlightParams
operator|.
name|HIGHLIGHT
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|HighlightParams
operator|.
name|USE_PHRASE_HIGHLIGHTER
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|HighlightParams
operator|.
name|FIELD_MATCH
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|HighlightParams
operator|.
name|FRAGSIZE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|HighlightParams
operator|.
name|FIELDS
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|TestHarness
operator|.
name|LocalRequestFactory
name|sumLRF
init|=
name|h
operator|.
name|getRequestFactory
argument_list|(
literal|"standard"
argument_list|,
literal|0
argument_list|,
literal|200
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"name"
argument_list|,
literal|"john smith smith john"
argument_list|,
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"name"
argument_list|,
literal|"johathon smith smith johathon"
argument_list|,
literal|"id"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"name"
argument_list|,
literal|"john percival smith"
argument_list|,
literal|"id"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|optimize
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"range queries supported"
argument_list|,
name|sumLRF
operator|.
name|makeRequest
argument_list|(
literal|"name:[sma TO smz]"
argument_list|)
argument_list|,
literal|"//doc[./int[@name='id']='1']"
argument_list|,
literal|"//doc[./int[@name='id']='2']"
argument_list|,
literal|"//doc[./int[@name='id']='3']"
argument_list|,
literal|"//result[@numFound='3']"
argument_list|)
expr_stmt|;
name|sumLRF
operator|=
name|h
operator|.
name|getRequestFactory
argument_list|(
literal|"standard"
argument_list|,
literal|0
argument_list|,
literal|200
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"PhraseHighlighter=true Test"
argument_list|,
name|sumLRF
operator|.
name|makeRequest
argument_list|(
literal|"name:\"(john johathon) smith\""
argument_list|)
argument_list|,
literal|"//lst[@name='highlighting']/lst[@name='1']"
argument_list|,
literal|"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em><em>smith</em> smith john']"
argument_list|,
literal|"//lst[@name='highlighting']/lst[@name='2']"
argument_list|,
literal|"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em><em>smith</em> smith johathon']"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|HighlightParams
operator|.
name|USE_PHRASE_HIGHLIGHTER
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sumLRF
operator|=
name|h
operator|.
name|getRequestFactory
argument_list|(
literal|"standard"
argument_list|,
literal|0
argument_list|,
literal|200
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"PhraseHighlighter=false Test"
argument_list|,
name|sumLRF
operator|.
name|makeRequest
argument_list|(
literal|"name:\"(john johathon) smith\""
argument_list|)
argument_list|,
literal|"//lst[@name='highlighting']/lst[@name='1']"
argument_list|,
literal|"//lst[@name='1']/arr[@name='name']/str[.='<em>john</em><em>smith</em><em>smith</em><em>john</em>']"
argument_list|,
literal|"//lst[@name='highlighting']/lst[@name='2']"
argument_list|,
literal|"//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em><em>smith</em><em>smith</em><em>johathon</em>']"
argument_list|)
expr_stmt|;
comment|/*     assertQ("Highlight Plain Prefix Query Test",             sumLRF.makeRequest("name:jo*"),             "//lst[@name='highlighting']/lst[@name='1']",             "//lst[@name='1']/arr[@name='name']/str[.='<em>john</em> smith smith<em>john</em>']",             "//lst[@name='highlighting']/lst[@name='2']",             "//lst[@name='2']/arr[@name='name']/str[.='<em>johathon</em> smith smith<em>johathon</em>']",             "//lst[@name='highlighting']/lst[@name='3']",             "//lst[@name='3']/arr[@name='name']/str[.='<em>john</em> percival smith']"     );    */
block|}
annotation|@
name|Test
DECL|method|testMultipleFields
specifier|public
name|void
name|testMultipleFields
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"text"
argument_list|,
literal|"protein digest"
argument_list|,
literal|"name"
argument_list|,
literal|"dna rules"
argument_list|,
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"text"
argument_list|,
literal|"digest protein"
argument_list|,
literal|"name"
argument_list|,
literal|"rna is the workhorse"
argument_list|,
literal|"id"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"text"
argument_list|,
literal|"dna rules"
argument_list|,
literal|"name"
argument_list|,
literal|"protein digest"
argument_list|,
literal|"id"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"text"
argument_list|,
literal|"dna really rules"
argument_list|,
literal|"name"
argument_list|,
literal|"digest protein"
argument_list|,
literal|"id"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|optimize
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!complexphrase} name:\"protein digest\" AND text:\"dna rules\""
argument_list|)
argument_list|,
literal|"//result[@numFound='1']"
argument_list|,
literal|"//doc[./int[@name='id']='3']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!complexphrase} name:\"prot* dige*\" AND text:\"d* r*\""
argument_list|)
argument_list|,
literal|"//result[@numFound='1']"
argument_list|,
literal|"//doc[./int[@name='id']='3']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!complexphrase inOrder=\"false\"} name:\"dna* rule*\" AND text:\"prot* diges*\""
argument_list|)
argument_list|,
literal|"//result[@numFound='1']"
argument_list|,
literal|"//doc[./int[@name='id']='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!unorderedcomplexphrase} name:\"protein digest\" AND text:\"dna rules\"~2"
argument_list|)
argument_list|,
literal|"//result[@numFound='2']"
argument_list|,
literal|"//doc[./int[@name='id']='3']"
argument_list|,
literal|"//doc[./int[@name='id']='4']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!unorderedcomplexphrase inOrder=\"true\"} name:\"protein digest\" AND text:\"dna rules\""
argument_list|)
argument_list|,
literal|"//result[@numFound='1']"
argument_list|,
literal|"//doc[./int[@name='id']='3']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnorderedPhraseQuery
specifier|public
name|void
name|testUnorderedPhraseQuery
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"text"
argument_list|,
literal|"protein digest"
argument_list|,
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"text"
argument_list|,
literal|"digest protein"
argument_list|,
literal|"id"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"name"
argument_list|,
literal|"protein digest"
argument_list|,
literal|"id"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"name"
argument_list|,
literal|"digest protein"
argument_list|,
literal|"id"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|optimize
argument_list|()
argument_list|)
expr_stmt|;
comment|/**      * ordered phrase query return only fist document      */
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!complexphrase} \"protein digest\""
argument_list|)
argument_list|,
literal|"//result[@numFound='1']"
argument_list|,
literal|"//doc[./int[@name='id']='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!complexphrase} \"pro* di*\""
argument_list|)
argument_list|,
literal|"//result[@numFound='1']"
argument_list|,
literal|"//doc[./int[@name='id']='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!complexphrase} name:\"protein digest\""
argument_list|)
argument_list|,
literal|"//result[@numFound='1']"
argument_list|,
literal|"//doc[./int[@name='id']='3']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!complexphrase} name:\"pro* di*\""
argument_list|)
argument_list|,
literal|"//result[@numFound='1']"
argument_list|,
literal|"//doc[./int[@name='id']='3']"
argument_list|)
expr_stmt|;
comment|/**      * unordered phrase query returns two documents.      */
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!unorderedcomplexphrase} \"digest protein\""
argument_list|)
argument_list|,
literal|"//result[@numFound='2']"
argument_list|,
literal|"//doc[./int[@name='id']='1']"
argument_list|,
literal|"//doc[./int[@name='id']='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!unorderedcomplexphrase} \"di* pro*\""
argument_list|)
argument_list|,
literal|"//result[@numFound='2']"
argument_list|,
literal|"//doc[./int[@name='id']='1']"
argument_list|,
literal|"//doc[./int[@name='id']='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!unorderedcomplexphrase} name:\"digest protein\""
argument_list|)
argument_list|,
literal|"//result[@numFound='2']"
argument_list|,
literal|"//doc[./int[@name='id']='3']"
argument_list|,
literal|"//doc[./int[@name='id']='4']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!unorderedcomplexphrase} name:\"di* pro*\""
argument_list|)
argument_list|,
literal|"//result[@numFound='2']"
argument_list|,
literal|"//doc[./int[@name='id']='3']"
argument_list|,
literal|"//doc[./int[@name='id']='4']"
argument_list|)
expr_stmt|;
comment|/**      * inOrder parameter can be defined with local params syntax.      */
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!complexphrase inOrder=false} \"di* pro*\""
argument_list|)
argument_list|,
literal|"//result[@numFound='2']"
argument_list|,
literal|"//doc[./int[@name='id']='1']"
argument_list|,
literal|"//doc[./int[@name='id']='2']"
argument_list|)
expr_stmt|;
comment|/**      * inOrder and df parameters can be defined with local params syntax.      */
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!complexphrase inOrder=false df=name} \"di* pro*\""
argument_list|)
argument_list|,
literal|"//result[@numFound='2']"
argument_list|,
literal|"//doc[./int[@name='id']='3']"
argument_list|,
literal|"//doc[./int[@name='id']='4']"
argument_list|)
expr_stmt|;
block|}
comment|/**    * the query "sulfur-reducing bacteria" was crashing due to the dash inside the phrase.    */
DECL|method|testHyphenInPhrase
annotation|@
name|Test
specifier|public
name|void
name|testHyphenInPhrase
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"text"
argument_list|,
literal|"sulfur-reducing bacteria"
argument_list|,
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"text"
argument_list|,
literal|"sulfur reducing bacteria"
argument_list|,
literal|"id"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"name"
argument_list|,
literal|"sulfur-reducing bacteria"
argument_list|,
literal|"id"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"name"
argument_list|,
literal|"sulfur reducing bacteria"
argument_list|,
literal|"id"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|optimize
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!complexphrase} \"sulfur-reducing bacteria\""
argument_list|)
argument_list|,
literal|"//result[@numFound='2']"
argument_list|,
literal|"//doc[./int[@name='id']='1']"
argument_list|,
literal|"//doc[./int[@name='id']='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!complexphrase} name:\"sulfur-reducing bacteria\""
argument_list|)
argument_list|,
literal|"//result[@numFound='2']"
argument_list|,
literal|"//doc[./int[@name='id']='3']"
argument_list|,
literal|"//doc[./int[@name='id']='4']"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
