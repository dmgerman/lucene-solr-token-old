begin_unit
begin_package
DECL|package|org.apache.solr.search.facet
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|facet
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|JSONTestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseHS
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|macro
operator|.
name|MacroExpander
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
annotation|@
name|LuceneTestCase
operator|.
name|SuppressCodecs
argument_list|(
block|{
literal|"Lucene3x"
block|,
literal|"Lucene40"
block|,
literal|"Lucene41"
block|,
literal|"Lucene42"
block|,
literal|"Lucene45"
block|,
literal|"Appending"
block|}
argument_list|)
DECL|class|TestJsonFacets
specifier|public
class|class
name|TestJsonFacets
extends|extends
name|SolrTestCaseHS
block|{
DECL|field|servers
specifier|private
specifier|static
name|SolrInstances
name|servers
decl_stmt|;
comment|// for distributed testing
annotation|@
name|BeforeClass
DECL|method|beforeTests
specifier|public
specifier|static
name|void
name|beforeTests
parameter_list|()
throws|throws
name|Exception
block|{
name|JSONTestUtil
operator|.
name|failRepeatedKeys
operator|=
literal|true
expr_stmt|;
name|initCore
argument_list|(
literal|"solrconfig-tlog.xml"
argument_list|,
literal|"schema_latest.xml"
argument_list|)
expr_stmt|;
block|}
DECL|method|initServers
specifier|public
specifier|static
name|void
name|initServers
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|servers
operator|==
literal|null
condition|)
block|{
name|servers
operator|=
operator|new
name|SolrInstances
argument_list|(
literal|3
argument_list|,
literal|"solrconfig-tlog.xml"
argument_list|,
literal|"schema_latest.xml"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
DECL|method|afterTests
specifier|public
specifier|static
name|void
name|afterTests
parameter_list|()
throws|throws
name|Exception
block|{
name|JSONTestUtil
operator|.
name|failRepeatedKeys
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|servers
operator|!=
literal|null
condition|)
block|{
name|servers
operator|.
name|stop
argument_list|()
expr_stmt|;
name|servers
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// attempt to reproduce https://github.com/Heliosearch/heliosearch/issues/33
annotation|@
name|Test
DECL|method|testComplex
specifier|public
name|void
name|testComplex
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|r
init|=
name|random
argument_list|()
decl_stmt|;
name|Client
name|client
init|=
name|Client
operator|.
name|localClient
decl_stmt|;
name|double
name|price_low
init|=
literal|11000
decl_stmt|;
name|double
name|price_high
init|=
literal|100000
decl_stmt|;
name|ModifiableSolrParams
name|p
init|=
name|params
argument_list|(
literal|"make_s"
argument_list|,
literal|"make_s"
argument_list|,
literal|"model_s"
argument_list|,
literal|"model_s"
argument_list|,
literal|"price_low"
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|price_low
argument_list|)
argument_list|,
literal|"price_high"
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|price_high
argument_list|)
argument_list|)
decl_stmt|;
name|MacroExpander
name|m
init|=
operator|new
name|MacroExpander
argument_list|(
name|p
operator|.
name|getMap
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|make_s
init|=
name|m
operator|.
name|expand
argument_list|(
literal|"${make_s}"
argument_list|)
decl_stmt|;
name|String
name|model_s
init|=
name|m
operator|.
name|expand
argument_list|(
literal|"${model_s}"
argument_list|)
decl_stmt|;
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|int
name|nDocs
init|=
literal|99
decl_stmt|;
name|String
index|[]
name|makes
init|=
block|{
literal|"honda"
block|,
literal|"toyota"
block|,
literal|"ford"
block|,
literal|null
block|}
decl_stmt|;
name|Double
index|[]
name|prices
init|=
block|{
literal|10000.0
block|,
literal|30000.0
block|,
literal|50000.0
block|,
literal|0.0
block|,
literal|null
block|}
decl_stmt|;
name|String
index|[]
name|honda_models
init|=
block|{
literal|"accord"
block|,
literal|"civic"
block|,
literal|"fit"
block|,
literal|"pilot"
block|,
literal|null
block|}
decl_stmt|;
comment|// make sure this is alphabetized to match tiebreaks in index
name|String
index|[]
name|other_models
init|=
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|,
literal|"x"
block|,
literal|"y"
block|,
literal|"z"
block|,
literal|null
block|}
decl_stmt|;
name|int
name|nHonda
init|=
literal|0
decl_stmt|;
specifier|final
name|int
index|[]
name|honda_model_counts
init|=
operator|new
name|int
index|[
name|honda_models
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nDocs
condition|;
name|i
operator|++
control|)
block|{
name|SolrInputDocument
name|doc
init|=
name|sdoc
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|Double
name|price
init|=
name|rand
argument_list|(
name|prices
argument_list|)
decl_stmt|;
if|if
condition|(
name|price
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|addField
argument_list|(
literal|"cost_f"
argument_list|,
name|price
argument_list|)
expr_stmt|;
block|}
name|boolean
name|matches_price
init|=
name|price
operator|!=
literal|null
operator|&&
name|price
operator|>=
name|price_low
operator|&&
name|price
operator|<=
name|price_high
decl_stmt|;
name|String
name|make
init|=
name|rand
argument_list|(
name|makes
argument_list|)
decl_stmt|;
if|if
condition|(
name|make
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|addField
argument_list|(
name|make_s
argument_list|,
name|make
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"honda"
operator|.
name|equals
argument_list|(
name|make
argument_list|)
condition|)
block|{
name|int
name|modelNum
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|honda_models
operator|.
name|length
argument_list|)
decl_stmt|;
name|String
name|model
init|=
name|honda_models
index|[
name|modelNum
index|]
decl_stmt|;
if|if
condition|(
name|model
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|addField
argument_list|(
name|model_s
argument_list|,
name|model
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|matches_price
condition|)
block|{
name|nHonda
operator|++
expr_stmt|;
name|honda_model_counts
index|[
name|modelNum
index|]
operator|++
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|make
operator|==
literal|null
condition|)
block|{
name|doc
operator|.
name|addField
argument_list|(
name|model_s
argument_list|,
name|rand
argument_list|(
name|honda_models
argument_list|)
argument_list|)
expr_stmt|;
comment|// add some docs w/ model but w/o make
block|}
else|else
block|{
comment|// other makes
name|doc
operator|.
name|addField
argument_list|(
name|model_s
argument_list|,
name|rand
argument_list|(
name|other_models
argument_list|)
argument_list|)
expr_stmt|;
comment|// add some docs w/ model but w/o make
block|}
name|client
operator|.
name|add
argument_list|(
name|doc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|client
operator|.
name|add
argument_list|(
name|doc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// dup, causing a delete
block|}
if|if
condition|(
name|r
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
operator|==
literal|0
condition|)
block|{
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// force new seg
block|}
block|}
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// now figure out top counts
name|List
argument_list|<
name|Integer
argument_list|>
name|idx
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|honda_model_counts
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|idx
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|idx
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Integer
name|o1
parameter_list|,
name|Integer
name|o2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|honda_model_counts
index|[
name|o2
index|]
operator|-
name|honda_model_counts
index|[
name|o1
index|]
decl_stmt|;
return|return
name|cmp
operator|==
literal|0
condition|?
name|o1
operator|-
name|o2
else|:
name|cmp
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// straight query facets
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"fq"
argument_list|,
literal|"+${make_s}:honda +cost_f:[${price_low} TO ${price_high}]"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{makes:{terms:{field:${make_s}, facet:{models:{terms:{field:${model_s}, limit:2, mincount:0}}}}}}}"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"make_s,model_s"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
literal|"facets=={count:"
operator|+
name|nHonda
operator|+
literal|", makes:{buckets:[{val:honda, count:"
operator|+
name|nHonda
operator|+
literal|", models:{buckets:["
operator|+
literal|"{val:"
operator|+
name|honda_models
index|[
name|idx
operator|.
name|get
argument_list|(
literal|0
argument_list|)
index|]
operator|+
literal|", count:"
operator|+
name|honda_model_counts
index|[
name|idx
operator|.
name|get
argument_list|(
literal|0
argument_list|)
index|]
operator|+
literal|"},"
operator|+
literal|"{val:"
operator|+
name|honda_models
index|[
name|idx
operator|.
name|get
argument_list|(
literal|1
argument_list|)
index|]
operator|+
literal|", count:"
operator|+
name|honda_model_counts
index|[
name|idx
operator|.
name|get
argument_list|(
literal|1
argument_list|)
index|]
operator|+
literal|"}]}"
operator|+
literal|"}]}}"
argument_list|)
expr_stmt|;
block|}
DECL|method|testStatsSimple
specifier|public
name|void
name|testStatsSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|delQ
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"cat_s"
argument_list|,
literal|"A"
argument_list|,
literal|"where_s"
argument_list|,
literal|"NY"
argument_list|,
literal|"num_d"
argument_list|,
literal|"4"
argument_list|,
literal|"num_i"
argument_list|,
literal|"2"
argument_list|,
literal|"val_b"
argument_list|,
literal|"true"
argument_list|,
literal|"sparse_s"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"cat_s"
argument_list|,
literal|"B"
argument_list|,
literal|"where_s"
argument_list|,
literal|"NJ"
argument_list|,
literal|"num_d"
argument_list|,
literal|"-9"
argument_list|,
literal|"num_i"
argument_list|,
literal|"-5"
argument_list|,
literal|"val_b"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"cat_s"
argument_list|,
literal|"A"
argument_list|,
literal|"where_s"
argument_list|,
literal|"NJ"
argument_list|,
literal|"num_d"
argument_list|,
literal|"2"
argument_list|,
literal|"num_i"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"cat_s"
argument_list|,
literal|"B"
argument_list|,
literal|"where_s"
argument_list|,
literal|"NJ"
argument_list|,
literal|"num_d"
argument_list|,
literal|"11"
argument_list|,
literal|"num_i"
argument_list|,
literal|"7"
argument_list|,
literal|"sparse_s"
argument_list|,
literal|"two"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"cat_s"
argument_list|,
literal|"B"
argument_list|,
literal|"where_s"
argument_list|,
literal|"NY"
argument_list|,
literal|"num_d"
argument_list|,
literal|"-5"
argument_list|,
literal|"num_i"
argument_list|,
literal|"-5"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// test multiple json.facet commands
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{x:'sum(num_d)'}"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{y:'min(num_d)'}"
argument_list|)
argument_list|,
literal|"facets=={count:6 , x:3.0, y:-9.0 }"
argument_list|)
expr_stmt|;
comment|// test streaming
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{   cat:{terms:{field:'cat_s', method:stream }}"
operator|+
literal|", cat2:{terms:{field:'cat_s', method:stream, sort:'index asc' }}"
operator|+
comment|// default sort
literal|", cat3:{terms:{field:'cat_s', method:stream, mincount:3 }}"
operator|+
comment|// mincount
literal|", cat4:{terms:{field:'cat_s', method:stream, prefix:B }}"
operator|+
comment|// prefix
literal|", cat5:{terms:{field:'cat_s', method:stream, offset:1 }}"
operator|+
comment|// offset
literal|" }"
argument_list|)
argument_list|,
literal|"facets=={count:6 "
operator|+
literal|", cat :{buckets:[{val:A, count:2},{val:B, count:3}]}"
operator|+
literal|", cat2:{buckets:[{val:A, count:2},{val:B, count:3}]}"
operator|+
literal|", cat3:{buckets:[{val:B, count:3}]}"
operator|+
literal|", cat4:{buckets:[{val:B, count:3}]}"
operator|+
literal|", cat5:{buckets:[{val:B, count:3}]}"
operator|+
literal|" }"
argument_list|)
expr_stmt|;
comment|// test nested streaming under non-streaming
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{   cat:{terms:{field:'cat_s', sort:'index asc', facet:{where:{terms:{field:where_s,method:stream}}}   }}}"
argument_list|)
argument_list|,
literal|"facets=={count:6 "
operator|+
literal|", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1},{val:NY,count:1}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2},{val:NY,count:1}]}    }]}"
operator|+
literal|"}"
argument_list|)
expr_stmt|;
comment|// test nested streaming under streaming
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{   cat:{terms:{field:'cat_s', method:stream, facet:{where:{terms:{field:where_s,method:stream}}}   }}}"
argument_list|)
argument_list|,
literal|"facets=={count:6 "
operator|+
literal|", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1},{val:NY,count:1}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2},{val:NY,count:1}]}    }]}"
operator|+
literal|"}"
argument_list|)
expr_stmt|;
comment|// test nested streaming with stats under streaming
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{   cat:{terms:{field:'cat_s', method:stream, facet:{  where:{terms:{field:where_s,method:stream, facet:{x:'max(num_d)'}     }}}   }}}"
argument_list|)
argument_list|,
literal|"facets=={count:6 "
operator|+
literal|", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1,x:2.0},{val:NY,count:1,x:4.0}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2,x:11.0},{val:NY,count:1,x:-5.0}]}    }]}"
operator|+
literal|"}"
argument_list|)
expr_stmt|;
comment|// test nested streaming with stats under streaming with stats
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{   cat:{terms:{field:'cat_s', method:stream, facet:{ y:'min(num_d)',  where:{terms:{field:where_s,method:stream, facet:{x:'max(num_d)'}     }}}   }}}"
argument_list|)
argument_list|,
literal|"facets=={count:6 "
operator|+
literal|", cat :{buckets:[{val:A, count:2, y:2.0, where:{buckets:[{val:NJ,count:1,x:2.0},{val:NY,count:1,x:4.0}]}   },{val:B, count:3, y:-9.0, where:{buckets:[{val:NJ,count:2,x:11.0},{val:NY,count:1,x:-5.0}]}    }]}"
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
literal|"cat_s:A"
argument_list|)
argument_list|,
literal|"response/numFound==2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStats
specifier|public
name|void
name|testStats
parameter_list|()
throws|throws
name|Exception
block|{
comment|// single valued strings
name|doStats
argument_list|(
name|Client
operator|.
name|localClient
argument_list|,
name|params
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|doStats
specifier|public
name|void
name|doStats
parameter_list|(
name|Client
name|client
parameter_list|,
name|ModifiableSolrParams
name|p
parameter_list|)
throws|throws
name|Exception
block|{
comment|// single valued strings
name|doStatsTemplated
argument_list|(
name|client
argument_list|,
name|params
argument_list|(
name|p
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"noexist"
argument_list|,
literal|"noexist_s"
argument_list|,
literal|"cat_s"
argument_list|,
literal|"cat_s"
argument_list|,
literal|"where_s"
argument_list|,
literal|"where_s"
argument_list|,
literal|"num_d"
argument_list|,
literal|"num_d"
argument_list|,
literal|"num_i"
argument_list|,
literal|"num_i"
argument_list|,
literal|"super_s"
argument_list|,
literal|"super_s"
argument_list|,
literal|"val_b"
argument_list|,
literal|"val_b"
argument_list|,
literal|"sparse_s"
argument_list|,
literal|"sparse_s"
argument_list|,
literal|"multi_ss"
argument_list|,
literal|"multi_ss"
argument_list|)
argument_list|)
expr_stmt|;
comment|// multi-valued strings
name|doStatsTemplated
argument_list|(
name|client
argument_list|,
name|params
argument_list|(
name|p
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"noexist"
argument_list|,
literal|"noexist_ss"
argument_list|,
literal|"cat_s"
argument_list|,
literal|"cat_ss"
argument_list|,
literal|"where_s"
argument_list|,
literal|"where_ss"
argument_list|,
literal|"num_d"
argument_list|,
literal|"num_d"
argument_list|,
literal|"num_i"
argument_list|,
literal|"num_i"
argument_list|,
literal|"super_s"
argument_list|,
literal|"super_ss"
argument_list|,
literal|"val_b"
argument_list|,
literal|"val_b"
argument_list|,
literal|"sparse_s"
argument_list|,
literal|"sparse_ss"
argument_list|,
literal|"multi_ss"
argument_list|,
literal|"multi_ss"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doStatsTemplated
specifier|public
specifier|static
name|void
name|doStatsTemplated
parameter_list|(
name|Client
name|client
parameter_list|,
name|ModifiableSolrParams
name|p
parameter_list|)
throws|throws
name|Exception
block|{
name|MacroExpander
name|m
init|=
operator|new
name|MacroExpander
argument_list|(
name|p
operator|.
name|getMap
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|cat_s
init|=
name|m
operator|.
name|expand
argument_list|(
literal|"${cat_s}"
argument_list|)
decl_stmt|;
name|String
name|where_s
init|=
name|m
operator|.
name|expand
argument_list|(
literal|"${where_s}"
argument_list|)
decl_stmt|;
name|String
name|num_d
init|=
name|m
operator|.
name|expand
argument_list|(
literal|"${num_d}"
argument_list|)
decl_stmt|;
name|String
name|num_i
init|=
name|m
operator|.
name|expand
argument_list|(
literal|"${num_i}"
argument_list|)
decl_stmt|;
name|String
name|val_b
init|=
name|m
operator|.
name|expand
argument_list|(
literal|"${val_b}"
argument_list|)
decl_stmt|;
name|String
name|super_s
init|=
name|m
operator|.
name|expand
argument_list|(
literal|"${super_s}"
argument_list|)
decl_stmt|;
name|String
name|sparse_s
init|=
name|m
operator|.
name|expand
argument_list|(
literal|"${sparse_s}"
argument_list|)
decl_stmt|;
name|String
name|multi_ss
init|=
name|m
operator|.
name|expand
argument_list|(
literal|"${multi_ss}"
argument_list|)
decl_stmt|;
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|cat_s
argument_list|,
literal|"A"
argument_list|,
name|where_s
argument_list|,
literal|"NY"
argument_list|,
name|num_d
argument_list|,
literal|"4"
argument_list|,
name|num_i
argument_list|,
literal|"2"
argument_list|,
name|super_s
argument_list|,
literal|"zodiac"
argument_list|,
name|val_b
argument_list|,
literal|"true"
argument_list|,
name|sparse_s
argument_list|,
literal|"one"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
name|cat_s
argument_list|,
literal|"B"
argument_list|,
name|where_s
argument_list|,
literal|"NJ"
argument_list|,
name|num_d
argument_list|,
literal|"-9"
argument_list|,
name|num_i
argument_list|,
literal|"-5"
argument_list|,
name|super_s
argument_list|,
literal|"superman"
argument_list|,
name|val_b
argument_list|,
literal|"false"
argument_list|,
name|multi_ss
argument_list|,
literal|"a"
argument_list|,
literal|"multi_ss"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|client
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
name|cat_s
argument_list|,
literal|"A"
argument_list|,
name|where_s
argument_list|,
literal|"NJ"
argument_list|,
name|num_d
argument_list|,
literal|"2"
argument_list|,
name|num_i
argument_list|,
literal|"3"
argument_list|,
name|super_s
argument_list|,
literal|"spiderman"
argument_list|,
name|multi_ss
argument_list|,
literal|"b"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
name|cat_s
argument_list|,
literal|"B"
argument_list|,
name|where_s
argument_list|,
literal|"NJ"
argument_list|,
name|num_d
argument_list|,
literal|"11"
argument_list|,
name|num_i
argument_list|,
literal|"7"
argument_list|,
name|super_s
argument_list|,
literal|"batman"
argument_list|,
name|sparse_s
argument_list|,
literal|"two"
argument_list|,
name|multi_ss
argument_list|,
literal|"a"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|client
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
name|cat_s
argument_list|,
literal|"B"
argument_list|,
name|where_s
argument_list|,
literal|"NY"
argument_list|,
name|num_d
argument_list|,
literal|"-5"
argument_list|,
name|num_i
argument_list|,
literal|"-5"
argument_list|,
name|super_s
argument_list|,
literal|"hulk"
argument_list|,
name|multi_ss
argument_list|,
literal|"b"
argument_list|,
name|multi_ss
argument_list|,
literal|"a"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// straight query facets
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{catA:{query:{q:'${cat_s}:A'}},  catA2:{query:{query:'${cat_s}:A'}},  catA3:{query:'${cat_s}:A'}    }"
argument_list|)
argument_list|,
literal|"facets=={ 'count':6, 'catA':{ 'count':2}, 'catA2':{ 'count':2}, 'catA3':{ 'count':2}}"
argument_list|)
expr_stmt|;
comment|// nested query facets
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{ catB:{query:{q:'${cat_s}:B', facet:{nj:{query:'${where_s}:NJ'}, ny:{query:'${where_s}:NY'}} }}}"
argument_list|)
argument_list|,
literal|"facets=={ 'count':6, 'catB':{'count':3, 'nj':{'count':2}, 'ny':{'count':1}}}"
argument_list|)
expr_stmt|;
comment|// nested query facets on subset
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"id:(2 3)"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{ catB:{query:{q:'${cat_s}:B', facet:{nj:{query:'${where_s}:NJ'}, ny:{query:'${where_s}:NY'}} }}}"
argument_list|)
argument_list|,
literal|"facets=={ 'count':2, 'catB':{'count':1, 'nj':{'count':1}, 'ny':{'count':0}}}"
argument_list|)
expr_stmt|;
comment|// nested query facets with stats
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{ catB:{query:{q:'${cat_s}:B', facet:{nj:{query:{q:'${where_s}:NJ'}}, ny:{query:'${where_s}:NY'}} }}}"
argument_list|)
argument_list|,
literal|"facets=={ 'count':6, 'catB':{'count':3, 'nj':{'count':2}, 'ny':{'count':1}}}"
argument_list|)
expr_stmt|;
comment|// field/terms facet
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{c1:{field:'${cat_s}'}, c2:{field:{field:'${cat_s}'}}, c3:{terms:{field:'${cat_s}'}}  }"
argument_list|)
argument_list|,
literal|"facets=={ 'count':6, "
operator|+
literal|"'c1':{ 'buckets':[{ 'val':'B', 'count':3}, { 'val':'A', 'count':2}]}, "
operator|+
literal|"'c2':{  'buckets':[{ 'val':'B', 'count':3}, { 'val':'A', 'count':2}]}, "
operator|+
literal|"'c3':{  'buckets':[{ 'val':'B', 'count':3}, { 'val':'A', 'count':2}]}} "
argument_list|)
expr_stmt|;
comment|// test mincount
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{f1:{terms:{field:'${cat_s}', mincount:3}}}"
argument_list|)
argument_list|,
literal|"facets=={ 'count':6, "
operator|+
literal|"'f1':{  'buckets':[{ 'val':'B', 'count':3}]} } "
argument_list|)
expr_stmt|;
comment|// test default mincount of 1
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"id:1"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{f1:{terms:'${cat_s}'}}"
argument_list|)
argument_list|,
literal|"facets=={ 'count':1, "
operator|+
literal|"'f1':{  'buckets':[{ 'val':'A', 'count':1}]} } "
argument_list|)
expr_stmt|;
comment|// test  mincount of 0 - need processEmpty for distrib to match up
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"id:1"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{processEmpty:true, f1:{terms:{field:'${cat_s}', mincount:0}}}"
argument_list|)
argument_list|,
literal|"facets=={ 'count':1, "
operator|+
literal|"'f1':{  'buckets':[{ 'val':'A', 'count':1}, { 'val':'B', 'count':0}]} } "
argument_list|)
expr_stmt|;
comment|// test  mincount of 0 with stats, need processEmpty for distrib to match up
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"id:1"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{processEmpty:true, f1:{terms:{field:'${cat_s}', mincount:0, allBuckets:true, facet:{n1:'sum(${num_d})'}  }}}"
argument_list|)
argument_list|,
literal|"facets=={ 'count':1, "
operator|+
literal|"'f1':{ allBuckets:{ 'count':1, n1:4.0}, 'buckets':[{ 'val':'A', 'count':1, n1:4.0}, { 'val':'B', 'count':0 /*, n1:0.0 */ }]} } "
argument_list|)
expr_stmt|;
comment|// test sorting by stat
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{f1:{terms:{field:'${cat_s}', sort:'n1 desc', facet:{n1:'sum(${num_d})'}  }}"
operator|+
literal|" , f2:{terms:{field:'${cat_s}', sort:'n1 asc', facet:{n1:'sum(${num_d})'}  }} }"
argument_list|)
argument_list|,
literal|"facets=={ 'count':6, "
operator|+
literal|"  f1:{  'buckets':[{ val:'A', count:2, n1:6.0 }, { val:'B', count:3, n1:-3.0}]}"
operator|+
literal|", f2:{  'buckets':[{ val:'B', count:3, n1:-3.0}, { val:'A', count:2, n1:6.0 }]} }"
argument_list|)
expr_stmt|;
comment|// test sorting by count/index order
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{f1:{terms:{field:'${cat_s}', sort:'count desc' }  }"
operator|+
literal|"           , f2:{terms:{field:'${cat_s}', sort:'count asc'  }  }"
operator|+
literal|"           , f3:{terms:{field:'${cat_s}', sort:'index asc'  }  }"
operator|+
literal|"           , f4:{terms:{field:'${cat_s}', sort:'index desc' }  }"
operator|+
literal|"}"
argument_list|)
argument_list|,
literal|"facets=={ count:6 "
operator|+
literal|" ,f1:{buckets:[ {val:B,count:3}, {val:A,count:2} ] }"
operator|+
literal|" ,f2:{buckets:[ {val:A,count:2}, {val:B,count:3} ] }"
operator|+
literal|" ,f3:{buckets:[ {val:A,count:2}, {val:B,count:3} ] }"
operator|+
literal|" ,f4:{buckets:[ {val:B,count:3}, {val:A,count:2} ] }"
operator|+
literal|"}"
argument_list|)
expr_stmt|;
comment|// test tiebreaks when sorting by count
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"id:1 id:6"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{f1:{terms:{field:'${cat_s}', sort:'count desc' }  }"
operator|+
literal|"           , f2:{terms:{field:'${cat_s}', sort:'count asc'  }  }"
operator|+
literal|"}"
argument_list|)
argument_list|,
literal|"facets=={ count:2 "
operator|+
literal|" ,f1:{buckets:[ {val:A,count:1}, {val:B,count:1} ] }"
operator|+
literal|" ,f2:{buckets:[ {val:A,count:1}, {val:B,count:1} ] }"
operator|+
literal|"}"
argument_list|)
expr_stmt|;
comment|// terms facet with nested query facet
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{cat:{terms:{field:'${cat_s}', facet:{nj:{query:'${where_s}:NJ'}}    }   }} }"
argument_list|)
argument_list|,
literal|"facets=={ 'count':6, "
operator|+
literal|"'cat':{ 'buckets':[{ 'val':'B', 'count':3, 'nj':{ 'count':2}}, { 'val':'A', 'count':2, 'nj':{ 'count':1}}]} }"
argument_list|)
expr_stmt|;
comment|// terms facet with nested query facet on subset
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"id:(2 5 4)"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{cat:{terms:{field:'${cat_s}', facet:{nj:{query:'${where_s}:NJ'}}    }   }} }"
argument_list|)
argument_list|,
literal|"facets=={ 'count':3, "
operator|+
literal|"'cat':{ 'buckets':[{ 'val':'B', 'count':2, 'nj':{ 'count':2}}, { 'val':'A', 'count':1, 'nj':{ 'count':1}}]} }"
argument_list|)
expr_stmt|;
comment|// test prefix
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{f1:{terms:{field:${super_s}, prefix:s, mincount:0 }}}"
comment|// even with mincount=0, we should only see buckets with the prefix
argument_list|)
argument_list|,
literal|"facets=={ 'count':6, "
operator|+
literal|"'f1':{ 'buckets':[{val:spiderman, count:1}, {val:superman, count:1}]} } "
argument_list|)
expr_stmt|;
comment|// test prefix that doesn't exist
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{f1:{terms:{field:${super_s}, prefix:ttt, mincount:0 }}}"
argument_list|)
argument_list|,
literal|"facets=={ 'count':6, "
operator|+
literal|"'f1':{ 'buckets':[]} } "
argument_list|)
expr_stmt|;
comment|// test prefix that doesn't exist at start
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{f1:{terms:{field:${super_s}, prefix:aaaaaa, mincount:0 }}}"
argument_list|)
argument_list|,
literal|"facets=={ 'count':6, "
operator|+
literal|"'f1':{ 'buckets':[]} } "
argument_list|)
expr_stmt|;
comment|// test prefix that doesn't exist at end
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{f1:{terms:{field:${super_s}, prefix:zzzzzz, mincount:0 }}}"
argument_list|)
argument_list|,
literal|"facets=={ 'count':6, "
operator|+
literal|"'f1':{ 'buckets':[]} } "
argument_list|)
expr_stmt|;
comment|//
comment|// missing
comment|//
comment|// test missing w/ non-existent field
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{f1:{terms:{field:${noexist}, missing:true}}}"
argument_list|)
argument_list|,
literal|"facets=={ 'count':6, "
operator|+
literal|"'f1':{ 'buckets':[], missing:{count:6} } } "
argument_list|)
expr_stmt|;
comment|// test missing
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{f1:{terms:{field:${sparse_s}, missing:true }}}"
argument_list|)
argument_list|,
literal|"facets=={ 'count':6, "
operator|+
literal|"'f1':{ 'buckets':[{val:one, count:1}, {val:two, count:1}], missing:{count:4} } } "
argument_list|)
expr_stmt|;
comment|// test missing with stats
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{f1:{terms:{field:${sparse_s}, missing:true, facet:{x:'sum(num_d)'}   }}}"
argument_list|)
argument_list|,
literal|"facets=={ 'count':6, "
operator|+
literal|"'f1':{ 'buckets':[{val:one, count:1, x:4.0}, {val:two, count:1, x:11.0}], missing:{count:4, x:-12.0}   } } "
argument_list|)
expr_stmt|;
comment|// test that the missing bucket is not affected by any prefix
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{f1:{terms:{field:${sparse_s}, missing:true, prefix:on, facet:{x:'sum(num_d)'}   }}}"
argument_list|)
argument_list|,
literal|"facets=={ 'count':6, "
operator|+
literal|"'f1':{ 'buckets':[{val:one, count:1, x:4.0}], missing:{count:4, x:-12.0}   } } "
argument_list|)
expr_stmt|;
comment|// test missing with prefix that doesn't exist
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{f1:{terms:{field:${sparse_s}, missing:true, prefix:ppp, facet:{x:'sum(num_d)'}   }}}"
argument_list|)
argument_list|,
literal|"facets=={ 'count':6, "
operator|+
literal|"'f1':{ 'buckets':[], missing:{count:4, x:-12.0}   } } "
argument_list|)
expr_stmt|;
comment|// test numBuckets
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{f1:{terms:{field:${cat_s}, numBuckets:true, limit:1}}}"
comment|// TODO: limit:0 produced an error
argument_list|)
argument_list|,
literal|"facets=={ 'count':6, "
operator|+
literal|"'f1':{ numBuckets:2, buckets:[{val:B, count:3}]} } "
argument_list|)
expr_stmt|;
comment|// prefix should lower numBuckets
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{f1:{terms:{field:${cat_s}, numBuckets:true, prefix:B}}}"
argument_list|)
argument_list|,
literal|"facets=={ 'count':6, "
operator|+
literal|"'f1':{ numBuckets:1, buckets:[{val:B, count:3}]} } "
argument_list|)
expr_stmt|;
comment|// mincount should lower numBuckets
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{f1:{terms:{field:${cat_s}, numBuckets:true, mincount:3}}}"
argument_list|)
argument_list|,
literal|"facets=={ 'count':6, "
operator|+
literal|"'f1':{ numBuckets:1, buckets:[{val:B, count:3}]} } "
argument_list|)
expr_stmt|;
comment|// basic range facet
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{f:{range:{field:${num_d}, start:-5, end:10, gap:5}}}"
argument_list|)
argument_list|,
literal|"facets=={count:6, f:{buckets:[ {val:-5.0,count:1}, {val:0.0,count:2}, {val:5.0,count:0} ] } }"
argument_list|)
expr_stmt|;
comment|// basic range facet with "include" params
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{f:{range:{field:${num_d}, start:-5, end:10, gap:5, include:upper}}}"
argument_list|)
argument_list|,
literal|"facets=={count:6, f:{buckets:[ {val:-5.0,count:0}, {val:0.0,count:2}, {val:5.0,count:0} ] } }"
argument_list|)
expr_stmt|;
comment|// range facet with sub facets and stats
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{f:{range:{field:${num_d}, start:-5, end:10, gap:5,   facet:{ x:'sum(${num_i})', ny:{query:'${where_s}:NY'}}   }}}"
argument_list|)
argument_list|,
literal|"facets=={count:6, f:{buckets:[ {val:-5.0,count:1,x:-5.0,ny:{count:1}}, {val:0.0,count:2,x:5.0,ny:{count:1}}, {val:5.0,count:0 /* ,x:0.0,ny:{count:0} */ } ] } }"
argument_list|)
expr_stmt|;
comment|// range facet with sub facets and stats, with "other:all"
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{f:{range:{field:${num_d}, start:-5, end:10, gap:5, other:all,   facet:{ x:'sum(${num_i})', ny:{query:'${where_s}:NY'}}   }}}"
argument_list|)
argument_list|,
literal|"facets=={count:6, f:{buckets:[ {val:-5.0,count:1,x:-5.0,ny:{count:1}}, {val:0.0,count:2,x:5.0,ny:{count:1}}, {val:5.0,count:0 /* ,x:0.0,ny:{count:0} */} ]"
operator|+
literal|",before: {count:1,x:-5.0,ny:{count:0}}"
operator|+
literal|",after:  {count:1,x:7.0, ny:{count:0}}"
operator|+
literal|",between:{count:3,x:0.0, ny:{count:2}}"
operator|+
literal|" } }"
argument_list|)
expr_stmt|;
comment|// range facet with sub facets and stats, with "other:all", on subset
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"id:(3 4 6)"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{f:{range:{field:${num_d}, start:-5, end:10, gap:5, other:all,   facet:{ x:'sum(${num_i})', ny:{query:'${where_s}:NY'}}   }}}"
argument_list|)
argument_list|,
literal|"facets=={count:3, f:{buckets:[ {val:-5.0,count:1,x:-5.0,ny:{count:1}}, {val:0.0,count:1,x:3.0,ny:{count:0}}, {val:5.0,count:0 /* ,x:0.0,ny:{count:0} */} ]"
operator|+
literal|",before: {count:0 /* ,x:0.0,ny:{count:0} */ }"
operator|+
literal|",after:  {count:0 /* ,x:0.0,ny:{count:0} */}"
operator|+
literal|",between:{count:2,x:-2.0, ny:{count:1}}"
operator|+
literal|" } }"
argument_list|)
expr_stmt|;
comment|// stats at top level
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{ sum1:'sum(${num_d})', sumsq1:'sumsq(${num_d})', avg1:'avg(${num_d})', min1:'min(${num_d})', max1:'max(${num_d})', numwhere:'unique(${where_s})' }"
argument_list|)
argument_list|,
literal|"facets=={ 'count':6, "
operator|+
literal|"sum1:3.0, sumsq1:247.0, avg1:0.5, min1:-9.0, max1:11.0, numwhere:2  }"
argument_list|)
expr_stmt|;
comment|// stats at top level, no matches
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"id:DOESNOTEXIST"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{ sum1:'sum(${num_d})', sumsq1:'sumsq(${num_d})', avg1:'avg(${num_d})', min1:'min(${num_d})', max1:'max(${num_d})', numwhere:'unique(${where_s})' }"
argument_list|)
argument_list|,
literal|"facets=={count:0 "
operator|+
literal|"/* ,sum1:0.0, sumsq1:0.0, avg1:0.0, min1:'NaN', max1:'NaN', numwhere:0 */ }"
argument_list|)
expr_stmt|;
comment|//
comment|// tests on a multi-valued field with actual multiple values, just to ensure that we are
comment|// using a multi-valued method for the rest of the tests when appropriate.
comment|//
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{cat:{terms:{field:'${multi_ss}', facet:{nj:{query:'${where_s}:NJ'}}    }   }} }"
argument_list|)
argument_list|,
literal|"facets=={ 'count':6, "
operator|+
literal|"'cat':{ 'buckets':[{ 'val':'a', 'count':3, 'nj':{ 'count':2}}, { 'val':'b', 'count':3, 'nj':{ 'count':2}}]} }"
argument_list|)
expr_stmt|;
comment|// test unique on multi-valued field
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"json.facet"
argument_list|,
literal|"{x:'unique(${multi_ss})', y:{query:{q:'id:2', facet:{x:'unique(${multi_ss})'} }}   }"
argument_list|)
argument_list|,
literal|"facets=={ 'count':6, "
operator|+
literal|"x:2,"
operator|+
literal|"y:{count:1, x:2}"
operator|+
comment|// single document should yield 2 unique values
literal|" }"
argument_list|)
expr_stmt|;
comment|//////////////////////////////////////////////////////////////////////////////////////////////////////////
comment|// test converting legacy facets
comment|// test mincount
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
comment|// , "json.facet", "{f1:{terms:{field:'${cat_s}', mincount:3}}}"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.version"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=f1}${cat_s}"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"3"
argument_list|)
argument_list|,
literal|"facets=={ 'count':6, "
operator|+
literal|"'f1':{  'buckets':[{ 'val':'B', 'count':3}]} } "
argument_list|)
expr_stmt|;
comment|// test prefix
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
comment|// , "json.facet", "{f1:{terms:{field:${super_s}, prefix:s, mincount:0 }}}"  // even with mincount=0, we should only see buckets with the prefix
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.version"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=f1}${super_s}"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"s"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|)
argument_list|,
literal|"facets=={ 'count':6, "
operator|+
literal|"'f1':{ 'buckets':[{val:spiderman, count:1}, {val:superman, count:1}]} } "
argument_list|)
expr_stmt|;
comment|// range facet with sub facets and stats
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
comment|// , "json.facet", "{f:{range:{field:${num_d}, start:-5, end:10, gap:5,   facet:{ x:'sum(${num_i})', ny:{query:'${where_s}:NY'}}   }}}"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.version"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.range"
argument_list|,
literal|"{!key=f}${num_d}"
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-5"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"5"
argument_list|,
literal|"f.f.facet.stat"
argument_list|,
literal|"x:sum(${num_i})"
argument_list|,
literal|"subfacet.f.query"
argument_list|,
literal|"{!key=ny}${where_s}:NY"
argument_list|)
argument_list|,
literal|"facets=={count:6, f:{buckets:[ {val:-5.0,count:1,x:-5.0,ny:{count:1}}, {val:0.0,count:2,x:5.0,ny:{count:1}}, {val:5.0,count:0 /* ,x:0.0,ny:{count:0} */ } ] } }"
argument_list|)
expr_stmt|;
comment|// test sorting by stat
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
comment|// , "json.facet", "{f1:{terms:{field:'${cat_s}', sort:'n1 desc', facet:{n1:'sum(${num_d})'}  }}" +
comment|//    " , f2:{terms:{field:'${cat_s}', sort:'n1 asc', facet:{n1:'sum(${num_d})'}  }} }"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.version"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=f1}${cat_s}"
argument_list|,
literal|"f.f1.facet.sort"
argument_list|,
literal|"n1 desc"
argument_list|,
literal|"facet.stat"
argument_list|,
literal|"n1:sum(num_d)"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=f2}${cat_s}"
argument_list|,
literal|"f.f1.facet.sort"
argument_list|,
literal|"n1 asc"
argument_list|)
argument_list|,
literal|"facets=={ 'count':6, "
operator|+
literal|"  f1:{  'buckets':[{ val:'A', count:2, n1:6.0 }, { val:'B', count:3, n1:-3.0}]}"
operator|+
literal|", f2:{  'buckets':[{ val:'B', count:3, n1:-3.0}, { val:'A', count:2, n1:6.0 }]} }"
argument_list|)
expr_stmt|;
comment|// range facet with sub facets and stats, with "other:all", on subset
name|client
operator|.
name|testJQ
argument_list|(
name|params
argument_list|(
name|p
argument_list|,
literal|"q"
argument_list|,
literal|"id:(3 4 6)"
comment|//, "json.facet", "{f:{range:{field:${num_d}, start:-5, end:10, gap:5, other:all,   facet:{ x:'sum(${num_i})', ny:{query:'${where_s}:NY'}}   }}}"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.version"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.range"
argument_list|,
literal|"{!key=f}${num_d}"
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-5"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"5"
argument_list|,
literal|"f.f.facet.stat"
argument_list|,
literal|"x:sum(${num_i})"
argument_list|,
literal|"subfacet.f.query"
argument_list|,
literal|"{!key=ny}${where_s}:NY"
argument_list|,
literal|"facet.range.other"
argument_list|,
literal|"all"
argument_list|)
argument_list|,
literal|"facets=={count:3, f:{buckets:[ {val:-5.0,count:1,x:-5.0,ny:{count:1}}, {val:0.0,count:1,x:3.0,ny:{count:0}}, {val:5.0,count:0 /* ,x:0.0,ny:{count:0} */} ]"
operator|+
literal|",before: {count:0 /* ,x:0.0,ny:{count:0} */ }"
operator|+
literal|",after:  {count:0 /* ,x:0.0,ny:{count:0} */}"
operator|+
literal|",between:{count:2,x:-2.0, ny:{count:1}}"
operator|+
literal|" } }"
argument_list|)
expr_stmt|;
comment|// TODO:
comment|// numdocs('query') stat (don't make a bucket... just a count)
comment|// missing(field)
comment|// make missing configurable in min, max, etc
comment|// exclusions
comment|// zeroes
comment|// instead of json.facet make it facet?
block|}
annotation|@
name|Test
DECL|method|testDistrib
specifier|public
name|void
name|testDistrib
parameter_list|()
throws|throws
name|Exception
block|{
name|initServers
argument_list|()
expr_stmt|;
name|Client
name|client
init|=
name|servers
operator|.
name|getClient
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|queryDefaults
argument_list|()
operator|.
name|set
argument_list|(
literal|"shards"
argument_list|,
name|servers
operator|.
name|getShards
argument_list|()
argument_list|)
expr_stmt|;
name|doStats
argument_list|(
name|client
argument_list|,
name|params
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
