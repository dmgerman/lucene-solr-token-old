begin_unit
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|AbstractSolrTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_class
DECL|class|TestMaxScoreQueryParser
specifier|public
class|class
name|TestMaxScoreQueryParser
extends|extends
name|AbstractSolrTestCase
block|{
DECL|field|q
name|Query
name|q
decl_stmt|;
DECL|field|clauses
name|BooleanClause
index|[]
name|clauses
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFallbackToLucene
specifier|public
name|void
name|testFallbackToLucene
parameter_list|()
block|{
name|q
operator|=
name|parse
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|q
operator|instanceof
name|TermQuery
argument_list|)
expr_stmt|;
name|q
operator|=
name|parse
argument_list|(
literal|"foo^3.0"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|q
operator|instanceof
name|TermQuery
argument_list|)
expr_stmt|;
name|q
operator|=
name|parse
argument_list|(
literal|"price:[0 TO 10]"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|q
operator|instanceof
name|NumericRangeQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoShouldClauses
specifier|public
name|void
name|testNoShouldClauses
parameter_list|()
block|{
name|q
operator|=
name|parse
argument_list|(
literal|"+foo +bar"
argument_list|)
expr_stmt|;
name|clauses
operator|=
name|clauses
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|clauses
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|clauses
index|[
literal|0
index|]
operator|.
name|isRequired
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|clauses
index|[
literal|1
index|]
operator|.
name|isRequired
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|=
name|parse
argument_list|(
literal|"+foo -bar"
argument_list|)
expr_stmt|;
name|clauses
operator|=
name|clauses
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|clauses
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|clauses
index|[
literal|0
index|]
operator|.
name|isRequired
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|clauses
index|[
literal|1
index|]
operator|.
name|isProhibited
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPureMax
specifier|public
name|void
name|testPureMax
parameter_list|()
block|{
name|q
operator|=
name|parse
argument_list|(
literal|"foo bar"
argument_list|)
expr_stmt|;
name|clauses
operator|=
name|clauses
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|clauses
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|clauses
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
operator|instanceof
name|DisjunctionMaxQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
operator|(
operator|(
name|DisjunctionMaxQuery
operator|)
name|clauses
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTieBreakerMultiplier
argument_list|()
argument_list|,
literal|1e-15
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Query
argument_list|>
name|qa
init|=
operator|(
operator|(
name|DisjunctionMaxQuery
operator|)
name|clauses
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getDisjuncts
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|qa
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text:foo"
argument_list|,
name|qa
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMaxAndProhibited
specifier|public
name|void
name|testMaxAndProhibited
parameter_list|()
block|{
name|q
operator|=
name|parse
argument_list|(
literal|"foo bar -baz"
argument_list|)
expr_stmt|;
name|clauses
operator|=
name|clauses
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|clauses
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|clauses
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
operator|instanceof
name|DisjunctionMaxQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|clauses
index|[
literal|1
index|]
operator|.
name|getQuery
argument_list|()
operator|instanceof
name|TermQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text:baz"
argument_list|,
name|clauses
index|[
literal|1
index|]
operator|.
name|getQuery
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|clauses
index|[
literal|1
index|]
operator|.
name|isProhibited
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTie
specifier|public
name|void
name|testTie
parameter_list|()
block|{
name|q
operator|=
name|parse
argument_list|(
literal|"foo bar"
argument_list|,
literal|"tie"
argument_list|,
literal|"0.5"
argument_list|)
expr_stmt|;
name|clauses
operator|=
name|clauses
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|clauses
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|clauses
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
operator|instanceof
name|DisjunctionMaxQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.5
argument_list|,
operator|(
operator|(
name|DisjunctionMaxQuery
operator|)
name|clauses
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTieBreakerMultiplier
argument_list|()
argument_list|,
literal|1e-15
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBoost
specifier|public
name|void
name|testBoost
parameter_list|()
block|{
comment|// Simple term query
name|q
operator|=
name|parse
argument_list|(
literal|"foo^3.0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3.0
argument_list|,
name|q
operator|.
name|getBoost
argument_list|()
argument_list|,
literal|1e-15
argument_list|)
expr_stmt|;
comment|// Some DMQ and one plain required
name|q
operator|=
name|parse
argument_list|(
literal|"foo^5.0 bar^6.0 +baz^7"
argument_list|)
expr_stmt|;
name|clauses
operator|=
name|clauses
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|clauses
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|clauses
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
operator|instanceof
name|DisjunctionMaxQuery
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|dmq
init|=
operator|(
operator|(
name|DisjunctionMaxQuery
operator|)
name|clauses
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
operator|)
decl_stmt|;
name|float
name|fooClause
init|=
operator|(
operator|(
name|BooleanQuery
operator|)
name|dmq
operator|.
name|getDisjuncts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|clauses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getQuery
argument_list|()
operator|.
name|getBoost
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|5.0
argument_list|,
name|fooClause
argument_list|,
literal|1e-15
argument_list|)
expr_stmt|;
name|float
name|barClause
init|=
operator|(
operator|(
name|BooleanQuery
operator|)
name|dmq
operator|.
name|getDisjuncts
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|clauses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getQuery
argument_list|()
operator|.
name|getBoost
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|6.0
argument_list|,
name|barClause
argument_list|,
literal|1e-15
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7.0
argument_list|,
name|clauses
index|[
literal|1
index|]
operator|.
name|getQuery
argument_list|()
operator|.
name|getBoost
argument_list|()
argument_list|,
literal|1e-15
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|q
operator|.
name|getBoost
argument_list|()
argument_list|,
literal|1e-15
argument_list|)
expr_stmt|;
comment|// Grouped with parens on top level
name|q
operator|=
name|parse
argument_list|(
literal|"(foo^2.0 bar)^3.0"
argument_list|)
expr_stmt|;
name|clauses
operator|=
name|clauses
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|clauses
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|clauses
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
operator|instanceof
name|DisjunctionMaxQuery
argument_list|)
expr_stmt|;
name|dmq
operator|=
operator|(
operator|(
name|DisjunctionMaxQuery
operator|)
name|clauses
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
operator|)
expr_stmt|;
name|fooClause
operator|=
operator|(
operator|(
name|BooleanQuery
operator|)
name|dmq
operator|.
name|getDisjuncts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|clauses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getQuery
argument_list|()
operator|.
name|getBoost
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|fooClause
argument_list|,
literal|1e-15
argument_list|)
expr_stmt|;
name|barClause
operator|=
operator|(
operator|(
name|BooleanQuery
operator|)
name|dmq
operator|.
name|getDisjuncts
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|clauses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getQuery
argument_list|()
operator|.
name|getBoost
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|barClause
argument_list|,
literal|1e-15
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3.0
argument_list|,
name|q
operator|.
name|getBoost
argument_list|()
argument_list|,
literal|1e-15
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Helper methods
comment|//
DECL|method|parse
specifier|private
name|Query
name|parse
parameter_list|(
name|String
name|q
parameter_list|,
name|String
modifier|...
name|params
parameter_list|)
block|{
try|try
block|{
name|ModifiableSolrParams
name|p
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|al
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|params
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|al
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
block|{
name|p
operator|.
name|add
argument_list|(
name|al
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|,
name|al
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MaxScoreQParser
argument_list|(
name|q
argument_list|,
name|p
argument_list|,
operator|new
name|ModifiableSolrParams
argument_list|()
argument_list|,
name|req
argument_list|(
name|q
argument_list|)
argument_list|)
operator|.
name|parse
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SyntaxError
name|syntaxError
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Failed with exception "
operator|+
name|syntaxError
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"Parse failed"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
DECL|method|clauses
specifier|private
name|BooleanClause
index|[]
name|clauses
parameter_list|(
name|Query
name|q
parameter_list|)
block|{
return|return
operator|(
operator|(
name|BooleanQuery
operator|)
name|q
operator|)
operator|.
name|getClauses
argument_list|()
return|;
block|}
block|}
end_class
end_unit
