begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|TrieIntField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_class
DECL|class|TestTrieFacet
specifier|public
class|class
name|TestTrieFacet
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|MIN_VALUE
specifier|final
specifier|static
name|int
name|MIN_VALUE
init|=
literal|20
decl_stmt|;
DECL|field|MAX_VALUE
specifier|final
specifier|static
name|int
name|MAX_VALUE
init|=
literal|60
decl_stmt|;
DECL|field|TRIE_INT_P8_S_VALUED
specifier|final
specifier|static
name|String
name|TRIE_INT_P8_S_VALUED
init|=
literal|"foo_ti1"
decl_stmt|;
DECL|field|TRIE_INT_P8_M_VALUED
specifier|final
specifier|static
name|String
name|TRIE_INT_P8_M_VALUED
init|=
literal|"foo_ti"
decl_stmt|;
DECL|field|TRIE_INT_P0_S_VALUED
specifier|final
specifier|static
name|String
name|TRIE_INT_P0_S_VALUED
init|=
literal|"foo_i1"
decl_stmt|;
DECL|field|TRIE_INT_P0_M_VALUED
specifier|final
specifier|static
name|String
name|TRIE_INT_P0_M_VALUED
init|=
literal|"foo_i"
decl_stmt|;
DECL|field|M_VALUED
specifier|final
specifier|static
name|String
index|[]
name|M_VALUED
init|=
operator|new
name|String
index|[]
block|{
name|TRIE_INT_P0_M_VALUED
block|,
name|TRIE_INT_P8_M_VALUED
block|}
decl_stmt|;
DECL|field|S_VALUED
specifier|final
specifier|static
name|String
index|[]
name|S_VALUED
init|=
operator|new
name|String
index|[]
block|{
name|TRIE_INT_P0_S_VALUED
block|,
name|TRIE_INT_P8_S_VALUED
block|}
decl_stmt|;
DECL|field|P0
specifier|final
specifier|static
name|String
index|[]
name|P0
init|=
operator|new
name|String
index|[]
block|{
name|TRIE_INT_P0_M_VALUED
block|,
name|TRIE_INT_P0_S_VALUED
block|}
decl_stmt|;
DECL|field|P8
specifier|final
specifier|static
name|String
index|[]
name|P8
init|=
operator|new
name|String
index|[]
block|{
name|TRIE_INT_P8_M_VALUED
block|,
name|TRIE_INT_P8_S_VALUED
block|}
decl_stmt|;
DECL|field|NUM_DOCS
specifier|static
name|int
name|NUM_DOCS
decl_stmt|;
DECL|method|assertCastFieldType
specifier|private
specifier|static
name|TrieIntField
name|assertCastFieldType
parameter_list|(
name|SchemaField
name|f
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"who changed the schema? test isn't valid: "
operator|+
name|f
operator|.
name|getName
argument_list|()
argument_list|,
name|f
operator|.
name|getType
argument_list|()
operator|instanceof
name|TrieIntField
argument_list|)
expr_stmt|;
return|return
operator|(
name|TrieIntField
operator|)
name|f
operator|.
name|getType
argument_list|()
return|;
block|}
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-tlog.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
comment|// don't break the test
name|assertTrue
argument_list|(
literal|"min value must be less then max value"
argument_list|,
name|MIN_VALUE
operator|<
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"min value must be greater then zero"
argument_list|,
literal|0
operator|<
name|MIN_VALUE
argument_list|)
expr_stmt|;
comment|// sanity check no one breaks the schema out from under us...
for|for
control|(
name|String
name|f
range|:
name|M_VALUED
control|)
block|{
name|SchemaField
name|sf
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"who changed the schema? test isn't valid: "
operator|+
name|f
argument_list|,
name|sf
operator|.
name|multiValued
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|f
range|:
name|S_VALUED
control|)
block|{
name|SchemaField
name|sf
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"who changed the schema? test isn't valid: "
operator|+
name|f
argument_list|,
name|sf
operator|.
name|multiValued
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|f
range|:
name|P0
control|)
block|{
name|SchemaField
name|sf
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"who changed the schema? test isn't valid: "
operator|+
name|f
argument_list|,
literal|0
argument_list|,
name|assertCastFieldType
argument_list|(
name|sf
argument_list|)
operator|.
name|getPrecisionStep
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|f
range|:
name|P8
control|)
block|{
name|SchemaField
name|sf
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"who changed the schema? test isn't valid: "
operator|+
name|f
argument_list|,
literal|8
argument_list|,
name|assertCastFieldType
argument_list|(
name|sf
argument_list|)
operator|.
name|getPrecisionStep
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// we don't need a lot of docs -- at least one failure only had ~1000
name|NUM_DOCS
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|200
argument_list|,
literal|1500
argument_list|)
expr_stmt|;
block|{
comment|// ensure at least one doc has every valid value in the multivalued fields
name|SolrInputDocument
name|doc
init|=
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|val
init|=
name|MIN_VALUE
init|;
name|val
operator|<=
name|MAX_VALUE
condition|;
name|val
operator|++
control|)
block|{
for|for
control|(
name|String
name|f
range|:
name|M_VALUED
control|)
block|{
name|doc
operator|.
name|addField
argument_list|(
name|f
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// randomized docs (note: starting at i=1)
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|NUM_DOCS
condition|;
name|i
operator|++
control|)
block|{
name|SolrInputDocument
name|doc
init|=
name|sdoc
argument_list|(
literal|"id"
argument_list|,
name|i
operator|+
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|useField
argument_list|()
condition|)
block|{
name|int
name|val
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|MIN_VALUE
argument_list|,
name|MAX_VALUE
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|S_VALUED
control|)
block|{
name|doc
operator|.
name|addField
argument_list|(
name|f
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|useField
argument_list|()
condition|)
block|{
name|int
name|numMulti
init|=
name|atLeast
argument_list|(
literal|1
argument_list|)
decl_stmt|;
while|while
condition|(
literal|0
operator|<
name|numMulti
operator|--
condition|)
block|{
name|int
name|val
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|MIN_VALUE
argument_list|,
name|MAX_VALUE
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|M_VALUED
control|)
block|{
name|doc
operator|.
name|addField
argument_list|(
name|f
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**     * Similar to usually() but we want it to happen just as often regardless    * of test multiplier and nightly status    */
DECL|method|useField
specifier|private
specifier|static
name|boolean
name|useField
parameter_list|()
block|{
return|return
literal|0
operator|!=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
return|;
block|}
DECL|method|doTestNoZeros
specifier|private
specifier|static
name|void
name|doTestNoZeros
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
specifier|final
name|String
name|method
parameter_list|)
throws|throws
name|Exception
block|{
name|assertQ
argument_list|(
literal|"sanity check # docs in index: "
operator|+
name|NUM_DOCS
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|)
argument_list|,
literal|"//result[@numFound="
operator|+
name|NUM_DOCS
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"sanity check that no docs match 0 failed"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
name|field
operator|+
literal|":0"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|)
argument_list|,
literal|"//result[@numFound=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"sanity check that no docs match [0 TO 0] failed"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
name|field
operator|+
literal|":[0 TO 0]"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|)
argument_list|,
literal|"//result[@numFound=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"*:* facet with mincount 0 found unexpected 0 value"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|field
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"-1"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.method"
argument_list|,
name|method
argument_list|)
comment|// trivial sanity check we're at least getting facet counts in output
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/int)!=0]"
comment|// main point of test
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/int[@name='0'])=0]"
argument_list|)
expr_stmt|;
block|}
comment|// enum
DECL|method|testSingleValuedTrieP0_enum
specifier|public
name|void
name|testSingleValuedTrieP0_enum
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestNoZeros
argument_list|(
name|TRIE_INT_P0_S_VALUED
argument_list|,
literal|"enum"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiValuedTrieP0_enum
specifier|public
name|void
name|testMultiValuedTrieP0_enum
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestNoZeros
argument_list|(
name|TRIE_INT_P0_M_VALUED
argument_list|,
literal|"enum"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleValuedTrieP8_enum
specifier|public
name|void
name|testSingleValuedTrieP8_enum
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestNoZeros
argument_list|(
name|TRIE_INT_P8_S_VALUED
argument_list|,
literal|"enum"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiValuedTrieP8_enum
specifier|public
name|void
name|testMultiValuedTrieP8_enum
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestNoZeros
argument_list|(
name|TRIE_INT_P8_M_VALUED
argument_list|,
literal|"enum"
argument_list|)
expr_stmt|;
block|}
comment|// fc
DECL|method|testSingleValuedTrieP0_fc
specifier|public
name|void
name|testSingleValuedTrieP0_fc
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestNoZeros
argument_list|(
name|TRIE_INT_P0_S_VALUED
argument_list|,
literal|"fc"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiValuedTrieP0_fc
specifier|public
name|void
name|testMultiValuedTrieP0_fc
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestNoZeros
argument_list|(
name|TRIE_INT_P0_M_VALUED
argument_list|,
literal|"fc"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleValuedTrieP8_fc
specifier|public
name|void
name|testSingleValuedTrieP8_fc
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestNoZeros
argument_list|(
name|TRIE_INT_P8_S_VALUED
argument_list|,
literal|"fc"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiValuedTrieP8_fc
specifier|public
name|void
name|testMultiValuedTrieP8_fc
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestNoZeros
argument_list|(
name|TRIE_INT_P8_M_VALUED
argument_list|,
literal|"fc"
argument_list|)
expr_stmt|;
block|}
comment|// fcs
DECL|method|testSingleValuedTrieP0_fcs
specifier|public
name|void
name|testSingleValuedTrieP0_fcs
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestNoZeros
argument_list|(
name|TRIE_INT_P0_S_VALUED
argument_list|,
literal|"fcs"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiValuedTrieP0_fcs
specifier|public
name|void
name|testMultiValuedTrieP0_fcs
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestNoZeros
argument_list|(
name|TRIE_INT_P0_M_VALUED
argument_list|,
literal|"fcs"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleValuedTrieP8_fcs
specifier|public
name|void
name|testSingleValuedTrieP8_fcs
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestNoZeros
argument_list|(
name|TRIE_INT_P8_S_VALUED
argument_list|,
literal|"fcs"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiValuedTrieP8_fcs
specifier|public
name|void
name|testMultiValuedTrieP8_fcs
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestNoZeros
argument_list|(
name|TRIE_INT_P8_M_VALUED
argument_list|,
literal|"fcs"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
