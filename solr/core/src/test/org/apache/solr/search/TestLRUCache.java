begin_unit
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Parser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_comment
comment|/**  * Test for<code>org.apache.solr.search.LRUCache</code>  */
end_comment
begin_class
DECL|class|TestLRUCache
specifier|public
class|class
name|TestLRUCache
extends|extends
name|LuceneTestCase
block|{
DECL|method|testFullAutowarm
specifier|public
name|void
name|testFullAutowarm
parameter_list|()
throws|throws
name|IOException
block|{
name|LRUCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|lruCache
init|=
operator|new
name|LRUCache
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"size"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"initialSize"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"autowarmCount"
argument_list|,
literal|"100%"
argument_list|)
expr_stmt|;
name|CacheRegenerator
name|cr
init|=
operator|new
name|NoOpRegenerator
argument_list|()
decl_stmt|;
name|Object
name|o
init|=
name|lruCache
operator|.
name|init
argument_list|(
name|params
argument_list|,
literal|null
argument_list|,
name|cr
argument_list|)
decl_stmt|;
name|lruCache
operator|.
name|setState
argument_list|(
name|SolrCache
operator|.
name|State
operator|.
name|LIVE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|101
condition|;
name|i
operator|++
control|)
block|{
name|lruCache
operator|.
name|put
argument_list|(
name|i
operator|+
literal|1
argument_list|,
literal|""
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"25"
argument_list|,
name|lruCache
operator|.
name|get
argument_list|(
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|lruCache
operator|.
name|get
argument_list|(
literal|110
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|lruCache
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// first item put in should be the first out
name|LRUCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|lruCacheNew
init|=
operator|new
name|LRUCache
argument_list|<>
argument_list|()
decl_stmt|;
name|lruCacheNew
operator|.
name|init
argument_list|(
name|params
argument_list|,
name|o
argument_list|,
name|cr
argument_list|)
expr_stmt|;
name|lruCacheNew
operator|.
name|warm
argument_list|(
literal|null
argument_list|,
name|lruCache
argument_list|)
expr_stmt|;
name|lruCacheNew
operator|.
name|setState
argument_list|(
name|SolrCache
operator|.
name|State
operator|.
name|LIVE
argument_list|)
expr_stmt|;
name|lruCache
operator|.
name|close
argument_list|()
expr_stmt|;
name|lruCacheNew
operator|.
name|put
argument_list|(
literal|103
argument_list|,
literal|"103"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"90"
argument_list|,
name|lruCacheNew
operator|.
name|get
argument_list|(
literal|90
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"50"
argument_list|,
name|lruCacheNew
operator|.
name|get
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|lruCacheNew
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testPercentageAutowarm
specifier|public
name|void
name|testPercentageAutowarm
parameter_list|()
throws|throws
name|IOException
block|{
name|doTestPercentageAutowarm
argument_list|(
literal|100
argument_list|,
literal|50
argument_list|,
operator|new
name|int
index|[]
block|{
literal|51
block|,
literal|55
block|,
literal|60
block|,
literal|70
block|,
literal|80
block|,
literal|99
block|,
literal|100
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|5
block|,
literal|10
block|,
literal|20
block|,
literal|30
block|,
literal|40
block|,
literal|50
block|}
argument_list|)
expr_stmt|;
name|doTestPercentageAutowarm
argument_list|(
literal|100
argument_list|,
literal|25
argument_list|,
operator|new
name|int
index|[]
block|{
literal|76
block|,
literal|80
block|,
literal|99
block|,
literal|100
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|5
block|,
literal|10
block|,
literal|20
block|,
literal|30
block|,
literal|40
block|,
literal|50
block|,
literal|51
block|,
literal|55
block|,
literal|60
block|,
literal|70
block|}
argument_list|)
expr_stmt|;
name|doTestPercentageAutowarm
argument_list|(
literal|1000
argument_list|,
literal|10
argument_list|,
operator|new
name|int
index|[]
block|{
literal|901
block|,
literal|930
block|,
literal|950
block|,
literal|999
block|,
literal|1000
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|5
block|,
literal|100
block|,
literal|200
block|,
literal|300
block|,
literal|400
block|,
literal|800
block|,
literal|899
block|,
literal|900
block|}
argument_list|)
expr_stmt|;
name|doTestPercentageAutowarm
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
operator|new
name|int
index|[]
block|{
literal|10
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|5
block|,
literal|9
block|,
literal|100
block|,
literal|200
block|,
literal|300
block|,
literal|400
block|,
literal|800
block|,
literal|899
block|,
literal|900
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestPercentageAutowarm
specifier|private
name|void
name|doTestPercentageAutowarm
parameter_list|(
name|int
name|limit
parameter_list|,
name|int
name|percentage
parameter_list|,
name|int
index|[]
name|hits
parameter_list|,
name|int
index|[]
name|misses
parameter_list|)
block|{
name|LRUCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|lruCache
init|=
operator|new
name|LRUCache
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"size"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|limit
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"initialSize"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"autowarmCount"
argument_list|,
name|percentage
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|CacheRegenerator
name|cr
init|=
operator|new
name|NoOpRegenerator
argument_list|()
decl_stmt|;
name|Object
name|o
init|=
name|lruCache
operator|.
name|init
argument_list|(
name|params
argument_list|,
literal|null
argument_list|,
name|cr
argument_list|)
decl_stmt|;
name|lruCache
operator|.
name|setState
argument_list|(
name|SolrCache
operator|.
name|State
operator|.
name|LIVE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|limit
condition|;
name|i
operator|++
control|)
block|{
name|lruCache
operator|.
name|put
argument_list|(
name|i
argument_list|,
literal|""
operator|+
name|i
argument_list|)
expr_stmt|;
comment|//adds numbers from 1 to 100
block|}
name|LRUCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|lruCacheNew
init|=
operator|new
name|LRUCache
argument_list|<>
argument_list|()
decl_stmt|;
name|lruCacheNew
operator|.
name|init
argument_list|(
name|params
argument_list|,
name|o
argument_list|,
name|cr
argument_list|)
expr_stmt|;
name|lruCacheNew
operator|.
name|warm
argument_list|(
literal|null
argument_list|,
name|lruCache
argument_list|)
expr_stmt|;
name|lruCacheNew
operator|.
name|setState
argument_list|(
name|SolrCache
operator|.
name|State
operator|.
name|LIVE
argument_list|)
expr_stmt|;
name|lruCache
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|hit
range|:
name|hits
control|)
block|{
name|assertEquals
argument_list|(
literal|"The value "
operator|+
name|hit
operator|+
literal|" should be on new cache"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|hit
argument_list|)
argument_list|,
name|lruCacheNew
operator|.
name|get
argument_list|(
name|hit
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|miss
range|:
name|misses
control|)
block|{
name|assertEquals
argument_list|(
literal|"The value "
operator|+
name|miss
operator|+
literal|" should NOT be on new cache"
argument_list|,
literal|null
argument_list|,
name|lruCacheNew
operator|.
name|get
argument_list|(
name|miss
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lruCacheNew
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testNoAutowarm
specifier|public
name|void
name|testNoAutowarm
parameter_list|()
throws|throws
name|IOException
block|{
name|LRUCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|lruCache
init|=
operator|new
name|LRUCache
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"size"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"initialSize"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|CacheRegenerator
name|cr
init|=
operator|new
name|NoOpRegenerator
argument_list|()
decl_stmt|;
name|Object
name|o
init|=
name|lruCache
operator|.
name|init
argument_list|(
name|params
argument_list|,
literal|null
argument_list|,
name|cr
argument_list|)
decl_stmt|;
name|lruCache
operator|.
name|setState
argument_list|(
name|SolrCache
operator|.
name|State
operator|.
name|LIVE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|101
condition|;
name|i
operator|++
control|)
block|{
name|lruCache
operator|.
name|put
argument_list|(
name|i
operator|+
literal|1
argument_list|,
literal|""
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"25"
argument_list|,
name|lruCache
operator|.
name|get
argument_list|(
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|lruCache
operator|.
name|get
argument_list|(
literal|110
argument_list|)
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Serializable
argument_list|>
name|nl
init|=
name|lruCache
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|nl
operator|.
name|get
argument_list|(
literal|"lookups"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|nl
operator|.
name|get
argument_list|(
literal|"hits"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|101L
argument_list|,
name|nl
operator|.
name|get
argument_list|(
literal|"inserts"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|lruCache
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// first item put in should be the first out
name|LRUCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|lruCacheNew
init|=
operator|new
name|LRUCache
argument_list|<>
argument_list|()
decl_stmt|;
name|lruCacheNew
operator|.
name|init
argument_list|(
name|params
argument_list|,
name|o
argument_list|,
name|cr
argument_list|)
expr_stmt|;
name|lruCacheNew
operator|.
name|warm
argument_list|(
literal|null
argument_list|,
name|lruCache
argument_list|)
expr_stmt|;
name|lruCacheNew
operator|.
name|setState
argument_list|(
name|SolrCache
operator|.
name|State
operator|.
name|LIVE
argument_list|)
expr_stmt|;
name|lruCache
operator|.
name|close
argument_list|()
expr_stmt|;
name|lruCacheNew
operator|.
name|put
argument_list|(
literal|103
argument_list|,
literal|"103"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|lruCacheNew
operator|.
name|get
argument_list|(
literal|90
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|lruCacheNew
operator|.
name|get
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|lruCacheNew
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testMaxRamSize
specifier|public
name|void
name|testMaxRamSize
parameter_list|()
throws|throws
name|Exception
block|{
name|LRUCache
argument_list|<
name|String
argument_list|,
name|Accountable
argument_list|>
name|accountableLRUCache
init|=
operator|new
name|LRUCache
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"size"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"maxRamMB"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|CacheRegenerator
name|cr
init|=
operator|new
name|NoOpRegenerator
argument_list|()
decl_stmt|;
name|Object
name|o
init|=
name|accountableLRUCache
operator|.
name|init
argument_list|(
name|params
argument_list|,
literal|null
argument_list|,
name|cr
argument_list|)
decl_stmt|;
name|long
name|baseSize
init|=
name|accountableLRUCache
operator|.
name|ramBytesUsed
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|LRUCache
operator|.
name|BASE_RAM_BYTES_USED
argument_list|,
name|baseSize
argument_list|)
expr_stmt|;
name|accountableLRUCache
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
operator|new
name|Accountable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
literal|512
operator|*
literal|1024
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|accountableLRUCache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|baseSize
operator|+
literal|512
operator|*
literal|1024
operator|+
name|LRUCache
operator|.
name|DEFAULT_RAM_BYTES_USED
operator|+
name|LRUCache
operator|.
name|LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY
argument_list|,
name|accountableLRUCache
operator|.
name|ramBytesUsed
argument_list|()
argument_list|)
expr_stmt|;
name|accountableLRUCache
operator|.
name|put
argument_list|(
literal|"2"
argument_list|,
operator|new
name|Accountable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
literal|512
operator|*
literal|1024
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|accountableLRUCache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|baseSize
operator|+
literal|512
operator|*
literal|1024
operator|+
name|LRUCache
operator|.
name|LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY
operator|+
name|LRUCache
operator|.
name|DEFAULT_RAM_BYTES_USED
argument_list|,
name|accountableLRUCache
operator|.
name|ramBytesUsed
argument_list|()
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Serializable
argument_list|>
name|nl
init|=
name|accountableLRUCache
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|nl
operator|.
name|get
argument_list|(
literal|"evictions"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|nl
operator|.
name|get
argument_list|(
literal|"evictionsRamUsage"
argument_list|)
argument_list|)
expr_stmt|;
name|accountableLRUCache
operator|.
name|put
argument_list|(
literal|"3"
argument_list|,
operator|new
name|Accountable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
literal|1024
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|nl
operator|=
name|accountableLRUCache
operator|.
name|getStatistics
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|nl
operator|.
name|get
argument_list|(
literal|"evictions"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|nl
operator|.
name|get
argument_list|(
literal|"evictionsRamUsage"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|accountableLRUCache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|baseSize
operator|+
literal|513
operator|*
literal|1024
operator|+
name|LRUCache
operator|.
name|LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY
operator|*
literal|2
operator|+
name|LRUCache
operator|.
name|DEFAULT_RAM_BYTES_USED
operator|*
literal|2
argument_list|,
name|accountableLRUCache
operator|.
name|ramBytesUsed
argument_list|()
argument_list|)
expr_stmt|;
name|accountableLRUCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|RamUsageEstimator
operator|.
name|shallowSizeOfInstance
argument_list|(
name|LRUCache
operator|.
name|class
argument_list|)
argument_list|,
name|accountableLRUCache
operator|.
name|ramBytesUsed
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNonAccountableValues
specifier|public
name|void
name|testNonAccountableValues
parameter_list|()
throws|throws
name|Exception
block|{
name|LRUCache
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cache
init|=
operator|new
name|LRUCache
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"size"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"maxRamMB"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|CacheRegenerator
name|cr
init|=
operator|new
name|NoOpRegenerator
argument_list|()
decl_stmt|;
name|Object
name|o
init|=
name|cache
operator|.
name|init
argument_list|(
name|params
argument_list|,
literal|null
argument_list|,
name|cr
argument_list|)
decl_stmt|;
try|try
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Adding a non-accountable value to a cache configured with maxRamBytes should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
argument_list|,
name|SolrException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
