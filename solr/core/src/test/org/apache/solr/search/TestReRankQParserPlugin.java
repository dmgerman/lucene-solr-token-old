begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|IntOpenHashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_class
DECL|class|TestReRankQParserPlugin
specifier|public
class|class
name|TestReRankQParserPlugin
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-collapseqparser.xml"
argument_list|,
literal|"schema11.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// if you override setUp or tearDown, you better call
comment|// the super classes version
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReRankQueries
specifier|public
name|void
name|testReRankQueries
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|delQ
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc
init|=
block|{
literal|"id"
block|,
literal|"1"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
literal|"group_s"
block|,
literal|"group1"
block|,
literal|"test_ti"
block|,
literal|"5"
block|,
literal|"test_tl"
block|,
literal|"10"
block|,
literal|"test_tf"
block|,
literal|"2000"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc1
init|=
block|{
literal|"id"
block|,
literal|"2"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
literal|"group_s"
block|,
literal|"group1"
block|,
literal|"test_ti"
block|,
literal|"50"
block|,
literal|"test_tl"
block|,
literal|"100"
block|,
literal|"test_tf"
block|,
literal|"200"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc1
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc2
init|=
block|{
literal|"id"
block|,
literal|"3"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
literal|"test_ti"
block|,
literal|"5000"
block|,
literal|"test_tl"
block|,
literal|"100"
block|,
literal|"test_tf"
block|,
literal|"200"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc2
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc3
init|=
block|{
literal|"id"
block|,
literal|"4"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
literal|"test_ti"
block|,
literal|"500"
block|,
literal|"test_tl"
block|,
literal|"1000"
block|,
literal|"test_tf"
block|,
literal|"2000"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc3
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc4
init|=
block|{
literal|"id"
block|,
literal|"5"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
literal|"group_s"
block|,
literal|"group2"
block|,
literal|"test_ti"
block|,
literal|"4"
block|,
literal|"test_tl"
block|,
literal|"10"
block|,
literal|"test_tf"
block|,
literal|"2000"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc4
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc5
init|=
block|{
literal|"id"
block|,
literal|"6"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
literal|"group_s"
block|,
literal|"group2"
block|,
literal|"test_ti"
block|,
literal|"10"
block|,
literal|"test_tl"
block|,
literal|"100"
block|,
literal|"test_tf"
block|,
literal|"200"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc5
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!rerank reRankQuery=$rqq reRankDocs=200}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"term_s:YYYY"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rqq"
argument_list|,
literal|"{!edismax bf=$bff}*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bff"
argument_list|,
literal|"field(test_ti)"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=6]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='3.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='4.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='2.0']"
argument_list|,
literal|"//result/doc[4]/float[@name='id'][.='6.0']"
argument_list|,
literal|"//result/doc[5]/float[@name='id'][.='1.0']"
argument_list|,
literal|"//result/doc[6]/float[@name='id'][.='5.0']"
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!rerank reRankQuery=$rqq reRankDocs=6}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"{!edismax bq=$bqq1}*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bqq1"
argument_list|,
literal|"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rqq"
argument_list|,
literal|"{!edismax bq=$bqq2}*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bqq2"
argument_list|,
literal|"test_ti:50^1000"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=6]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='2.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='6.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[4]/float[@name='id'][.='4.0']"
argument_list|,
literal|"//result/doc[5]/float[@name='id'][.='3.0']"
argument_list|,
literal|"//result/doc[6]/float[@name='id'][.='1.0']"
argument_list|)
expr_stmt|;
comment|//Test with sort by score.
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!rerank reRankQuery=$rqq reRankDocs=6}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"{!edismax bq=$bqq1}*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bqq1"
argument_list|,
literal|"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rqq"
argument_list|,
literal|"{!edismax bq=$bqq2}*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bqq2"
argument_list|,
literal|"test_ti:50^1000"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"score desc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=6]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='2.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='6.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[4]/float[@name='id'][.='4.0']"
argument_list|,
literal|"//result/doc[5]/float[@name='id'][.='3.0']"
argument_list|,
literal|"//result/doc[6]/float[@name='id'][.='1.0']"
argument_list|)
expr_stmt|;
comment|//Test with compound sort.
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!rerank reRankQuery=$rqq reRankDocs=6}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"{!edismax bq=$bqq1}*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bqq1"
argument_list|,
literal|"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rqq"
argument_list|,
literal|"{!edismax bq=$bqq2}*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bqq2"
argument_list|,
literal|"test_ti:50^1000"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"score desc,test_ti asc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=6]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='2.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='6.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[4]/float[@name='id'][.='4.0']"
argument_list|,
literal|"//result/doc[5]/float[@name='id'][.='3.0']"
argument_list|,
literal|"//result/doc[6]/float[@name='id'][.='1.0']"
argument_list|)
expr_stmt|;
comment|//Test with elevation
name|params
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=50}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"{!edismax bq=$bqq1}*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bqq1"
argument_list|,
literal|"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rqq"
argument_list|,
literal|"{!edismax bq=$bqq2}*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bqq2"
argument_list|,
literal|"test_ti:50^1000"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"qt"
argument_list|,
literal|"/elevate"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"elevateIds"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=6]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='1.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='2.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='6.0']"
argument_list|,
literal|"//result/doc[4]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[5]/float[@name='id'][.='4.0']"
argument_list|,
literal|"//result/doc[6]/float[@name='id'][.='3.0']"
argument_list|)
expr_stmt|;
comment|//Test TermQuery rqq
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"{!edismax bq=$bqq1}*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bqq1"
argument_list|,
literal|"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rqq"
argument_list|,
literal|"test_ti:50^1000"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=6]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='2.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='6.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[4]/float[@name='id'][.='4.0']"
argument_list|,
literal|"//result/doc[5]/float[@name='id'][.='3.0']"
argument_list|,
literal|"//result/doc[6]/float[@name='id'][.='1.0']"
argument_list|)
expr_stmt|;
comment|//Test Elevation
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"{!edismax bq=$bqq1}*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bqq1"
argument_list|,
literal|"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rqq"
argument_list|,
literal|"test_ti:50^1000"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"qt"
argument_list|,
literal|"/elevate"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"elevateIds"
argument_list|,
literal|"1,4"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=6]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='1.0']"
argument_list|,
comment|//Elevated
literal|"//result/doc[2]/float[@name='id'][.='4.0']"
argument_list|,
comment|//Elevated
literal|"//result/doc[3]/float[@name='id'][.='2.0']"
argument_list|,
comment|//Boosted during rerank.
literal|"//result/doc[4]/float[@name='id'][.='6.0']"
argument_list|,
literal|"//result/doc[5]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[6]/float[@name='id'][.='3.0']"
argument_list|)
expr_stmt|;
comment|//Test Elevation swapped
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"{!edismax bq=$bqq1}*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bqq1"
argument_list|,
literal|"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rqq"
argument_list|,
literal|"test_ti:50^1000"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"qt"
argument_list|,
literal|"/elevate"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"elevateIds"
argument_list|,
literal|"4,1"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=6]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='4.0']"
argument_list|,
comment|//Elevated
literal|"//result/doc[2]/float[@name='id'][.='1.0']"
argument_list|,
comment|//Elevated
literal|"//result/doc[3]/float[@name='id'][.='2.0']"
argument_list|,
comment|//Boosted during rerank.
literal|"//result/doc[4]/float[@name='id'][.='6.0']"
argument_list|,
literal|"//result/doc[5]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[6]/float[@name='id'][.='3.0']"
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!rerank reRankQuery=$rqq reRankDocs=4 reRankWeight=2}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"{!edismax bq=$bqq1}*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bqq1"
argument_list|,
literal|"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rqq"
argument_list|,
literal|"test_ti:50^1000"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"qt"
argument_list|,
literal|"/elevate"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"elevateIds"
argument_list|,
literal|"4,1"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=6]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='4.0']"
argument_list|,
comment|//Elevated
literal|"//result/doc[2]/float[@name='id'][.='1.0']"
argument_list|,
comment|//Elevated
literal|"//result/doc[3]/float[@name='id'][.='6.0']"
argument_list|,
literal|"//result/doc[4]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[5]/float[@name='id'][.='3.0']"
argument_list|,
literal|"//result/doc[6]/float[@name='id'][.='2.0']"
comment|//Not in reRankeDocs
argument_list|)
expr_stmt|;
comment|//Test Elevation with start beyond the rerank docs
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"{!edismax bq=$bqq1}*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bqq1"
argument_list|,
literal|"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rqq"
argument_list|,
literal|"test_ti:50^1000"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"qt"
argument_list|,
literal|"/elevate"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"elevateIds"
argument_list|,
literal|"4,1"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='3.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='2.0']"
comment|//Was not in reRankDocs
argument_list|)
expr_stmt|;
comment|//Test Elevation with zero results
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"{!edismax bq=$bqq1}nada"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bqq1"
argument_list|,
literal|"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rqq"
argument_list|,
literal|"test_ti:50^1000"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"qt"
argument_list|,
literal|"/elevate"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"elevateIds"
argument_list|,
literal|"4,1"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=0]"
argument_list|)
expr_stmt|;
comment|//Pass in reRankDocs lower then the length being collected.
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!rerank reRankQuery=$rqq reRankDocs=1 reRankWeight=2}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"{!edismax bq=$bqq1}*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bqq1"
argument_list|,
literal|"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rqq"
argument_list|,
literal|"test_ti:50^1000"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=6]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='6.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='4.0']"
argument_list|,
literal|"//result/doc[4]/float[@name='id'][.='3.0']"
argument_list|,
literal|"//result/doc[5]/float[@name='id'][.='2.0']"
argument_list|,
literal|"//result/doc[6]/float[@name='id'][.='1.0']"
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!rerank reRankQuery=$rqq reRankDocs=0 reRankWeight=2}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"{!edismax bq=$bqq1}*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bqq1"
argument_list|,
literal|"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rqq"
argument_list|,
literal|"test_ti:50^1000"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=6]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='6.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='4.0']"
argument_list|,
literal|"//result/doc[4]/float[@name='id'][.='3.0']"
argument_list|,
literal|"//result/doc[5]/float[@name='id'][.='2.0']"
argument_list|,
literal|"//result/doc[6]/float[@name='id'][.='1.0']"
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!rerank reRankQuery=$rqq reRankDocs=2 reRankWeight=2}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"{!edismax bq=$bqq1}*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bqq1"
argument_list|,
literal|"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rqq"
argument_list|,
literal|"test_ti:4^1000"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=6]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='6.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='4.0']"
argument_list|,
literal|"//result/doc[4]/float[@name='id'][.='3.0']"
argument_list|,
literal|"//result/doc[5]/float[@name='id'][.='2.0']"
argument_list|,
literal|"//result/doc[6]/float[@name='id'][.='1.0']"
argument_list|)
expr_stmt|;
comment|//Test reRankWeight of 0, reranking will have no effect.
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=0}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"{!edismax bq=$bqq1}*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bqq1"
argument_list|,
literal|"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rqq"
argument_list|,
literal|"test_ti:50^1000"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=5]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='6.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='4.0']"
argument_list|,
literal|"//result/doc[4]/float[@name='id'][.='3.0']"
argument_list|,
literal|"//result/doc[5]/float[@name='id'][.='2.0']"
argument_list|)
expr_stmt|;
comment|//Test range query
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!rerank reRankQuery=$rqq reRankDocs=6}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"test_ti:[0 TO 2000]"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rqq"
argument_list|,
literal|"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=5]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='6.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='4.0']"
argument_list|,
literal|"//result/doc[4]/float[@name='id'][.='2.0']"
argument_list|,
literal|"//result/doc[5]/float[@name='id'][.='1.0']"
argument_list|)
expr_stmt|;
comment|//Test range query embedded in larger query
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!rerank reRankQuery=$rqq reRankDocs=6}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:* OR test_ti:[0 TO 2000]"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rqq"
argument_list|,
literal|"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=6]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='6.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='4.0']"
argument_list|,
literal|"//result/doc[4]/float[@name='id'][.='2.0']"
argument_list|,
literal|"//result/doc[5]/float[@name='id'][.='1.0']"
argument_list|,
literal|"//result/doc[6]/float[@name='id'][.='3.0']"
argument_list|)
expr_stmt|;
comment|//Test with start beyond reRankDocs
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rqq"
argument_list|,
literal|"id:1^1000"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='2.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='1.0']"
argument_list|)
expr_stmt|;
comment|//Test ReRankDocs> docs returned
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!rerank reRankQuery=$rqq reRankDocs=6 reRankWeight=2}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rqq"
argument_list|,
literal|"id:1^1000"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=1]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='1.0']"
argument_list|)
expr_stmt|;
comment|//Test with zero results
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!rerank reRankQuery=$rqq reRankDocs=3 reRankWeight=2}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"term_s:NNNN"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rqq"
argument_list|,
literal|"id:1^1000"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=0]"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOverRank
specifier|public
name|void
name|testOverRank
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|delQ
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|//Test the scenario that where we rank more documents then we return.
name|String
index|[]
name|doc
init|=
block|{
literal|"id"
block|,
literal|"1"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
literal|"group_s"
block|,
literal|"group1"
block|,
literal|"test_ti"
block|,
literal|"5"
block|,
literal|"test_tl"
block|,
literal|"10"
block|,
literal|"test_tf"
block|,
literal|"2000"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc1
init|=
block|{
literal|"id"
block|,
literal|"2"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
literal|"group_s"
block|,
literal|"group1"
block|,
literal|"test_ti"
block|,
literal|"50"
block|,
literal|"test_tl"
block|,
literal|"100"
block|,
literal|"test_tf"
block|,
literal|"200"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc1
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc2
init|=
block|{
literal|"id"
block|,
literal|"3"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
literal|"test_ti"
block|,
literal|"5000"
block|,
literal|"test_tl"
block|,
literal|"100"
block|,
literal|"test_tf"
block|,
literal|"200"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc2
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc3
init|=
block|{
literal|"id"
block|,
literal|"4"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
literal|"test_ti"
block|,
literal|"500"
block|,
literal|"test_tl"
block|,
literal|"1000"
block|,
literal|"test_tf"
block|,
literal|"2000"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc3
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc4
init|=
block|{
literal|"id"
block|,
literal|"5"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
literal|"group_s"
block|,
literal|"group2"
block|,
literal|"test_ti"
block|,
literal|"4"
block|,
literal|"test_tl"
block|,
literal|"10"
block|,
literal|"test_tf"
block|,
literal|"2000"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc4
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc5
init|=
block|{
literal|"id"
block|,
literal|"6"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
literal|"group_s"
block|,
literal|"group2"
block|,
literal|"test_ti"
block|,
literal|"10"
block|,
literal|"test_tl"
block|,
literal|"100"
block|,
literal|"test_tf"
block|,
literal|"200"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc5
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc6
init|=
block|{
literal|"id"
block|,
literal|"7"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
literal|"group_s"
block|,
literal|"group1"
block|,
literal|"test_ti"
block|,
literal|"5"
block|,
literal|"test_tl"
block|,
literal|"10"
block|,
literal|"test_tf"
block|,
literal|"2000"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc6
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc7
init|=
block|{
literal|"id"
block|,
literal|"8"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
literal|"group_s"
block|,
literal|"group1"
block|,
literal|"test_ti"
block|,
literal|"50"
block|,
literal|"test_tl"
block|,
literal|"100"
block|,
literal|"test_tf"
block|,
literal|"200"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc7
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc8
init|=
block|{
literal|"id"
block|,
literal|"9"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
literal|"test_ti"
block|,
literal|"5000"
block|,
literal|"test_tl"
block|,
literal|"100"
block|,
literal|"test_tf"
block|,
literal|"200"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc8
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc9
init|=
block|{
literal|"id"
block|,
literal|"10"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
literal|"test_ti"
block|,
literal|"500"
block|,
literal|"test_tl"
block|,
literal|"1000"
block|,
literal|"test_tf"
block|,
literal|"2000"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc9
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc10
init|=
block|{
literal|"id"
block|,
literal|"11"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
literal|"group_s"
block|,
literal|"group2"
block|,
literal|"test_ti"
block|,
literal|"4"
block|,
literal|"test_tl"
block|,
literal|"10"
block|,
literal|"test_tf"
block|,
literal|"2000"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc10
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!rerank reRankQuery=$rqq reRankDocs=11 reRankWeight=2}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"{!edismax bq=$bqq1}*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bqq1"
argument_list|,
literal|"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rqq"
argument_list|,
literal|"test_ti:50^1000"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='8.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='2.0']"
argument_list|)
expr_stmt|;
comment|//Test Elevation
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!rerank reRankQuery=$rqq reRankDocs=11 reRankWeight=2}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"{!edismax bq=$bqq1}*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bqq1"
argument_list|,
literal|"id:1^10 id:2^20 id:3^30 id:4^40 id:5^50 id:6^60 id:7^70 id:8^80 id:9^90 id:10^100 id:11^110"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rqq"
argument_list|,
literal|"test_ti:50^1000"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"qt"
argument_list|,
literal|"/elevate"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"elevateIds"
argument_list|,
literal|"1,4"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=3]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='1.0']"
argument_list|,
comment|//Elevated
literal|"//result/doc[2]/float[@name='id'][.='4.0']"
argument_list|,
comment|//Elevated
literal|"//result/doc[3]/float[@name='id'][.='8.0']"
argument_list|)
expr_stmt|;
comment|//Boosted during rerank.
block|}
block|}
end_class
end_unit
