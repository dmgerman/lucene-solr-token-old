begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search.function
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|function
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInvertState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|ClassicSimilarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|TFIDFSimilarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/**  * Tests some basic functionality of Solr while demonstrating good  * Best Practices for using AbstractSolrTestCase  */
end_comment
begin_class
DECL|class|TestFunctionQuery
specifier|public
class|class
name|TestFunctionQuery
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-functionquery.xml"
argument_list|,
literal|"schema11.xml"
argument_list|)
expr_stmt|;
block|}
DECL|field|base
name|String
name|base
init|=
literal|"external_foo_extf"
decl_stmt|;
DECL|field|start
specifier|static
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
DECL|method|makeExternalFile
name|void
name|makeExternalFile
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|contents
parameter_list|)
block|{
name|String
name|dir
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getDataDir
argument_list|()
decl_stmt|;
name|String
name|filename
init|=
name|dir
operator|+
literal|"/external_"
operator|+
name|field
operator|+
literal|"."
operator|+
operator|(
name|start
operator|++
operator|)
decl_stmt|;
try|try
block|{
name|Writer
name|out
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|filename
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|contents
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createIndex
name|void
name|createIndex
parameter_list|(
name|String
name|field
parameter_list|,
name|float
modifier|...
name|values
parameter_list|)
block|{
comment|// lrf.args.put("version","2.0");
for|for
control|(
name|float
name|val
range|:
name|values
control|)
block|{
name|String
name|s
init|=
name|Float
operator|.
name|toString
argument_list|(
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|s
argument_list|,
name|field
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|20
condition|)
block|{
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|s
argument_list|,
name|field
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|20
condition|)
block|{
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// System.out.println("added doc for " + val);
block|}
comment|// assertU(optimize()); // squeeze out any possible deleted docs
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// replace \0 with the field name and create a parseable string
DECL|method|func
specifier|public
name|String
name|func
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|template
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"{!func}"
argument_list|)
decl_stmt|;
for|for
control|(
name|char
name|ch
range|:
name|template
operator|.
name|toCharArray
argument_list|()
control|)
block|{
if|if
condition|(
name|ch
operator|==
literal|'\0'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|field
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|sb
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|singleTest
name|void
name|singleTest
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|funcTemplate
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|,
name|float
modifier|...
name|results
parameter_list|)
block|{
name|String
name|parseableQuery
init|=
name|func
argument_list|(
name|field
argument_list|,
name|funcTemplate
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nargs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"q"
argument_list|,
name|parseableQuery
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"indent"
argument_list|,
literal|"on"
argument_list|,
literal|"rows"
argument_list|,
literal|"100"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|arg
range|:
name|args
control|)
block|{
name|nargs
operator|.
name|add
argument_list|(
name|arg
operator|.
name|replace
argument_list|(
literal|"\0"
argument_list|,
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|tests
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Construct xpaths like the following:
comment|// "//doc[./float[@name='foo_f']='10.0' and ./float[@name='score']='10.0']"
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|String
name|xpath
init|=
literal|"//doc[./float[@name='"
operator|+
literal|"id"
operator|+
literal|"']='"
operator|+
name|results
index|[
name|i
index|]
operator|+
literal|"' and ./float[@name='score']='"
operator|+
name|results
index|[
name|i
operator|+
literal|1
index|]
operator|+
literal|"']"
decl_stmt|;
name|tests
operator|.
name|add
argument_list|(
name|xpath
argument_list|)
expr_stmt|;
block|}
name|assertQ
argument_list|(
name|req
argument_list|(
name|nargs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
argument_list|,
name|tests
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|singleTest
name|void
name|singleTest
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|funcTemplate
parameter_list|,
name|float
modifier|...
name|results
parameter_list|)
block|{
name|singleTest
argument_list|(
name|field
argument_list|,
name|funcTemplate
argument_list|,
literal|null
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
DECL|method|doTest
name|void
name|doTest
parameter_list|(
name|String
name|field
parameter_list|)
block|{
comment|// lrf.args.put("version","2.0");
name|float
index|[]
name|vals
init|=
operator|new
name|float
index|[]
block|{
literal|100
block|,
operator|-
literal|4
block|,
literal|0
block|,
literal|10
block|,
literal|25
block|,
literal|5
block|}
decl_stmt|;
name|createIndex
argument_list|(
name|field
argument_list|,
name|vals
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
literal|null
argument_list|,
literal|88
argument_list|)
expr_stmt|;
comment|// id with no value
comment|// test identity (straight field value)
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"\0"
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// test constant score
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"1.414213"
argument_list|,
literal|10
argument_list|,
literal|1.414213f
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"-1.414213"
argument_list|,
literal|10
argument_list|,
operator|-
literal|1.414213f
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"sum(\0,1)"
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"sum(\0,\0)"
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"sum(\0,\0,5)"
argument_list|,
literal|10
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"sub(\0,1)"
argument_list|,
literal|10
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"product(\0,1)"
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"product(\0,-2,-4)"
argument_list|,
literal|10
argument_list|,
literal|80
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"log(\0)"
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"sqrt(\0)"
argument_list|,
literal|100
argument_list|,
literal|10
argument_list|,
literal|25
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"abs(\0)"
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
operator|-
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"pow(\0,\0)"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|3125
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"pow(\0,0.5)"
argument_list|,
literal|100
argument_list|,
literal|10
argument_list|,
literal|25
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"div(1,\0)"
argument_list|,
operator|-
literal|4
argument_list|,
operator|-
literal|.25f
argument_list|,
literal|10
argument_list|,
literal|.1f
argument_list|,
literal|100
argument_list|,
literal|.01f
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"div(1,1)"
argument_list|,
operator|-
literal|4
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"sqrt(abs(\0))"
argument_list|,
operator|-
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"sqrt(sum(29,\0))"
argument_list|,
operator|-
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"map(\0,0,0,500)"
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
operator|-
literal|4
argument_list|,
operator|-
literal|4
argument_list|,
literal|0
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"map(\0,-4,5,500)"
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
operator|-
literal|4
argument_list|,
literal|500
argument_list|,
literal|0
argument_list|,
literal|500
argument_list|,
literal|5
argument_list|,
literal|500
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|25
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"map(\0,0,0,sum(\0,500))"
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
operator|-
literal|4
argument_list|,
operator|-
literal|4
argument_list|,
literal|0
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"map(\0,0,0,sum(\0,500),sum(\0,1))"
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
operator|-
literal|4
argument_list|,
operator|-
literal|3
argument_list|,
literal|0
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"map(\0,-4,5,sum(\0,1))"
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
operator|-
literal|4
argument_list|,
operator|-
literal|3
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|25
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"scale(\0,-1,1)"
argument_list|,
operator|-
literal|4
argument_list|,
operator|-
literal|1
argument_list|,
literal|100
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|0.9230769f
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"scale(\0,-10,1000)"
argument_list|,
operator|-
literal|4
argument_list|,
operator|-
literal|10
argument_list|,
literal|100
argument_list|,
literal|1000
argument_list|,
literal|0
argument_list|,
literal|28.846153f
argument_list|)
expr_stmt|;
comment|// test that infinity doesn't mess up scale function
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"scale(log(\0),-1000,1000)"
argument_list|,
literal|100
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// test use of an ValueSourceParser plugin: nvl function
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"nvl(\0,1)"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// compose the ValueSourceParser plugin function with another function
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"nvl(sum(0,\0),1)"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// test simple embedded query
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"query({!func v=\0})"
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|88
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// test default value for embedded query
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"query({!lucene v='\0:[* TO *]'},8)"
argument_list|,
literal|88
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"sum(query({!func v=\0},7.1),query({!func v=\0}))"
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|)
expr_stmt|;
comment|// test with sub-queries specified by other request args
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"query({!func v=$vv})"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"vv"
argument_list|,
literal|"\0"
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|88
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"query($vv)"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"vv"
argument_list|,
literal|"{!func}\0"
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|88
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"sum(query($v1,5),query($v1,7))"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"v1"
argument_list|,
literal|"\0:[* TO *]"
argument_list|)
argument_list|,
literal|88
argument_list|,
literal|12
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFunctions
specifier|public
name|void
name|testFunctions
parameter_list|()
block|{
name|doTest
argument_list|(
literal|"foo_f"
argument_list|)
expr_stmt|;
comment|// a sortable float field
name|doTest
argument_list|(
literal|"foo_tf"
argument_list|)
expr_stmt|;
comment|// a trie float field
block|}
annotation|@
name|Test
DECL|method|testExternalField
specifier|public
name|void
name|testExternalField
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|field
init|=
literal|"foo_extf"
decl_stmt|;
name|float
index|[]
name|ids
init|=
block|{
literal|100
block|,
operator|-
literal|4
block|,
literal|0
block|,
literal|10
block|,
literal|25
block|,
literal|5
block|,
literal|77
block|,
literal|23
block|,
literal|55
block|,
operator|-
literal|78
block|,
operator|-
literal|45
block|,
operator|-
literal|24
block|,
literal|63
block|,
literal|78
block|,
literal|94
block|,
literal|22
block|,
literal|34
block|,
literal|54321
block|,
literal|261
block|,
operator|-
literal|627
block|}
decl_stmt|;
name|createIndex
argument_list|(
literal|null
argument_list|,
name|ids
argument_list|)
expr_stmt|;
comment|// Unsorted field, largest first
name|makeExternalFile
argument_list|(
name|field
argument_list|,
literal|"54321=543210\n0=-999\n25=250"
argument_list|)
expr_stmt|;
comment|// test identity (straight field value)
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"\0"
argument_list|,
literal|54321
argument_list|,
literal|543210
argument_list|,
literal|0
argument_list|,
operator|-
literal|999
argument_list|,
literal|25
argument_list|,
literal|250
argument_list|,
literal|100
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Object
name|orig
init|=
name|FileFloatSource
operator|.
name|onlyForTesting
decl_stmt|;
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"log(\0)"
argument_list|)
expr_stmt|;
comment|// make sure the values were cached
name|assertTrue
argument_list|(
name|orig
operator|==
name|FileFloatSource
operator|.
name|onlyForTesting
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"sqrt(\0)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|orig
operator|==
name|FileFloatSource
operator|.
name|onlyForTesting
argument_list|)
expr_stmt|;
name|makeExternalFile
argument_list|(
name|field
argument_list|,
literal|"0=1"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|h
operator|.
name|query
argument_list|(
literal|"/reloadCache"
argument_list|,
name|lrf
operator|.
name|makeRequest
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"sqrt(\0)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|orig
operator|!=
name|FileFloatSource
operator|.
name|onlyForTesting
argument_list|)
expr_stmt|;
name|Random
name|r
init|=
name|random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
comment|// do more iterations for a thorough test
name|int
name|len
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|ids
operator|.
name|length
operator|+
literal|1
argument_list|)
decl_stmt|;
name|boolean
name|sorted
init|=
name|r
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
comment|// shuffle ids
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|ids
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|int
name|other
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|ids
operator|.
name|length
argument_list|)
decl_stmt|;
name|float
name|v
init|=
name|ids
index|[
literal|0
index|]
decl_stmt|;
name|ids
index|[
literal|0
index|]
operator|=
name|ids
index|[
name|other
index|]
expr_stmt|;
name|ids
index|[
name|other
index|]
operator|=
name|v
expr_stmt|;
block|}
if|if
condition|(
name|sorted
condition|)
block|{
comment|// sort only the first elements
name|Arrays
operator|.
name|sort
argument_list|(
name|ids
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
comment|// make random values
name|float
index|[]
name|vals
init|=
operator|new
name|float
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|len
condition|;
name|j
operator|++
control|)
block|{
name|vals
index|[
name|j
index|]
operator|=
name|r
operator|.
name|nextInt
argument_list|(
literal|200
argument_list|)
operator|-
literal|100
expr_stmt|;
block|}
comment|// make and write the external file
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|len
condition|;
name|j
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|""
operator|+
name|ids
index|[
name|j
index|]
operator|+
literal|"="
operator|+
name|vals
index|[
name|j
index|]
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|makeExternalFile
argument_list|(
name|field
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// make it visible
name|assertU
argument_list|(
name|h
operator|.
name|query
argument_list|(
literal|"/reloadCache"
argument_list|,
name|lrf
operator|.
name|makeRequest
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test it
name|float
index|[]
name|answers
init|=
operator|new
name|float
index|[
name|ids
operator|.
name|length
operator|*
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|len
condition|;
name|j
operator|++
control|)
block|{
name|answers
index|[
name|j
operator|*
literal|2
index|]
operator|=
name|ids
index|[
name|j
index|]
expr_stmt|;
name|answers
index|[
name|j
operator|*
literal|2
operator|+
literal|1
index|]
operator|=
name|vals
index|[
name|j
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
name|len
init|;
name|j
operator|<
name|ids
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|answers
index|[
name|j
operator|*
literal|2
index|]
operator|=
name|ids
index|[
name|j
index|]
expr_stmt|;
name|answers
index|[
name|j
operator|*
literal|2
operator|+
literal|1
index|]
operator|=
literal|1
expr_stmt|;
comment|// the default values
block|}
name|singleTest
argument_list|(
name|field
argument_list|,
literal|"\0"
argument_list|,
name|answers
argument_list|)
expr_stmt|;
comment|// System.out.println("Done test "+i);
block|}
block|}
annotation|@
name|Test
DECL|method|testExternalFileFieldStringKeys
specifier|public
name|void
name|testExternalFileFieldStringKeys
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|extField
init|=
literal|"foo_extfs"
decl_stmt|;
specifier|final
name|String
name|keyField
init|=
literal|"sfile_s"
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"991"
argument_list|,
name|keyField
argument_list|,
literal|"AAA=AAA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"992"
argument_list|,
name|keyField
argument_list|,
literal|"BBB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"993"
argument_list|,
name|keyField
argument_list|,
literal|"CCC=CCC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|makeExternalFile
argument_list|(
name|extField
argument_list|,
literal|"AAA=AAA=543210\nBBB=-8\nCCC=CCC=250"
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|extField
argument_list|,
literal|"\0"
argument_list|,
literal|991
argument_list|,
literal|543210
argument_list|,
literal|992
argument_list|,
operator|-
literal|8
argument_list|,
literal|993
argument_list|,
literal|250
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExternalFileFieldNumericKey
specifier|public
name|void
name|testExternalFileFieldNumericKey
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|extField
init|=
literal|"eff_trie"
decl_stmt|;
specifier|final
name|String
name|keyField
init|=
literal|"eff_ti"
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"991"
argument_list|,
name|keyField
argument_list|,
literal|"91"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"992"
argument_list|,
name|keyField
argument_list|,
literal|"92"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"993"
argument_list|,
name|keyField
argument_list|,
literal|"93"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|makeExternalFile
argument_list|(
name|extField
argument_list|,
literal|"91=543210\n92=-8\n93=250\n=67"
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|extField
argument_list|,
literal|"\0"
argument_list|,
literal|991
argument_list|,
literal|543210
argument_list|,
literal|992
argument_list|,
operator|-
literal|8
argument_list|,
literal|993
argument_list|,
literal|250
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeneral
specifier|public
name|void
name|testGeneral
parameter_list|()
throws|throws
name|Exception
block|{
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"a_tdt"
argument_list|,
literal|"2009-08-31T12:10:10.123Z"
argument_list|,
literal|"b_tdt"
argument_list|,
literal|"2009-08-31T12:10:10.124Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"a_t"
argument_list|,
literal|"how now brown cow"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// create more than one segment
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"a_t"
argument_list|,
literal|"brown cow"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// create more than one segment
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"a_t"
argument_list|,
literal|"cow cow cow cow cow"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// test relevancy functions
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}numdocs()"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:6"
argument_list|)
argument_list|,
literal|"//float[@name='score']='6.0'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}maxdoc()"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:6"
argument_list|)
argument_list|,
literal|"//float[@name='score']='6.0'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}docfreq(a_t,cow)"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:6"
argument_list|)
argument_list|,
literal|"//float[@name='score']='3.0'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}docfreq('a_t','cow')"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:6"
argument_list|)
argument_list|,
literal|"//float[@name='score']='3.0'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}docfreq($field,$value)"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:6"
argument_list|,
literal|"field"
argument_list|,
literal|"a_t"
argument_list|,
literal|"value"
argument_list|,
literal|"cow"
argument_list|)
argument_list|,
literal|"//float[@name='score']='3.0'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}termfreq(a_t,cow)"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:6"
argument_list|)
argument_list|,
literal|"//float[@name='score']='5.0'"
argument_list|)
expr_stmt|;
name|TFIDFSimilarity
name|similarity
init|=
operator|new
name|ClassicSimilarity
argument_list|()
decl_stmt|;
comment|// make sure it doesn't get a NPE if no terms are present in a field.
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}termfreq(nofield_t,cow)"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:6"
argument_list|)
argument_list|,
literal|"//float[@name='score']='0.0'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}docfreq(nofield_t,cow)"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:6"
argument_list|)
argument_list|,
literal|"//float[@name='score']='0.0'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}idf(nofield_t,cow)"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:6"
argument_list|)
argument_list|,
literal|"//float[@name='score']='"
operator|+
name|similarity
operator|.
name|idf
argument_list|(
literal|0
argument_list|,
literal|6
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}tf(nofield_t,cow)"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:6"
argument_list|)
argument_list|,
literal|"//float[@name='score']='"
operator|+
name|similarity
operator|.
name|tf
argument_list|(
literal|0
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}idf(a_t,cow)"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:6"
argument_list|)
argument_list|,
literal|"//float[@name='score']='"
operator|+
name|similarity
operator|.
name|idf
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}tf(a_t,cow)"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:6"
argument_list|)
argument_list|,
literal|"//float[@name='score']='"
operator|+
name|similarity
operator|.
name|tf
argument_list|(
literal|5
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|FieldInvertState
name|state
init|=
operator|new
name|FieldInvertState
argument_list|(
literal|"a_t"
argument_list|)
decl_stmt|;
name|state
operator|.
name|setBoost
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
name|state
operator|.
name|setLength
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|long
name|norm
init|=
name|similarity
operator|.
name|computeNorm
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|float
name|nrm
init|=
name|similarity
operator|.
name|decodeNormValue
argument_list|(
operator|(
name|byte
operator|)
name|norm
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}norm(a_t)"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:2"
argument_list|)
argument_list|,
literal|"//float[@name='score']='"
operator|+
name|nrm
operator|+
literal|"'"
argument_list|)
expr_stmt|;
comment|// sqrt(4)==2 and is exactly representable when quantized to a byte
comment|// test that ord and rord are working on a global index basis, not just
comment|// at the segment level (since Lucene 2.9 has switched to per-segment searching)
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}ord(id)"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:6"
argument_list|)
argument_list|,
literal|"//float[@name='score']='5.0'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}top(ord(id))"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:6"
argument_list|)
argument_list|,
literal|"//float[@name='score']='5.0'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}rord(id)"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//float[@name='score']='5.0'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}top(rord(id))"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//float[@name='score']='5.0'"
argument_list|)
expr_stmt|;
comment|// test that we can subtract dates to millisecond precision
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}ms(a_tdt,b_tdt)"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//float[@name='score']='-1.0'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}ms(b_tdt,a_tdt)"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//float[@name='score']='1.0'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}ms(2009-08-31T12:10:10.125Z,2009-08-31T12:10:10.124Z)"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//float[@name='score']='1.0'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}ms(2009-08-31T12:10:10.124Z,a_tdt)"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//float[@name='score']='1.0'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}ms(2009-08-31T12:10:10.125Z,b_tdt)"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//float[@name='score']='1.0'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}ms(2009-08-31T12:10:10.125Z/SECOND,2009-08-31T12:10:10.124Z/SECOND)"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//float[@name='score']='0.0'"
argument_list|)
expr_stmt|;
comment|// test that we can specify "NOW"
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}ms(NOW)"
argument_list|,
literal|"NOW"
argument_list|,
literal|"1000"
argument_list|)
argument_list|,
literal|"//float[@name='score']='1000.0'"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|100
init|;
name|i
operator|<
literal|112
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
literal|"text"
argument_list|,
literal|"batman"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"120"
argument_list|,
literal|"text"
argument_list|,
literal|"batman superman"
argument_list|)
argument_list|)
expr_stmt|;
comment|// in a smaller segment
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"121"
argument_list|,
literal|"text"
argument_list|,
literal|"superman"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// superman has a higher df (thus lower idf) in one segment, but reversed in the complete index
name|String
name|q
init|=
literal|"{!func}query($qq)"
decl_stmt|;
name|String
name|fq
init|=
literal|"id:120"
decl_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"qq"
argument_list|,
literal|"text:batman"
argument_list|,
literal|"fq"
argument_list|,
name|fq
argument_list|)
argument_list|,
literal|"//float[@name='score']<'1.0'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"qq"
argument_list|,
literal|"text:superman"
argument_list|,
literal|"fq"
argument_list|,
name|fq
argument_list|)
argument_list|,
literal|"//float[@name='score']>'1.0'"
argument_list|)
expr_stmt|;
comment|// test weighting through a function range query
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"fq"
argument_list|,
name|fq
argument_list|,
literal|"q"
argument_list|,
literal|"{!frange l=1 u=10}query($qq)"
argument_list|,
literal|"qq"
argument_list|,
literal|"text:superman"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
comment|// test weighting through a complex function
name|q
operator|=
literal|"{!func}sub(div(sum(0.0,product(1,query($qq))),1),0)"
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"qq"
argument_list|,
literal|"text:batman"
argument_list|,
literal|"fq"
argument_list|,
name|fq
argument_list|)
argument_list|,
literal|"//float[@name='score']<'1.0'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"qq"
argument_list|,
literal|"text:superman"
argument_list|,
literal|"fq"
argument_list|,
name|fq
argument_list|)
argument_list|,
literal|"//float[@name='score']>'1.0'"
argument_list|)
expr_stmt|;
comment|// test full param dereferencing
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}add($v1,$v2)"
argument_list|,
literal|"v1"
argument_list|,
literal|"add($v3,$v4)"
argument_list|,
literal|"v2"
argument_list|,
literal|"1"
argument_list|,
literal|"v3"
argument_list|,
literal|"2"
argument_list|,
literal|"v4"
argument_list|,
literal|"5"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//float[@name='score']='8.0'"
argument_list|)
expr_stmt|;
comment|// test ability to parse multiple values
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}dist(2,vector(1,1),$pt)"
argument_list|,
literal|"pt"
argument_list|,
literal|"3,1"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//float[@name='score']='2.0'"
argument_list|)
expr_stmt|;
comment|// test that extra stuff after a function causes an error
try|try
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}10 wow dude ignore_exception"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// OK
block|}
comment|// test that sorting by function weights correctly.  superman should sort higher than batman due to idf of the whole index
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:120 OR id:121"
argument_list|,
literal|"sort"
argument_list|,
literal|"{!func v=$sortfunc} desc"
argument_list|,
literal|"sortfunc"
argument_list|,
literal|"query($qq)"
argument_list|,
literal|"qq"
argument_list|,
literal|"text:(batman OR superman)"
argument_list|)
argument_list|,
literal|"*//doc[1]/float[.='120.0']"
argument_list|,
literal|"*//doc[2]/float[.='121.0']"
argument_list|)
expr_stmt|;
block|}
comment|/**    * test collection-level term stats (new in 4.x indexes)    */
DECL|method|testTotalTermFreq
specifier|public
name|void
name|testTotalTermFreq
parameter_list|()
throws|throws
name|Exception
block|{
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"a_tdt"
argument_list|,
literal|"2009-08-31T12:10:10.123Z"
argument_list|,
literal|"b_tdt"
argument_list|,
literal|"2009-08-31T12:10:10.124Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"a_t"
argument_list|,
literal|"how now brown cow"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// create more than one segment
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"a_t"
argument_list|,
literal|"brown cow"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// create more than one segment
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"a_t"
argument_list|,
literal|"cow cow cow cow cow"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}totaltermfreq('a_t','cow')"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:6"
argument_list|)
argument_list|,
literal|"//float[@name='score']='7.0'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}ttf(a_t,'cow')"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:6"
argument_list|)
argument_list|,
literal|"//float[@name='score']='7.0'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}sumtotaltermfreq('a_t')"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:6"
argument_list|)
argument_list|,
literal|"//float[@name='score']='11.0'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}sttf(a_t)"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:6"
argument_list|)
argument_list|,
literal|"//float[@name='score']='11.0'"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSortByFunc
specifier|public
name|void
name|testSortByFunc
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"const_s"
argument_list|,
literal|"xx"
argument_list|,
literal|"x_i"
argument_list|,
literal|"100"
argument_list|,
literal|"1_s"
argument_list|,
literal|"a"
argument_list|,
literal|"x:x_i"
argument_list|,
literal|"100"
argument_list|,
literal|"1-1_s"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"const_s"
argument_list|,
literal|"xx"
argument_list|,
literal|"x_i"
argument_list|,
literal|"300"
argument_list|,
literal|"1_s"
argument_list|,
literal|"c"
argument_list|,
literal|"x:x_i"
argument_list|,
literal|"300"
argument_list|,
literal|"1-1_s"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"const_s"
argument_list|,
literal|"xx"
argument_list|,
literal|"x_i"
argument_list|,
literal|"200"
argument_list|,
literal|"1_s"
argument_list|,
literal|"b"
argument_list|,
literal|"x:x_i"
argument_list|,
literal|"200"
argument_list|,
literal|"1-1_s"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|desc
init|=
literal|"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]"
decl_stmt|;
name|String
name|asc
init|=
literal|"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]"
decl_stmt|;
name|String
name|threeonetwo
init|=
literal|"/response/docs==[{'x_i':200},{'x_i':100},{'x_i':300}]"
decl_stmt|;
name|String
name|q
init|=
literal|"id:[1 TO 3]"
decl_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"fl"
argument_list|,
literal|"x_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"add(x_i,x_i) desc"
argument_list|)
argument_list|,
name|desc
argument_list|)
expr_stmt|;
comment|// param sub of entire function
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"fl"
argument_list|,
literal|"x_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"const_s asc, $x asc"
argument_list|,
literal|"x"
argument_list|,
literal|"add(x_i,x_i)"
argument_list|)
argument_list|,
name|asc
argument_list|)
expr_stmt|;
comment|// multiple functions
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"fl"
argument_list|,
literal|"x_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"$x asc, const_s asc, $y desc"
argument_list|,
literal|"x"
argument_list|,
literal|"5"
argument_list|,
literal|"y"
argument_list|,
literal|"add(x_i,x_i)"
argument_list|)
argument_list|,
name|desc
argument_list|)
expr_stmt|;
comment|// multiple functions inline
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"fl"
argument_list|,
literal|"x_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"add( 10 , 10 ) asc, const_s asc, add(x_i , $const) desc"
argument_list|,
literal|"const"
argument_list|,
literal|"50"
argument_list|)
argument_list|,
name|desc
argument_list|)
expr_stmt|;
comment|// test function w/ local params + func inline
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"fl"
argument_list|,
literal|"x_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"const_s asc, {!key=foo}add(x_i,x_i) desc"
argument_list|)
argument_list|,
name|desc
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"fl"
argument_list|,
literal|"x_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"{!key=foo}add(x_i,x_i) desc, const_s asc"
argument_list|)
argument_list|,
name|desc
argument_list|)
expr_stmt|;
comment|// test multiple functions w/ local params + func inline
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"fl"
argument_list|,
literal|"x_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"{!key=bar}add(10,20) asc, const_s asc, {!key=foo}add(x_i,x_i) desc"
argument_list|)
argument_list|,
name|desc
argument_list|)
expr_stmt|;
comment|// test multiple functions w/ local param value not inlined
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"fl"
argument_list|,
literal|"x_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc"
argument_list|,
literal|"s1"
argument_list|,
literal|"add(3,4)"
argument_list|,
literal|"s2"
argument_list|,
literal|"add(x_i,5)"
argument_list|)
argument_list|,
name|desc
argument_list|)
expr_stmt|;
comment|// no space between inlined localparams and sort order
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"fl"
argument_list|,
literal|"x_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"{!key=bar v=$s1}asc,const_s asc,{!key=foo v=$s2}desc"
argument_list|,
literal|"s1"
argument_list|,
literal|"add(3,4)"
argument_list|,
literal|"s2"
argument_list|,
literal|"add(x_i,5)"
argument_list|)
argument_list|,
name|desc
argument_list|)
expr_stmt|;
comment|// field name that isn't a legal java Identifier
comment|// and starts with a number to trick function parser
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"fl"
argument_list|,
literal|"x_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"1_s asc"
argument_list|)
argument_list|,
name|asc
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"fl"
argument_list|,
literal|"x_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"x:x_i desc"
argument_list|)
argument_list|,
name|desc
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"fl"
argument_list|,
literal|"x_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"1-1_s asc"
argument_list|)
argument_list|,
name|asc
argument_list|)
expr_stmt|;
comment|// really ugly field name that isn't a java Id, and can't be
comment|// parsed as a func, but sorted fine in Solr 1.4
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"fl"
argument_list|,
literal|"x_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"[]_s asc, {!key=foo}add(x_i,x_i) desc"
argument_list|)
argument_list|,
name|desc
argument_list|)
expr_stmt|;
comment|// use localparms to sort by a lucene query, then a function
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"fl"
argument_list|,
literal|"x_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"{!lucene v='id:3'}desc, {!key=foo}add(x_i,x_i) asc"
argument_list|)
argument_list|,
name|threeonetwo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDegreeRads
specifier|public
name|void
name|testDegreeRads
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"x_td"
argument_list|,
literal|"0"
argument_list|,
literal|"y_td"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"x_td"
argument_list|,
literal|"90"
argument_list|,
literal|"y_td"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|Math
operator|.
name|PI
operator|/
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"x_td"
argument_list|,
literal|"45"
argument_list|,
literal|"y_td"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|Math
operator|.
name|PI
operator|/
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}rad(x_td)"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//float[@name='score']='0.0'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}rad(x_td)"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:2"
argument_list|)
argument_list|,
literal|"//float[@name='score']='"
operator|+
call|(
name|float
call|)
argument_list|(
name|Math
operator|.
name|PI
operator|/
literal|2
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}rad(x_td)"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:3"
argument_list|)
argument_list|,
literal|"//float[@name='score']='"
operator|+
call|(
name|float
call|)
argument_list|(
name|Math
operator|.
name|PI
operator|/
literal|4
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}deg(y_td)"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//float[@name='score']='0.0'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}deg(y_td)"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:2"
argument_list|)
argument_list|,
literal|"//float[@name='score']='90.0'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}deg(y_td)"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:3"
argument_list|)
argument_list|,
literal|"//float[@name='score']='45.0'"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStrDistance
specifier|public
name|void
name|testStrDistance
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"x_s"
argument_list|,
literal|"foil"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}strdist(x_s, 'foit', edit)"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//float[@name='score']='0.75'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}strdist(x_s, 'foit', jw)"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//float[@name='score']='0.8833333'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}strdist(x_s, 'foit', ngram, 2)"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//float[@name='score']='0.875'"
argument_list|)
expr_stmt|;
comment|// strdist on a missing valuesource should itself by missing, so the ValueSourceAugmenter
comment|// should supress it...
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|,
literal|"fl"
argument_list|,
literal|"good:strdist(x_s, 'toil', edit)"
argument_list|,
literal|"fl"
argument_list|,
literal|"bad1:strdist(missing1_s, missing2_s, edit)"
argument_list|,
literal|"fl"
argument_list|,
literal|"bad2:strdist(missing1_s, 'something', edit)"
argument_list|,
literal|"fl"
argument_list|,
literal|"bad3:strdist(missing1_s, x_s, edit)"
argument_list|)
argument_list|,
literal|"//float[@name='good']='0.75'"
argument_list|,
literal|"count(//float[starts-with(@name,'bad')])=0"
argument_list|)
expr_stmt|;
comment|// in a query context, there is always a number...
comment|//
comment|// if a ValueSource is missing, it is maximally distant from every other
comment|// value source *except* for another missing value source
comment|// ie: strdist(null,null)==1 but strdist(null,anything)==0
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"score"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:1"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}strdist(missing1_s, missing2_s, edit)"
argument_list|)
argument_list|,
literal|"//float[@name='score']='1.0'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"score"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:1"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}strdist(missing1_s, x_s, edit)"
argument_list|)
argument_list|,
literal|"//float[@name='score']='0.0'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"score"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:1"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}strdist(missing1_s, 'const', edit)"
argument_list|)
argument_list|,
literal|"//float[@name='score']='0.0'"
argument_list|)
expr_stmt|;
block|}
DECL|method|dofunc
specifier|public
name|void
name|dofunc
parameter_list|(
name|String
name|func
parameter_list|,
name|double
name|val
parameter_list|)
throws|throws
name|Exception
block|{
comment|// String sval = Double.toString(val);
name|String
name|sval
init|=
name|Float
operator|.
name|toString
argument_list|(
operator|(
name|float
operator|)
name|val
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"defType"
argument_list|,
literal|"func"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:1"
argument_list|,
literal|"q"
argument_list|,
name|func
argument_list|)
argument_list|,
literal|"//float[@name='score']='"
operator|+
name|sval
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFuncs
specifier|public
name|void
name|testFuncs
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"foo_d"
argument_list|,
literal|"9"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"1.0"
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"e()"
argument_list|,
name|Math
operator|.
name|E
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"pi()"
argument_list|,
name|Math
operator|.
name|PI
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"add(2,3)"
argument_list|,
literal|2
operator|+
literal|3
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"mul(2,3)"
argument_list|,
literal|2
operator|*
literal|3
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"rad(45)"
argument_list|,
name|Math
operator|.
name|toRadians
argument_list|(
literal|45
argument_list|)
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"deg(.5)"
argument_list|,
name|Math
operator|.
name|toDegrees
argument_list|(
literal|.5
argument_list|)
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"sqrt(9)"
argument_list|,
name|Math
operator|.
name|sqrt
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"cbrt(8)"
argument_list|,
name|Math
operator|.
name|cbrt
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"max(0,1)"
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"max(10,3,8,7,5,4)"
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|10
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"min(0,1)"
argument_list|,
name|Math
operator|.
name|min
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"min(10,3,8,7,5,4)"
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|min
argument_list|(
literal|10
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"log(100)"
argument_list|,
name|Math
operator|.
name|log10
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"ln(3)"
argument_list|,
name|Math
operator|.
name|log
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"exp(1)"
argument_list|,
name|Math
operator|.
name|exp
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"sin(.5)"
argument_list|,
name|Math
operator|.
name|sin
argument_list|(
literal|.5
argument_list|)
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"cos(.5)"
argument_list|,
name|Math
operator|.
name|cos
argument_list|(
literal|.5
argument_list|)
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"tan(.5)"
argument_list|,
name|Math
operator|.
name|tan
argument_list|(
literal|.5
argument_list|)
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"asin(.5)"
argument_list|,
name|Math
operator|.
name|asin
argument_list|(
literal|.5
argument_list|)
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"acos(.5)"
argument_list|,
name|Math
operator|.
name|acos
argument_list|(
literal|.5
argument_list|)
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"atan(.5)"
argument_list|,
name|Math
operator|.
name|atan
argument_list|(
literal|.5
argument_list|)
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"sinh(.5)"
argument_list|,
name|Math
operator|.
name|sinh
argument_list|(
literal|.5
argument_list|)
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"cosh(.5)"
argument_list|,
name|Math
operator|.
name|cosh
argument_list|(
literal|.5
argument_list|)
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"tanh(.5)"
argument_list|,
name|Math
operator|.
name|tanh
argument_list|(
literal|.5
argument_list|)
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"ceil(2.3)"
argument_list|,
name|Math
operator|.
name|ceil
argument_list|(
literal|2.3
argument_list|)
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"floor(2.3)"
argument_list|,
name|Math
operator|.
name|floor
argument_list|(
literal|2.3
argument_list|)
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"rint(2.3)"
argument_list|,
name|Math
operator|.
name|rint
argument_list|(
literal|2.3
argument_list|)
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"pow(2,0.5)"
argument_list|,
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
literal|0.5
argument_list|)
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"hypot(3,4)"
argument_list|,
name|Math
operator|.
name|hypot
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|dofunc
argument_list|(
literal|"atan2(.25,.5)"
argument_list|,
name|Math
operator|.
name|atan2
argument_list|(
literal|.25
argument_list|,
literal|.5
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * verify that both the field("...") value source parser as well as     * ExternalFileField work with esoteric field names    */
annotation|@
name|Test
DECL|method|testExternalFieldValueSourceParser
specifier|public
name|void
name|testExternalFieldValueSourceParser
parameter_list|()
block|{
name|clearIndex
argument_list|()
expr_stmt|;
name|String
name|field
init|=
literal|"CoMpleX fieldName _extf"
decl_stmt|;
name|String
name|fieldAsFunc
init|=
literal|"field(\"CoMpleX fieldName _extf\")"
decl_stmt|;
name|float
index|[]
name|ids
init|=
block|{
literal|100
block|,
operator|-
literal|4
block|,
literal|0
block|,
literal|10
block|,
literal|25
block|,
literal|5
block|,
literal|77
block|,
literal|23
block|,
literal|55
block|,
operator|-
literal|78
block|,
operator|-
literal|45
block|,
operator|-
literal|24
block|,
literal|63
block|,
literal|78
block|,
literal|94
block|,
literal|22
block|,
literal|34
block|,
literal|54321
block|,
literal|261
block|,
operator|-
literal|627
block|}
decl_stmt|;
name|createIndex
argument_list|(
literal|null
argument_list|,
name|ids
argument_list|)
expr_stmt|;
comment|// Unsorted field, largest first
name|makeExternalFile
argument_list|(
name|field
argument_list|,
literal|"54321=543210\n0=-999\n25=250"
argument_list|)
expr_stmt|;
comment|// test identity (straight field value)
name|singleTest
argument_list|(
name|fieldAsFunc
argument_list|,
literal|"\0"
argument_list|,
literal|54321
argument_list|,
literal|543210
argument_list|,
literal|0
argument_list|,
operator|-
literal|999
argument_list|,
literal|25
argument_list|,
literal|250
argument_list|,
literal|100
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Object
name|orig
init|=
name|FileFloatSource
operator|.
name|onlyForTesting
decl_stmt|;
name|singleTest
argument_list|(
name|fieldAsFunc
argument_list|,
literal|"log(\0)"
argument_list|)
expr_stmt|;
comment|// make sure the values were cached
name|assertTrue
argument_list|(
name|orig
operator|==
name|FileFloatSource
operator|.
name|onlyForTesting
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|fieldAsFunc
argument_list|,
literal|"sqrt(\0)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|orig
operator|==
name|FileFloatSource
operator|.
name|onlyForTesting
argument_list|)
expr_stmt|;
name|makeExternalFile
argument_list|(
name|field
argument_list|,
literal|"0=1"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10000"
argument_list|)
argument_list|)
expr_stmt|;
comment|// will get same reader if no index change
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|fieldAsFunc
argument_list|,
literal|"sqrt(\0)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|orig
operator|!=
name|FileFloatSource
operator|.
name|onlyForTesting
argument_list|)
expr_stmt|;
block|}
comment|/**    * some platforms don't allow quote characters in filenames, so     * in addition to testExternalFieldValueSourceParser above, test a field     * name with quotes in it that does NOT use ExternalFileField    * @see #testExternalFieldValueSourceParser    */
annotation|@
name|Test
DECL|method|testFieldValueSourceParser
specifier|public
name|void
name|testFieldValueSourceParser
parameter_list|()
block|{
name|clearIndex
argument_list|()
expr_stmt|;
name|String
name|field
init|=
literal|"CoMpleX \" fieldName _f"
decl_stmt|;
name|String
name|fieldAsFunc
init|=
literal|"field(\"CoMpleX \\\" fieldName _f\")"
decl_stmt|;
name|float
index|[]
name|ids
init|=
block|{
literal|100
block|,
operator|-
literal|4
block|,
literal|0
block|,
literal|10
block|,
literal|25
block|,
literal|5
block|,
literal|77
block|,
literal|1
block|}
decl_stmt|;
name|createIndex
argument_list|(
name|field
argument_list|,
name|ids
argument_list|)
expr_stmt|;
comment|// test identity (straight field value)
name|singleTest
argument_list|(
name|fieldAsFunc
argument_list|,
literal|"\0"
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
operator|-
literal|4
argument_list|,
operator|-
literal|4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|25
argument_list|,
literal|25
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|77
argument_list|,
literal|77
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|fieldAsFunc
argument_list|,
literal|"sqrt(\0)"
argument_list|,
literal|100
argument_list|,
literal|10
argument_list|,
literal|25
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|singleTest
argument_list|(
name|fieldAsFunc
argument_list|,
literal|"log(\0)"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBooleanFunctions
specifier|public
name|void
name|testBooleanFunctions
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
literal|"hello"
argument_list|,
literal|"foo_s"
argument_list|,
literal|"A"
argument_list|,
literal|"foo_ti"
argument_list|,
literal|"0"
argument_list|,
literal|"foo_tl"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"foo_ti"
argument_list|,
literal|"10"
argument_list|,
literal|"foo_tl"
argument_list|,
literal|"11"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// test weighting of functions
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|,
literal|"fl"
argument_list|,
literal|"a:testfunc(1)"
argument_list|)
argument_list|,
literal|"/response/docs/[0]=={'a':1}"
argument_list|)
expr_stmt|;
comment|// true and false functions and constants
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|,
literal|"fl"
argument_list|,
literal|"t:true(),f:false(),tt:{!func}true,ff:{!func}false"
argument_list|)
argument_list|,
literal|"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}"
argument_list|)
expr_stmt|;
comment|// test that exists(query) depends on the query matching the document
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|,
literal|"fl"
argument_list|,
literal|"t:exists(query($q1)),f:exists(query($q2))"
argument_list|,
literal|"q1"
argument_list|,
literal|"text:hello"
argument_list|,
literal|"q2"
argument_list|,
literal|"text:there"
argument_list|)
argument_list|,
literal|"/response/docs/[0]=={'t':true,'f':false}"
argument_list|)
expr_stmt|;
comment|// test if()
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|,
literal|"fl"
argument_list|,
literal|"a1:if(true,'A','B')"
argument_list|,
literal|"fl"
argument_list|,
literal|"b1:if(false,'A',testfunc('B'))"
argument_list|)
argument_list|,
literal|"/response/docs/[0]=={'a1':'A', 'b1':'B'}"
argument_list|)
expr_stmt|;
comment|// test boolean operators
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|,
literal|"fl"
argument_list|,
literal|"t1:and(testfunc(true),true)"
argument_list|,
literal|"fl"
argument_list|,
literal|"f1:and(true,false)"
argument_list|,
literal|"fl"
argument_list|,
literal|"f2:and(false,true)"
argument_list|,
literal|"fl"
argument_list|,
literal|"f3:and(false,false)"
argument_list|)
argument_list|,
literal|"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|,
literal|"fl"
argument_list|,
literal|"t1:or(testfunc(true),true)"
argument_list|,
literal|"fl"
argument_list|,
literal|"t2:or(true,false)"
argument_list|,
literal|"fl"
argument_list|,
literal|"t3:or(false,true)"
argument_list|,
literal|"fl"
argument_list|,
literal|"f1:or(false,false)"
argument_list|)
argument_list|,
literal|"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|,
literal|"fl"
argument_list|,
literal|"f1:xor(testfunc(true),true)"
argument_list|,
literal|"fl"
argument_list|,
literal|"t1:xor(true,false)"
argument_list|,
literal|"fl"
argument_list|,
literal|"t2:xor(false,true)"
argument_list|,
literal|"fl"
argument_list|,
literal|"f2:xor(false,false)"
argument_list|)
argument_list|,
literal|"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|,
literal|"fl"
argument_list|,
literal|"t:not(testfunc(false)),f:not(true)"
argument_list|)
argument_list|,
literal|"/response/docs/[0]=={'t':true, 'f':false}"
argument_list|)
expr_stmt|;
comment|// def(), the default function that returns the first value that exists
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|,
literal|"fl"
argument_list|,
literal|"x:def(id,testfunc(123.0)), y:def(foo_f,234.0)"
argument_list|)
argument_list|,
literal|"/response/docs/[0]=={'x':1.0, 'y':234.0}"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|,
literal|"fl"
argument_list|,
literal|"x:def(foo_s,'Q'), y:def(missing_s,'W')"
argument_list|)
argument_list|,
literal|"/response/docs/[0]=={'x':'A', 'y':'W'}"
argument_list|)
expr_stmt|;
comment|// test constant conversion to boolean
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|,
literal|"fl"
argument_list|,
literal|"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')"
argument_list|)
argument_list|,
literal|"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPseudoFieldFunctions
specifier|public
name|void
name|testPseudoFieldFunctions
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
literal|"hello"
argument_list|,
literal|"foo_s"
argument_list|,
literal|"A"
argument_list|,
literal|"yak_i"
argument_list|,
literal|"32"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// if exists() is false, no pseudo-field should be added
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|,
literal|"fl"
argument_list|,
literal|"a:1,b:2.0,c:'X',d:{!func}foo_s,e:{!func}bar_s"
argument_list|)
argument_list|,
literal|"/response/docs/[0]=={'a':1, 'b':2.0,'c':'X','d':'A'}"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|,
literal|"fl"
argument_list|,
literal|"a:sum(yak_i,bog_i),b:mul(yak_i,bog_i),c:min(yak_i,bog_i)"
argument_list|)
argument_list|,
literal|"/response/docs/[0]=={ 'c':32.0 }"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|,
literal|"fl"
argument_list|,
literal|"a:sum(yak_i,def(bog_i,42)), b:max(yak_i,bog_i)"
argument_list|)
argument_list|,
literal|"/response/docs/[0]=={ 'a': 74.0, 'b':32.0 }"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMissingFieldFunctionBehavior
specifier|public
name|void
name|testMissingFieldFunctionBehavior
parameter_list|()
throws|throws
name|Exception
block|{
name|clearIndex
argument_list|()
expr_stmt|;
comment|// add a doc that has no values in any interesting fields
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// it's important that these functions not only use fields that
comment|// out doc have no values for, but also that that no other doc ever added
comment|// to the index might have ever had a value for, so that the segment
comment|// term metadata doesn't exist
for|for
control|(
name|String
name|suffix
range|:
operator|new
name|String
index|[]
block|{
literal|"s"
block|,
literal|"b"
block|,
literal|"dt"
block|,
literal|"tdt"
block|,
literal|"i"
block|,
literal|"l"
block|,
literal|"f"
block|,
literal|"d"
block|,
literal|"ti"
block|,
literal|"tl"
block|,
literal|"tf"
block|,
literal|"td"
block|}
control|)
block|{
specifier|final
name|String
name|field
init|=
literal|"no__vals____"
operator|+
name|suffix
decl_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|,
literal|"fl"
argument_list|,
literal|"noval_if:if("
operator|+
name|field
operator|+
literal|",42,-99)"
argument_list|,
literal|"fl"
argument_list|,
literal|"noval_def:def("
operator|+
name|field
operator|+
literal|",-99)"
argument_list|,
literal|"fl"
argument_list|,
literal|"noval_not:not("
operator|+
name|field
operator|+
literal|")"
argument_list|,
literal|"fl"
argument_list|,
literal|"noval_exists:exists("
operator|+
name|field
operator|+
literal|")"
argument_list|)
argument_list|,
literal|"//long[@name='noval_if']='-99'"
argument_list|,
literal|"//long[@name='noval_def']='-99'"
argument_list|,
literal|"//bool[@name='noval_not']='true'"
argument_list|,
literal|"//bool[@name='noval_exists']='false'"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
