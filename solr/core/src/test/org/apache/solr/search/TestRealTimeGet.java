begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|noggit
operator|.
name|ObjectBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|UpdateHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|UpdateLog
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|VersionInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TestHarness
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
operator|.
name|verbose
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
operator|.
name|DistributedUpdateProcessor
operator|.
name|SEEN_LEADER
import|;
end_import
begin_class
DECL|class|TestRealTimeGet
specifier|public
class|class
name|TestRealTimeGet
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|SEEN_LEADER_VAL
specifier|private
specifier|static
name|String
name|SEEN_LEADER_VAL
init|=
literal|"true"
decl_stmt|;
comment|// value that means we've seen the leader and have version info (i.e. we are a non-leader replica)
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-tlog.xml"
argument_list|,
literal|"schema12.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetRealtime
specifier|public
name|void
name|testGetRealtime
parameter_list|()
throws|throws
name|Exception
block|{
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"=={'doc':{'id':'1'}}"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"ids"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"=={"
operator|+
literal|"  'response':{'numFound':1,'start':0,'docs':["
operator|+
literal|"      {"
operator|+
literal|"        'id':'1'}]"
operator|+
literal|"  }}}"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"=={'doc':{'id':'1'}}"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"ids"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"=={"
operator|+
literal|"  'response':{'numFound':1,'start':0,'docs':["
operator|+
literal|"      {"
operator|+
literal|"        'id':'1'}]"
operator|+
literal|"  }}}"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|delI
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"=={'doc':null}"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"ids"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"=={'response':{'numFound':0,'start':0,'docs':[]}}"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"11"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"id"
argument_list|,
literal|"10"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"=={'doc':{'id':'10'}}"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|delQ
argument_list|(
literal|"id:10 abcdef"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"id"
argument_list|,
literal|"10"
argument_list|)
argument_list|,
literal|"=={'doc':null}"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"id"
argument_list|,
literal|"11"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"=={'doc':{'id':'11'}}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVersions
specifier|public
name|void
name|testVersions
parameter_list|()
throws|throws
name|Exception
block|{
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|version
init|=
name|addAndGetVersion
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
comment|// test version is there from rtg
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"=={'doc':{'id':'1','_version_':"
operator|+
name|version
operator|+
literal|"}}"
argument_list|)
expr_stmt|;
comment|// test version is there from the index
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"=={'doc':{'id':'1','_version_':"
operator|+
name|version
operator|+
literal|"}}"
argument_list|)
expr_stmt|;
comment|// simulate an update from the leader
name|version
operator|+=
literal|10
expr_stmt|;
name|updateJ
argument_list|(
name|jsonAdd
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"_version_"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|version
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|params
argument_list|(
name|SEEN_LEADER
argument_list|,
name|SEEN_LEADER_VAL
argument_list|)
argument_list|)
expr_stmt|;
comment|// test version is there from rtg
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"=={'doc':{'id':'1','_version_':"
operator|+
name|version
operator|+
literal|"}}"
argument_list|)
expr_stmt|;
comment|// simulate reordering: test that a version less than that does not take affect
name|updateJ
argument_list|(
name|jsonAdd
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"_version_"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|version
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|params
argument_list|(
name|SEEN_LEADER
argument_list|,
name|SEEN_LEADER_VAL
argument_list|)
argument_list|)
expr_stmt|;
comment|// test that version hasn't changed
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"=={'doc':{'id':'1','_version_':"
operator|+
name|version
operator|+
literal|"}}"
argument_list|)
expr_stmt|;
comment|// simulate reordering: test that a delete w/ version less than that does not take affect
comment|// TODO: also allow passing version on delete instead of on URL?
name|updateJ
argument_list|(
name|jsonDelId
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|params
argument_list|(
name|SEEN_LEADER
argument_list|,
name|SEEN_LEADER_VAL
argument_list|,
literal|"_version_"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|version
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test that version hasn't changed
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"=={'doc':{'id':'1','_version_':"
operator|+
name|version
operator|+
literal|"}}"
argument_list|)
expr_stmt|;
comment|// make sure reordering detection also works after a commit
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// simulate reordering: test that a version less than that does not take affect
name|updateJ
argument_list|(
name|jsonAdd
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"_version_"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|version
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|params
argument_list|(
name|SEEN_LEADER
argument_list|,
name|SEEN_LEADER_VAL
argument_list|)
argument_list|)
expr_stmt|;
comment|// test that version hasn't changed
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"=={'doc':{'id':'1','_version_':"
operator|+
name|version
operator|+
literal|"}}"
argument_list|)
expr_stmt|;
comment|// simulate reordering: test that a delete w/ version less than that does not take affect
name|updateJ
argument_list|(
name|jsonDelId
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|params
argument_list|(
name|SEEN_LEADER
argument_list|,
name|SEEN_LEADER_VAL
argument_list|,
literal|"_version_"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|version
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test that version hasn't changed
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"=={'doc':{'id':'1','_version_':"
operator|+
name|version
operator|+
literal|"}}"
argument_list|)
expr_stmt|;
comment|// now simulate a normal delete from the leader
name|version
operator|+=
literal|5
expr_stmt|;
name|updateJ
argument_list|(
name|jsonDelId
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|params
argument_list|(
name|SEEN_LEADER
argument_list|,
name|SEEN_LEADER_VAL
argument_list|,
literal|"_version_"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|version
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure a reordered add doesn't take affect.
name|updateJ
argument_list|(
name|jsonAdd
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"_version_"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|version
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|params
argument_list|(
name|SEEN_LEADER
argument_list|,
name|SEEN_LEADER_VAL
argument_list|)
argument_list|)
expr_stmt|;
comment|// test that it's still deleted
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"=={'doc':null}"
argument_list|)
expr_stmt|;
comment|// test that we can remember the version of a delete after a commit
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure a reordered add doesn't take affect.
name|updateJ
argument_list|(
name|jsonAdd
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"_version_"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|version
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|params
argument_list|(
name|SEEN_LEADER
argument_list|,
name|SEEN_LEADER_VAL
argument_list|)
argument_list|)
expr_stmt|;
comment|// test that it's still deleted
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"=={'doc':null}"
argument_list|)
expr_stmt|;
name|version
operator|=
name|addAndGetVersion
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|long
name|version2
init|=
name|deleteByQueryAndGetVersion
argument_list|(
literal|"id:2"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|version2
argument_list|)
operator|>
name|version
argument_list|)
expr_stmt|;
block|}
comment|/***   @Test   public void testGetRealtime() throws Exception {     SolrQueryRequest sr1 = req("q","foo");     IndexReader r1 = sr1.getCore().getRealtimeReader();      assertU(adoc("id","1"));      IndexReader r2 = sr1.getCore().getRealtimeReader();     assertNotSame(r1, r2);     int refcount = r2.getRefCount();      // make sure a new reader wasn't opened     IndexReader r3 = sr1.getCore().getRealtimeReader();     assertSame(r2, r3);     assertEquals(refcount+1, r3.getRefCount());      assertU(commit());      // this is not critical, but currently a commit does not refresh the reader     // if nothing has changed     IndexReader r4 = sr1.getCore().getRealtimeReader();     assertEquals(refcount+2, r4.getRefCount());       r1.decRef();     r2.decRef();     r3.decRef();     r4.decRef();     sr1.close();   }   ***/
DECL|field|model
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|DocInfo
argument_list|>
name|model
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|DocInfo
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|committedModel
name|Map
argument_list|<
name|Integer
argument_list|,
name|DocInfo
argument_list|>
name|committedModel
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|DocInfo
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|snapshotCount
name|long
name|snapshotCount
decl_stmt|;
DECL|field|committedModelClock
name|long
name|committedModelClock
decl_stmt|;
DECL|field|lastId
specifier|volatile
name|int
name|lastId
decl_stmt|;
DECL|field|field
specifier|final
name|String
name|field
init|=
literal|"val_l"
decl_stmt|;
DECL|field|syncArr
name|Object
index|[]
name|syncArr
decl_stmt|;
DECL|method|initModel
specifier|private
name|void
name|initModel
parameter_list|(
name|int
name|ndocs
parameter_list|)
block|{
name|snapshotCount
operator|=
literal|0
expr_stmt|;
name|committedModelClock
operator|=
literal|0
expr_stmt|;
name|lastId
operator|=
literal|0
expr_stmt|;
name|syncArr
operator|=
operator|new
name|Object
index|[
name|ndocs
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ndocs
condition|;
name|i
operator|++
control|)
block|{
name|model
operator|.
name|put
argument_list|(
name|i
argument_list|,
operator|new
name|DocInfo
argument_list|(
literal|0
argument_list|,
operator|-
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|syncArr
index|[
name|i
index|]
operator|=
operator|new
name|Object
argument_list|()
expr_stmt|;
block|}
name|committedModel
operator|.
name|putAll
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
DECL|class|DocInfo
specifier|static
class|class
name|DocInfo
block|{
DECL|field|version
name|long
name|version
decl_stmt|;
DECL|field|val
name|long
name|val
decl_stmt|;
DECL|method|DocInfo
specifier|public
name|DocInfo
parameter_list|(
name|long
name|version
parameter_list|,
name|long
name|val
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|val
operator|=
name|val
expr_stmt|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"{version="
operator|+
name|version
operator|+
literal|",val="
operator|+
name|val
operator|+
literal|"\""
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testStressGetRealtime
specifier|public
name|void
name|testStressGetRealtime
parameter_list|()
throws|throws
name|Exception
block|{
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// req().getCore().getUpdateHandler().getIndexWriterProvider().getIndexWriter(req().getCore()).setInfoStream(System.out);
specifier|final
name|int
name|commitPercent
init|=
literal|5
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
decl_stmt|;
specifier|final
name|int
name|softCommitPercent
init|=
literal|30
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|75
argument_list|)
decl_stmt|;
comment|// what percent of the commits are soft
specifier|final
name|int
name|deletePercent
init|=
literal|4
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
specifier|final
name|int
name|deleteByQueryPercent
init|=
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|int
name|ndocs
init|=
literal|5
operator|+
operator|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
name|random
operator|.
name|nextInt
argument_list|(
literal|25
argument_list|)
else|:
name|random
operator|.
name|nextInt
argument_list|(
literal|200
argument_list|)
operator|)
decl_stmt|;
name|int
name|nWriteThreads
init|=
literal|5
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxConcurrentCommits
init|=
name|nWriteThreads
decl_stmt|;
comment|// number of committers at a time... it should be<= maxWarmingSearchers
comment|// query variables
specifier|final
name|int
name|percentRealtimeQuery
init|=
literal|60
decl_stmt|;
specifier|final
name|AtomicLong
name|operations
init|=
operator|new
name|AtomicLong
argument_list|(
literal|50000
argument_list|)
decl_stmt|;
comment|// number of query operations to perform in total
name|int
name|nReadThreads
init|=
literal|5
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
name|verbose
argument_list|(
literal|"commitPercent="
argument_list|,
name|commitPercent
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"softCommitPercent="
argument_list|,
name|softCommitPercent
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"deletePercent="
argument_list|,
name|deletePercent
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"deleteByQueryPercent="
argument_list|,
name|deleteByQueryPercent
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"ndocs="
argument_list|,
name|ndocs
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"nWriteThreads="
argument_list|,
name|nWriteThreads
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"nReadThreads="
argument_list|,
name|nReadThreads
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"percentRealtimeQuery="
argument_list|,
name|percentRealtimeQuery
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"maxConcurrentCommits="
argument_list|,
name|maxConcurrentCommits
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"operations="
argument_list|,
name|operations
argument_list|)
expr_stmt|;
name|initModel
argument_list|(
name|ndocs
argument_list|)
expr_stmt|;
specifier|final
name|AtomicInteger
name|numCommitting
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<
name|Thread
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nWriteThreads
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
literal|"WRITER"
operator|+
name|i
argument_list|)
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
name|operations
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|oper
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
name|oper
operator|<
name|commitPercent
condition|)
block|{
if|if
condition|(
name|numCommitting
operator|.
name|incrementAndGet
argument_list|()
operator|<=
name|maxConcurrentCommits
condition|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|DocInfo
argument_list|>
name|newCommittedModel
decl_stmt|;
name|long
name|version
decl_stmt|;
synchronized|synchronized
init|(
name|TestRealTimeGet
operator|.
name|this
init|)
block|{
name|newCommittedModel
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|DocInfo
argument_list|>
argument_list|(
name|model
argument_list|)
expr_stmt|;
comment|// take a snapshot
name|version
operator|=
name|snapshotCount
operator|++
expr_stmt|;
name|verbose
argument_list|(
literal|"took snapshot version="
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
name|softCommitPercent
condition|)
block|{
name|verbose
argument_list|(
literal|"softCommit start"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|TestHarness
operator|.
name|commit
argument_list|(
literal|"softCommit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"softCommit end"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verbose
argument_list|(
literal|"hardCommit start"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"hardCommit end"
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|TestRealTimeGet
operator|.
name|this
init|)
block|{
comment|// install this model snapshot only if it's newer than the current one
if|if
condition|(
name|version
operator|>=
name|committedModelClock
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|verbose
argument_list|(
literal|"installing new committedModel version="
operator|+
name|committedModelClock
argument_list|)
expr_stmt|;
block|}
name|committedModel
operator|=
name|newCommittedModel
expr_stmt|;
name|committedModelClock
operator|=
name|version
expr_stmt|;
block|}
block|}
block|}
name|numCommitting
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|int
name|id
init|=
name|rand
operator|.
name|nextInt
argument_list|(
name|ndocs
argument_list|)
decl_stmt|;
name|Object
name|sync
init|=
name|syncArr
index|[
name|id
index|]
decl_stmt|;
comment|// set the lastId before we actually change it sometimes to try and
comment|// uncover more race conditions between writing and reading
name|boolean
name|before
init|=
name|rand
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|before
condition|)
block|{
name|lastId
operator|=
name|id
expr_stmt|;
block|}
comment|// We can't concurrently update the same document and retain our invariants of increasing values
comment|// since we can't guarantee what order the updates will be executed.
comment|// Even with versions, we can't remove the sync because increasing versions does not mean increasing vals.
synchronized|synchronized
init|(
name|sync
init|)
block|{
name|DocInfo
name|info
init|=
name|model
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|long
name|val
init|=
name|info
operator|.
name|val
decl_stmt|;
name|long
name|nextVal
init|=
name|Math
operator|.
name|abs
argument_list|(
name|val
argument_list|)
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|oper
operator|<
name|commitPercent
operator|+
name|deletePercent
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|verbose
argument_list|(
literal|"deleting id"
argument_list|,
name|id
argument_list|,
literal|"val="
argument_list|,
name|nextVal
argument_list|)
expr_stmt|;
block|}
comment|// assertU("<delete><id>" + id + "</id></delete>");
name|Long
name|version
init|=
name|deleteAndGetVersion
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|model
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|DocInfo
argument_list|(
name|version
argument_list|,
operator|-
name|nextVal
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|verbose
argument_list|(
literal|"deleting id"
argument_list|,
name|id
argument_list|,
literal|"val="
argument_list|,
name|nextVal
argument_list|,
literal|"DONE"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|oper
operator|<
name|commitPercent
operator|+
name|deletePercent
operator|+
name|deleteByQueryPercent
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|verbose
argument_list|(
literal|"deleteByQuery id "
argument_list|,
name|id
argument_list|,
literal|"val="
argument_list|,
name|nextVal
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
literal|"<delete><query>id:"
operator|+
name|id
operator|+
literal|"</query></delete>"
argument_list|)
expr_stmt|;
name|model
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|DocInfo
argument_list|(
operator|-
literal|1L
argument_list|,
operator|-
name|nextVal
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|verbose
argument_list|(
literal|"deleteByQuery id"
argument_list|,
name|id
argument_list|,
literal|"val="
argument_list|,
name|nextVal
argument_list|,
literal|"DONE"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|verbose
argument_list|(
literal|"adding id"
argument_list|,
name|id
argument_list|,
literal|"val="
argument_list|,
name|nextVal
argument_list|)
expr_stmt|;
block|}
comment|// assertU(adoc("id",Integer.toString(id), field, Long.toString(nextVal)));
name|Long
name|version
init|=
name|addAndGetVersion
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|,
name|field
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|nextVal
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|model
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|DocInfo
argument_list|(
name|version
argument_list|,
name|nextVal
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|verbose
argument_list|(
literal|"adding id"
argument_list|,
name|id
argument_list|,
literal|"val="
argument_list|,
name|nextVal
argument_list|,
literal|"DONE"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// end sync
if|if
condition|(
operator|!
name|before
condition|)
block|{
name|lastId
operator|=
name|id
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|operations
operator|.
name|set
argument_list|(
operator|-
literal|1L
argument_list|)
expr_stmt|;
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nReadThreads
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
literal|"READER"
operator|+
name|i
argument_list|)
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
name|operations
operator|.
name|decrementAndGet
argument_list|()
operator|>=
literal|0
condition|)
block|{
comment|// bias toward a recently changed doc
name|int
name|id
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|25
condition|?
name|lastId
else|:
name|rand
operator|.
name|nextInt
argument_list|(
name|ndocs
argument_list|)
decl_stmt|;
comment|// when indexing, we update the index, then the model
comment|// so when querying, we should first check the model, and then the index
name|boolean
name|realTime
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
name|percentRealtimeQuery
decl_stmt|;
name|DocInfo
name|info
decl_stmt|;
if|if
condition|(
name|realTime
condition|)
block|{
name|info
operator|=
name|model
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
synchronized|synchronized
init|(
name|TestRealTimeGet
operator|.
name|this
init|)
block|{
name|info
operator|=
name|committedModel
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|verbose
argument_list|(
literal|"querying id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|SolrQueryRequest
name|sreq
decl_stmt|;
if|if
condition|(
name|realTime
condition|)
block|{
name|sreq
operator|=
name|req
argument_list|(
literal|"wt"
argument_list|,
literal|"json"
argument_list|,
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"ids"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sreq
operator|=
name|req
argument_list|(
literal|"wt"
argument_list|,
literal|"json"
argument_list|,
literal|"q"
argument_list|,
literal|"id:"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|,
literal|"omitHeader"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|String
name|response
init|=
name|h
operator|.
name|query
argument_list|(
name|sreq
argument_list|)
decl_stmt|;
name|Map
name|rsp
init|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|fromJSON
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|List
name|doclist
init|=
call|(
name|List
call|)
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|rsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"docs"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|doclist
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// there's no info we can get back with a delete, so not much we can check without further synchronization
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|doclist
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|foundVal
init|=
call|(
name|Long
call|)
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|doclist
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|foundVer
init|=
call|(
name|Long
call|)
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|doclist
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"_version_"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|foundVal
operator|<
name|Math
operator|.
name|abs
argument_list|(
name|info
operator|.
name|val
argument_list|)
operator|||
operator|(
name|foundVer
operator|==
name|info
operator|.
name|version
operator|&&
name|foundVal
operator|!=
name|info
operator|.
name|val
operator|)
condition|)
block|{
comment|// if the version matches, the val must
name|verbose
argument_list|(
literal|"ERROR, id="
argument_list|,
name|id
argument_list|,
literal|"found="
argument_list|,
name|response
argument_list|,
literal|"model"
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|operations
operator|.
name|set
argument_list|(
operator|-
literal|1L
argument_list|)
expr_stmt|;
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
comment|// This version doesn't synchronize on id to tell what update won, but instead uses versions
annotation|@
name|Test
DECL|method|testStressGetRealtimeVersions
specifier|public
name|void
name|testStressGetRealtimeVersions
parameter_list|()
throws|throws
name|Exception
block|{
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|commitPercent
init|=
literal|5
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
decl_stmt|;
specifier|final
name|int
name|softCommitPercent
init|=
literal|30
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|75
argument_list|)
decl_stmt|;
comment|// what percent of the commits are soft
specifier|final
name|int
name|deletePercent
init|=
literal|4
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
specifier|final
name|int
name|deleteByQueryPercent
init|=
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|int
name|ndocs
init|=
literal|5
operator|+
operator|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
name|random
operator|.
name|nextInt
argument_list|(
literal|25
argument_list|)
else|:
name|random
operator|.
name|nextInt
argument_list|(
literal|200
argument_list|)
operator|)
decl_stmt|;
name|int
name|nWriteThreads
init|=
literal|5
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxConcurrentCommits
init|=
name|nWriteThreads
decl_stmt|;
comment|// number of committers at a time... it should be<= maxWarmingSearchers
comment|// query variables
specifier|final
name|int
name|percentRealtimeQuery
init|=
literal|75
decl_stmt|;
specifier|final
name|AtomicLong
name|operations
init|=
operator|new
name|AtomicLong
argument_list|(
literal|50000
argument_list|)
decl_stmt|;
comment|// number of query operations to perform in total
name|int
name|nReadThreads
init|=
literal|5
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
name|initModel
argument_list|(
name|ndocs
argument_list|)
expr_stmt|;
specifier|final
name|AtomicInteger
name|numCommitting
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<
name|Thread
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nWriteThreads
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
literal|"WRITER"
operator|+
name|i
argument_list|)
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
name|operations
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|oper
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
name|oper
operator|<
name|commitPercent
condition|)
block|{
if|if
condition|(
name|numCommitting
operator|.
name|incrementAndGet
argument_list|()
operator|<=
name|maxConcurrentCommits
condition|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|DocInfo
argument_list|>
name|newCommittedModel
decl_stmt|;
name|long
name|version
decl_stmt|;
synchronized|synchronized
init|(
name|TestRealTimeGet
operator|.
name|this
init|)
block|{
name|newCommittedModel
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|DocInfo
argument_list|>
argument_list|(
name|model
argument_list|)
expr_stmt|;
comment|// take a snapshot
name|version
operator|=
name|snapshotCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
name|softCommitPercent
condition|)
block|{
name|verbose
argument_list|(
literal|"softCommit start"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|TestHarness
operator|.
name|commit
argument_list|(
literal|"softCommit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"softCommit end"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verbose
argument_list|(
literal|"hardCommit start"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"hardCommit end"
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|TestRealTimeGet
operator|.
name|this
init|)
block|{
comment|// install this model snapshot only if it's newer than the current one
if|if
condition|(
name|version
operator|>=
name|committedModelClock
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|verbose
argument_list|(
literal|"installing new committedModel version="
operator|+
name|committedModelClock
argument_list|)
expr_stmt|;
block|}
name|committedModel
operator|=
name|newCommittedModel
expr_stmt|;
name|committedModelClock
operator|=
name|version
expr_stmt|;
block|}
block|}
block|}
name|numCommitting
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|int
name|id
init|=
name|rand
operator|.
name|nextInt
argument_list|(
name|ndocs
argument_list|)
decl_stmt|;
name|Object
name|sync
init|=
name|syncArr
index|[
name|id
index|]
decl_stmt|;
comment|// set the lastId before we actually change it sometimes to try and
comment|// uncover more race conditions between writing and reading
name|boolean
name|before
init|=
name|rand
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|before
condition|)
block|{
name|lastId
operator|=
name|id
expr_stmt|;
block|}
comment|// We can't concurrently update the same document and retain our invariants of increasing values
comment|// since we can't guarantee what order the updates will be executed.
comment|// Even with versions, we can't remove the sync because increasing versions does not mean increasing vals.
comment|//
comment|// NOTE: versioning means we can now remove the sync and tell what update "won"
comment|// synchronized (sync) {
name|DocInfo
name|info
init|=
name|model
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|long
name|val
init|=
name|info
operator|.
name|val
decl_stmt|;
name|long
name|nextVal
init|=
name|Math
operator|.
name|abs
argument_list|(
name|val
argument_list|)
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|oper
operator|<
name|commitPercent
operator|+
name|deletePercent
condition|)
block|{
name|verbose
argument_list|(
literal|"deleting id"
argument_list|,
name|id
argument_list|,
literal|"val="
argument_list|,
name|nextVal
argument_list|)
expr_stmt|;
name|Long
name|version
init|=
name|deleteAndGetVersion
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|version
operator|<
literal|0
argument_list|)
expr_stmt|;
comment|// only update model if the version is newer
synchronized|synchronized
init|(
name|model
init|)
block|{
name|DocInfo
name|currInfo
init|=
name|model
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|version
argument_list|)
operator|>
name|Math
operator|.
name|abs
argument_list|(
name|currInfo
operator|.
name|version
argument_list|)
condition|)
block|{
name|model
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|DocInfo
argument_list|(
name|version
argument_list|,
operator|-
name|nextVal
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|verbose
argument_list|(
literal|"deleting id"
argument_list|,
name|id
argument_list|,
literal|"val="
argument_list|,
name|nextVal
argument_list|,
literal|"DONE"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|oper
operator|<
name|commitPercent
operator|+
name|deletePercent
operator|+
name|deleteByQueryPercent
condition|)
block|{
name|verbose
argument_list|(
literal|"deleteByQyery id"
argument_list|,
name|id
argument_list|,
literal|"val="
argument_list|,
name|nextVal
argument_list|)
expr_stmt|;
name|Long
name|version
init|=
name|deleteByQueryAndGetVersion
argument_list|(
literal|"id:"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|version
operator|<
literal|0
argument_list|)
expr_stmt|;
comment|// only update model if the version is newer
synchronized|synchronized
init|(
name|model
init|)
block|{
name|DocInfo
name|currInfo
init|=
name|model
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|version
argument_list|)
operator|>
name|Math
operator|.
name|abs
argument_list|(
name|currInfo
operator|.
name|version
argument_list|)
condition|)
block|{
name|model
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|DocInfo
argument_list|(
name|version
argument_list|,
operator|-
name|nextVal
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|verbose
argument_list|(
literal|"deleteByQyery id"
argument_list|,
name|id
argument_list|,
literal|"val="
argument_list|,
name|nextVal
argument_list|,
literal|"DONE"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verbose
argument_list|(
literal|"adding id"
argument_list|,
name|id
argument_list|,
literal|"val="
argument_list|,
name|nextVal
argument_list|)
expr_stmt|;
comment|// assertU(adoc("id",Integer.toString(id), field, Long.toString(nextVal)));
name|Long
name|version
init|=
name|addAndGetVersion
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|,
name|field
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|nextVal
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|version
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// only update model if the version is newer
synchronized|synchronized
init|(
name|model
init|)
block|{
name|DocInfo
name|currInfo
init|=
name|model
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|>
name|currInfo
operator|.
name|version
condition|)
block|{
name|model
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|DocInfo
argument_list|(
name|version
argument_list|,
name|nextVal
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|verbose
argument_list|(
literal|"adding id"
argument_list|,
name|id
argument_list|,
literal|"val="
argument_list|,
name|nextVal
argument_list|,
literal|"DONE"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// }   // end sync
if|if
condition|(
operator|!
name|before
condition|)
block|{
name|lastId
operator|=
name|id
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|operations
operator|.
name|set
argument_list|(
operator|-
literal|1L
argument_list|)
expr_stmt|;
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nReadThreads
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
literal|"READER"
operator|+
name|i
argument_list|)
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
name|operations
operator|.
name|decrementAndGet
argument_list|()
operator|>=
literal|0
condition|)
block|{
comment|// bias toward a recently changed doc
name|int
name|id
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|25
condition|?
name|lastId
else|:
name|rand
operator|.
name|nextInt
argument_list|(
name|ndocs
argument_list|)
decl_stmt|;
comment|// when indexing, we update the index, then the model
comment|// so when querying, we should first check the model, and then the index
name|boolean
name|realTime
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
name|percentRealtimeQuery
decl_stmt|;
name|DocInfo
name|info
decl_stmt|;
if|if
condition|(
name|realTime
condition|)
block|{
name|info
operator|=
name|model
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
synchronized|synchronized
init|(
name|TestRealTimeGet
operator|.
name|this
init|)
block|{
name|info
operator|=
name|committedModel
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|verbose
argument_list|(
literal|"querying id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|SolrQueryRequest
name|sreq
decl_stmt|;
if|if
condition|(
name|realTime
condition|)
block|{
name|sreq
operator|=
name|req
argument_list|(
literal|"wt"
argument_list|,
literal|"json"
argument_list|,
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"ids"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sreq
operator|=
name|req
argument_list|(
literal|"wt"
argument_list|,
literal|"json"
argument_list|,
literal|"q"
argument_list|,
literal|"id:"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|,
literal|"omitHeader"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|String
name|response
init|=
name|h
operator|.
name|query
argument_list|(
name|sreq
argument_list|)
decl_stmt|;
name|Map
name|rsp
init|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|fromJSON
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|List
name|doclist
init|=
call|(
name|List
call|)
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|rsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"docs"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|doclist
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// there's no info we can get back with a delete, so not much we can check without further synchronization
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|doclist
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|foundVal
init|=
call|(
name|Long
call|)
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|doclist
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|foundVer
init|=
call|(
name|Long
call|)
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|doclist
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"_version_"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|foundVer
operator|<
name|Math
operator|.
name|abs
argument_list|(
name|info
operator|.
name|version
argument_list|)
operator|||
operator|(
name|foundVer
operator|==
name|info
operator|.
name|version
operator|&&
name|foundVal
operator|!=
name|info
operator|.
name|val
operator|)
condition|)
block|{
comment|// if the version matches, the val must
name|verbose
argument_list|(
literal|"ERROR, id="
argument_list|,
name|id
argument_list|,
literal|"found="
argument_list|,
name|response
argument_list|,
literal|"model"
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|operations
operator|.
name|set
argument_list|(
operator|-
literal|1L
argument_list|)
expr_stmt|;
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
comment|// This version simulates updates coming from the leader and sometimes being reordered
annotation|@
name|Test
DECL|method|testStressReorderVersions
specifier|public
name|void
name|testStressReorderVersions
parameter_list|()
throws|throws
name|Exception
block|{
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|commitPercent
init|=
literal|5
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
decl_stmt|;
specifier|final
name|int
name|softCommitPercent
init|=
literal|30
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|75
argument_list|)
decl_stmt|;
comment|// what percent of the commits are soft
specifier|final
name|int
name|deletePercent
init|=
literal|4
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
specifier|final
name|int
name|deleteByQueryPercent
init|=
literal|0
decl_stmt|;
comment|// delete-by-query can't be reordered on replicas
specifier|final
name|int
name|ndocs
init|=
literal|5
operator|+
operator|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
name|random
operator|.
name|nextInt
argument_list|(
literal|25
argument_list|)
else|:
name|random
operator|.
name|nextInt
argument_list|(
literal|200
argument_list|)
operator|)
decl_stmt|;
name|int
name|nWriteThreads
init|=
literal|5
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxConcurrentCommits
init|=
name|nWriteThreads
decl_stmt|;
comment|// number of committers at a time... it should be<= maxWarmingSearchers
comment|// query variables
specifier|final
name|int
name|percentRealtimeQuery
init|=
literal|75
decl_stmt|;
specifier|final
name|AtomicLong
name|operations
init|=
operator|new
name|AtomicLong
argument_list|(
literal|50000
argument_list|)
decl_stmt|;
comment|// number of query operations to perform in total
name|int
name|nReadThreads
init|=
literal|5
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
name|initModel
argument_list|(
name|ndocs
argument_list|)
expr_stmt|;
specifier|final
name|AtomicInteger
name|numCommitting
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<
name|Thread
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicLong
name|testVersion
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nWriteThreads
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
literal|"WRITER"
operator|+
name|i
argument_list|)
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
name|operations
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|oper
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
name|oper
operator|<
name|commitPercent
condition|)
block|{
if|if
condition|(
name|numCommitting
operator|.
name|incrementAndGet
argument_list|()
operator|<=
name|maxConcurrentCommits
condition|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|DocInfo
argument_list|>
name|newCommittedModel
decl_stmt|;
name|long
name|version
decl_stmt|;
synchronized|synchronized
init|(
name|TestRealTimeGet
operator|.
name|this
init|)
block|{
name|newCommittedModel
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|DocInfo
argument_list|>
argument_list|(
name|model
argument_list|)
expr_stmt|;
comment|// take a snapshot
name|version
operator|=
name|snapshotCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
name|softCommitPercent
condition|)
block|{
name|verbose
argument_list|(
literal|"softCommit start"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|TestHarness
operator|.
name|commit
argument_list|(
literal|"softCommit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"softCommit end"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verbose
argument_list|(
literal|"hardCommit start"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"hardCommit end"
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|TestRealTimeGet
operator|.
name|this
init|)
block|{
comment|// install this model snapshot only if it's newer than the current one
if|if
condition|(
name|version
operator|>=
name|committedModelClock
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|verbose
argument_list|(
literal|"installing new committedModel version="
operator|+
name|committedModelClock
argument_list|)
expr_stmt|;
block|}
name|committedModel
operator|=
name|newCommittedModel
expr_stmt|;
name|committedModelClock
operator|=
name|version
expr_stmt|;
block|}
block|}
block|}
name|numCommitting
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|int
name|id
decl_stmt|;
if|if
condition|(
name|rand
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|id
operator|=
name|rand
operator|.
name|nextInt
argument_list|(
name|ndocs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|id
operator|=
name|lastId
expr_stmt|;
comment|// reuse the last ID half of the time to force more race conditions
block|}
comment|// set the lastId before we actually change it sometimes to try and
comment|// uncover more race conditions between writing and reading
name|boolean
name|before
init|=
name|rand
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|before
condition|)
block|{
name|lastId
operator|=
name|id
expr_stmt|;
block|}
name|DocInfo
name|info
init|=
name|model
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|long
name|val
init|=
name|info
operator|.
name|val
decl_stmt|;
name|long
name|nextVal
init|=
name|Math
operator|.
name|abs
argument_list|(
name|val
argument_list|)
operator|+
literal|1
decl_stmt|;
comment|// the version we set on the update should determine who wins
comment|// These versions are not derived from the actual leader update handler hand hence this
comment|// test may need to change depending on how we handle version numbers.
name|long
name|version
init|=
name|testVersion
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
comment|// yield after getting the next version to increase the odds of updates happening out of order
if|if
condition|(
name|rand
operator|.
name|nextBoolean
argument_list|()
condition|)
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
if|if
condition|(
name|oper
operator|<
name|commitPercent
operator|+
name|deletePercent
condition|)
block|{
name|verbose
argument_list|(
literal|"deleting id"
argument_list|,
name|id
argument_list|,
literal|"val="
argument_list|,
name|nextVal
argument_list|,
literal|"version"
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|Long
name|returnedVersion
init|=
name|deleteAndGetVersion
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"_version_"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
operator|-
name|version
argument_list|)
argument_list|,
name|SEEN_LEADER
argument_list|,
name|SEEN_LEADER_VAL
argument_list|)
argument_list|)
decl_stmt|;
comment|// TODO: returning versions for these types of updates is redundant
comment|// but if we do return, they had better be equal
if|if
condition|(
name|returnedVersion
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
operator|-
name|version
argument_list|,
name|returnedVersion
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// only update model if the version is newer
synchronized|synchronized
init|(
name|model
init|)
block|{
name|DocInfo
name|currInfo
init|=
name|model
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|version
argument_list|)
operator|>
name|Math
operator|.
name|abs
argument_list|(
name|currInfo
operator|.
name|version
argument_list|)
condition|)
block|{
name|model
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|DocInfo
argument_list|(
name|version
argument_list|,
operator|-
name|nextVal
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|verbose
argument_list|(
literal|"deleting id"
argument_list|,
name|id
argument_list|,
literal|"val="
argument_list|,
name|nextVal
argument_list|,
literal|"version"
argument_list|,
name|version
argument_list|,
literal|"DONE"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|oper
operator|<
name|commitPercent
operator|+
name|deletePercent
operator|+
name|deleteByQueryPercent
condition|)
block|{                }
else|else
block|{
name|verbose
argument_list|(
literal|"adding id"
argument_list|,
name|id
argument_list|,
literal|"val="
argument_list|,
name|nextVal
argument_list|,
literal|"version"
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|Long
name|returnedVersion
init|=
name|addAndGetVersion
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|,
name|field
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|nextVal
argument_list|)
argument_list|,
literal|"_version_"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|version
argument_list|)
argument_list|)
argument_list|,
name|params
argument_list|(
name|SEEN_LEADER
argument_list|,
name|SEEN_LEADER_VAL
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnedVersion
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|version
argument_list|,
name|returnedVersion
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// only update model if the version is newer
synchronized|synchronized
init|(
name|model
init|)
block|{
name|DocInfo
name|currInfo
init|=
name|model
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|>
name|currInfo
operator|.
name|version
condition|)
block|{
name|model
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|DocInfo
argument_list|(
name|version
argument_list|,
name|nextVal
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|verbose
argument_list|(
literal|"adding id"
argument_list|,
name|id
argument_list|,
literal|"val="
argument_list|,
name|nextVal
argument_list|,
literal|"version"
argument_list|,
name|version
argument_list|,
literal|"DONE"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// }   // end sync
if|if
condition|(
operator|!
name|before
condition|)
block|{
name|lastId
operator|=
name|id
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|operations
operator|.
name|set
argument_list|(
operator|-
literal|1L
argument_list|)
expr_stmt|;
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nReadThreads
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
literal|"READER"
operator|+
name|i
argument_list|)
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
name|operations
operator|.
name|decrementAndGet
argument_list|()
operator|>=
literal|0
condition|)
block|{
comment|// bias toward a recently changed doc
name|int
name|id
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|25
condition|?
name|lastId
else|:
name|rand
operator|.
name|nextInt
argument_list|(
name|ndocs
argument_list|)
decl_stmt|;
comment|// when indexing, we update the index, then the model
comment|// so when querying, we should first check the model, and then the index
name|boolean
name|realTime
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
name|percentRealtimeQuery
decl_stmt|;
name|DocInfo
name|info
decl_stmt|;
if|if
condition|(
name|realTime
condition|)
block|{
name|info
operator|=
name|model
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
synchronized|synchronized
init|(
name|TestRealTimeGet
operator|.
name|this
init|)
block|{
name|info
operator|=
name|committedModel
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|verbose
argument_list|(
literal|"querying id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|SolrQueryRequest
name|sreq
decl_stmt|;
if|if
condition|(
name|realTime
condition|)
block|{
name|sreq
operator|=
name|req
argument_list|(
literal|"wt"
argument_list|,
literal|"json"
argument_list|,
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"ids"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sreq
operator|=
name|req
argument_list|(
literal|"wt"
argument_list|,
literal|"json"
argument_list|,
literal|"q"
argument_list|,
literal|"id:"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|,
literal|"omitHeader"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|String
name|response
init|=
name|h
operator|.
name|query
argument_list|(
name|sreq
argument_list|)
decl_stmt|;
name|Map
name|rsp
init|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|fromJSON
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|List
name|doclist
init|=
call|(
name|List
call|)
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|rsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"docs"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|doclist
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// there's no info we can get back with a delete, so not much we can check without further synchronization
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|doclist
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|foundVal
init|=
call|(
name|Long
call|)
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|doclist
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|foundVer
init|=
call|(
name|Long
call|)
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|doclist
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"_version_"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|foundVer
operator|<
name|Math
operator|.
name|abs
argument_list|(
name|info
operator|.
name|version
argument_list|)
operator|||
operator|(
name|foundVer
operator|==
name|info
operator|.
name|version
operator|&&
name|foundVal
operator|!=
name|info
operator|.
name|val
operator|)
condition|)
block|{
comment|// if the version matches, the val must
name|verbose
argument_list|(
literal|"ERROR, id="
argument_list|,
name|id
argument_list|,
literal|"found="
argument_list|,
name|response
argument_list|,
literal|"model"
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|operations
operator|.
name|set
argument_list|(
operator|-
literal|1L
argument_list|)
expr_stmt|;
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
comment|// This points to the live model when state is ACTIVE, but a snapshot of the
comment|// past when recovering.
DECL|field|visibleModel
specifier|volatile
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|DocInfo
argument_list|>
name|visibleModel
decl_stmt|;
comment|// This version simulates updates coming from the leader and sometimes being reordered
comment|// and tests the ability to buffer updates and apply them later
annotation|@
name|Test
DECL|method|testStressRecovery
specifier|public
name|void
name|testStressRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|commitPercent
init|=
literal|5
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|int
name|softCommitPercent
init|=
literal|30
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|75
argument_list|)
decl_stmt|;
comment|// what percent of the commits are soft
specifier|final
name|int
name|deletePercent
init|=
literal|4
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
specifier|final
name|int
name|deleteByQueryPercent
init|=
literal|0
decl_stmt|;
comment|// real-time get isn't currently supported with delete-by-query
specifier|final
name|int
name|ndocs
init|=
literal|5
operator|+
operator|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
name|random
operator|.
name|nextInt
argument_list|(
literal|25
argument_list|)
else|:
name|random
operator|.
name|nextInt
argument_list|(
literal|200
argument_list|)
operator|)
decl_stmt|;
name|int
name|nWriteThreads
init|=
literal|2
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
comment|// fewer write threads to give recovery thread more of a chance
specifier|final
name|int
name|maxConcurrentCommits
init|=
name|nWriteThreads
decl_stmt|;
comment|// number of committers at a time... it should be<= maxWarmingSearchers
comment|// query variables
specifier|final
name|int
name|percentRealtimeQuery
init|=
literal|75
decl_stmt|;
specifier|final
name|int
name|percentGetLatestVersions
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|operations
init|=
operator|new
name|AtomicLong
argument_list|(
name|atLeast
argument_list|(
literal|75
argument_list|)
argument_list|)
decl_stmt|;
comment|// number of recovery loops to perform
name|int
name|nReadThreads
init|=
literal|2
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
comment|// fewer read threads to give writers more of a chance
name|initModel
argument_list|(
name|ndocs
argument_list|)
expr_stmt|;
specifier|final
name|AtomicInteger
name|numCommitting
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<
name|Thread
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicLong
name|testVersion
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|UpdateHandler
name|uHandler
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getUpdateHandler
argument_list|()
decl_stmt|;
specifier|final
name|UpdateLog
name|uLog
init|=
name|uHandler
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
specifier|final
name|VersionInfo
name|vInfo
init|=
name|uLog
operator|.
name|getVersionInfo
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|stateChangeLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|this
operator|.
name|visibleModel
operator|=
name|model
expr_stmt|;
specifier|final
name|Semaphore
index|[]
name|writePermissions
init|=
operator|new
name|Semaphore
index|[
name|nWriteThreads
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nWriteThreads
condition|;
name|i
operator|++
control|)
name|writePermissions
index|[
name|i
index|]
operator|=
operator|new
name|Semaphore
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|Semaphore
name|readPermission
init|=
operator|new
name|Semaphore
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nWriteThreads
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|threadNum
init|=
name|i
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
literal|"WRITER"
operator|+
name|i
argument_list|)
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|Semaphore
name|writePermission
init|=
name|writePermissions
index|[
name|threadNum
index|]
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
name|operations
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
name|writePermission
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|int
name|oper
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
name|oper
operator|<
name|commitPercent
condition|)
block|{
if|if
condition|(
name|numCommitting
operator|.
name|incrementAndGet
argument_list|()
operator|<=
name|maxConcurrentCommits
condition|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|DocInfo
argument_list|>
name|newCommittedModel
decl_stmt|;
name|long
name|version
decl_stmt|;
synchronized|synchronized
init|(
name|TestRealTimeGet
operator|.
name|this
init|)
block|{
name|newCommittedModel
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|DocInfo
argument_list|>
argument_list|(
name|model
argument_list|)
expr_stmt|;
comment|// take a snapshot
name|version
operator|=
name|snapshotCount
operator|++
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|stateChangeLock
init|)
block|{
comment|// These commits won't take affect if we are in recovery mode,
comment|// so change the version to -1 so we won't update our model.
if|if
condition|(
name|uLog
operator|.
name|getState
argument_list|()
operator|!=
name|UpdateLog
operator|.
name|State
operator|.
name|ACTIVE
condition|)
name|version
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
name|softCommitPercent
condition|)
block|{
name|verbose
argument_list|(
literal|"softCommit start"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|TestHarness
operator|.
name|commit
argument_list|(
literal|"softCommit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"softCommit end"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verbose
argument_list|(
literal|"hardCommit start"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"hardCommit end"
argument_list|)
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|TestRealTimeGet
operator|.
name|this
init|)
block|{
comment|// install this model snapshot only if it's newer than the current one
comment|// install this model only if we are not in recovery mode.
if|if
condition|(
name|version
operator|>=
name|committedModelClock
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|verbose
argument_list|(
literal|"installing new committedModel version="
operator|+
name|committedModelClock
argument_list|)
expr_stmt|;
block|}
name|committedModel
operator|=
name|newCommittedModel
expr_stmt|;
name|committedModelClock
operator|=
name|version
expr_stmt|;
block|}
block|}
block|}
name|numCommitting
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|int
name|id
decl_stmt|;
if|if
condition|(
name|rand
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|id
operator|=
name|rand
operator|.
name|nextInt
argument_list|(
name|ndocs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|id
operator|=
name|lastId
expr_stmt|;
comment|// reuse the last ID half of the time to force more race conditions
block|}
comment|// set the lastId before we actually change it sometimes to try and
comment|// uncover more race conditions between writing and reading
name|boolean
name|before
init|=
name|rand
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|before
condition|)
block|{
name|lastId
operator|=
name|id
expr_stmt|;
block|}
name|DocInfo
name|info
init|=
name|model
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|long
name|val
init|=
name|info
operator|.
name|val
decl_stmt|;
name|long
name|nextVal
init|=
name|Math
operator|.
name|abs
argument_list|(
name|val
argument_list|)
operator|+
literal|1
decl_stmt|;
comment|// the version we set on the update should determine who wins
comment|// These versions are not derived from the actual leader update handler hand hence this
comment|// test may need to change depending on how we handle version numbers.
name|long
name|version
init|=
name|testVersion
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
comment|// yield after getting the next version to increase the odds of updates happening out of order
if|if
condition|(
name|rand
operator|.
name|nextBoolean
argument_list|()
condition|)
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
if|if
condition|(
name|oper
operator|<
name|commitPercent
operator|+
name|deletePercent
condition|)
block|{
name|verbose
argument_list|(
literal|"deleting id"
argument_list|,
name|id
argument_list|,
literal|"val="
argument_list|,
name|nextVal
argument_list|,
literal|"version"
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|Long
name|returnedVersion
init|=
name|deleteAndGetVersion
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"_version_"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
operator|-
name|version
argument_list|)
argument_list|,
name|SEEN_LEADER
argument_list|,
name|SEEN_LEADER_VAL
argument_list|)
argument_list|)
decl_stmt|;
comment|// TODO: returning versions for these types of updates is redundant
comment|// but if we do return, they had better be equal
if|if
condition|(
name|returnedVersion
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
operator|-
name|version
argument_list|,
name|returnedVersion
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// only update model if the version is newer
synchronized|synchronized
init|(
name|model
init|)
block|{
name|DocInfo
name|currInfo
init|=
name|model
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|version
argument_list|)
operator|>
name|Math
operator|.
name|abs
argument_list|(
name|currInfo
operator|.
name|version
argument_list|)
condition|)
block|{
name|model
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|DocInfo
argument_list|(
name|version
argument_list|,
operator|-
name|nextVal
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|verbose
argument_list|(
literal|"deleting id"
argument_list|,
name|id
argument_list|,
literal|"val="
argument_list|,
name|nextVal
argument_list|,
literal|"version"
argument_list|,
name|version
argument_list|,
literal|"DONE"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|oper
operator|<
name|commitPercent
operator|+
name|deletePercent
operator|+
name|deleteByQueryPercent
condition|)
block|{                }
else|else
block|{
name|verbose
argument_list|(
literal|"adding id"
argument_list|,
name|id
argument_list|,
literal|"val="
argument_list|,
name|nextVal
argument_list|,
literal|"version"
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|Long
name|returnedVersion
init|=
name|addAndGetVersion
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|,
name|field
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|nextVal
argument_list|)
argument_list|,
literal|"_version_"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|version
argument_list|)
argument_list|)
argument_list|,
name|params
argument_list|(
name|SEEN_LEADER
argument_list|,
name|SEEN_LEADER_VAL
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnedVersion
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|version
argument_list|,
name|returnedVersion
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// only update model if the version is newer
synchronized|synchronized
init|(
name|model
init|)
block|{
name|DocInfo
name|currInfo
init|=
name|model
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|>
name|currInfo
operator|.
name|version
condition|)
block|{
name|model
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|DocInfo
argument_list|(
name|version
argument_list|,
name|nextVal
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|verbose
argument_list|(
literal|"adding id"
argument_list|,
name|id
argument_list|,
literal|"val="
argument_list|,
name|nextVal
argument_list|,
literal|"version"
argument_list|,
name|version
argument_list|,
literal|"DONE"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// }   // end sync
if|if
condition|(
operator|!
name|before
condition|)
block|{
name|lastId
operator|=
name|id
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|operations
operator|.
name|set
argument_list|(
operator|-
literal|1L
argument_list|)
expr_stmt|;
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nReadThreads
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
literal|"READER"
operator|+
name|i
argument_list|)
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
name|operations
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// throttle reads (don't completely stop)
name|readPermission
operator|.
name|tryAcquire
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
comment|// bias toward a recently changed doc
name|int
name|id
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|25
condition|?
name|lastId
else|:
name|rand
operator|.
name|nextInt
argument_list|(
name|ndocs
argument_list|)
decl_stmt|;
comment|// when indexing, we update the index, then the model
comment|// so when querying, we should first check the model, and then the index
name|boolean
name|realTime
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
name|percentRealtimeQuery
decl_stmt|;
name|DocInfo
name|info
decl_stmt|;
if|if
condition|(
name|realTime
condition|)
block|{
name|info
operator|=
name|visibleModel
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
synchronized|synchronized
init|(
name|TestRealTimeGet
operator|.
name|this
init|)
block|{
name|info
operator|=
name|committedModel
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|verbose
argument_list|(
literal|"querying id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|SolrQueryRequest
name|sreq
decl_stmt|;
if|if
condition|(
name|realTime
condition|)
block|{
name|sreq
operator|=
name|req
argument_list|(
literal|"wt"
argument_list|,
literal|"json"
argument_list|,
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"ids"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sreq
operator|=
name|req
argument_list|(
literal|"wt"
argument_list|,
literal|"json"
argument_list|,
literal|"q"
argument_list|,
literal|"id:"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|,
literal|"omitHeader"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|String
name|response
init|=
name|h
operator|.
name|query
argument_list|(
name|sreq
argument_list|)
decl_stmt|;
name|Map
name|rsp
init|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|fromJSON
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|List
name|doclist
init|=
call|(
name|List
call|)
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|rsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"docs"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|doclist
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// there's no info we can get back with a delete, so not much we can check without further synchronization
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|doclist
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|foundVal
init|=
call|(
name|Long
call|)
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|doclist
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|foundVer
init|=
call|(
name|Long
call|)
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|doclist
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"_version_"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|foundVer
operator|<
name|Math
operator|.
name|abs
argument_list|(
name|info
operator|.
name|version
argument_list|)
operator|||
operator|(
name|foundVer
operator|==
name|info
operator|.
name|version
operator|&&
name|foundVal
operator|!=
name|info
operator|.
name|val
operator|)
condition|)
block|{
comment|// if the version matches, the val must
name|verbose
argument_list|(
literal|"ERROR, id="
argument_list|,
name|id
argument_list|,
literal|"found="
argument_list|,
name|response
argument_list|,
literal|"model"
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
name|percentGetLatestVersions
condition|)
block|{
name|getLatestVersions
argument_list|()
expr_stmt|;
comment|// TODO: some sort of validation that the latest version is>= to the latest version we added?
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|operations
operator|.
name|set
argument_list|(
operator|-
literal|1L
argument_list|)
expr_stmt|;
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|int
name|bufferedAddsApplied
init|=
literal|0
decl_stmt|;
do|do
block|{
name|assertTrue
argument_list|(
name|uLog
operator|.
name|getState
argument_list|()
operator|==
name|UpdateLog
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
comment|// before we start buffering updates, we want to point
comment|// visibleModel away from the live model.
name|visibleModel
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|DocInfo
argument_list|>
argument_list|(
name|model
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|stateChangeLock
init|)
block|{
name|uLog
operator|.
name|bufferUpdates
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|uLog
operator|.
name|getState
argument_list|()
operator|==
name|UpdateLog
operator|.
name|State
operator|.
name|BUFFERING
argument_list|)
expr_stmt|;
comment|// sometimes wait for a second to allow time for writers to write something
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
name|Thread
operator|.
name|sleep
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|UpdateLog
operator|.
name|RecoveryInfo
argument_list|>
name|recoveryInfoF
init|=
name|uLog
operator|.
name|applyBufferedUpdates
argument_list|()
decl_stmt|;
if|if
condition|(
name|recoveryInfoF
operator|!=
literal|null
condition|)
block|{
name|UpdateLog
operator|.
name|RecoveryInfo
name|recInfo
init|=
literal|null
decl_stmt|;
name|int
name|writeThreadNumber
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|recInfo
operator|==
literal|null
condition|)
block|{
try|try
block|{
comment|// wait a short period of time for recovery to complete (and to give a chance for more writers to concurrently add docs)
name|recInfo
operator|=
name|recoveryInfoF
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|100
operator|/
name|nWriteThreads
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
comment|// idle one more write thread
name|verbose
argument_list|(
literal|"Operation"
argument_list|,
name|operations
operator|.
name|get
argument_list|()
argument_list|,
literal|"Draining permits for write thread"
argument_list|,
name|writeThreadNumber
argument_list|)
expr_stmt|;
name|writePermissions
index|[
name|writeThreadNumber
operator|++
index|]
operator|.
name|drainPermits
argument_list|()
expr_stmt|;
if|if
condition|(
name|writeThreadNumber
operator|>=
name|nWriteThreads
condition|)
block|{
comment|// if we hit the end, back up and give a few write permits
name|writeThreadNumber
operator|--
expr_stmt|;
name|writePermissions
index|[
name|writeThreadNumber
index|]
operator|.
name|release
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// throttle readers so they don't steal too much CPU from the recovery thread
name|readPermission
operator|.
name|drainPermits
argument_list|()
expr_stmt|;
block|}
block|}
name|bufferedAddsApplied
operator|+=
name|recInfo
operator|.
name|adds
expr_stmt|;
block|}
comment|// put all writers back at full blast
for|for
control|(
name|Semaphore
name|writePerm
range|:
name|writePermissions
control|)
block|{
comment|// I don't think semaphores check for overflow, so we need to check mow many remain
name|int
name|neededPermits
init|=
name|Integer
operator|.
name|MAX_VALUE
operator|-
name|writePerm
operator|.
name|availablePermits
argument_list|()
decl_stmt|;
if|if
condition|(
name|neededPermits
operator|>
literal|0
condition|)
name|writePerm
operator|.
name|release
argument_list|(
name|neededPermits
argument_list|)
expr_stmt|;
block|}
comment|// put back readers at full blast and point back to live model
name|visibleModel
operator|=
name|model
expr_stmt|;
name|int
name|neededPermits
init|=
name|Integer
operator|.
name|MAX_VALUE
operator|-
name|readPermission
operator|.
name|availablePermits
argument_list|()
decl_stmt|;
if|if
condition|(
name|neededPermits
operator|>
literal|0
condition|)
name|readPermission
operator|.
name|release
argument_list|(
name|neededPermits
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"ROUND="
argument_list|,
name|operations
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|operations
operator|.
name|decrementAndGet
argument_list|()
operator|>
literal|0
condition|)
do|;
name|verbose
argument_list|(
literal|"bufferedAddsApplied="
argument_list|,
name|bufferedAddsApplied
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getLatestVersions
name|List
argument_list|<
name|Long
argument_list|>
name|getLatestVersions
parameter_list|()
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|recentVersions
decl_stmt|;
name|UpdateLog
operator|.
name|RecentUpdates
name|startingRecentUpdates
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
operator|.
name|getRecentUpdates
argument_list|()
decl_stmt|;
try|try
block|{
name|recentVersions
operator|=
name|startingRecentUpdates
operator|.
name|getVersions
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|startingRecentUpdates
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|recentVersions
return|;
block|}
comment|// The purpose of this test is to roughly model how solr uses lucene
DECL|field|reader
name|DirectoryReader
name|reader
decl_stmt|;
annotation|@
name|Test
DECL|method|testStressLuceneNRT
specifier|public
name|void
name|testStressLuceneNRT
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|commitPercent
init|=
literal|5
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
decl_stmt|;
specifier|final
name|int
name|softCommitPercent
init|=
literal|30
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|75
argument_list|)
decl_stmt|;
comment|// what percent of the commits are soft
specifier|final
name|int
name|deletePercent
init|=
literal|4
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
specifier|final
name|int
name|deleteByQueryPercent
init|=
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|int
name|ndocs
init|=
literal|5
operator|+
operator|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
name|random
operator|.
name|nextInt
argument_list|(
literal|25
argument_list|)
else|:
name|random
operator|.
name|nextInt
argument_list|(
literal|200
argument_list|)
operator|)
decl_stmt|;
name|int
name|nWriteThreads
init|=
literal|5
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxConcurrentCommits
init|=
name|nWriteThreads
decl_stmt|;
comment|// number of committers at a time... it should be<= maxWarmingSearchers
specifier|final
name|AtomicLong
name|operations
init|=
operator|new
name|AtomicLong
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
comment|// number of query operations to perform in total - crank up if
name|int
name|nReadThreads
init|=
literal|5
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|tombstones
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|syncCommits
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|verbose
argument_list|(
literal|"commitPercent="
argument_list|,
name|commitPercent
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"softCommitPercent="
argument_list|,
name|softCommitPercent
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"deletePercent="
argument_list|,
name|deletePercent
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"deleteByQueryPercent="
argument_list|,
name|deleteByQueryPercent
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"ndocs="
argument_list|,
name|ndocs
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"nWriteThreads="
argument_list|,
name|nWriteThreads
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"nReadThreads="
argument_list|,
name|nReadThreads
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"maxConcurrentCommits="
argument_list|,
name|maxConcurrentCommits
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"operations="
argument_list|,
name|operations
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"tombstones="
argument_list|,
name|tombstones
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"syncCommits="
argument_list|,
name|syncCommits
argument_list|)
expr_stmt|;
name|initModel
argument_list|(
name|ndocs
argument_list|)
expr_stmt|;
specifier|final
name|AtomicInteger
name|numCommitting
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<
name|Thread
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|FieldType
name|idFt
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|idFt
operator|.
name|setIndexed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|idFt
operator|.
name|setStored
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|idFt
operator|.
name|setOmitNorms
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|idFt
operator|.
name|setTokenized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|idFt
operator|.
name|setIndexOptions
argument_list|(
name|FieldInfo
operator|.
name|IndexOptions
operator|.
name|DOCS_ONLY
argument_list|)
expr_stmt|;
specifier|final
name|FieldType
name|ft2
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|ft2
operator|.
name|setIndexed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ft2
operator|.
name|setStored
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// model how solr does locking - only allow one thread to do a hard commit at once, and only one thread to do a soft commit, but
comment|// a hard commit in progress does not stop a soft commit.
specifier|final
name|Lock
name|hardCommitLock
init|=
name|syncCommits
condition|?
operator|new
name|ReentrantLock
argument_list|()
else|:
literal|null
decl_stmt|;
specifier|final
name|Lock
name|reopenLock
init|=
name|syncCommits
condition|?
operator|new
name|ReentrantLock
argument_list|()
else|:
literal|null
decl_stmt|;
comment|// RAMDirectory dir = new RAMDirectory();
comment|// final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|,
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setDoRandomForceMergeAssert
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// writer.commit();
comment|// reader = IndexReader.open(dir);
comment|// make this reader an NRT reader from the start to avoid the first non-writer openIfChanged
comment|// to only opening at the last commit point.
name|reader
operator|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
operator|.
name|w
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nWriteThreads
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
literal|"WRITER"
operator|+
name|i
argument_list|)
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
name|operations
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|oper
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
name|oper
operator|<
name|commitPercent
condition|)
block|{
if|if
condition|(
name|numCommitting
operator|.
name|incrementAndGet
argument_list|()
operator|<=
name|maxConcurrentCommits
condition|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|DocInfo
argument_list|>
name|newCommittedModel
decl_stmt|;
name|long
name|version
decl_stmt|;
name|DirectoryReader
name|oldReader
decl_stmt|;
name|boolean
name|softCommit
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
name|softCommitPercent
decl_stmt|;
if|if
condition|(
operator|!
name|softCommit
condition|)
block|{
comment|// only allow one hard commit to proceed at once
if|if
condition|(
name|hardCommitLock
operator|!=
literal|null
condition|)
name|hardCommitLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|verbose
argument_list|(
literal|"hardCommit start"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reopenLock
operator|!=
literal|null
condition|)
name|reopenLock
operator|.
name|lock
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|TestRealTimeGet
operator|.
name|this
init|)
block|{
name|newCommittedModel
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|DocInfo
argument_list|>
argument_list|(
name|model
argument_list|)
expr_stmt|;
comment|// take a snapshot
name|version
operator|=
name|snapshotCount
operator|++
expr_stmt|;
name|oldReader
operator|=
name|reader
expr_stmt|;
name|oldReader
operator|.
name|incRef
argument_list|()
expr_stmt|;
comment|// increment the reference since we will use this for reopening
block|}
if|if
condition|(
operator|!
name|softCommit
condition|)
block|{
comment|// must commit after taking a snapshot of the model
comment|// writer.commit();
block|}
name|verbose
argument_list|(
literal|"reopen start using"
argument_list|,
name|oldReader
argument_list|)
expr_stmt|;
name|DirectoryReader
name|newReader
decl_stmt|;
if|if
condition|(
name|softCommit
condition|)
block|{
name|newReader
operator|=
name|DirectoryReader
operator|.
name|openIfChanged
argument_list|(
name|oldReader
argument_list|,
name|writer
operator|.
name|w
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// will only open to last commit
name|newReader
operator|=
name|DirectoryReader
operator|.
name|openIfChanged
argument_list|(
name|oldReader
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newReader
operator|==
literal|null
condition|)
block|{
name|oldReader
operator|.
name|incRef
argument_list|()
expr_stmt|;
name|newReader
operator|=
name|oldReader
expr_stmt|;
block|}
name|oldReader
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|verbose
argument_list|(
literal|"reopen result"
argument_list|,
name|newReader
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|TestRealTimeGet
operator|.
name|this
init|)
block|{
assert|assert
name|newReader
operator|.
name|getRefCount
argument_list|()
operator|>
literal|0
assert|;
assert|assert
name|reader
operator|.
name|getRefCount
argument_list|()
operator|>
literal|0
assert|;
comment|// install the new reader if it's newest (and check the current version since another reader may have already been installed)
if|if
condition|(
name|newReader
operator|.
name|getVersion
argument_list|()
operator|>
name|reader
operator|.
name|getVersion
argument_list|()
condition|)
block|{
name|reader
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|reader
operator|=
name|newReader
expr_stmt|;
comment|// install this snapshot only if it's newer than the current one
if|if
condition|(
name|version
operator|>=
name|committedModelClock
condition|)
block|{
name|committedModel
operator|=
name|newCommittedModel
expr_stmt|;
name|committedModelClock
operator|=
name|version
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// close if unused
name|newReader
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|reopenLock
operator|!=
literal|null
condition|)
name|reopenLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|softCommit
condition|)
block|{
if|if
condition|(
name|hardCommitLock
operator|!=
literal|null
condition|)
name|hardCommitLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
name|numCommitting
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|int
name|id
init|=
name|rand
operator|.
name|nextInt
argument_list|(
name|ndocs
argument_list|)
decl_stmt|;
name|Object
name|sync
init|=
name|syncArr
index|[
name|id
index|]
decl_stmt|;
comment|// set the lastId before we actually change it sometimes to try and
comment|// uncover more race conditions between writing and reading
name|boolean
name|before
init|=
name|rand
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|before
condition|)
block|{
name|lastId
operator|=
name|id
expr_stmt|;
block|}
comment|// We can't concurrently update the same document and retain our invariants of increasing values
comment|// since we can't guarantee what order the updates will be executed.
synchronized|synchronized
init|(
name|sync
init|)
block|{
name|DocInfo
name|info
init|=
name|model
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|long
name|val
init|=
name|info
operator|.
name|val
decl_stmt|;
name|long
name|nextVal
init|=
name|Math
operator|.
name|abs
argument_list|(
name|val
argument_list|)
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|oper
operator|<
name|commitPercent
operator|+
name|deletePercent
condition|)
block|{
comment|// add tombstone first
if|if
condition|(
name|tombstones
condition|)
block|{
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"id"
argument_list|,
literal|"-"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|,
name|idFt
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|field
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|nextVal
argument_list|)
argument_list|,
name|ft2
argument_list|)
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"adding tombstone for id"
argument_list|,
name|id
argument_list|,
literal|"val="
argument_list|,
name|nextVal
argument_list|)
expr_stmt|;
name|writer
operator|.
name|updateDocument
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"-"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
name|verbose
argument_list|(
literal|"deleting id"
argument_list|,
name|id
argument_list|,
literal|"val="
argument_list|,
name|nextVal
argument_list|)
expr_stmt|;
name|writer
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|DocInfo
argument_list|(
literal|0
argument_list|,
operator|-
name|nextVal
argument_list|)
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"deleting id"
argument_list|,
name|id
argument_list|,
literal|"val="
argument_list|,
name|nextVal
argument_list|,
literal|"DONE"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|oper
operator|<
name|commitPercent
operator|+
name|deletePercent
operator|+
name|deleteByQueryPercent
condition|)
block|{
comment|//assertU("<delete><query>id:" + id + "</query></delete>");
comment|// add tombstone first
if|if
condition|(
name|tombstones
condition|)
block|{
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"id"
argument_list|,
literal|"-"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|,
name|idFt
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|field
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|nextVal
argument_list|)
argument_list|,
name|ft2
argument_list|)
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"adding tombstone for id"
argument_list|,
name|id
argument_list|,
literal|"val="
argument_list|,
name|nextVal
argument_list|)
expr_stmt|;
name|writer
operator|.
name|updateDocument
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"-"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
name|verbose
argument_list|(
literal|"deleteByQuery"
argument_list|,
name|id
argument_list|,
literal|"val="
argument_list|,
name|nextVal
argument_list|)
expr_stmt|;
name|writer
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|DocInfo
argument_list|(
literal|0
argument_list|,
operator|-
name|nextVal
argument_list|)
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"deleteByQuery"
argument_list|,
name|id
argument_list|,
literal|"val="
argument_list|,
name|nextVal
argument_list|,
literal|"DONE"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// model.put(id, nextVal);   // uncomment this and this test should fail.
comment|// assertU(adoc("id",Integer.toString(id), field, Long.toString(nextVal)));
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|,
name|idFt
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|field
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|nextVal
argument_list|)
argument_list|,
name|ft2
argument_list|)
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"adding id"
argument_list|,
name|id
argument_list|,
literal|"val="
argument_list|,
name|nextVal
argument_list|)
expr_stmt|;
name|writer
operator|.
name|updateDocument
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|tombstones
condition|)
block|{
comment|// remove tombstone after new addition (this should be optional?)
name|verbose
argument_list|(
literal|"deleting tombstone for id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|writer
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"-"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"deleting tombstone for id"
argument_list|,
name|id
argument_list|,
literal|"DONE"
argument_list|)
expr_stmt|;
block|}
name|model
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|DocInfo
argument_list|(
literal|0
argument_list|,
name|nextVal
argument_list|)
argument_list|)
expr_stmt|;
name|verbose
argument_list|(
literal|"adding id"
argument_list|,
name|id
argument_list|,
literal|"val="
argument_list|,
name|nextVal
argument_list|,
literal|"DONE"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|before
condition|)
block|{
name|lastId
operator|=
name|id
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nReadThreads
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
literal|"READER"
operator|+
name|i
argument_list|)
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
name|operations
operator|.
name|decrementAndGet
argument_list|()
operator|>=
literal|0
condition|)
block|{
comment|// bias toward a recently changed doc
name|int
name|id
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|25
condition|?
name|lastId
else|:
name|rand
operator|.
name|nextInt
argument_list|(
name|ndocs
argument_list|)
decl_stmt|;
comment|// when indexing, we update the index, then the model
comment|// so when querying, we should first check the model, and then the index
name|DocInfo
name|info
decl_stmt|;
synchronized|synchronized
init|(
name|TestRealTimeGet
operator|.
name|this
init|)
block|{
name|info
operator|=
name|committedModel
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|long
name|val
init|=
name|info
operator|.
name|val
decl_stmt|;
name|IndexReader
name|r
decl_stmt|;
synchronized|synchronized
init|(
name|TestRealTimeGet
operator|.
name|this
init|)
block|{
name|r
operator|=
name|reader
expr_stmt|;
name|r
operator|.
name|incRef
argument_list|()
expr_stmt|;
block|}
name|int
name|docid
init|=
name|getFirstMatch
argument_list|(
name|r
argument_list|,
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|docid
operator|<
literal|0
operator|&&
name|tombstones
condition|)
block|{
comment|// if we couldn't find the doc, look for it's tombstone
name|docid
operator|=
name|getFirstMatch
argument_list|(
name|r
argument_list|,
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"-"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|docid
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|val
operator|==
operator|-
literal|1L
condition|)
block|{
comment|// expected... no doc was added yet
name|r
operator|.
name|decRef
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|verbose
argument_list|(
literal|"ERROR: Couldn't find a doc  or tombstone for id"
argument_list|,
name|id
argument_list|,
literal|"using reader"
argument_list|,
name|r
argument_list|,
literal|"expected value"
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"No documents or tombstones found for id "
operator|+
name|id
operator|+
literal|", expected at least "
operator|+
name|val
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|docid
operator|<
literal|0
operator|&&
operator|!
name|tombstones
condition|)
block|{
comment|// nothing to do - we can't tell anything from a deleted doc without tombstones
block|}
else|else
block|{
if|if
condition|(
name|docid
operator|<
literal|0
condition|)
block|{
name|verbose
argument_list|(
literal|"ERROR: Couldn't find a doc for id"
argument_list|,
name|id
argument_list|,
literal|"using reader"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|docid
operator|>=
literal|0
argument_list|)
expr_stmt|;
comment|// we should have found the document, or it's tombstone
name|Document
name|doc
init|=
name|r
operator|.
name|document
argument_list|(
name|docid
argument_list|)
decl_stmt|;
name|long
name|foundVal
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|doc
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|foundVal
operator|<
name|Math
operator|.
name|abs
argument_list|(
name|val
argument_list|)
condition|)
block|{
name|verbose
argument_list|(
literal|"ERROR: id"
argument_list|,
name|id
argument_list|,
literal|"model_val="
argument_list|,
name|val
argument_list|,
literal|" foundVal="
argument_list|,
name|foundVal
argument_list|,
literal|"reader="
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|foundVal
operator|>=
name|Math
operator|.
name|abs
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|operations
operator|.
name|set
argument_list|(
operator|-
literal|1L
argument_list|)
expr_stmt|;
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getFirstMatch
specifier|public
name|int
name|getFirstMatch
parameter_list|(
name|IndexReader
name|r
parameter_list|,
name|Term
name|t
parameter_list|)
throws|throws
name|IOException
block|{
name|InvertedFields
name|fields
init|=
name|MultiFields
operator|.
name|getFields
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
name|Terms
name|terms
init|=
name|fields
operator|.
name|terms
argument_list|(
name|t
operator|.
name|field
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
name|BytesRef
name|termBytes
init|=
name|t
operator|.
name|bytes
argument_list|()
decl_stmt|;
specifier|final
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|termsEnum
operator|.
name|seekExact
argument_list|(
name|termBytes
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|DocsEnum
name|docs
init|=
name|termsEnum
operator|.
name|docs
argument_list|(
name|MultiFields
operator|.
name|getLiveDocs
argument_list|(
name|r
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|id
init|=
name|docs
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|int
name|next
init|=
name|docs
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
return|return
name|id
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|?
operator|-
literal|1
else|:
name|id
return|;
block|}
block|}
end_class
end_unit
