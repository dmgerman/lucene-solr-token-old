begin_unit
begin_package
DECL|package|org.apache.solr.search.join
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|join
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|BlockJoinFacetSimpleTest
specifier|public
class|class
name|BlockJoinFacetSimpleTest
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|handler
specifier|private
specifier|static
name|String
name|handler
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-blockjoinfacetcomponent.xml"
argument_list|,
literal|"schema-blockjoinfacetcomponent.xml"
argument_list|)
expr_stmt|;
name|handler
operator|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"blockJoinDocSetFacetRH"
else|:
literal|"blockJoinFacetRH"
expr_stmt|;
name|createIndex
argument_list|()
expr_stmt|;
block|}
DECL|method|createIndex
specifier|public
specifier|static
name|void
name|createIndex
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|match
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|docs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
comment|// match
name|match
operator|=
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|,
literal|"type_s"
argument_list|,
literal|"parent"
argument_list|,
literal|"BRAND_s"
argument_list|,
literal|"Nike"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"</doc>"
argument_list|,
literal|""
operator|+
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"11"
argument_list|,
literal|"type_s"
argument_list|,
literal|"child"
argument_list|,
literal|"COLOR_s"
argument_list|,
literal|"Red"
argument_list|,
literal|"SIZE_s"
argument_list|,
literal|"XL"
argument_list|)
operator|+
comment|// matches child filter
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"12"
argument_list|,
literal|"type_s"
argument_list|,
literal|"child"
argument_list|,
literal|"COLOR_s"
argument_list|,
literal|"Red"
argument_list|,
literal|"SIZE_s"
argument_list|,
literal|"XL"
argument_list|)
operator|+
comment|// matches child filter
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"13"
argument_list|,
literal|"type_s"
argument_list|,
literal|"child"
argument_list|,
literal|"COLOR_s"
argument_list|,
literal|"Blue"
argument_list|,
literal|"SIZE_s"
argument_list|,
literal|"XL"
argument_list|)
operator|+
literal|"</doc>"
argument_list|)
argument_list|,
comment|// mismatch
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"100"
argument_list|,
literal|"type_s"
argument_list|,
literal|"parent"
argument_list|,
literal|"BRAND_s"
argument_list|,
literal|"Reebok"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"</doc>"
argument_list|,
literal|""
operator|+
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"101"
argument_list|,
literal|"type_s"
argument_list|,
literal|"child"
argument_list|,
literal|"COLOR_s"
argument_list|,
literal|"Red"
argument_list|,
literal|"SIZE_s"
argument_list|,
literal|"M"
argument_list|)
operator|+
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"102"
argument_list|,
literal|"type_s"
argument_list|,
literal|"child"
argument_list|,
literal|"COLOR_s"
argument_list|,
literal|"Blue"
argument_list|,
literal|"SIZE_s"
argument_list|,
literal|"XL"
argument_list|)
operator|+
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"104"
argument_list|,
literal|"type_s"
argument_list|,
literal|"child"
argument_list|,
literal|"COLOR_s"
argument_list|,
literal|"While"
argument_list|,
literal|"SIZE_s"
argument_list|,
literal|"XL"
argument_list|)
operator|+
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"105"
argument_list|,
literal|"type_s"
argument_list|,
literal|"child"
argument_list|,
literal|"COLOR_s"
argument_list|,
literal|"Green"
argument_list|,
literal|"SIZE_s"
argument_list|,
literal|"XXXL"
argument_list|)
operator|+
literal|"</doc>"
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|docs
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|d
range|:
name|docs
control|)
block|{
name|assertU
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// let's have a deleted doc
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|assertU
argument_list|(
literal|"let's have two segs"
argument_list|,
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
literal|"overriding matching doc"
argument_list|,
name|match
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
literal|9
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimple
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
comment|//query
comment|// parents
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"type_s:parent"
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
literal|2
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|String
name|alt
index|[]
index|[]
init|=
block|{
block|{
literal|"q"
block|,
literal|"{!parent which=\"type_s:parent\"}+COLOR_s:Red +SIZE_s:XL"
block|}
block|,
block|{
literal|"q"
block|,
literal|"+{!parent which=\"type_s:parent\"}+COLOR_s:Red +BRAND_s:Nike"
block|}
block|,
block|{
literal|"q"
block|,
literal|"{!parent which=\"type_s:parent\"}+COLOR_s:Red"
block|,
literal|"fq"
block|,
literal|"BRAND_s:Nike"
block|}
block|}
decl_stmt|;
for|for
control|(
name|String
name|param
index|[]
range|:
name|alt
control|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|reqParams
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|param
argument_list|)
argument_list|)
decl_stmt|;
name|reqParams
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"qt"
argument_list|,
name|handler
argument_list|,
literal|"facet"
argument_list|,
operator|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
operator|)
argument_list|,
comment|// it's indifferent to
literal|"child.facet.field"
argument_list|,
literal|"COLOR_s"
argument_list|,
literal|"child.facet.field"
argument_list|,
literal|"SIZE_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|reqParams
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
literal|1
operator|+
literal|"']"
argument_list|,
literal|"//lst[@name='COLOR_s']/int[@name='Red'][.='1']"
argument_list|,
comment|//  "//lst[@name='COLOR_s']/int[@name='Blue'][.='1']",
literal|"count(//lst[@name='COLOR_s']/int)=1"
argument_list|,
literal|"//lst[@name='SIZE_s']/int[@name='XL'][.='1']"
argument_list|,
literal|"count(//lst[@name='SIZE_s']/int)=1"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
