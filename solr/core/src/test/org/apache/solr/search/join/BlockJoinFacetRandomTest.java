begin_unit
begin_package
DECL|package|org.apache.solr.search.join
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|join
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|BlockJoinFacetRandomTest
specifier|public
class|class
name|BlockJoinFacetRandomTest
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|handler
specifier|private
specifier|static
name|String
name|handler
decl_stmt|;
DECL|field|NUMBER_OF_PARENTS
specifier|private
specifier|static
specifier|final
name|int
name|NUMBER_OF_PARENTS
init|=
literal|10
decl_stmt|;
DECL|field|NUMBER_OF_VALUES
specifier|private
specifier|static
specifier|final
name|int
name|NUMBER_OF_VALUES
init|=
literal|5
decl_stmt|;
DECL|field|NUMBER_OF_CHILDREN
specifier|private
specifier|static
specifier|final
name|int
name|NUMBER_OF_CHILDREN
init|=
literal|5
decl_stmt|;
DECL|field|facetFields
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|facetFields
init|=
block|{
literal|"brand"
block|,
literal|"category"
block|,
literal|"color"
block|,
literal|"size"
block|,
literal|"type"
block|}
decl_stmt|;
DECL|field|otherValues
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|otherValues
init|=
block|{
literal|"x_"
block|,
literal|"y_"
block|,
literal|"z_"
block|}
decl_stmt|;
DECL|field|PARENT_VALUE_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|PARENT_VALUE_PREFIX
init|=
literal|"prn_"
decl_stmt|;
DECL|field|CHILD_VALUE_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|CHILD_VALUE_PREFIX
init|=
literal|"chd_"
decl_stmt|;
DECL|field|facets
specifier|private
specifier|static
name|Facet
index|[]
name|facets
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-blockjoinfacetcomponent.xml"
argument_list|,
literal|"schema-blockjoinfacetcomponent.xml"
argument_list|)
expr_stmt|;
name|handler
operator|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"blockJoinDocSetFacetRH"
else|:
literal|"blockJoinFacetRH"
expr_stmt|;
name|facets
operator|=
name|createFacets
argument_list|()
expr_stmt|;
name|createIndex
argument_list|()
expr_stmt|;
block|}
DECL|method|createIndex
specifier|public
specifier|static
name|void
name|createIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|blocks
init|=
name|createBlocks
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|block
range|:
name|blocks
control|)
block|{
name|List
argument_list|<
name|XmlDoc
argument_list|>
name|updBlock
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|blockFields
range|:
name|block
control|)
block|{
name|blockFields
operator|.
name|add
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
name|blockFields
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|updBlock
operator|.
name|add
argument_list|(
name|doc
argument_list|(
name|blockFields
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|blockFields
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
comment|//got xmls for every doc. now nest all into the last one
name|XmlDoc
name|parentDoc
init|=
name|updBlock
operator|.
name|get
argument_list|(
name|updBlock
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|parentDoc
operator|.
name|xml
operator|=
name|parentDoc
operator|.
name|xml
operator|.
name|replace
argument_list|(
literal|"</doc>"
argument_list|,
name|updBlock
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|updBlock
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"[\\[\\]]"
argument_list|,
literal|""
argument_list|)
operator|+
literal|"</doc>"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|parentDoc
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// force empty segment (actually, this will no longer create an empty segment, only a new segments_n)
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
name|i
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
DECL|method|createBlocks
specifier|private
specifier|static
name|List
argument_list|<
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|createBlocks
parameter_list|()
block|{
name|List
argument_list|<
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|blocks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUMBER_OF_PARENTS
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|block
init|=
name|createChildrenBlock
argument_list|(
name|i
argument_list|,
name|facets
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldsList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|fieldsList
operator|.
name|add
argument_list|(
literal|"parent_s"
argument_list|)
expr_stmt|;
name|fieldsList
operator|.
name|add
argument_list|(
name|parent
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Facet
name|facet
range|:
name|facets
control|)
block|{
for|for
control|(
name|RandomFacetValue
name|facetValue
range|:
name|facet
operator|.
name|facetValues
control|)
block|{
name|RandomParentPosting
name|posting
init|=
name|facetValue
operator|.
name|postings
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|posting
operator|.
name|parentHasOwnValue
condition|)
block|{
name|fieldsList
operator|.
name|add
argument_list|(
name|facet
operator|.
name|getFieldNameForIndex
argument_list|()
argument_list|)
expr_stmt|;
name|fieldsList
operator|.
name|add
argument_list|(
name|facetValue
operator|.
name|facetValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|facet
operator|.
name|multiValued
operator|&&
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|fieldsList
operator|.
name|add
argument_list|(
name|facet
operator|.
name|getFieldNameForIndex
argument_list|()
argument_list|)
expr_stmt|;
name|fieldsList
operator|.
name|add
argument_list|(
name|someOtherValue
argument_list|(
name|facet
operator|.
name|fieldType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|facet
operator|.
name|additionalValueIsAllowedForParent
argument_list|(
name|i
argument_list|)
operator|&&
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|fieldsList
operator|.
name|add
argument_list|(
name|facet
operator|.
name|getFieldNameForIndex
argument_list|()
argument_list|)
expr_stmt|;
name|fieldsList
operator|.
name|add
argument_list|(
name|someOtherValue
argument_list|(
name|facet
operator|.
name|fieldType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|block
operator|.
name|add
argument_list|(
name|fieldsList
argument_list|)
expr_stmt|;
name|blocks
operator|.
name|add
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|blocks
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|blocks
return|;
block|}
DECL|method|createChildrenBlock
specifier|private
specifier|static
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|createChildrenBlock
parameter_list|(
name|int
name|parentIndex
parameter_list|,
name|Facet
index|[]
name|facets
parameter_list|)
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|block
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUMBER_OF_CHILDREN
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fieldsList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|fieldsList
operator|.
name|add
argument_list|(
literal|"child_s"
argument_list|)
expr_stmt|;
name|fieldsList
operator|.
name|add
argument_list|(
name|child
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|fieldsList
operator|.
name|add
argument_list|(
literal|"parentchild_s"
argument_list|)
expr_stmt|;
name|fieldsList
operator|.
name|add
argument_list|(
name|parentChild
argument_list|(
name|parentIndex
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Facet
name|facet
range|:
name|facets
control|)
block|{
for|for
control|(
name|RandomFacetValue
name|facetValue
range|:
name|facet
operator|.
name|facetValues
control|)
block|{
name|RandomParentPosting
name|posting
init|=
name|facetValue
operator|.
name|postings
index|[
name|parentIndex
index|]
decl_stmt|;
if|if
condition|(
name|posting
operator|.
name|childrenHaveValue
index|[
name|i
index|]
condition|)
block|{
name|fieldsList
operator|.
name|add
argument_list|(
name|facet
operator|.
name|getFieldNameForIndex
argument_list|()
argument_list|)
expr_stmt|;
name|fieldsList
operator|.
name|add
argument_list|(
name|facetValue
operator|.
name|facetValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|facet
operator|.
name|multiValued
operator|&&
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|fieldsList
operator|.
name|add
argument_list|(
name|facet
operator|.
name|getFieldNameForIndex
argument_list|()
argument_list|)
expr_stmt|;
name|fieldsList
operator|.
name|add
argument_list|(
name|someOtherValue
argument_list|(
name|facet
operator|.
name|fieldType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|facet
operator|.
name|additionalValueIsAllowedForChild
argument_list|(
name|parentIndex
argument_list|,
name|i
argument_list|)
operator|&&
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|fieldsList
operator|.
name|add
argument_list|(
name|facet
operator|.
name|getFieldNameForIndex
argument_list|()
argument_list|)
expr_stmt|;
name|fieldsList
operator|.
name|add
argument_list|(
name|someOtherValue
argument_list|(
name|facet
operator|.
name|fieldType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|block
operator|.
name|add
argument_list|(
name|fieldsList
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|block
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|block
return|;
block|}
DECL|method|parent
specifier|private
specifier|static
name|String
name|parent
parameter_list|(
name|int
name|docNumber
parameter_list|)
block|{
return|return
name|fieldValue
argument_list|(
name|PARENT_VALUE_PREFIX
argument_list|,
name|docNumber
argument_list|)
return|;
block|}
DECL|method|child
specifier|private
specifier|static
name|String
name|child
parameter_list|(
name|int
name|docNumber
parameter_list|)
block|{
return|return
name|fieldValue
argument_list|(
name|CHILD_VALUE_PREFIX
argument_list|,
name|docNumber
argument_list|)
return|;
block|}
DECL|method|someOtherValue
specifier|private
specifier|static
name|String
name|someOtherValue
parameter_list|(
name|FieldType
name|fieldType
parameter_list|)
block|{
name|int
name|randomValue
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|NUMBER_OF_VALUES
argument_list|)
operator|+
name|NUMBER_OF_VALUES
decl_stmt|;
switch|switch
condition|(
name|fieldType
condition|)
block|{
case|case
name|String
case|:
name|int
name|index
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|otherValues
operator|.
name|length
argument_list|)
decl_stmt|;
return|return
name|otherValues
index|[
name|index
index|]
operator|+
name|randomValue
return|;
case|case
name|Float
case|:
return|return
name|createFloatValue
argument_list|(
name|randomValue
argument_list|)
return|;
default|default:
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|randomValue
argument_list|)
return|;
block|}
block|}
DECL|method|createFloatValue
specifier|private
specifier|static
name|String
name|createFloatValue
parameter_list|(
name|int
name|intValue
parameter_list|)
block|{
return|return
name|intValue
operator|+
literal|".01"
return|;
block|}
DECL|method|fieldValue
specifier|private
specifier|static
name|String
name|fieldValue
parameter_list|(
name|String
name|valuePrefix
parameter_list|,
name|int
name|docNumber
parameter_list|)
block|{
return|return
name|valuePrefix
operator|+
name|docNumber
return|;
block|}
DECL|method|parentChild
specifier|private
specifier|static
name|String
name|parentChild
parameter_list|(
name|int
name|parentIndex
parameter_list|,
name|int
name|childIndex
parameter_list|)
block|{
return|return
name|parent
argument_list|(
name|parentIndex
argument_list|)
operator|+
literal|"_"
operator|+
name|child
argument_list|(
name|childIndex
argument_list|)
return|;
block|}
annotation|@
name|AfterClass
DECL|method|cleanUp
specifier|public
specifier|static
name|void
name|cleanUp
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|delQ
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|optimize
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
operator|(
name|commit
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidation
specifier|public
name|void
name|testValidation
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQ
argument_list|(
literal|"Component is ignored"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"+parent_s:(prn_1 prn_2)"
argument_list|,
literal|"qt"
argument_list|,
name|handler
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//doc/str[@name=\"parent_s\"]='prn_1'"
argument_list|,
literal|"//doc/str[@name=\"parent_s\"]='prn_2'"
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"Validation exception is expected because query is not ToParentBlockJoinQuery"
argument_list|,
name|BlockJoinFacetComponent
operator|.
name|NO_TO_PARENT_BJQ_MESSAGE
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"t"
argument_list|,
literal|"qt"
argument_list|,
name|handler
argument_list|,
name|BlockJoinFacetComponent
operator|.
name|CHILD_FACET_FIELD_PARAMETER
argument_list|,
name|facetFields
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"Validation exception is expected because facet field is not defined in schema"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!parent which=\"parent_s:[* TO *]\"}child_s:chd_1"
argument_list|,
literal|"qt"
argument_list|,
name|handler
argument_list|,
name|BlockJoinFacetComponent
operator|.
name|CHILD_FACET_FIELD_PARAMETER
argument_list|,
literal|"undefinedField"
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllDocs
specifier|public
name|void
name|testAllDocs
parameter_list|()
throws|throws
name|Exception
block|{
name|int
index|[]
name|randomFacets
init|=
name|getRandomArray
argument_list|(
name|facets
operator|.
name|length
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
literal|"Random facets for all docs should be calculated"
argument_list|,
name|req
argument_list|(
name|randomFacetsRequest
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|randomFacets
argument_list|)
argument_list|)
argument_list|,
name|expectedResponse
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|randomFacets
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRandomParentsAllChildren
specifier|public
name|void
name|testRandomParentsAllChildren
parameter_list|()
throws|throws
name|Exception
block|{
name|int
index|[]
name|randomParents
init|=
name|getRandomArray
argument_list|(
name|NUMBER_OF_PARENTS
argument_list|)
decl_stmt|;
name|int
index|[]
name|randomFacets
init|=
name|getRandomArray
argument_list|(
name|facets
operator|.
name|length
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
literal|"Random facets for random parents should be calculated"
argument_list|,
name|req
argument_list|(
name|randomFacetsRequest
argument_list|(
name|randomParents
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|randomFacets
argument_list|)
argument_list|)
argument_list|,
name|expectedResponse
argument_list|(
name|randomParents
argument_list|,
literal|null
argument_list|,
name|randomFacets
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRandomChildrenAllParents
specifier|public
name|void
name|testRandomChildrenAllParents
parameter_list|()
throws|throws
name|Exception
block|{
name|int
index|[]
name|randomChildren
init|=
name|getRandomArray
argument_list|(
name|NUMBER_OF_CHILDREN
argument_list|)
decl_stmt|;
name|int
index|[]
name|randomFacets
init|=
name|getRandomArray
argument_list|(
name|facets
operator|.
name|length
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
literal|"Random facets for all parent docs should be calculated"
argument_list|,
name|req
argument_list|(
name|randomFacetsRequest
argument_list|(
literal|null
argument_list|,
name|randomChildren
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|randomFacets
argument_list|)
argument_list|)
argument_list|,
name|expectedResponse
argument_list|(
literal|null
argument_list|,
name|randomChildren
argument_list|,
name|randomFacets
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRandomChildrenRandomParents
specifier|public
name|void
name|testRandomChildrenRandomParents
parameter_list|()
throws|throws
name|Exception
block|{
name|int
index|[]
name|randomParents
init|=
name|getRandomArray
argument_list|(
name|NUMBER_OF_PARENTS
argument_list|)
decl_stmt|;
name|int
index|[]
name|randomChildren
init|=
name|getRandomArray
argument_list|(
name|NUMBER_OF_CHILDREN
argument_list|)
decl_stmt|;
name|int
index|[]
name|randomFacets
init|=
name|getRandomArray
argument_list|(
name|facets
operator|.
name|length
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
literal|"Random facets for all parent docs should be calculated"
argument_list|,
name|req
argument_list|(
name|randomFacetsRequest
argument_list|(
name|randomParents
argument_list|,
name|randomChildren
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|randomFacets
argument_list|)
argument_list|)
argument_list|,
name|expectedResponse
argument_list|(
name|randomParents
argument_list|,
name|randomChildren
argument_list|,
name|randomFacets
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRandomChildrenRandomParentsRandomRelations
specifier|public
name|void
name|testRandomChildrenRandomParentsRandomRelations
parameter_list|()
throws|throws
name|Exception
block|{
name|int
index|[]
name|randomParents
init|=
name|getRandomArray
argument_list|(
name|NUMBER_OF_PARENTS
argument_list|)
decl_stmt|;
name|int
index|[]
name|randomChildren
init|=
name|getRandomArray
argument_list|(
name|NUMBER_OF_CHILDREN
argument_list|)
decl_stmt|;
name|int
index|[]
name|parentRelations
init|=
name|getRandomArray
argument_list|(
name|NUMBER_OF_PARENTS
argument_list|)
decl_stmt|;
name|int
index|[]
name|childRelations
init|=
name|getRandomArray
argument_list|(
name|NUMBER_OF_CHILDREN
argument_list|)
decl_stmt|;
name|int
index|[]
name|randomFacets
init|=
name|getRandomArray
argument_list|(
name|facets
operator|.
name|length
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
literal|"Random facets for all parent docs should be calculated"
argument_list|,
name|req
argument_list|(
name|randomFacetsRequest
argument_list|(
name|randomParents
argument_list|,
name|randomChildren
argument_list|,
name|parentRelations
argument_list|,
name|childRelations
argument_list|,
literal|null
argument_list|,
name|randomFacets
argument_list|)
argument_list|)
argument_list|,
name|expectedResponse
argument_list|(
name|intersection
argument_list|(
name|randomParents
argument_list|,
name|parentRelations
argument_list|)
argument_list|,
name|intersection
argument_list|(
name|randomChildren
argument_list|,
name|childRelations
argument_list|)
argument_list|,
name|randomFacets
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRandomFilters
specifier|public
name|void
name|testRandomFilters
parameter_list|()
throws|throws
name|Exception
block|{
name|int
index|[]
name|randomParents
init|=
name|getRandomArray
argument_list|(
name|NUMBER_OF_PARENTS
argument_list|)
decl_stmt|;
name|int
index|[]
name|randomChildren
init|=
name|getRandomArray
argument_list|(
name|NUMBER_OF_CHILDREN
argument_list|)
decl_stmt|;
name|int
index|[]
name|parentRelations
init|=
name|getRandomArray
argument_list|(
name|NUMBER_OF_PARENTS
argument_list|)
decl_stmt|;
name|int
index|[]
name|childRelations
init|=
name|getRandomArray
argument_list|(
name|NUMBER_OF_CHILDREN
argument_list|)
decl_stmt|;
name|int
index|[]
name|randomParentFilters
init|=
name|getRandomArray
argument_list|(
name|NUMBER_OF_PARENTS
argument_list|)
decl_stmt|;
name|int
index|[]
name|randomFacets
init|=
name|getRandomArray
argument_list|(
name|facets
operator|.
name|length
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
literal|"Random facets for all parent docs should be calculated"
argument_list|,
name|req
argument_list|(
name|randomFacetsRequest
argument_list|(
name|randomParents
argument_list|,
name|randomChildren
argument_list|,
name|parentRelations
argument_list|,
name|childRelations
argument_list|,
name|randomParentFilters
argument_list|,
name|randomFacets
argument_list|)
argument_list|)
argument_list|,
name|expectedResponse
argument_list|(
name|intersection
argument_list|(
name|intersection
argument_list|(
name|randomParents
argument_list|,
name|parentRelations
argument_list|)
argument_list|,
name|randomParentFilters
argument_list|)
argument_list|,
name|intersection
argument_list|(
name|randomChildren
argument_list|,
name|childRelations
argument_list|)
argument_list|,
name|randomFacets
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|intersection
specifier|private
name|int
index|[]
name|intersection
parameter_list|(
name|int
index|[]
name|firstArray
parameter_list|,
name|int
index|[]
name|secondArray
parameter_list|)
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|firstSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|firstArray
control|)
block|{
name|firstSet
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Integer
argument_list|>
name|secondSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|secondArray
control|)
block|{
name|secondSet
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|firstSet
operator|.
name|retainAll
argument_list|(
name|secondSet
argument_list|)
expr_stmt|;
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
name|firstSet
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|integer
range|:
name|firstSet
control|)
block|{
name|result
index|[
name|i
operator|++
index|]
operator|=
name|integer
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|randomFacetsRequest
specifier|private
name|String
index|[]
name|randomFacetsRequest
parameter_list|(
name|int
index|[]
name|parents
parameter_list|,
name|int
index|[]
name|children
parameter_list|,
name|int
index|[]
name|parentRelations
parameter_list|,
name|int
index|[]
name|childRelations
parameter_list|,
name|int
index|[]
name|parentFilters
parameter_list|,
name|int
index|[]
name|facetNumbers
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"q"
argument_list|,
name|parentsQuery
argument_list|(
name|parents
argument_list|)
argument_list|,
literal|"qt"
argument_list|,
name|handler
argument_list|,
literal|"pq"
argument_list|,
literal|"parent_s:[* TO *]"
argument_list|,
literal|"chq"
argument_list|,
name|childrenQuery
argument_list|(
name|children
argument_list|,
name|parentRelations
argument_list|,
name|childRelations
argument_list|)
argument_list|,
literal|"fq"
argument_list|,
name|flatQuery
argument_list|(
name|parentFilters
argument_list|,
literal|"parent_s"
argument_list|,
name|PARENT_VALUE_PREFIX
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|facetNumber
range|:
name|facetNumbers
control|)
block|{
name|params
operator|.
name|add
argument_list|(
name|BlockJoinFacetComponent
operator|.
name|CHILD_FACET_FIELD_PARAMETER
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|facets
index|[
name|facetNumber
index|]
operator|.
name|getFieldNameForIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|params
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|params
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|parentsQuery
specifier|private
name|String
name|parentsQuery
parameter_list|(
name|int
index|[]
name|parents
parameter_list|)
block|{
name|String
name|result
decl_stmt|;
if|if
condition|(
name|parents
operator|==
literal|null
condition|)
block|{
name|result
operator|=
literal|"{!parent which=$pq v=$chq}"
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|flatQuery
argument_list|(
name|parents
argument_list|,
literal|"parent_s"
argument_list|,
name|PARENT_VALUE_PREFIX
argument_list|)
operator|+
literal|" +_query_:\"{!parent which=$pq v=$chq}\""
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|flatQuery
specifier|private
name|String
name|flatQuery
parameter_list|(
name|int
index|[]
name|docNumbers
parameter_list|,
specifier|final
name|String
name|fieldName
parameter_list|,
name|String
name|fieldValuePrefix
parameter_list|)
block|{
name|String
name|result
decl_stmt|;
if|if
condition|(
name|docNumbers
operator|==
literal|null
condition|)
block|{
name|result
operator|=
literal|"+"
operator|+
name|fieldName
operator|+
literal|":[* TO *]"
expr_stmt|;
block|}
else|else
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"+"
operator|+
name|fieldName
operator|+
literal|":("
argument_list|)
decl_stmt|;
if|if
condition|(
name|docNumbers
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"match_nothing_value"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|docNumber
range|:
name|docNumbers
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|fieldValue
argument_list|(
name|fieldValuePrefix
argument_list|,
name|docNumber
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|deleteCharAt
argument_list|(
name|builder
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|result
operator|=
name|builder
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|childrenQuery
specifier|private
name|String
name|childrenQuery
parameter_list|(
name|int
index|[]
name|children
parameter_list|,
name|int
index|[]
name|parentRelations
parameter_list|,
name|int
index|[]
name|childRelations
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|flatQuery
argument_list|(
name|children
argument_list|,
literal|"child_s"
argument_list|,
name|CHILD_VALUE_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentRelations
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|childRelations
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|" +parentchild_s:[* TO *]"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|" +parentchild_s:("
argument_list|)
expr_stmt|;
if|if
condition|(
name|childRelations
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"match_nothing_value"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|childRelation
range|:
name|childRelations
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUMBER_OF_PARENTS
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|parentChild
argument_list|(
name|i
argument_list|,
name|childRelation
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|deleteCharAt
argument_list|(
name|builder
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|" +parentchild_s:("
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentRelations
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"match_nothing_value"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|childRelations
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|int
name|parentRelation
range|:
name|parentRelations
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUMBER_OF_CHILDREN
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|parentChild
argument_list|(
name|parentRelation
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|childRelations
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"match_nothing_value"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|parentRelation
range|:
name|parentRelations
control|)
block|{
for|for
control|(
name|int
name|childRelation
range|:
name|childRelations
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|parentChild
argument_list|(
name|parentRelation
argument_list|,
name|childRelation
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|deleteCharAt
argument_list|(
name|builder
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|expectedResponse
specifier|private
name|String
index|[]
name|expectedResponse
parameter_list|(
name|int
index|[]
name|parents
parameter_list|,
name|int
index|[]
name|children
parameter_list|,
name|int
index|[]
name|facetNumbers
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
operator|&&
name|children
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
literal|"//*[@numFound='"
operator|+
literal|0
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|parents
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
literal|"//*[@numFound='"
operator|+
name|NUMBER_OF_PARENTS
operator|+
literal|"']"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUMBER_OF_PARENTS
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|add
argument_list|(
literal|"//doc/str[@name=\"parent_s\"]='"
operator|+
name|parent
argument_list|(
name|i
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|.
name|add
argument_list|(
literal|"//*[@numFound='"
operator|+
name|parents
operator|.
name|length
operator|+
literal|"']"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|parent
range|:
name|parents
control|)
block|{
name|result
operator|.
name|add
argument_list|(
literal|"//doc/str[@name=\"parent_s\"]='"
operator|+
name|parent
argument_list|(
name|parent
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|facetNumbers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|facetNumber
range|:
name|facetNumbers
control|)
block|{
name|result
operator|.
name|add
argument_list|(
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|facets
index|[
name|facetNumber
index|]
operator|.
name|getFieldNameForIndex
argument_list|()
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|RandomFacetValue
index|[]
name|facetValues
init|=
name|facets
index|[
name|facetNumber
index|]
operator|.
name|facetValues
decl_stmt|;
for|for
control|(
name|RandomFacetValue
name|facetValue
range|:
name|facetValues
control|)
block|{
name|int
name|expectedFacetCount
init|=
name|facetValue
operator|.
name|getFacetCount
argument_list|(
name|parents
argument_list|,
name|children
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedFacetCount
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|facets
index|[
name|facetNumber
index|]
operator|.
name|getFieldNameForIndex
argument_list|()
operator|+
literal|"']/int[@name='"
operator|+
name|facetValue
operator|.
name|facetValue
operator|+
literal|"' and text()='"
operator|+
name|expectedFacetCount
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|result
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|result
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|createFacets
specifier|private
specifier|static
name|Facet
index|[]
name|createFacets
parameter_list|()
block|{
name|int
index|[]
name|facetsToCreate
init|=
name|getRandomArray
argument_list|(
name|facetFields
operator|.
name|length
argument_list|)
decl_stmt|;
name|Facet
index|[]
name|facets
init|=
operator|new
name|Facet
index|[
name|facetsToCreate
operator|.
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|facetNumber
range|:
name|facetsToCreate
control|)
block|{
name|facets
index|[
name|i
operator|++
index|]
operator|=
operator|new
name|Facet
argument_list|(
name|facetFields
index|[
name|facetNumber
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|facets
return|;
block|}
DECL|method|getRandomArray
specifier|private
specifier|static
name|int
index|[]
name|getRandomArray
parameter_list|(
name|int
name|maxNumber
parameter_list|)
block|{
name|int
index|[]
name|buffer
init|=
operator|new
name|int
index|[
name|maxNumber
index|]
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxNumber
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|buffer
index|[
name|count
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
name|count
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|class|Facet
specifier|private
specifier|static
class|class
name|Facet
block|{
DECL|field|fieldName
specifier|private
name|String
name|fieldName
decl_stmt|;
DECL|field|multiValued
specifier|private
name|boolean
name|multiValued
init|=
literal|true
decl_stmt|;
DECL|field|fieldType
name|FieldType
name|fieldType
decl_stmt|;
DECL|field|facetValues
name|RandomFacetValue
index|[]
name|facetValues
decl_stmt|;
DECL|method|Facet
name|Facet
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
name|fieldType
operator|=
name|FieldType
operator|.
name|values
argument_list|()
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|FieldType
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
index|]
expr_stmt|;
if|if
condition|(
name|FieldType
operator|.
name|String
operator|.
name|equals
argument_list|(
name|fieldType
argument_list|)
condition|)
block|{
comment|// sortedDocValues are supported for string fields only
name|multiValued
operator|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
expr_stmt|;
block|}
name|fieldType
operator|=
name|FieldType
operator|.
name|String
expr_stmt|;
name|facetValues
operator|=
operator|new
name|RandomFacetValue
index|[
name|NUMBER_OF_VALUES
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUMBER_OF_VALUES
condition|;
name|i
operator|++
control|)
block|{
name|String
name|value
init|=
name|createRandomValue
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|facetValues
index|[
name|i
index|]
operator|=
operator|new
name|RandomFacetValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|multiValued
condition|)
block|{
name|makeValuesSingle
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createRandomValue
specifier|private
name|String
name|createRandomValue
parameter_list|(
name|int
name|i
parameter_list|)
block|{
switch|switch
condition|(
name|fieldType
condition|)
block|{
case|case
name|String
case|:
return|return
name|fieldName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
operator|+
literal|"_"
operator|+
name|i
return|;
case|case
name|Float
case|:
return|return
name|createFloatValue
argument_list|(
name|i
argument_list|)
return|;
default|default:
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
DECL|method|getFieldNameForIndex
name|String
name|getFieldNameForIndex
parameter_list|()
block|{
name|String
name|multiValuedPostfix
init|=
name|multiValued
condition|?
literal|"_multi"
else|:
literal|"_single"
decl_stmt|;
return|return
name|fieldName
operator|+
name|fieldType
operator|.
name|fieldPostfix
operator|+
name|multiValuedPostfix
return|;
block|}
DECL|method|makeValuesSingle
specifier|private
name|void
name|makeValuesSingle
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUMBER_OF_PARENTS
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|values
init|=
name|getValuesForParent
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|singleValueOrd
init|=
name|values
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|setSingleValueForParent
argument_list|(
name|i
argument_list|,
name|singleValueOrd
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NUMBER_OF_CHILDREN
condition|;
name|j
operator|++
control|)
block|{
name|values
operator|=
name|getValuesForChild
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|singleValueOrd
init|=
name|values
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|setSingleValueForChild
argument_list|(
name|i
argument_list|,
name|j
argument_list|,
name|singleValueOrd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|getValuesForParent
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|getValuesForParent
parameter_list|(
name|int
name|parentNumber
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUMBER_OF_VALUES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|facetValues
index|[
name|i
index|]
operator|.
name|postings
index|[
name|parentNumber
index|]
operator|.
name|parentHasOwnValue
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|setSingleValueForParent
specifier|private
name|void
name|setSingleValueForParent
parameter_list|(
name|int
name|parentNumber
parameter_list|,
name|int
name|valueOrd
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUMBER_OF_VALUES
condition|;
name|i
operator|++
control|)
block|{
name|facetValues
index|[
name|i
index|]
operator|.
name|postings
index|[
name|parentNumber
index|]
operator|.
name|parentHasOwnValue
operator|=
operator|(
name|i
operator|==
name|valueOrd
operator|)
expr_stmt|;
block|}
block|}
DECL|method|additionalValueIsAllowedForParent
name|boolean
name|additionalValueIsAllowedForParent
parameter_list|(
name|int
name|parentNumber
parameter_list|)
block|{
return|return
name|multiValued
operator|||
name|getValuesForParent
argument_list|(
name|parentNumber
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|0
return|;
block|}
DECL|method|getValuesForChild
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|getValuesForChild
parameter_list|(
name|int
name|parentNumber
parameter_list|,
name|int
name|childNumber
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUMBER_OF_VALUES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|facetValues
index|[
name|i
index|]
operator|.
name|postings
index|[
name|parentNumber
index|]
operator|.
name|childrenHaveValue
index|[
name|childNumber
index|]
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|setSingleValueForChild
specifier|private
name|void
name|setSingleValueForChild
parameter_list|(
name|int
name|parentNumber
parameter_list|,
name|int
name|childNumber
parameter_list|,
name|int
name|valueOrd
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUMBER_OF_VALUES
condition|;
name|i
operator|++
control|)
block|{
name|facetValues
index|[
name|i
index|]
operator|.
name|postings
index|[
name|parentNumber
index|]
operator|.
name|childrenHaveValue
index|[
name|childNumber
index|]
operator|=
operator|(
name|i
operator|==
name|valueOrd
operator|)
expr_stmt|;
block|}
block|}
DECL|method|additionalValueIsAllowedForChild
name|boolean
name|additionalValueIsAllowedForChild
parameter_list|(
name|int
name|parentNumber
parameter_list|,
name|int
name|childNumber
parameter_list|)
block|{
return|return
name|multiValued
operator|||
name|getValuesForChild
argument_list|(
name|parentNumber
argument_list|,
name|childNumber
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
DECL|class|RandomFacetValue
specifier|private
specifier|static
class|class
name|RandomFacetValue
block|{
DECL|field|facetValue
specifier|final
name|String
name|facetValue
decl_stmt|;
comment|// rootDoc, level, docsOnLevel
DECL|field|postings
name|RandomParentPosting
index|[]
name|postings
decl_stmt|;
DECL|method|RandomFacetValue
specifier|public
name|RandomFacetValue
parameter_list|(
name|String
name|facetValue
parameter_list|)
block|{
name|this
operator|.
name|facetValue
operator|=
name|facetValue
expr_stmt|;
name|postings
operator|=
operator|new
name|RandomParentPosting
index|[
name|NUMBER_OF_PARENTS
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUMBER_OF_PARENTS
condition|;
name|i
operator|++
control|)
block|{
name|postings
index|[
name|i
index|]
operator|=
operator|new
name|RandomParentPosting
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getFacetCount
name|int
name|getFacetCount
parameter_list|(
name|int
index|[]
name|parentNumbers
parameter_list|,
name|int
index|[]
name|childNumbers
parameter_list|)
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|parentNumbers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|parentNumber
range|:
name|parentNumbers
control|)
block|{
if|if
condition|(
name|postings
index|[
name|parentNumber
index|]
operator|.
name|isMatched
argument_list|(
name|childNumbers
argument_list|)
condition|)
block|{
name|result
operator|++
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUMBER_OF_PARENTS
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|postings
index|[
name|i
index|]
operator|.
name|isMatched
argument_list|(
name|childNumbers
argument_list|)
condition|)
block|{
name|result
operator|++
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
block|}
DECL|enum|FieldType
specifier|private
enum|enum
name|FieldType
block|{
DECL|enum constant|Integer
name|Integer
argument_list|(
literal|"_i"
argument_list|)
block|,
DECL|enum constant|Float
name|Float
argument_list|(
literal|"_f"
argument_list|)
block|,
DECL|enum constant|String
name|String
argument_list|(
literal|"_s"
argument_list|)
block|;
DECL|field|fieldPostfix
specifier|private
specifier|final
name|String
name|fieldPostfix
decl_stmt|;
DECL|method|FieldType
name|FieldType
parameter_list|(
name|String
name|fieldPostfix
parameter_list|)
block|{
name|this
operator|.
name|fieldPostfix
operator|=
name|fieldPostfix
expr_stmt|;
block|}
block|}
DECL|class|RandomParentPosting
specifier|private
specifier|static
class|class
name|RandomParentPosting
block|{
DECL|field|parentHasOwnValue
name|boolean
name|parentHasOwnValue
decl_stmt|;
DECL|field|childrenHaveValue
name|boolean
index|[]
name|childrenHaveValue
decl_stmt|;
DECL|method|RandomParentPosting
name|RandomParentPosting
parameter_list|(
name|boolean
name|expected
parameter_list|)
block|{
name|childrenHaveValue
operator|=
operator|new
name|boolean
index|[
name|NUMBER_OF_CHILDREN
index|]
expr_stmt|;
if|if
condition|(
name|expected
condition|)
block|{
comment|// don't count parents
name|parentHasOwnValue
operator|=
literal|false
expr_stmt|;
comment|// random().nextBoolean();
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUMBER_OF_CHILDREN
condition|;
name|i
operator|++
control|)
block|{
name|childrenHaveValue
index|[
name|i
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|isMatched
name|boolean
name|isMatched
parameter_list|(
name|int
index|[]
name|childNumbers
parameter_list|)
block|{
name|boolean
name|result
init|=
name|parentHasOwnValue
operator|&&
operator|(
name|childNumbers
operator|==
literal|null
operator|||
name|childNumbers
operator|.
name|length
operator|>
literal|0
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
if|if
condition|(
name|childNumbers
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|boolean
name|childHasValue
range|:
name|childrenHaveValue
control|)
block|{
name|result
operator|=
name|childHasValue
expr_stmt|;
if|if
condition|(
name|result
condition|)
block|{
break|break;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|child
range|:
name|childNumbers
control|)
block|{
name|result
operator|=
name|childrenHaveValue
index|[
name|child
index|]
expr_stmt|;
if|if
condition|(
name|result
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
block|}
block|}
end_class
end_unit
