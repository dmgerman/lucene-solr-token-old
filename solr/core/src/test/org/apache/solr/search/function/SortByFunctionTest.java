begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search.function
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|function
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|AbstractSolrTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_comment
comment|/**  *  * @see TestSortByMinMaxFunction  **/
end_comment
begin_class
DECL|class|SortByFunctionTest
specifier|public
class|class
name|SortByFunctionTest
extends|extends
name|AbstractSolrTestCase
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|delQ
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"x_td1"
argument_list|,
literal|"0"
argument_list|,
literal|"y_td1"
argument_list|,
literal|"2"
argument_list|,
literal|"w_td1"
argument_list|,
literal|"25"
argument_list|,
literal|"z_td1"
argument_list|,
literal|"5"
argument_list|,
literal|"f_t"
argument_list|,
literal|"ipod"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"x_td1"
argument_list|,
literal|"2"
argument_list|,
literal|"y_td1"
argument_list|,
literal|"2"
argument_list|,
literal|"w_td1"
argument_list|,
literal|"15"
argument_list|,
literal|"z_td1"
argument_list|,
literal|"5"
argument_list|,
literal|"f_t"
argument_list|,
literal|"ipod ipod ipod ipod ipod"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"x_td1"
argument_list|,
literal|"3"
argument_list|,
literal|"y_td1"
argument_list|,
literal|"2"
argument_list|,
literal|"w_td1"
argument_list|,
literal|"55"
argument_list|,
literal|"z_td1"
argument_list|,
literal|"5"
argument_list|,
literal|"f_t"
argument_list|,
literal|"ipod ipod ipod ipod ipod ipod ipod ipod ipod"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"x_td1"
argument_list|,
literal|"4"
argument_list|,
literal|"y_td1"
argument_list|,
literal|"2"
argument_list|,
literal|"w_td1"
argument_list|,
literal|"45"
argument_list|,
literal|"z_td1"
argument_list|,
literal|"5"
argument_list|,
literal|"f_t"
argument_list|,
literal|"ipod ipod ipod ipod ipod ipod ipod"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
argument_list|,
literal|"//*[@numFound='4']"
argument_list|,
literal|"//float[@name='score']='1.0'"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.='1']"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.='2']"
argument_list|,
literal|"//result/doc[3]/int[@name='id'][.='3']"
argument_list|,
literal|"//result/doc[4]/int[@name='id'][.='4']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"score desc"
argument_list|)
argument_list|,
literal|"//*[@numFound='4']"
argument_list|,
literal|"//float[@name='score']='1.0'"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.='1']"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.='2']"
argument_list|,
literal|"//result/doc[3]/int[@name='id'][.='3']"
argument_list|,
literal|"//result/doc[4]/int[@name='id'][.='4']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|,
literal|"q"
argument_list|,
literal|"f_t:ipod"
argument_list|,
literal|"sort"
argument_list|,
literal|"score desc"
argument_list|)
argument_list|,
literal|"//*[@numFound='4']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.='1']"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.='4']"
argument_list|,
literal|"//result/doc[3]/int[@name='id'][.='2']"
argument_list|,
literal|"//result/doc[4]/int[@name='id'][.='3']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"sum(x_td1, y_td1) desc"
argument_list|)
argument_list|,
literal|"//*[@numFound='4']"
argument_list|,
literal|"//float[@name='score']='1.0'"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.='4']"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.='3']"
argument_list|,
literal|"//result/doc[3]/int[@name='id'][.='2']"
argument_list|,
literal|"//result/doc[4]/int[@name='id'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"sum(x_td1, y_td1) asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='4']"
argument_list|,
literal|"//float[@name='score']='1.0'"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.='1']"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.='2']"
argument_list|,
literal|"//result/doc[3]/int[@name='id'][.='3']"
argument_list|,
literal|"//result/doc[4]/int[@name='id'][.='4']"
argument_list|)
expr_stmt|;
comment|//the function is equal, w_td1 separates
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"sort"
argument_list|,
literal|"sum(z_td1, y_td1) asc, w_td1 asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='4']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.='2']"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.='1']"
argument_list|,
literal|"//result/doc[3]/int[@name='id'][.='4']"
argument_list|,
literal|"//result/doc[4]/int[@name='id'][.='3']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSortJoinDocFreq
specifier|public
name|void
name|testSortJoinDocFreq
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"id_s1"
argument_list|,
literal|"D"
argument_list|,
literal|"links_mfacet"
argument_list|,
literal|"A"
argument_list|,
literal|"links_mfacet"
argument_list|,
literal|"B"
argument_list|,
literal|"links_mfacet"
argument_list|,
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"id_s1"
argument_list|,
literal|"C"
argument_list|,
literal|"links_mfacet"
argument_list|,
literal|"A"
argument_list|,
literal|"links_mfacet"
argument_list|,
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure it uses two readers
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"id_s1"
argument_list|,
literal|"B"
argument_list|,
literal|"links_mfacet"
argument_list|,
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"id_s1"
argument_list|,
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"links_mfacet:B"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.='3']"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.='4']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"sort"
argument_list|,
literal|"joindf(id_s1, links_mfacet) desc"
argument_list|)
argument_list|,
literal|"//*[@numFound='4']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.='1']"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.='2']"
argument_list|,
literal|"//result/doc[3]/int[@name='id'][.='3']"
argument_list|,
literal|"//result/doc[4]/int[@name='id'][.='4']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"sort"
argument_list|,
literal|"joindf(id_s1, links_mfacet) asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='4']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.='4']"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.='3']"
argument_list|,
literal|"//result/doc[3]/int[@name='id'][.='2']"
argument_list|,
literal|"//result/doc[4]/int[@name='id'][.='1']"
argument_list|)
expr_stmt|;
block|}
comment|/**    * The sort clauses to test in<code>testFieldSortSpecifiedAsFunction</code>.    *    * @see #testFieldSortSpecifiedAsFunction    */
DECL|method|getFieldFunctionClausesToTest
specifier|protected
name|String
index|[]
name|getFieldFunctionClausesToTest
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"primary_tl1"
block|,
literal|"field(primary_tl1)"
block|}
return|;
block|}
comment|/**    * Sort by function normally compares the double value, but if a function is specified that identifies    * a single field, we should use the underlying field's SortField to save of a lot of type converstion     * (and RAM), and keep the sort precision as high as possible    *    * @see #getFieldFunctionClausesToTest    */
DECL|method|testFieldSortSpecifiedAsFunction
specifier|public
name|void
name|testFieldSortSpecifiedAsFunction
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|A
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
specifier|final
name|long
name|B
init|=
name|A
operator|+
literal|1L
decl_stmt|;
specifier|final
name|long
name|C
init|=
name|B
operator|+
literal|1L
decl_stmt|;
specifier|final
name|long
name|Z
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|final
name|long
name|Y
init|=
name|Z
operator|-
literal|1L
decl_stmt|;
specifier|final
name|long
name|X
init|=
name|Y
operator|-
literal|1L
decl_stmt|;
comment|// test is predicated on the idea that if long -> double converstion is happening under the hood
comment|// then we lose precision in sorting; so lets sanity check that our JVM isn't doing something wacky
comment|// in converstion that violates the principle of the test
name|assertEquals
argument_list|(
literal|"WTF? small longs cast to double aren't equivilent?"
argument_list|,
operator|(
name|double
operator|)
name|A
argument_list|,
operator|(
name|double
operator|)
name|B
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"WTF? small longs cast to double aren't equivilent?"
argument_list|,
operator|(
name|double
operator|)
name|A
argument_list|,
operator|(
name|double
operator|)
name|C
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"WTF? big longs cast to double aren't equivilent?"
argument_list|,
operator|(
name|double
operator|)
name|Z
argument_list|,
operator|(
name|double
operator|)
name|Y
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"WTF? big longs cast to double aren't equivilent?"
argument_list|,
operator|(
name|double
operator|)
name|Z
argument_list|,
operator|(
name|double
operator|)
name|X
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|int
name|docId
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
operator|++
name|docId
argument_list|,
literal|"primary_tl1"
argument_list|,
name|X
argument_list|,
literal|"secondary_tl1"
argument_list|,
name|i
argument_list|,
literal|"multi_l_dv"
argument_list|,
name|X
argument_list|,
literal|"multi_l_dv"
argument_list|,
name|A
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
operator|++
name|docId
argument_list|,
literal|"primary_tl1"
argument_list|,
name|Y
argument_list|,
literal|"secondary_tl1"
argument_list|,
name|i
argument_list|,
literal|"multi_l_dv"
argument_list|,
name|Y
argument_list|,
literal|"multi_l_dv"
argument_list|,
name|B
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
operator|++
name|docId
argument_list|,
literal|"primary_tl1"
argument_list|,
name|Z
argument_list|,
literal|"secondary_tl1"
argument_list|,
name|i
argument_list|,
literal|"multi_l_dv"
argument_list|,
name|Z
argument_list|,
literal|"multi_l_dv"
argument_list|,
name|C
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// all of these sorts should result in the exact same order
comment|// min/max of a field is tested in TestSortByMinMaxFunction
for|for
control|(
name|String
name|primarySort
range|:
name|getFieldFunctionClausesToTest
argument_list|()
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|primarySort
operator|+
literal|" asc, secondary_tl1 asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='9']"
comment|//
argument_list|,
literal|"//result/doc[1]/long[@name='primary_tl1'][.='"
operator|+
name|X
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[1]/long[@name='secondary_tl1'][.='0']"
argument_list|,
literal|"//result/doc[2]/long[@name='primary_tl1'][.='"
operator|+
name|X
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[2]/long[@name='secondary_tl1'][.='1']"
argument_list|,
literal|"//result/doc[3]/long[@name='primary_tl1'][.='"
operator|+
name|X
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[3]/long[@name='secondary_tl1'][.='2']"
comment|//
argument_list|,
literal|"//result/doc[4]/long[@name='primary_tl1'][.='"
operator|+
name|Y
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[4]/long[@name='secondary_tl1'][.='0']"
argument_list|,
literal|"//result/doc[5]/long[@name='primary_tl1'][.='"
operator|+
name|Y
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[5]/long[@name='secondary_tl1'][.='1']"
argument_list|,
literal|"//result/doc[6]/long[@name='primary_tl1'][.='"
operator|+
name|Y
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[6]/long[@name='secondary_tl1'][.='2']"
comment|//
argument_list|,
literal|"//result/doc[7]/long[@name='primary_tl1'][.='"
operator|+
name|Z
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[7]/long[@name='secondary_tl1'][.='0']"
argument_list|,
literal|"//result/doc[8]/long[@name='primary_tl1'][.='"
operator|+
name|Z
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[8]/long[@name='secondary_tl1'][.='1']"
argument_list|,
literal|"//result/doc[9]/long[@name='primary_tl1'][.='"
operator|+
name|Z
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[9]/long[@name='secondary_tl1'][.='2']"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
