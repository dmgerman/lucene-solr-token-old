begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search.function
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|function
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|SuppressCodecs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import
begin_class
annotation|@
name|SuppressCodecs
argument_list|(
block|{
literal|"Memory"
block|,
literal|"SimpleText"
block|}
argument_list|)
comment|// see TestSortedSetSelector
DECL|class|TestMinMaxOnMultiValuedField
specifier|public
class|class
name|TestMinMaxOnMultiValuedField
extends|extends
name|SolrTestCaseJ4
block|{
comment|/** Initializes core and does some sanity checking of schema */
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-functionquery.xml"
argument_list|,
literal|"schema11.xml"
argument_list|)
expr_stmt|;
comment|// sanity check the expected properties of our fields (ie: who broke the schema?)
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|type
range|:
operator|new
name|String
index|[]
block|{
literal|"i"
block|,
literal|"l"
block|,
literal|"f"
block|,
literal|"d"
block|}
control|)
block|{
for|for
control|(
name|String
name|suffix
range|:
operator|new
name|String
index|[]
block|{
literal|""
block|,
literal|"_dv"
block|,
literal|"_ni_dv"
block|}
control|)
block|{
name|String
name|f
init|=
literal|"val_t"
operator|+
name|type
operator|+
literal|"s"
operator|+
name|suffix
decl_stmt|;
name|SchemaField
name|sf
init|=
name|schema
operator|.
name|getField
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|f
operator|+
literal|" is not multivalued"
argument_list|,
name|sf
operator|.
name|multiValued
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|+
literal|" doesn't have expected docValues status"
argument_list|,
name|f
operator|.
name|contains
argument_list|(
literal|"dv"
argument_list|)
argument_list|,
name|sf
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|+
literal|" doesn't have expected index status"
argument_list|,
operator|!
name|f
operator|.
name|contains
argument_list|(
literal|"ni"
argument_list|)
argument_list|,
name|sf
operator|.
name|indexed
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Deletes all docs (which may be left over from a previous test */
annotation|@
name|Before
DECL|method|before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|delQ
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBasics
specifier|public
name|void
name|testBasics
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
comment|// int
argument_list|,
literal|"val_tis_dv"
argument_list|,
literal|"42"
argument_list|,
literal|"val_tis_dv"
argument_list|,
literal|"9"
argument_list|,
literal|"val_tis_dv"
argument_list|,
literal|"-54"
comment|// long
argument_list|,
literal|"val_tls_dv"
argument_list|,
literal|"420"
argument_list|,
literal|"val_tls_dv"
argument_list|,
literal|"90"
argument_list|,
literal|"val_tls_dv"
argument_list|,
literal|"-540"
comment|// float
argument_list|,
literal|"val_tfs_dv"
argument_list|,
literal|"-42.5"
argument_list|,
literal|"val_tfs_dv"
argument_list|,
literal|"-4.5"
argument_list|,
literal|"val_tfs_dv"
argument_list|,
literal|"-13.5"
comment|// double
argument_list|,
literal|"val_tds_dv"
argument_list|,
literal|"-420.5"
argument_list|,
literal|"val_tds_dv"
argument_list|,
literal|"-40.5"
argument_list|,
literal|"val_tds_dv"
argument_list|,
literal|"-130.5"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
comment|// int
argument_list|,
literal|"fl"
argument_list|,
literal|"exists_min_i:exists(field(val_tis_dv,min))"
argument_list|,
literal|"fl"
argument_list|,
literal|"exists_max_i:exists(field(val_tis_dv,max))"
argument_list|,
literal|"fl"
argument_list|,
literal|"min_i:field(val_tis_dv,min)"
argument_list|,
literal|"fl"
argument_list|,
literal|"max_i:field(val_tis_dv,max)"
comment|// long
argument_list|,
literal|"fl"
argument_list|,
literal|"exists_min_l:exists(field(val_tls_dv,min))"
argument_list|,
literal|"fl"
argument_list|,
literal|"exists_max_l:exists(field(val_tls_dv,max))"
argument_list|,
literal|"fl"
argument_list|,
literal|"min_l:field(val_tls_dv,min)"
argument_list|,
literal|"fl"
argument_list|,
literal|"max_l:field(val_tls_dv,max)"
comment|// float
argument_list|,
literal|"fl"
argument_list|,
literal|"exists_min_f:exists(field(val_tfs_dv,min))"
argument_list|,
literal|"fl"
argument_list|,
literal|"exists_max_f:exists(field(val_tfs_dv,max))"
argument_list|,
literal|"fl"
argument_list|,
literal|"min_f:field(val_tfs_dv,min)"
argument_list|,
literal|"fl"
argument_list|,
literal|"max_f:field(val_tfs_dv,max)"
comment|// double
argument_list|,
literal|"fl"
argument_list|,
literal|"exists_min_d:exists(field(val_tds_dv,min))"
argument_list|,
literal|"fl"
argument_list|,
literal|"exists_max_d:exists(field(val_tds_dv,max))"
argument_list|,
literal|"fl"
argument_list|,
literal|"min_d:field(val_tds_dv,min)"
argument_list|,
literal|"fl"
argument_list|,
literal|"max_d:field(val_tds_dv,max)"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
comment|// int
argument_list|,
literal|"//bool[@name='exists_min_i']='true'"
argument_list|,
literal|"//bool[@name='exists_max_i']='true'"
argument_list|,
literal|"//int[@name='min_i']='-54'"
argument_list|,
literal|"//int[@name='max_i']='42'"
comment|// long
argument_list|,
literal|"//bool[@name='exists_min_l']='true'"
argument_list|,
literal|"//bool[@name='exists_max_l']='true'"
argument_list|,
literal|"//long[@name='min_l']='-540'"
argument_list|,
literal|"//long[@name='max_l']='420'"
comment|// float
argument_list|,
literal|"//bool[@name='exists_min_f']='true'"
argument_list|,
literal|"//bool[@name='exists_max_f']='true'"
argument_list|,
literal|"//float[@name='min_f']='-42.5'"
argument_list|,
literal|"//float[@name='max_f']='-4.5'"
comment|// double
argument_list|,
literal|"//bool[@name='exists_min_d']='true'"
argument_list|,
literal|"//bool[@name='exists_max_d']='true'"
argument_list|,
literal|"//double[@name='min_d']='-420.5'"
argument_list|,
literal|"//double[@name='max_d']='-40.5'"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AwaitsFix
argument_list|(
name|bugUrl
operator|=
literal|"https://issues.apache.org/jira/browse/LUCENE-6709"
argument_list|)
DECL|method|testIntFieldCache
specifier|public
name|void
name|testIntFieldCache
parameter_list|()
block|{
name|testSimpleInt
argument_list|(
literal|"val_tis"
argument_list|)
expr_stmt|;
block|}
DECL|method|testIntDocValues
specifier|public
name|void
name|testIntDocValues
parameter_list|()
block|{
name|testSimpleInt
argument_list|(
literal|"val_tis_dv"
argument_list|)
expr_stmt|;
name|testSimpleInt
argument_list|(
literal|"val_tis_ni_dv"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AwaitsFix
argument_list|(
name|bugUrl
operator|=
literal|"https://issues.apache.org/jira/browse/LUCENE-6709"
argument_list|)
DECL|method|testLongFieldCache
specifier|public
name|void
name|testLongFieldCache
parameter_list|()
block|{
name|testSimpleLong
argument_list|(
literal|"val_tls"
argument_list|)
expr_stmt|;
block|}
DECL|method|testLongDocValues
specifier|public
name|void
name|testLongDocValues
parameter_list|()
block|{
name|testSimpleLong
argument_list|(
literal|"val_tls_dv"
argument_list|)
expr_stmt|;
name|testSimpleLong
argument_list|(
literal|"val_tls_ni_dv"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AwaitsFix
argument_list|(
name|bugUrl
operator|=
literal|"https://issues.apache.org/jira/browse/LUCENE-6709"
argument_list|)
DECL|method|testFloatFieldCache
specifier|public
name|void
name|testFloatFieldCache
parameter_list|()
block|{
name|testSimpleFloat
argument_list|(
literal|"val_tfs"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFloatDocValues
specifier|public
name|void
name|testFloatDocValues
parameter_list|()
block|{
name|testSimpleFloat
argument_list|(
literal|"val_tfs_dv"
argument_list|)
expr_stmt|;
name|testSimpleFloat
argument_list|(
literal|"val_tfs_ni_dv"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AwaitsFix
argument_list|(
name|bugUrl
operator|=
literal|"https://issues.apache.org/jira/browse/LUCENE-6709"
argument_list|)
DECL|method|testDoubleFieldCache
specifier|public
name|void
name|testDoubleFieldCache
parameter_list|()
block|{
name|testSimpleDouble
argument_list|(
literal|"val_tds"
argument_list|)
expr_stmt|;
block|}
DECL|method|testDoubleDocValues
specifier|public
name|void
name|testDoubleDocValues
parameter_list|()
block|{
name|testSimpleDouble
argument_list|(
literal|"val_tds_dv"
argument_list|)
expr_stmt|;
name|testSimpleDouble
argument_list|(
literal|"val_tds_ni_dv"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBadRequests
specifier|public
name|void
name|testBadRequests
parameter_list|()
block|{
comment|// useful error msg when bogus selector is requested (ie: not min or max)
name|assertQEx
argument_list|(
literal|"no error asking for bogus selector"
argument_list|,
literal|"hoss"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"field(val_tds_dv,'hoss')"
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
comment|// useful error until/unless LUCENE-6709
name|assertQEx
argument_list|(
literal|"no error asking for max on a non docVals field"
argument_list|,
literal|"val_tds"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"field(val_tds,'max')"
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"no error asking for max on a non docVals field"
argument_list|,
literal|"max"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"field(val_tds,'max')"
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"no error asking for max on a non docVals field"
argument_list|,
literal|"docValues"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"field(val_tds,'max')"
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
comment|// useful error if min/max is unsupported for fieldtype
name|assertQEx
argument_list|(
literal|"no error asking for max on a str field"
argument_list|,
literal|"cat_docValues"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"field(cat_docValues,'max')"
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"no error asking for max on a str field"
argument_list|,
literal|"string"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"field(cat_docValues,'max')"
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|Exception
block|{
name|Comparable
index|[]
name|vals
init|=
operator|new
name|Comparable
index|[
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|17
argument_list|)
index|]
decl_stmt|;
comment|// random ints
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|vals
index|[
name|i
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
expr_stmt|;
block|}
name|testSimpleValues
argument_list|(
literal|"val_tis_dv"
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|vals
argument_list|)
expr_stmt|;
comment|// random longs
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|vals
index|[
name|i
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
name|testSimpleValues
argument_list|(
literal|"val_tls_dv"
argument_list|,
name|long
operator|.
name|class
argument_list|,
name|vals
argument_list|)
expr_stmt|;
comment|// random floats
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// Random.nextFloat is lame
name|Float
name|f
init|=
name|Float
operator|.
name|NaN
decl_stmt|;
while|while
condition|(
name|f
operator|.
name|isNaN
argument_list|()
condition|)
block|{
name|f
operator|=
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|vals
index|[
name|i
index|]
operator|=
name|f
expr_stmt|;
block|}
name|testSimpleValues
argument_list|(
literal|"val_tfs_dv"
argument_list|,
name|float
operator|.
name|class
argument_list|,
name|vals
argument_list|)
expr_stmt|;
comment|// random doubles
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// Random.nextDouble is lame
name|Double
name|d
init|=
name|Double
operator|.
name|NaN
decl_stmt|;
while|while
condition|(
name|d
operator|.
name|isNaN
argument_list|()
condition|)
block|{
name|d
operator|=
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|vals
index|[
name|i
index|]
operator|=
name|d
expr_stmt|;
block|}
name|testSimpleValues
argument_list|(
literal|"val_tds_dv"
argument_list|,
name|double
operator|.
name|class
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
comment|/** @see #testSimpleValues */
DECL|method|testSimpleInt
specifier|protected
name|void
name|testSimpleInt
parameter_list|(
specifier|final
name|String
name|fieldname
parameter_list|)
block|{
comment|// most basic case
name|testSimpleValues
argument_list|(
name|fieldname
argument_list|,
name|int
operator|.
name|class
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// order of values shouldn't matter
name|testSimpleValues
argument_list|(
name|fieldname
argument_list|,
name|int
operator|.
name|class
argument_list|,
operator|-
literal|42
argument_list|,
literal|51
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|testSimpleValues
argument_list|(
name|fieldname
argument_list|,
name|int
operator|.
name|class
argument_list|,
literal|51
argument_list|,
literal|3
argument_list|,
operator|-
literal|42
argument_list|)
expr_stmt|;
comment|// extreme's of the data type
name|testSimpleValues
argument_list|(
name|fieldname
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
literal|42
argument_list|,
operator|-
literal|550
argument_list|)
expr_stmt|;
name|testSimpleValues
argument_list|(
name|fieldname
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
comment|/** @see #testSimpleValues */
DECL|method|testSimpleLong
specifier|protected
name|void
name|testSimpleLong
parameter_list|(
specifier|final
name|String
name|fieldname
parameter_list|)
block|{
comment|// most basic case
name|testSimpleValues
argument_list|(
name|fieldname
argument_list|,
name|long
operator|.
name|class
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// order of values shouldn't matter
name|testSimpleValues
argument_list|(
name|fieldname
argument_list|,
name|long
operator|.
name|class
argument_list|,
operator|-
literal|42L
argument_list|,
literal|51L
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
name|testSimpleValues
argument_list|(
name|fieldname
argument_list|,
name|long
operator|.
name|class
argument_list|,
literal|51L
argument_list|,
literal|3L
argument_list|,
operator|-
literal|42L
argument_list|)
expr_stmt|;
comment|// extreme's of the data type
name|testSimpleValues
argument_list|(
name|fieldname
argument_list|,
name|long
operator|.
name|class
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
literal|42L
argument_list|,
operator|-
literal|550L
argument_list|)
expr_stmt|;
name|testSimpleValues
argument_list|(
name|fieldname
argument_list|,
name|long
operator|.
name|class
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|0L
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
comment|/** @see #testSimpleValues */
DECL|method|testSimpleFloat
specifier|protected
name|void
name|testSimpleFloat
parameter_list|(
specifier|final
name|String
name|fieldname
parameter_list|)
block|{
comment|// most basic case
name|testSimpleValues
argument_list|(
name|fieldname
argument_list|,
name|float
operator|.
name|class
argument_list|,
literal|0.0F
argument_list|)
expr_stmt|;
comment|// order of values shouldn't matter
name|testSimpleValues
argument_list|(
name|fieldname
argument_list|,
name|float
operator|.
name|class
argument_list|,
operator|-
literal|42.5F
argument_list|,
literal|51.3F
argument_list|,
literal|3.1415F
argument_list|)
expr_stmt|;
name|testSimpleValues
argument_list|(
name|fieldname
argument_list|,
name|float
operator|.
name|class
argument_list|,
literal|51.3F
argument_list|,
literal|3.1415F
argument_list|,
operator|-
literal|42.5F
argument_list|)
expr_stmt|;
comment|// extreme's of the data type
name|testSimpleValues
argument_list|(
name|fieldname
argument_list|,
name|float
operator|.
name|class
argument_list|,
name|Float
operator|.
name|NEGATIVE_INFINITY
argument_list|,
literal|42.5F
argument_list|,
operator|-
literal|550.4F
argument_list|)
expr_stmt|;
name|testSimpleValues
argument_list|(
name|fieldname
argument_list|,
name|float
operator|.
name|class
argument_list|,
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|,
literal|0.0F
argument_list|,
name|Float
operator|.
name|NEGATIVE_INFINITY
argument_list|)
expr_stmt|;
block|}
comment|/** @see #testSimpleValues */
DECL|method|testSimpleDouble
specifier|protected
name|void
name|testSimpleDouble
parameter_list|(
specifier|final
name|String
name|fieldname
parameter_list|)
block|{
comment|// most basic case
name|testSimpleValues
argument_list|(
name|fieldname
argument_list|,
name|double
operator|.
name|class
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
comment|// order of values shouldn't matter
name|testSimpleValues
argument_list|(
name|fieldname
argument_list|,
name|double
operator|.
name|class
argument_list|,
operator|-
literal|42.5D
argument_list|,
literal|51.3D
argument_list|,
literal|3.1415D
argument_list|)
expr_stmt|;
name|testSimpleValues
argument_list|(
name|fieldname
argument_list|,
name|double
operator|.
name|class
argument_list|,
literal|51.3D
argument_list|,
literal|3.1415D
argument_list|,
operator|-
literal|42.5D
argument_list|)
expr_stmt|;
comment|// extreme's of the data type
name|testSimpleValues
argument_list|(
name|fieldname
argument_list|,
name|double
operator|.
name|class
argument_list|,
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|,
literal|42.5D
argument_list|,
operator|-
literal|550.4D
argument_list|)
expr_stmt|;
name|testSimpleValues
argument_list|(
name|fieldname
argument_list|,
name|double
operator|.
name|class
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
literal|0.0D
argument_list|,
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
expr_stmt|;
block|}
comment|/** Tests a single doc with a few explicit values, as well as testing exists with and w/o values */
DECL|method|testSimpleValues
specifier|protected
name|void
name|testSimpleValues
parameter_list|(
specifier|final
name|String
name|fieldname
parameter_list|,
specifier|final
name|Class
name|clazz
parameter_list|,
specifier|final
name|Comparable
modifier|...
name|vals
parameter_list|)
block|{
assert|assert
literal|0
operator|<
name|vals
operator|.
name|length
assert|;
name|Comparable
name|min
init|=
name|vals
index|[
literal|0
index|]
decl_stmt|;
name|Comparable
name|max
init|=
name|vals
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|String
name|type
init|=
name|clazz
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|SolrInputDocument
name|doc1
init|=
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
decl_stmt|;
for|for
control|(
name|Comparable
name|v
range|:
name|vals
control|)
block|{
name|doc1
operator|.
name|addField
argument_list|(
name|fieldname
argument_list|,
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
literal|0
operator|<
name|min
operator|.
name|compareTo
argument_list|(
name|v
argument_list|)
condition|)
block|{
name|min
operator|=
name|v
expr_stmt|;
block|}
if|if
condition|(
literal|0
operator|>
name|max
operator|.
name|compareTo
argument_list|(
name|v
argument_list|)
condition|)
block|{
name|max
operator|=
name|v
expr_stmt|;
block|}
block|}
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc1
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// fieldname doesn't exist
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|fieldname
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|,
literal|"fl"
argument_list|,
literal|"exists_val_min:exists(field("
operator|+
name|fieldname
operator|+
literal|",min))"
argument_list|,
literal|"fl"
argument_list|,
literal|"exists_val_max:exists(field("
operator|+
name|fieldname
operator|+
literal|",max))"
argument_list|,
literal|"fl"
argument_list|,
literal|"val_min:field("
operator|+
name|fieldname
operator|+
literal|",min)"
argument_list|,
literal|"fl"
argument_list|,
literal|"val_max:field("
operator|+
name|fieldname
operator|+
literal|",max)"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//bool[@name='exists_val_min']='true'"
argument_list|,
literal|"//bool[@name='exists_val_max']='true'"
argument_list|,
literal|"//"
operator|+
name|type
operator|+
literal|"[@name='val_min']='"
operator|+
name|min
operator|+
literal|"'"
argument_list|,
literal|"//"
operator|+
name|type
operator|+
literal|"[@name='val_max']='"
operator|+
name|max
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|fieldname
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:2"
argument_list|,
literal|"fl"
argument_list|,
literal|"exists_val_min:exists(field("
operator|+
name|fieldname
operator|+
literal|",min))"
argument_list|,
literal|"fl"
argument_list|,
literal|"exists_val_max:exists(field("
operator|+
name|fieldname
operator|+
literal|",max))"
argument_list|,
literal|"fl"
argument_list|,
literal|"val_min:field("
operator|+
name|fieldname
operator|+
literal|",min)"
argument_list|,
literal|"fl"
argument_list|,
literal|"val_max:field("
operator|+
name|fieldname
operator|+
literal|",max)"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//bool[@name='exists_val_min']='false'"
argument_list|,
literal|"//bool[@name='exists_val_max']='false'"
argument_list|,
literal|"count(//"
operator|+
name|type
operator|+
literal|"[@name='val_min'])=0"
argument_list|,
literal|"count(//"
operator|+
name|type
operator|+
literal|"[@name='val_max'])=0"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
