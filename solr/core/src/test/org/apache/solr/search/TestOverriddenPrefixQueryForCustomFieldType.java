begin_unit
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_class
DECL|class|TestOverriddenPrefixQueryForCustomFieldType
specifier|public
class|class
name|TestOverriddenPrefixQueryForCustomFieldType
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|counts
specifier|private
specifier|static
name|int
index|[]
name|counts
init|=
operator|new
name|int
index|[
literal|2
index|]
decl_stmt|;
DECL|field|otherCounts
specifier|private
specifier|static
name|int
name|otherCounts
decl_stmt|;
DECL|field|otherTerms
name|String
index|[]
name|otherTerms
init|=
block|{
literal|"this"
block|,
literal|"that"
block|,
literal|"those"
block|,
literal|"randomness"
block|}
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-basic.xml"
argument_list|,
literal|"schema-customfield.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// if you override setUp or tearDown, you better call
comment|// the super classes version
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createIndex
specifier|public
name|void
name|createIndex
parameter_list|(
name|int
name|nDocs
parameter_list|)
block|{
name|Random
name|r
init|=
name|random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nDocs
condition|;
name|i
operator|++
control|)
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
expr_stmt|;
name|int
name|t
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|%
literal|3
operator|==
literal|0
condition|)
block|{
name|doc
operator|.
name|addField
argument_list|(
literal|"swap_foo_bar_in_prefix_query"
argument_list|,
literal|"foo"
operator|+
name|i
argument_list|)
expr_stmt|;
name|counts
index|[
literal|0
index|]
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|t
operator|%
literal|3
operator|==
literal|1
condition|)
block|{
name|doc
operator|.
name|addField
argument_list|(
literal|"swap_foo_bar_in_prefix_query"
argument_list|,
literal|"foo"
operator|+
name|i
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"swap_foo_bar_in_prefix_query"
argument_list|,
literal|"spam"
operator|+
name|i
argument_list|)
expr_stmt|;
name|otherCounts
operator|++
expr_stmt|;
name|counts
index|[
literal|0
index|]
operator|++
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|addField
argument_list|(
literal|"swap_foo_bar_in_prefix_query"
argument_list|,
literal|"bar"
operator|+
name|i
argument_list|)
expr_stmt|;
name|counts
index|[
literal|1
index|]
operator|++
expr_stmt|;
block|}
comment|//Randomly add noise
name|doc
operator|.
name|addField
argument_list|(
literal|"int_prefix_as_range"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"intfield"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrefixQueries
specifier|public
name|void
name|testPrefixQueries
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
argument_list|,
literal|"//*[@numFound='100']"
argument_list|)
expr_stmt|;
comment|// Test that prefix query actually transforms foo<-> bar.
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"swap_foo_bar_in_prefix_query:foo*"
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
name|counts
index|[
literal|1
index|]
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"swap_foo_bar_in_prefix_query:bar*"
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
name|counts
index|[
literal|0
index|]
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"swap_foo_bar_in_prefix_query:spam*"
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
name|otherCounts
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"intfield:2*"
argument_list|)
argument_list|,
literal|"//*[@numFound='11']"
argument_list|)
expr_stmt|;
comment|//2 and the 10 in twenties
comment|//Custom field should query for the range [2,MAX_INT)
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"int_prefix_as_range:2*"
argument_list|)
argument_list|,
literal|"//*[@numFound='98']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQuery
specifier|public
name|void
name|testQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
literal|"myField"
argument_list|,
literal|"swap_foo_bar_in_prefix_query"
argument_list|)
decl_stmt|;
try|try
block|{
name|assertQueryEquals
argument_list|(
name|req
argument_list|,
literal|"{!simple qf=$myField}foo*"
argument_list|,
literal|"{!simple qf=$myField}foo*"
argument_list|,
literal|"{!prefix f=swap_foo_bar_in_prefix_query}foo"
argument_list|,
literal|"{!lucene df=$myField v=foo*}"
argument_list|,
literal|"{!lucene}swap_foo_bar_in_prefix_query:foo*"
argument_list|)
expr_stmt|;
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
name|req
operator|=
name|req
argument_list|(
literal|"myField"
argument_list|,
literal|"int_prefix_as_range"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
name|req
argument_list|,
literal|"{!lucene}int_prefix_as_range:[42 TO 2147483647}"
argument_list|,
literal|"{!lucene}int_prefix_as_range:42*"
argument_list|,
literal|"{!prefix f=int_prefix_as_range}42"
argument_list|,
literal|"{!simple qf=int_prefix_as_range}42*"
argument_list|,
literal|"{!simple df=int_prefix_as_range}42*"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @see org.apache.lucene.search.QueryUtils#check    * @see org.apache.lucene.search.QueryUtils#checkEqual    */
DECL|method|assertQueryEquals
specifier|protected
name|void
name|assertQueryEquals
parameter_list|(
specifier|final
name|SolrQueryRequest
name|req
parameter_list|,
specifier|final
name|String
modifier|...
name|inputs
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Query
index|[]
name|queries
init|=
operator|new
name|Query
index|[
name|inputs
operator|.
name|length
index|]
decl_stmt|;
try|try
block|{
name|SolrQueryResponse
name|rsp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
name|SolrRequestInfo
operator|.
name|setRequestInfo
argument_list|(
operator|new
name|SolrRequestInfo
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|queries
index|[
name|i
index|]
operator|=
operator|(
name|QParser
operator|.
name|getParser
argument_list|(
name|inputs
index|[
name|i
index|]
argument_list|,
literal|null
argument_list|,
name|req
argument_list|)
operator|.
name|getQuery
argument_list|()
operator|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|SolrRequestInfo
operator|.
name|clearRequestInfo
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|QueryUtils
operator|.
name|check
argument_list|(
name|queries
index|[
name|i
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|<
name|queries
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|QueryUtils
operator|.
name|checkEqual
argument_list|(
name|queries
index|[
name|i
index|]
argument_list|,
name|queries
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
