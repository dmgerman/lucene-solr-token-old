begin_unit
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|ConcurrentLFUCache
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/**  * Test for LFUCache  *  * @see org.apache.solr.search.LFUCache  * @since solr 3.6  */
end_comment
begin_class
DECL|class|TestLFUCache
specifier|public
class|class
name|TestLFUCache
extends|extends
name|SolrTestCaseJ4
block|{
DECL|class|LFURegenerator
specifier|private
class|class
name|LFURegenerator
implements|implements
name|CacheRegenerator
block|{
DECL|method|regenerateItem
specifier|public
name|boolean
name|regenerateItem
parameter_list|(
name|SolrIndexSearcher
name|newSearcher
parameter_list|,
name|SolrCache
name|newCache
parameter_list|,
name|SolrCache
name|oldCache
parameter_list|,
name|Object
name|oldKey
parameter_list|,
name|Object
name|oldVal
parameter_list|)
throws|throws
name|IOException
block|{
name|newCache
operator|.
name|put
argument_list|(
name|oldKey
argument_list|,
name|oldVal
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-caching.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTimeDecayParams
specifier|public
name|void
name|testTimeDecayParams
parameter_list|()
throws|throws
name|IOException
block|{
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|holder
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSearcher
argument_list|()
decl_stmt|;
try|try
block|{
name|SolrIndexSearcher
name|searcher
init|=
name|holder
operator|.
name|get
argument_list|()
decl_stmt|;
name|LFUCache
name|cacheDecayTrue
init|=
operator|(
name|LFUCache
operator|)
name|searcher
operator|.
name|getCache
argument_list|(
literal|"lfuCacheDecayTrue"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cacheDecayTrue
argument_list|)
expr_stmt|;
name|NamedList
name|stats
init|=
name|cacheDecayTrue
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
operator|(
name|Boolean
operator|)
name|stats
operator|.
name|get
argument_list|(
literal|"timeDecay"
argument_list|)
argument_list|)
expr_stmt|;
name|addCache
argument_list|(
name|cacheDecayTrue
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|64
condition|;
operator|++
name|idx
control|)
block|{
name|assertCache
argument_list|(
name|cacheDecayTrue
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
name|addCache
argument_list|(
name|cacheDecayTrue
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|assertCache
argument_list|(
name|cacheDecayTrue
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|LFUCache
name|cacheDecayDefault
init|=
operator|(
name|LFUCache
operator|)
name|searcher
operator|.
name|getCache
argument_list|(
literal|"lfuCacheDecayDefault"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cacheDecayDefault
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cacheDecayDefault
operator|.
name|getStatistics
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|Boolean
operator|)
name|stats
operator|.
name|get
argument_list|(
literal|"timeDecay"
argument_list|)
argument_list|)
expr_stmt|;
name|addCache
argument_list|(
name|cacheDecayDefault
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertCache
argument_list|(
name|cacheDecayDefault
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|64
condition|;
operator|++
name|idx
control|)
block|{
name|assertCache
argument_list|(
name|cacheDecayDefault
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
name|addCache
argument_list|(
name|cacheDecayDefault
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|assertCache
argument_list|(
name|cacheDecayDefault
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|addCache
argument_list|(
name|cacheDecayDefault
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|,
literal|16
argument_list|,
literal|17
argument_list|,
literal|18
argument_list|,
literal|19
argument_list|,
literal|20
argument_list|,
literal|21
argument_list|)
expr_stmt|;
name|assertCache
argument_list|(
name|cacheDecayDefault
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|17
argument_list|,
literal|18
argument_list|,
literal|19
argument_list|,
literal|20
argument_list|,
literal|21
argument_list|)
expr_stmt|;
name|LFUCache
name|cacheDecayFalse
init|=
operator|(
name|LFUCache
operator|)
name|searcher
operator|.
name|getCache
argument_list|(
literal|"lfuCacheDecayFalse"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cacheDecayFalse
argument_list|)
expr_stmt|;
name|stats
operator|=
name|cacheDecayFalse
operator|.
name|getStatistics
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
name|Boolean
operator|)
name|stats
operator|.
name|get
argument_list|(
literal|"timeDecay"
argument_list|)
argument_list|)
expr_stmt|;
name|addCache
argument_list|(
name|cacheDecayFalse
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertCache
argument_list|(
name|cacheDecayFalse
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|16
condition|;
operator|++
name|idx
control|)
block|{
name|assertCache
argument_list|(
name|cacheDecayFalse
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
name|addCache
argument_list|(
name|cacheDecayFalse
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|,
literal|16
argument_list|,
literal|17
argument_list|,
literal|18
argument_list|,
literal|19
argument_list|,
literal|20
argument_list|,
literal|21
argument_list|)
expr_stmt|;
name|assertCache
argument_list|(
name|cacheDecayFalse
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertNotCache
argument_list|(
name|cacheDecayFalse
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|22
init|;
name|idx
operator|<
literal|256
condition|;
operator|++
name|idx
control|)
block|{
name|addCache
argument_list|(
name|cacheDecayFalse
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
name|assertCache
argument_list|(
name|cacheDecayFalse
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|holder
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addCache
specifier|private
name|void
name|addCache
parameter_list|(
name|LFUCache
name|cache
parameter_list|,
name|int
modifier|...
name|inserts
parameter_list|)
block|{
for|for
control|(
name|int
name|idx
range|:
name|inserts
control|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|idx
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertCache
specifier|private
name|void
name|assertCache
parameter_list|(
name|LFUCache
name|cache
parameter_list|,
name|int
modifier|...
name|gets
parameter_list|)
block|{
for|for
control|(
name|int
name|idx
range|:
name|gets
control|)
block|{
if|if
condition|(
name|cache
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected entry %d not in cache"
argument_list|,
name|idx
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|assertNotCache
specifier|private
name|void
name|assertNotCache
parameter_list|(
name|LFUCache
name|cache
parameter_list|,
name|int
modifier|...
name|gets
parameter_list|)
block|{
for|for
control|(
name|int
name|idx
range|:
name|gets
control|)
block|{
if|if
condition|(
name|cache
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected entry %d in cache"
argument_list|,
name|idx
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testSimple
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|IOException
block|{
name|LFUCache
name|lfuCache
init|=
operator|new
name|LFUCache
argument_list|()
decl_stmt|;
name|LFUCache
name|newLFUCache
init|=
operator|new
name|LFUCache
argument_list|()
decl_stmt|;
name|LFUCache
name|noWarmLFUCache
init|=
operator|new
name|LFUCache
argument_list|()
decl_stmt|;
try|try
block|{
name|Map
name|params
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"size"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"initialSize"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"autowarmCount"
argument_list|,
literal|"25"
argument_list|)
expr_stmt|;
name|LFURegenerator
name|regenerator
init|=
operator|new
name|LFURegenerator
argument_list|()
decl_stmt|;
name|Object
name|initObj
init|=
name|lfuCache
operator|.
name|init
argument_list|(
name|params
argument_list|,
literal|null
argument_list|,
name|regenerator
argument_list|)
decl_stmt|;
name|lfuCache
operator|.
name|setState
argument_list|(
name|SolrCache
operator|.
name|State
operator|.
name|LIVE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|101
condition|;
name|i
operator|++
control|)
block|{
name|lfuCache
operator|.
name|put
argument_list|(
name|i
operator|+
literal|1
argument_list|,
literal|""
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"15"
argument_list|,
name|lfuCache
operator|.
name|get
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"75"
argument_list|,
name|lfuCache
operator|.
name|get
argument_list|(
literal|75
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|lfuCache
operator|.
name|get
argument_list|(
literal|110
argument_list|)
argument_list|)
expr_stmt|;
name|NamedList
name|nl
init|=
name|lfuCache
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|nl
operator|.
name|get
argument_list|(
literal|"lookups"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|nl
operator|.
name|get
argument_list|(
literal|"hits"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|101L
argument_list|,
name|nl
operator|.
name|get
argument_list|(
literal|"inserts"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|lfuCache
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// first item put in should be the first out
comment|// Test autowarming
name|newLFUCache
operator|.
name|init
argument_list|(
name|params
argument_list|,
name|initObj
argument_list|,
name|regenerator
argument_list|)
expr_stmt|;
name|newLFUCache
operator|.
name|warm
argument_list|(
literal|null
argument_list|,
name|lfuCache
argument_list|)
expr_stmt|;
name|newLFUCache
operator|.
name|setState
argument_list|(
name|SolrCache
operator|.
name|State
operator|.
name|LIVE
argument_list|)
expr_stmt|;
name|newLFUCache
operator|.
name|put
argument_list|(
literal|103
argument_list|,
literal|"103"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"15"
argument_list|,
name|newLFUCache
operator|.
name|get
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"75"
argument_list|,
name|newLFUCache
operator|.
name|get
argument_list|(
literal|75
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|newLFUCache
operator|.
name|get
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|nl
operator|=
name|newLFUCache
operator|.
name|getStatistics
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|nl
operator|.
name|get
argument_list|(
literal|"lookups"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|nl
operator|.
name|get
argument_list|(
literal|"hits"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|nl
operator|.
name|get
argument_list|(
literal|"inserts"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|nl
operator|.
name|get
argument_list|(
literal|"evictions"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7L
argument_list|,
name|nl
operator|.
name|get
argument_list|(
literal|"cumulative_lookups"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|nl
operator|.
name|get
argument_list|(
literal|"cumulative_hits"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|102L
argument_list|,
name|nl
operator|.
name|get
argument_list|(
literal|"cumulative_inserts"
argument_list|)
argument_list|)
expr_stmt|;
name|newLFUCache
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Test no autowarming
name|params
operator|.
name|put
argument_list|(
literal|"autowarmCount"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|noWarmLFUCache
operator|.
name|init
argument_list|(
name|params
argument_list|,
name|initObj
argument_list|,
name|regenerator
argument_list|)
expr_stmt|;
name|noWarmLFUCache
operator|.
name|warm
argument_list|(
literal|null
argument_list|,
name|lfuCache
argument_list|)
expr_stmt|;
name|noWarmLFUCache
operator|.
name|setState
argument_list|(
name|SolrCache
operator|.
name|State
operator|.
name|LIVE
argument_list|)
expr_stmt|;
name|noWarmLFUCache
operator|.
name|put
argument_list|(
literal|103
argument_list|,
literal|"103"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|noWarmLFUCache
operator|.
name|get
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|noWarmLFUCache
operator|.
name|get
argument_list|(
literal|75
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"103"
argument_list|,
name|noWarmLFUCache
operator|.
name|get
argument_list|(
literal|103
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|newLFUCache
operator|!=
literal|null
condition|)
name|newLFUCache
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|noWarmLFUCache
operator|!=
literal|null
condition|)
name|noWarmLFUCache
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|lfuCache
operator|!=
literal|null
condition|)
name|lfuCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testItemOrdering
specifier|public
name|void
name|testItemOrdering
parameter_list|()
block|{
name|ConcurrentLFUCache
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|cache
init|=
operator|new
name|ConcurrentLFUCache
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|(
literal|100
argument_list|,
literal|90
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|i
operator|+
literal|1
argument_list|,
literal|""
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|44
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|cache
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|48
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|48
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|48
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|m
decl_stmt|;
name|m
operator|=
name|cache
operator|.
name|getMostUsedItems
argument_list|(
literal|5
argument_list|)
expr_stmt|;
comment|//System.out.println(m);
comment|// 50 9 7 5 3 1
name|assertNotNull
argument_list|(
name|m
operator|.
name|get
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
operator|.
name|get
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|=
name|cache
operator|.
name|getLeastUsedItems
argument_list|(
literal|5
argument_list|)
expr_stmt|;
comment|//System.out.println(m);
comment|// 49 47 46 45 2
name|assertNotNull
argument_list|(
name|m
operator|.
name|get
argument_list|(
literal|49
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
operator|.
name|get
argument_list|(
literal|47
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
operator|.
name|get
argument_list|(
literal|46
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
operator|.
name|get
argument_list|(
literal|45
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|=
name|cache
operator|.
name|getLeastUsedItems
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|m
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|//test this too
name|m
operator|=
name|cache
operator|.
name|getMostUsedItems
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|m
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cache
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTimeDecay
specifier|public
name|void
name|testTimeDecay
parameter_list|()
block|{
name|ConcurrentLFUCache
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|cacheDecay
init|=
operator|new
name|ConcurrentLFUCache
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|(
literal|10
argument_list|,
literal|9
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|21
condition|;
name|i
operator|++
control|)
block|{
name|cacheDecay
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|itemsDecay
decl_stmt|;
comment|//11-20 now in cache.
name|itemsDecay
operator|=
name|cacheDecay
operator|.
name|getMostUsedItems
argument_list|(
literal|10
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|11
init|;
name|i
operator|<
literal|21
condition|;
operator|++
name|i
control|)
block|{
name|assertNotNull
argument_list|(
name|itemsDecay
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Now increase the freq count for 5 items
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|jdx
init|=
literal|0
init|;
name|jdx
operator|<
literal|63
condition|;
operator|++
name|jdx
control|)
block|{
name|cacheDecay
operator|.
name|get
argument_list|(
name|i
operator|+
literal|13
argument_list|)
expr_stmt|;
block|}
block|}
comment|// OK, 13 - 17 should have larger counts and should stick past next few collections. One collection should
comment|// be triggered for each two insertions
name|cacheDecay
operator|.
name|put
argument_list|(
literal|22
argument_list|,
literal|"22"
argument_list|)
expr_stmt|;
name|cacheDecay
operator|.
name|put
argument_list|(
literal|23
argument_list|,
literal|"23"
argument_list|)
expr_stmt|;
comment|// Surplus count at 32
name|cacheDecay
operator|.
name|put
argument_list|(
literal|24
argument_list|,
literal|"24"
argument_list|)
expr_stmt|;
name|cacheDecay
operator|.
name|put
argument_list|(
literal|25
argument_list|,
literal|"25"
argument_list|)
expr_stmt|;
comment|// Surplus count at 16
name|itemsDecay
operator|=
name|cacheDecay
operator|.
name|getMostUsedItems
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// 13 - 17 should be in cache, but 11 and 18 (among others) should not Testing that elements before and
comment|// after the ones with increased counts are removed, and all the increased count ones are still in the cache
name|assertNull
argument_list|(
name|itemsDecay
operator|.
name|get
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|itemsDecay
operator|.
name|get
argument_list|(
literal|18
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|itemsDecay
operator|.
name|get
argument_list|(
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|itemsDecay
operator|.
name|get
argument_list|(
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|itemsDecay
operator|.
name|get
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|itemsDecay
operator|.
name|get
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|itemsDecay
operator|.
name|get
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
comment|// Testing that all the elements in front of the ones with increased counts are gone
for|for
control|(
name|int
name|idx
init|=
literal|26
init|;
name|idx
operator|<
literal|32
condition|;
operator|++
name|idx
control|)
block|{
name|cacheDecay
operator|.
name|put
argument_list|(
name|idx
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Surplus count should be at 0
name|itemsDecay
operator|=
name|cacheDecay
operator|.
name|getMostUsedItems
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|itemsDecay
operator|.
name|get
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|itemsDecay
operator|.
name|get
argument_list|(
literal|24
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|itemsDecay
operator|.
name|get
argument_list|(
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|itemsDecay
operator|.
name|get
argument_list|(
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|itemsDecay
operator|.
name|get
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|itemsDecay
operator|.
name|get
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|itemsDecay
operator|.
name|get
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|32
init|;
name|idx
operator|<
literal|40
condition|;
operator|++
name|idx
control|)
block|{
name|cacheDecay
operator|.
name|put
argument_list|(
name|idx
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// All the entries with increased counts should be gone.
name|itemsDecay
operator|=
name|cacheDecay
operator|.
name|getMostUsedItems
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|itemsDecay
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|itemsDecay
operator|.
name|get
argument_list|(
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|itemsDecay
operator|.
name|get
argument_list|(
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|itemsDecay
operator|.
name|get
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|itemsDecay
operator|.
name|get
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|itemsDecay
operator|.
name|get
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|30
init|;
name|idx
operator|<
literal|40
condition|;
operator|++
name|idx
control|)
block|{
name|assertNotNull
argument_list|(
name|itemsDecay
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheDecay
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTimeNoDecay
specifier|public
name|void
name|testTimeNoDecay
parameter_list|()
block|{
name|ConcurrentLFUCache
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|cacheNoDecay
init|=
operator|new
name|ConcurrentLFUCache
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|(
literal|10
argument_list|,
literal|9
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
operator|(
literal|9
operator|+
literal|10
operator|)
operator|/
literal|2
argument_list|)
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
literal|0.75
operator|*
literal|10
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|21
condition|;
name|i
operator|++
control|)
block|{
name|cacheNoDecay
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|itemsNoDecay
decl_stmt|;
comment|//11-20 now in cache.
name|itemsNoDecay
operator|=
name|cacheNoDecay
operator|.
name|getMostUsedItems
argument_list|(
literal|10
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|11
init|;
name|i
operator|<
literal|21
condition|;
operator|++
name|i
control|)
block|{
name|assertNotNull
argument_list|(
name|itemsNoDecay
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Now increase the freq count for 5 items
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|jdx
init|=
literal|0
init|;
name|jdx
operator|<
literal|10
condition|;
operator|++
name|jdx
control|)
block|{
name|cacheNoDecay
operator|.
name|get
argument_list|(
name|i
operator|+
literal|13
argument_list|)
expr_stmt|;
block|}
block|}
comment|// OK, 13 - 17 should have larger counts but that shouldn't matter since timeDecay=false
name|cacheNoDecay
operator|.
name|put
argument_list|(
literal|22
argument_list|,
literal|"22"
argument_list|)
expr_stmt|;
name|cacheNoDecay
operator|.
name|put
argument_list|(
literal|23
argument_list|,
literal|"23"
argument_list|)
expr_stmt|;
name|cacheNoDecay
operator|.
name|put
argument_list|(
literal|24
argument_list|,
literal|"24"
argument_list|)
expr_stmt|;
name|cacheNoDecay
operator|.
name|put
argument_list|(
literal|25
argument_list|,
literal|"25"
argument_list|)
expr_stmt|;
name|itemsNoDecay
operator|=
name|cacheNoDecay
operator|.
name|getMostUsedItems
argument_list|(
literal|10
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|15
init|;
name|idx
operator|<
literal|25
condition|;
operator|++
name|idx
control|)
block|{
name|assertNotNull
argument_list|(
name|itemsNoDecay
operator|.
name|get
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheNoDecay
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
comment|// From the original LRU cache tests, they're commented out there too because they take a while.
comment|//  void doPerfTest(int iter, int cacheSize, int maxKey) {
comment|//    long start = System.currentTimeMillis();
comment|//
comment|//    int lowerWaterMark = cacheSize;
comment|//    int upperWaterMark = (int) (lowerWaterMark * 1.1);
comment|//
comment|//    Random r = random;
comment|//    ConcurrentLFUCache cache = new ConcurrentLFUCache(upperWaterMark, lowerWaterMark,
comment|//        (upperWaterMark + lowerWaterMark) / 2, upperWaterMark, false, false, null, true);
comment|//    boolean getSize = false;
comment|//    int minSize = 0, maxSize = 0;
comment|//    for (int i = 0; i< iter; i++) {
comment|//      cache.put(r.nextInt(maxKey), "TheValue");
comment|//      int sz = cache.size();
comment|//      if (!getSize&& sz>= cacheSize) {
comment|//        getSize = true;
comment|//        minSize = sz;
comment|//      } else {
comment|//        if (sz< minSize) minSize = sz;
comment|//        else if (sz> maxSize) maxSize = sz;
comment|//      }
comment|//    }
comment|//    cache.destroy();
comment|//
comment|//    long end = System.currentTimeMillis();
comment|//    System.out.println("time=" + (end - start) + ", minSize=" + minSize + ",maxSize=" + maxSize);
comment|//  }
comment|//
comment|//
comment|//  @Test
comment|//  public void testPerf() {
comment|//    doPerfTest(1000000, 100000, 200000); // big cache, warmup
comment|//    doPerfTest(2000000, 100000, 200000); // big cache
comment|//    doPerfTest(2000000, 100000, 120000);  // smaller key space increases distance between oldest, newest and makes the first passes less effective.
comment|//    doPerfTest(6000000, 1000, 2000);    // small cache, smaller hit rate
comment|//    doPerfTest(6000000, 1000, 1200);    // small cache, bigger hit rate
comment|//  }
comment|//
comment|//
comment|//  // returns number of puts
comment|//  int useCache(SolrCache sc, int numGets, int maxKey, int seed) {
comment|//    int ret = 0;
comment|//    Random r = new Random(seed);
comment|//
comment|//    // use like a cache... gets and a put if not found
comment|//    for (int i = 0; i< numGets; i++) {
comment|//      Integer k = r.nextInt(maxKey);
comment|//      Integer v = (Integer) sc.get(k);
comment|//      if (v == null) {
comment|//        sc.put(k, k);
comment|//        ret++;
comment|//      }
comment|//    }
comment|//
comment|//    return ret;
comment|//  }
comment|//
comment|//  void fillCache(SolrCache sc, int cacheSize, int maxKey) {
comment|//    for (int i = 0; i< cacheSize; i++) {
comment|//      Integer kv = random.nextInt(maxKey);
comment|//      sc.put(kv, kv);
comment|//    }
comment|//  }
comment|//
comment|//
comment|//  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {
comment|//    Map l = new HashMap();
comment|//    l.put("size", "" + cacheSize);
comment|//    l.put("initialSize", "" + cacheSize);
comment|//
comment|//    Object o = sc.init(l, null, null);
comment|//    sc.setState(SolrCache.State.LIVE);
comment|//
comment|//    fillCache(sc, cacheSize, maxKey);
comment|//
comment|//    long start = System.currentTimeMillis();
comment|//
comment|//    Thread[] threads = new Thread[nThreads];
comment|//    final AtomicInteger puts = new AtomicInteger(0);
comment|//    for (int i = 0; i< threads.length; i++) {
comment|//      final int seed = random.nextInt();
comment|//      threads[i] = new Thread() {
comment|//        @Override
comment|//        public void run() {
comment|//          int ret = useCache(sc, numGets / nThreads, maxKey, seed);
comment|//          puts.addAndGet(ret);
comment|//        }
comment|//      };
comment|//    }
comment|//
comment|//    for (Thread thread : threads) {
comment|//      try {
comment|//        thread.start();
comment|//      } catch (Exception e) {
comment|//        e.printStackTrace();
comment|//      }
comment|//    }
comment|//
comment|//    for (Thread thread : threads) {
comment|//      try {
comment|//        thread.join();
comment|//      } catch (Exception e) {
comment|//        e.printStackTrace();
comment|//      }
comment|//    }
comment|//
comment|//    long end = System.currentTimeMillis();
comment|//    System.out.println("time=" + (end - start) + " impl=" + sc.getClass().getSimpleName()
comment|//        + " nThreads= " + nThreads + " size=" + cacheSize + " maxKey=" + maxKey + " gets=" + numGets
comment|//        + " hitRatio=" + (1 - (((double) puts.get()) / numGets)));
comment|//  }
comment|//
comment|//  void perfTestBoth(int nThreads, int numGets, int cacheSize, int maxKey) {
comment|//    cachePerfTest(new LFUCache(), nThreads, numGets, cacheSize, maxKey);
comment|//  }
comment|//
comment|//
comment|//  public void testCachePerf() {
comment|//    // warmup
comment|//    perfTestBoth(2, 100000, 100000, 120000);
comment|//    perfTestBoth(1, 2000000, 100000, 100000); // big cache, 100% hit ratio
comment|//    perfTestBoth(2, 2000000, 100000, 100000); // big cache, 100% hit ratio
comment|//    perfTestBoth(1, 2000000, 100000, 120000); // big cache, bigger hit ratio
comment|//    perfTestBoth(2, 2000000, 100000, 120000); // big cache, bigger hit ratio
comment|//    perfTestBoth(1, 2000000, 100000, 200000); // big cache, ~50% hit ratio
comment|//    perfTestBoth(2, 2000000, 100000, 200000); // big cache, ~50% hit ratio
comment|//    perfTestBoth(1, 2000000, 100000, 1000000); // big cache, ~10% hit ratio
comment|//    perfTestBoth(2, 2000000, 100000, 1000000); // big cache, ~10% hit ratio
comment|//
comment|//    perfTestBoth(1, 2000000, 1000, 1000); // small cache, ~100% hit ratio
comment|//    perfTestBoth(2, 2000000, 1000, 1000); // small cache, ~100% hit ratio
comment|//    perfTestBoth(1, 2000000, 1000, 1200); // small cache, bigger hit ratio
comment|//    perfTestBoth(2, 2000000, 1000, 1200); // small cache, bigger hit ratio
comment|//    perfTestBoth(1, 2000000, 1000, 2000); // small cache, ~50% hit ratio
comment|//    perfTestBoth(2, 2000000, 1000, 2000); // small cache, ~50% hit ratio
comment|//    perfTestBoth(1, 2000000, 1000, 10000); // small cache, ~10% hit ratio
comment|//    perfTestBoth(2, 2000000, 1000, 10000); // small cache, ~10% hit ratio
comment|//  }
block|}
end_class
end_unit
