begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search.join
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|join
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|BaseDistributedSearchTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|FacetField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|FacetField
operator|.
name|Count
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_class
annotation|@
name|Slow
DECL|class|BlockJoinFacetDistribTest
specifier|public
class|class
name|BlockJoinFacetDistribTest
extends|extends
name|BaseDistributedSearchTestCase
block|{
annotation|@
name|BeforeClass
DECL|method|beforeSuperClass
specifier|public
specifier|static
name|void
name|beforeSuperClass
parameter_list|()
throws|throws
name|Exception
block|{
name|schemaString
operator|=
literal|"schema-blockjoinfacetcomponent.xml"
expr_stmt|;
name|configString
operator|=
literal|"solrconfig-blockjoinfacetcomponent.xml"
expr_stmt|;
block|}
annotation|@
name|ShardsFixed
argument_list|(
name|num
operator|=
literal|3
argument_list|)
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|testBJQFacetComponent
argument_list|()
expr_stmt|;
block|}
DECL|field|colors
specifier|final
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|colors
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"red"
argument_list|,
literal|"blue"
argument_list|,
literal|"brown"
argument_list|,
literal|"white"
argument_list|,
literal|"black"
argument_list|,
literal|"yellow"
argument_list|,
literal|"cyan"
argument_list|,
literal|"magenta"
argument_list|,
literal|"blur"
argument_list|,
literal|"fuchsia"
argument_list|,
literal|"light"
argument_list|,
literal|"dark"
argument_list|,
literal|"green"
argument_list|,
literal|"grey"
argument_list|,
literal|"don't"
argument_list|,
literal|"know"
argument_list|,
literal|"any"
argument_list|,
literal|"more"
argument_list|)
decl_stmt|;
DECL|field|sizes
specifier|final
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|sizes
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"s"
argument_list|,
literal|"m"
argument_list|,
literal|"l"
argument_list|,
literal|"xl"
argument_list|,
literal|"xxl"
argument_list|,
literal|"xml"
argument_list|,
literal|"xxxl"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|,
literal|"6"
argument_list|,
literal|"petite"
argument_list|,
literal|"maxi"
argument_list|)
decl_stmt|;
DECL|method|testBJQFacetComponent
specifier|private
name|void
name|testBJQFacetComponent
parameter_list|()
throws|throws
name|Exception
block|{
assert|assert
operator|!
name|colors
operator|.
name|removeAll
argument_list|(
name|sizes
argument_list|)
operator|:
literal|"there is no colors in sizes"
assert|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|colors
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|matchingColors
init|=
name|colors
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|atLeast
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|,
name|colors
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|parentIdsByAttrValue
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Integer
argument_list|>
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|super
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|null
operator|&&
name|put
argument_list|(
operator|(
name|String
operator|)
name|key
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
operator|==
literal|null
condition|?
name|super
operator|.
name|get
argument_list|(
name|key
argument_list|)
else|:
name|super
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|int
name|parents
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|boolean
name|aggregationOccurs
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|parent
init|=
literal|0
init|;
name|parent
operator|<
name|parents
operator|||
operator|!
name|aggregationOccurs
condition|;
name|parent
operator|++
control|)
block|{
assert|assert
name|parent
operator|<
literal|2000000
operator|:
literal|"parent num "
operator|+
name|parent
operator|+
literal|" aggregationOccurs:"
operator|+
name|aggregationOccurs
operator|+
literal|". Sorry! too tricky loop condition."
assert|;
name|SolrInputDocument
name|pdoc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|pdoc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|pdoc
operator|.
name|addField
argument_list|(
literal|"type_s"
argument_list|,
literal|"parent"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|parentBrand
init|=
literal|"brand"
operator|+
operator|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|)
decl_stmt|;
name|pdoc
operator|.
name|addField
argument_list|(
literal|"BRAND_s"
argument_list|,
name|parentBrand
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|child
init|=
literal|0
init|;
name|child
operator|<
name|atLeast
argument_list|(
name|colors
operator|.
name|size
argument_list|()
operator|/
literal|2
argument_list|)
condition|;
name|child
operator|++
control|)
block|{
name|SolrInputDocument
name|childDoc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
specifier|final
name|String
name|color
init|=
name|colors
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|colors
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|childDoc
operator|.
name|addField
argument_list|(
literal|"COLOR_s"
argument_list|,
name|color
argument_list|)
expr_stmt|;
specifier|final
name|String
name|size
init|=
name|sizes
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|sizes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|childDoc
operator|.
name|addField
argument_list|(
literal|"SIZE_s"
argument_list|,
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|matchingColors
operator|.
name|contains
argument_list|(
name|color
argument_list|)
condition|)
block|{
specifier|final
name|boolean
name|colorDupe
init|=
operator|!
name|parentIdsByAttrValue
operator|.
name|get
argument_list|(
name|color
argument_list|)
operator|.
name|add
argument_list|(
name|parent
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|sizeDupe
init|=
operator|!
name|parentIdsByAttrValue
operator|.
name|get
argument_list|(
name|size
argument_list|)
operator|.
name|add
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|aggregationOccurs
operator||=
name|colorDupe
operator|||
name|sizeDupe
expr_stmt|;
block|}
name|pdoc
operator|.
name|addChildDocument
argument_list|(
name|childDoc
argument_list|)
expr_stmt|;
block|}
name|indexDoc
argument_list|(
name|pdoc
argument_list|)
expr_stmt|;
block|}
name|commit
argument_list|()
expr_stmt|;
comment|//handle.clear();
name|handle
operator|.
name|put
argument_list|(
literal|"timestamp"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"_version_"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
comment|// not a cloud test, but may use updateLog
name|handle
operator|.
name|put
argument_list|(
literal|"maxScore"
argument_list|,
name|SKIP
argument_list|)
expr_stmt|;
comment|// see org.apache.solr.TestDistributedSearch.test()
name|handle
operator|.
name|put
argument_list|(
literal|"shards"
argument_list|,
name|SKIP
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"distrib"
argument_list|,
name|SKIP
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"rid"
argument_list|,
name|SKIP
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"track"
argument_list|,
name|SKIP
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"facet_fields"
argument_list|,
name|UNORDERED
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"SIZE_s"
argument_list|,
name|UNORDERED
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"COLOR_s"
argument_list|,
name|UNORDERED
argument_list|)
expr_stmt|;
comment|// to parent query
specifier|final
name|String
name|childQueryClause
init|=
literal|"COLOR_s:("
operator|+
operator|(
name|matchingColors
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"[,\\[\\]]"
argument_list|,
literal|" "
argument_list|)
operator|)
operator|+
literal|")"
decl_stmt|;
name|QueryResponse
name|results
init|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"{!parent which=\"type_s:parent\"}"
operator|+
name|childQueryClause
argument_list|,
literal|"facet"
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|,
literal|"qt"
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"blockJoinDocSetFacetRH"
else|:
literal|"blockJoinFacetRH"
argument_list|,
literal|"child.facet.field"
argument_list|,
literal|"COLOR_s"
argument_list|,
literal|"child.facet.field"
argument_list|,
literal|"SIZE_s"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
comment|// we care only abt results
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|resultsResponse
init|=
name|results
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|resultsResponse
argument_list|)
expr_stmt|;
name|FacetField
name|color_s
init|=
name|results
operator|.
name|getFacetField
argument_list|(
literal|"COLOR_s"
argument_list|)
decl_stmt|;
name|FacetField
name|size_s
init|=
name|results
operator|.
name|getFacetField
argument_list|(
literal|"SIZE_s"
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
literal|""
operator|+
name|parentIdsByAttrValue
operator|+
literal|" "
operator|+
name|color_s
operator|+
literal|" "
operator|+
name|size_s
decl_stmt|;
for|for
control|(
name|FacetField
name|facet
range|:
operator|new
name|FacetField
index|[]
block|{
name|color_s
block|,
name|size_s
block|}
control|)
block|{
for|for
control|(
name|Count
name|c
range|:
name|facet
operator|.
name|getValues
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|c
operator|.
name|getName
argument_list|()
operator|+
literal|"("
operator|+
name|msg
operator|+
literal|")"
argument_list|,
name|parentIdsByAttrValue
operator|.
name|get
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|c
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|parentIdsByAttrValue
operator|.
name|size
argument_list|()
argument_list|,
name|color_s
operator|.
name|getValueCount
argument_list|()
operator|+
name|size_s
operator|.
name|getValueCount
argument_list|()
argument_list|)
expr_stmt|;
comment|//  }
block|}
DECL|method|getCloudSolrConfig
specifier|protected
name|String
name|getCloudSolrConfig
parameter_list|()
block|{
return|return
name|configString
return|;
block|}
block|}
end_class
end_unit
