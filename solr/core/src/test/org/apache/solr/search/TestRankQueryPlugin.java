begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|ReaderUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|LeafCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|LeafFieldComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocsCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|InPlaceMergeSorter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ShardParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|MergeStrategy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ResponseBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardDoc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import
begin_class
annotation|@
name|Ignore
DECL|class|TestRankQueryPlugin
specifier|public
class|class
name|TestRankQueryPlugin
extends|extends
name|QParserPlugin
block|{
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|params
parameter_list|)
block|{    }
DECL|method|createParser
specifier|public
name|QParser
name|createParser
parameter_list|(
name|String
name|query
parameter_list|,
name|SolrParams
name|localParams
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|)
block|{
return|return
operator|new
name|TestRankQueryParser
argument_list|(
name|query
argument_list|,
name|localParams
argument_list|,
name|params
argument_list|,
name|req
argument_list|)
return|;
block|}
DECL|class|TestRankQueryParser
class|class
name|TestRankQueryParser
extends|extends
name|QParser
block|{
DECL|method|TestRankQueryParser
specifier|public
name|TestRankQueryParser
parameter_list|(
name|String
name|query
parameter_list|,
name|SolrParams
name|localParams
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|)
block|{
name|super
argument_list|(
name|query
argument_list|,
name|localParams
argument_list|,
name|params
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
DECL|method|parse
specifier|public
name|Query
name|parse
parameter_list|()
throws|throws
name|SyntaxError
block|{
name|int
name|mergeStrategy
init|=
name|localParams
operator|.
name|getInt
argument_list|(
literal|"mergeStrategy"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|collector
init|=
name|localParams
operator|.
name|getInt
argument_list|(
literal|"collector"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
operator|new
name|TestRankQuery
argument_list|(
name|collector
argument_list|,
name|mergeStrategy
argument_list|)
return|;
block|}
block|}
DECL|class|TestRankQuery
class|class
name|TestRankQuery
extends|extends
name|RankQuery
block|{
DECL|field|mergeStrategy
specifier|private
name|int
name|mergeStrategy
decl_stmt|;
DECL|field|collector
specifier|private
name|int
name|collector
decl_stmt|;
DECL|field|q
specifier|private
name|Query
name|q
decl_stmt|;
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|collector
operator|+
name|q
operator|.
name|hashCode
argument_list|()
return|;
block|}
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|TestRankQuery
condition|)
block|{
name|TestRankQuery
name|trq
init|=
operator|(
name|TestRankQuery
operator|)
name|o
decl_stmt|;
return|return
operator|(
name|trq
operator|.
name|q
operator|.
name|equals
argument_list|(
name|q
argument_list|)
operator|&&
name|trq
operator|.
name|collector
operator|==
name|collector
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|createWeight
specifier|public
name|Weight
name|createWeight
parameter_list|(
name|IndexSearcher
name|indexSearcher
parameter_list|,
name|boolean
name|needsScores
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|q
operator|.
name|createWeight
argument_list|(
name|indexSearcher
argument_list|,
name|needsScores
argument_list|)
return|;
block|}
DECL|method|setBoost
specifier|public
name|void
name|setBoost
parameter_list|(
name|float
name|boost
parameter_list|)
block|{
name|q
operator|.
name|setBoost
argument_list|(
name|boost
argument_list|)
expr_stmt|;
block|}
DECL|method|getBoost
specifier|public
name|float
name|getBoost
parameter_list|()
block|{
return|return
name|q
operator|.
name|getBoost
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
name|q
operator|.
name|toString
argument_list|(
name|field
argument_list|)
return|;
block|}
DECL|method|wrap
specifier|public
name|RankQuery
name|wrap
parameter_list|(
name|Query
name|q
parameter_list|)
block|{
name|this
operator|.
name|q
operator|=
name|q
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|TestRankQuery
specifier|public
name|TestRankQuery
parameter_list|(
name|int
name|collector
parameter_list|,
name|int
name|mergeStrategy
parameter_list|)
block|{
name|this
operator|.
name|collector
operator|=
name|collector
expr_stmt|;
name|this
operator|.
name|mergeStrategy
operator|=
name|mergeStrategy
expr_stmt|;
block|}
DECL|method|getTopDocsCollector
specifier|public
name|TopDocsCollector
name|getTopDocsCollector
parameter_list|(
name|int
name|len
parameter_list|,
name|SolrIndexSearcher
operator|.
name|QueryCommand
name|cmd
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|)
block|{
if|if
condition|(
name|collector
operator|==
literal|0
condition|)
return|return
operator|new
name|TestCollector
argument_list|(
literal|null
argument_list|)
return|;
else|else
return|return
operator|new
name|TestCollector1
argument_list|(
literal|null
argument_list|)
return|;
block|}
DECL|method|getMergeStrategy
specifier|public
name|MergeStrategy
name|getMergeStrategy
parameter_list|()
block|{
if|if
condition|(
name|mergeStrategy
operator|==
literal|0
condition|)
return|return
operator|new
name|TestMergeStrategy
argument_list|()
return|;
else|else
return|return
operator|new
name|TestMergeStrategy1
argument_list|()
return|;
block|}
block|}
DECL|class|TestMergeStrategy
class|class
name|TestMergeStrategy
implements|implements
name|MergeStrategy
block|{
DECL|method|getCost
specifier|public
name|int
name|getCost
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
DECL|method|mergesIds
specifier|public
name|boolean
name|mergesIds
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|handlesMergeFields
specifier|public
name|boolean
name|handlesMergeFields
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|handleMergeFields
specifier|public
name|void
name|handleMergeFields
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|SolrIndexSearcher
name|searcher
parameter_list|)
block|{      }
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|)
block|{
comment|// id to shard mapping, to eliminate any accidental dups
name|HashMap
argument_list|<
name|Object
argument_list|,
name|String
argument_list|>
name|uniqueDoc
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|shardInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
name|ShardParams
operator|.
name|SHARDS_INFO
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|shardInfo
operator|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
expr_stmt|;
name|rb
operator|.
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|add
argument_list|(
name|ShardParams
operator|.
name|SHARDS_INFO
argument_list|,
name|shardInfo
argument_list|)
expr_stmt|;
block|}
name|IndexSchema
name|schema
init|=
name|rb
operator|.
name|req
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|SchemaField
name|uniqueKeyField
init|=
name|schema
operator|.
name|getUniqueKeyField
argument_list|()
decl_stmt|;
name|long
name|numFound
init|=
literal|0
decl_stmt|;
name|Float
name|maxScore
init|=
literal|null
decl_stmt|;
name|boolean
name|partialResults
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|ShardDoc
argument_list|>
name|shardDocs
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardResponse
name|srsp
range|:
name|sreq
operator|.
name|responses
control|)
block|{
name|SolrDocumentList
name|docs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|shardInfo
operator|!=
literal|null
condition|)
block|{
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|nl
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|srsp
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Throwable
name|t
init|=
name|srsp
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|SolrServerException
condition|)
block|{
name|t
operator|=
operator|(
operator|(
name|SolrServerException
operator|)
name|t
operator|)
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
name|nl
operator|.
name|add
argument_list|(
literal|"error"
argument_list|,
name|t
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|StringWriter
name|trace
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|t
operator|.
name|printStackTrace
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|trace
argument_list|)
argument_list|)
expr_stmt|;
name|nl
operator|.
name|add
argument_list|(
literal|"trace"
argument_list|,
name|trace
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|srsp
operator|.
name|getShardAddress
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|nl
operator|.
name|add
argument_list|(
literal|"shardAddress"
argument_list|,
name|srsp
operator|.
name|getShardAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|docs
operator|=
operator|(
name|SolrDocumentList
operator|)
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
expr_stmt|;
name|nl
operator|.
name|add
argument_list|(
literal|"numFound"
argument_list|,
name|docs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|nl
operator|.
name|add
argument_list|(
literal|"maxScore"
argument_list|,
name|docs
operator|.
name|getMaxScore
argument_list|()
argument_list|)
expr_stmt|;
name|nl
operator|.
name|add
argument_list|(
literal|"shardAddress"
argument_list|,
name|srsp
operator|.
name|getShardAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|nl
operator|.
name|add
argument_list|(
literal|"time"
argument_list|,
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getElapsedTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|shardInfo
operator|.
name|add
argument_list|(
name|srsp
operator|.
name|getShard
argument_list|()
argument_list|,
name|nl
argument_list|)
expr_stmt|;
block|}
comment|// now that we've added the shard info, let's only proceed if we have no error.
if|if
condition|(
name|srsp
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|partialResults
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|docs
operator|==
literal|null
condition|)
block|{
comment|// could have been initialized in the shards info block above
name|docs
operator|=
operator|(
name|SolrDocumentList
operator|)
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
expr_stmt|;
block|}
name|NamedList
argument_list|<
name|?
argument_list|>
name|responseHeader
init|=
operator|(
name|NamedList
argument_list|<
name|?
argument_list|>
operator|)
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"responseHeader"
argument_list|)
decl_stmt|;
if|if
condition|(
name|responseHeader
operator|!=
literal|null
operator|&&
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|responseHeader
operator|.
name|get
argument_list|(
literal|"partialResults"
argument_list|)
argument_list|)
condition|)
block|{
name|partialResults
operator|=
literal|true
expr_stmt|;
block|}
comment|// calculate global maxScore and numDocsFound
if|if
condition|(
name|docs
operator|.
name|getMaxScore
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|maxScore
operator|=
name|maxScore
operator|==
literal|null
condition|?
name|docs
operator|.
name|getMaxScore
argument_list|()
else|:
name|Math
operator|.
name|max
argument_list|(
name|maxScore
argument_list|,
name|docs
operator|.
name|getMaxScore
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|numFound
operator|+=
name|docs
operator|.
name|getNumFound
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SolrDocument
name|doc
init|=
name|docs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
name|id
init|=
name|doc
operator|.
name|getFieldValue
argument_list|(
name|uniqueKeyField
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|prevShard
init|=
name|uniqueDoc
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|srsp
operator|.
name|getShard
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevShard
operator|!=
literal|null
condition|)
block|{
comment|// duplicate detected
name|numFound
operator|--
expr_stmt|;
comment|// For now, just always use the first encountered since we can't currently
comment|// remove the previous one added to the priority queue.  If we switched
comment|// to the Java5 PriorityQueue, this would be easier.
continue|continue;
comment|// make which duplicate is used deterministic based on shard
comment|// if (prevShard.compareTo(srsp.shard)>= 0) {
comment|//  TODO: remove previous from priority queue
comment|//  continue;
comment|// }
block|}
name|ShardDoc
name|shardDoc
init|=
operator|new
name|ShardDoc
argument_list|()
decl_stmt|;
name|shardDoc
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|shardDoc
operator|.
name|shard
operator|=
name|srsp
operator|.
name|getShard
argument_list|()
expr_stmt|;
name|shardDoc
operator|.
name|orderInShard
operator|=
name|i
expr_stmt|;
name|Object
name|scoreObj
init|=
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"score"
argument_list|)
decl_stmt|;
if|if
condition|(
name|scoreObj
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|scoreObj
operator|instanceof
name|String
condition|)
block|{
name|shardDoc
operator|.
name|score
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
operator|(
name|String
operator|)
name|scoreObj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|shardDoc
operator|.
name|score
operator|=
operator|(
name|Float
operator|)
name|scoreObj
expr_stmt|;
block|}
block|}
name|shardDocs
operator|.
name|add
argument_list|(
name|shardDoc
argument_list|)
expr_stmt|;
block|}
comment|// end for-each-doc-in-response
block|}
comment|// end for-each-response
name|Collections
operator|.
name|sort
argument_list|(
name|shardDocs
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ShardDoc
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ShardDoc
name|o1
parameter_list|,
name|ShardDoc
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|.
name|score
operator|<
name|o2
operator|.
name|score
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|o1
operator|.
name|score
operator|>
name|o2
operator|.
name|score
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
comment|//To change body of implemented methods use File | Settings | File Templates.
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|int
name|resultSize
init|=
name|shardDocs
operator|.
name|size
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|ShardDoc
argument_list|>
name|resultIds
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shardDocs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ShardDoc
name|shardDoc
init|=
name|shardDocs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|shardDoc
operator|.
name|positionInResponse
operator|=
name|i
expr_stmt|;
comment|// Need the toString() for correlation with other lists that must
comment|// be strings (like keys in highlighting, explain, etc)
name|resultIds
operator|.
name|put
argument_list|(
name|shardDoc
operator|.
name|id
operator|.
name|toString
argument_list|()
argument_list|,
name|shardDoc
argument_list|)
expr_stmt|;
block|}
comment|// Add hits for distributed requests
comment|// https://issues.apache.org/jira/browse/SOLR-3518
name|rb
operator|.
name|rsp
operator|.
name|addToLog
argument_list|(
literal|"hits"
argument_list|,
name|numFound
argument_list|)
expr_stmt|;
name|SolrDocumentList
name|responseDocs
init|=
operator|new
name|SolrDocumentList
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxScore
operator|!=
literal|null
condition|)
name|responseDocs
operator|.
name|setMaxScore
argument_list|(
name|maxScore
argument_list|)
expr_stmt|;
name|responseDocs
operator|.
name|setNumFound
argument_list|(
name|numFound
argument_list|)
expr_stmt|;
name|responseDocs
operator|.
name|setStart
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// size appropriately
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resultSize
condition|;
name|i
operator|++
control|)
name|responseDocs
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// save these results in a private area so we can access them
comment|// again when retrieving stored fields.
comment|// TODO: use ResponseBuilder (w/ comments) or the request context?
name|rb
operator|.
name|resultIds
operator|=
name|resultIds
expr_stmt|;
name|rb
operator|.
name|setResponseDocs
argument_list|(
name|responseDocs
argument_list|)
expr_stmt|;
if|if
condition|(
name|partialResults
condition|)
block|{
name|rb
operator|.
name|rsp
operator|.
name|getResponseHeader
argument_list|()
operator|.
name|add
argument_list|(
literal|"partialResults"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|TestMergeStrategy1
class|class
name|TestMergeStrategy1
implements|implements
name|MergeStrategy
block|{
DECL|method|getCost
specifier|public
name|int
name|getCost
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
DECL|method|mergesIds
specifier|public
name|boolean
name|mergesIds
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|handlesMergeFields
specifier|public
name|boolean
name|handlesMergeFields
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|handleMergeFields
specifier|public
name|void
name|handleMergeFields
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|SolrIndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrQueryRequest
name|req
init|=
name|rb
operator|.
name|req
decl_stmt|;
name|SolrQueryResponse
name|rsp
init|=
name|rb
operator|.
name|rsp
decl_stmt|;
comment|// The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't
comment|// currently have an option to return sort field values.  Because of this, we
comment|// take the documents given and re-derive the sort values.
comment|//
comment|// TODO: See SOLR-5595
name|boolean
name|fsv
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
name|ResponseBuilder
operator|.
name|FIELD_SORT_VALUES
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|fsv
condition|)
block|{
name|NamedList
argument_list|<
name|Object
index|[]
argument_list|>
name|sortVals
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// order is important for the sort fields
name|IndexReaderContext
name|topReaderContext
init|=
name|searcher
operator|.
name|getTopReaderContext
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LeafReaderContext
argument_list|>
name|leaves
init|=
name|topReaderContext
operator|.
name|leaves
argument_list|()
decl_stmt|;
name|LeafReaderContext
name|currentLeaf
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|leaves
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// if there is a single segment, use that subReader and avoid looking up each time
name|currentLeaf
operator|=
name|leaves
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|leaves
operator|=
literal|null
expr_stmt|;
block|}
name|DocList
name|docList
init|=
name|rb
operator|.
name|getResults
argument_list|()
operator|.
name|docList
decl_stmt|;
comment|// sort ids from lowest to highest so we can access them in order
name|int
name|nDocs
init|=
name|docList
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|long
index|[]
name|sortedIds
init|=
operator|new
name|long
index|[
name|nDocs
index|]
decl_stmt|;
specifier|final
name|float
index|[]
name|scores
init|=
operator|new
name|float
index|[
name|nDocs
index|]
decl_stmt|;
comment|// doc scores, parallel to sortedIds
name|DocList
name|docs
init|=
name|rb
operator|.
name|getResults
argument_list|()
operator|.
name|docList
decl_stmt|;
name|DocIterator
name|it
init|=
name|docs
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nDocs
condition|;
name|i
operator|++
control|)
block|{
name|sortedIds
index|[
name|i
index|]
operator|=
operator|(
operator|(
operator|(
name|long
operator|)
name|it
operator|.
name|nextDoc
argument_list|()
operator|)
operator|<<
literal|32
operator|)
operator||
name|i
expr_stmt|;
name|scores
index|[
name|i
index|]
operator|=
name|docs
operator|.
name|hasScores
argument_list|()
condition|?
name|it
operator|.
name|score
argument_list|()
else|:
name|Float
operator|.
name|NaN
expr_stmt|;
block|}
comment|// sort ids and scores together
operator|new
name|InPlaceMergeSorter
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|long
name|tmpId
init|=
name|sortedIds
index|[
name|i
index|]
decl_stmt|;
name|float
name|tmpScore
init|=
name|scores
index|[
name|i
index|]
decl_stmt|;
name|sortedIds
index|[
name|i
index|]
operator|=
name|sortedIds
index|[
name|j
index|]
expr_stmt|;
name|scores
index|[
name|i
index|]
operator|=
name|scores
index|[
name|j
index|]
expr_stmt|;
name|sortedIds
index|[
name|j
index|]
operator|=
name|tmpId
expr_stmt|;
name|scores
index|[
name|j
index|]
operator|=
name|tmpScore
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|compare
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|sortedIds
index|[
name|i
index|]
argument_list|,
name|sortedIds
index|[
name|j
index|]
argument_list|)
return|;
block|}
block|}
operator|.
name|sort
argument_list|(
literal|0
argument_list|,
name|sortedIds
operator|.
name|length
argument_list|)
expr_stmt|;
name|SortSpec
name|sortSpec
init|=
name|rb
operator|.
name|getSortSpec
argument_list|()
decl_stmt|;
name|Sort
name|sort
init|=
name|searcher
operator|.
name|weightSort
argument_list|(
name|sortSpec
operator|.
name|getSort
argument_list|()
argument_list|)
decl_stmt|;
name|SortField
index|[]
name|sortFields
init|=
name|sort
operator|==
literal|null
condition|?
operator|new
name|SortField
index|[]
block|{
name|SortField
operator|.
name|FIELD_SCORE
block|}
else|:
name|sort
operator|.
name|getSort
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SchemaField
argument_list|>
name|schemaFields
init|=
name|sortSpec
operator|.
name|getSchemaFields
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|fld
init|=
literal|0
init|;
name|fld
operator|<
name|schemaFields
operator|.
name|size
argument_list|()
condition|;
name|fld
operator|++
control|)
block|{
name|SchemaField
name|schemaField
init|=
name|schemaFields
operator|.
name|get
argument_list|(
name|fld
argument_list|)
decl_stmt|;
name|FieldType
name|ft
init|=
literal|null
operator|==
name|schemaField
condition|?
literal|null
else|:
name|schemaField
operator|.
name|getType
argument_list|()
decl_stmt|;
name|SortField
name|sortField
init|=
name|sortFields
index|[
name|fld
index|]
decl_stmt|;
name|SortField
operator|.
name|Type
name|type
init|=
name|sortField
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|// :TODO: would be simpler to always serialize every position of SortField[]
if|if
condition|(
name|type
operator|==
name|SortField
operator|.
name|Type
operator|.
name|SCORE
operator|||
name|type
operator|==
name|SortField
operator|.
name|Type
operator|.
name|DOC
condition|)
continue|continue;
name|FieldComparator
argument_list|<
name|?
argument_list|>
name|comparator
init|=
literal|null
decl_stmt|;
name|LeafFieldComparator
name|leafComparator
init|=
literal|null
decl_stmt|;
name|Object
index|[]
name|vals
init|=
operator|new
name|Object
index|[
name|nDocs
index|]
decl_stmt|;
name|int
name|lastIdx
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortedIds
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|long
name|idAndPos
init|=
name|sortedIds
index|[
name|i
index|]
decl_stmt|;
name|float
name|score
init|=
name|scores
index|[
name|i
index|]
decl_stmt|;
name|int
name|doc
init|=
call|(
name|int
call|)
argument_list|(
name|idAndPos
operator|>>>
literal|32
argument_list|)
decl_stmt|;
name|int
name|position
init|=
operator|(
name|int
operator|)
name|idAndPos
decl_stmt|;
if|if
condition|(
name|leaves
operator|!=
literal|null
condition|)
block|{
name|idx
operator|=
name|ReaderUtil
operator|.
name|subIndex
argument_list|(
name|doc
argument_list|,
name|leaves
argument_list|)
expr_stmt|;
name|currentLeaf
operator|=
name|leaves
operator|.
name|get
argument_list|(
name|idx
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|!=
name|lastIdx
condition|)
block|{
comment|// we switched segments.  invalidate comparator.
name|comparator
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|comparator
operator|==
literal|null
condition|)
block|{
name|comparator
operator|=
name|sortField
operator|.
name|getComparator
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|leafComparator
operator|=
name|comparator
operator|.
name|getLeafComparator
argument_list|(
name|currentLeaf
argument_list|)
expr_stmt|;
block|}
name|doc
operator|-=
name|currentLeaf
operator|.
name|docBase
expr_stmt|;
comment|// adjust for what segment this is in
name|leafComparator
operator|.
name|setScorer
argument_list|(
operator|new
name|FakeScorer
argument_list|(
name|doc
argument_list|,
name|score
argument_list|)
argument_list|)
expr_stmt|;
name|leafComparator
operator|.
name|copy
argument_list|(
literal|0
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|Object
name|val
init|=
name|comparator
operator|.
name|value
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|ft
condition|)
name|val
operator|=
name|ft
operator|.
name|marshalSortValue
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|vals
index|[
name|position
index|]
operator|=
name|val
expr_stmt|;
block|}
name|sortVals
operator|.
name|add
argument_list|(
name|sortField
operator|.
name|getField
argument_list|()
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
name|rsp
operator|.
name|add
argument_list|(
literal|"merge_values"
argument_list|,
name|sortVals
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FakeScorer
specifier|private
class|class
name|FakeScorer
extends|extends
name|Scorer
block|{
DECL|field|docid
specifier|final
name|int
name|docid
decl_stmt|;
DECL|field|score
specifier|final
name|float
name|score
decl_stmt|;
DECL|method|FakeScorer
name|FakeScorer
parameter_list|(
name|int
name|docid
parameter_list|,
name|float
name|score
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|docid
operator|=
name|docid
expr_stmt|;
name|this
operator|.
name|score
operator|=
name|score
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|docid
return|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|score
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|nextPosition
specifier|public
name|int
name|nextPosition
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|startOffset
specifier|public
name|int
name|startOffset
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|endOffset
specifier|public
name|int
name|endOffset
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|getPayload
specifier|public
name|BytesRef
name|getPayload
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|getWeight
specifier|public
name|Weight
name|getWeight
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getChildren
specifier|public
name|Collection
argument_list|<
name|ChildScorer
argument_list|>
name|getChildren
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|)
block|{
comment|// id to shard mapping, to eliminate any accidental dups
name|HashMap
argument_list|<
name|Object
argument_list|,
name|String
argument_list|>
name|uniqueDoc
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|shardInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
name|ShardParams
operator|.
name|SHARDS_INFO
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|shardInfo
operator|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
expr_stmt|;
name|rb
operator|.
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|add
argument_list|(
name|ShardParams
operator|.
name|SHARDS_INFO
argument_list|,
name|shardInfo
argument_list|)
expr_stmt|;
block|}
name|IndexSchema
name|schema
init|=
name|rb
operator|.
name|req
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|SchemaField
name|uniqueKeyField
init|=
name|schema
operator|.
name|getUniqueKeyField
argument_list|()
decl_stmt|;
name|long
name|numFound
init|=
literal|0
decl_stmt|;
name|Float
name|maxScore
init|=
literal|null
decl_stmt|;
name|boolean
name|partialResults
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|ShardDoc
argument_list|>
name|shardDocs
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardResponse
name|srsp
range|:
name|sreq
operator|.
name|responses
control|)
block|{
name|SolrDocumentList
name|docs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|shardInfo
operator|!=
literal|null
condition|)
block|{
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|nl
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|srsp
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Throwable
name|t
init|=
name|srsp
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|SolrServerException
condition|)
block|{
name|t
operator|=
operator|(
operator|(
name|SolrServerException
operator|)
name|t
operator|)
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
name|nl
operator|.
name|add
argument_list|(
literal|"error"
argument_list|,
name|t
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|StringWriter
name|trace
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|t
operator|.
name|printStackTrace
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|trace
argument_list|)
argument_list|)
expr_stmt|;
name|nl
operator|.
name|add
argument_list|(
literal|"trace"
argument_list|,
name|trace
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|srsp
operator|.
name|getShardAddress
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|nl
operator|.
name|add
argument_list|(
literal|"shardAddress"
argument_list|,
name|srsp
operator|.
name|getShardAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|docs
operator|=
operator|(
name|SolrDocumentList
operator|)
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
expr_stmt|;
name|nl
operator|.
name|add
argument_list|(
literal|"numFound"
argument_list|,
name|docs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|nl
operator|.
name|add
argument_list|(
literal|"maxScore"
argument_list|,
name|docs
operator|.
name|getMaxScore
argument_list|()
argument_list|)
expr_stmt|;
name|nl
operator|.
name|add
argument_list|(
literal|"shardAddress"
argument_list|,
name|srsp
operator|.
name|getShardAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|nl
operator|.
name|add
argument_list|(
literal|"time"
argument_list|,
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getElapsedTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|shardInfo
operator|.
name|add
argument_list|(
name|srsp
operator|.
name|getShard
argument_list|()
argument_list|,
name|nl
argument_list|)
expr_stmt|;
block|}
comment|// now that we've added the shard info, let's only proceed if we have no error.
if|if
condition|(
name|srsp
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|partialResults
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|docs
operator|==
literal|null
condition|)
block|{
comment|// could have been initialized in the shards info block above
name|docs
operator|=
operator|(
name|SolrDocumentList
operator|)
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
expr_stmt|;
block|}
name|NamedList
argument_list|<
name|?
argument_list|>
name|responseHeader
init|=
operator|(
name|NamedList
argument_list|<
name|?
argument_list|>
operator|)
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"responseHeader"
argument_list|)
decl_stmt|;
if|if
condition|(
name|responseHeader
operator|!=
literal|null
operator|&&
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|responseHeader
operator|.
name|get
argument_list|(
literal|"partialResults"
argument_list|)
argument_list|)
condition|)
block|{
name|partialResults
operator|=
literal|true
expr_stmt|;
block|}
comment|// calculate global maxScore and numDocsFound
if|if
condition|(
name|docs
operator|.
name|getMaxScore
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|maxScore
operator|=
name|maxScore
operator|==
literal|null
condition|?
name|docs
operator|.
name|getMaxScore
argument_list|()
else|:
name|Math
operator|.
name|max
argument_list|(
name|maxScore
argument_list|,
name|docs
operator|.
name|getMaxScore
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|numFound
operator|+=
name|docs
operator|.
name|getNumFound
argument_list|()
expr_stmt|;
name|SortSpec
name|ss
init|=
name|rb
operator|.
name|getSortSpec
argument_list|()
decl_stmt|;
name|Sort
name|sort
init|=
name|ss
operator|.
name|getSort
argument_list|()
decl_stmt|;
name|NamedList
name|sortFieldValues
init|=
call|(
name|NamedList
call|)
argument_list|(
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"merge_values"
argument_list|)
argument_list|)
decl_stmt|;
name|NamedList
name|unmarshalledSortFieldValues
init|=
name|unmarshalSortValues
argument_list|(
name|ss
argument_list|,
name|sortFieldValues
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|List
name|lst
init|=
operator|(
name|List
operator|)
name|unmarshalledSortFieldValues
operator|.
name|getVal
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SolrDocument
name|doc
init|=
name|docs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
name|id
init|=
name|doc
operator|.
name|getFieldValue
argument_list|(
name|uniqueKeyField
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|prevShard
init|=
name|uniqueDoc
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|srsp
operator|.
name|getShard
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevShard
operator|!=
literal|null
condition|)
block|{
comment|// duplicate detected
name|numFound
operator|--
expr_stmt|;
comment|// For now, just always use the first encountered since we can't currently
comment|// remove the previous one added to the priority queue.  If we switched
comment|// to the Java5 PriorityQueue, this would be easier.
continue|continue;
comment|// make which duplicate is used deterministic based on shard
comment|// if (prevShard.compareTo(srsp.shard)>= 0) {
comment|//  TODO: remove previous from priority queue
comment|//  continue;
comment|// }
block|}
name|ShardDoc
name|shardDoc
init|=
operator|new
name|ShardDoc
argument_list|()
decl_stmt|;
name|shardDoc
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|shardDoc
operator|.
name|shard
operator|=
name|srsp
operator|.
name|getShard
argument_list|()
expr_stmt|;
name|shardDoc
operator|.
name|orderInShard
operator|=
name|i
expr_stmt|;
name|Object
name|scoreObj
init|=
name|lst
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|scoreObj
operator|!=
literal|null
condition|)
block|{
name|shardDoc
operator|.
name|score
operator|=
operator|(
operator|(
name|Integer
operator|)
name|scoreObj
operator|)
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
name|shardDocs
operator|.
name|add
argument_list|(
name|shardDoc
argument_list|)
expr_stmt|;
block|}
comment|// end for-each-doc-in-response
block|}
comment|// end for-each-response
name|Collections
operator|.
name|sort
argument_list|(
name|shardDocs
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ShardDoc
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ShardDoc
name|o1
parameter_list|,
name|ShardDoc
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|.
name|score
operator|<
name|o2
operator|.
name|score
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|o1
operator|.
name|score
operator|>
name|o2
operator|.
name|score
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
comment|//To change body of implemented methods use File | Settings | File Templates.
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|int
name|resultSize
init|=
name|shardDocs
operator|.
name|size
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|ShardDoc
argument_list|>
name|resultIds
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shardDocs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ShardDoc
name|shardDoc
init|=
name|shardDocs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|shardDoc
operator|.
name|positionInResponse
operator|=
name|i
expr_stmt|;
comment|// Need the toString() for correlation with other lists that must
comment|// be strings (like keys in highlighting, explain, etc)
name|resultIds
operator|.
name|put
argument_list|(
name|shardDoc
operator|.
name|id
operator|.
name|toString
argument_list|()
argument_list|,
name|shardDoc
argument_list|)
expr_stmt|;
block|}
comment|// Add hits for distributed requests
comment|// https://issues.apache.org/jira/browse/SOLR-3518
name|rb
operator|.
name|rsp
operator|.
name|addToLog
argument_list|(
literal|"hits"
argument_list|,
name|numFound
argument_list|)
expr_stmt|;
name|SolrDocumentList
name|responseDocs
init|=
operator|new
name|SolrDocumentList
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxScore
operator|!=
literal|null
condition|)
name|responseDocs
operator|.
name|setMaxScore
argument_list|(
name|maxScore
argument_list|)
expr_stmt|;
name|responseDocs
operator|.
name|setNumFound
argument_list|(
name|numFound
argument_list|)
expr_stmt|;
name|responseDocs
operator|.
name|setStart
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// size appropriately
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resultSize
condition|;
name|i
operator|++
control|)
name|responseDocs
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// save these results in a private area so we can access them
comment|// again when retrieving stored fields.
comment|// TODO: use ResponseBuilder (w/ comments) or the request context?
name|rb
operator|.
name|resultIds
operator|=
name|resultIds
expr_stmt|;
name|rb
operator|.
name|setResponseDocs
argument_list|(
name|responseDocs
argument_list|)
expr_stmt|;
if|if
condition|(
name|partialResults
condition|)
block|{
name|rb
operator|.
name|rsp
operator|.
name|getResponseHeader
argument_list|()
operator|.
name|add
argument_list|(
literal|"partialResults"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|unmarshalSortValues
specifier|private
name|NamedList
name|unmarshalSortValues
parameter_list|(
name|SortSpec
name|sortSpec
parameter_list|,
name|NamedList
name|sortFieldValues
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
block|{
name|NamedList
name|unmarshalledSortValsPerField
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|sortFieldValues
operator|.
name|size
argument_list|()
condition|)
return|return
name|unmarshalledSortValsPerField
return|;
name|List
argument_list|<
name|SchemaField
argument_list|>
name|schemaFields
init|=
name|sortSpec
operator|.
name|getSchemaFields
argument_list|()
decl_stmt|;
name|SortField
index|[]
name|sortFields
init|=
name|sortSpec
operator|.
name|getSort
argument_list|()
operator|.
name|getSort
argument_list|()
decl_stmt|;
name|int
name|marshalledFieldNum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|sortFieldNum
init|=
literal|0
init|;
name|sortFieldNum
operator|<
name|sortFields
operator|.
name|length
condition|;
name|sortFieldNum
operator|++
control|)
block|{
specifier|final
name|SortField
name|sortField
init|=
name|sortFields
index|[
name|sortFieldNum
index|]
decl_stmt|;
specifier|final
name|SortField
operator|.
name|Type
name|type
init|=
name|sortField
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|// :TODO: would be simpler to always serialize every position of SortField[]
if|if
condition|(
name|type
operator|==
name|SortField
operator|.
name|Type
operator|.
name|SCORE
operator|||
name|type
operator|==
name|SortField
operator|.
name|Type
operator|.
name|DOC
condition|)
continue|continue;
specifier|final
name|String
name|sortFieldName
init|=
name|sortField
operator|.
name|getField
argument_list|()
decl_stmt|;
specifier|final
name|String
name|valueFieldName
init|=
name|sortFieldValues
operator|.
name|getName
argument_list|(
name|marshalledFieldNum
argument_list|)
decl_stmt|;
assert|assert
name|sortFieldName
operator|.
name|equals
argument_list|(
name|valueFieldName
argument_list|)
operator|:
literal|"sortFieldValues name key does not match expected SortField.getField"
assert|;
name|List
name|sortVals
init|=
operator|(
name|List
operator|)
name|sortFieldValues
operator|.
name|getVal
argument_list|(
name|marshalledFieldNum
argument_list|)
decl_stmt|;
specifier|final
name|SchemaField
name|schemaField
init|=
name|schemaFields
operator|.
name|get
argument_list|(
name|sortFieldNum
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|schemaField
condition|)
block|{
name|unmarshalledSortValsPerField
operator|.
name|add
argument_list|(
name|sortField
operator|.
name|getField
argument_list|()
argument_list|,
name|sortVals
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FieldType
name|fieldType
init|=
name|schemaField
operator|.
name|getType
argument_list|()
decl_stmt|;
name|List
name|unmarshalledSortVals
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|sortVal
range|:
name|sortVals
control|)
block|{
name|unmarshalledSortVals
operator|.
name|add
argument_list|(
name|fieldType
operator|.
name|unmarshalSortValue
argument_list|(
name|sortVal
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|unmarshalledSortValsPerField
operator|.
name|add
argument_list|(
name|sortField
operator|.
name|getField
argument_list|()
argument_list|,
name|unmarshalledSortVals
argument_list|)
expr_stmt|;
block|}
name|marshalledFieldNum
operator|++
expr_stmt|;
block|}
return|return
name|unmarshalledSortValsPerField
return|;
block|}
block|}
DECL|class|TestCollector
class|class
name|TestCollector
extends|extends
name|TopDocsCollector
block|{
DECL|field|list
specifier|private
name|List
argument_list|<
name|ScoreDoc
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
DECL|method|TestCollector
specifier|public
name|TestCollector
parameter_list|(
name|PriorityQueue
name|pq
parameter_list|)
block|{
name|super
argument_list|(
name|pq
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLeafCollector
specifier|public
name|LeafCollector
name|getLeafCollector
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|base
init|=
name|context
operator|.
name|docBase
decl_stmt|;
specifier|final
name|NumericDocValues
name|values
init|=
name|DocValues
operator|.
name|getNumeric
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
literal|"sort_i"
argument_list|)
decl_stmt|;
return|return
operator|new
name|LeafCollector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{}
specifier|public
name|boolean
name|acceptsDocsOutOfOrder
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|ScoreDoc
argument_list|(
name|doc
operator|+
name|base
argument_list|,
operator|(
name|float
operator|)
name|values
operator|.
name|get
argument_list|(
name|doc
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|topDocsSize
specifier|public
name|int
name|topDocsSize
parameter_list|()
block|{
return|return
name|list
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|topDocs
specifier|public
name|TopDocs
name|topDocs
parameter_list|()
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|,
operator|new
name|Comparator
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|ScoreDoc
name|s1
init|=
operator|(
name|ScoreDoc
operator|)
name|o1
decl_stmt|;
name|ScoreDoc
name|s2
init|=
operator|(
name|ScoreDoc
operator|)
name|o2
decl_stmt|;
if|if
condition|(
name|s1
operator|.
name|score
operator|==
name|s2
operator|.
name|score
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|s1
operator|.
name|score
operator|<
name|s2
operator|.
name|score
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|ScoreDoc
index|[]
name|scoreDocs
init|=
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|ScoreDoc
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
return|return
operator|new
name|TopDocs
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|scoreDocs
argument_list|,
literal|0.0f
argument_list|)
return|;
block|}
DECL|method|topDocs
specifier|public
name|TopDocs
name|topDocs
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|)
block|{
return|return
name|topDocs
argument_list|()
return|;
block|}
DECL|method|getTotalHits
specifier|public
name|int
name|getTotalHits
parameter_list|()
block|{
return|return
name|list
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|needsScores
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|class|TestCollector1
class|class
name|TestCollector1
extends|extends
name|TopDocsCollector
block|{
DECL|field|list
specifier|private
name|List
argument_list|<
name|ScoreDoc
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
DECL|method|TestCollector1
specifier|public
name|TestCollector1
parameter_list|(
name|PriorityQueue
name|pq
parameter_list|)
block|{
name|super
argument_list|(
name|pq
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLeafCollector
specifier|public
name|LeafCollector
name|getLeafCollector
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|base
init|=
name|context
operator|.
name|docBase
decl_stmt|;
return|return
operator|new
name|LeafCollector
argument_list|()
block|{
name|Scorer
name|scorer
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
block|}
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|ScoreDoc
argument_list|(
name|doc
operator|+
name|base
argument_list|,
name|scorer
operator|.
name|score
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|topDocsSize
specifier|public
name|int
name|topDocsSize
parameter_list|()
block|{
return|return
name|list
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|topDocs
specifier|public
name|TopDocs
name|topDocs
parameter_list|()
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|,
operator|new
name|Comparator
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|ScoreDoc
name|s1
init|=
operator|(
name|ScoreDoc
operator|)
name|o1
decl_stmt|;
name|ScoreDoc
name|s2
init|=
operator|(
name|ScoreDoc
operator|)
name|o2
decl_stmt|;
if|if
condition|(
name|s1
operator|.
name|score
operator|==
name|s2
operator|.
name|score
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|s1
operator|.
name|score
operator|>
name|s2
operator|.
name|score
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|ScoreDoc
index|[]
name|scoreDocs
init|=
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|ScoreDoc
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
return|return
operator|new
name|TopDocs
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|scoreDocs
argument_list|,
literal|0.0f
argument_list|)
return|;
block|}
DECL|method|topDocs
specifier|public
name|TopDocs
name|topDocs
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|)
block|{
return|return
name|topDocs
argument_list|()
return|;
block|}
DECL|method|getTotalHits
specifier|public
name|int
name|getTotalHits
parameter_list|()
block|{
return|return
name|list
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|needsScores
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
end_class
end_unit
