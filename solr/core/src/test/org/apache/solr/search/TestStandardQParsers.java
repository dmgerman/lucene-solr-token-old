begin_unit
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/**  * Check standard query parsers for class loading problems during initialization (NAME field is final and static).  * Because every query plugin extend {@link org.apache.solr.search.QParserPlugin} and contains own instance of {@link org.apache.solr.search.QParserPlugin#standardPlugins},  * There are a cyclic dependencies of static fields between plugins and order of initialization can be wrong if NAME field is not final.  * This leads to NPEs during Solr startup.  * @see<a href="https://issues.apache.org/jira/browse/SOLR-5526">SOLR-5526</a>  * @see org.apache.solr.search.QParserPlugin#standardPlugins  *  */
end_comment
begin_class
DECL|class|TestStandardQParsers
specifier|public
class|class
name|TestStandardQParsers
extends|extends
name|LuceneTestCase
block|{
comment|/**    * Field name of constant mandatory for query parser plugin.    */
DECL|field|FIELD_NAME
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_NAME
init|=
literal|"NAME"
decl_stmt|;
comment|/**    * Test standard query parsers registered in {@link org.apache.solr.search.QParserPlugin#standardPlugins}    * have NAME field which is final, static, and matches the registered name.    */
annotation|@
name|Test
DECL|method|testRegisteredName
specifier|public
name|void
name|testRegisteredName
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|notStatic
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|QParserPlugin
operator|.
name|standardPlugins
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|notFinal
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|QParserPlugin
operator|.
name|standardPlugins
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|mismatch
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|QParserPlugin
operator|.
name|standardPlugins
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|QParserPlugin
argument_list|>
argument_list|>
name|pair
range|:
name|QParserPlugin
operator|.
name|standardPlugins
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|regName
init|=
name|pair
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|QParserPlugin
argument_list|>
name|clazz
init|=
name|pair
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Field
name|nameField
init|=
name|clazz
operator|.
name|getField
argument_list|(
name|FIELD_NAME
argument_list|)
decl_stmt|;
name|int
name|modifiers
init|=
name|nameField
operator|.
name|getModifiers
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isFinal
argument_list|(
name|modifiers
argument_list|)
condition|)
block|{
name|notFinal
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|modifiers
argument_list|)
condition|)
block|{
name|notStatic
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|regName
operator|.
name|equals
argument_list|(
name|nameField
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
condition|)
block|{
name|mismatch
operator|.
name|add
argument_list|(
name|regName
operator|+
literal|" != "
operator|+
name|nameField
operator|.
name|get
argument_list|(
literal|null
argument_list|)
operator|+
literal|"("
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"All standard QParsers must have final NAME, broken: "
operator|+
name|notFinal
argument_list|,
name|notFinal
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"All standard QParsers must have static NAME, broken: "
operator|+
name|notStatic
argument_list|,
name|notStatic
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"All standard QParsers must be registered using NAME, broken: "
operator|+
name|mismatch
argument_list|,
name|mismatch
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"DEFAULT_QTYPE is not in the standard set of registered names: "
operator|+
name|QParserPlugin
operator|.
name|DEFAULT_QTYPE
argument_list|,
name|QParserPlugin
operator|.
name|standardPlugins
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
name|QParserPlugin
operator|.
name|DEFAULT_QTYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
