begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search.join
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|join
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|ScoreMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|QParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrCache
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import
begin_class
DECL|class|TestScoreJoinQPScore
specifier|public
class|class
name|TestScoreJoinQPScore
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|idField
specifier|private
specifier|static
specifier|final
name|String
name|idField
init|=
literal|"id"
decl_stmt|;
DECL|field|toField
specifier|private
specifier|static
specifier|final
name|String
name|toField
init|=
literal|"movieId_s"
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeTests
specifier|public
specifier|static
name|void
name|beforeTests
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"enable.update.log"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
comment|// schema12 doesn't support _version_
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema12.xml"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimple
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|idField
init|=
literal|"id"
decl_stmt|;
specifier|final
name|String
name|toField
init|=
literal|"productId_s"
decl_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
comment|// 0
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"t_description"
argument_list|,
literal|"random text"
argument_list|,
literal|"name"
argument_list|,
literal|"name1"
argument_list|,
name|idField
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 1
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"price_s"
argument_list|,
literal|"10.0"
argument_list|,
name|idField
argument_list|,
literal|"2"
argument_list|,
name|toField
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"price_s"
argument_list|,
literal|"20.0"
argument_list|,
name|idField
argument_list|,
literal|"3"
argument_list|,
name|toField
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"t_description"
argument_list|,
literal|"more random text"
argument_list|,
literal|"name"
argument_list|,
literal|"name2"
argument_list|,
name|idField
argument_list|,
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 4
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"price_s"
argument_list|,
literal|"10.0"
argument_list|,
name|idField
argument_list|,
literal|"5"
argument_list|,
name|toField
argument_list|,
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 5
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"price_s"
argument_list|,
literal|"20.0"
argument_list|,
name|idField
argument_list|,
literal|"6"
argument_list|,
name|toField
argument_list|,
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// Search for product
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!join from="
operator|+
name|idField
operator|+
literal|" to="
operator|+
name|toField
operator|+
literal|" score=None}name:name2"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"/response=={'numFound':2,'start':0,'docs':[{'id':'5'},{'id':'6'}]}"
argument_list|)
expr_stmt|;
comment|/*Query joinQuery =         JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term("name", "name2")), indexSearcher, ScoreMode.None);      TopDocs result = indexSearcher.search(joinQuery, 10);     assertEquals(2, result.totalHits);     assertEquals(4, result.scoreDocs[0].doc);     assertEquals(5, result.scoreDocs[1].doc);     */
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!join from="
operator|+
name|idField
operator|+
literal|" to="
operator|+
name|toField
operator|+
literal|" score=None}name:name1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"/response=={'numFound':2,'start':0,'docs':[{'id':'2'},{'id':'3'}]}"
argument_list|)
expr_stmt|;
comment|/*joinQuery = JoinUtil.createJoinQuery(idField, false, toField, new TermQuery(new Term("name", "name1")), indexSearcher, ScoreMode.None);     result = indexSearcher.search(joinQuery, 10);     assertEquals(2, result.totalHits);     assertEquals(1, result.scoreDocs[0].doc);     assertEquals(2, result.scoreDocs[1].doc);*/
comment|// Search for offer
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!join from="
operator|+
name|toField
operator|+
literal|" to="
operator|+
name|idField
operator|+
literal|" score=None}id:5"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"/response=={'numFound':1,'start':0,'docs':[{'id':'4'}]}"
argument_list|)
expr_stmt|;
comment|/*joinQuery = JoinUtil.createJoinQuery(toField, false, idField, new TermQuery(new Term("id", "5")), indexSearcher, ScoreMode.None);     result = indexSearcher.search(joinQuery, 10);     assertEquals(1, result.totalHits);     assertEquals(3, result.scoreDocs[0].doc);      indexSearcher.getIndexReader().close();     dir.close();*/
block|}
DECL|method|testDeleteByScoreJoinQuery
specifier|public
name|void
name|testDeleteByScoreJoinQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|indexDataForScorring
argument_list|()
expr_stmt|;
name|String
name|joinQuery
init|=
literal|"{!join from="
operator|+
name|toField
operator|+
literal|" to="
operator|+
name|idField
operator|+
literal|" score=Max}title:random"
decl_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|joinQuery
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"/response=={'numFound':2,'start':0,'docs':[{'id':'1'},{'id':'4'}]}"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|delQ
argument_list|(
name|joinQuery
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|joinQuery
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"/response=={'numFound':0,'start':0,'docs':[]}"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleWithScoring
specifier|public
name|void
name|testSimpleWithScoring
parameter_list|()
throws|throws
name|Exception
block|{
name|indexDataForScorring
argument_list|()
expr_stmt|;
comment|// Search for movie via subtitle
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!join from="
operator|+
name|toField
operator|+
literal|" to="
operator|+
name|idField
operator|+
literal|" score=Max}title:random"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"/response=={'numFound':2,'start':0,'docs':[{'id':'1'},{'id':'4'}]}"
argument_list|)
expr_stmt|;
comment|//dump(req("q","{!scorejoin from="+toField+" to="+idField+" score=Max}title:random", "fl","id,score", "debug", "true"));
comment|/*     Query joinQuery =         JoinUtil.createJoinQuery(toField, false, idField, new TermQuery(new Term("title", "random")), indexSearcher, ScoreMode.Max);     TopDocs result = indexSearcher.search(joinQuery, 10);     assertEquals(2, result.totalHits);     assertEquals(0, result.scoreDocs[0].doc);     assertEquals(3, result.scoreDocs[1].doc);*/
comment|// Score mode max.
comment|//dump(req("q","{!scorejoin from="+toField+" to="+idField+" score=Max}title:movie", "fl","id,score", "debug", "true"));
comment|// dump(req("q","title:movie", "fl","id,score", "debug", "true"));
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!join from="
operator|+
name|toField
operator|+
literal|" to="
operator|+
name|idField
operator|+
literal|" score=Max}title:movie"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"/response=={'numFound':2,'start':0,'docs':[{'id':'4'},{'id':'1'}]}"
argument_list|)
expr_stmt|;
comment|/*joinQuery = JoinUtil.createJoinQuery(toField, false, idField, new TermQuery(new Term("title", "movie")), indexSearcher, ScoreMode.Max);     result = indexSearcher.search(joinQuery, 10);     assertEquals(2, result.totalHits);     assertEquals(3, result.scoreDocs[0].doc);     assertEquals(0, result.scoreDocs[1].doc);*/
comment|// Score mode total
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!join from="
operator|+
name|toField
operator|+
literal|" to="
operator|+
name|idField
operator|+
literal|" score=Total}title:movie"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"/response=={'numFound':2,'start':0,'docs':[{'id':'1'},{'id':'4'}]}"
argument_list|)
expr_stmt|;
comment|/*  joinQuery = JoinUtil.createJoinQuery(toField, false, idField, new TermQuery(new Term("title", "movie")), indexSearcher, ScoreMode.Total);     result = indexSearcher.search(joinQuery, 10);     assertEquals(2, result.totalHits);     assertEquals(0, result.scoreDocs[0].doc);     assertEquals(3, result.scoreDocs[1].doc); */
comment|//Score mode avg
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!join from="
operator|+
name|toField
operator|+
literal|" to="
operator|+
name|idField
operator|+
literal|" score=Avg}title:movie"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"/response=={'numFound':2,'start':0,'docs':[{'id':'4'},{'id':'1'}]}"
argument_list|)
expr_stmt|;
comment|/*  joinQuery = JoinUtil.createJoinQuery(toField, false, idField, new TermQuery(new Term("title", "movie")), indexSearcher, ScoreMode.Avg);     result = indexSearcher.search(joinQuery, 10);     assertEquals(2, result.totalHits);     assertEquals(3, result.scoreDocs[0].doc);     assertEquals(0, result.scoreDocs[1].doc);*/
block|}
DECL|field|lessFloat
specifier|final
specifier|static
name|Comparator
argument_list|<
name|String
argument_list|>
name|lessFloat
init|=
operator|new
name|Comparator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|o1
parameter_list|,
name|String
name|o2
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|Float
operator|.
name|parseFloat
argument_list|(
name|o1
argument_list|)
operator|<
name|Float
operator|.
name|parseFloat
argument_list|(
name|o2
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Ignore
argument_list|(
literal|"SOLR-7814, also don't forget cover boost at testCacheHit()"
argument_list|)
DECL|method|testBoost
specifier|public
name|void
name|testBoost
parameter_list|()
throws|throws
name|Exception
block|{
name|indexDataForScorring
argument_list|()
expr_stmt|;
name|ScoreMode
name|score
init|=
name|ScoreMode
operator|.
name|values
argument_list|()
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|ScoreMode
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
specifier|final
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!join from=movieId_s to=id score="
operator|+
name|score
operator|+
literal|" b=200}title:movie"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|,
literal|"omitHeader"
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
name|SolrRequestInfo
operator|.
name|setRequestInfo
argument_list|(
operator|new
name|SolrRequestInfo
argument_list|(
name|req
argument_list|,
operator|new
name|SolrQueryResponse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Query
name|luceneQ
init|=
name|QParser
operator|.
name|getParser
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"q"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|req
argument_list|)
operator|.
name|getQuery
argument_list|()
operator|.
name|rewrite
argument_list|(
name|req
operator|.
name|getSearcher
argument_list|()
operator|.
name|getLeafReader
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
operator|+
name|luceneQ
argument_list|,
name|Float
operator|.
name|floatToIntBits
argument_list|(
literal|200
argument_list|)
argument_list|,
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|luceneQ
operator|.
name|getBoost
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SolrRequestInfo
operator|.
name|clearRequestInfo
argument_list|()
expr_stmt|;
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testCacheHit
specifier|public
name|void
name|testCacheHit
parameter_list|()
throws|throws
name|Exception
block|{
name|indexDataForScorring
argument_list|()
expr_stmt|;
name|SolrCache
name|cache
init|=
operator|(
name|SolrCache
operator|)
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getInfoRegistry
argument_list|()
operator|.
name|get
argument_list|(
literal|"queryResultCache"
argument_list|)
decl_stmt|;
block|{
specifier|final
name|NamedList
name|statPre
init|=
name|cache
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!join from=movieId_s to=id score=Avg}title:first"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"omitHeader"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHitOrInsert
argument_list|(
name|cache
argument_list|,
name|statPre
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|NamedList
name|statPre
init|=
name|cache
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!join from=movieId_s to=id score=Avg}title:first"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"omitHeader"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHit
argument_list|(
name|cache
argument_list|,
name|statPre
argument_list|)
expr_stmt|;
block|}
block|{
name|NamedList
name|statPre
init|=
name|cache
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
name|Random
name|r
init|=
name|random
argument_list|()
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|boolean
name|x
init|=
literal|false
decl_stmt|;
name|String
name|from
init|=
operator|(
name|x
operator|=
name|r
operator|.
name|nextBoolean
argument_list|()
operator|)
condition|?
literal|"id"
else|:
literal|"movieId_s"
decl_stmt|;
name|changed
operator||=
name|x
expr_stmt|;
name|String
name|to
init|=
operator|(
name|x
operator|=
name|r
operator|.
name|nextBoolean
argument_list|()
operator|)
condition|?
literal|"movieId_s"
else|:
literal|"id"
decl_stmt|;
name|changed
operator||=
name|x
expr_stmt|;
name|String
name|score
init|=
operator|(
name|x
operator|=
name|r
operator|.
name|nextBoolean
argument_list|()
operator|)
condition|?
name|not
argument_list|(
name|ScoreMode
operator|.
name|Avg
argument_list|)
operator|.
name|name
argument_list|()
else|:
literal|"Avg"
decl_stmt|;
name|changed
operator||=
name|x
expr_stmt|;
comment|/* till SOLR-7814        * String boost = (x = r.nextBoolean()) ? "23" : "1";       changed |= x; */
name|String
name|q
init|=
operator|(
operator|!
name|changed
operator|)
condition|?
operator|(
name|r
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"title:first^67"
else|:
literal|"title:night"
operator|)
else|:
literal|"title:first"
decl_stmt|;
specifier|final
name|String
name|resp
init|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!join from="
operator|+
name|from
operator|+
literal|" to="
operator|+
name|to
operator|+
literal|" score="
operator|+
name|score
operator|+
comment|//" b=" + boost +
literal|"}"
operator|+
name|q
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"omitHeader"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
name|assertInsert
argument_list|(
name|cache
argument_list|,
name|statPre
argument_list|)
expr_stmt|;
name|statPre
operator|=
name|cache
operator|.
name|getStatistics
argument_list|()
expr_stmt|;
specifier|final
name|String
name|repeat
init|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!join from="
operator|+
name|from
operator|+
literal|" to="
operator|+
name|to
operator|+
literal|" score="
operator|+
name|score
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|+
comment|//" b=" + boost
literal|"}"
operator|+
name|q
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"omitHeader"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
name|assertHit
argument_list|(
name|cache
argument_list|,
name|statPre
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"lowercase shouldn't change anything"
argument_list|,
name|resp
argument_list|,
name|repeat
argument_list|)
expr_stmt|;
specifier|final
name|String
name|aMod
init|=
name|score
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|score
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertQEx
argument_list|(
literal|"exception on "
operator|+
name|aMod
argument_list|,
literal|"ScoreMode"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!join from="
operator|+
name|from
operator|+
literal|" to="
operator|+
name|to
operator|+
literal|" score="
operator|+
name|aMod
operator|+
literal|"}"
operator|+
name|q
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"omitHeader"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
comment|// this queries are not overlap, with other in this test case.
comment|// however it might be better to extract this method into the separate suite
comment|// for a while let's nuke a cache content, in case of repetitions
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|not
specifier|private
name|ScoreMode
name|not
parameter_list|(
name|ScoreMode
name|s
parameter_list|)
block|{
name|Random
name|r
init|=
name|random
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ScoreMode
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ScoreMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|l
operator|.
name|remove
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
name|l
operator|.
name|get
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|l
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|assertInsert
specifier|private
name|void
name|assertInsert
parameter_list|(
name|SolrCache
name|cache
parameter_list|,
specifier|final
name|NamedList
name|statPre
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"it lookups"
argument_list|,
literal|1
argument_list|,
name|delta
argument_list|(
literal|"lookups"
argument_list|,
name|cache
operator|.
name|getStatistics
argument_list|()
argument_list|,
name|statPre
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"it doesn't hit"
argument_list|,
literal|0
argument_list|,
name|delta
argument_list|(
literal|"hits"
argument_list|,
name|cache
operator|.
name|getStatistics
argument_list|()
argument_list|,
name|statPre
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"it inserts"
argument_list|,
literal|1
argument_list|,
name|delta
argument_list|(
literal|"inserts"
argument_list|,
name|cache
operator|.
name|getStatistics
argument_list|()
argument_list|,
name|statPre
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertHit
specifier|private
name|void
name|assertHit
parameter_list|(
name|SolrCache
name|cache
parameter_list|,
specifier|final
name|NamedList
name|statPre
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"it lookups"
argument_list|,
literal|1
argument_list|,
name|delta
argument_list|(
literal|"lookups"
argument_list|,
name|cache
operator|.
name|getStatistics
argument_list|()
argument_list|,
name|statPre
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"it hits"
argument_list|,
literal|1
argument_list|,
name|delta
argument_list|(
literal|"hits"
argument_list|,
name|cache
operator|.
name|getStatistics
argument_list|()
argument_list|,
name|statPre
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"it doesn't insert"
argument_list|,
literal|0
argument_list|,
name|delta
argument_list|(
literal|"inserts"
argument_list|,
name|cache
operator|.
name|getStatistics
argument_list|()
argument_list|,
name|statPre
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertHitOrInsert
specifier|private
name|void
name|assertHitOrInsert
parameter_list|(
name|SolrCache
name|cache
parameter_list|,
specifier|final
name|NamedList
name|statPre
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"it lookups"
argument_list|,
literal|1
argument_list|,
name|delta
argument_list|(
literal|"lookups"
argument_list|,
name|cache
operator|.
name|getStatistics
argument_list|()
argument_list|,
name|statPre
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|mayHit
init|=
name|delta
argument_list|(
literal|"hits"
argument_list|,
name|cache
operator|.
name|getStatistics
argument_list|()
argument_list|,
name|statPre
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"it may hit"
argument_list|,
literal|0
operator|==
name|mayHit
operator|||
literal|1
operator|==
name|mayHit
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"or insert on cold"
argument_list|,
literal|1
argument_list|,
name|delta
argument_list|(
literal|"inserts"
argument_list|,
name|cache
operator|.
name|getStatistics
argument_list|()
argument_list|,
name|statPre
argument_list|)
operator|+
name|mayHit
argument_list|)
expr_stmt|;
block|}
DECL|method|delta
specifier|private
name|long
name|delta
parameter_list|(
name|String
name|key
parameter_list|,
name|NamedList
name|a
parameter_list|,
name|NamedList
name|b
parameter_list|)
block|{
return|return
operator|(
name|Long
operator|)
name|a
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|-
operator|(
name|Long
operator|)
name|b
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|indexDataForScorring
specifier|private
name|void
name|indexDataForScorring
parameter_list|()
block|{
name|clearIndex
argument_list|()
expr_stmt|;
comment|// 0
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"t_description"
argument_list|,
literal|"A random movie"
argument_list|,
literal|"name"
argument_list|,
literal|"Movie 1"
argument_list|,
name|idField
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 1
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"title"
argument_list|,
literal|"The first subtitle of this movie"
argument_list|,
name|idField
argument_list|,
literal|"2"
argument_list|,
name|toField
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"title"
argument_list|,
literal|"random subtitle; random event movie"
argument_list|,
name|idField
argument_list|,
literal|"3"
argument_list|,
name|toField
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"t_description"
argument_list|,
literal|"A second random movie"
argument_list|,
literal|"name"
argument_list|,
literal|"Movie 2"
argument_list|,
name|idField
argument_list|,
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 4
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"title"
argument_list|,
literal|"a very random event happened during christmas night"
argument_list|,
name|idField
argument_list|,
literal|"5"
argument_list|,
name|toField
argument_list|,
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 5
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"title"
argument_list|,
literal|"movie end movie test 123 test 123 random"
argument_list|,
name|idField
argument_list|,
literal|"6"
argument_list|,
name|toField
argument_list|,
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
