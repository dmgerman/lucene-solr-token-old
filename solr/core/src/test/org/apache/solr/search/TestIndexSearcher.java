begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LogDocMergePolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|ReaderUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|FunctionValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreDescriptor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrEventListener
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ResponseBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|SearchComponent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|DirectSolrConnection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|SolrCoreAware
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_class
DECL|class|TestIndexSearcher
specifier|public
class|class
name|TestIndexSearcher
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// we need a consistent segmentation because reopen test validation
comment|// dependso n merges not happening when it doesn't expect
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.tests.mergePolicy"
argument_list|,
name|LogDocMergePolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|delQ
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|optimize
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
operator|(
name|commit
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getStringVal
specifier|private
name|String
name|getStringVal
parameter_list|(
name|SolrQueryRequest
name|sqr
parameter_list|,
name|String
name|field
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|SchemaField
name|sf
init|=
name|sqr
operator|.
name|getSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|ValueSource
name|vs
init|=
name|sf
operator|.
name|getType
argument_list|()
operator|.
name|getValueSource
argument_list|(
name|sf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Map
name|context
init|=
name|ValueSource
operator|.
name|newContext
argument_list|(
name|sqr
operator|.
name|getSearcher
argument_list|()
argument_list|)
decl_stmt|;
name|vs
operator|.
name|createWeight
argument_list|(
name|context
argument_list|,
name|sqr
operator|.
name|getSearcher
argument_list|()
argument_list|)
expr_stmt|;
name|IndexReaderContext
name|topReaderContext
init|=
name|sqr
operator|.
name|getSearcher
argument_list|()
operator|.
name|getTopReaderContext
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LeafReaderContext
argument_list|>
name|leaves
init|=
name|topReaderContext
operator|.
name|leaves
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
name|ReaderUtil
operator|.
name|subIndex
argument_list|(
name|doc
argument_list|,
name|leaves
argument_list|)
decl_stmt|;
name|LeafReaderContext
name|leaf
init|=
name|leaves
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|FunctionValues
name|vals
init|=
name|vs
operator|.
name|getValues
argument_list|(
name|context
argument_list|,
name|leaf
argument_list|)
decl_stmt|;
return|return
name|vals
operator|.
name|strVal
argument_list|(
name|doc
operator|-
name|leaf
operator|.
name|docBase
argument_list|)
return|;
block|}
DECL|method|testReopen
specifier|public
name|void
name|testReopen
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"v_t"
argument_list|,
literal|"Hello Dude"
argument_list|,
literal|"v_s1"
argument_list|,
literal|"string1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"v_t"
argument_list|,
literal|"Hello Yonik"
argument_list|,
literal|"v_s1"
argument_list|,
literal|"string2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|sr1
init|=
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|IndexReader
name|r1
init|=
name|sr1
operator|.
name|getSearcher
argument_list|()
operator|.
name|getRawReader
argument_list|()
decl_stmt|;
name|String
name|sval1
init|=
name|getStringVal
argument_list|(
name|sr1
argument_list|,
literal|"v_s1"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"string1"
argument_list|,
name|sval1
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"v_s1"
argument_list|,
literal|"{!literal}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"v_s1"
argument_list|,
literal|"other stuff"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|sr2
init|=
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|IndexReader
name|r2
init|=
name|sr2
operator|.
name|getSearcher
argument_list|()
operator|.
name|getRawReader
argument_list|()
decl_stmt|;
comment|// make sure the readers share the first segment
comment|// Didn't work w/ older versions of lucene2.9 going from segment -> multi
name|assertEquals
argument_list|(
name|r1
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
argument_list|,
name|r2
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"v_f"
argument_list|,
literal|"3.14159"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"v_f"
argument_list|,
literal|"8983"
argument_list|,
literal|"v_s1"
argument_list|,
literal|"string6"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|sr3
init|=
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|IndexReader
name|r3
init|=
name|sr3
operator|.
name|getSearcher
argument_list|()
operator|.
name|getRawReader
argument_list|()
decl_stmt|;
comment|// make sure the readers share segments
comment|// assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);
name|assertEquals
argument_list|(
name|r2
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
argument_list|,
name|r3
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r2
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|reader
argument_list|()
argument_list|,
name|r3
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|reader
argument_list|()
argument_list|)
expr_stmt|;
name|sr1
operator|.
name|close
argument_list|()
expr_stmt|;
name|sr2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// should currently be 1, but this could change depending on future index management
name|int
name|baseRefCount
init|=
name|r3
operator|.
name|getRefCount
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|baseRefCount
argument_list|)
expr_stmt|;
name|Object
name|sr3SearcherRegAt
init|=
name|sr3
operator|.
name|getSearcher
argument_list|()
operator|.
name|getStatistics
argument_list|()
operator|.
name|get
argument_list|(
literal|"registeredAt"
argument_list|)
decl_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// nothing has changed
name|SolrQueryRequest
name|sr4
init|=
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
literal|"nothing changed, searcher should be the same"
argument_list|,
name|sr3
operator|.
name|getSearcher
argument_list|()
argument_list|,
name|sr4
operator|.
name|getSearcher
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nothing changed, searcher should not have been re-registered"
argument_list|,
name|sr3SearcherRegAt
argument_list|,
name|sr4
operator|.
name|getSearcher
argument_list|()
operator|.
name|getStatistics
argument_list|()
operator|.
name|get
argument_list|(
literal|"registeredAt"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexReader
name|r4
init|=
name|sr4
operator|.
name|getSearcher
argument_list|()
operator|.
name|getRawReader
argument_list|()
decl_stmt|;
comment|// force an index change so the registered searcher won't be the one we are testing (and
comment|// then we should be able to test the refCount going all the way to 0
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"v_f"
argument_list|,
literal|"7574"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// test that reader didn't change
name|assertSame
argument_list|(
name|r3
argument_list|,
name|r4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|baseRefCount
argument_list|,
name|r4
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|sr3
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|baseRefCount
argument_list|,
name|r4
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|sr4
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|baseRefCount
operator|-
literal|1
argument_list|,
name|r4
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|sr5
init|=
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|IndexReaderContext
name|rCtx5
init|=
name|sr5
operator|.
name|getSearcher
argument_list|()
operator|.
name|getTopReaderContext
argument_list|()
decl_stmt|;
name|assertU
argument_list|(
name|delI
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|sr6
init|=
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|IndexReaderContext
name|rCtx6
init|=
name|sr6
operator|.
name|getSearcher
argument_list|()
operator|.
name|getTopReaderContext
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rCtx6
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
comment|// only a single doc left in the first segment
name|assertTrue
argument_list|(
operator|!
name|rCtx5
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
operator|.
name|equals
argument_list|(
name|rCtx6
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// readers now different
name|sr5
operator|.
name|close
argument_list|()
expr_stmt|;
name|sr6
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// make sure we don't leak searchers (SOLR-3391)
DECL|method|testCloses
specifier|public
name|void
name|testCloses
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|(
literal|"openSearcher"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
comment|// this was enough to trigger SOLR-3391
name|int
name|maxDoc
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
operator|+
literal|1
decl_stmt|;
comment|// test different combinations of commits
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|50
condition|)
block|{
name|String
name|id
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|maxDoc
argument_list|)
argument_list|)
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|soft
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|boolean
name|optimize
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|boolean
name|openSearcher
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|optimize
condition|)
block|{
name|assertU
argument_list|(
name|optimize
argument_list|(
literal|"openSearcher"
argument_list|,
literal|""
operator|+
name|openSearcher
argument_list|,
literal|"softCommit"
argument_list|,
literal|""
operator|+
name|soft
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertU
argument_list|(
name|commit
argument_list|(
literal|"openSearcher"
argument_list|,
literal|""
operator|+
name|openSearcher
argument_list|,
literal|"softCommit"
argument_list|,
literal|""
operator|+
name|soft
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testSearcherListeners
specifier|public
name|void
name|testSearcherListeners
parameter_list|()
throws|throws
name|Exception
block|{
name|MockSearchComponent
operator|.
name|registerFirstSearcherListener
operator|=
literal|false
expr_stmt|;
name|MockSearchComponent
operator|.
name|registerNewSearcherListener
operator|=
literal|false
expr_stmt|;
name|createCoreAndValidateListeners
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|MockSearchComponent
operator|.
name|registerFirstSearcherListener
operator|=
literal|true
expr_stmt|;
name|MockSearchComponent
operator|.
name|registerNewSearcherListener
operator|=
literal|false
expr_stmt|;
name|createCoreAndValidateListeners
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MockSearchComponent
operator|.
name|registerFirstSearcherListener
operator|=
literal|true
expr_stmt|;
name|MockSearchComponent
operator|.
name|registerNewSearcherListener
operator|=
literal|true
expr_stmt|;
name|createCoreAndValidateListeners
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|createCoreAndValidateListeners
specifier|private
name|void
name|createCoreAndValidateListeners
parameter_list|(
name|int
name|numTimesCalled
parameter_list|,
name|int
name|numTimesCalledFirstSearcher
parameter_list|,
name|int
name|numTimesCalledAfterGetSearcher
parameter_list|,
name|int
name|numTimesCalledFirstSearcherAfterGetSearcher
parameter_list|)
throws|throws
name|Exception
block|{
name|CoreContainer
name|cores
init|=
name|h
operator|.
name|getCoreContainer
argument_list|()
decl_stmt|;
name|CoreDescriptor
name|cd
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getCoreDescriptor
argument_list|()
decl_stmt|;
name|SolrCore
name|newCore
init|=
literal|null
decl_stmt|;
comment|// reset counters
name|MockSearcherListener
operator|.
name|numberOfTimesCalled
operator|=
operator|new
name|AtomicInteger
argument_list|()
expr_stmt|;
name|MockSearcherListener
operator|.
name|numberOfTimesCalledFirstSearcher
operator|=
operator|new
name|AtomicInteger
argument_list|()
expr_stmt|;
try|try
block|{
name|CoreDescriptor
name|newCd
init|=
operator|new
name|CoreDescriptor
argument_list|(
name|cores
argument_list|,
literal|"core1"
argument_list|,
name|cd
operator|.
name|getInstanceDir
argument_list|()
argument_list|,
literal|"config"
argument_list|,
literal|"solrconfig-searcher-listeners1.xml"
argument_list|)
decl_stmt|;
comment|// Create a new core, this should call all the firstSearcherListeners
name|newCore
operator|=
name|cores
operator|.
name|create
argument_list|(
name|newCd
argument_list|)
expr_stmt|;
comment|//validate that the new core was created with the correct solrconfig
name|assertNotNull
argument_list|(
name|newCore
operator|.
name|getSearchComponent
argument_list|(
literal|"mock"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MockSearchComponent
operator|.
name|class
argument_list|,
name|newCore
operator|.
name|getSearchComponent
argument_list|(
literal|"mock"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numTimesCalled
argument_list|,
name|MockSearcherListener
operator|.
name|numberOfTimesCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numTimesCalledFirstSearcher
argument_list|,
name|MockSearcherListener
operator|.
name|numberOfTimesCalledFirstSearcher
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|addDummyDoc
argument_list|(
name|newCore
argument_list|)
expr_stmt|;
comment|// Open a new searcher, this should call the newSearcherListeners
name|Future
argument_list|<
name|?
argument_list|>
index|[]
name|future
init|=
operator|new
name|Future
index|[
literal|1
index|]
decl_stmt|;
name|newCore
operator|.
name|getSearcher
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|future
argument_list|)
expr_stmt|;
name|future
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|numTimesCalledAfterGetSearcher
argument_list|,
name|MockSearcherListener
operator|.
name|numberOfTimesCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numTimesCalledFirstSearcherAfterGetSearcher
argument_list|,
name|MockSearcherListener
operator|.
name|numberOfTimesCalledFirstSearcher
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|newCore
operator|!=
literal|null
condition|)
block|{
name|cores
operator|.
name|unload
argument_list|(
literal|"core1"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addDummyDoc
specifier|private
name|void
name|addDummyDoc
parameter_list|(
name|SolrCore
name|core
parameter_list|)
throws|throws
name|Exception
block|{
name|DirectSolrConnection
name|connection
init|=
operator|new
name|DirectSolrConnection
argument_list|(
name|core
argument_list|)
decl_stmt|;
name|SolrRequestHandler
name|handler
init|=
name|core
operator|.
name|getRequestHandler
argument_list|(
literal|"/update"
argument_list|)
decl_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|handler
argument_list|,
literal|null
argument_list|,
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|MockSearchComponent
specifier|public
specifier|static
class|class
name|MockSearchComponent
extends|extends
name|SearchComponent
implements|implements
name|SolrCoreAware
block|{
DECL|field|registerFirstSearcherListener
specifier|static
name|boolean
name|registerFirstSearcherListener
init|=
literal|false
decl_stmt|;
DECL|field|registerNewSearcherListener
specifier|static
name|boolean
name|registerNewSearcherListener
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
DECL|method|prepare
specifier|public
name|void
name|prepare
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
DECL|method|process
specifier|public
name|void
name|process
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"MockSearchComponent"
return|;
block|}
annotation|@
name|Override
DECL|method|inform
specifier|public
name|void
name|inform
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
if|if
condition|(
name|registerFirstSearcherListener
condition|)
block|{
name|core
operator|.
name|registerFirstSearcherListener
argument_list|(
operator|new
name|MockSearcherListener
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|registerNewSearcherListener
condition|)
block|{
name|core
operator|.
name|registerNewSearcherListener
argument_list|(
operator|new
name|MockSearcherListener
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|MockSearcherListener
specifier|static
class|class
name|MockSearcherListener
implements|implements
name|SolrEventListener
block|{
DECL|field|numberOfTimesCalled
specifier|static
name|AtomicInteger
name|numberOfTimesCalled
decl_stmt|;
DECL|field|numberOfTimesCalledFirstSearcher
specifier|static
name|AtomicInteger
name|numberOfTimesCalledFirstSearcher
decl_stmt|;
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{}
annotation|@
name|Override
DECL|method|postCommit
specifier|public
name|void
name|postCommit
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|postSoftCommit
specifier|public
name|void
name|postSoftCommit
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|newSearcher
specifier|public
name|void
name|newSearcher
parameter_list|(
name|SolrIndexSearcher
name|newSearcher
parameter_list|,
name|SolrIndexSearcher
name|currentSearcher
parameter_list|)
block|{
name|numberOfTimesCalled
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentSearcher
operator|==
literal|null
condition|)
block|{
name|numberOfTimesCalledFirstSearcher
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
