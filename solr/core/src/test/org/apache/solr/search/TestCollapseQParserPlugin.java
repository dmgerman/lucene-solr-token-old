begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|SuppressCodecs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|CollapsingQParserPlugin
operator|.
name|GroupHeadSelector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|CollapsingQParserPlugin
operator|.
name|GroupHeadSelectorType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|//We want codecs that support DocValues, and ones supporting blank/empty values.
end_comment
begin_class
annotation|@
name|SuppressCodecs
argument_list|(
block|{
literal|"Appending"
block|,
literal|"Lucene3x"
block|,
literal|"Lucene40"
block|,
literal|"Lucene41"
block|,
literal|"Lucene42"
block|}
argument_list|)
DECL|class|TestCollapseQParserPlugin
specifier|public
class|class
name|TestCollapseQParserPlugin
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-collapseqparser.xml"
argument_list|,
literal|"schema11.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// if you override setUp or tearDown, you better call
comment|// the super classes version
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiSort
specifier|public
name|void
name|testMultiSort
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"group_s"
argument_list|,
literal|"group1"
argument_list|,
literal|"test_ti"
argument_list|,
literal|"5"
argument_list|,
literal|"test_tl"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"group_s"
argument_list|,
literal|"group1"
argument_list|,
literal|"test_ti"
argument_list|,
literal|"5"
argument_list|,
literal|"test_tl"
argument_list|,
literal|"1000"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"group_s"
argument_list|,
literal|"group1"
argument_list|,
literal|"test_ti"
argument_list|,
literal|"5"
argument_list|,
literal|"test_tl"
argument_list|,
literal|"1000"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"group_s"
argument_list|,
literal|"group1"
argument_list|,
literal|"test_ti"
argument_list|,
literal|"10"
argument_list|,
literal|"test_tl"
argument_list|,
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
comment|//
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"group_s"
argument_list|,
literal|"group2"
argument_list|,
literal|"test_ti"
argument_list|,
literal|"5"
argument_list|,
literal|"test_tl"
argument_list|,
literal|"10"
argument_list|,
literal|"term_s"
argument_list|,
literal|"YYYY"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"group_s"
argument_list|,
literal|"group2"
argument_list|,
literal|"test_ti"
argument_list|,
literal|"5"
argument_list|,
literal|"test_tl"
argument_list|,
literal|"1000"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"group_s"
argument_list|,
literal|"group2"
argument_list|,
literal|"test_ti"
argument_list|,
literal|"5"
argument_list|,
literal|"test_tl"
argument_list|,
literal|"1000"
argument_list|,
literal|"term_s"
argument_list|,
literal|"XXXX"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"group_s"
argument_list|,
literal|"group2"
argument_list|,
literal|"test_ti"
argument_list|,
literal|"10"
argument_list|,
literal|"test_tl"
argument_list|,
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
decl_stmt|;
comment|// group heads are selected using the same sort that is then applied to the final groups
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field=group_s sort=$sort}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"test_ti asc, test_tl desc, id desc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='7.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='3.0']"
argument_list|)
expr_stmt|;
comment|// group heads are selected using a complex sort, simpler sort used for final groups
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field=group_s sort='test_ti asc, test_tl desc, id desc'}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='3.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='7.0']"
argument_list|)
expr_stmt|;
comment|// diff up the sort directions, only first clause matters with our data
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field=group_s sort='test_ti desc, test_tl asc, id asc'}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"id desc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='8.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='4.0']"
argument_list|)
expr_stmt|;
comment|// tie broken by index order
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field=group_s sort='test_tl desc'}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"id desc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='6.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='2.0']"
argument_list|)
expr_stmt|;
comment|// score, then tiebreakers; note top level sort by score ASCENDING (just for weirdness)
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:* term_s:YYYY"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field=group_s sort='score desc, test_tl desc, test_ti asc, id asc'}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"score asc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='2.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='5.0']"
argument_list|)
expr_stmt|;
comment|// score, then tiebreakers; note no score in top level sort/fl to check needsScores logic
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:* term_s:YYYY"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field=group_s sort='score desc, test_tl desc, test_ti asc, id asc'}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"id desc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='2.0']"
argument_list|)
expr_stmt|;
comment|// term_s desc -- term_s is missing from many docs, and uses sortMissingLast=true
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field=group_s sort='term_s desc, test_tl asc'}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='1.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='5.0']"
argument_list|)
expr_stmt|;
comment|// term_s asc -- term_s is missing from many docs, and uses sortMissingLast=true
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field=group_s sort='term_s asc, test_tl asc'}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='1.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='7.0']"
argument_list|)
expr_stmt|;
comment|// collapse on int field
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field=test_ti sort='term_s asc, group_s asc'}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='4.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='7.0']"
argument_list|)
expr_stmt|;
comment|// collapse on term_s (very sparse) with nullPolicy=collapse
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field=term_s nullPolicy=collapse sort='test_ti asc, test_tl desc, id asc'}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"test_tl asc, id asc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=3]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='2.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='7.0']"
argument_list|)
expr_stmt|;
comment|// sort local param + elevation
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field=group_s sort='term_s desc, test_tl asc'}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"test_tl asc"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"qt"
argument_list|,
literal|"/elevate"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"forceElevation"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"elevateIds"
argument_list|,
literal|"4.0"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='4.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='5.0']"
argument_list|)
expr_stmt|;
comment|//
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field=group_s sort='term_s desc, test_tl asc'}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"test_tl asc"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"qt"
argument_list|,
literal|"/elevate"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"forceElevation"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"elevateIds"
argument_list|,
literal|"7.0"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='7.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='1.0']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStringCollapse
specifier|public
name|void
name|testStringCollapse
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
specifier|final
name|String
name|hint
range|:
operator|new
name|String
index|[]
block|{
literal|""
block|,
literal|" hint="
operator|+
name|CollapsingQParserPlugin
operator|.
name|HINT_TOP_FC
block|}
control|)
block|{
name|testCollapseQueries
argument_list|(
literal|"group_s"
argument_list|,
name|hint
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testCollapseQueries
argument_list|(
literal|"group_s_dv"
argument_list|,
name|hint
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNumericCollapse
specifier|public
name|void
name|testNumericCollapse
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|hint
init|=
literal|""
decl_stmt|;
name|testCollapseQueries
argument_list|(
literal|"group_i"
argument_list|,
name|hint
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testCollapseQueries
argument_list|(
literal|"group_ti_dv"
argument_list|,
name|hint
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testCollapseQueries
argument_list|(
literal|"group_f"
argument_list|,
name|hint
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testCollapseQueries
argument_list|(
literal|"group_tf_dv"
argument_list|,
name|hint
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFieldValueCollapseWithNegativeMinMax
specifier|public
name|void
name|testFieldValueCollapseWithNegativeMinMax
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|doc
init|=
block|{
literal|"id"
block|,
literal|"1"
block|,
literal|"group_i"
block|,
literal|"-1000"
block|,
literal|"test_ti"
block|,
literal|"5"
block|,
literal|"test_tl"
block|,
literal|"-10"
block|,
literal|"test_tf"
block|,
literal|"2000.32"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc1
init|=
block|{
literal|"id"
block|,
literal|"2"
block|,
literal|"group_i"
block|,
literal|"-1000"
block|,
literal|"test_ti"
block|,
literal|"50"
block|,
literal|"test_tl"
block|,
literal|"-100"
block|,
literal|"test_tf"
block|,
literal|"2000.33"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc1
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc2
init|=
block|{
literal|"id"
block|,
literal|"3"
block|,
literal|"group_i"
block|,
literal|"-1000"
block|,
literal|"test_tl"
block|,
literal|"100"
block|,
literal|"test_tf"
block|,
literal|"200"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc2
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc3
init|=
block|{
literal|"id"
block|,
literal|"4"
block|,
literal|"test_ti"
block|,
literal|"500"
block|,
literal|"test_tl"
block|,
literal|"1000"
block|,
literal|"test_tf"
block|,
literal|"2000"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc3
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc4
init|=
block|{
literal|"id"
block|,
literal|"5"
block|,
literal|"group_i"
block|,
literal|"-1000"
block|,
literal|"test_ti"
block|,
literal|"4"
block|,
literal|"test_tl"
block|,
literal|"10"
block|,
literal|"test_tf"
block|,
literal|"2000.31"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc4
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc5
init|=
block|{
literal|"id"
block|,
literal|"6"
block|,
literal|"group_i"
block|,
literal|"-1000"
block|,
literal|"test_ti"
block|,
literal|"10"
block|,
literal|"test_tl"
block|,
literal|"100"
block|,
literal|"test_tf"
block|,
literal|"-2000.12"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc5
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc6
init|=
block|{
literal|"id"
block|,
literal|"7"
block|,
literal|"group_i"
block|,
literal|"-1000"
block|,
literal|"test_ti"
block|,
literal|"8"
block|,
literal|"test_tl"
block|,
literal|"-50"
block|,
literal|"test_tf"
block|,
literal|"-100.2"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc6
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field=group_i min=test_tf}"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=1]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='6.0']"
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field=group_i max=test_tf}"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=1]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='2.0']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMergeBoost
specifier|public
name|void
name|testMergeBoost
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|boosted
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|results
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|200
condition|;
name|i
operator|++
control|)
block|{
name|boosted
operator|.
name|add
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|200
condition|;
name|i
operator|++
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
index|[]
name|boostedArray
init|=
operator|new
name|int
index|[
name|boosted
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
index|[]
name|resultsArray
init|=
operator|new
name|int
index|[
name|results
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|boostIt
init|=
name|boosted
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|boostIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|boostedArray
index|[
name|index
operator|++
index|]
operator|=
name|boostIt
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|resultsIt
init|=
name|results
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|index
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|resultsIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|resultsArray
index|[
name|index
operator|++
index|]
operator|=
name|resultsIt
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|boostedArray
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|resultsArray
argument_list|)
expr_stmt|;
name|CollapsingQParserPlugin
operator|.
name|MergeBoost
name|mergeBoost
init|=
operator|new
name|CollapsingQParserPlugin
operator|.
name|MergeBoost
argument_list|(
name|boostedArray
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|boostedResults
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resultsArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|result
init|=
name|resultsArray
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|mergeBoost
operator|.
name|boost
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|boostedResults
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|controlResults
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resultsArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|result
init|=
name|resultsArray
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|boostedArray
argument_list|,
name|result
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|controlResults
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|boostedResults
operator|.
name|size
argument_list|()
operator|==
name|controlResults
operator|.
name|size
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|boostedResults
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|boostedResults
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|controlResults
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"boosted results do not match control results, boostedResults size:"
operator|+
name|boostedResults
operator|.
name|toString
argument_list|()
operator|+
literal|", controlResults size:"
operator|+
name|controlResults
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"boosted results do not match control results, boostedResults size:"
operator|+
name|boostedResults
operator|.
name|toString
argument_list|()
operator|+
literal|", controlResults size:"
operator|+
name|controlResults
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|testCollapseQueries
specifier|private
name|void
name|testCollapseQueries
parameter_list|(
name|String
name|group
parameter_list|,
name|String
name|hint
parameter_list|,
name|boolean
name|numeric
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|doc
init|=
block|{
literal|"id"
block|,
literal|"1"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
name|group
block|,
literal|"1"
block|,
literal|"test_ti"
block|,
literal|"5"
block|,
literal|"test_tl"
block|,
literal|"10"
block|,
literal|"test_tf"
block|,
literal|"2000"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc1
init|=
block|{
literal|"id"
block|,
literal|"2"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
name|group
block|,
literal|"1"
block|,
literal|"test_ti"
block|,
literal|"50"
block|,
literal|"test_tl"
block|,
literal|"100"
block|,
literal|"test_tf"
block|,
literal|"200"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc1
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc2
init|=
block|{
literal|"id"
block|,
literal|"3"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
literal|"test_ti"
block|,
literal|"5000"
block|,
literal|"test_tl"
block|,
literal|"100"
block|,
literal|"test_tf"
block|,
literal|"200"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc2
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc3
init|=
block|{
literal|"id"
block|,
literal|"4"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
literal|"test_ti"
block|,
literal|"500"
block|,
literal|"test_tl"
block|,
literal|"1000"
block|,
literal|"test_tf"
block|,
literal|"2000"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc3
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc4
init|=
block|{
literal|"id"
block|,
literal|"5"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
name|group
block|,
literal|"2"
block|,
literal|"test_ti"
block|,
literal|"4"
block|,
literal|"test_tl"
block|,
literal|"10"
block|,
literal|"test_tf"
block|,
literal|"2000"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc4
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc5
init|=
block|{
literal|"id"
block|,
literal|"6"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
name|group
block|,
literal|"2"
block|,
literal|"test_ti"
block|,
literal|"10"
block|,
literal|"test_tl"
block|,
literal|"100"
block|,
literal|"test_tf"
block|,
literal|"200"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc5
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc6
init|=
block|{
literal|"id"
block|,
literal|"7"
block|,
literal|"term_s"
block|,
literal|"YYYY"
block|,
name|group
block|,
literal|"1"
block|,
literal|"test_ti"
block|,
literal|"8"
block|,
literal|"test_tl"
block|,
literal|"50"
block|,
literal|"test_tf"
block|,
literal|"300"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc6
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|//Test collapse by score and following sort by score
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
literal|""
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bf"
argument_list|,
literal|"field(test_ti)"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|,
literal|"indent"
argument_list|,
literal|"on"
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='2.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='6.0']"
argument_list|)
expr_stmt|;
comment|// SOLR-5544 test ordering with empty sort param
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
literal|" nullPolicy=expand min=test_tf"
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bf"
argument_list|,
literal|"field(test_ti)"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=4]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='3.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='4.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='2.0']"
argument_list|,
literal|"//result/doc[4]/float[@name='id'][.='6.0']"
argument_list|)
expr_stmt|;
comment|// Test value source collapse criteria
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
literal|" nullPolicy=collapse min=field(test_ti)"
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"test_ti desc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=3]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='4.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='1.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='5.0']"
argument_list|)
expr_stmt|;
comment|// Test value source collapse criteria with cscore function
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
literal|" nullPolicy=collapse min=cscore()"
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bf"
argument_list|,
literal|"field(test_ti)"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=3]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='4.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='1.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='5.0']"
argument_list|)
expr_stmt|;
comment|// Test value source collapse criteria with cscore function but no top level score sort
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
literal|" nullPolicy=collapse min=cscore()"
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bf"
argument_list|,
literal|"field(test_ti)"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"id desc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=3]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='4.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='1.0']"
argument_list|)
expr_stmt|;
comment|// Test value source collapse criteria with compound cscore function
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
literal|" nullPolicy=collapse min=sum(cscore(),field(test_ti))"
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bf"
argument_list|,
literal|"field(test_ti)"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=3]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='4.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='1.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='5.0']"
argument_list|)
expr_stmt|;
comment|//Test collapse by score with elevation
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"YYYY"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
literal|" nullPolicy=collapse"
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bf"
argument_list|,
literal|"field(test_ti)"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"qf"
argument_list|,
literal|"term_s"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"qt"
argument_list|,
literal|"/elevate"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=4]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='1.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='2.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='3.0']"
argument_list|,
literal|"//result/doc[4]/float[@name='id'][.='6.0']"
argument_list|)
expr_stmt|;
comment|//Test SOLR-5773 with score collapse criteria
comment|// try both default& sort localparams as alternate ways to ask for max score
for|for
control|(
name|String
name|maxscore
range|:
operator|new
name|String
index|[]
block|{
literal|"  "
block|,
literal|" sort='score desc' "
block|}
control|)
block|{
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"YYYY"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
name|maxscore
operator|+
literal|" nullPolicy=collapse"
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bf"
argument_list|,
literal|"field(test_ti)"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"qf"
argument_list|,
literal|"term_s"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"qt"
argument_list|,
literal|"/elevate"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"elevateIds"
argument_list|,
literal|"1,5"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=3]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='1.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='3.0']"
argument_list|)
expr_stmt|;
block|}
comment|//Test SOLR-5773 with max field collapse criteria
comment|// try both max& sort localparams as alternate ways to ask for max group head
for|for
control|(
name|String
name|max
range|:
operator|new
name|String
index|[]
block|{
literal|" max=test_ti "
block|,
literal|" sort='test_ti desc' "
block|}
control|)
block|{
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"YYYY"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
name|max
operator|+
literal|"nullPolicy=collapse"
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bf"
argument_list|,
literal|"field(test_ti)"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"qf"
argument_list|,
literal|"term_s"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"qt"
argument_list|,
literal|"/elevate"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"elevateIds"
argument_list|,
literal|"1,5"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=3]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='1.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='3.0']"
argument_list|)
expr_stmt|;
block|}
comment|//Test SOLR-5773 with min field collapse criteria
comment|// try both min& sort localparams as alternate ways to ask for min group head
for|for
control|(
name|String
name|min
range|:
operator|new
name|String
index|[]
block|{
literal|" min=test_ti "
block|,
literal|" sort='test_ti asc' "
block|}
control|)
block|{
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"YYYY"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
name|min
operator|+
literal|"nullPolicy=collapse"
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bf"
argument_list|,
literal|"field(test_ti)"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"qf"
argument_list|,
literal|"term_s"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"qt"
argument_list|,
literal|"/elevate"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"elevateIds"
argument_list|,
literal|"1,5"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=3]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='1.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='4.0']"
argument_list|)
expr_stmt|;
block|}
comment|//Test SOLR-5773 elevating documents with null group
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"YYYY"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
literal|""
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bf"
argument_list|,
literal|"field(test_ti)"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"qf"
argument_list|,
literal|"term_s"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"qt"
argument_list|,
literal|"/elevate"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"elevateIds"
argument_list|,
literal|"3,4"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=4]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='3.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='4.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='2.0']"
argument_list|,
literal|"//result/doc[4]/float[@name='id'][.='6.0']"
argument_list|)
expr_stmt|;
comment|// Non trivial sort local param for picking group head
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
literal|" nullPolicy=collapse sort='term_s asc, test_ti asc' "
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"id desc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=3]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='4.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='1.0']"
argument_list|)
expr_stmt|;
comment|//
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
literal|" nullPolicy=collapse sort='term_s asc, test_ti desc' "
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"id desc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=3]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='6.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='3.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='2.0']"
argument_list|)
expr_stmt|;
comment|// Test collapse by min int field and top level sort
comment|// try both min& sort localparams as alternate ways to ask for min group head
for|for
control|(
name|String
name|min
range|:
operator|new
name|String
index|[]
block|{
literal|" min=test_ti "
block|,
literal|" sort='test_ti asc' "
block|}
control|)
block|{
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
name|min
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"id desc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='1.0']"
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
name|min
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='1.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='5.0']"
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
name|min
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"test_tl asc,id desc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='1.0']"
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
name|min
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"score desc,id asc"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bf"
argument_list|,
literal|"field(id)"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='1.0']"
argument_list|)
expr_stmt|;
block|}
comment|//Test collapse by max int field
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
literal|" max=test_ti"
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"test_ti asc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='6.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='2.0']"
argument_list|)
expr_stmt|;
try|try
block|{
comment|//Test collapse by min long field
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
literal|" min=test_tl"
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"test_ti desc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='1.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='5.0']"
argument_list|)
expr_stmt|;
comment|//Test collapse by max long field
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
literal|" max=test_tl"
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"test_ti desc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='2.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='6.0']"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|numeric
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
comment|//Test collapse by min float field
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
literal|" min=test_tf"
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"test_ti desc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='2.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='6.0']"
argument_list|)
expr_stmt|;
comment|//Test collapse by min float field
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
literal|" max=test_tf"
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"test_ti asc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='1.0']"
argument_list|)
expr_stmt|;
comment|//Test collapse by min float field sort by score
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
literal|" max=test_tf"
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bf"
argument_list|,
literal|"field(id)"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"score, id"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"facet"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!tag=test}term_s:YYYY"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"facet.field"
argument_list|,
literal|"{!ex=test}term_s"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='1.0']"
argument_list|)
expr_stmt|;
comment|// Test collapse using selector field in no docs
comment|// tie selector in all of these cases, so index order applies
for|for
control|(
name|String
name|selector
range|:
operator|new
name|String
index|[]
block|{
literal|" min=bogus_ti "
block|,
literal|" sort='bogus_ti asc' "
block|,
literal|" max=bogus_ti "
block|,
literal|" sort='bogus_ti desc' "
block|,
literal|" min=bogus_tf "
block|,
literal|" sort='bogus_tf asc' "
block|,
literal|" max=bogus_tf "
block|,
literal|" sort='bogus_tf desc' "
block|,
literal|" sort='bogus_td asc' "
block|,
literal|" sort='bogus_td desc' "
block|,
literal|" sort='bogus_s asc' "
block|,
literal|" sort='bogus_s desc' "
block|,        }
control|)
block|{
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
name|selector
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='1.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='5.0']"
argument_list|)
expr_stmt|;
block|}
comment|// attempting to use cscore() in sort local param should fail
name|assertQEx
argument_list|(
literal|"expected error trying to sort on a function that includes cscore()"
argument_list|,
name|req
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"{!func}sub(sub(test_tl,1000),id)"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
literal|" sort='abs(cscore()) asc, id asc'}"
argument_list|,
literal|"sort"
argument_list|,
literal|"score asc"
argument_list|)
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
comment|// multiple params for picking groupHead should all fail
for|for
control|(
name|String
name|bad
range|:
operator|new
name|String
index|[]
block|{
literal|"{!collapse field="
operator|+
name|group
operator|+
literal|" min=test_tf max=test_tf}"
block|,
literal|"{!collapse field="
operator|+
name|group
operator|+
literal|" min=test_tf sort='test_tf asc'}"
block|,
literal|"{!collapse field="
operator|+
name|group
operator|+
literal|" max=test_tf sort='test_tf asc'}"
block|}
control|)
block|{
name|assertQEx
argument_list|(
literal|"Expected error: "
operator|+
name|bad
argument_list|,
name|req
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
name|bad
argument_list|)
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
comment|// multiple params for picking groupHead should work as long as only one is non-null
comment|// sort used
for|for
control|(
name|SolrParams
name|collapse
range|:
operator|new
name|SolrParams
index|[]
block|{
comment|// these should all be equivilently valid
name|params
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
literal|" nullPolicy=collapse sort='test_ti asc'"
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
block|,
name|params
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
literal|" nullPolicy=collapse min='' sort='test_ti asc'"
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
block|,
name|params
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
literal|" nullPolicy=collapse max='' sort='test_ti asc'"
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
block|,
name|params
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
literal|" nullPolicy=collapse min=$x sort='test_ti asc'"
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
block|,
name|params
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
literal|" nullPolicy=collapse min=$x sort='test_ti asc'"
operator|+
name|hint
operator|+
literal|"}"
argument_list|,
literal|"x"
argument_list|,
literal|""
argument_list|)
block|,       }
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
name|collapse
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"test_ti desc"
argument_list|)
argument_list|,
literal|"*[count(//doc)=3]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='4.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='1.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='5.0']"
argument_list|)
expr_stmt|;
block|}
comment|//Test nullPolicy expand
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
literal|" max=test_tf nullPolicy=expand"
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"id desc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=4]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='4.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='3.0']"
argument_list|,
literal|"//result/doc[4]/float[@name='id'][.='1.0']"
argument_list|)
expr_stmt|;
comment|//Test nullPolicy collapse
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
literal|" max=test_tf nullPolicy=collapse"
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"id desc"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=3]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='4.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='1.0']"
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bf"
argument_list|,
literal|"field(test_ti)"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!tag=test_ti}id:5"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"facet"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"facet.field"
argument_list|,
literal|"{!ex=test_ti}test_ti"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst[@name='test_ti']/int)=2]"
argument_list|)
expr_stmt|;
comment|// SOLR-5230 - ensure CollapsingFieldValueCollector.finish() is called
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
name|hint
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"group"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"group.field"
argument_list|,
literal|"id"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|)
expr_stmt|;
comment|// delete the elevated docs, confirm collapsing still works
name|assertU
argument_list|(
name|delI
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|delI
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"YYYY"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
name|hint
operator|+
literal|" nullPolicy=collapse}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"defType"
argument_list|,
literal|"edismax"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"bf"
argument_list|,
literal|"field(test_ti)"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"qf"
argument_list|,
literal|"term_s"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"qt"
argument_list|,
literal|"/elevate"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=3]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='3.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='6.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='7.0']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMissingFieldParam
specifier|public
name|void
name|testMissingFieldParam
parameter_list|()
throws|throws
name|Exception
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse}"
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"It should respond with a bad request when the 'field' param is missing"
argument_list|,
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptyCollection
specifier|public
name|void
name|testEmptyCollection
parameter_list|()
throws|throws
name|Exception
block|{
comment|// group_s is docValues=false and group_dv_s is docValues=true
name|String
name|group
init|=
operator|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"group_s"
else|:
literal|"group_s_dv"
operator|)
decl_stmt|;
comment|// min-or-max is for CollapsingScoreCollector vs. CollapsingFieldValueCollector
name|String
name|optional_min_or_max
init|=
operator|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|""
else|:
operator|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"min=field(test_ti)"
else|:
literal|"max=field(test_ti)"
operator|)
operator|)
decl_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
literal|" "
operator|+
name|optional_min_or_max
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=0]"
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoDocsHaveGroupField
specifier|public
name|void
name|testNoDocsHaveGroupField
parameter_list|()
throws|throws
name|Exception
block|{
comment|// as unlikely as this test seems, it's important for the possibility that a segment exists w/o
comment|// any live docs that have DocValues for the group field -- ie: every doc in segment is in null group.
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"group_s"
argument_list|,
literal|"group1"
argument_list|,
literal|"test_ti"
argument_list|,
literal|"5"
argument_list|,
literal|"test_tl"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"group_s"
argument_list|,
literal|"group1"
argument_list|,
literal|"test_ti"
argument_list|,
literal|"5"
argument_list|,
literal|"test_tl"
argument_list|,
literal|"1000"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"group_s"
argument_list|,
literal|"group1"
argument_list|,
literal|"test_ti"
argument_list|,
literal|"5"
argument_list|,
literal|"test_tl"
argument_list|,
literal|"1000"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"group_s"
argument_list|,
literal|"group1"
argument_list|,
literal|"test_ti"
argument_list|,
literal|"10"
argument_list|,
literal|"test_tl"
argument_list|,
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
comment|//
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"group_s"
argument_list|,
literal|"group2"
argument_list|,
literal|"test_ti"
argument_list|,
literal|"5"
argument_list|,
literal|"test_tl"
argument_list|,
literal|"10"
argument_list|,
literal|"term_s"
argument_list|,
literal|"YYYY"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"group_s"
argument_list|,
literal|"group2"
argument_list|,
literal|"test_ti"
argument_list|,
literal|"5"
argument_list|,
literal|"test_tl"
argument_list|,
literal|"1000"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"group_s"
argument_list|,
literal|"group2"
argument_list|,
literal|"test_ti"
argument_list|,
literal|"5"
argument_list|,
literal|"test_tl"
argument_list|,
literal|"1000"
argument_list|,
literal|"term_s"
argument_list|,
literal|"XXXX"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"group_s"
argument_list|,
literal|"group2"
argument_list|,
literal|"test_ti"
argument_list|,
literal|"10"
argument_list|,
literal|"test_tl"
argument_list|,
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// none of these grouping fields are in any doc
for|for
control|(
name|String
name|group
range|:
operator|new
name|String
index|[]
block|{
literal|"field=bogus_s"
block|,
literal|"field=bogus_s_dv"
block|,
literal|"field=bogus_s hint=top_fc"
block|,
comment|// alternative docvalues codepath w/ hint
literal|"field=bogus_s_dv hint=top_fc"
block|,
comment|// alternative docvalues codepath w/ hint
literal|"field=bogus_ti"
block|,
literal|"field=bogus_tf"
block|}
control|)
block|{
comment|// for any of these selectors, behavior of these checks should be consistent
for|for
control|(
name|String
name|selector
range|:
operator|new
name|String
index|[]
block|{
literal|""
block|,
literal|" sort='score desc' "
block|,
literal|" min=test_ti "
block|,
literal|" max=test_ti "
block|,
literal|" sort='test_ti asc' "
block|,
literal|" sort='test_ti desc' "
block|,
literal|" min=test_tf "
block|,
literal|" max=test_tf "
block|,
literal|" sort='test_tf asc' "
block|,
literal|" sort='test_tf desc' "
block|,
literal|" sort='group_s asc' "
block|,
literal|" sort='group_s desc' "
block|,
comment|// fields that don't exist
literal|" min=bogus_sort_ti "
block|,
literal|" max=bogus_sort_ti "
block|,
literal|" sort='bogus_sort_ti asc' "
block|,
literal|" sort='bogus_sort_ti desc' "
block|,
literal|" sort='bogus_sort_s asc' "
block|,
literal|" sort='bogus_sort_s desc' "
block|,         }
control|)
block|{
name|ModifiableSolrParams
name|params
init|=
literal|null
decl_stmt|;
comment|// w/default nullPolicy, no groups found
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"id desc"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse "
operator|+
name|group
operator|+
literal|" "
operator|+
name|selector
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=0]"
argument_list|)
expr_stmt|;
comment|// w/nullPolicy=expand, every doc found
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"id desc"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!collapse field="
operator|+
name|group
operator|+
literal|" nullPolicy=expand "
operator|+
name|selector
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"*[count(//doc)=8]"
argument_list|,
literal|"//result/doc[1]/float[@name='id'][.='8.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='id'][.='7.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='id'][.='6.0']"
argument_list|,
literal|"//result/doc[4]/float[@name='id'][.='5.0']"
argument_list|,
literal|"//result/doc[5]/float[@name='id'][.='4.0']"
argument_list|,
literal|"//result/doc[6]/float[@name='id'][.='3.0']"
argument_list|,
literal|"//result/doc[7]/float[@name='id'][.='2.0']"
argument_list|,
literal|"//result/doc[8]/float[@name='id'][.='1.0']"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testGroupHeadSelector
specifier|public
name|void
name|testGroupHeadSelector
parameter_list|()
block|{
name|GroupHeadSelector
name|s
decl_stmt|;
try|try
block|{
name|s
operator|=
name|GroupHeadSelector
operator|.
name|build
argument_list|(
name|params
argument_list|(
literal|"sort"
argument_list|,
literal|"foo_s asc"
argument_list|,
literal|"min"
argument_list|,
literal|"bar_s"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception with multi criteria"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|s
operator|=
name|GroupHeadSelector
operator|.
name|build
argument_list|(
name|params
argument_list|(
literal|"min"
argument_list|,
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GroupHeadSelectorType
operator|.
name|MIN
argument_list|,
name|s
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo_s"
argument_list|,
name|s
operator|.
name|selectorText
argument_list|)
expr_stmt|;
name|s
operator|=
name|GroupHeadSelector
operator|.
name|build
argument_list|(
name|params
argument_list|(
literal|"max"
argument_list|,
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GroupHeadSelectorType
operator|.
name|MAX
argument_list|,
name|s
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo_s"
argument_list|,
name|s
operator|.
name|selectorText
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|s
operator|.
name|equals
argument_list|(
name|GroupHeadSelector
operator|.
name|build
argument_list|(
name|params
argument_list|(
literal|"min"
argument_list|,
literal|"foo_s"
argument_list|,
literal|"other"
argument_list|,
literal|"stuff"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
name|GroupHeadSelector
operator|.
name|build
argument_list|(
name|params
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GroupHeadSelectorType
operator|.
name|SCORE
argument_list|,
name|s
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|s
operator|.
name|selectorText
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GroupHeadSelector
operator|.
name|build
argument_list|(
name|params
argument_list|()
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|s
operator|.
name|equals
argument_list|(
name|GroupHeadSelector
operator|.
name|build
argument_list|(
name|params
argument_list|(
literal|"min"
argument_list|,
literal|"BAR_s"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
name|GroupHeadSelector
operator|.
name|build
argument_list|(
name|params
argument_list|(
literal|"sort"
argument_list|,
literal|"foo_s asc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GroupHeadSelectorType
operator|.
name|SORT
argument_list|,
name|s
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo_s asc"
argument_list|,
name|s
operator|.
name|selectorText
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GroupHeadSelector
operator|.
name|build
argument_list|(
name|params
argument_list|(
literal|"sort"
argument_list|,
literal|"foo_s asc"
argument_list|)
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|s
operator|.
name|equals
argument_list|(
name|GroupHeadSelector
operator|.
name|build
argument_list|(
name|params
argument_list|(
literal|"sort"
argument_list|,
literal|"BAR_s asc"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|s
operator|.
name|equals
argument_list|(
name|GroupHeadSelector
operator|.
name|build
argument_list|(
name|params
argument_list|(
literal|"min"
argument_list|,
literal|"BAR_s"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|s
operator|.
name|equals
argument_list|(
name|GroupHeadSelector
operator|.
name|build
argument_list|(
name|params
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GroupHeadSelector
operator|.
name|build
argument_list|(
name|params
argument_list|(
literal|"sort"
argument_list|,
literal|"foo_s asc"
argument_list|)
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|,
name|GroupHeadSelector
operator|.
name|build
argument_list|(
name|params
argument_list|(
literal|"sort"
argument_list|,
literal|"foo_s asc"
argument_list|,
literal|"other"
argument_list|,
literal|"stuff"
argument_list|)
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
