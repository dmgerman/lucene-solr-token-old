begin_unit
begin_package
DECL|package|org.apache.solr.search.join
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|join
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|GraphQueryTest
specifier|public
class|class
name|GraphQueryTest
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeTests
specifier|public
specifier|static
name|void
name|beforeTests
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema-graph.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGraph
specifier|public
name|void
name|testGraph
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 1 -> 2 -> 3 -> ( 4 5 )
comment|// 7 -> 1
comment|// 8 -> ( 1 2 )
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"doc_1"
argument_list|,
literal|"node_id"
argument_list|,
literal|"1"
argument_list|,
literal|"edge_id"
argument_list|,
literal|"2"
argument_list|,
literal|"text"
argument_list|,
literal|"foo"
argument_list|,
literal|"title"
argument_list|,
literal|"foo10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"doc_2"
argument_list|,
literal|"node_id"
argument_list|,
literal|"2"
argument_list|,
literal|"edge_id"
argument_list|,
literal|"3"
argument_list|,
literal|"text"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"doc_3"
argument_list|,
literal|"node_id"
argument_list|,
literal|"3"
argument_list|,
literal|"edge_id"
argument_list|,
literal|"4"
argument_list|,
literal|"edge_id"
argument_list|,
literal|"5"
argument_list|,
literal|"table"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"doc_4"
argument_list|,
literal|"node_id"
argument_list|,
literal|"4"
argument_list|,
literal|"table"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"doc_5"
argument_list|,
literal|"node_id"
argument_list|,
literal|"5"
argument_list|,
literal|"edge_id"
argument_list|,
literal|"7"
argument_list|,
literal|"table"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"doc_6"
argument_list|,
literal|"node_id"
argument_list|,
literal|"6"
argument_list|,
literal|"edge_id"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"doc_7"
argument_list|,
literal|"node_id"
argument_list|,
literal|"7"
argument_list|,
literal|"edge_id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"doc_8"
argument_list|,
literal|"node_id"
argument_list|,
literal|"8"
argument_list|,
literal|"edge_id"
argument_list|,
literal|"1"
argument_list|,
literal|"edge_id"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"doc_9"
argument_list|,
literal|"node_id"
argument_list|,
literal|"9"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// update docs so they're in a new segment.
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"doc_1"
argument_list|,
literal|"node_id"
argument_list|,
literal|"1"
argument_list|,
literal|"edge_id"
argument_list|,
literal|"2"
argument_list|,
literal|"text"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"doc_2"
argument_list|,
literal|"node_id"
argument_list|,
literal|"2"
argument_list|,
literal|"edge_id"
argument_list|,
literal|"3"
argument_list|,
literal|"edge_id"
argument_list|,
literal|"9"
argument_list|,
literal|"text"
argument_list|,
literal|"foo11"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// a graph for testing traversal filter 10 - 11 -> (12 | 13)
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"doc_10"
argument_list|,
literal|"node_id"
argument_list|,
literal|"10"
argument_list|,
literal|"edge_id"
argument_list|,
literal|"11"
argument_list|,
literal|"title"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"doc_11"
argument_list|,
literal|"node_id"
argument_list|,
literal|"11"
argument_list|,
literal|"edge_id"
argument_list|,
literal|"12"
argument_list|,
literal|"edge_id"
argument_list|,
literal|"13"
argument_list|,
literal|"text"
argument_list|,
literal|"foo11"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"doc_12"
argument_list|,
literal|"node_id"
argument_list|,
literal|"12"
argument_list|,
literal|"text"
argument_list|,
literal|"foo10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"doc_13"
argument_list|,
literal|"node_id"
argument_list|,
literal|"13"
argument_list|,
literal|"edge_id"
argument_list|,
literal|"12"
argument_list|,
literal|"text"
argument_list|,
literal|"foo10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now we have created a simple graph
comment|// start traversal from node id to edge id
name|String
name|gQuery
init|=
literal|"{!graph from=\"node_id\" to=\"edge_id\"}id:doc_1"
decl_stmt|;
name|SolrQueryRequest
name|qr
init|=
name|createRequest
argument_list|(
name|gQuery
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
name|qr
argument_list|,
literal|"//*[@numFound='7']"
argument_list|)
expr_stmt|;
name|String
name|g2Query
init|=
literal|"{!graph from=\"node_id\" to=\"edge_id\" returnRoot=\"true\" returnOnlyLeaf=\"false\"}id:doc_8"
decl_stmt|;
name|qr
operator|=
name|createRequest
argument_list|(
name|g2Query
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|qr
argument_list|,
literal|"//*[@numFound='8']"
argument_list|)
expr_stmt|;
name|String
name|g3Query
init|=
literal|"{!graph from=\"node_id\" to=\"edge_id\" returnRoot=\"false\" returnOnlyLeaf=\"false\"}id:doc_8"
decl_stmt|;
name|qr
operator|=
name|createRequest
argument_list|(
name|g3Query
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|qr
argument_list|,
literal|"//*[@numFound='7']"
argument_list|)
expr_stmt|;
name|String
name|g4Query
init|=
literal|"{!graph from=\"node_id\" to=\"edge_id\" returnRoot=\"true\" returnOnlyLeaf=\"false\" traversalFilter=\"text:foo11\"}id:doc_8"
decl_stmt|;
name|qr
operator|=
name|createRequest
argument_list|(
name|g4Query
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|qr
argument_list|,
literal|"//*[@numFound='2']"
argument_list|)
expr_stmt|;
block|}
DECL|method|createRequest
specifier|private
name|SolrQueryRequest
name|createRequest
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|SolrQueryRequest
name|qr
init|=
name|req
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|par
init|=
name|qr
operator|.
name|getParams
argument_list|()
operator|.
name|toNamedList
argument_list|()
decl_stmt|;
name|par
operator|.
name|add
argument_list|(
literal|"debug"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|par
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|par
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"id,node_id,edge_id"
argument_list|)
expr_stmt|;
name|par
operator|.
name|remove
argument_list|(
literal|"qt"
argument_list|)
expr_stmt|;
name|SolrParams
name|newp
init|=
name|SolrParams
operator|.
name|toSolrParams
argument_list|(
name|par
argument_list|)
decl_stmt|;
name|qr
operator|.
name|setParams
argument_list|(
name|newp
argument_list|)
expr_stmt|;
return|return
name|qr
return|;
block|}
block|}
end_class
end_unit
