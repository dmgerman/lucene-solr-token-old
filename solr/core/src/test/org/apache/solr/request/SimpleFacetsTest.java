begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.request
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
package|;
end_package
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
operator|.
name|FacetRangeInclude
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
operator|.
name|FacetRangeMethod
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
operator|.
name|FacetRangeOther
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DateFormatUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TimeZoneUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|ObjectBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_class
DECL|class|SimpleFacetsTest
specifier|public
class|class
name|SimpleFacetsTest
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
name|createIndex
argument_list|()
expr_stmt|;
block|}
DECL|field|random_commit_percent
specifier|static
name|int
name|random_commit_percent
init|=
literal|30
decl_stmt|;
DECL|field|random_dupe_percent
specifier|static
name|int
name|random_dupe_percent
init|=
literal|25
decl_stmt|;
comment|// some duplicates in the index to create deleted docs
DECL|method|randomCommit
specifier|static
name|void
name|randomCommit
parameter_list|(
name|int
name|percent_chance
parameter_list|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<=
name|percent_chance
condition|)
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|field|pendingDocs
specifier|static
name|ArrayList
argument_list|<
name|String
index|[]
argument_list|>
name|pendingDocs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// committing randomly gives different looking segments each time
DECL|method|add_doc
specifier|static
name|void
name|add_doc
parameter_list|(
name|String
modifier|...
name|fieldsAndValues
parameter_list|)
block|{
do|do
block|{
comment|//do our own copy-field:
name|List
argument_list|<
name|String
argument_list|>
name|fieldsAndValuesList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|fieldsAndValues
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
name|fieldsAndValuesList
operator|.
name|indexOf
argument_list|(
literal|"a_tdt"
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
block|{
name|fieldsAndValuesList
operator|.
name|add
argument_list|(
literal|"a_drf"
argument_list|)
expr_stmt|;
name|fieldsAndValuesList
operator|.
name|add
argument_list|(
name|fieldsAndValuesList
operator|.
name|get
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|//copy
block|}
name|idx
operator|=
name|fieldsAndValuesList
operator|.
name|indexOf
argument_list|(
literal|"bday"
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
block|{
name|fieldsAndValuesList
operator|.
name|add
argument_list|(
literal|"bday_drf"
argument_list|)
expr_stmt|;
name|fieldsAndValuesList
operator|.
name|add
argument_list|(
name|fieldsAndValuesList
operator|.
name|get
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|//copy
block|}
name|fieldsAndValues
operator|=
name|fieldsAndValuesList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|fieldsAndValuesList
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|pendingDocs
operator|.
name|add
argument_list|(
name|fieldsAndValues
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<=
name|random_dupe_percent
condition|)
do|;
comment|// assertU(adoc(fieldsAndValues));
comment|// randomCommit(random_commit_percent);
block|}
DECL|method|createIndex
specifier|static
name|void
name|createIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|doEmptyFacetCounts
argument_list|()
expr_stmt|;
comment|// try on empty index
name|indexSimpleFacetCounts
argument_list|()
expr_stmt|;
name|indexDateFacets
argument_list|()
expr_stmt|;
name|indexFacetSingleValued
argument_list|()
expr_stmt|;
name|indexFacetPrefixMultiValued
argument_list|()
expr_stmt|;
name|indexFacetPrefixSingleValued
argument_list|()
expr_stmt|;
name|indexFacetContains
argument_list|()
expr_stmt|;
name|indexSimpleGroupedFacetCounts
argument_list|()
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|pendingDocs
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
index|[]
name|doc
range|:
name|pendingDocs
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|randomCommit
argument_list|(
name|random_commit_percent
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|indexSimpleFacetCounts
specifier|static
name|void
name|indexSimpleFacetCounts
parameter_list|()
block|{
name|add_doc
argument_list|(
literal|"id"
argument_list|,
literal|"42"
argument_list|,
literal|"range_facet_f"
argument_list|,
literal|"35.3"
argument_list|,
literal|"range_facet_f1"
argument_list|,
literal|"35.3"
argument_list|,
literal|"trait_s"
argument_list|,
literal|"Tool"
argument_list|,
literal|"trait_s"
argument_list|,
literal|"Obnoxious"
argument_list|,
literal|"name"
argument_list|,
literal|"Zapp Brannigan"
argument_list|,
literal|"foo_s"
argument_list|,
literal|"A"
argument_list|,
literal|"foo_s"
argument_list|,
literal|"B"
argument_list|,
literal|"range_facet_mv_f"
argument_list|,
literal|"1.0"
argument_list|,
literal|"range_facet_mv_f"
argument_list|,
literal|"2.5"
argument_list|,
literal|"range_facet_mv_f"
argument_list|,
literal|"3.7"
argument_list|,
literal|"range_facet_mv_f"
argument_list|,
literal|"3.3"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
literal|"43"
argument_list|,
literal|"range_facet_f"
argument_list|,
literal|"28.789"
argument_list|,
literal|"range_facet_f1"
argument_list|,
literal|"28.789"
argument_list|,
literal|"title"
argument_list|,
literal|"Democratic Order of Planets"
argument_list|,
literal|"foo_s"
argument_list|,
literal|"A"
argument_list|,
literal|"foo_s"
argument_list|,
literal|"B"
argument_list|,
literal|"range_facet_mv_f"
argument_list|,
literal|"3.0"
argument_list|,
literal|"range_facet_mv_f"
argument_list|,
literal|"7.5"
argument_list|,
literal|"range_facet_mv_f"
argument_list|,
literal|"12.0"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
literal|"44"
argument_list|,
literal|"range_facet_f"
argument_list|,
literal|"15.97"
argument_list|,
literal|"range_facet_f1"
argument_list|,
literal|"15.97"
argument_list|,
literal|"trait_s"
argument_list|,
literal|"Tool"
argument_list|,
literal|"name"
argument_list|,
literal|"The Zapper"
argument_list|,
literal|"foo_s"
argument_list|,
literal|"A"
argument_list|,
literal|"foo_s"
argument_list|,
literal|"B"
argument_list|,
literal|"foo_s"
argument_list|,
literal|"C"
argument_list|,
literal|"range_facet_mv_f"
argument_list|,
literal|"0.0"
argument_list|,
literal|"range_facet_mv_f"
argument_list|,
literal|"5"
argument_list|,
literal|"range_facet_mv_f"
argument_list|,
literal|"74"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
literal|"45"
argument_list|,
literal|"range_facet_f"
argument_list|,
literal|"30.0"
argument_list|,
literal|"range_facet_f1"
argument_list|,
literal|"30.0"
argument_list|,
literal|"trait_s"
argument_list|,
literal|"Chauvinist"
argument_list|,
literal|"title"
argument_list|,
literal|"25 star General"
argument_list|,
literal|"foo_s"
argument_list|,
literal|"A"
argument_list|,
literal|"foo_s"
argument_list|,
literal|"B"
argument_list|,
literal|"range_facet_mv_f_f"
argument_list|,
literal|"12.0"
argument_list|,
literal|"range_facet_mv_f"
argument_list|,
literal|"212.452"
argument_list|,
literal|"range_facet_mv_f"
argument_list|,
literal|"32.77"
argument_list|,
literal|"range_facet_mv_f"
argument_list|,
literal|"0.123"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
literal|"46"
argument_list|,
literal|"range_facet_f"
argument_list|,
literal|"20.0"
argument_list|,
literal|"range_facet_f1"
argument_list|,
literal|"20.0"
argument_list|,
literal|"trait_s"
argument_list|,
literal|"Obnoxious"
argument_list|,
literal|"subject"
argument_list|,
literal|"Defeated the pacifists of the Gandhi nebula"
argument_list|,
literal|"foo_s"
argument_list|,
literal|"A"
argument_list|,
literal|"foo_s"
argument_list|,
literal|"B"
argument_list|,
literal|"range_facet_mv_f"
argument_list|,
literal|"123.0"
argument_list|,
literal|"range_facet_mv_f"
argument_list|,
literal|"2.0"
argument_list|,
literal|"range_facet_mv_f"
argument_list|,
literal|"7.3"
argument_list|,
literal|"range_facet_mv_f"
argument_list|,
literal|"0.123"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
literal|"47"
argument_list|,
literal|"range_facet_f"
argument_list|,
literal|"28.62"
argument_list|,
literal|"range_facet_f1"
argument_list|,
literal|"28.62"
argument_list|,
literal|"trait_s"
argument_list|,
literal|"Pig"
argument_list|,
literal|"text"
argument_list|,
literal|"line up and fly directly at the enemy death cannons, clogging them with wreckage!"
argument_list|,
literal|"zerolen_s"
argument_list|,
literal|""
argument_list|,
literal|"foo_s"
argument_list|,
literal|"A"
argument_list|,
literal|"foo_s"
argument_list|,
literal|"B"
argument_list|,
literal|"foo_s"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
literal|"101"
argument_list|,
literal|"myfield_s"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
literal|"102"
argument_list|,
literal|"myfield_s"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
block|}
DECL|method|indexSimpleGroupedFacetCounts
specifier|static
name|void
name|indexSimpleGroupedFacetCounts
parameter_list|()
block|{
name|add_doc
argument_list|(
literal|"id"
argument_list|,
literal|"2000"
argument_list|,
literal|"hotel_s1"
argument_list|,
literal|"a"
argument_list|,
literal|"airport_s1"
argument_list|,
literal|"ams"
argument_list|,
literal|"duration_i1"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
literal|"2001"
argument_list|,
literal|"hotel_s1"
argument_list|,
literal|"a"
argument_list|,
literal|"airport_s1"
argument_list|,
literal|"dus"
argument_list|,
literal|"duration_i1"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
literal|"2002"
argument_list|,
literal|"hotel_s1"
argument_list|,
literal|"b"
argument_list|,
literal|"airport_s1"
argument_list|,
literal|"ams"
argument_list|,
literal|"duration_i1"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
literal|"2003"
argument_list|,
literal|"hotel_s1"
argument_list|,
literal|"b"
argument_list|,
literal|"airport_s1"
argument_list|,
literal|"ams"
argument_list|,
literal|"duration_i1"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
literal|"2004"
argument_list|,
literal|"hotel_s1"
argument_list|,
literal|"b"
argument_list|,
literal|"airport_s1"
argument_list|,
literal|"ams"
argument_list|,
literal|"duration_i1"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
block|}
DECL|method|testDefaultsAndAppends
specifier|public
name|void
name|testDefaultsAndAppends
parameter_list|()
throws|throws
name|Exception
block|{
comment|// all defaults
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"qt"
argument_list|,
literal|"/search-facet-def"
argument_list|)
comment|// only one default facet.field
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='foo_s']"
argument_list|,
literal|"count(//lst[@name='facet_fields']/lst[@name='foo_s'])=1"
argument_list|,
literal|"count(//lst[@name='facet_fields']/lst)=1"
comment|// only one default facet.query
argument_list|,
literal|"//lst[@name='facet_queries']/int[@name='foo_s:bar']"
argument_list|,
literal|"count(//lst[@name='facet_queries']/int[@name='foo_s:bar'])=1"
argument_list|,
literal|"count(//lst[@name='facet_queries']/int)=1"
argument_list|)
expr_stmt|;
comment|// override default& pre-pend to appends
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"qt"
argument_list|,
literal|"/search-facet-def"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"bar_s"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"bar_s:yak"
argument_list|)
comment|// override single default facet.field
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='bar_s']"
argument_list|,
literal|"count(//lst[@name='facet_fields']/lst[@name='bar_s'])=1"
argument_list|,
literal|"count(//lst[@name='facet_fields']/lst)=1"
comment|// add an additional facet.query
argument_list|,
literal|"//lst[@name='facet_queries']/int[@name='foo_s:bar']"
argument_list|,
literal|"//lst[@name='facet_queries']/int[@name='bar_s:yak']"
argument_list|,
literal|"count(//lst[@name='facet_queries']/int[@name='foo_s:bar'])=1"
argument_list|,
literal|"count(//lst[@name='facet_queries']/int[@name='bar_s:yak'])=1"
argument_list|,
literal|"count(//lst[@name='facet_queries']/int)=2"
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvariants
specifier|public
name|void
name|testInvariants
parameter_list|()
throws|throws
name|Exception
block|{
comment|// no matter if we try to use facet.field or facet.query, results shouldn't change
for|for
control|(
name|String
name|ff
range|:
operator|new
name|String
index|[]
block|{
literal|"facet.field"
block|,
literal|"bogus"
block|}
control|)
block|{
for|for
control|(
name|String
name|fq
range|:
operator|new
name|String
index|[]
block|{
literal|"facet.query"
block|,
literal|"bogus"
block|}
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"qt"
argument_list|,
literal|"/search-facet-invariants"
argument_list|,
name|ff
argument_list|,
literal|"bar_s"
argument_list|,
name|fq
argument_list|,
literal|"bar_s:yak"
argument_list|)
comment|// only one invariant facet.field
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='foo_s']"
argument_list|,
literal|"count(//lst[@name='facet_fields']/lst[@name='foo_s'])=1"
argument_list|,
literal|"count(//lst[@name='facet_fields']/lst)=1"
comment|// only one invariant facet.query
argument_list|,
literal|"//lst[@name='facet_queries']/int[@name='foo_s:bar']"
argument_list|,
literal|"count(//lst[@name='facet_queries']/int[@name='foo_s:bar'])=1"
argument_list|,
literal|"count(//lst[@name='facet_queries']/int)=1"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testCachingBigTerms
specifier|public
name|void
name|testCachingBigTerms
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"foo_s"
comment|// big terms should cause foo_s:A to be cached
argument_list|)
argument_list|,
literal|"*[count(//doc)=6]"
argument_list|)
expr_stmt|;
comment|// now use the cached term as a filter to make sure deleted docs are accounted for
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"q"
argument_list|,
literal|"foo_s:B"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"foo_s"
argument_list|,
literal|"fq"
argument_list|,
literal|"foo_s:A"
argument_list|)
argument_list|,
literal|"*[count(//doc)=6]"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleGroupedQueryRangeFacets
specifier|public
name|void
name|testSimpleGroupedQueryRangeFacets
parameter_list|()
throws|throws
name|Exception
block|{
comment|// for the purposes of our test data, it shouldn't matter
comment|// if we use facet.limit -100, -1, or 100 ...
comment|// our set of values is small enough either way
name|testSimpleGroupedQueryRangeFacets
argument_list|(
literal|"-100"
argument_list|)
expr_stmt|;
name|testSimpleGroupedQueryRangeFacets
argument_list|(
literal|"-1"
argument_list|)
expr_stmt|;
name|testSimpleGroupedQueryRangeFacets
argument_list|(
literal|"100"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleGroupedQueryRangeFacets
specifier|private
name|void
name|testSimpleGroupedQueryRangeFacets
parameter_list|(
name|String
name|facetLimit
parameter_list|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[2000 TO 2004]"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.facet"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
literal|"hotel_s1"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.limit"
argument_list|,
name|facetLimit
argument_list|,
literal|"facet.query"
argument_list|,
literal|"airport_s1:ams"
argument_list|)
argument_list|,
literal|"//lst[@name='facet_queries']/int[@name='airport_s1:ams'][.='2']"
argument_list|)
expr_stmt|;
comment|/* Testing facet.query using tagged filter query and exclusion */
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[2000 TO 2004]"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=dus}airport_s1:dus"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.facet"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
literal|"hotel_s1"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.limit"
argument_list|,
name|facetLimit
argument_list|,
literal|"facet.query"
argument_list|,
literal|"{!ex=dus}airport_s1:ams"
argument_list|)
argument_list|,
literal|"//lst[@name='facet_queries']/int[@name='{!ex=dus}airport_s1:ams'][.='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[2000 TO 2004]"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.facet"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
literal|"hotel_s1"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.limit"
argument_list|,
name|facetLimit
argument_list|,
literal|"facet.range"
argument_list|,
literal|"duration_i1"
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"5"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"11"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='duration_i1']/lst[@name='counts']/int[@name='5'][.='2']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='duration_i1']/lst[@name='counts']/int[@name='6'][.='0']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='duration_i1']/lst[@name='counts']/int[@name='7'][.='0']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='duration_i1']/lst[@name='counts']/int[@name='8'][.='0']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='duration_i1']/lst[@name='counts']/int[@name='9'][.='0']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='duration_i1']/lst[@name='counts']/int[@name='10'][.='2']"
argument_list|)
expr_stmt|;
comment|/* Testing facet.range using tagged filter query and exclusion */
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[2000 TO 2004]"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=dus}airport_s1:dus"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.facet"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
literal|"hotel_s1"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.limit"
argument_list|,
name|facetLimit
argument_list|,
literal|"facet.range"
argument_list|,
literal|"{!ex=dus}duration_i1"
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"5"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"11"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='duration_i1']/lst[@name='counts']/int[@name='5'][.='2']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='duration_i1']/lst[@name='counts']/int[@name='6'][.='0']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='duration_i1']/lst[@name='counts']/int[@name='7'][.='0']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='duration_i1']/lst[@name='counts']/int[@name='8'][.='0']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='duration_i1']/lst[@name='counts']/int[@name='9'][.='0']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='duration_i1']/lst[@name='counts']/int[@name='10'][.='2']"
argument_list|)
expr_stmt|;
comment|// repeat the same query using DV method. This is not supported and the query should use filter method instead
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[2000 TO 2004]"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=dus}airport_s1:dus"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.facet"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
literal|"hotel_s1"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.limit"
argument_list|,
name|facetLimit
argument_list|,
literal|"facet.range"
argument_list|,
literal|"{!ex=dus}duration_i1"
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"5"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"11"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.range.method"
argument_list|,
name|FacetRangeMethod
operator|.
name|DV
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='duration_i1']/lst[@name='counts']/int[@name='5'][.='2']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='duration_i1']/lst[@name='counts']/int[@name='6'][.='0']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='duration_i1']/lst[@name='counts']/int[@name='7'][.='0']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='duration_i1']/lst[@name='counts']/int[@name='8'][.='0']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='duration_i1']/lst[@name='counts']/int[@name='9'][.='0']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='duration_i1']/lst[@name='counts']/int[@name='10'][.='2']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleGroupedFacets
specifier|public
name|void
name|testSimpleGroupedFacets
parameter_list|()
throws|throws
name|Exception
block|{
comment|// for the purposes of our test data, it shouldn't matter
comment|// if we use facet.limit -100, -1, or 100 ...
comment|// our set of values is small enough either way
name|testSimpleGroupedFacets
argument_list|(
literal|"100"
argument_list|)
expr_stmt|;
name|testSimpleGroupedFacets
argument_list|(
literal|"-100"
argument_list|)
expr_stmt|;
name|testSimpleGroupedFacets
argument_list|(
literal|"-5"
argument_list|)
expr_stmt|;
name|testSimpleGroupedFacets
argument_list|(
literal|"-1"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleGroupedFacets
specifier|private
name|void
name|testSimpleGroupedFacets
parameter_list|(
name|String
name|facetLimit
parameter_list|)
throws|throws
name|Exception
block|{
name|assertQ
argument_list|(
literal|"Return 5 docs with id range 1937 till 1940"
argument_list|,
name|req
argument_list|(
literal|"id:[2000 TO 2004]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=5]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Return two facet counts for field airport_a"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[2000 TO 2004]"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.facet"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
literal|"hotel_s1"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.limit"
argument_list|,
name|facetLimit
argument_list|,
literal|"facet.field"
argument_list|,
literal|"airport_s1"
argument_list|)
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='airport_s1']"
argument_list|,
literal|"*[count(//lst[@name='airport_s1']/int)=2]"
argument_list|,
literal|"//lst[@name='airport_s1']/int[@name='ams'][.='2']"
argument_list|,
literal|"//lst[@name='airport_s1']/int[@name='dus'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Return one facet count for field airport_a using facet.offset"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[2000 TO 2004]"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.facet"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
literal|"hotel_s1"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
name|facetLimit
argument_list|,
literal|"facet.field"
argument_list|,
literal|"airport_s1"
argument_list|)
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='airport_s1']"
argument_list|,
literal|"*[count(//lst[@name='airport_s1']/int)=1]"
argument_list|,
literal|"//lst[@name='airport_s1']/int[@name='dus'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Return two facet counts for field airport_a with fq"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[2000 TO 2004]"
argument_list|,
literal|"fq"
argument_list|,
literal|"duration_i1:5"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.facet"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
literal|"hotel_s1"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.limit"
argument_list|,
name|facetLimit
argument_list|,
literal|"facet.field"
argument_list|,
literal|"airport_s1"
argument_list|)
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='airport_s1']"
argument_list|,
literal|"*[count(//lst[@name='airport_s1']/int)=2]"
argument_list|,
literal|"//lst[@name='airport_s1']/int[@name='ams'][.='2']"
argument_list|,
literal|"//lst[@name='airport_s1']/int[@name='dus'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Return one facet count for field airport_s1 with prefix a"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[2000 TO 2004]"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.facet"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
literal|"hotel_s1"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"airport_s1"
argument_list|,
literal|"facet.limit"
argument_list|,
name|facetLimit
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='airport_s1']"
argument_list|,
literal|"*[count(//lst[@name='airport_s1']/int)=1]"
argument_list|,
literal|"//lst[@name='airport_s1']/int[@name='ams'][.='2']"
argument_list|)
expr_stmt|;
try|try
block|{
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[2000 TO 2004]"
argument_list|,
literal|"group.facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"airport_s1"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception should have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
operator|.
name|code
argument_list|,
name|e
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testEmptyFacetCounts
specifier|public
name|void
name|testEmptyFacetCounts
parameter_list|()
throws|throws
name|Exception
block|{
name|doEmptyFacetCounts
argument_list|()
expr_stmt|;
block|}
comment|// static so we can try both with and without an empty index
DECL|method|doEmptyFacetCounts
specifier|static
name|void
name|doEmptyFacetCounts
parameter_list|()
throws|throws
name|Exception
block|{
name|doEmptyFacetCounts
argument_list|(
literal|"empty_t"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"myprefix"
block|,
literal|""
block|}
argument_list|)
expr_stmt|;
name|doEmptyFacetCounts
argument_list|(
literal|"empty_i"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|null
block|}
argument_list|)
expr_stmt|;
name|doEmptyFacetCounts
argument_list|(
literal|"empty_f"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|null
block|}
argument_list|)
expr_stmt|;
name|doEmptyFacetCounts
argument_list|(
literal|"empty_s"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"myprefix"
block|,
literal|""
block|}
argument_list|)
expr_stmt|;
name|doEmptyFacetCounts
argument_list|(
literal|"empty_d"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|null
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|doEmptyFacetCounts
specifier|static
name|void
name|doEmptyFacetCounts
parameter_list|(
name|String
name|field
parameter_list|,
name|String
index|[]
name|prefixes
parameter_list|)
throws|throws
name|Exception
block|{
name|SchemaField
name|sf
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|String
name|response
init|=
name|JQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
argument_list|)
decl_stmt|;
name|Map
name|rsp
init|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|fromJSON
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|Long
name|numFound
init|=
call|(
name|Long
call|)
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|rsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"numFound"
argument_list|)
argument_list|)
decl_stmt|;
name|ModifiableSolrParams
name|params
init|=
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=myalias}"
operator|+
name|field
argument_list|)
decl_stmt|;
name|String
index|[]
name|methods
init|=
block|{
literal|null
block|,
literal|"fc"
block|,
literal|"enum"
block|,
literal|"fcs"
block|}
decl_stmt|;
if|if
condition|(
name|sf
operator|.
name|multiValued
argument_list|()
operator|||
name|sf
operator|.
name|getType
argument_list|()
operator|.
name|multiValuedFieldCache
argument_list|()
condition|)
block|{
name|methods
operator|=
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"fc"
block|,
literal|"enum"
block|}
expr_stmt|;
block|}
name|prefixes
operator|=
name|prefixes
operator|==
literal|null
condition|?
operator|new
name|String
index|[]
block|{
literal|null
block|}
else|:
name|prefixes
expr_stmt|;
for|for
control|(
name|String
name|method
range|:
name|methods
control|)
block|{
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
name|params
operator|.
name|remove
argument_list|(
literal|"facet.method"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|params
operator|.
name|set
argument_list|(
literal|"facet.method"
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|prefix
range|:
name|prefixes
control|)
block|{
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
name|params
operator|.
name|remove
argument_list|(
literal|"facet.prefix"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|params
operator|.
name|set
argument_list|(
literal|"facet.prefix"
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|missing
range|:
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"true"
block|}
control|)
block|{
if|if
condition|(
name|missing
operator|==
literal|null
condition|)
block|{
name|params
operator|.
name|remove
argument_list|(
literal|"facet.missing"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|params
operator|.
name|set
argument_list|(
literal|"facet.missing"
argument_list|,
name|missing
argument_list|)
expr_stmt|;
block|}
name|String
name|expected
init|=
name|missing
operator|==
literal|null
condition|?
literal|"[]"
else|:
literal|"[null,"
operator|+
name|numFound
operator|+
literal|"]"
decl_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
literal|"/facet_counts/facet_fields/myalias=="
operator|+
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testSimpleFacetCounts
specifier|public
name|void
name|testSimpleFacetCounts
parameter_list|()
block|{
name|assertQ
argument_list|(
literal|"standard request handler returns all matches"
argument_list|,
name|req
argument_list|(
literal|"id:[42 TO 47]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=6]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"filter results using fq"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 46]"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[43 TO 47]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=4]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"don't filter results using blank fq"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 46]"
argument_list|,
literal|"fq"
argument_list|,
literal|" "
argument_list|)
argument_list|,
literal|"*[count(//doc)=5]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"filter results using multiple fq params"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 46]"
argument_list|,
literal|"fq"
argument_list|,
literal|"trait_s:Obnoxious"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[43 TO 47]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check counts for facet queries"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"trait_s:Obnoxious"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"id:[43 TO 47]"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"trait_s"
argument_list|)
argument_list|,
literal|"*[count(//doc)=6]"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_queries']"
argument_list|,
literal|"//lst[@name='facet_queries']/int[@name='trait_s:Obnoxious'][.='2']"
argument_list|,
literal|"//lst[@name='facet_queries']/int[@name='id:[42 TO 45]'][.='4']"
argument_list|,
literal|"//lst[@name='facet_queries']/int[@name='id:[43 TO 47]'][.='5']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']"
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='trait_s']"
argument_list|,
literal|"*[count(//lst[@name='trait_s']/int)=4]"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Tool'][.='2']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Obnoxious'][.='2']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Pig'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check multi-select facets with naming"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"{!ex=1}trait_s:Obnoxious"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"{!ex=2 key=foo}id:[42 TO 45]"
comment|// tag=2 same as 1
argument_list|,
literal|"facet.query"
argument_list|,
literal|"{!ex=3,4 key=bar}id:[43 TO 47]"
comment|// tag=3,4 don't exist
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!ex=3,1}trait_s"
comment|// 3,1 same as 1
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=1,2}id:47"
comment|// tagged as 1 and 2
argument_list|)
argument_list|,
literal|"*[count(//doc)=1]"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_queries']"
argument_list|,
literal|"//lst[@name='facet_queries']/int[@name='{!ex=1}trait_s:Obnoxious'][.='2']"
argument_list|,
literal|"//lst[@name='facet_queries']/int[@name='foo'][.='4']"
argument_list|,
literal|"//lst[@name='facet_queries']/int[@name='bar'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']"
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='trait_s']"
argument_list|,
literal|"*[count(//lst[@name='trait_s']/int)=4]"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Tool'][.='2']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Obnoxious'][.='2']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Pig'][.='1']"
argument_list|)
expr_stmt|;
comment|// test excluding main query
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!tag=main}id:43"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"{!key=foo}id:42"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"{!ex=main key=bar}id:42"
comment|// only matches when we exclude main query
argument_list|)
argument_list|,
literal|"//lst[@name='facet_queries']/int[@name='foo'][.='0']"
argument_list|,
literal|"//lst[@name='facet_queries']/int[@name='bar'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check counts for applied facet queries using filtering (fq)"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"trait_s"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"id:[43 TO 47]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=4]"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_queries']"
argument_list|,
literal|"//lst[@name='facet_queries']/int[@name='id:[42 TO 45]'][.='4']"
argument_list|,
literal|"//lst[@name='facet_queries']/int[@name='id:[43 TO 47]'][.='3']"
argument_list|,
literal|"*[count(//lst[@name='trait_s']/int)=4]"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Tool'][.='2']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Obnoxious'][.='1']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Chauvinist'][.='1']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Pig'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check counts with facet.zero=false&facet.missing=true using fq"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.zeros"
argument_list|,
literal|"false"
argument_list|,
literal|"f.trait_s.facet.missing"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"trait_s"
argument_list|)
argument_list|,
literal|"*[count(//doc)=4]"
argument_list|,
literal|"*[count(//lst[@name='trait_s']/int)=4]"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Tool'][.='2']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Obnoxious'][.='1']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Chauvinist'][.='1']"
argument_list|,
literal|"//lst[@name='trait_s']/int[not(@name)][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check counts with facet.mincount=1&facet.missing=true using fq"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|,
literal|"f.trait_s.facet.missing"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"trait_s"
argument_list|)
argument_list|,
literal|"*[count(//doc)=4]"
argument_list|,
literal|"*[count(//lst[@name='trait_s']/int)=4]"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Tool'][.='2']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Obnoxious'][.='1']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Chauvinist'][.='1']"
argument_list|,
literal|"//lst[@name='trait_s']/int[not(@name)][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check counts with facet.mincount=2&facet.missing=true using fq"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"2"
argument_list|,
literal|"f.trait_s.facet.missing"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"trait_s"
argument_list|)
argument_list|,
literal|"*[count(//doc)=4]"
argument_list|,
literal|"*[count(//lst[@name='trait_s']/int)=2]"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Tool'][.='2']"
argument_list|,
literal|"//lst[@name='trait_s']/int[not(@name)][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check sorted paging"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"trait_s"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"4"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='trait_s']/int)=4]"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Tool'][.='2']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Obnoxious'][.='1']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Chauvinist'][.='1']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Pig'][.='0']"
argument_list|)
expr_stmt|;
comment|// check that the default sort is by count
name|assertQ
argument_list|(
literal|"check sorted paging"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"trait_s"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"3"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='trait_s']/int)=3]"
argument_list|,
literal|"//int[1][@name='Tool'][.='2']"
argument_list|,
literal|"//int[2][@name='Chauvinist'][.='1']"
argument_list|,
literal|"//int[3][@name='Obnoxious'][.='1']"
argument_list|)
expr_stmt|;
comment|//
comment|// check that legacy facet.sort=true/false works
comment|//
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"trait_s"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"3"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"true"
comment|// true means sort-by-count
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='trait_s']/int)=3]"
argument_list|,
literal|"//int[1][@name='Tool'][.='2']"
argument_list|,
literal|"//int[2][@name='Chauvinist'][.='1']"
argument_list|,
literal|"//int[3][@name='Obnoxious'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"trait_s"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"3"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"false"
comment|// false means sort by index order
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='trait_s']/int)=3]"
argument_list|,
literal|"//int[1][@name='Chauvinist'][.='1']"
argument_list|,
literal|"//int[2][@name='Obnoxious'][.='1']"
argument_list|,
literal|"//int[3][@name='Tool'][.='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.method"
argument_list|,
literal|"fc"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"zerolen_s"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='zerolen_s']/int)=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"a facet.query that analyzes to no query shoud not NPE"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"{!field key=k f=lengthfilt}a"
argument_list|)
argument_list|,
comment|//2 char minimum
literal|"//lst[@name='facet_queries']/int[@name='k'][.='0']"
argument_list|)
expr_stmt|;
block|}
DECL|method|indexDateFacets
specifier|public
specifier|static
name|void
name|indexDateFacets
parameter_list|()
block|{
specifier|final
name|String
name|i
init|=
literal|"id"
decl_stmt|;
specifier|final
name|String
name|f
init|=
literal|"bday"
decl_stmt|;
specifier|final
name|String
name|ff
init|=
literal|"a_tdt"
decl_stmt|;
specifier|final
name|String
name|ooo
init|=
literal|"00:00:00.000Z"
decl_stmt|;
specifier|final
name|String
name|xxx
init|=
literal|"15:15:15.155Z"
decl_stmt|;
comment|//note: add_doc duplicates bday to bday_drf and a_tdt to a_drf (date range field)
name|add_doc
argument_list|(
name|i
argument_list|,
literal|"201"
argument_list|,
name|f
argument_list|,
literal|"1976-07-04T12:08:56.235Z"
argument_list|,
name|ff
argument_list|,
literal|"1900-01-01T"
operator|+
name|ooo
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
name|i
argument_list|,
literal|"202"
argument_list|,
name|f
argument_list|,
literal|"1976-07-05T00:00:00.000Z"
argument_list|,
name|ff
argument_list|,
literal|"1976-07-01T"
operator|+
name|ooo
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
name|i
argument_list|,
literal|"203"
argument_list|,
name|f
argument_list|,
literal|"1976-07-15T00:07:67.890Z"
argument_list|,
name|ff
argument_list|,
literal|"1976-07-04T"
operator|+
name|ooo
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
name|i
argument_list|,
literal|"204"
argument_list|,
name|f
argument_list|,
literal|"1976-07-21T00:07:67.890Z"
argument_list|,
name|ff
argument_list|,
literal|"1976-07-05T"
operator|+
name|ooo
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
name|i
argument_list|,
literal|"205"
argument_list|,
name|f
argument_list|,
literal|"1976-07-13T12:12:25.255Z"
argument_list|,
name|ff
argument_list|,
literal|"1976-07-05T"
operator|+
name|xxx
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
name|i
argument_list|,
literal|"206"
argument_list|,
name|f
argument_list|,
literal|"1976-07-03T17:01:23.456Z"
argument_list|,
name|ff
argument_list|,
literal|"1976-07-07T"
operator|+
name|ooo
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
name|i
argument_list|,
literal|"207"
argument_list|,
name|f
argument_list|,
literal|"1976-07-12T12:12:25.255Z"
argument_list|,
name|ff
argument_list|,
literal|"1976-07-13T"
operator|+
name|ooo
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
name|i
argument_list|,
literal|"208"
argument_list|,
name|f
argument_list|,
literal|"1976-07-15T15:15:15.155Z"
argument_list|,
name|ff
argument_list|,
literal|"1976-07-13T"
operator|+
name|xxx
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
name|i
argument_list|,
literal|"209"
argument_list|,
name|f
argument_list|,
literal|"1907-07-12T13:13:23.235Z"
argument_list|,
name|ff
argument_list|,
literal|"1976-07-15T"
operator|+
name|xxx
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
name|i
argument_list|,
literal|"2010"
argument_list|,
name|f
argument_list|,
literal|"1976-07-03T11:02:45.678Z"
argument_list|,
name|ff
argument_list|,
literal|"2000-01-01T"
operator|+
name|ooo
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
name|i
argument_list|,
literal|"2011"
argument_list|,
name|f
argument_list|,
literal|"1907-07-12T12:12:25.255Z"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
name|i
argument_list|,
literal|"2012"
argument_list|,
name|f
argument_list|,
literal|"2007-07-30T07:07:07.070Z"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
name|i
argument_list|,
literal|"2013"
argument_list|,
name|f
argument_list|,
literal|"1976-07-30T22:22:22.222Z"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
name|i
argument_list|,
literal|"2014"
argument_list|,
name|f
argument_list|,
literal|"1976-07-05T22:22:22.222Z"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTrieDateFacets
specifier|public
name|void
name|testTrieDateFacets
parameter_list|()
block|{
name|helpTestDateFacets
argument_list|(
literal|"bday"
argument_list|,
literal|false
argument_list|,
name|FacetRangeMethod
operator|.
name|FILTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTrieDateRangeFacets
specifier|public
name|void
name|testTrieDateRangeFacets
parameter_list|()
block|{
name|helpTestDateFacets
argument_list|(
literal|"bday"
argument_list|,
literal|true
argument_list|,
name|FacetRangeMethod
operator|.
name|FILTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTrieDateFacetsDocValues
specifier|public
name|void
name|testTrieDateFacetsDocValues
parameter_list|()
block|{
name|helpTestDateFacets
argument_list|(
literal|"bday"
argument_list|,
literal|false
argument_list|,
name|FacetRangeMethod
operator|.
name|DV
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTrieDateRangeFacetsDocValues
specifier|public
name|void
name|testTrieDateRangeFacetsDocValues
parameter_list|()
block|{
name|helpTestDateFacets
argument_list|(
literal|"bday"
argument_list|,
literal|true
argument_list|,
name|FacetRangeMethod
operator|.
name|DV
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDateRangeFieldFacets
specifier|public
name|void
name|testDateRangeFieldFacets
parameter_list|()
block|{
name|helpTestDateFacets
argument_list|(
literal|"bday_drf"
argument_list|,
literal|true
argument_list|,
name|FacetRangeMethod
operator|.
name|FILTER
argument_list|)
expr_stmt|;
block|}
DECL|method|helpTestDateFacets
specifier|private
name|void
name|helpTestDateFacets
parameter_list|(
specifier|final
name|String
name|fieldName
parameter_list|,
specifier|final
name|boolean
name|rangeMode
parameter_list|,
specifier|final
name|FacetRangeMethod
name|rangeFacetMethod
parameter_list|)
block|{
specifier|final
name|String
name|p
init|=
name|rangeMode
condition|?
literal|"facet.range"
else|:
literal|"facet.date"
decl_stmt|;
specifier|final
name|String
name|b
init|=
name|rangeMode
condition|?
literal|"facet_ranges"
else|:
literal|"facet_dates"
decl_stmt|;
specifier|final
name|String
name|f
init|=
name|fieldName
decl_stmt|;
specifier|final
name|String
name|c
init|=
operator|(
name|rangeMode
condition|?
literal|"/lst[@name='counts']"
else|:
literal|""
operator|)
decl_stmt|;
specifier|final
name|String
name|pre
init|=
literal|"//lst[@name='"
operator|+
name|b
operator|+
literal|"']/lst[@name='"
operator|+
name|f
operator|+
literal|"']"
operator|+
name|c
decl_stmt|;
specifier|final
name|String
name|meta
init|=
name|pre
operator|+
operator|(
name|rangeMode
condition|?
literal|"/../"
else|:
literal|""
operator|)
decl_stmt|;
comment|// date faceting defaults to include both endpoints,
comment|// range faceting defaults to including only lower
comment|// doc exists with value @ 00:00:00.000 on July5
specifier|final
name|String
name|jul4
init|=
name|rangeMode
condition|?
literal|"[.='1'  ]"
else|:
literal|"[.='2'  ]"
decl_stmt|;
name|assertQ
argument_list|(
literal|"check counts for month of facet by day"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
name|p
argument_list|,
name|f
argument_list|,
name|p
operator|+
literal|".start"
argument_list|,
literal|"1976-07-01T00:00:00.000Z"
argument_list|,
name|p
operator|+
literal|".end"
argument_list|,
literal|"1976-07-01T00:00:00.000Z+1MONTH"
argument_list|,
name|p
operator|+
literal|".gap"
argument_list|,
literal|"+1DAY"
argument_list|,
name|p
operator|+
literal|".other"
argument_list|,
literal|"all"
argument_list|,
name|p
operator|+
literal|".method"
argument_list|,
name|rangeFacetMethod
operator|.
name|toString
argument_list|()
comment|//This only applies to range faceting, won't be use for date faceting
argument_list|)
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)="
operator|+
operator|(
name|rangeMode
condition|?
literal|31
else|:
literal|34
operator|)
operator|+
literal|"]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-01T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-02T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-03T00:00:00Z'][.='2'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-04T00:00:00Z']"
operator|+
name|jul4
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-05T00:00:00Z'][.='2'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-06T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-07T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-08T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-09T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-10T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-11T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-12T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-13T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-14T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-15T00:00:00Z'][.='2'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-16T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-17T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-18T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-19T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-21T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-22T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-23T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-24T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-25T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-26T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-27T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-28T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-29T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-30T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-31T00:00:00Z'][.='0']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='before' ][.='2']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='after'  ][.='1']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='between'][.='11']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check counts for month of facet by day with global mincount = 1"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
name|p
argument_list|,
name|f
argument_list|,
name|p
operator|+
literal|".start"
argument_list|,
literal|"1976-07-01T00:00:00.000Z"
argument_list|,
name|p
operator|+
literal|".end"
argument_list|,
literal|"1976-07-01T00:00:00.000Z+1MONTH"
argument_list|,
name|p
operator|+
literal|".gap"
argument_list|,
literal|"+1DAY"
argument_list|,
name|p
operator|+
literal|".other"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)="
operator|+
operator|(
name|rangeMode
condition|?
literal|8
else|:
literal|11
operator|)
operator|+
literal|"]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-03T00:00:00Z'][.='2'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-04T00:00:00Z']"
operator|+
name|jul4
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-05T00:00:00Z'][.='2'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-12T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-13T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-15T00:00:00Z'][.='2'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-21T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-30T00:00:00Z'][.='1'  ]"
argument_list|,
name|meta
operator|+
literal|"/int[@name='before' ][.='2']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='after'  ][.='1']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='between'][.='11']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check counts for month of facet by day with field mincount = 1"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
name|p
argument_list|,
name|f
argument_list|,
name|p
operator|+
literal|".start"
argument_list|,
literal|"1976-07-01T00:00:00.000Z"
argument_list|,
name|p
operator|+
literal|".end"
argument_list|,
literal|"1976-07-01T00:00:00.000Z+1MONTH"
argument_list|,
name|p
operator|+
literal|".gap"
argument_list|,
literal|"+1DAY"
argument_list|,
name|p
operator|+
literal|".other"
argument_list|,
literal|"all"
argument_list|,
literal|"f."
operator|+
name|f
operator|+
literal|".facet.mincount"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)="
operator|+
operator|(
name|rangeMode
condition|?
literal|3
else|:
literal|7
operator|)
operator|+
literal|"]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-03T00:00:00Z'][.='2'  ]"
argument_list|,
name|pre
operator|+
operator|(
name|rangeMode
condition|?
literal|""
else|:
literal|"/int[@name='1976-07-04T00:00:00Z']"
operator|+
name|jul4
operator|)
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-05T00:00:00Z'][.='2'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-15T00:00:00Z'][.='2'  ]"
argument_list|,
name|meta
operator|+
literal|"/int[@name='before' ][.='2']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='after'  ][.='1']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='between'][.='11']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check before is not inclusive of upper bound by default"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
name|p
argument_list|,
name|f
argument_list|,
name|p
operator|+
literal|".start"
argument_list|,
literal|"1976-07-05T00:00:00.000Z"
argument_list|,
name|p
operator|+
literal|".end"
argument_list|,
literal|"1976-07-07T00:00:00.000Z"
argument_list|,
name|p
operator|+
literal|".gap"
argument_list|,
literal|"+1DAY"
argument_list|,
name|p
operator|+
literal|".other"
argument_list|,
literal|"all"
argument_list|)
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)="
operator|+
operator|(
name|rangeMode
condition|?
literal|2
else|:
literal|5
operator|)
operator|+
literal|"]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-05T00:00:00Z'][.='2'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-06T00:00:00Z'][.='0']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='before' ][.='5']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check after is not inclusive of lower bound by default (for dates)"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
name|p
argument_list|,
name|f
argument_list|,
name|p
operator|+
literal|".start"
argument_list|,
literal|"1976-07-03T00:00:00.000Z"
argument_list|,
name|p
operator|+
literal|".end"
argument_list|,
literal|"1976-07-05T00:00:00.000Z"
argument_list|,
name|p
operator|+
literal|".gap"
argument_list|,
literal|"+1DAY"
argument_list|,
name|p
operator|+
literal|".other"
argument_list|,
literal|"all"
argument_list|)
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)="
operator|+
operator|(
name|rangeMode
condition|?
literal|2
else|:
literal|5
operator|)
operator|+
literal|"]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-03T00:00:00Z'][.='2'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-04T00:00:00Z']"
operator|+
name|jul4
argument_list|,
name|meta
operator|+
literal|"/int[@name='after' ][.='"
operator|+
operator|(
name|rangeMode
condition|?
literal|9
else|:
literal|8
operator|)
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check hardend=false"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
name|p
argument_list|,
name|f
argument_list|,
name|p
operator|+
literal|".start"
argument_list|,
literal|"1976-07-01T00:00:00.000Z"
argument_list|,
name|p
operator|+
literal|".end"
argument_list|,
literal|"1976-07-13T00:00:00.000Z"
argument_list|,
name|p
operator|+
literal|".gap"
argument_list|,
literal|"+5DAYS"
argument_list|,
name|p
operator|+
literal|".other"
argument_list|,
literal|"all"
argument_list|,
name|p
operator|+
literal|".hardend"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)="
operator|+
operator|(
name|rangeMode
condition|?
literal|3
else|:
literal|6
operator|)
operator|+
literal|"]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-01T00:00:00Z'][.='5'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-06T00:00:00Z'][.='0'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-11T00:00:00Z'][.='4'  ]"
argument_list|,
name|meta
operator|+
literal|"/int[@name='before' ][.='2']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='after'  ][.='3']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='between'][.='9']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check hardend=true"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
name|p
argument_list|,
name|f
argument_list|,
name|p
operator|+
literal|".start"
argument_list|,
literal|"1976-07-01T00:00:00.000Z"
argument_list|,
name|p
operator|+
literal|".end"
argument_list|,
literal|"1976-07-13T00:00:00.000Z"
argument_list|,
name|p
operator|+
literal|".gap"
argument_list|,
literal|"+5DAYS"
argument_list|,
name|p
operator|+
literal|".other"
argument_list|,
literal|"all"
argument_list|,
name|p
operator|+
literal|".hardend"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)="
operator|+
operator|(
name|rangeMode
condition|?
literal|3
else|:
literal|6
operator|)
operator|+
literal|"]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-01T00:00:00Z'][.='5'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-06T00:00:00Z'][.='0'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-11T00:00:00Z'][.='1'  ]"
argument_list|,
name|meta
operator|+
literal|"/int[@name='before' ][.='2']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='after'  ][.='6']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='between'][.='6']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTrieDateFacetsWithIncludeOption
specifier|public
name|void
name|testTrieDateFacetsWithIncludeOption
parameter_list|()
block|{
name|helpTestDateFacetsWithIncludeOption
argument_list|(
literal|"a_tdt"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTrieDateRangeFacetsWithIncludeOption
specifier|public
name|void
name|testTrieDateRangeFacetsWithIncludeOption
parameter_list|()
block|{
name|helpTestDateFacetsWithIncludeOption
argument_list|(
literal|"a_tdt"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDateRangeFieldDateRangeFacetsWithIncludeOption
specifier|public
name|void
name|testDateRangeFieldDateRangeFacetsWithIncludeOption
parameter_list|()
block|{
name|helpTestDateFacetsWithIncludeOption
argument_list|(
literal|"a_drf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** Similar to helpTestDateFacets, but for different fields with test data       exactly on boundary marks */
DECL|method|helpTestDateFacetsWithIncludeOption
specifier|private
name|void
name|helpTestDateFacetsWithIncludeOption
parameter_list|(
specifier|final
name|String
name|fieldName
parameter_list|,
specifier|final
name|boolean
name|rangeMode
parameter_list|)
block|{
specifier|final
name|String
name|p
init|=
name|rangeMode
condition|?
literal|"facet.range"
else|:
literal|"facet.date"
decl_stmt|;
specifier|final
name|String
name|b
init|=
name|rangeMode
condition|?
literal|"facet_ranges"
else|:
literal|"facet_dates"
decl_stmt|;
specifier|final
name|String
name|f
init|=
name|fieldName
decl_stmt|;
specifier|final
name|String
name|c
init|=
operator|(
name|rangeMode
condition|?
literal|"/lst[@name='counts']"
else|:
literal|""
operator|)
decl_stmt|;
specifier|final
name|String
name|pre
init|=
literal|"//lst[@name='"
operator|+
name|b
operator|+
literal|"']/lst[@name='"
operator|+
name|f
operator|+
literal|"']"
operator|+
name|c
decl_stmt|;
specifier|final
name|String
name|meta
init|=
name|pre
operator|+
operator|(
name|rangeMode
condition|?
literal|"/../"
else|:
literal|""
operator|)
decl_stmt|;
name|assertQ
argument_list|(
literal|"checking counts for lower"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
name|p
argument_list|,
name|f
argument_list|,
name|p
operator|+
literal|".start"
argument_list|,
literal|"1976-07-01T00:00:00.000Z"
argument_list|,
name|p
operator|+
literal|".end"
argument_list|,
literal|"1976-07-16T00:00:00.000Z"
argument_list|,
name|p
operator|+
literal|".gap"
argument_list|,
literal|"+1DAY"
argument_list|,
name|p
operator|+
literal|".other"
argument_list|,
literal|"all"
argument_list|,
name|p
operator|+
literal|".include"
argument_list|,
literal|"lower"
argument_list|)
comment|// 15 days + pre+post+inner = 18
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)="
operator|+
operator|(
name|rangeMode
condition|?
literal|15
else|:
literal|18
operator|)
operator|+
literal|"]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-01T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-02T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-03T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-04T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-05T00:00:00Z'][.='2'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-06T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-07T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-08T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-09T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-10T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-11T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-12T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-13T00:00:00Z'][.='2'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-14T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-15T00:00:00Z'][.='1'  ]"
comment|//
argument_list|,
name|meta
operator|+
literal|"/int[@name='before' ][.='1']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='after'  ][.='1']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='between'][.='8']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"checking counts for upper"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
name|p
argument_list|,
name|f
argument_list|,
name|p
operator|+
literal|".start"
argument_list|,
literal|"1976-07-01T00:00:00.000Z"
argument_list|,
name|p
operator|+
literal|".end"
argument_list|,
literal|"1976-07-16T00:00:00.000Z"
argument_list|,
name|p
operator|+
literal|".gap"
argument_list|,
literal|"+1DAY"
argument_list|,
name|p
operator|+
literal|".other"
argument_list|,
literal|"all"
argument_list|,
name|p
operator|+
literal|".include"
argument_list|,
literal|"upper"
argument_list|)
comment|// 15 days + pre+post+inner = 18
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)="
operator|+
operator|(
name|rangeMode
condition|?
literal|15
else|:
literal|18
operator|)
operator|+
literal|"]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-01T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-02T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-03T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-04T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-05T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-06T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-07T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-08T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-09T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-10T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-11T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-12T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-13T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-14T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-15T00:00:00Z'][.='1'  ]"
comment|//
argument_list|,
name|meta
operator|+
literal|"/int[@name='before' ][.='2']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='after'  ][.='1']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='between'][.='7']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"checking counts for lower& upper"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
name|p
argument_list|,
name|f
argument_list|,
name|p
operator|+
literal|".start"
argument_list|,
literal|"1976-07-01T00:00:00.000Z"
argument_list|,
name|p
operator|+
literal|".end"
argument_list|,
literal|"1976-07-16T00:00:00.000Z"
argument_list|,
name|p
operator|+
literal|".gap"
argument_list|,
literal|"+1DAY"
argument_list|,
name|p
operator|+
literal|".other"
argument_list|,
literal|"all"
argument_list|,
name|p
operator|+
literal|".include"
argument_list|,
literal|"lower"
argument_list|,
name|p
operator|+
literal|".include"
argument_list|,
literal|"upper"
argument_list|)
comment|// 15 days + pre+post+inner = 18
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)="
operator|+
operator|(
name|rangeMode
condition|?
literal|15
else|:
literal|18
operator|)
operator|+
literal|"]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-01T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-02T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-03T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-04T00:00:00Z'][.='2'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-05T00:00:00Z'][.='2'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-06T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-07T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-08T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-09T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-10T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-11T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-12T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-13T00:00:00Z'][.='2'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-14T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-15T00:00:00Z'][.='1'  ]"
comment|//
argument_list|,
name|meta
operator|+
literal|"/int[@name='before' ][.='1']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='after'  ][.='1']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='between'][.='8']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"checking counts for upper& edge"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
name|p
argument_list|,
name|f
argument_list|,
name|p
operator|+
literal|".start"
argument_list|,
literal|"1976-07-01T00:00:00.000Z"
argument_list|,
name|p
operator|+
literal|".end"
argument_list|,
literal|"1976-07-16T00:00:00.000Z"
argument_list|,
name|p
operator|+
literal|".gap"
argument_list|,
literal|"+1DAY"
argument_list|,
name|p
operator|+
literal|".other"
argument_list|,
literal|"all"
argument_list|,
name|p
operator|+
literal|".include"
argument_list|,
literal|"upper"
argument_list|,
name|p
operator|+
literal|".include"
argument_list|,
literal|"edge"
argument_list|)
comment|// 15 days + pre+post+inner = 18
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)="
operator|+
operator|(
name|rangeMode
condition|?
literal|15
else|:
literal|18
operator|)
operator|+
literal|"]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-01T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-02T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-03T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-04T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-05T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-06T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-07T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-08T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-09T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-10T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-11T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-12T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-13T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-14T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-15T00:00:00Z'][.='1'  ]"
comment|//
argument_list|,
name|meta
operator|+
literal|"/int[@name='before' ][.='1']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='after'  ][.='1']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='between'][.='8']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"checking counts for upper& outer"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
name|p
argument_list|,
name|f
argument_list|,
name|p
operator|+
literal|".start"
argument_list|,
literal|"1976-07-01T00:00:00.000Z"
argument_list|,
name|p
operator|+
literal|".end"
argument_list|,
literal|"1976-07-13T00:00:00.000Z"
comment|// smaller now
argument_list|,
name|p
operator|+
literal|".gap"
argument_list|,
literal|"+1DAY"
argument_list|,
name|p
operator|+
literal|".other"
argument_list|,
literal|"all"
argument_list|,
name|p
operator|+
literal|".include"
argument_list|,
literal|"upper"
argument_list|,
name|p
operator|+
literal|".include"
argument_list|,
literal|"outer"
argument_list|)
comment|// 12 days + pre+post+inner = 15
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)="
operator|+
operator|(
name|rangeMode
condition|?
literal|12
else|:
literal|15
operator|)
operator|+
literal|"]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-01T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-02T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-03T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-04T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-05T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-06T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-07T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-08T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-09T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-10T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-11T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-12T00:00:00Z'][.='1'  ]"
comment|//
argument_list|,
name|meta
operator|+
literal|"/int[@name='before' ][.='2']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='after'  ][.='4']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='between'][.='5']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"checking counts for lower& edge"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
name|p
argument_list|,
name|f
argument_list|,
name|p
operator|+
literal|".start"
argument_list|,
literal|"1976-07-01T00:00:00.000Z"
argument_list|,
name|p
operator|+
literal|".end"
argument_list|,
literal|"1976-07-13T00:00:00.000Z"
comment|// smaller now
argument_list|,
name|p
operator|+
literal|".gap"
argument_list|,
literal|"+1DAY"
argument_list|,
name|p
operator|+
literal|".other"
argument_list|,
literal|"all"
argument_list|,
name|p
operator|+
literal|".include"
argument_list|,
literal|"lower"
argument_list|,
name|p
operator|+
literal|".include"
argument_list|,
literal|"edge"
argument_list|)
comment|// 12 days + pre+post+inner = 15
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)="
operator|+
operator|(
name|rangeMode
condition|?
literal|12
else|:
literal|15
operator|)
operator|+
literal|"]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-01T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-02T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-03T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-04T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-05T00:00:00Z'][.='2'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-06T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-07T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-08T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-09T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-10T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-11T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-12T00:00:00Z'][.='1'  ]"
comment|//
argument_list|,
name|meta
operator|+
literal|"/int[@name='before' ][.='1']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='after'  ][.='3']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='between'][.='6']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"checking counts for lower& outer"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
name|p
argument_list|,
name|f
argument_list|,
name|p
operator|+
literal|".start"
argument_list|,
literal|"1976-07-01T00:00:00.000Z"
argument_list|,
name|p
operator|+
literal|".end"
argument_list|,
literal|"1976-07-13T00:00:00.000Z"
comment|// smaller now
argument_list|,
name|p
operator|+
literal|".gap"
argument_list|,
literal|"+1DAY"
argument_list|,
name|p
operator|+
literal|".other"
argument_list|,
literal|"all"
argument_list|,
name|p
operator|+
literal|".include"
argument_list|,
literal|"lower"
argument_list|,
name|p
operator|+
literal|".include"
argument_list|,
literal|"outer"
argument_list|)
comment|// 12 days + pre+post+inner = 15
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)="
operator|+
operator|(
name|rangeMode
condition|?
literal|12
else|:
literal|15
operator|)
operator|+
literal|"]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-01T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-02T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-03T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-04T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-05T00:00:00Z'][.='2'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-06T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-07T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-08T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-09T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-10T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-11T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-12T00:00:00Z'][.='0']"
comment|//
argument_list|,
name|meta
operator|+
literal|"/int[@name='before' ][.='2']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='after'  ][.='4']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='between'][.='5']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"checking counts for lower& edge& outer"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
name|p
argument_list|,
name|f
argument_list|,
name|p
operator|+
literal|".start"
argument_list|,
literal|"1976-07-01T00:00:00.000Z"
argument_list|,
name|p
operator|+
literal|".end"
argument_list|,
literal|"1976-07-13T00:00:00.000Z"
comment|// smaller now
argument_list|,
name|p
operator|+
literal|".gap"
argument_list|,
literal|"+1DAY"
argument_list|,
name|p
operator|+
literal|".other"
argument_list|,
literal|"all"
argument_list|,
name|p
operator|+
literal|".include"
argument_list|,
literal|"lower"
argument_list|,
name|p
operator|+
literal|".include"
argument_list|,
literal|"edge"
argument_list|,
name|p
operator|+
literal|".include"
argument_list|,
literal|"outer"
argument_list|)
comment|// 12 days + pre+post+inner = 15
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)="
operator|+
operator|(
name|rangeMode
condition|?
literal|12
else|:
literal|15
operator|)
operator|+
literal|"]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-01T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-02T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-03T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-04T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-05T00:00:00Z'][.='2'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-06T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-07T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-08T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-09T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-10T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-11T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-12T00:00:00Z'][.='1'  ]"
comment|//
argument_list|,
name|meta
operator|+
literal|"/int[@name='before' ][.='2']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='after'  ][.='4']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='between'][.='6']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"checking counts for all"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
name|p
argument_list|,
name|f
argument_list|,
name|p
operator|+
literal|".start"
argument_list|,
literal|"1976-07-01T00:00:00.000Z"
argument_list|,
name|p
operator|+
literal|".end"
argument_list|,
literal|"1976-07-13T00:00:00.000Z"
comment|// smaller now
argument_list|,
name|p
operator|+
literal|".gap"
argument_list|,
literal|"+1DAY"
argument_list|,
name|p
operator|+
literal|".other"
argument_list|,
literal|"all"
argument_list|,
name|p
operator|+
literal|".include"
argument_list|,
literal|"all"
argument_list|)
comment|// 12 days + pre+post+inner = 15
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)="
operator|+
operator|(
name|rangeMode
condition|?
literal|12
else|:
literal|15
operator|)
operator|+
literal|"]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-01T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-02T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-03T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-04T00:00:00Z'][.='2'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-05T00:00:00Z'][.='2'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-06T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-07T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-08T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-09T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-10T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-11T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-12T00:00:00Z'][.='1'  ]"
comment|//
argument_list|,
name|meta
operator|+
literal|"/int[@name='before' ][.='2']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='after'  ][.='4']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='between'][.='6']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDateFacetsWithTz
specifier|public
name|void
name|testDateFacetsWithTz
parameter_list|()
block|{
for|for
control|(
name|boolean
name|rangeType
range|:
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|false
block|}
control|)
block|{
name|helpTestDateFacetsWithTz
argument_list|(
literal|"a_tdt"
argument_list|,
name|rangeType
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|helpTestDateFacetsWithTz
specifier|private
name|void
name|helpTestDateFacetsWithTz
parameter_list|(
specifier|final
name|String
name|fieldName
parameter_list|,
specifier|final
name|boolean
name|rangeMode
parameter_list|)
block|{
specifier|final
name|String
name|p
init|=
name|rangeMode
condition|?
literal|"facet.range"
else|:
literal|"facet.date"
decl_stmt|;
specifier|final
name|String
name|b
init|=
name|rangeMode
condition|?
literal|"facet_ranges"
else|:
literal|"facet_dates"
decl_stmt|;
specifier|final
name|String
name|f
init|=
name|fieldName
decl_stmt|;
specifier|final
name|String
name|c
init|=
operator|(
name|rangeMode
condition|?
literal|"/lst[@name='counts']"
else|:
literal|""
operator|)
decl_stmt|;
specifier|final
name|String
name|pre
init|=
literal|"//lst[@name='"
operator|+
name|b
operator|+
literal|"']/lst[@name='"
operator|+
name|f
operator|+
literal|"']"
operator|+
name|c
decl_stmt|;
specifier|final
name|String
name|meta
init|=
name|pre
operator|+
operator|(
name|rangeMode
condition|?
literal|"/../"
else|:
literal|""
operator|)
decl_stmt|;
specifier|final
name|String
name|TZ
init|=
literal|"America/Los_Angeles"
decl_stmt|;
name|assumeTrue
argument_list|(
literal|"Test requires JVM to know about about TZ: "
operator|+
name|TZ
argument_list|,
name|TimeZoneUtils
operator|.
name|KNOWN_TIMEZONE_IDS
operator|.
name|contains
argument_list|(
name|TZ
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"checking facet counts for fixed now, using TZ: "
operator|+
name|TZ
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"NOW"
argument_list|,
literal|"205078333000"
comment|// 1976-07-01T14:12:13.000Z
argument_list|,
literal|"TZ"
argument_list|,
name|TZ
argument_list|,
name|p
argument_list|,
name|f
argument_list|,
name|p
operator|+
literal|".start"
argument_list|,
literal|"NOW/MONTH"
argument_list|,
name|p
operator|+
literal|".end"
argument_list|,
literal|"NOW/MONTH+15DAYS"
argument_list|,
name|p
operator|+
literal|".gap"
argument_list|,
literal|"+1DAY"
argument_list|,
name|p
operator|+
literal|".other"
argument_list|,
literal|"all"
argument_list|,
name|p
operator|+
literal|".include"
argument_list|,
literal|"lower"
argument_list|)
comment|// 15 days + pre+post+inner = 18
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)="
operator|+
operator|(
name|rangeMode
condition|?
literal|15
else|:
literal|18
operator|)
operator|+
literal|"]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-01T07:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-02T07:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-03T07:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-04T07:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-05T07:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-06T07:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-07T07:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-08T07:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-09T07:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-10T07:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-11T07:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-12T07:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-13T07:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-14T07:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-15T07:00:00Z'][.='1'  ]"
comment|//
argument_list|,
name|meta
operator|+
literal|"/int[@name='before' ][.='2']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='after'  ][.='1']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='between'][.='7']"
argument_list|)
expr_stmt|;
comment|// NOTE: the counts should all be zero, what we really care about
comment|// is that the computed lower bounds take into account DST change
name|assertQ
argument_list|(
literal|"checking facet counts arround DST change for TZ: "
operator|+
name|TZ
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"NOW"
argument_list|,
literal|"1288606136000"
comment|// 2010-11-01T10:08:56.235Z
argument_list|,
literal|"TZ"
argument_list|,
name|TZ
argument_list|,
name|p
argument_list|,
name|f
argument_list|,
name|p
operator|+
literal|".start"
argument_list|,
literal|"NOW/MONTH"
argument_list|,
name|p
operator|+
literal|".end"
argument_list|,
literal|"NOW/MONTH+15DAYS"
argument_list|,
name|p
operator|+
literal|".gap"
argument_list|,
literal|"+1DAY"
argument_list|,
name|p
operator|+
literal|".other"
argument_list|,
literal|"all"
argument_list|,
name|p
operator|+
literal|".include"
argument_list|,
literal|"lower"
argument_list|)
comment|// 15 days + pre+post+inner = 18
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)="
operator|+
operator|(
name|rangeMode
condition|?
literal|15
else|:
literal|18
operator|)
operator|+
literal|"]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='2010-11-01T07:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='2010-11-02T07:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='2010-11-03T07:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='2010-11-04T07:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='2010-11-05T07:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='2010-11-06T07:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='2010-11-07T07:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='2010-11-08T08:00:00Z'][.='0']"
comment|// BOOM!
argument_list|,
name|pre
operator|+
literal|"/int[@name='2010-11-09T08:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='2010-11-10T08:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='2010-11-11T08:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='2010-11-12T08:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='2010-11-13T08:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='2010-11-14T08:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='2010-11-15T08:00:00Z'][.='0']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNumericRangeFacetsTrieFloat
specifier|public
name|void
name|testNumericRangeFacetsTrieFloat
parameter_list|()
block|{
name|helpTestFractionalNumberRangeFacets
argument_list|(
literal|"range_facet_f"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNumericRangeFacetsTrieDouble
specifier|public
name|void
name|testNumericRangeFacetsTrieDouble
parameter_list|()
block|{
name|helpTestFractionalNumberRangeFacets
argument_list|(
literal|"range_facet_d"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNumericRangeFacetsTrieFloatDocValues
specifier|public
name|void
name|testNumericRangeFacetsTrieFloatDocValues
parameter_list|()
block|{
name|helpTestFractionalNumberRangeFacets
argument_list|(
literal|"range_facet_f"
argument_list|,
name|FacetRangeMethod
operator|.
name|DV
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNumericRangeFacetsTrieDoubleDocValues
specifier|public
name|void
name|testNumericRangeFacetsTrieDoubleDocValues
parameter_list|()
block|{
name|helpTestFractionalNumberRangeFacets
argument_list|(
literal|"range_facet_d"
argument_list|,
name|FacetRangeMethod
operator|.
name|DV
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNumericRangeFacetsOverflowTrieDouble
specifier|public
name|void
name|testNumericRangeFacetsOverflowTrieDouble
parameter_list|()
block|{
name|helpTestNumericRangeFacetsDoubleOverflow
argument_list|(
literal|"range_facet_d"
argument_list|,
name|FacetRangeMethod
operator|.
name|FILTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNumericRangeFacetsOverflowTrieDoubleDocValue
specifier|public
name|void
name|testNumericRangeFacetsOverflowTrieDoubleDocValue
parameter_list|()
block|{
name|helpTestNumericRangeFacetsDoubleOverflow
argument_list|(
literal|"range_facet_d"
argument_list|,
name|FacetRangeMethod
operator|.
name|DV
argument_list|)
expr_stmt|;
block|}
DECL|method|helpTestNumericRangeFacetsDoubleOverflow
specifier|private
name|void
name|helpTestNumericRangeFacetsDoubleOverflow
parameter_list|(
specifier|final
name|String
name|fieldName
parameter_list|,
specifier|final
name|FacetRangeMethod
name|method
parameter_list|)
block|{
specifier|final
name|String
name|f
init|=
name|fieldName
decl_stmt|;
specifier|final
name|String
name|pre
init|=
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|f
operator|+
literal|"']/lst[@name='counts']"
decl_stmt|;
specifier|final
name|String
name|meta
init|=
name|pre
operator|+
literal|"/../"
decl_stmt|;
name|String
name|start
init|=
literal|"0.0"
decl_stmt|;
name|String
name|gap
init|=
operator|(
operator|new
name|Double
argument_list|(
operator|(
name|double
operator|)
name|Float
operator|.
name|MAX_VALUE
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|end
init|=
operator|(
operator|new
name|Double
argument_list|(
operator|(
operator|(
name|double
operator|)
name|Float
operator|.
name|MAX_VALUE
operator|)
operator|*
literal|3D
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|mid
init|=
operator|(
operator|new
name|Double
argument_list|(
operator|(
operator|(
name|double
operator|)
name|Float
operator|.
name|MAX_VALUE
operator|)
operator|*
literal|2D
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertQ
argument_list|(
name|f
operator|+
literal|": checking counts for lower"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[30 TO 60]"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|f
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
name|start
argument_list|,
literal|"facet.range.end"
argument_list|,
name|end
argument_list|,
literal|"facet.range.gap"
argument_list|,
name|gap
argument_list|,
literal|"facet.range.other"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.range.include"
argument_list|,
literal|"lower"
argument_list|)
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)=3]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='"
operator|+
name|start
operator|+
literal|"'][.='6'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='"
operator|+
name|mid
operator|+
literal|"'][.='0'  ]"
comment|//
argument_list|,
name|meta
operator|+
literal|"/double[@name='end' ][.='"
operator|+
name|end
operator|+
literal|"']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='before' ][.='0']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='after'  ][.='0']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='between'][.='6']"
argument_list|)
expr_stmt|;
block|}
DECL|method|helpTestFractionalNumberRangeFacets
specifier|private
name|void
name|helpTestFractionalNumberRangeFacets
parameter_list|(
specifier|final
name|String
name|fieldName
parameter_list|)
block|{
name|helpTestFractionalNumberRangeFacets
argument_list|(
name|fieldName
argument_list|,
name|FacetRangeMethod
operator|.
name|FILTER
argument_list|)
expr_stmt|;
block|}
DECL|method|helpTestFractionalNumberRangeFacets
specifier|private
name|void
name|helpTestFractionalNumberRangeFacets
parameter_list|(
specifier|final
name|String
name|fieldName
parameter_list|,
name|FacetRangeMethod
name|method
parameter_list|)
block|{
specifier|final
name|String
name|f
init|=
name|fieldName
decl_stmt|;
specifier|final
name|String
name|pre
init|=
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|f
operator|+
literal|"']/lst[@name='counts']"
decl_stmt|;
specifier|final
name|String
name|meta
init|=
name|pre
operator|+
literal|"/../"
decl_stmt|;
name|assertQ
argument_list|(
name|f
operator|+
literal|": checking counts for lower"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|f
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"50"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.other"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.range.include"
argument_list|,
literal|"lower"
argument_list|)
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)=4]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='10.0'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='20.0'][.='3'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='30.0'][.='2'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='40.0'][.='0'  ]"
comment|//
argument_list|,
name|meta
operator|+
literal|"/int[@name='before' ][.='0']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='after'  ][.='0']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='between'][.='6']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|f
operator|+
literal|":checking counts for upper"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|f
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"50"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.other"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.range.include"
argument_list|,
literal|"upper"
argument_list|)
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)=4]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='10.0'][.='2'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='20.0'][.='3'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='30.0'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='40.0'][.='0'  ]"
comment|//
argument_list|,
name|meta
operator|+
literal|"/int[@name='before' ][.='0']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='after'  ][.='0']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='between'][.='6']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|f
operator|+
literal|":checking counts for lower& upper"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|f
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"50"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.other"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.range.include"
argument_list|,
literal|"upper"
argument_list|,
literal|"facet.range.include"
argument_list|,
literal|"lower"
argument_list|)
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)=4]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='10.0'][.='2'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='20.0'][.='4'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='30.0'][.='2'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='40.0'][.='0'  ]"
comment|//
argument_list|,
name|meta
operator|+
literal|"/int[@name='before' ][.='0']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='after'  ][.='0']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='between'][.='6']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|f
operator|+
literal|": checking counts for upper& edge"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|f
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"20"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"50"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.other"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.range.include"
argument_list|,
literal|"upper"
argument_list|,
literal|"facet.range.include"
argument_list|,
literal|"edge"
argument_list|)
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)=3]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='20.0'][.='4'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='30.0'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='40.0'][.='0'  ]"
comment|//
argument_list|,
name|meta
operator|+
literal|"/int[@name='before' ][.='1']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='after'  ][.='0']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='between'][.='5']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|f
operator|+
literal|": checking counts for upper& outer"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|f
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"30"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.other"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.range.include"
argument_list|,
literal|"upper"
argument_list|,
literal|"facet.range.include"
argument_list|,
literal|"outer"
argument_list|)
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)=2]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='10.0'][.='2'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='20.0'][.='3'  ]"
comment|//
argument_list|,
name|meta
operator|+
literal|"/int[@name='before' ][.='0']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='after'  ][.='2']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='between'][.='5']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|f
operator|+
literal|": checking counts for lower& edge"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|f
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"30"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.other"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.range.include"
argument_list|,
literal|"lower"
argument_list|,
literal|"facet.range.include"
argument_list|,
literal|"edge"
argument_list|)
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)=2]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='10.0'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='20.0'][.='4'  ]"
comment|//
argument_list|,
name|meta
operator|+
literal|"/int[@name='before' ][.='0']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='after'  ][.='1']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='between'][.='5']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|f
operator|+
literal|": checking counts for lower& outer"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|f
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"20"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"40"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.other"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.range.include"
argument_list|,
literal|"lower"
argument_list|,
literal|"facet.range.include"
argument_list|,
literal|"outer"
argument_list|)
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)=2]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='20.0'][.='3'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='30.0'][.='2'  ]"
comment|//
argument_list|,
name|meta
operator|+
literal|"/int[@name='before' ][.='2']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='after'  ][.='0']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='between'][.='5']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|f
operator|+
literal|": checking counts for lower& edge& outer"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|f
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"20"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"35.3"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.other"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.range.hardend"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range.include"
argument_list|,
literal|"lower"
argument_list|,
literal|"facet.range.include"
argument_list|,
literal|"edge"
argument_list|,
literal|"facet.range.include"
argument_list|,
literal|"outer"
argument_list|)
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)=2]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='20.0'][.='3'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='30.0'][.='2'  ]"
comment|//
argument_list|,
name|meta
operator|+
literal|"/int[@name='before' ][.='2']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='after'  ][.='1']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='between'][.='5']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|f
operator|+
literal|": checking counts for include all"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|f
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"20"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"35.3"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.other"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.range.hardend"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range.include"
argument_list|,
literal|"all"
argument_list|)
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)=2]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='20.0'][.='4'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='30.0'][.='2'  ]"
comment|//
argument_list|,
name|meta
operator|+
literal|"/int[@name='before' ][.='2']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='after'  ][.='1']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='between'][.='5']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNumericRangeFacetsTrieInt
specifier|public
name|void
name|testNumericRangeFacetsTrieInt
parameter_list|()
block|{
name|helpTestWholeNumberRangeFacets
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNumericRangeFacetsTrieLong
specifier|public
name|void
name|testNumericRangeFacetsTrieLong
parameter_list|()
block|{
name|helpTestWholeNumberRangeFacets
argument_list|(
literal|"range_facet_l"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNumericRangeFacetsTrieIntDocValues
specifier|public
name|void
name|testNumericRangeFacetsTrieIntDocValues
parameter_list|()
block|{
name|helpTestWholeNumberRangeFacets
argument_list|(
literal|"id"
argument_list|,
name|FacetRangeMethod
operator|.
name|DV
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNumericRangeFacetsTrieLongDocValues
specifier|public
name|void
name|testNumericRangeFacetsTrieLongDocValues
parameter_list|()
block|{
name|helpTestWholeNumberRangeFacets
argument_list|(
literal|"range_facet_l"
argument_list|,
name|FacetRangeMethod
operator|.
name|DV
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNumericRangeFacetsOverflowTrieLong
specifier|public
name|void
name|testNumericRangeFacetsOverflowTrieLong
parameter_list|()
block|{
name|helpTestNumericRangeFacetsLongOverflow
argument_list|(
literal|"range_facet_l"
argument_list|,
name|FacetRangeMethod
operator|.
name|FILTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNumericRangeFacetsOverflowTrieLongDocValues
specifier|public
name|void
name|testNumericRangeFacetsOverflowTrieLongDocValues
parameter_list|()
block|{
name|helpTestNumericRangeFacetsLongOverflow
argument_list|(
literal|"range_facet_l"
argument_list|,
name|FacetRangeMethod
operator|.
name|DV
argument_list|)
expr_stmt|;
block|}
DECL|method|helpTestNumericRangeFacetsLongOverflow
specifier|private
name|void
name|helpTestNumericRangeFacetsLongOverflow
parameter_list|(
specifier|final
name|String
name|fieldName
parameter_list|,
specifier|final
name|FacetRangeMethod
name|method
parameter_list|)
block|{
specifier|final
name|String
name|f
init|=
name|fieldName
decl_stmt|;
specifier|final
name|String
name|pre
init|=
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|f
operator|+
literal|"']/lst[@name='counts']"
decl_stmt|;
specifier|final
name|String
name|meta
init|=
name|pre
operator|+
literal|"/../"
decl_stmt|;
name|String
name|start
init|=
literal|"0"
decl_stmt|;
name|String
name|gap
init|=
operator|(
operator|new
name|Long
argument_list|(
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|end
init|=
operator|(
operator|new
name|Long
argument_list|(
operator|(
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
operator|)
operator|*
literal|3L
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|mid
init|=
operator|(
operator|new
name|Long
argument_list|(
operator|(
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
operator|)
operator|*
literal|2L
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertQ
argument_list|(
name|f
operator|+
literal|": checking counts for lower"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[30 TO 60]"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|f
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
name|start
argument_list|,
literal|"facet.range.end"
argument_list|,
name|end
argument_list|,
literal|"facet.range.gap"
argument_list|,
name|gap
argument_list|,
literal|"facet.range.other"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.range.include"
argument_list|,
literal|"lower"
argument_list|)
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)=3]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='"
operator|+
name|start
operator|+
literal|"'][.='6'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='"
operator|+
name|mid
operator|+
literal|"'][.='0'  ]"
comment|//
argument_list|,
name|meta
operator|+
literal|"/long[@name='end'   ][.='"
operator|+
name|end
operator|+
literal|"']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='before' ][.='0']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='after'  ][.='0']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='between'][.='6']"
argument_list|)
expr_stmt|;
block|}
DECL|method|helpTestWholeNumberRangeFacets
specifier|private
name|void
name|helpTestWholeNumberRangeFacets
parameter_list|(
specifier|final
name|String
name|fieldName
parameter_list|)
block|{
name|helpTestWholeNumberRangeFacets
argument_list|(
name|fieldName
argument_list|,
name|FacetRangeMethod
operator|.
name|FILTER
argument_list|)
expr_stmt|;
block|}
DECL|method|helpTestWholeNumberRangeFacets
specifier|private
name|void
name|helpTestWholeNumberRangeFacets
parameter_list|(
specifier|final
name|String
name|fieldName
parameter_list|,
name|FacetRangeMethod
name|method
parameter_list|)
block|{
comment|// the float test covers a lot of the weird edge cases
comment|// here we just need some basic sanity checking of the parsing
specifier|final
name|String
name|f
init|=
name|fieldName
decl_stmt|;
specifier|final
name|String
name|pre
init|=
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|f
operator|+
literal|"']/lst[@name='counts']"
decl_stmt|;
specifier|final
name|String
name|meta
init|=
name|pre
operator|+
literal|"/../"
decl_stmt|;
name|assertQ
argument_list|(
name|f
operator|+
literal|": checking counts for lower"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[30 TO 60]"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|f
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"35"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"50"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"5"
argument_list|,
literal|"facet.range.other"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.range.include"
argument_list|,
literal|"lower"
argument_list|)
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)=3]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='35'][.='0'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='40'][.='3'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='45'][.='3'  ]"
comment|//
argument_list|,
name|meta
operator|+
literal|"/int[@name='before' ][.='0']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='after'  ][.='0']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='between'][.='6']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|f
operator|+
literal|":checking counts for upper"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[30 TO 60]"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|f
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"35"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"50"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"5"
argument_list|,
literal|"facet.range.other"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.range.include"
argument_list|,
literal|"upper"
argument_list|)
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)=3]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='35'][.='0'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='40'][.='4'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='45'][.='2'  ]"
comment|//
argument_list|,
name|meta
operator|+
literal|"/int[@name='before' ][.='0']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='after'  ][.='0']"
argument_list|,
name|meta
operator|+
literal|"/int[@name='between'][.='6']"
argument_list|)
expr_stmt|;
block|}
DECL|method|indexFacetSingleValued
specifier|static
name|void
name|indexFacetSingleValued
parameter_list|()
block|{
name|indexFacets
argument_list|(
literal|"40"
argument_list|,
literal|"t_s1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFacetSingleValued
specifier|public
name|void
name|testFacetSingleValued
parameter_list|()
block|{
name|doFacets
argument_list|(
literal|"t_s1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFacetSingleValuedFcs
specifier|public
name|void
name|testFacetSingleValuedFcs
parameter_list|()
block|{
name|doFacets
argument_list|(
literal|"t_s1"
argument_list|,
literal|"facet.method"
argument_list|,
literal|"fcs"
argument_list|)
expr_stmt|;
block|}
DECL|method|indexFacets
specifier|static
name|void
name|indexFacets
parameter_list|(
name|String
name|idPrefix
parameter_list|,
name|String
name|f
parameter_list|)
block|{
name|add_doc
argument_list|(
literal|"id"
argument_list|,
name|idPrefix
operator|+
literal|"1"
argument_list|,
name|f
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
name|idPrefix
operator|+
literal|"2"
argument_list|,
name|f
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
name|idPrefix
operator|+
literal|"3"
argument_list|,
name|f
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
name|idPrefix
operator|+
literal|"4"
argument_list|,
name|f
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
name|idPrefix
operator|+
literal|"5"
argument_list|,
name|f
argument_list|,
literal|"D"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
name|idPrefix
operator|+
literal|"6"
argument_list|,
name|f
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
name|idPrefix
operator|+
literal|"7"
argument_list|,
name|f
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
name|idPrefix
operator|+
literal|"8"
argument_list|,
name|f
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
name|idPrefix
operator|+
literal|"9"
argument_list|,
name|f
argument_list|,
literal|"F"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
name|idPrefix
operator|+
literal|"10"
argument_list|,
name|f
argument_list|,
literal|"G"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
name|idPrefix
operator|+
literal|"11"
argument_list|,
name|f
argument_list|,
literal|"G"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
name|idPrefix
operator|+
literal|"12"
argument_list|,
name|f
argument_list|,
literal|"G"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
name|idPrefix
operator|+
literal|"13"
argument_list|,
name|f
argument_list|,
literal|"G"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
name|idPrefix
operator|+
literal|"14"
argument_list|,
name|f
argument_list|,
literal|"G"
argument_list|)
expr_stmt|;
block|}
DECL|method|doFacets
specifier|public
name|void
name|doFacets
parameter_list|(
name|String
name|f
parameter_list|,
name|String
modifier|...
name|params
parameter_list|)
block|{
name|String
name|pre
init|=
literal|"//lst[@name='"
operator|+
name|f
operator|+
literal|"']"
decl_stmt|;
name|String
name|notc
init|=
literal|"id:[* TO *] -"
operator|+
name|f
operator|+
literal|":C"
decl_stmt|;
name|assertQ
argument_list|(
literal|"check counts for unlimited facet"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=7]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='G'][.='5']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='E'][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='C'][.='2']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='A'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='B'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='D'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='F'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check counts for facet with generous limit"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=7]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='G'][.='5']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='E'][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[3][@name='C'][.='2']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='A'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='B'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='D'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='F'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check counts for limited facet"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=2]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='G'][.='5']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='E'][.='3']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check offset"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=1]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='E'][.='3']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test sorted facet paging with zero (don't count in limit)"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"fq"
argument_list|,
name|notc
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"6"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=6]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='G'][.='5']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='E'][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[3][@name='A'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[4][@name='B'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[5][@name='D'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[6][@name='F'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test sorted facet paging with zero (test offset correctness)"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"fq"
argument_list|,
name|notc
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"3"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=2]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='B'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='D'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet unsorted paging"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"fq"
argument_list|,
name|notc
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"6"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=6]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='A'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='B'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[3][@name='D'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[4][@name='E'][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[5][@name='F'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[6][@name='G'][.='5']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet unsorted paging"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"fq"
argument_list|,
name|notc
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"3"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=2]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='E'][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='F'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet unsorted paging, mincount=2"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"fq"
argument_list|,
name|notc
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=1]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='G'][.='5']"
argument_list|)
expr_stmt|;
block|}
DECL|method|indexFacetPrefixMultiValued
specifier|static
name|void
name|indexFacetPrefixMultiValued
parameter_list|()
block|{
name|indexFacetPrefix
argument_list|(
literal|"50"
argument_list|,
literal|"t_s"
argument_list|,
literal|""
argument_list|,
literal|"ignore_s"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFacetPrefixMultiValued
specifier|public
name|void
name|testFacetPrefixMultiValued
parameter_list|()
block|{
name|doFacetPrefix
argument_list|(
literal|"t_s"
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|,
literal|"facet.method"
argument_list|,
literal|"enum"
argument_list|)
expr_stmt|;
name|doFacetPrefix
argument_list|(
literal|"t_s"
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|,
literal|"facet.method"
argument_list|,
literal|"enum"
argument_list|,
literal|"facet.enum.cache.minDf"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|doFacetPrefix
argument_list|(
literal|"t_s"
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|,
literal|"facet.method"
argument_list|,
literal|"enum"
argument_list|,
literal|"facet.enum.cache.minDf"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|doFacetPrefix
argument_list|(
literal|"t_s"
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|,
literal|"facet.method"
argument_list|,
literal|"fc"
argument_list|)
expr_stmt|;
block|}
DECL|method|indexFacetPrefixSingleValued
specifier|static
name|void
name|indexFacetPrefixSingleValued
parameter_list|()
block|{
name|indexFacetPrefix
argument_list|(
literal|"60"
argument_list|,
literal|"tt_s1"
argument_list|,
literal|""
argument_list|,
literal|"ignore_s"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFacetPrefixSingleValued
specifier|public
name|void
name|testFacetPrefixSingleValued
parameter_list|()
block|{
name|doFacetPrefix
argument_list|(
literal|"tt_s1"
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFacetPrefixSingleValuedFcs
specifier|public
name|void
name|testFacetPrefixSingleValuedFcs
parameter_list|()
block|{
name|doFacetPrefix
argument_list|(
literal|"tt_s1"
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|,
literal|"facet.method"
argument_list|,
literal|"fcs"
argument_list|)
expr_stmt|;
name|doFacetPrefix
argument_list|(
literal|"tt_s1"
argument_list|,
literal|"{!threads=0}"
argument_list|,
literal|""
argument_list|,
literal|"facet.method"
argument_list|,
literal|"fcs"
argument_list|)
expr_stmt|;
comment|// direct execution
name|doFacetPrefix
argument_list|(
literal|"tt_s1"
argument_list|,
literal|"{!threads=-1}"
argument_list|,
literal|""
argument_list|,
literal|"facet.method"
argument_list|,
literal|"fcs"
argument_list|)
expr_stmt|;
comment|// default / unlimited threads
name|doFacetPrefix
argument_list|(
literal|"tt_s1"
argument_list|,
literal|"{!threads=2}"
argument_list|,
literal|""
argument_list|,
literal|"facet.method"
argument_list|,
literal|"fcs"
argument_list|)
expr_stmt|;
comment|// specific number of threads
block|}
DECL|method|indexFacetContains
specifier|static
name|void
name|indexFacetContains
parameter_list|()
block|{
name|indexFacetPrefix
argument_list|(
literal|"70"
argument_list|,
literal|"contains_s1"
argument_list|,
literal|""
argument_list|,
literal|"contains_group_s1"
argument_list|)
expr_stmt|;
name|indexFacetPrefix
argument_list|(
literal|"80"
argument_list|,
literal|"contains_s1"
argument_list|,
literal|"Astra"
argument_list|,
literal|"contains_group_s1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFacetContains
specifier|public
name|void
name|testFacetContains
parameter_list|()
block|{
name|doFacetContains
argument_list|(
literal|"contains_s1"
argument_list|,
literal|"contains_group_s1"
argument_list|,
literal|"Astra"
argument_list|,
literal|"BAst"
argument_list|,
literal|"Ast"
argument_list|,
literal|"facet.method"
argument_list|,
literal|"enum"
argument_list|)
expr_stmt|;
name|doFacetContains
argument_list|(
literal|"contains_s1"
argument_list|,
literal|"contains_group_s1"
argument_list|,
literal|"Astra"
argument_list|,
literal|"BAst"
argument_list|,
literal|"Ast"
argument_list|,
literal|"facet.method"
argument_list|,
literal|"fcs"
argument_list|)
expr_stmt|;
name|doFacetContains
argument_list|(
literal|"contains_s1"
argument_list|,
literal|"contains_group_s1"
argument_list|,
literal|"Astra"
argument_list|,
literal|"BAst"
argument_list|,
literal|"Ast"
argument_list|,
literal|"facet.method"
argument_list|,
literal|"fc"
argument_list|)
expr_stmt|;
name|doFacetContains
argument_list|(
literal|"contains_s1"
argument_list|,
literal|"contains_group_s1"
argument_list|,
literal|"Astra"
argument_list|,
literal|"bAst"
argument_list|,
literal|"ast"
argument_list|,
literal|"facet.method"
argument_list|,
literal|"enum"
argument_list|,
literal|"facet.contains.ignoreCase"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|doFacetContains
argument_list|(
literal|"contains_s1"
argument_list|,
literal|"contains_group_s1"
argument_list|,
literal|"Astra"
argument_list|,
literal|"baSt"
argument_list|,
literal|"ast"
argument_list|,
literal|"facet.method"
argument_list|,
literal|"fcs"
argument_list|,
literal|"facet.contains.ignoreCase"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|doFacetContains
argument_list|(
literal|"contains_s1"
argument_list|,
literal|"contains_group_s1"
argument_list|,
literal|"Astra"
argument_list|,
literal|"basT"
argument_list|,
literal|"ast"
argument_list|,
literal|"facet.method"
argument_list|,
literal|"fc"
argument_list|,
literal|"facet.contains.ignoreCase"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|doFacetPrefix
argument_list|(
literal|"contains_s1"
argument_list|,
literal|null
argument_list|,
literal|"Astra"
argument_list|,
literal|"facet.method"
argument_list|,
literal|"enum"
argument_list|,
literal|"facet.contains"
argument_list|,
literal|"Ast"
argument_list|)
expr_stmt|;
name|doFacetPrefix
argument_list|(
literal|"contains_s1"
argument_list|,
literal|null
argument_list|,
literal|"Astra"
argument_list|,
literal|"facet.method"
argument_list|,
literal|"fcs"
argument_list|,
literal|"facet.contains"
argument_list|,
literal|"Ast"
argument_list|)
expr_stmt|;
name|doFacetPrefix
argument_list|(
literal|"contains_s1"
argument_list|,
literal|null
argument_list|,
literal|"Astra"
argument_list|,
literal|"facet.method"
argument_list|,
literal|"fc"
argument_list|,
literal|"facet.contains"
argument_list|,
literal|"Ast"
argument_list|)
expr_stmt|;
name|doFacetPrefix
argument_list|(
literal|"contains_s1"
argument_list|,
literal|null
argument_list|,
literal|"Astra"
argument_list|,
literal|"facet.method"
argument_list|,
literal|"enum"
argument_list|,
literal|"facet.contains"
argument_list|,
literal|"aSt"
argument_list|,
literal|"facet.contains.ignoreCase"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|doFacetPrefix
argument_list|(
literal|"contains_s1"
argument_list|,
literal|null
argument_list|,
literal|"Astra"
argument_list|,
literal|"facet.method"
argument_list|,
literal|"fcs"
argument_list|,
literal|"facet.contains"
argument_list|,
literal|"asT"
argument_list|,
literal|"facet.contains.ignoreCase"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|doFacetPrefix
argument_list|(
literal|"contains_s1"
argument_list|,
literal|null
argument_list|,
literal|"Astra"
argument_list|,
literal|"facet.method"
argument_list|,
literal|"fc"
argument_list|,
literal|"facet.contains"
argument_list|,
literal|"aST"
argument_list|,
literal|"facet.contains.ignoreCase"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
DECL|method|indexFacetPrefix
specifier|static
name|void
name|indexFacetPrefix
parameter_list|(
name|String
name|idPrefix
parameter_list|,
name|String
name|f
parameter_list|,
name|String
name|termSuffix
parameter_list|,
name|String
name|g
parameter_list|)
block|{
name|add_doc
argument_list|(
literal|"id"
argument_list|,
name|idPrefix
operator|+
literal|"1"
argument_list|,
name|f
argument_list|,
literal|"AAA"
operator|+
name|termSuffix
argument_list|,
name|g
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
name|idPrefix
operator|+
literal|"2"
argument_list|,
name|f
argument_list|,
literal|"B"
operator|+
name|termSuffix
argument_list|,
name|g
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
name|idPrefix
operator|+
literal|"3"
argument_list|,
name|f
argument_list|,
literal|"BB"
operator|+
name|termSuffix
argument_list|,
name|g
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
name|idPrefix
operator|+
literal|"4"
argument_list|,
name|f
argument_list|,
literal|"BB"
operator|+
name|termSuffix
argument_list|,
name|g
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
name|idPrefix
operator|+
literal|"5"
argument_list|,
name|f
argument_list|,
literal|"BBB"
operator|+
name|termSuffix
argument_list|,
name|g
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
name|idPrefix
operator|+
literal|"6"
argument_list|,
name|f
argument_list|,
literal|"BBB"
operator|+
name|termSuffix
argument_list|,
name|g
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
name|idPrefix
operator|+
literal|"7"
argument_list|,
name|f
argument_list|,
literal|"BBB"
operator|+
name|termSuffix
argument_list|,
name|g
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
name|idPrefix
operator|+
literal|"8"
argument_list|,
name|f
argument_list|,
literal|"CC"
operator|+
name|termSuffix
argument_list|,
name|g
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
name|idPrefix
operator|+
literal|"9"
argument_list|,
name|f
argument_list|,
literal|"CC"
operator|+
name|termSuffix
argument_list|,
name|g
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
name|idPrefix
operator|+
literal|"10"
argument_list|,
name|f
argument_list|,
literal|"CCC"
operator|+
name|termSuffix
argument_list|,
name|g
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
name|idPrefix
operator|+
literal|"11"
argument_list|,
name|f
argument_list|,
literal|"CCC"
operator|+
name|termSuffix
argument_list|,
name|g
argument_list|,
literal|"D"
argument_list|)
expr_stmt|;
name|add_doc
argument_list|(
literal|"id"
argument_list|,
name|idPrefix
operator|+
literal|"12"
argument_list|,
name|f
argument_list|,
literal|"CCC"
operator|+
name|termSuffix
argument_list|,
name|g
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|doFacetPrefix
specifier|public
name|void
name|doFacetPrefix
parameter_list|(
name|String
name|f
parameter_list|,
name|String
name|local
parameter_list|,
name|String
name|termSuffix
parameter_list|,
name|String
modifier|...
name|params
parameter_list|)
block|{
name|String
name|indent
init|=
literal|"on"
decl_stmt|;
name|String
name|pre
init|=
literal|"//lst[@name='"
operator|+
name|f
operator|+
literal|"']"
decl_stmt|;
name|String
name|lf
init|=
name|local
operator|==
literal|null
condition|?
name|f
else|:
name|local
operator|+
name|f
decl_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix middle, exact match first term"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|lf
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"B"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=3]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='BBB"
operator|+
name|termSuffix
operator|+
literal|"'][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='BB"
operator|+
name|termSuffix
operator|+
literal|"'][.='2']"
argument_list|,
name|pre
operator|+
literal|"/int[3][@name='B"
operator|+
name|termSuffix
operator|+
literal|"'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix middle, exact match first term, unsorted"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|lf
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"B"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=3]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='B"
operator|+
name|termSuffix
operator|+
literal|"'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='BB"
operator|+
name|termSuffix
operator|+
literal|"'][.='2']"
argument_list|,
name|pre
operator|+
literal|"/int[3][@name='BBB"
operator|+
name|termSuffix
operator|+
literal|"'][.='3']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix middle, paging"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|lf
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"B"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=2]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='BB"
operator|+
name|termSuffix
operator|+
literal|"'][.='2']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='B"
operator|+
name|termSuffix
operator|+
literal|"'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix middle, paging"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|lf
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"B"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=1]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='BB"
operator|+
name|termSuffix
operator|+
literal|"'][.='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix middle, paging"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|lf
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"B"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=1]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='BB"
operator|+
name|termSuffix
operator|+
literal|"'][.='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix end, not exact match"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|lf
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"C"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=2]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='CCC"
operator|+
name|termSuffix
operator|+
literal|"'][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='CC"
operator|+
name|termSuffix
operator|+
literal|"'][.='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix end, exact match"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|lf
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"CC"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=2]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='CCC"
operator|+
name|termSuffix
operator|+
literal|"'][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='CC"
operator|+
name|termSuffix
operator|+
literal|"'][.='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix past end"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|lf
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"X"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix past end"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|lf
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"-1"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"X"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix at start, exact match"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|lf
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"AAA"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=1]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='AAA"
operator|+
name|termSuffix
operator|+
literal|"'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix at Start, not exact match"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|lf
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"AA"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=1]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='AAA"
operator|+
name|termSuffix
operator|+
literal|"'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix at Start, not exact match"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|lf
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"AA"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=1]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='AAA"
operator|+
name|termSuffix
operator|+
literal|"'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix before start"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|lf
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"999"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix before start"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|lf
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"999"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=0]"
argument_list|)
expr_stmt|;
comment|// test offset beyond what is collected internally in queue
name|assertQ
argument_list|(
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|lf
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"3"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"5"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"CC"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=0]"
argument_list|)
expr_stmt|;
block|}
DECL|method|doFacetContains
specifier|public
name|void
name|doFacetContains
parameter_list|(
name|String
name|f
parameter_list|,
name|String
name|g
parameter_list|,
name|String
name|termSuffix
parameter_list|,
name|String
name|contains
parameter_list|,
name|String
name|groupContains
parameter_list|,
name|String
modifier|...
name|params
parameter_list|)
block|{
name|String
name|indent
init|=
literal|"on"
decl_stmt|;
name|String
name|pre
init|=
literal|"//lst[@name='"
operator|+
name|f
operator|+
literal|"']"
decl_stmt|;
name|assertQ
argument_list|(
literal|"test facet.contains"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.contains"
argument_list|,
name|contains
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=3]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='BBB"
operator|+
name|termSuffix
operator|+
literal|"'][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='BB"
operator|+
name|termSuffix
operator|+
literal|"'][.='2']"
argument_list|,
name|pre
operator|+
literal|"/int[3][@name='B"
operator|+
name|termSuffix
operator|+
literal|"'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.contains for grouped facets"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.contains"
argument_list|,
name|groupContains
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|g
argument_list|,
literal|"group.facet"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=6]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='CCC"
operator|+
name|termSuffix
operator|+
literal|"'][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='BBB"
operator|+
name|termSuffix
operator|+
literal|"'][.='2']"
argument_list|,
name|pre
operator|+
literal|"/int[3][@name='AAA"
operator|+
name|termSuffix
operator|+
literal|"'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[4][@name='B"
operator|+
name|termSuffix
operator|+
literal|"'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[5][@name='BB"
operator|+
name|termSuffix
operator|+
literal|"'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[6][@name='CC"
operator|+
name|termSuffix
operator|+
literal|"'][.='1']"
argument_list|)
expr_stmt|;
block|}
comment|/**     * kind of an absurd test because if there is an infinite loop, it     * would never finish -- but at least it ensures that<i>if</i> one of     * these requests return, they return an error     */
DECL|method|testRangeFacetInfiniteLoopDetection
specifier|public
name|void
name|testRangeFacetInfiniteLoopDetection
parameter_list|()
block|{
for|for
control|(
name|String
name|field
range|:
operator|new
name|String
index|[]
block|{
literal|"foo_f"
block|,
literal|"foo_d"
block|,
literal|"foo_i"
block|}
control|)
block|{
name|assertQEx
argument_list|(
literal|"no zero gap error: "
operator|+
name|field
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|field
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"23"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"100"
argument_list|)
argument_list|,
literal|400
argument_list|)
expr_stmt|;
block|}
name|String
name|field
init|=
literal|"foo_dt"
decl_stmt|;
for|for
control|(
name|String
name|type
range|:
operator|new
name|String
index|[]
block|{
literal|"date"
block|,
literal|"range"
block|}
control|)
block|{
name|assertQEx
argument_list|(
literal|"no zero gap error for facet."
operator|+
name|type
operator|+
literal|": "
operator|+
name|field
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet."
operator|+
name|type
argument_list|,
name|field
argument_list|,
literal|"facet."
operator|+
name|type
operator|+
literal|".start"
argument_list|,
literal|"NOW"
argument_list|,
literal|"facet."
operator|+
name|type
operator|+
literal|".gap"
argument_list|,
literal|"+0DAYS"
argument_list|,
literal|"facet."
operator|+
name|type
operator|+
literal|".end"
argument_list|,
literal|"NOW+10DAY"
argument_list|)
argument_list|,
literal|400
argument_list|)
expr_stmt|;
block|}
name|field
operator|=
literal|"foo_f"
expr_stmt|;
name|assertQEx
argument_list|(
literal|"no float underflow error: "
operator|+
name|field
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|field
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"100000000000"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"100000086200"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2160"
argument_list|)
argument_list|,
literal|400
argument_list|)
expr_stmt|;
name|field
operator|=
literal|"foo_d"
expr_stmt|;
name|assertQEx
argument_list|(
literal|"no double underflow error: "
operator|+
name|field
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|field
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"9900000000000"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"9900000086200"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"0.0003"
argument_list|)
argument_list|,
literal|400
argument_list|)
expr_stmt|;
block|}
DECL|method|testContainsAtStart
specifier|public
name|void
name|testContainsAtStart
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|SimpleFacets
operator|.
name|contains
argument_list|(
literal|"foobar"
argument_list|,
literal|"foo"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testContains
specifier|public
name|void
name|testContains
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|SimpleFacets
operator|.
name|contains
argument_list|(
literal|"foobar"
argument_list|,
literal|"ooba"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testContainsAtEnd
specifier|public
name|void
name|testContainsAtEnd
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|SimpleFacets
operator|.
name|contains
argument_list|(
literal|"foobar"
argument_list|,
literal|"bar"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testContainsWhole
specifier|public
name|void
name|testContainsWhole
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|SimpleFacets
operator|.
name|contains
argument_list|(
literal|"foobar"
argument_list|,
literal|"foobar"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testContainsIgnoreCase
specifier|public
name|void
name|testContainsIgnoreCase
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|SimpleFacets
operator|.
name|contains
argument_list|(
literal|"FooBar"
argument_list|,
literal|"bar"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRangeQueryHardEndParamFilter
specifier|public
name|void
name|testRangeQueryHardEndParamFilter
parameter_list|()
block|{
name|doTestRangeQueryHardEndParam
argument_list|(
literal|"range_facet_l"
argument_list|,
name|FacetRangeMethod
operator|.
name|FILTER
argument_list|)
expr_stmt|;
block|}
DECL|method|testRangeQueryHardEndParamDv
specifier|public
name|void
name|testRangeQueryHardEndParamDv
parameter_list|()
block|{
name|doTestRangeQueryHardEndParam
argument_list|(
literal|"range_facet_l"
argument_list|,
name|FacetRangeMethod
operator|.
name|DV
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestRangeQueryHardEndParam
specifier|private
name|void
name|doTestRangeQueryHardEndParam
parameter_list|(
name|String
name|field
parameter_list|,
name|FacetRangeMethod
name|method
parameter_list|)
block|{
name|assertQ
argument_list|(
literal|"Test facet.range.hardend"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|field
argument_list|,
literal|"facet.range"
argument_list|,
name|field
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"43"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"45"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"5"
argument_list|,
literal|"facet.range.hardend"
argument_list|,
literal|"false"
argument_list|,
literal|"facet.range.other"
argument_list|,
literal|"after"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst)=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"'])=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='counts'])=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='counts']/int)=1]"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='counts']/int[@name='43'][.='5']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/long[@name='end'][.='48']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/int[@name='after'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Test facet.range.hardend"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|field
argument_list|,
literal|"facet.range"
argument_list|,
name|field
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"43"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"45"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"5"
argument_list|,
literal|"facet.range.hardend"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range.other"
argument_list|,
literal|"after"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst)=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"'])=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='counts'])=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='counts']/int)=1]"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='counts']/int[@name='43'][.='2']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/long[@name='end'][.='45']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/int[@name='after'][.='3']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testRangeQueryOtherParamFilter
specifier|public
name|void
name|testRangeQueryOtherParamFilter
parameter_list|()
block|{
name|doTestRangeQueryOtherParam
argument_list|(
literal|"range_facet_l"
argument_list|,
name|FacetRangeMethod
operator|.
name|FILTER
argument_list|)
expr_stmt|;
block|}
DECL|method|testRangeQueryOtherParamDv
specifier|public
name|void
name|testRangeQueryOtherParamDv
parameter_list|()
block|{
name|doTestRangeQueryOtherParam
argument_list|(
literal|"range_facet_l"
argument_list|,
name|FacetRangeMethod
operator|.
name|DV
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestRangeQueryOtherParam
specifier|private
name|void
name|doTestRangeQueryOtherParam
parameter_list|(
name|String
name|field
parameter_list|,
name|FacetRangeMethod
name|method
parameter_list|)
block|{
name|assertQ
argument_list|(
literal|"Test facet.range.other"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|field
argument_list|,
literal|"facet.range"
argument_list|,
name|field
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"43"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"45"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.range.other"
argument_list|,
name|FacetRangeOther
operator|.
name|BEFORE
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst)=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"'])=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='counts'])=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='counts']/int)=2]"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/int[@name='before'][.='1']"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='after'])=0]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='between'])=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Test facet.range.other"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|field
argument_list|,
literal|"facet.range"
argument_list|,
name|field
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"43"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"45"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.range.other"
argument_list|,
name|FacetRangeOther
operator|.
name|AFTER
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst)=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"'])=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='counts'])=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='counts']/int)=2]"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/int[@name='after'][.='3']"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='between'])=0]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='before'])=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Test facet.range.other"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|field
argument_list|,
literal|"facet.range"
argument_list|,
name|field
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"43"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"45"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.range.other"
argument_list|,
name|FacetRangeOther
operator|.
name|BETWEEN
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst)=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"'])=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='counts'])=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='counts']/int)=2]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='after'])=0]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='before'])=0]"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/int[@name='between'][.='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Test facet.range.other"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|field
argument_list|,
literal|"facet.range"
argument_list|,
name|field
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"43"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"45"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.range.other"
argument_list|,
name|FacetRangeOther
operator|.
name|NONE
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst)=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"'])=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='counts'])=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='counts']/int)=2]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='after'])=0]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='before'])=0]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='between'])=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Test facet.range.other"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|field
argument_list|,
literal|"facet.range"
argument_list|,
name|field
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"43"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"45"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.range.other"
argument_list|,
name|FacetRangeOther
operator|.
name|BEFORE
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.other"
argument_list|,
name|FacetRangeOther
operator|.
name|AFTER
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst)=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"'])=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='counts'])=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='counts']/int)=2]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='between'])=0]"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/int[@name='after'][.='3']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/int[@name='before'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Test facet.range.other"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|field
argument_list|,
literal|"facet.range"
argument_list|,
name|field
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"43"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"45"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.range.other"
argument_list|,
name|FacetRangeOther
operator|.
name|BEFORE
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.other"
argument_list|,
name|FacetRangeOther
operator|.
name|AFTER
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.other"
argument_list|,
name|FacetRangeOther
operator|.
name|NONE
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst)=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"'])=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='counts'])=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='counts']/int)=2]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='between'])=0]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='after'])=0]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='before'])=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Test facet.range.other"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|field
argument_list|,
literal|"facet.range"
argument_list|,
name|field
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"43"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"45"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.range.other"
argument_list|,
name|FacetRangeOther
operator|.
name|ALL
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.include"
argument_list|,
name|FacetRangeInclude
operator|.
name|LOWER
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst)=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"'])=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='counts'])=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='counts']/int)=2]"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/int[@name='between'][.='2']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/int[@name='after'][.='3']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/int[@name='before'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Test facet.range.other"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|field
argument_list|,
literal|"facet.range"
argument_list|,
name|field
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"43"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"45"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.range.other"
argument_list|,
name|FacetRangeOther
operator|.
name|ALL
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.include"
argument_list|,
name|FacetRangeInclude
operator|.
name|UPPER
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst)=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"'])=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='counts'])=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='counts']/int)=2]"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/int[@name='between'][.='2']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/int[@name='after'][.='2']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/int[@name='before'][.='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Test facet.range.other"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|field
argument_list|,
literal|"facet.range"
argument_list|,
name|field
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"43"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"45"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.range.other"
argument_list|,
name|FacetRangeOther
operator|.
name|ALL
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.include"
argument_list|,
name|FacetRangeInclude
operator|.
name|EDGE
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst)=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"'])=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='counts'])=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='counts']/int)=2]"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/int[@name='between'][.='3']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/int[@name='after'][.='2']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/int[@name='before'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Test facet.range.other"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|field
argument_list|,
literal|"facet.range"
argument_list|,
name|field
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"43"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"45"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.range.other"
argument_list|,
name|FacetRangeOther
operator|.
name|ALL
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.include"
argument_list|,
name|FacetRangeInclude
operator|.
name|OUTER
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst)=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"'])=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='counts'])=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='counts']/int)=2]"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/int[@name='between'][.='1']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/int[@name='after'][.='3']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/int[@name='before'][.='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Test facet.range.other"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[12345 TO 12345]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|field
argument_list|,
literal|"facet.range"
argument_list|,
name|field
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"43"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"45"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.range.other"
argument_list|,
name|FacetRangeOther
operator|.
name|ALL
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst)=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"'])=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='counts'])=1]"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/int[@name='between'][.='0']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/int[@name='after'][.='0']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/int[@name='before'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Test facet.range.other"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|field
argument_list|,
literal|"facet.range"
argument_list|,
name|field
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"43"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"45"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.other"
argument_list|,
name|FacetRangeOther
operator|.
name|ALL
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst)=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"'])=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='counts'])=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/lst[@name='counts']/int)=1]"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/int[@name='between'][.='5']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/int[@name='after'][.='0']"
argument_list|,
literal|"//lst[@name='facet_ranges']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/int[@name='before'][.='1']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testRangeFacetingBadRequest
specifier|public
name|void
name|testRangeFacetingBadRequest
parameter_list|()
block|{
name|String
name|field
init|=
literal|"range_facet_l"
decl_stmt|;
name|ignoreException
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|FacetRangeMethod
name|method
range|:
name|FacetRangeMethod
operator|.
name|values
argument_list|()
control|)
block|{
name|assertQEx
argument_list|(
literal|"Test facet.range bad requests"
argument_list|,
literal|"range facet 'end' comes before 'start'"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|field
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"45"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"43"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"10"
argument_list|)
argument_list|,
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"Test facet.range bad requests"
argument_list|,
literal|"range facet infinite loop (is gap negative? did the math overflow?)"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|field
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"43"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"45"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"-1"
argument_list|)
argument_list|,
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"Test facet.range bad requests"
argument_list|,
literal|"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|field
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"43"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"45"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"0"
argument_list|)
argument_list|,
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"Test facet.range bad requests"
argument_list|,
literal|"Missing required parameter"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|field
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"45"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"5"
argument_list|)
argument_list|,
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"Test facet.range bad requests"
argument_list|,
literal|"Missing required parameter"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|field
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"43"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"5"
argument_list|)
argument_list|,
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"Test facet.range bad requests"
argument_list|,
literal|"Missing required parameter"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|field
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"43"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"45"
argument_list|)
argument_list|,
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"Test facet.range bad requests"
argument_list|,
literal|"Unable to range facet on field"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
literal|"contains_s1"
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"43"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"45"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"5"
argument_list|)
argument_list|,
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"Test facet.range bad requests"
argument_list|,
literal|"foo is not a valid method for range faceting"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|field
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"foo"
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"43"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"45"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"5"
argument_list|)
argument_list|,
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"Test facet.range bad requests"
argument_list|,
literal|"foo is not a valid type of for range 'include' information"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|field
argument_list|,
literal|"facet.range.method"
argument_list|,
name|method
operator|.
name|toString
argument_list|()
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"43"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"45"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"5"
argument_list|,
literal|"facet.range.include"
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|resetExceptionIgnores
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testRangeFacetFilterVsDocValuesRandom
specifier|public
name|void
name|testRangeFacetFilterVsDocValuesRandom
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atLeast
argument_list|(
literal|100
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|ModifiableSolrParams
name|params
init|=
literal|null
decl_stmt|;
name|int
name|fieldType
init|=
name|i
operator|%
literal|3
decl_stmt|;
switch|switch
condition|(
name|fieldType
condition|)
block|{
case|case
literal|0
case|:
name|params
operator|=
name|getRandomParamsDate
argument_list|()
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|params
operator|=
name|getRandomParamsInt
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|params
operator|=
name|getRandomParamsFloat
argument_list|()
expr_stmt|;
break|break;
block|}
name|String
name|field
init|=
name|params
operator|.
name|get
argument_list|(
literal|"facet.range"
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
name|getRandomQuery
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"facet"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"facet.range.method"
argument_list|,
name|FacetRangeMethod
operator|.
name|FILTER
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|NamedList
argument_list|<
name|Object
argument_list|>
name|rangeFacetsFilter
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|rangeFacetsDv
decl_stmt|;
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Using Params: "
operator|+
name|params
argument_list|)
expr_stmt|;
try|try
block|{
name|SolrQueryResponse
name|rsp
init|=
name|h
operator|.
name|queryAndResponse
argument_list|(
literal|"standard"
argument_list|,
name|req
argument_list|)
decl_stmt|;
name|rangeFacetsFilter
operator|=
call|(
name|NamedList
argument_list|<
name|Object
argument_list|>
call|)
argument_list|(
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|"facet_counts"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"facet_ranges"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|params
operator|.
name|add
argument_list|(
literal|"facet.range.method"
argument_list|,
name|FacetRangeMethod
operator|.
name|DV
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|=
name|req
argument_list|(
name|params
argument_list|)
expr_stmt|;
try|try
block|{
name|SolrQueryResponse
name|rsp
init|=
name|h
operator|.
name|queryAndResponse
argument_list|(
literal|"standard"
argument_list|,
name|req
argument_list|)
decl_stmt|;
name|rangeFacetsDv
operator|=
call|(
name|NamedList
argument_list|<
name|Object
argument_list|>
call|)
argument_list|(
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|"facet_counts"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"facet_ranges"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|rangeFacetsFilter
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|rangeFacetsDv
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameResults
argument_list|(
literal|"Different results obtained when using 'filter' and 'dv' methods for Range Facets using params."
operator|+
name|params
operator|+
literal|"\n"
operator|+
literal|"Filter:"
operator|+
name|rangeFacetsFilter
operator|+
literal|"\n DV: "
operator|+
name|rangeFacetsDv
argument_list|,
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|rangeFacetsFilter
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|,
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|rangeFacetsDv
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFacetPrefixWithFacetThreads
specifier|public
name|void
name|testFacetPrefixWithFacetThreads
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQ
argument_list|(
literal|"Test facet.prefix with facet.thread"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[101 TO 102]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=key1 facet.prefix=foo}myfield_s"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=key2 facet.prefix=bar}myfield_s"
argument_list|,
literal|"facet.threads"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst[@name='key1']/int[@name='foo'])=1]"
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst[@name='key2']/int[@name='bar'])=1]"
argument_list|)
expr_stmt|;
block|}
DECL|method|getRandomQuery
specifier|private
name|String
name|getRandomQuery
parameter_list|()
block|{
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
return|return
literal|"*:*"
return|;
block|}
name|Integer
index|[]
name|values
init|=
operator|new
name|Integer
index|[
literal|2
index|]
decl_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|values
index|[
literal|1
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|values
argument_list|)
expr_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"id: [%d TO %d]"
argument_list|,
name|values
index|[
literal|0
index|]
argument_list|,
name|values
index|[
literal|1
index|]
argument_list|)
return|;
block|}
DECL|method|assertSameResults
specifier|private
name|void
name|assertSameResults
parameter_list|(
name|String
name|message
parameter_list|,
name|NamedList
argument_list|<
name|Object
argument_list|>
name|rangeFacetsFilter
parameter_list|,
name|NamedList
argument_list|<
name|Object
argument_list|>
name|rangeFacetsDv
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|message
operator|+
literal|" Different number of elements."
argument_list|,
name|rangeFacetsFilter
operator|.
name|size
argument_list|()
argument_list|,
name|rangeFacetsDv
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|rangeFacetsFilter
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
literal|"counts"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Object
name|value
init|=
name|rangeFacetsDv
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
name|message
operator|+
literal|" Element not found with 'dv' method: "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|message
operator|+
literal|"Different value for key "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Null counts: "
operator|+
name|rangeFacetsFilter
argument_list|,
name|rangeFacetsFilter
operator|.
name|get
argument_list|(
literal|"counts"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Null counts: "
operator|+
name|rangeFacetsDv
argument_list|,
name|rangeFacetsDv
operator|.
name|get
argument_list|(
literal|"counts"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|message
operator|+
literal|"Different counts"
argument_list|,
name|rangeFacetsFilter
operator|.
name|get
argument_list|(
literal|"counts"
argument_list|)
argument_list|,
name|rangeFacetsDv
operator|.
name|get
argument_list|(
literal|"counts"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getRandomParamsInt
specifier|private
name|ModifiableSolrParams
name|getRandomParamsInt
parameter_list|()
block|{
name|String
name|field
init|=
operator|new
name|String
index|[]
block|{
literal|"range_facet_l_dv"
block|,
literal|"range_facet_i_dv"
block|,
literal|"range_facet_l"
block|,
literal|"duration_i1"
block|,
literal|"id"
block|}
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
index|]
decl_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|Integer
index|[]
name|values
init|=
operator|new
name|Integer
index|[
literal|2
index|]
decl_stmt|;
do|do
block|{
name|values
index|[
literal|0
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|values
index|[
literal|1
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|values
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|)
condition|)
do|;
name|Arrays
operator|.
name|sort
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|long
name|gapNum
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3000
argument_list|)
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|FacetParams
operator|.
name|FACET_RANGE_START
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|FacetParams
operator|.
name|FACET_RANGE_END
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|FacetParams
operator|.
name|FACET_RANGE_GAP
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"+%d"
argument_list|,
name|gapNum
argument_list|)
argument_list|)
expr_stmt|;
name|addCommonRandomRangeParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|FacetParams
operator|.
name|FACET_RANGE
argument_list|,
name|field
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
DECL|method|getRandomParamsFloat
specifier|private
name|ModifiableSolrParams
name|getRandomParamsFloat
parameter_list|()
block|{
name|String
name|field
init|=
operator|new
name|String
index|[]
block|{
literal|"range_facet_d_dv"
block|,
literal|"range_facet_f_dv"
block|,
literal|"range_facet_d"
block|,
literal|"range_facet_f"
block|,
literal|"range_facet_mv_f"
block|,
literal|"range_facet_f1"
block|,
literal|"range_facet_f1_dv"
block|}
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|7
argument_list|)
index|]
decl_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|Float
index|[]
name|values
init|=
operator|new
name|Float
index|[
literal|2
index|]
decl_stmt|;
do|do
block|{
name|values
index|[
literal|0
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
operator|*
literal|3000
expr_stmt|;
name|values
index|[
literal|1
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
operator|*
literal|3000
expr_stmt|;
block|}
do|while
condition|(
name|values
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|)
condition|)
do|;
name|Arrays
operator|.
name|sort
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|float
name|gapNum
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
operator|*
literal|3000
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|FacetParams
operator|.
name|FACET_RANGE_START
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|FacetParams
operator|.
name|FACET_RANGE_END
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|FacetParams
operator|.
name|FACET_RANGE_GAP
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"+%f"
argument_list|,
name|gapNum
argument_list|)
argument_list|)
expr_stmt|;
name|addCommonRandomRangeParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|FacetParams
operator|.
name|FACET_RANGE
argument_list|,
name|field
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
DECL|field|DATE_GAP_UNITS
specifier|private
specifier|final
specifier|static
name|String
index|[]
name|DATE_GAP_UNITS
init|=
operator|new
name|String
index|[]
block|{
literal|"SECONDS"
block|,
literal|"MINUTES"
block|,
literal|"HOURS"
block|,
literal|"DAYS"
block|,
literal|"MONTHS"
block|,
literal|"YEARS"
block|}
decl_stmt|;
DECL|method|getRandomParamsDate
specifier|private
name|ModifiableSolrParams
name|getRandomParamsDate
parameter_list|()
block|{
name|String
name|field
init|=
operator|new
name|String
index|[]
block|{
literal|"range_facet_dt_dv"
block|,
literal|"a_tdt"
block|,
literal|"bday"
block|}
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
index|]
decl_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|Date
index|[]
name|dates
init|=
operator|new
name|Date
index|[
literal|2
index|]
decl_stmt|;
do|do
block|{
name|dates
index|[
literal|0
index|]
operator|=
operator|new
name|Date
argument_list|(
call|(
name|long
call|)
argument_list|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|*
operator|(
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|dates
index|[
literal|1
index|]
operator|=
operator|new
name|Date
argument_list|(
call|(
name|long
call|)
argument_list|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|*
operator|(
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|dates
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|dates
index|[
literal|1
index|]
argument_list|)
condition|)
do|;
name|Arrays
operator|.
name|sort
argument_list|(
name|dates
argument_list|)
expr_stmt|;
name|long
name|dateDiff
init|=
operator|(
name|dates
index|[
literal|1
index|]
operator|.
name|getTime
argument_list|()
operator|-
name|dates
index|[
literal|0
index|]
operator|.
name|getTime
argument_list|()
operator|)
operator|/
literal|1000
decl_stmt|;
name|String
name|gapUnit
decl_stmt|;
if|if
condition|(
name|dateDiff
operator|<
literal|1000
condition|)
block|{
name|gapUnit
operator|=
name|DATE_GAP_UNITS
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|DATE_GAP_UNITS
operator|.
name|length
argument_list|)
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dateDiff
operator|<
literal|10000
condition|)
block|{
name|gapUnit
operator|=
name|DATE_GAP_UNITS
index|[
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|DATE_GAP_UNITS
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dateDiff
operator|<
literal|100000
condition|)
block|{
name|gapUnit
operator|=
name|DATE_GAP_UNITS
index|[
literal|2
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|DATE_GAP_UNITS
operator|.
name|length
operator|-
literal|2
argument_list|)
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dateDiff
operator|<
literal|1000000
condition|)
block|{
name|gapUnit
operator|=
name|DATE_GAP_UNITS
index|[
literal|3
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|DATE_GAP_UNITS
operator|.
name|length
operator|-
literal|3
argument_list|)
index|]
expr_stmt|;
block|}
else|else
block|{
name|gapUnit
operator|=
name|DATE_GAP_UNITS
index|[
literal|4
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|DATE_GAP_UNITS
operator|.
name|length
operator|-
literal|4
argument_list|)
index|]
expr_stmt|;
block|}
name|int
name|gapNum
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|+
literal|1
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|FacetParams
operator|.
name|FACET_RANGE_START
argument_list|,
name|DateFormatUtil
operator|.
name|formatExternal
argument_list|(
name|dates
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|FacetParams
operator|.
name|FACET_RANGE_END
argument_list|,
name|DateFormatUtil
operator|.
name|formatExternal
argument_list|(
name|dates
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|FacetParams
operator|.
name|FACET_RANGE_GAP
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"+%d%s"
argument_list|,
name|gapNum
argument_list|,
name|gapUnit
argument_list|)
argument_list|)
expr_stmt|;
name|addCommonRandomRangeParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|FacetParams
operator|.
name|FACET_RANGE
argument_list|,
name|field
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
DECL|method|addCommonRandomRangeParams
specifier|private
name|void
name|addCommonRandomRangeParams
parameter_list|(
name|ModifiableSolrParams
name|params
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|params
operator|.
name|add
argument_list|(
name|FacetParams
operator|.
name|FACET_RANGE_OTHER
argument_list|,
name|FacetRangeOther
operator|.
name|values
argument_list|()
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|FacetRangeOther
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
name|FacetParams
operator|.
name|FACET_RANGE_INCLUDE
argument_list|,
name|FacetRangeInclude
operator|.
name|values
argument_list|()
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|FacetRangeInclude
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
name|FacetParams
operator|.
name|FACET_MINCOUNT
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|add
argument_list|(
name|FacetParams
operator|.
name|FACET_RANGE_HARD_END
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
