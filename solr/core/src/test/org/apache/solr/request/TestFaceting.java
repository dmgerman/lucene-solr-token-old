begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.request
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocTermOrds
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/**  *  */
end_comment
begin_class
DECL|class|TestFaceting
specifier|public
class|class
name|TestFaceting
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema11.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
DECL|method|t
name|String
name|t
parameter_list|(
name|int
name|tnum
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%08d"
argument_list|,
name|tnum
argument_list|)
return|;
block|}
DECL|method|createIndex
name|void
name|createIndex
parameter_list|(
name|int
name|nTerms
parameter_list|)
block|{
name|assertU
argument_list|(
name|delQ
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nTerms
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|Float
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|proto
operator|.
name|field
argument_list|()
argument_list|,
name|t
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|optimize
argument_list|()
argument_list|)
expr_stmt|;
comment|// squeeze out any possible deleted docs
block|}
DECL|field|proto
name|Term
name|proto
init|=
operator|new
name|Term
argument_list|(
literal|"field_s"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
DECL|field|req
name|SolrQueryRequest
name|req
decl_stmt|;
comment|// used to get a searcher
DECL|method|close
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|req
operator|!=
literal|null
condition|)
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
name|req
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|doTermEnum
name|void
name|doTermEnum
parameter_list|(
name|int
name|size
parameter_list|)
throws|throws
name|Exception
block|{
comment|//System.out.println("doTermEnum size=" + size);
name|close
argument_list|()
expr_stmt|;
name|createIndex
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|req
operator|=
name|lrf
operator|.
name|makeRequest
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|UnInvertedField
name|uif
init|=
operator|new
name|UnInvertedField
argument_list|(
name|proto
operator|.
name|field
argument_list|()
argument_list|,
name|req
operator|.
name|getSearcher
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|size
argument_list|,
name|uif
operator|.
name|getNumTerms
argument_list|()
argument_list|)
expr_stmt|;
name|TermsEnum
name|te
init|=
name|uif
operator|.
name|getOrdTermsEnum
argument_list|(
name|req
operator|.
name|getSearcher
argument_list|()
operator|.
name|getAtomicReader
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|size
operator|==
literal|0
argument_list|,
name|te
operator|==
literal|null
argument_list|)
expr_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
name|size
argument_list|)
decl_stmt|;
comment|// test seeking by term string
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
operator|*
literal|2
operator|+
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|int
name|rnum
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|size
operator|+
literal|2
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|t
argument_list|(
name|rnum
argument_list|)
decl_stmt|;
comment|//System.out.println("s=" + s);
specifier|final
name|BytesRef
name|br
decl_stmt|;
if|if
condition|(
name|te
operator|==
literal|null
condition|)
block|{
name|br
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|TermsEnum
operator|.
name|SeekStatus
name|status
init|=
name|te
operator|.
name|seekCeil
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|END
condition|)
block|{
name|br
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|br
operator|=
name|te
operator|.
name|term
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|br
operator|!=
literal|null
argument_list|,
name|rnum
operator|<
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|rnum
operator|<
name|size
condition|)
block|{
name|assertEquals
argument_list|(
name|rnum
argument_list|,
operator|(
name|int
operator|)
name|te
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
argument_list|,
name|te
operator|.
name|term
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// test seeking before term
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|size
operator|>
literal|0
argument_list|,
name|te
operator|.
name|seekCeil
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"000"
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|!=
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|END
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|te
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
argument_list|(
literal|0
argument_list|)
argument_list|,
name|te
operator|.
name|term
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
comment|// test seeking by term number
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
operator|*
literal|2
operator|+
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|int
name|rnum
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|t
argument_list|(
name|rnum
argument_list|)
decl_stmt|;
name|te
operator|.
name|seekExact
argument_list|(
operator|(
name|long
operator|)
name|rnum
argument_list|)
expr_stmt|;
name|BytesRef
name|br
init|=
name|te
operator|.
name|term
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|br
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rnum
argument_list|,
operator|(
name|int
operator|)
name|te
operator|.
name|ord
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
argument_list|,
name|te
operator|.
name|term
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testTermEnum
specifier|public
name|void
name|testTermEnum
parameter_list|()
throws|throws
name|Exception
block|{
name|doTermEnum
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|doTermEnum
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|int
name|DEFAULT_INDEX_INTERVAL
init|=
literal|1
operator|<<
name|DocTermOrds
operator|.
name|DEFAULT_INDEX_INTERVAL_BITS
decl_stmt|;
name|doTermEnum
argument_list|(
name|DEFAULT_INDEX_INTERVAL
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// test boundaries around the block size
name|doTermEnum
argument_list|(
name|DEFAULT_INDEX_INTERVAL
argument_list|)
expr_stmt|;
name|doTermEnum
argument_list|(
name|DEFAULT_INDEX_INTERVAL
operator|+
literal|1
argument_list|)
expr_stmt|;
name|doTermEnum
argument_list|(
name|DEFAULT_INDEX_INTERVAL
operator|*
literal|2
operator|+
literal|2
argument_list|)
expr_stmt|;
comment|// doTermEnum(DEFAULT_INDEX_INTERVAL * 3 + 3);
block|}
annotation|@
name|Test
DECL|method|testFacets
specifier|public
name|void
name|testFacets
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// go over 4096 to test some of the buffer resizing
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5000
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|t
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"many_ws"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check many tokens"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.method"
argument_list|,
literal|"fc"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"many_ws"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"-1"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='many_ws']/int)=5000]"
argument_list|,
literal|"//lst[@name='many_ws']/int[@name='"
operator|+
name|t
argument_list|(
literal|0
argument_list|)
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='many_ws']/int[@name='"
operator|+
name|t
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='many_ws']/int[@name='"
operator|+
name|t
argument_list|(
literal|2
argument_list|)
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='many_ws']/int[@name='"
operator|+
name|t
argument_list|(
literal|3
argument_list|)
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='many_ws']/int[@name='"
operator|+
name|t
argument_list|(
literal|4
argument_list|)
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='many_ws']/int[@name='"
operator|+
name|t
argument_list|(
literal|5
argument_list|)
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='many_ws']/int[@name='"
operator|+
name|t
argument_list|(
literal|4092
argument_list|)
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='many_ws']/int[@name='"
operator|+
name|t
argument_list|(
literal|4093
argument_list|)
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='many_ws']/int[@name='"
operator|+
name|t
argument_list|(
literal|4094
argument_list|)
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='many_ws']/int[@name='"
operator|+
name|t
argument_list|(
literal|4095
argument_list|)
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='many_ws']/int[@name='"
operator|+
name|t
argument_list|(
literal|4096
argument_list|)
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='many_ws']/int[@name='"
operator|+
name|t
argument_list|(
literal|4097
argument_list|)
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='many_ws']/int[@name='"
operator|+
name|t
argument_list|(
literal|4098
argument_list|)
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='many_ws']/int[@name='"
operator|+
name|t
argument_list|(
literal|4090
argument_list|)
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='many_ws']/int[@name='"
operator|+
name|t
argument_list|(
literal|4999
argument_list|)
operator|+
literal|"'][.='1']"
argument_list|)
expr_stmt|;
comment|// test gaps that take more than one byte
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|t
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|t
argument_list|(
literal|150
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|t
argument_list|(
literal|301
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|t
argument_list|(
literal|453
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|t
argument_list|(
literal|606
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|t
argument_list|(
literal|1000
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|t
argument_list|(
literal|2010
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|t
argument_list|(
literal|3050
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|t
argument_list|(
literal|4999
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"many_ws"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check many tokens"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.method"
argument_list|,
literal|"fc"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"many_ws"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"-1"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='many_ws']/int)=5000]"
argument_list|,
literal|"//lst[@name='many_ws']/int[@name='"
operator|+
name|t
argument_list|(
literal|0
argument_list|)
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='many_ws']/int[@name='"
operator|+
name|t
argument_list|(
literal|150
argument_list|)
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='many_ws']/int[@name='"
operator|+
name|t
argument_list|(
literal|301
argument_list|)
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='many_ws']/int[@name='"
operator|+
name|t
argument_list|(
literal|453
argument_list|)
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='many_ws']/int[@name='"
operator|+
name|t
argument_list|(
literal|606
argument_list|)
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='many_ws']/int[@name='"
operator|+
name|t
argument_list|(
literal|1000
argument_list|)
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='many_ws']/int[@name='"
operator|+
name|t
argument_list|(
literal|2010
argument_list|)
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='many_ws']/int[@name='"
operator|+
name|t
argument_list|(
literal|3050
argument_list|)
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='many_ws']/int[@name='"
operator|+
name|t
argument_list|(
literal|4999
argument_list|)
operator|+
literal|"'][.='1']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegularBig
specifier|public
name|void
name|testRegularBig
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// go over 4096 to test some of the buffer resizing
name|int
name|nTerms
init|=
literal|7
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nTerms
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|t
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|int
name|i1
init|=
literal|1000000
decl_stmt|;
comment|// int iter=65536+10;
name|int
name|iter
init|=
literal|1000
decl_stmt|;
name|int
name|commitInterval
init|=
name|iter
operator|/
literal|9
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iter
condition|;
name|i
operator|++
control|)
block|{
comment|// assertU(adoc("id", t(i), "many_ws", many_ws + t(i1+i) + " " + t(i1*2+i)));
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|t
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"many_ws"
argument_list|,
name|t
argument_list|(
name|i1
operator|+
name|i
argument_list|)
operator|+
literal|" "
operator|+
name|t
argument_list|(
name|i1
operator|*
literal|2
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iter
operator|%
name|commitInterval
operator|==
literal|0
condition|)
block|{
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iter
condition|;
name|i
operator|+=
name|iter
operator|/
literal|10
control|)
block|{
name|assertQ
argument_list|(
literal|"check many tokens"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:"
operator|+
name|t
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.method"
argument_list|,
literal|"fc"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"many_ws"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"-1"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='many_ws']/int)="
operator|+
literal|2
operator|+
literal|"]"
argument_list|,
literal|"//lst[@name='many_ws']/int[@name='"
operator|+
name|t
argument_list|(
name|i1
operator|+
name|i
argument_list|)
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='many_ws']/int[@name='"
operator|+
name|t
argument_list|(
name|i1
operator|*
literal|2
operator|+
name|i
argument_list|)
operator|+
literal|"'][.='1']"
argument_list|)
expr_stmt|;
block|}
name|int
name|i
init|=
name|iter
operator|-
literal|1
decl_stmt|;
name|assertQ
argument_list|(
literal|"check many tokens"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:"
operator|+
name|t
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.method"
argument_list|,
literal|"fc"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"many_ws"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"-1"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='many_ws']/int)="
operator|+
literal|2
operator|+
literal|"]"
argument_list|,
literal|"//lst[@name='many_ws']/int[@name='"
operator|+
name|t
argument_list|(
name|i1
operator|+
name|i
argument_list|)
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='many_ws']/int[@name='"
operator|+
name|t
argument_list|(
name|i1
operator|*
literal|2
operator|+
name|i
argument_list|)
operator|+
literal|"'][.='1']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTrieFields
specifier|public
name|void
name|testTrieFields
parameter_list|()
block|{
comment|// make sure that terms are correctly filtered even for trie fields that index several
comment|// terms for a single value
name|List
argument_list|<
name|String
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|"7"
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|suffixes
init|=
operator|new
name|String
index|[]
block|{
literal|"ti"
block|,
literal|"tis"
block|,
literal|"tf"
block|,
literal|"tfs"
block|,
literal|"tl"
block|,
literal|"tls"
block|,
literal|"td"
block|,
literal|"tds"
block|}
decl_stmt|;
for|for
control|(
name|String
name|suffix
range|:
name|suffixes
control|)
block|{
name|fields
operator|.
name|add
argument_list|(
literal|"f_"
operator|+
name|suffix
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|"42"
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|adoc
argument_list|(
name|fields
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|suffix
range|:
name|suffixes
control|)
block|{
for|for
control|(
name|String
name|facetMethod
range|:
operator|new
name|String
index|[]
block|{
name|FacetParams
operator|.
name|FACET_METHOD_enum
block|,
name|FacetParams
operator|.
name|FACET_METHOD_fc
block|,
name|FacetParams
operator|.
name|FACET_METHOD_fcs
block|}
control|)
block|{
for|for
control|(
name|String
name|facetSort
range|:
operator|new
name|String
index|[]
block|{
name|FacetParams
operator|.
name|FACET_SORT_COUNT
block|,
name|FacetParams
operator|.
name|FACET_SORT_INDEX
block|}
control|)
block|{
for|for
control|(
name|String
name|value
range|:
operator|new
name|String
index|[]
block|{
literal|"42"
block|,
literal|"43"
block|}
control|)
block|{
comment|// match or not
specifier|final
name|String
name|field
init|=
literal|"f_"
operator|+
name|suffix
decl_stmt|;
name|assertQ
argument_list|(
literal|"field="
operator|+
name|field
operator|+
literal|",method="
operator|+
name|facetMethod
operator|+
literal|",sort="
operator|+
name|facetSort
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
name|field
operator|+
literal|":"
operator|+
name|value
argument_list|,
name|FacetParams
operator|.
name|FACET
argument_list|,
literal|"true"
argument_list|,
name|FacetParams
operator|.
name|FACET_FIELD
argument_list|,
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_MINCOUNT
argument_list|,
literal|"0"
argument_list|,
name|FacetParams
operator|.
name|FACET_SORT
argument_list|,
name|facetSort
argument_list|,
name|FacetParams
operator|.
name|FACET_METHOD
argument_list|,
name|facetMethod
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='"
operator|+
name|field
operator|+
literal|"']/int)=1]"
argument_list|)
expr_stmt|;
comment|// exactly 1 facet count
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testFacetSortWithMinCount
specifier|public
name|void
name|testFacetSortWithMinCount
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1.0"
argument_list|,
literal|"f_td"
argument_list|,
literal|"-420.126"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2.0"
argument_list|,
literal|"f_td"
argument_list|,
literal|"-285.672"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3.0"
argument_list|,
literal|"f_td"
argument_list|,
literal|"-1.218"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
name|FacetParams
operator|.
name|FACET
argument_list|,
literal|"true"
argument_list|,
name|FacetParams
operator|.
name|FACET_FIELD
argument_list|,
literal|"f_td"
argument_list|,
literal|"f.f_td.facet.sort"
argument_list|,
name|FacetParams
operator|.
name|FACET_SORT_INDEX
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='f_td']/int)=3]"
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='f_td']/int[1][@name='-420.126']"
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='f_td']/int[2][@name='-285.672']"
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='f_td']/int[3][@name='-1.218']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
name|FacetParams
operator|.
name|FACET
argument_list|,
literal|"true"
argument_list|,
name|FacetParams
operator|.
name|FACET_FIELD
argument_list|,
literal|"f_td"
argument_list|,
literal|"f.f_td.facet.sort"
argument_list|,
name|FacetParams
operator|.
name|FACET_SORT_INDEX
argument_list|,
name|FacetParams
operator|.
name|FACET_MINCOUNT
argument_list|,
literal|"1"
argument_list|,
name|FacetParams
operator|.
name|FACET_METHOD
argument_list|,
name|FacetParams
operator|.
name|FACET_METHOD_fc
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='f_td']/int)=3]"
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='f_td']/int[1][@name='-420.126']"
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='f_td']/int[2][@name='-285.672']"
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='f_td']/int[3][@name='-1.218']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
name|FacetParams
operator|.
name|FACET
argument_list|,
literal|"true"
argument_list|,
name|FacetParams
operator|.
name|FACET_FIELD
argument_list|,
literal|"f_td"
argument_list|,
literal|"f.f_td.facet.sort"
argument_list|,
name|FacetParams
operator|.
name|FACET_SORT_INDEX
argument_list|,
name|FacetParams
operator|.
name|FACET_MINCOUNT
argument_list|,
literal|"1"
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='f_td']/int)=3]"
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='f_td']/int[1][@name='-420.126']"
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='f_td']/int[2][@name='-285.672']"
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='f_td']/int[3][@name='-1.218']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testDateFacetsWithMultipleConfigurationForSameField
specifier|public
name|void
name|testDateFacetsWithMultipleConfigurationForSameField
parameter_list|()
block|{
name|clearIndex
argument_list|()
expr_stmt|;
specifier|final
name|String
name|f
init|=
literal|"bday_dt"
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|f
argument_list|,
literal|"1976-07-04T12:08:56.235Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
name|f
argument_list|,
literal|"1976-07-05T00:00:00.000Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
name|f
argument_list|,
literal|"1976-07-15T00:07:67.890Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
name|f
argument_list|,
literal|"1976-07-21T00:07:67.890Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
name|f
argument_list|,
literal|"1976-07-13T12:12:25.255Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
name|f
argument_list|,
literal|"1976-07-03T17:01:23.456Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
name|f
argument_list|,
literal|"1976-07-12T12:12:25.255Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
name|f
argument_list|,
literal|"1976-07-15T15:15:15.155Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|,
name|f
argument_list|,
literal|"1907-07-12T13:13:23.235Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|,
name|f
argument_list|,
literal|"1976-07-03T11:02:45.678Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"11"
argument_list|,
name|f
argument_list|,
literal|"1907-07-12T12:12:25.255Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"12"
argument_list|,
name|f
argument_list|,
literal|"2007-07-30T07:07:07.070Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"13"
argument_list|,
name|f
argument_list|,
literal|"1976-07-30T22:22:22.222Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"14"
argument_list|,
name|f
argument_list|,
literal|"1976-07-05T22:22:22.222Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|preFoo
init|=
literal|"//lst[@name='facet_dates']/lst[@name='foo']"
decl_stmt|;
specifier|final
name|String
name|preBar
init|=
literal|"//lst[@name='facet_dates']/lst[@name='bar']"
decl_stmt|;
name|assertQ
argument_list|(
literal|"check counts for month of facet by day"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.date"
argument_list|,
literal|"{!key=foo "
operator|+
literal|"facet.date.start=1976-07-01T00:00:00.000Z "
operator|+
literal|"facet.date.end=1976-07-01T00:00:00.000Z+1MONTH "
operator|+
literal|"facet.date.gap=+1DAY "
operator|+
literal|"facet.date.other=all "
operator|+
literal|"}"
operator|+
name|f
argument_list|,
literal|"facet.date"
argument_list|,
literal|"{!key=bar "
operator|+
literal|"facet.date.start=1976-07-01T00:00:00.000Z "
operator|+
literal|"facet.date.end=1976-07-01T00:00:00.000Z+7DAY "
operator|+
literal|"facet.date.gap=+1DAY "
operator|+
literal|"}"
operator|+
name|f
argument_list|)
comment|// 31 days + pre+post+inner = 34
argument_list|,
literal|"*[count("
operator|+
name|preFoo
operator|+
literal|"/int)=34]"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='1976-07-01T00:00:00Z'][.='0'  ]"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='1976-07-02T00:00:00Z'][.='0'  ]"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='1976-07-03T00:00:00Z'][.='2'  ]"
comment|// july4th = 2 because exists doc @ 00:00:00.000 on July5
comment|// (date faceting is inclusive)
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='1976-07-04T00:00:00Z'][.='2'  ]"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='1976-07-05T00:00:00Z'][.='2'  ]"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='1976-07-06T00:00:00Z'][.='0']"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='1976-07-07T00:00:00Z'][.='0']"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='1976-07-08T00:00:00Z'][.='0']"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='1976-07-09T00:00:00Z'][.='0']"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='1976-07-10T00:00:00Z'][.='0']"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='1976-07-11T00:00:00Z'][.='0']"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='1976-07-12T00:00:00Z'][.='1'  ]"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='1976-07-13T00:00:00Z'][.='1'  ]"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='1976-07-14T00:00:00Z'][.='0']"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='1976-07-15T00:00:00Z'][.='2'  ]"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='1976-07-16T00:00:00Z'][.='0']"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='1976-07-17T00:00:00Z'][.='0']"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='1976-07-18T00:00:00Z'][.='0']"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='1976-07-19T00:00:00Z'][.='0']"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='1976-07-21T00:00:00Z'][.='1'  ]"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='1976-07-22T00:00:00Z'][.='0']"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='1976-07-23T00:00:00Z'][.='0']"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='1976-07-24T00:00:00Z'][.='0']"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='1976-07-25T00:00:00Z'][.='0']"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='1976-07-26T00:00:00Z'][.='0']"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='1976-07-27T00:00:00Z'][.='0']"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='1976-07-28T00:00:00Z'][.='0']"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='1976-07-29T00:00:00Z'][.='0']"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='1976-07-30T00:00:00Z'][.='1'  ]"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='1976-07-31T00:00:00Z'][.='0']"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='before' ][.='2']"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='after'  ][.='1']"
argument_list|,
name|preFoo
operator|+
literal|"/int[@name='between'][.='11']"
argument_list|,
literal|"*[count("
operator|+
name|preBar
operator|+
literal|"/int)=7]"
argument_list|,
name|preBar
operator|+
literal|"/int[@name='1976-07-01T00:00:00Z'][.='0'  ]"
argument_list|,
name|preBar
operator|+
literal|"/int[@name='1976-07-02T00:00:00Z'][.='0'  ]"
argument_list|,
name|preBar
operator|+
literal|"/int[@name='1976-07-03T00:00:00Z'][.='2'  ]"
comment|// july4th = 2 because exists doc @ 00:00:00.000 on July5
comment|// (date faceting is inclusive)
argument_list|,
name|preBar
operator|+
literal|"/int[@name='1976-07-04T00:00:00Z'][.='2'  ]"
argument_list|,
name|preBar
operator|+
literal|"/int[@name='1976-07-05T00:00:00Z'][.='2'  ]"
argument_list|,
name|preBar
operator|+
literal|"/int[@name='1976-07-06T00:00:00Z'][.='0']"
argument_list|,
name|preBar
operator|+
literal|"/int[@name='1976-07-07T00:00:00Z'][.='0']"
argument_list|)
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleFacetCountsWithMultipleConfigurationsForSameField
specifier|public
name|void
name|testSimpleFacetCountsWithMultipleConfigurationsForSameField
parameter_list|()
block|{
name|clearIndex
argument_list|()
expr_stmt|;
name|String
name|fname
init|=
literal|"trait_ss"
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"42"
argument_list|,
name|fname
argument_list|,
literal|"Tool"
argument_list|,
name|fname
argument_list|,
literal|"Obnoxious"
argument_list|,
literal|"name_s"
argument_list|,
literal|"Zapp Brannigan"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"43"
argument_list|,
literal|"title_s"
argument_list|,
literal|"Democratic Order of Planets"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"44"
argument_list|,
name|fname
argument_list|,
literal|"Tool"
argument_list|,
literal|"name_s"
argument_list|,
literal|"The Zapper"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"45"
argument_list|,
name|fname
argument_list|,
literal|"Chauvinist"
argument_list|,
literal|"title_s"
argument_list|,
literal|"25 star General"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"46"
argument_list|,
name|fname
argument_list|,
literal|"Obnoxious"
argument_list|,
literal|"subject_s"
argument_list|,
literal|"Defeated the pacifists of the Gandhi nebula"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"47"
argument_list|,
name|fname
argument_list|,
literal|"Pig"
argument_list|,
literal|"text_t"
argument_list|,
literal|"line up and fly directly at the enemy death cannons, clogging them with wreckage!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"checking facets when one has missing=true&mincount=2 and the other has missing=false&mincount=0"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.zeros"
argument_list|,
literal|"false"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=foo "
operator|+
literal|"facet.mincount=0 "
operator|+
literal|"facet.missing=false "
operator|+
literal|"}"
operator|+
name|fname
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=bar "
operator|+
literal|"facet.mincount=2 "
operator|+
literal|"facet.missing=true "
operator|+
literal|"}"
operator|+
name|fname
argument_list|)
argument_list|,
literal|"*[count(//doc)=4]"
argument_list|,
literal|"*[count(//lst[@name='foo']/int)=4]"
argument_list|,
literal|"*[count(//lst[@name='bar']/int)=2]"
argument_list|,
literal|"//lst[@name='foo']/int[@name='Tool'][.='2']"
argument_list|,
literal|"//lst[@name='foo']/int[@name='Obnoxious'][.='1']"
argument_list|,
literal|"//lst[@name='foo']/int[@name='Chauvinist'][.='1']"
argument_list|,
literal|"//lst[@name='foo']/int[@name='Pig'][.='0']"
argument_list|,
literal|"//lst[@name='foo']/int[@name='Tool'][.='2']"
argument_list|,
literal|"//lst[@name='bar']/int[not(@name)][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"checking facets when one has missing=true&mincount=2 and the other has missing=false&mincount=0"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.zeros"
argument_list|,
literal|"false"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=foo "
operator|+
literal|"facet.prefix=Too "
operator|+
literal|"}"
operator|+
name|fname
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=bar "
operator|+
literal|"facet.limit=2 "
operator|+
literal|"facet.sort=false "
operator|+
literal|"}"
operator|+
name|fname
argument_list|)
argument_list|,
literal|"*[count(//doc)=4]"
argument_list|,
literal|"*[count(//lst[@name='foo']/int)=1]"
argument_list|,
literal|"*[count(//lst[@name='bar']/int)=2]"
argument_list|,
literal|"//lst[@name='foo']/int[@name='Tool'][.='2']"
argument_list|,
literal|"//lst[@name='bar']/int[@name='Chauvinist'][.='1']"
argument_list|,
literal|"//lst[@name='bar']/int[@name='Obnoxious'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"localparams in one facet variant should not affect defaults in another: facet.sort vs facet.missing"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=foo "
operator|+
literal|"facet.sort=index"
operator|+
literal|"}"
operator|+
name|fname
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=bar "
operator|+
literal|"facet.missing=true"
operator|+
literal|"}"
operator|+
name|fname
argument_list|)
comment|// foo is in index order w/o missing
argument_list|,
literal|"*[count(//lst[@name='foo']/int)=4]"
argument_list|,
literal|"//lst[@name='foo']/int[1][@name='Chauvinist'][.='1']"
argument_list|,
literal|"//lst[@name='foo']/int[2][@name='Obnoxious'][.='1']"
argument_list|,
literal|"//lst[@name='foo']/int[3][@name='Pig'][.='0']"
argument_list|,
literal|"//lst[@name='foo']/int[4][@name='Tool'][.='2']"
comment|// bar is in count order by default and includes missing
argument_list|,
literal|"*[count(//lst[@name='bar']/int)=5]"
argument_list|,
literal|"//lst[@name='bar']/int[1][@name='Tool'][.='2']"
comment|// don't assume tie breaker for slots 3& 4, behavior undefined?
argument_list|,
literal|"//lst[@name='bar']/int[4][@name='Pig'][.='0']"
argument_list|,
literal|"//lst[@name='bar']/int[5][not(@name)][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"localparams in one facet variant should not affect defaults in another: facet.mincount"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=foo "
operator|+
literal|"facet.mincount=2"
operator|+
literal|"}"
operator|+
name|fname
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=bar}"
operator|+
name|fname
argument_list|)
comment|// only Tool for foo
argument_list|,
literal|"*[count(//lst[@name='foo']/int)=1]"
argument_list|,
literal|"//lst[@name='foo']/int[1][@name='Tool'][.='2']"
comment|// all for bar
argument_list|,
literal|"*[count(//lst[@name='bar']/int)=4]"
argument_list|,
literal|"//lst[@name='bar']/int[1][@name='Tool'][.='2']"
comment|// don't assume tie breaker for slots 3& 4, behavior undefined?
argument_list|,
literal|"//lst[@name='bar']/int[4][@name='Pig'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"localparams in one facet variant should not affect defaults in another: facet.missing"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=foo "
operator|+
literal|"facet.missing=true"
operator|+
literal|"}"
operator|+
name|fname
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=bar}"
operator|+
name|fname
argument_list|)
comment|// foo includes missing
argument_list|,
literal|"*[count(//lst[@name='foo']/int)=5]"
argument_list|,
literal|"//lst[@name='foo']/int[1][@name='Tool'][.='2']"
comment|// don't assume tie breaker for slots 3& 4, behavior undefined?
argument_list|,
literal|"//lst[@name='foo']/int[4][@name='Pig'][.='0']"
argument_list|,
literal|"//lst[@name='foo']/int[5][not(@name)][.='1']"
comment|// bar does not
argument_list|,
literal|"*[count(//lst[@name='bar']/int)=4]"
argument_list|,
literal|"//lst[@name='bar']/int[1][@name='Tool'][.='2']"
comment|// don't assume tie breaker for slots 3& 4, behavior undefined?
argument_list|,
literal|"//lst[@name='bar']/int[4][@name='Pig'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"checking facets when local facet.prefix param used after regular/raw field faceting"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|fname
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=foo "
operator|+
literal|"facet.prefix=T "
operator|+
literal|"}"
operator|+
name|fname
argument_list|)
argument_list|,
literal|"*[count(//doc)=6]"
argument_list|,
literal|"*[count(//lst[@name='"
operator|+
name|fname
operator|+
literal|"']/int)=4]"
argument_list|,
literal|"*[count(//lst[@name='foo']/int)=1]"
argument_list|,
literal|"//lst[@name='foo']/int[@name='Tool'][.='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"checking facets when local facet.prefix param used before regular/raw field faceting"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=foo "
operator|+
literal|"facet.prefix=T "
operator|+
literal|"}"
operator|+
name|fname
argument_list|,
literal|"facet.field"
argument_list|,
name|fname
argument_list|)
argument_list|,
literal|"*[count(//doc)=6]"
argument_list|,
literal|"*[count(//lst[@name='"
operator|+
name|fname
operator|+
literal|"']/int)=4]"
argument_list|,
literal|"*[count(//lst[@name='foo']/int)=1]"
argument_list|,
literal|"//lst[@name='foo']/int[@name='Tool'][.='2']"
argument_list|)
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
