begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.request
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|EmbeddedSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|IntervalFacets
operator|.
name|FacetInterval
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|IntervalFacets
operator|.
name|IntervalCompareResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SyntaxError
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_class
DECL|class|TestIntervalFaceting
specifier|public
class|class
name|TestIntervalFaceting
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeTests
specifier|public
specifier|static
name|void
name|beforeTests
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-basic.xml"
argument_list|,
literal|"schema-docValuesFaceting.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|delQ
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|optimize
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"*:*"
argument_list|)
argument_list|,
literal|"//*[@numFound='0']"
argument_list|)
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiValueFields
specifier|public
name|void
name|testMultiValueFields
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"test_ss_dv"
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"test_ss_dv"
argument_list|,
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"test_ss_dv"
argument_list|,
literal|"bird"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"test_ss_dv"
argument_list|,
literal|"turtle"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"test_ss_dv"
argument_list|,
literal|"\\goodbye,"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"test_ss_dv"
argument_list|,
literal|",hello\\"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"test_ss_dv"
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"test_ss_dv"
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|,
literal|"test_ss_dv"
argument_list|,
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertIntervalQueriesString
argument_list|(
literal|"test_ss_dv"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|delQ
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|optimize
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"test_ss_dv"
argument_list|,
literal|"dog"
argument_list|,
literal|"test_ss_dv"
argument_list|,
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"test_ss_dv"
argument_list|,
literal|"cat"
argument_list|,
literal|"test_ss_dv"
argument_list|,
literal|"bird"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
literal|"test_ss_dv"
argument_list|,
literal|"[hello,hello]"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
literal|"test_ss_dv"
argument_list|,
literal|"[dog,dog]"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
literal|"test_ss_dv"
argument_list|,
literal|"[cat,cat]"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
literal|"test_ss_dv"
argument_list|,
literal|"[*,*]"
argument_list|,
literal|"2"
argument_list|,
literal|"[*,cat)"
argument_list|,
literal|"1"
argument_list|,
literal|"[cat,dog)"
argument_list|,
literal|"2"
argument_list|,
literal|"[dog,*)"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleSegments
specifier|public
name|void
name|testMultipleSegments
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"bird"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"turtle"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"\\goodbye,"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|",hello\\"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|11
decl_stmt|;
while|while
condition|(
name|getNumberOfReaders
argument_list|()
operator|<
literal|2
operator|&&
name|i
operator|<
literal|10
condition|)
block|{
comment|//try to get more than one segment
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"test_i_dv"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getNumberOfReaders
argument_list|()
operator|<
literal|2
condition|)
block|{
comment|// It is OK if for some seeds we fall into this case (for example, TieredMergePolicy with
comment|// segmentsPerTier=2). Most of the case we shouldn't and the test should proceed.
name|log
operator|.
name|warn
argument_list|(
literal|"Could not generate more than 1 segment for this seed. Will skip the test"
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertIntervalQueriesString
argument_list|(
literal|"test_s_dv"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleTerms
specifier|public
name|void
name|testMultipleTerms
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"Buenos Aires"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"New York"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"Los Angeles"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"San Francisco"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"Las Vegas"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"SÃ£o Paulo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"[*,*]"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"[A,C]"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"[Buenos Aires,Buenos Aires]"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"[Las,Los]"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"[Las,Los Angeles]"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"[Las,Los Angeles)"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"[Las\\,,Los Angeles]"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
DECL|method|getNumberOfReaders
specifier|private
name|int
name|getNumberOfReaders
parameter_list|()
block|{
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searcherRef
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSearcher
argument_list|()
decl_stmt|;
try|try
block|{
name|SolrIndexSearcher
name|searcher
init|=
name|searcherRef
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|searcher
operator|.
name|getTopReaderContext
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
finally|finally
block|{
name|searcherRef
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testBasic
specifier|public
name|void
name|testBasic
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"bird"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"turtle"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"\\goodbye,"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|",hello\\"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertIntervalQueriesString
argument_list|(
literal|"test_s_dv"
argument_list|)
expr_stmt|;
comment|// error cases
name|assertQEx
argument_list|(
literal|"missing beginning of range"
argument_list|,
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.interval"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"f.test_s_dv.facet.interval.set"
argument_list|,
literal|"bird,bird]"
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"only separator is escaped"
argument_list|,
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.interval"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"f.test_s_dv.facet.interval.set"
argument_list|,
literal|"(bird\\,turtle]"
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"missing separator"
argument_list|,
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.interval"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"f.test_s_dv.facet.interval.set"
argument_list|,
literal|"(bird]"
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"missing end of range"
argument_list|,
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.interval"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"f.test_s_dv.facet.interval.set"
argument_list|,
literal|"(bird,turtle"
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleFields
specifier|public
name|void
name|testMultipleFields
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"dog"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"cat"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"bird"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"turtle"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"\\goodbye,"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|",hello\\"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"6"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"dog"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"dog"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"8"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"cat"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"9"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.interval"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"facet.interval"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"f.test_s_dv.facet.interval.set"
argument_list|,
literal|"[cat,dog]"
argument_list|,
literal|"f.test_l_dv.facet.interval.set"
argument_list|,
literal|"[3,6]"
argument_list|,
literal|"f.test_l_dv.facet.interval.set"
argument_list|,
literal|"[5,9]"
argument_list|)
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[cat,dog]'][.=5]"
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[3,6]'][.=4]"
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[5,9]'][.=5]"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithFieldCache
specifier|public
name|void
name|testWithFieldCache
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"test_s"
argument_list|,
literal|"dog"
argument_list|,
literal|"test_l"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"test_s"
argument_list|,
literal|"cat"
argument_list|,
literal|"test_l"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"test_s"
argument_list|,
literal|"bird"
argument_list|,
literal|"test_l"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"test_s"
argument_list|,
literal|"turtle"
argument_list|,
literal|"test_l"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"test_s"
argument_list|,
literal|"\\goodbye,"
argument_list|,
literal|"test_l"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"test_s"
argument_list|,
literal|",hello\\"
argument_list|,
literal|"test_l"
argument_list|,
literal|"6"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"test_s"
argument_list|,
literal|"dog"
argument_list|,
literal|"test_l"
argument_list|,
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"test_s"
argument_list|,
literal|"dog"
argument_list|,
literal|"test_l"
argument_list|,
literal|"8"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|,
literal|"test_s"
argument_list|,
literal|"cat"
argument_list|,
literal|"test_l"
argument_list|,
literal|"9"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.interval"
argument_list|,
literal|"test_s"
argument_list|,
literal|"facet.interval"
argument_list|,
literal|"test_l"
argument_list|,
literal|"f.test_s.facet.interval.set"
argument_list|,
literal|"[cat,dog]"
argument_list|,
literal|"f.test_l.facet.interval.set"
argument_list|,
literal|"[3,6]"
argument_list|,
literal|"f.test_l.facet.interval.set"
argument_list|,
literal|"[5,9]"
argument_list|)
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_s']/int[@name='[cat,dog]'][.=5]"
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_l']/int[@name='[3,6]'][.=4]"
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_l']/int[@name='[5,9]'][.=5]"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Slow
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|Exception
block|{
comment|// All field values will be a number between 0 and cardinality
name|int
name|cardinality
init|=
literal|100000
decl_stmt|;
comment|// Fields to use for interval faceting
name|String
index|[]
name|fields
init|=
operator|new
name|String
index|[]
block|{
literal|"test_s_dv"
block|,
literal|"test_i_dv"
block|,
literal|"test_l_dv"
block|,
literal|"test_f_dv"
block|,
literal|"test_d_dv"
block|,
literal|"test_ss_dv"
block|,
literal|"test_is_dv"
block|,
literal|"test_fs_dv"
block|,
literal|"test_ls_dv"
block|,
literal|"test_ds_dv"
block|,
literal|"test_s"
block|,
literal|"test_i"
block|,
literal|"test_l"
block|,
literal|"test_f"
block|,
literal|"test_d"
block|,
literal|"test_ss"
block|,
literal|"test_is"
block|,
literal|"test_fs"
block|,
literal|"test_ls"
block|,
literal|"test_ds"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atLeast
argument_list|(
literal|500
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|//have some empty docs
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|==
literal|0
operator|&&
name|i
operator|>
literal|0
condition|)
block|{
comment|//delete some docs
name|assertU
argument_list|(
name|delI
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|docFields
init|=
operator|new
name|String
index|[
operator|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|)
operator|*
literal|10
operator|+
literal|12
index|]
decl_stmt|;
name|docFields
index|[
literal|0
index|]
operator|=
literal|"id"
expr_stmt|;
name|docFields
index|[
literal|1
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|docFields
index|[
literal|2
index|]
operator|=
literal|"test_s"
expr_stmt|;
name|docFields
index|[
literal|3
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|cardinality
argument_list|)
argument_list|)
expr_stmt|;
name|docFields
index|[
literal|4
index|]
operator|=
literal|"test_i"
expr_stmt|;
name|docFields
index|[
literal|5
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|cardinality
argument_list|)
argument_list|)
expr_stmt|;
name|docFields
index|[
literal|6
index|]
operator|=
literal|"test_l"
expr_stmt|;
name|docFields
index|[
literal|7
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|cardinality
argument_list|)
argument_list|)
expr_stmt|;
name|docFields
index|[
literal|8
index|]
operator|=
literal|"test_f"
expr_stmt|;
name|docFields
index|[
literal|9
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
operator|*
name|cardinality
argument_list|)
expr_stmt|;
name|docFields
index|[
literal|10
index|]
operator|=
literal|"test_d"
expr_stmt|;
name|docFields
index|[
literal|11
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|*
name|cardinality
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|12
init|;
name|j
operator|<
name|docFields
operator|.
name|length
condition|;
control|)
block|{
name|docFields
index|[
name|j
operator|++
index|]
operator|=
literal|"test_ss"
expr_stmt|;
name|docFields
index|[
name|j
operator|++
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|cardinality
argument_list|)
argument_list|)
expr_stmt|;
name|docFields
index|[
name|j
operator|++
index|]
operator|=
literal|"test_is"
expr_stmt|;
name|docFields
index|[
name|j
operator|++
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|cardinality
argument_list|)
argument_list|)
expr_stmt|;
name|docFields
index|[
name|j
operator|++
index|]
operator|=
literal|"test_ls"
expr_stmt|;
name|docFields
index|[
name|j
operator|++
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|cardinality
argument_list|)
argument_list|)
expr_stmt|;
name|docFields
index|[
name|j
operator|++
index|]
operator|=
literal|"test_fs"
expr_stmt|;
name|docFields
index|[
name|j
operator|++
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
operator|*
name|cardinality
argument_list|)
expr_stmt|;
name|docFields
index|[
name|j
operator|++
index|]
operator|=
literal|"test_ds"
expr_stmt|;
name|docFields
index|[
name|j
operator|++
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|*
name|cardinality
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|adoc
argument_list|(
name|docFields
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
operator|==
literal|0
condition|)
block|{
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atLeast
argument_list|(
literal|100
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|doTestQuery
argument_list|(
name|cardinality
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Executes one query using interval faceting and compares with the same query using    * facet query with the same range    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|doTestQuery
specifier|private
name|void
name|doTestQuery
parameter_list|(
name|int
name|cardinality
parameter_list|,
name|String
index|[]
name|fields
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|startOptions
init|=
operator|new
name|String
index|[]
block|{
literal|"("
block|,
literal|"["
block|}
decl_stmt|;
name|String
index|[]
name|endOptions
init|=
operator|new
name|String
index|[]
block|{
literal|")"
block|,
literal|"]"
block|}
decl_stmt|;
comment|// the query should match some documents in most cases
name|Integer
index|[]
name|qRange
init|=
name|getRandomRange
argument_list|(
name|cardinality
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
literal|"id:["
operator|+
name|qRange
index|[
literal|0
index|]
operator|+
literal|" TO "
operator|+
name|qRange
index|[
literal|1
index|]
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"facet"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|String
name|field
init|=
name|fields
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|fields
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
comment|//choose from any of the fields
name|params
operator|.
name|set
argument_list|(
literal|"facet.interval"
argument_list|,
name|field
argument_list|)
expr_stmt|;
comment|// number of intervals
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|Integer
index|[]
name|interval
init|=
name|getRandomRange
argument_list|(
name|cardinality
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|String
name|open
init|=
name|startOptions
index|[
name|interval
index|[
literal|0
index|]
operator|%
literal|2
index|]
decl_stmt|;
name|String
name|close
init|=
name|endOptions
index|[
name|interval
index|[
literal|1
index|]
operator|%
literal|2
index|]
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"f."
operator|+
name|field
operator|+
literal|".facet.interval.set"
argument_list|,
name|open
operator|+
name|interval
index|[
literal|0
index|]
operator|+
literal|","
operator|+
name|interval
index|[
literal|1
index|]
operator|+
name|close
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"facet.query"
argument_list|,
name|field
operator|+
literal|":"
operator|+
name|open
operator|.
name|replace
argument_list|(
literal|'('
argument_list|,
literal|'{'
argument_list|)
operator|+
name|interval
index|[
literal|0
index|]
operator|+
literal|" TO "
operator|+
name|interval
index|[
literal|1
index|]
operator|+
name|close
operator|.
name|replace
argument_list|(
literal|')'
argument_list|,
literal|'}'
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
name|params
argument_list|)
decl_stmt|;
try|try
block|{
name|SolrQueryResponse
name|rsp
init|=
name|h
operator|.
name|queryAndResponse
argument_list|(
literal|"standard"
argument_list|,
name|req
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|facetQueries
init|=
call|(
name|NamedList
argument_list|<
name|Object
argument_list|>
call|)
argument_list|(
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|"facet_counts"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"facet_queries"
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|facetIntervals
init|=
call|(
name|NamedList
argument_list|<
name|Object
argument_list|>
call|)
argument_list|(
call|(
name|NamedList
argument_list|<
name|Object
argument_list|>
call|)
argument_list|(
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|)
operator|(
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|"facet_counts"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"facet_intervals"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Responses don't have the same number of facets: \n"
operator|+
name|facetQueries
operator|+
literal|"\n"
operator|+
name|facetIntervals
argument_list|,
name|facetQueries
operator|.
name|size
argument_list|()
argument_list|,
name|facetIntervals
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|facetIntervals
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Interval did not match: "
operator|+
name|facetIntervals
operator|.
name|getName
argument_list|(
name|i
argument_list|)
argument_list|,
name|facetIntervals
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|facetQueries
operator|.
name|get
argument_list|(
name|field
operator|+
literal|":"
operator|+
name|facetIntervals
operator|.
name|getName
argument_list|(
name|i
argument_list|)
operator|.
name|replace
argument_list|(
literal|","
argument_list|,
literal|" TO "
argument_list|)
operator|.
name|replace
argument_list|(
literal|'('
argument_list|,
literal|'{'
argument_list|)
operator|.
name|replace
argument_list|(
literal|')'
argument_list|,
literal|'}'
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Returns a random range. It's guaranteed that the first    * number will be lower than the second, and both of them    * between 0 (inclusive) and<code>max</code> (exclusive).    * If the fieldName is "test_s_dv" or "test_ss_dv" (the    * two fields used for Strings), the comparison will be done    * alphabetically    */
DECL|method|getRandomRange
specifier|private
name|Integer
index|[]
name|getRandomRange
parameter_list|(
name|int
name|max
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|Integer
index|[]
name|values
init|=
operator|new
name|Integer
index|[
literal|2
index|]
decl_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|max
argument_list|)
expr_stmt|;
name|values
index|[
literal|1
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|max
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldName
operator|.
name|startsWith
argument_list|(
literal|"test_s"
argument_list|)
condition|)
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|values
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Integer
name|o1
parameter_list|,
name|Integer
name|o2
parameter_list|)
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|o1
argument_list|)
operator|.
name|compareTo
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|o2
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
annotation|@
name|Test
DECL|method|testParse
specifier|public
name|void
name|testParse
parameter_list|()
throws|throws
name|SyntaxError
block|{
name|assertInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"(0,2)"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|1
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|0
block|,
operator|-
literal|1
block|,
name|Integer
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MIN_VALUE
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|2
block|,
literal|3
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"(0,2]"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|1
block|,
literal|2
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|0
block|,
operator|-
literal|1
block|,
name|Integer
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MIN_VALUE
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|3
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"[0,2]"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
operator|-
literal|1
block|,
name|Integer
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MIN_VALUE
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|3
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"[0,2)"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|0
block|,
literal|1
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
operator|-
literal|1
block|,
name|Integer
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MIN_VALUE
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|2
block|,
literal|3
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"(0,*)"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
operator|-
literal|1
block|,
literal|0
block|,
name|Integer
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MIN_VALUE
block|}
argument_list|,
operator|new
name|long
index|[]
block|{}
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"(*,2)"
argument_list|,
operator|new
name|long
index|[]
block|{
operator|-
literal|1
block|,
name|Integer
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MIN_VALUE
block|,
literal|0
block|,
literal|1
block|}
argument_list|,
operator|new
name|long
index|[]
block|{}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|2
block|,
literal|3
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"(*,*)"
argument_list|,
operator|new
name|long
index|[]
block|{
operator|-
literal|1
block|,
name|Integer
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MIN_VALUE
block|,
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
argument_list|,
operator|new
name|long
index|[]
block|{}
argument_list|,
operator|new
name|long
index|[]
block|{}
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"[0,*]"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
operator|-
literal|1
block|,
name|Integer
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MIN_VALUE
block|}
argument_list|,
operator|new
name|long
index|[]
block|{}
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"[*,2]"
argument_list|,
operator|new
name|long
index|[]
block|{
operator|-
literal|1
block|,
name|Integer
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MIN_VALUE
block|,
literal|0
block|,
literal|1
block|,
literal|2
block|}
argument_list|,
operator|new
name|long
index|[]
block|{}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|3
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"[*,*]"
argument_list|,
operator|new
name|long
index|[]
block|{
operator|-
literal|1
block|,
name|Integer
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MIN_VALUE
block|,
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
argument_list|,
operator|new
name|long
index|[]
block|{}
argument_list|,
operator|new
name|long
index|[]
block|{}
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"(2,2)"
argument_list|,
operator|new
name|long
index|[]
block|{}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|2
block|,
literal|1
block|,
literal|0
block|,
operator|-
literal|1
block|,
name|Integer
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MIN_VALUE
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|3
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"(0,0)"
argument_list|,
operator|new
name|long
index|[]
block|{}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|0
block|,
operator|-
literal|1
block|,
name|Integer
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MIN_VALUE
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"(0,"
operator|+
name|Long
operator|.
name|MAX_VALUE
operator|+
literal|"]"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|0
block|,
operator|-
literal|1
block|,
name|Integer
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MIN_VALUE
block|}
argument_list|,
operator|new
name|long
index|[]
block|{}
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"(0,"
operator|+
name|Long
operator|.
name|MAX_VALUE
operator|+
literal|")"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
name|Integer
operator|.
name|MAX_VALUE
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|0
block|,
operator|-
literal|1
block|,
name|Integer
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MIN_VALUE
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
name|Long
operator|.
name|MAX_VALUE
block|}
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"("
operator|+
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|",0)"
argument_list|,
operator|new
name|long
index|[]
block|{
operator|-
literal|1
block|,
name|Integer
operator|.
name|MIN_VALUE
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
name|Long
operator|.
name|MIN_VALUE
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|1
block|,
literal|2
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"["
operator|+
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|",0)"
argument_list|,
operator|new
name|long
index|[]
block|{
operator|-
literal|1
block|,
name|Integer
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MIN_VALUE
block|}
argument_list|,
operator|new
name|long
index|[]
block|{}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|1
block|,
literal|2
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"["
operator|+
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|","
operator|+
name|Long
operator|.
name|MAX_VALUE
operator|+
literal|"]"
argument_list|,
operator|new
name|long
index|[]
block|{
operator|-
literal|1
block|,
name|Integer
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MIN_VALUE
block|,
literal|1
block|,
literal|2
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
argument_list|,
operator|new
name|long
index|[]
block|{}
argument_list|,
operator|new
name|long
index|[]
block|{}
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"("
operator|+
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|","
operator|+
name|Long
operator|.
name|MAX_VALUE
operator|+
literal|")"
argument_list|,
operator|new
name|long
index|[]
block|{
operator|-
literal|1
block|,
name|Integer
operator|.
name|MIN_VALUE
block|,
literal|1
block|,
literal|2
block|,
name|Integer
operator|.
name|MAX_VALUE
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
name|Long
operator|.
name|MIN_VALUE
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
name|Long
operator|.
name|MAX_VALUE
block|}
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"( 0,2)"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|1
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|0
block|,
operator|-
literal|1
block|,
name|Integer
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MIN_VALUE
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|2
block|,
literal|3
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"(   0,2)"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|1
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|0
block|,
operator|-
literal|1
block|,
name|Integer
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MIN_VALUE
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|2
block|,
literal|3
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"(0,   2)"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|1
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|0
block|,
operator|-
literal|1
block|,
name|Integer
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MIN_VALUE
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|2
block|,
literal|3
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"(  0  ,   2  )"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|1
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|0
block|,
operator|-
literal|1
block|,
name|Integer
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MIN_VALUE
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|2
block|,
literal|3
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"  (  0  ,   2  )  "
argument_list|,
operator|new
name|long
index|[]
block|{
literal|1
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|0
block|,
operator|-
literal|1
block|,
name|Integer
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MIN_VALUE
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|2
block|,
literal|3
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"[-1,1]"
argument_list|,
operator|new
name|long
index|[]
block|{
operator|-
literal|1
block|,
literal|0
block|,
literal|1
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
operator|-
literal|2
block|,
name|Integer
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MIN_VALUE
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|2
block|,
literal|3
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
argument_list|)
expr_stmt|;
name|assertStringInterval
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"[A,B]"
argument_list|,
literal|"A"
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|assertStringInterval
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"[A,b]"
argument_list|,
literal|"A"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|assertStringInterval
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"[A\\,,B]"
argument_list|,
literal|"A,"
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|assertStringInterval
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"[A\\),B]"
argument_list|,
literal|"A)"
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|assertStringInterval
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"['A',B]"
argument_list|,
literal|"'A'"
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|assertStringInterval
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"[\"A\",B]"
argument_list|,
literal|"\"A\""
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|assertStringInterval
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"[A B C,B]"
argument_list|,
literal|"A B C"
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|assertStringInterval
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"[ A B C ,B]"
argument_list|,
literal|"A B C"
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
comment|//    These two are currently not possible
comment|//    assertStringInterval("test_s_dv", "[\\ A B C ,B]", " A B C", "B");
comment|//    assertStringInterval("test_s_dv", "[\\*,B]", "*", "B");
comment|//invalid intervals
name|assertBadInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"0,2)"
argument_list|,
literal|"Invalid start character"
argument_list|)
expr_stmt|;
name|assertBadInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"{0,2)"
argument_list|,
literal|"Invalid start character"
argument_list|)
expr_stmt|;
name|assertBadInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"(0,2"
argument_list|,
literal|"Invalid end character"
argument_list|)
expr_stmt|;
name|assertBadInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"(0,2}"
argument_list|,
literal|"Invalid end character"
argument_list|)
expr_stmt|;
name|assertBadInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"(0, )"
argument_list|,
literal|"Empty interval limit"
argument_list|)
expr_stmt|;
name|assertBadInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"(0)"
argument_list|,
literal|"Missing unescaped comma separating interval"
argument_list|)
expr_stmt|;
name|assertBadInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"(,0)"
argument_list|,
literal|"Empty interval limit"
argument_list|)
expr_stmt|;
name|assertBadInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"(0 2)"
argument_list|,
literal|"Missing unescaped comma separating interval"
argument_list|)
expr_stmt|;
name|assertBadInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"(0 TO 2)"
argument_list|,
literal|"Missing unescaped comma separating interval"
argument_list|)
expr_stmt|;
name|assertBadInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"(0 \\, 2)"
argument_list|,
literal|"Missing unescaped comma separating interval"
argument_list|)
expr_stmt|;
name|assertBadInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"(A, 2)"
argument_list|,
literal|"Invalid start interval for key"
argument_list|)
expr_stmt|;
name|assertBadInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"(2, A)"
argument_list|,
literal|"Invalid end interval for key"
argument_list|)
expr_stmt|;
name|assertBadInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"(0,)"
argument_list|,
literal|"Empty interval limit"
argument_list|)
expr_stmt|;
name|assertBadInterval
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"(0,-1)"
argument_list|,
literal|"Start is higher than end in interval for key"
argument_list|)
expr_stmt|;
name|assertBadInterval
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"A,B)"
argument_list|,
literal|"Invalid start character"
argument_list|)
expr_stmt|;
name|assertBadInterval
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"(B,A)"
argument_list|,
literal|"Start is higher than end in interval for key"
argument_list|)
expr_stmt|;
name|assertBadInterval
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"(a,B)"
argument_list|,
literal|"Start is higher than end in interval for key"
argument_list|)
expr_stmt|;
name|assertIntervalKey
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"[A,B]"
argument_list|,
literal|"[A,B]"
argument_list|)
expr_stmt|;
name|assertIntervalKey
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"(A,*]"
argument_list|,
literal|"(A,*]"
argument_list|)
expr_stmt|;
name|assertIntervalKey
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"{!}(A,*]"
argument_list|,
literal|"(A,*]"
argument_list|)
expr_stmt|;
name|assertIntervalKey
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"{!key=foo}(A,*]"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertIntervalKey
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"{!key='foo'}(A,*]"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertIntervalKey
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"{!key='foo bar'}(A,*]"
argument_list|,
literal|"foo bar"
argument_list|)
expr_stmt|;
name|assertIntervalKey
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"{!key='foo' bar}(A,*]"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertIntervalKey
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"{!key=$i}(A,*]"
argument_list|,
literal|"foo"
argument_list|,
literal|"i"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertIntervalKey
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"{!key=$i}(A,*]"
argument_list|,
literal|"foo bar"
argument_list|,
literal|"i"
argument_list|,
literal|"foo bar"
argument_list|)
expr_stmt|;
name|assertIntervalKey
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"{!key=$i}(A,*]"
argument_list|,
literal|"'foo'"
argument_list|,
literal|"i"
argument_list|,
literal|"'foo'"
argument_list|)
expr_stmt|;
name|assertIntervalKey
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"{!key=$i}(A,*]"
argument_list|,
literal|"\"foo\""
argument_list|,
literal|"i"
argument_list|,
literal|"\"foo\""
argument_list|)
expr_stmt|;
name|assertIntervalKey
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"{!key='[A,B]'}(A,B)"
argument_list|,
literal|"[A,B]"
argument_list|)
expr_stmt|;
name|assertIntervalKey
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"{!key='\\{\\{\\{'}(A,B)"
argument_list|,
literal|"{{{"
argument_list|)
expr_stmt|;
name|assertIntervalKey
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"{!key='\\{A,B\\}'}(A,B)"
argument_list|,
literal|"{A,B}"
argument_list|)
expr_stmt|;
name|assertIntervalKey
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"{!key='\"A,B\"'}(A,B)"
argument_list|,
literal|"\"A,B\""
argument_list|)
expr_stmt|;
name|assertIntervalKey
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"{!key='A..B'}(A,B)"
argument_list|,
literal|"A..B"
argument_list|)
expr_stmt|;
name|assertIntervalKey
argument_list|(
literal|"test_s_dv"
argument_list|,
literal|"{!key='A TO B'}(A,B)"
argument_list|,
literal|"A TO B"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"dog"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"cat"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"bird"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"turtle"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"\\goodbye,"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|",hello\\"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"6"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"dog"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"dog"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"8"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"cat"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"9"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// facet.interval not set
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"f.test_s_dv.facet.interval.set"
argument_list|,
literal|"[cat,dog]"
argument_list|,
literal|"f.test_l_dv.facet.interval.set"
argument_list|,
literal|"[3,6]"
argument_list|,
literal|"f.test_l_dv.facet.interval.set"
argument_list|,
literal|"[5,9]"
argument_list|)
argument_list|,
literal|"count(//lst[@name='facet_intervals']/lst)=0"
argument_list|)
expr_stmt|;
comment|// facet.interval only on one of the fields
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.interval"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"f.test_s_dv.facet.interval.set"
argument_list|,
literal|"[cat,dog]"
argument_list|,
literal|"f.test_l_dv.facet.interval.set"
argument_list|,
literal|"[3,6]"
argument_list|,
literal|"f.test_l_dv.facet.interval.set"
argument_list|,
literal|"[5,9]"
argument_list|)
argument_list|,
literal|"count(//lst[@name='facet_intervals']/lst)=1"
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[cat,dog]'][.=5]"
argument_list|)
expr_stmt|;
comment|// existing fields in facet.interval with no intervals defined
name|assertQEx
argument_list|(
literal|"Unexpected exception"
argument_list|,
literal|"Missing required parameter: f.test_l_dv.facet.interval.set (or default: facet.interval.set)"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.interval"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"facet.interval"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"f.test_s_dv.facet.interval.set"
argument_list|,
literal|"[cat,dog]"
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
comment|// use of facet.interval.set
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.interval"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"facet.interval"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"facet.interval.set"
argument_list|,
literal|"[1,2]"
argument_list|)
argument_list|,
literal|"count(//lst[@name='facet_intervals']/lst)=2"
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[1,2]'][.=0]"
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[1,2]'][.=2]"
argument_list|)
expr_stmt|;
comment|// multiple facet.interval.set
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.interval"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"facet.interval"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"facet.interval.set"
argument_list|,
literal|"[1,2]"
argument_list|,
literal|"facet.interval.set"
argument_list|,
literal|"[2,3]"
argument_list|,
literal|"facet.interval.set"
argument_list|,
literal|"[3,4]"
argument_list|)
argument_list|,
literal|"count(//lst[@name='facet_intervals']/lst)=2"
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[1,2]'][.=0]"
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[2,3]'][.=0]"
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[3,4]'][.=0]"
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[1,2]'][.=2]"
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[2,3]'][.=2]"
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[3,4]'][.=2]"
argument_list|)
expr_stmt|;
comment|// use of facet.interval.set and override
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.interval"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"facet.interval"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"facet.interval.set"
argument_list|,
literal|"[1,2]"
argument_list|,
literal|"f.test_l_dv.facet.interval.set"
argument_list|,
literal|"[3,4]"
argument_list|,
literal|"f.test_l_dv.facet.interval.set"
argument_list|,
literal|"[4,5]"
argument_list|)
argument_list|,
literal|"count(//lst[@name='facet_intervals']/lst)=2"
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[1,2]'][.=0]"
argument_list|,
literal|"count(//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int)=2"
argument_list|,
comment|// interval [1,2] not present
literal|"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[3,4]'][.=2]"
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[4,5]'][.=2]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.interval"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"facet.interval"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"facet.interval.set"
argument_list|,
literal|"[1,2]"
argument_list|,
literal|"facet.interval.set"
argument_list|,
literal|"[2,3]"
argument_list|,
literal|"facet.interval.set"
argument_list|,
literal|"[3,4]"
argument_list|,
literal|"f.test_s_dv.facet.interval.set"
argument_list|,
literal|"[cat,dog]"
argument_list|)
argument_list|,
literal|"count(//lst[@name='facet_intervals']/lst)=2"
argument_list|,
literal|"count(//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int)=1"
argument_list|,
comment|// only [cat,dog] in test_s_dv
literal|"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[cat,dog]'][.=5]"
argument_list|,
literal|"count(//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int)=3"
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[1,2]'][.=2]"
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[2,3]'][.=2]"
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_l_dv']/int[@name='[3,4]'][.=2]"
argument_list|)
expr_stmt|;
comment|// use of facet.interval.set with wrong field type
name|assertQEx
argument_list|(
literal|"Unexpected Exception"
argument_list|,
literal|"Invalid start interval"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.interval"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"f.test_l_dv.facet.interval.set"
argument_list|,
literal|"[cat,dog]"
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
DECL|method|assertStringInterval
specifier|private
name|void
name|assertStringInterval
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|intervalStr
parameter_list|,
name|String
name|expectedStart
parameter_list|,
name|String
name|expectedEnd
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|SchemaField
name|f
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|FacetInterval
name|interval
init|=
operator|new
name|FacetInterval
argument_list|(
name|f
argument_list|,
name|intervalStr
argument_list|,
operator|new
name|ModifiableSolrParams
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected start "
operator|+
name|expectedStart
operator|+
literal|" but found "
operator|+
name|f
operator|.
name|getType
argument_list|()
operator|.
name|toObject
argument_list|(
name|f
argument_list|,
name|interval
operator|.
name|start
argument_list|)
argument_list|,
name|interval
operator|.
name|start
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|f
operator|.
name|getType
argument_list|()
operator|.
name|toInternal
argument_list|(
name|expectedStart
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected end "
operator|+
name|expectedEnd
operator|+
literal|" but found "
operator|+
name|f
operator|.
name|getType
argument_list|()
operator|.
name|toObject
argument_list|(
name|f
argument_list|,
name|interval
operator|.
name|end
argument_list|)
argument_list|,
name|interval
operator|.
name|end
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|f
operator|.
name|getType
argument_list|()
operator|.
name|toInternal
argument_list|(
name|expectedEnd
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertBadInterval
specifier|private
name|void
name|assertBadInterval
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|intervalStr
parameter_list|,
name|String
name|errorMsg
parameter_list|)
block|{
name|SchemaField
name|f
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
try|try
block|{
operator|new
name|FacetInterval
argument_list|(
name|f
argument_list|,
name|intervalStr
argument_list|,
operator|new
name|ModifiableSolrParams
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expecting SyntaxError for interval String: "
operator|+
name|intervalStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SyntaxError
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Unexpected error message for interval String: "
operator|+
name|intervalStr
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|errorMsg
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertInterval
specifier|private
name|void
name|assertInterval
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|intervalStr
parameter_list|,
name|long
index|[]
name|included
parameter_list|,
name|long
index|[]
name|lowerThanStart
parameter_list|,
name|long
index|[]
name|graterThanEnd
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|SchemaField
name|f
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|FacetInterval
name|interval
init|=
operator|new
name|FacetInterval
argument_list|(
name|f
argument_list|,
name|intervalStr
argument_list|,
operator|new
name|ModifiableSolrParams
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|l
range|:
name|included
control|)
block|{
name|assertEquals
argument_list|(
literal|"Value "
operator|+
name|l
operator|+
literal|" should be INCLUDED for interval"
operator|+
name|interval
argument_list|,
name|IntervalCompareResult
operator|.
name|INCLUDED
argument_list|,
name|interval
operator|.
name|includes
argument_list|(
name|l
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|long
name|l
range|:
name|lowerThanStart
control|)
block|{
name|assertEquals
argument_list|(
literal|"Value "
operator|+
name|l
operator|+
literal|" should be LOWER_THAN_START for inteval "
operator|+
name|interval
argument_list|,
name|IntervalCompareResult
operator|.
name|LOWER_THAN_START
argument_list|,
name|interval
operator|.
name|includes
argument_list|(
name|l
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|long
name|l
range|:
name|graterThanEnd
control|)
block|{
name|assertEquals
argument_list|(
literal|"Value "
operator|+
name|l
operator|+
literal|" should be GRATER_THAN_END for inteval "
operator|+
name|interval
argument_list|,
name|IntervalCompareResult
operator|.
name|GREATER_THAN_END
argument_list|,
name|interval
operator|.
name|includes
argument_list|(
name|l
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertIntervalKey
specifier|private
name|void
name|assertIntervalKey
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|intervalStr
parameter_list|,
name|String
name|expectedKey
parameter_list|,
name|String
modifier|...
name|params
parameter_list|)
throws|throws
name|SyntaxError
block|{
assert|assert
operator|(
name|params
operator|.
name|length
operator|&
literal|1
operator|)
operator|==
literal|0
operator|:
literal|"Params must have an even number of elements"
assert|;
name|SchemaField
name|f
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|ModifiableSolrParams
name|solrParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|length
operator|-
literal|1
condition|;
control|)
block|{
name|solrParams
operator|.
name|set
argument_list|(
name|params
index|[
name|i
index|]
argument_list|,
name|params
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
name|FacetInterval
name|interval
init|=
operator|new
name|FacetInterval
argument_list|(
name|f
argument_list|,
name|intervalStr
argument_list|,
name|solrParams
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected key "
operator|+
name|expectedKey
operator|+
literal|" but found "
operator|+
name|interval
operator|.
name|getKey
argument_list|()
argument_list|,
name|expectedKey
argument_list|,
name|interval
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testChangeKey
specifier|public
name|void
name|testChangeKey
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"bird"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"turtle"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.interval"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"f.test_s_dv.facet.interval.set"
argument_list|,
literal|"{!key=foo}[bird,bird]"
argument_list|,
literal|"f.test_s_dv.facet.interval.set"
argument_list|,
literal|"{!key='bar'}(bird,dog)"
argument_list|)
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='foo'][.=1]"
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='bar'][.=3]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.interval"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"f.test_s_dv.facet.interval.set"
argument_list|,
literal|"{!key=Birds}[bird,bird]"
argument_list|,
literal|"f.test_s_dv.facet.interval.set"
argument_list|,
literal|"{!key='foo bar'}(bird,dog)"
argument_list|)
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='Birds'][.=1]"
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='foo bar'][.=3]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.interval"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"f.test_s_dv.facet.interval.set"
argument_list|,
literal|"{!key=$p}[bird,bird]"
argument_list|,
literal|"p"
argument_list|,
literal|"foo bar"
argument_list|)
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='foo bar'][.=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.interval"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"f.test_s_dv.facet.interval.set"
argument_list|,
literal|"{!key='[bird,\\}'}[bird,*]"
argument_list|,
literal|"f.test_s_dv.facet.interval.set"
argument_list|,
literal|"{!key='\\{bird,dog\\}'}(bird,dog)"
argument_list|,
literal|"f.test_s_dv.facet.interval.set"
argument_list|,
literal|"{!key='foo'}(bird,dog})"
argument_list|)
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[bird,}'][.=9]"
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='{bird,dog}'][.=3]"
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='foo'][.=7]"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongFields
specifier|public
name|void
name|testLongFields
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"6"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"8"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"11"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertIntervalQueriesNumeric
argument_list|(
literal|"test_l_dv"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"12"
argument_list|,
literal|"test_l_dv"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"13"
argument_list|,
literal|"test_l_dv"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"14"
argument_list|,
literal|"test_l_dv"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"[0,"
operator|+
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|"]"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"["
operator|+
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|","
operator|+
name|Long
operator|.
name|MAX_VALUE
operator|+
literal|"]"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
literal|"test_l_dv"
argument_list|,
literal|"["
operator|+
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|",*]"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatFields
specifier|public
name|void
name|testFloatFields
parameter_list|()
block|{
name|doTestFloat
argument_list|(
literal|"test_f_dv"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestFloat
specifier|private
name|void
name|doTestFloat
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
name|field
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
name|field
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
name|field
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
name|field
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
name|field
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
name|field
argument_list|,
literal|"6"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
name|field
argument_list|,
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|,
name|field
argument_list|,
literal|"8"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"11"
argument_list|,
name|field
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertIntervalQueriesNumeric
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"12"
argument_list|,
name|field
argument_list|,
literal|"1.3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"13"
argument_list|,
name|field
argument_list|,
literal|"4.5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"14"
argument_list|,
name|field
argument_list|,
literal|"6.7"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"15"
argument_list|,
name|field
argument_list|,
literal|"123.45"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
name|field
argument_list|,
literal|"[0,"
operator|+
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|"]"
argument_list|,
literal|"14"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
name|field
argument_list|,
literal|"[0,1]"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
name|field
argument_list|,
literal|"[0,2]"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
name|field
argument_list|,
literal|"(1,2)"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
name|field
argument_list|,
literal|"(1,1)"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
name|field
argument_list|,
literal|"(4,7)"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
name|field
argument_list|,
literal|"(123,*)"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoubleFields
specifier|public
name|void
name|testDoubleFields
parameter_list|()
block|{
name|doTestFloat
argument_list|(
literal|"test_d_dv"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntFields
specifier|public
name|void
name|testIntFields
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"test_i_dv"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"test_i_dv"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"test_i_dv"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"test_i_dv"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"test_i_dv"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"test_i_dv"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"test_i_dv"
argument_list|,
literal|"6"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"test_i_dv"
argument_list|,
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|,
literal|"test_i_dv"
argument_list|,
literal|"8"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"11"
argument_list|,
literal|"test_i_dv"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertIntervalQueriesNumeric
argument_list|(
literal|"test_i_dv"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntFieldsMultipleSegments
specifier|public
name|void
name|testIntFieldsMultipleSegments
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"test_i_dv"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"test_i_dv"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"test_i_dv"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"test_i_dv"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"test_i_dv"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"test_i_dv"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"test_i_dv"
argument_list|,
literal|"6"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"test_i_dv"
argument_list|,
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|,
literal|"test_i_dv"
argument_list|,
literal|"8"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"11"
argument_list|,
literal|"test_i_dv"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|12
decl_stmt|;
while|while
condition|(
name|getNumberOfReaders
argument_list|()
operator|<
literal|2
operator|&&
name|i
operator|<
literal|10
condition|)
block|{
comment|//try to get more than one segment
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"test_s_dv"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getNumberOfReaders
argument_list|()
operator|<
literal|2
condition|)
block|{
comment|// It is OK if for some seeds we fall into this case (for example, TieredMergePolicy with
comment|// segmentsPerTier=2). Most of the case we shouldn't and the test should proceed.
name|log
operator|.
name|warn
argument_list|(
literal|"Could not generate more than 1 segment for this seed. Will skip the test"
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertIntervalQueriesNumeric
argument_list|(
literal|"test_i_dv"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntMultivaluedFields
specifier|public
name|void
name|testIntMultivaluedFields
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"test_is_dv"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"test_is_dv"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"test_is_dv"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"test_is_dv"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"test_is_dv"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"test_is_dv"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"test_is_dv"
argument_list|,
literal|"6"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"test_is_dv"
argument_list|,
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|,
literal|"test_is_dv"
argument_list|,
literal|"8"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"11"
argument_list|,
literal|"test_is_dv"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertIntervalQueriesNumeric
argument_list|(
literal|"test_is_dv"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"test_is_dv"
argument_list|,
literal|"0"
argument_list|,
literal|"test_is_dv"
argument_list|,
literal|"1"
argument_list|,
literal|"test_is_dv"
argument_list|,
literal|"2"
argument_list|,
literal|"test_is_dv"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"test_is_dv"
argument_list|,
literal|"1"
argument_list|,
literal|"test_is_dv"
argument_list|,
literal|"2"
argument_list|,
literal|"test_is_dv"
argument_list|,
literal|"3"
argument_list|,
literal|"test_is_dv"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"test_is_dv"
argument_list|,
literal|"2"
argument_list|,
literal|"test_is_dv"
argument_list|,
literal|"3"
argument_list|,
literal|"test_is_dv"
argument_list|,
literal|"4"
argument_list|,
literal|"test_is_dv"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"test_is_dv"
argument_list|,
literal|"3"
argument_list|,
literal|"test_is_dv"
argument_list|,
literal|"4"
argument_list|,
literal|"test_is_dv"
argument_list|,
literal|"5"
argument_list|,
literal|"test_is_dv"
argument_list|,
literal|"6"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
literal|"test_is_dv"
argument_list|,
literal|"[1,3]"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
literal|"test_is_dv"
argument_list|,
literal|"[3,3]"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
literal|"test_is_dv"
argument_list|,
literal|"[5,9]"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
literal|"test_is_dv"
argument_list|,
literal|"(5,9)"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
literal|"test_is_dv"
argument_list|,
literal|"[*,*]"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDateFields
specifier|public
name|void
name|testDateFields
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"test_dt_dv"
argument_list|,
literal|"2013-01-01T00:00:00Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"test_dt_dv"
argument_list|,
literal|"2013-01-02T00:00:00Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"test_dt_dv"
argument_list|,
literal|"2013-02-01T00:00:00Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"test_dt_dv"
argument_list|,
literal|"2014-01-01T00:00:00Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"test_dt_dv"
argument_list|,
literal|"2100-01-01T00:00:00Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"test_dt_dv"
argument_list|,
literal|"2013-01-01T10:00:00Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"test_dt_dv"
argument_list|,
literal|"2013-01-01T00:10:00Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"test_dt_dv"
argument_list|,
literal|"2013-01-01T00:00:10Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
literal|"test_dt_dv"
argument_list|,
literal|"[*,*]"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
literal|"test_dt_dv"
argument_list|,
literal|"[*,2014-01-01T00:00:00Z]"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
literal|"test_dt_dv"
argument_list|,
literal|"[*,2014-01-01T00:00:00Z)"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
literal|"test_dt_dv"
argument_list|,
literal|"[*,2014-01-01T00:00:00.001Z)"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
literal|"test_dt_dv"
argument_list|,
literal|"[*,2013-12-31T23:59:59.999Z]"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
literal|"test_dt_dv"
argument_list|,
literal|"[2013-12-31T23:59:59.9999Z,2014-01-01T00:00:00.001Z]"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
literal|"test_dt_dv"
argument_list|,
literal|"[NOW,*]"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
literal|"test_dt_dv"
argument_list|,
literal|"[*,NOW]"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"test_dt_dv"
argument_list|,
literal|"NOW"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
literal|"test_dt_dv"
argument_list|,
literal|"[NOW/DAY-1DAY,NOW+2DAY]"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithDeletedDocs
specifier|public
name|void
name|testWithDeletedDocs
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"bird"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"16"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"turtle"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"\\goodbye,"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|",hello\\"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"15"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"11"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"the"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"12"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"quick brown"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"13"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"fox"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"14"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"jumped over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|delI
argument_list|(
literal|"16"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|delI
argument_list|(
literal|"15"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|delQ
argument_list|(
literal|"id:[11 TO 14]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertIntervalQueriesString
argument_list|(
literal|"test_s_dv"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChangeFieldKey
specifier|public
name|void
name|testChangeFieldKey
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"dog"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"cat"
argument_list|,
literal|"test_l_dv"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.interval"
argument_list|,
literal|"{!key=foo}test_s_dv"
argument_list|,
literal|"facet.interval"
argument_list|,
literal|"{!key=bar}test_l_dv"
argument_list|,
literal|"f.test_s_dv.facet.interval.set"
argument_list|,
literal|"[cat,dog]"
argument_list|,
literal|"f.test_l_dv.facet.interval.set"
argument_list|,
literal|"[0,1]"
argument_list|,
literal|"f.test_l_dv.facet.interval.set"
argument_list|,
literal|"[2,*]"
argument_list|)
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='foo']/int[@name='[cat,dog]'][.=2]"
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='bar']/int[@name='[0,1]'][.=1]"
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='bar']/int[@name='[2,*]'][.=1]"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilterExclusion
specifier|public
name|void
name|testFilterExclusion
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"bird"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"turtle"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.interval"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"f.test_s_dv.facet.interval.set"
argument_list|,
literal|"[a,d]"
argument_list|,
literal|"f.test_s_dv.facet.interval.set"
argument_list|,
literal|"[d,z]"
argument_list|)
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[a,d]'][.=4]"
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[d,z]'][.=5]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.interval"
argument_list|,
literal|"test_s_dv"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"f.test_s_dv.facet.interval.set"
argument_list|,
literal|"[a,d]"
argument_list|,
literal|"f.test_s_dv.facet.interval.set"
argument_list|,
literal|"[d,z]"
argument_list|,
literal|"fq"
argument_list|,
literal|"test_s_dv:dog"
argument_list|)
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[a,d]'][.=0]"
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[d,z]'][.=4]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.interval"
argument_list|,
literal|"{!ex=dogs}test_s_dv"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"f.test_s_dv.facet.interval.set"
argument_list|,
literal|"[a,d]"
argument_list|,
literal|"f.test_s_dv.facet.interval.set"
argument_list|,
literal|"[d,z]"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag='dogs'}test_s_dv:dog"
argument_list|)
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[a,d]'][.=4]"
argument_list|,
literal|"//lst[@name='facet_intervals']/lst[@name='test_s_dv']/int[@name='[d,z]'][.=5]"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSolrJ
specifier|public
name|void
name|testSolrJ
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"test_i_dv"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"test_i_dv"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"test_i_dv"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// Don't close this client, it would shutdown the CoreContainer
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
name|SolrClient
name|client
init|=
operator|new
name|EmbeddedSolrServer
argument_list|(
name|h
operator|.
name|getCoreContainer
argument_list|()
argument_list|,
name|h
operator|.
name|coreName
argument_list|)
decl_stmt|;
name|SolrQuery
name|q
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|q
operator|.
name|setQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|q
operator|.
name|addIntervalFacets
argument_list|(
literal|"test_i_dv"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"[0,1]"
block|,
literal|"[2,*]"
block|}
argument_list|)
expr_stmt|;
name|QueryResponse
name|response
init|=
name|client
operator|.
name|query
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getIntervalFacets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test_i_dv"
argument_list|,
name|response
operator|.
name|getIntervalFacets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|response
operator|.
name|getIntervalFacets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIntervals
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[0,1]"
argument_list|,
name|response
operator|.
name|getIntervalFacets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIntervals
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[2,*]"
argument_list|,
name|response
operator|.
name|getIntervalFacets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIntervals
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|=
operator|new
name|SolrQuery
argument_list|()
expr_stmt|;
name|q
operator|.
name|setQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setFacet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
literal|"facet.interval"
argument_list|,
literal|"{!key=foo}test_i_dv"
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
literal|"f.test_i_dv.facet.interval.set"
argument_list|,
literal|"{!key=first}[0,1]"
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
literal|"f.test_i_dv.facet.interval.set"
argument_list|,
literal|"{!key=second}[2,*]"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|query
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getIntervalFacets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|response
operator|.
name|getIntervalFacets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|response
operator|.
name|getIntervalFacets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIntervals
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"first"
argument_list|,
name|response
operator|.
name|getIntervalFacets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIntervals
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"second"
argument_list|,
name|response
operator|.
name|getIntervalFacets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIntervals
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertIntervalQueriesNumeric
specifier|private
name|void
name|assertIntervalQueriesNumeric
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|assertIntervalQuery
argument_list|(
name|field
argument_list|,
literal|"[0,1]"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
name|field
argument_list|,
literal|"(0,2)"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
name|field
argument_list|,
literal|"[0,2)"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
name|field
argument_list|,
literal|"(0,2]"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
name|field
argument_list|,
literal|"[*,5]"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
name|field
argument_list|,
literal|"[*,3)"
argument_list|,
literal|"3"
argument_list|,
literal|"[2,5)"
argument_list|,
literal|"3"
argument_list|,
literal|"[6,8)"
argument_list|,
literal|"2"
argument_list|,
literal|"[3,*]"
argument_list|,
literal|"7"
argument_list|,
literal|"[10,10]"
argument_list|,
literal|"1"
argument_list|,
literal|"[10,10]"
argument_list|,
literal|"1"
argument_list|,
literal|"[10,10]"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertIntervalQueriesString
specifier|private
name|void
name|assertIntervalQueriesString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|assertIntervalQuery
argument_list|(
name|field
argument_list|,
literal|"[bird,bird]"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
name|field
argument_list|,
literal|"(bird,dog)"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
name|field
argument_list|,
literal|"[bird,dog)"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
name|field
argument_list|,
literal|"(bird,turtle]"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
name|field
argument_list|,
literal|"[*,bird]"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
name|field
argument_list|,
literal|"[*,bird)"
argument_list|,
literal|"2"
argument_list|,
literal|"[bird,cat)"
argument_list|,
literal|"1"
argument_list|,
literal|"[cat,dog)"
argument_list|,
literal|"2"
argument_list|,
literal|"[dog,*]"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
name|field
argument_list|,
literal|"[*,*]"
argument_list|,
literal|"9"
argument_list|,
literal|"[*,dog)"
argument_list|,
literal|"5"
argument_list|,
literal|"[*,dog]"
argument_list|,
literal|"8"
argument_list|,
literal|"[dog,*]"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|assertIntervalQuery
argument_list|(
name|field
argument_list|,
name|field
operator|+
literal|":dog"
argument_list|,
literal|3
argument_list|,
literal|"[*,*]"
argument_list|,
literal|"3"
argument_list|,
literal|"[*,dog)"
argument_list|,
literal|"0"
argument_list|,
literal|"[*,dog]"
argument_list|,
literal|"3"
argument_list|,
literal|"[dog,*]"
argument_list|,
literal|"3"
argument_list|,
literal|"[bird,cat]"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Will run a match all query, and ask for interval facets in the specified field.    * The intervals facet are indicated in the<code>intervals</code> parameter, followed    * by the expected count result. For example:    *<code>assertIntervalQuery("my_string_field", "[0,10]", "3", "(20,*), "12");</code>    *    * @param field     The field in which the interval facet should be asked    * @param intervals a variable array of intervals followed by the expected count (also a string)    */
DECL|method|assertIntervalQuery
specifier|private
name|void
name|assertIntervalQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
modifier|...
name|intervals
parameter_list|)
block|{
name|assertIntervalQuery
argument_list|(
name|field
argument_list|,
literal|"*:*"
argument_list|,
operator|-
literal|1
argument_list|,
name|intervals
argument_list|)
expr_stmt|;
block|}
DECL|method|assertIntervalQuery
specifier|private
name|void
name|assertIntervalQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|query
parameter_list|,
name|int
name|resultCount
parameter_list|,
name|String
modifier|...
name|intervals
parameter_list|)
block|{
assert|assert
operator|(
name|intervals
operator|.
name|length
operator|&
literal|1
operator|)
operator|==
literal|0
assert|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|String
index|[]
name|params
init|=
operator|new
name|String
index|[
name|intervals
operator|.
name|length
operator|+
literal|6
index|]
decl_stmt|;
name|params
index|[
name|idx
operator|++
index|]
operator|=
literal|"q"
expr_stmt|;
name|params
index|[
name|idx
operator|++
index|]
operator|=
name|query
expr_stmt|;
name|params
index|[
name|idx
operator|++
index|]
operator|=
literal|"facet"
expr_stmt|;
name|params
index|[
name|idx
operator|++
index|]
operator|=
literal|"true"
expr_stmt|;
name|params
index|[
name|idx
operator|++
index|]
operator|=
literal|"facet.interval"
expr_stmt|;
name|params
index|[
name|idx
operator|++
index|]
operator|=
name|field
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|intervals
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|params
index|[
name|idx
operator|++
index|]
operator|=
literal|"f."
operator|+
name|field
operator|+
literal|".facet.interval.set"
expr_stmt|;
name|params
index|[
name|idx
operator|++
index|]
operator|=
name|intervals
index|[
name|i
index|]
expr_stmt|;
block|}
name|String
index|[]
name|tests
init|=
operator|new
name|String
index|[
name|intervals
operator|.
name|length
operator|/
literal|2
operator|+
operator|(
name|resultCount
operator|>
literal|0
condition|?
literal|1
else|:
literal|0
operator|)
index|]
decl_stmt|;
name|idx
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|intervals
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|tests
index|[
name|idx
operator|++
index|]
operator|=
literal|"//lst[@name='facet_intervals']/lst[@name='"
operator|+
name|field
operator|+
literal|"']/int[@name='"
operator|+
name|intervals
index|[
name|i
index|]
operator|+
literal|"'][.="
operator|+
name|intervals
index|[
name|i
operator|+
literal|1
index|]
operator|+
literal|"]"
expr_stmt|;
block|}
if|if
condition|(
name|resultCount
operator|>=
literal|0
condition|)
block|{
name|tests
index|[
name|idx
operator|++
index|]
operator|=
literal|"//*[@numFound='"
operator|+
name|resultCount
operator|+
literal|"']"
expr_stmt|;
block|}
name|assertQ
argument_list|(
literal|"Unexpected facet iterval count. Field:"
operator|+
name|field
operator|+
literal|", Intervals: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|intervals
argument_list|)
operator|+
literal|"Query: "
operator|+
name|query
argument_list|,
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
name|tests
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
