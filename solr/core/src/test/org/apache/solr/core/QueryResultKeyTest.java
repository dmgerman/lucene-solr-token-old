begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|QueryResultKey
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|QueryResultKeyTest
specifier|public
class|class
name|QueryResultKeyTest
extends|extends
name|SolrTestCaseJ4
block|{
DECL|method|testFiltersOutOfOrder1
specifier|public
name|void
name|testFiltersOutOfOrder1
parameter_list|()
block|{
comment|// the hashcode should be the same even when the list
comment|// of filters is in a different order
name|Sort
name|sort
init|=
operator|new
name|Sort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"test"
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
decl_stmt|;
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"test"
argument_list|,
literal|"field"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|filters
init|=
name|Arrays
operator|.
expr|<
name|Query
operator|>
name|asList
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"test"
argument_list|,
literal|"field"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"test2"
argument_list|,
literal|"field2"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QueryResultKey
name|qrk1
init|=
operator|new
name|QueryResultKey
argument_list|(
name|query
argument_list|,
name|filters
argument_list|,
name|sort
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|filters2
init|=
name|Arrays
operator|.
expr|<
name|Query
operator|>
name|asList
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"test2"
argument_list|,
literal|"field2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"test"
argument_list|,
literal|"field"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QueryResultKey
name|qrk2
init|=
operator|new
name|QueryResultKey
argument_list|(
name|query
argument_list|,
name|filters2
argument_list|,
name|sort
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertKeyEquals
argument_list|(
name|qrk1
argument_list|,
name|qrk2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFiltersOutOfOrder2
specifier|public
name|void
name|testFiltersOutOfOrder2
parameter_list|()
block|{
name|Query
name|fq1
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"test1"
argument_list|,
literal|"field1"
argument_list|)
argument_list|)
decl_stmt|;
name|Query
name|fq2
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"test2"
argument_list|,
literal|"field2"
argument_list|)
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"test3"
argument_list|,
literal|"field3"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|filters
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|fq1
argument_list|,
name|fq2
argument_list|)
decl_stmt|;
name|QueryResultKey
name|key
init|=
operator|new
name|QueryResultKey
argument_list|(
name|query
argument_list|,
name|filters
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|newFilters
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|fq2
argument_list|,
name|fq1
argument_list|)
decl_stmt|;
name|QueryResultKey
name|newKey
init|=
operator|new
name|QueryResultKey
argument_list|(
name|query
argument_list|,
name|newFilters
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertKeyEquals
argument_list|(
name|key
argument_list|,
name|newKey
argument_list|)
expr_stmt|;
block|}
DECL|method|testQueryResultKeyUnSortedFiltersWithDups
specifier|public
name|void
name|testQueryResultKeyUnSortedFiltersWithDups
parameter_list|()
block|{
name|Query
name|query
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"main"
argument_list|,
literal|"val"
argument_list|)
argument_list|)
decl_stmt|;
comment|// we need Query clauses that have identical hashCodes
comment|// but are not equal unless the term is equals
name|Query
name|fq_aa
init|=
operator|new
name|FlatHashTermQuery
argument_list|(
literal|"fq_a"
argument_list|)
decl_stmt|;
name|Query
name|fq_ab
init|=
operator|new
name|FlatHashTermQuery
argument_list|(
literal|"fq_a"
argument_list|)
decl_stmt|;
name|Query
name|fq_ac
init|=
operator|new
name|FlatHashTermQuery
argument_list|(
literal|"fq_a"
argument_list|)
decl_stmt|;
name|Query
name|fq_zz
init|=
operator|new
name|FlatHashTermQuery
argument_list|(
literal|"fq_z"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fq_aa
operator|.
name|hashCode
argument_list|()
argument_list|,
name|fq_ab
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fq_aa
operator|.
name|hashCode
argument_list|()
argument_list|,
name|fq_ac
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fq_aa
operator|.
name|hashCode
argument_list|()
argument_list|,
name|fq_zz
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fq_aa
argument_list|,
name|fq_ab
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fq_aa
argument_list|,
name|fq_ac
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fq_ab
argument_list|,
name|fq_aa
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fq_ab
argument_list|,
name|fq_ac
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fq_ac
argument_list|,
name|fq_aa
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fq_ac
argument_list|,
name|fq_ab
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fq_aa
operator|.
name|equals
argument_list|(
name|fq_zz
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fq_ab
operator|.
name|equals
argument_list|(
name|fq_zz
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fq_ac
operator|.
name|equals
argument_list|(
name|fq_zz
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fq_zz
operator|.
name|equals
argument_list|(
name|fq_aa
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fq_zz
operator|.
name|equals
argument_list|(
name|fq_ab
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fq_zz
operator|.
name|equals
argument_list|(
name|fq_ac
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|filters1
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|fq_aa
argument_list|,
name|fq_ab
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|filters2
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|fq_zz
argument_list|,
name|fq_ac
argument_list|)
decl_stmt|;
name|QueryResultKey
name|key1
init|=
operator|new
name|QueryResultKey
argument_list|(
name|query
argument_list|,
name|filters1
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QueryResultKey
name|key2
init|=
operator|new
name|QueryResultKey
argument_list|(
name|query
argument_list|,
name|filters2
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|key1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|key2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertKeyNotEquals
argument_list|(
name|key1
argument_list|,
name|key2
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomQueryKeyEquality
specifier|public
name|void
name|testRandomQueryKeyEquality
parameter_list|()
block|{
specifier|final
name|int
name|minIters
init|=
name|atLeast
argument_list|(
literal|100
operator|*
literal|1000
argument_list|)
decl_stmt|;
specifier|final
name|Query
name|base
init|=
operator|new
name|FlatHashTermQuery
argument_list|(
literal|"base"
argument_list|)
decl_stmt|;
comment|// ensure we cover both code paths at least once
name|boolean
name|didEquals
init|=
literal|false
decl_stmt|;
name|boolean
name|didNotEquals
init|=
literal|false
decl_stmt|;
name|int
name|iter
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|iter
operator|<=
name|minIters
operator|||
operator|(
operator|!
name|didEquals
operator|)
operator|||
operator|(
operator|!
name|didNotEquals
operator|)
condition|)
block|{
name|iter
operator|++
expr_stmt|;
name|int
index|[]
name|numsA
init|=
name|smallArrayOfRandomNumbers
argument_list|()
decl_stmt|;
name|int
index|[]
name|numsB
init|=
name|smallArrayOfRandomNumbers
argument_list|()
decl_stmt|;
name|QueryResultKey
name|aa
init|=
operator|new
name|QueryResultKey
argument_list|(
name|base
argument_list|,
name|buildFiltersFromNumbers
argument_list|(
name|numsA
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QueryResultKey
name|bb
init|=
operator|new
name|QueryResultKey
argument_list|(
name|base
argument_list|,
name|buildFiltersFromNumbers
argument_list|(
name|numsB
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// now that we have our keys, sort the numbers so we know what to expect
name|Arrays
operator|.
name|sort
argument_list|(
name|numsA
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|numsB
argument_list|)
expr_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|numsA
argument_list|,
name|numsB
argument_list|)
condition|)
block|{
name|didEquals
operator|=
literal|true
expr_stmt|;
name|assertKeyEquals
argument_list|(
name|aa
argument_list|,
name|bb
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|didNotEquals
operator|=
literal|true
expr_stmt|;
name|assertKeyNotEquals
argument_list|(
name|aa
argument_list|,
name|bb
argument_list|)
expr_stmt|;
block|}
block|}
assert|assert
name|minIters
operator|<=
name|iter
assert|;
block|}
comment|/**    * does bi-directional equality check as well as verifying hashCode    */
DECL|method|assertKeyEquals
specifier|public
name|void
name|assertKeyEquals
parameter_list|(
name|QueryResultKey
name|key1
parameter_list|,
name|QueryResultKey
name|key2
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|key1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|key2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|key1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|key2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|key1
argument_list|,
name|key2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|key2
argument_list|,
name|key1
argument_list|)
expr_stmt|;
block|}
comment|/**    * does bi-directional check that the keys are<em>not</em> equals    */
DECL|method|assertKeyNotEquals
specifier|public
name|void
name|assertKeyNotEquals
parameter_list|(
name|QueryResultKey
name|key1
parameter_list|,
name|QueryResultKey
name|key2
parameter_list|)
block|{
name|assertTrue
argument_list|(
operator|!
name|key1
operator|.
name|equals
argument_list|(
name|key2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|key2
operator|.
name|equals
argument_list|(
name|key1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * returns a "small" list of "small" random numbers.  The idea behind this method is     * that multiple calls have a decent change of returning two arrays which are the     * same size and contain the same numbers but in a differnet order.    *    * the array is garunteed to always have at least 1 element    */
DECL|method|smallArrayOfRandomNumbers
specifier|private
name|int
index|[]
name|smallArrayOfRandomNumbers
parameter_list|()
block|{
name|int
name|size
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Creates an array of Filter queries using {@link FlatHashTermQuery} based on the     * specified ints    */
DECL|method|buildFiltersFromNumbers
specifier|private
name|List
argument_list|<
name|Query
argument_list|>
name|buildFiltersFromNumbers
parameter_list|(
name|int
index|[]
name|values
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Query
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<
name|Query
argument_list|>
argument_list|(
name|values
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|val
range|:
name|values
control|)
block|{
name|filters
operator|.
name|add
argument_list|(
operator|new
name|FlatHashTermQuery
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|filters
return|;
block|}
comment|/**    * Quick and dirty subclass of TermQuery that uses fixed field name and a constant     * value hashCode, regardless of the Term value.    */
DECL|class|FlatHashTermQuery
specifier|private
specifier|static
class|class
name|FlatHashTermQuery
extends|extends
name|TermQuery
block|{
DECL|method|FlatHashTermQuery
specifier|public
name|FlatHashTermQuery
parameter_list|(
name|String
name|val
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|Term
argument_list|(
literal|"some_field"
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|42
return|;
block|}
block|}
block|}
end_class
end_unit
