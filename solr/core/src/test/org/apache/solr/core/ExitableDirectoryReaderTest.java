begin_unit
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *   */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|ObjectBuilder
import|;
end_import
begin_comment
comment|/**  * Test that checks that long running queries are exited by Solr using the  * SolrQueryTimeoutImpl implementation.  */
end_comment
begin_class
DECL|class|ExitableDirectoryReaderTest
specifier|public
class|class
name|ExitableDirectoryReaderTest
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|NUM_DOCS
specifier|static
name|int
name|NUM_DOCS
init|=
literal|100
decl_stmt|;
DECL|field|assertionString
specifier|static
specifier|final
name|String
name|assertionString
init|=
literal|"/response/numFound=="
operator|+
name|NUM_DOCS
decl_stmt|;
DECL|field|failureAssertionString
specifier|static
specifier|final
name|String
name|failureAssertionString
init|=
literal|"/responseHeader/partialResults==true]"
decl_stmt|;
DECL|field|longTimeout
specifier|static
specifier|final
name|String
name|longTimeout
init|=
literal|"10000"
decl_stmt|;
DECL|field|sleep
specifier|static
specifier|final
name|String
name|sleep
init|=
literal|"2"
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-delaying-component.xml"
argument_list|,
literal|"schema_latest.xml"
argument_list|)
expr_stmt|;
name|createIndex
argument_list|()
expr_stmt|;
block|}
DECL|method|createIndex
specifier|public
specifier|static
name|void
name|createIndex
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_DOCS
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"name"
argument_list|,
literal|"a"
operator|+
name|i
operator|+
literal|" b"
operator|+
name|i
operator|+
literal|" c"
operator|+
name|i
operator|+
literal|" d"
operator|+
name|i
operator|+
literal|" e"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|NUM_DOCS
argument_list|)
operator|==
literal|0
condition|)
block|{
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// sometimes make multiple segments
block|}
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrefixQuery
specifier|public
name|void
name|testPrefixQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|q
init|=
literal|"name:a*"
decl_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"timeAllowed"
argument_list|,
literal|"1"
argument_list|,
literal|"sleep"
argument_list|,
name|sleep
argument_list|)
argument_list|,
name|failureAssertionString
argument_list|)
expr_stmt|;
comment|// do the same query and test for both success, and that the number of documents matched (i.e. make sure no partial results were cached)
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"timeAllowed"
argument_list|,
name|longTimeout
argument_list|)
argument_list|,
name|assertionString
argument_list|)
expr_stmt|;
comment|// this time we should get a query cache hit and hopefully no exception?  this may change in the future if time checks are put into other places.
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"timeAllowed"
argument_list|,
literal|"1"
argument_list|,
literal|"sleep"
argument_list|,
name|sleep
argument_list|)
argument_list|,
name|assertionString
argument_list|)
expr_stmt|;
comment|// now do the same for the filter cache
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
name|q
argument_list|,
literal|"timeAllowed"
argument_list|,
literal|"1"
argument_list|,
literal|"sleep"
argument_list|,
name|sleep
argument_list|)
argument_list|,
name|failureAssertionString
argument_list|)
expr_stmt|;
comment|// make sure that the result succeeds this time, and that a bad filter wasn't cached
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
name|q
argument_list|,
literal|"timeAllowed"
argument_list|,
name|longTimeout
argument_list|)
argument_list|,
name|assertionString
argument_list|)
expr_stmt|;
comment|// test that Long.MAX_VALUE works
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"name:b*"
argument_list|,
literal|"timeAllowed"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|,
name|assertionString
argument_list|)
expr_stmt|;
comment|// negative timeAllowed should disable timeouts.
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"name:c*"
argument_list|,
literal|"timeAllowed"
argument_list|,
literal|"-7"
argument_list|)
argument_list|,
name|assertionString
argument_list|)
expr_stmt|;
block|}
comment|// There are lots of assumptions about how/when cache entries should be changed in this method. The
comment|// simple case above shows the root problem without the confusion. testFilterSimpleCase should be
comment|// removed once it is running and this test should be un-ignored and the assumptiions verified.
comment|// With all the weirdness, I'm not going to vouch for this test. Feel free to change it.
annotation|@
name|Test
DECL|method|testCacheAssumptions
specifier|public
name|void
name|testCacheAssumptions
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|fq
init|=
literal|"name:d*"
decl_stmt|;
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|SolrInfoMBean
name|filterCacheStats
init|=
name|core
operator|.
name|getInfoRegistry
argument_list|()
operator|.
name|get
argument_list|(
literal|"filterCache"
argument_list|)
decl_stmt|;
name|long
name|fqInserts
init|=
operator|(
name|long
operator|)
name|filterCacheStats
operator|.
name|getStatistics
argument_list|()
operator|.
name|get
argument_list|(
literal|"inserts"
argument_list|)
decl_stmt|;
name|SolrInfoMBean
name|queryCacheStats
init|=
name|core
operator|.
name|getInfoRegistry
argument_list|()
operator|.
name|get
argument_list|(
literal|"queryResultCache"
argument_list|)
decl_stmt|;
name|long
name|qrInserts
init|=
operator|(
name|long
operator|)
name|queryCacheStats
operator|.
name|getStatistics
argument_list|()
operator|.
name|get
argument_list|(
literal|"inserts"
argument_list|)
decl_stmt|;
comment|// This gets 0 docs back. Use 10000 instead of 1 for timeAllowed and it gets 100 back and the for loop below
comment|// succeeds.
name|String
name|response
init|=
name|JQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
name|fq
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"timeAllowed"
argument_list|,
literal|"1"
argument_list|,
literal|"sleep"
argument_list|,
name|sleep
argument_list|)
argument_list|)
decl_stmt|;
name|Map
name|res
init|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|fromJSON
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|Map
name|body
init|=
call|(
name|Map
call|)
argument_list|(
name|res
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should have fewer docs than "
operator|+
name|NUM_DOCS
argument_list|,
call|(
name|long
call|)
argument_list|(
name|body
operator|.
name|get
argument_list|(
literal|"numFound"
argument_list|)
argument_list|)
operator|<
name|NUM_DOCS
argument_list|)
expr_stmt|;
name|Map
name|header
init|=
call|(
name|Map
call|)
argument_list|(
name|res
operator|.
name|get
argument_list|(
literal|"responseHeader"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should have partial results"
argument_list|,
call|(
name|Boolean
call|)
argument_list|(
name|header
operator|.
name|get
argument_list|(
literal|"partialResults"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should NOT have inserted partial results in the cache!"
argument_list|,
operator|(
name|long
operator|)
name|queryCacheStats
operator|.
name|getStatistics
argument_list|()
operator|.
name|get
argument_list|(
literal|"inserts"
argument_list|)
argument_list|,
name|qrInserts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should NOT have another insert"
argument_list|,
name|fqInserts
argument_list|,
operator|(
name|long
operator|)
name|filterCacheStats
operator|.
name|getStatistics
argument_list|()
operator|.
name|get
argument_list|(
literal|"inserts"
argument_list|)
argument_list|)
expr_stmt|;
comment|// At the end of all this, we should have no hits in the queryResultCache.
name|response
operator|=
name|JQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
name|fq
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"timeAllowed"
argument_list|,
name|longTimeout
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that we did insert this one.
name|assertEquals
argument_list|(
literal|"Hits should still be 0"
argument_list|,
operator|(
name|long
operator|)
name|filterCacheStats
operator|.
name|getStatistics
argument_list|()
operator|.
name|get
argument_list|(
literal|"hits"
argument_list|)
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Inserts should be bumped"
argument_list|,
operator|(
name|long
operator|)
name|filterCacheStats
operator|.
name|getStatistics
argument_list|()
operator|.
name|get
argument_list|(
literal|"inserts"
argument_list|)
argument_list|,
name|fqInserts
operator|+
literal|1
argument_list|)
expr_stmt|;
name|res
operator|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|fromJSON
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|body
operator|=
call|(
name|Map
call|)
argument_list|(
name|res
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have exactly "
operator|+
name|NUM_DOCS
argument_list|,
call|(
name|long
call|)
argument_list|(
name|body
operator|.
name|get
argument_list|(
literal|"numFound"
argument_list|)
argument_list|)
argument_list|,
name|NUM_DOCS
argument_list|)
expr_stmt|;
name|header
operator|=
call|(
name|Map
call|)
argument_list|(
name|res
operator|.
name|get
argument_list|(
literal|"responseHeader"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should NOT have partial results"
argument_list|,
name|header
operator|.
name|get
argument_list|(
literal|"partialResults"
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// When looking at a problem raised on the user's list I ran across this anomaly with timeAllowed
comment|// This tests for the second query NOT returning partial results, along with some other
annotation|@
name|Test
DECL|method|testQueryResults
specifier|public
name|void
name|testQueryResults
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|q
init|=
literal|"name:e*"
decl_stmt|;
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|SolrInfoMBean
name|queryCacheStats
init|=
name|core
operator|.
name|getInfoRegistry
argument_list|()
operator|.
name|get
argument_list|(
literal|"queryResultCache"
argument_list|)
decl_stmt|;
name|NamedList
name|nl
init|=
name|queryCacheStats
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
name|long
name|inserts
init|=
operator|(
name|long
operator|)
name|nl
operator|.
name|get
argument_list|(
literal|"inserts"
argument_list|)
decl_stmt|;
name|String
name|response
init|=
name|JQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"timeAllowed"
argument_list|,
literal|"1"
argument_list|,
literal|"sleep"
argument_list|,
name|sleep
argument_list|)
argument_list|)
decl_stmt|;
comment|// The queryResultCache should NOT get an entry here.
name|nl
operator|=
name|queryCacheStats
operator|.
name|getStatistics
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should NOT have inserted partial results!"
argument_list|,
name|inserts
argument_list|,
operator|(
name|long
operator|)
name|nl
operator|.
name|get
argument_list|(
literal|"inserts"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
name|res
init|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|fromJSON
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|Map
name|body
init|=
call|(
name|Map
call|)
argument_list|(
name|res
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
argument_list|)
decl_stmt|;
name|Map
name|header
init|=
call|(
name|Map
call|)
argument_list|(
name|res
operator|.
name|get
argument_list|(
literal|"responseHeader"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should have fewer docs than "
operator|+
name|NUM_DOCS
argument_list|,
call|(
name|long
call|)
argument_list|(
name|body
operator|.
name|get
argument_list|(
literal|"numFound"
argument_list|)
argument_list|)
operator|<
name|NUM_DOCS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have partial results"
argument_list|,
call|(
name|Boolean
call|)
argument_list|(
name|header
operator|.
name|get
argument_list|(
literal|"partialResults"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
name|JQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"timeAllowed"
argument_list|,
name|longTimeout
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that we did insert this one.
name|NamedList
name|nl2
init|=
name|queryCacheStats
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hits should still be 0"
argument_list|,
operator|(
name|long
operator|)
name|nl
operator|.
name|get
argument_list|(
literal|"hits"
argument_list|)
argument_list|,
operator|(
name|long
operator|)
name|nl2
operator|.
name|get
argument_list|(
literal|"hits"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Inserts should be bumped"
argument_list|,
name|inserts
operator|<
operator|(
name|long
operator|)
name|nl2
operator|.
name|get
argument_list|(
literal|"inserts"
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|fromJSON
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|body
operator|=
call|(
name|Map
call|)
argument_list|(
name|res
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|=
call|(
name|Map
call|)
argument_list|(
name|res
operator|.
name|get
argument_list|(
literal|"responseHeader"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have exactly "
operator|+
name|NUM_DOCS
argument_list|,
name|NUM_DOCS
argument_list|,
call|(
name|long
call|)
argument_list|(
name|body
operator|.
name|get
argument_list|(
literal|"numFound"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Boolean
name|test
init|=
call|(
name|Boolean
call|)
argument_list|(
name|header
operator|.
name|get
argument_list|(
literal|"partialResults"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|test
operator|!=
literal|null
condition|)
block|{
name|assertFalse
argument_list|(
literal|"Should NOT have partial results"
argument_list|,
name|test
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
