begin_unit
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|anyObject
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|eq
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|BlobRepositoryMockingTest
specifier|public
class|class
name|BlobRepositoryMockingTest
block|{
DECL|field|UTF8
specifier|private
specifier|static
specifier|final
name|Charset
name|UTF8
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
DECL|field|PARSED
specifier|private
specifier|static
specifier|final
name|String
index|[]
index|[]
name|PARSED
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"foo"
block|,
literal|"bar"
block|,
literal|"baz"
block|}
block|,
block|{
literal|"bang"
block|,
literal|"boom"
block|,
literal|"bash"
block|}
block|}
decl_stmt|;
DECL|field|BLOBSTR
specifier|private
specifier|static
specifier|final
name|String
name|BLOBSTR
init|=
literal|"foo,bar,baz\nbang,boom,bash"
decl_stmt|;
DECL|field|mockContainer
specifier|private
name|CoreContainer
name|mockContainer
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|CoreContainer
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|field|mapMock
specifier|private
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|BlobRepository
operator|.
name|BlobContent
argument_list|>
name|mapMock
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ConcurrentHashMap
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|field|decoderMock
specifier|private
name|BlobRepository
operator|.
name|Decoder
argument_list|<
name|Object
argument_list|>
name|decoderMock
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BlobRepository
operator|.
name|Decoder
operator|.
name|class
argument_list|)
decl_stmt|;
empty_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|field|blobContentMock
specifier|private
name|BlobRepository
operator|.
name|BlobContent
argument_list|<
name|Object
argument_list|>
name|blobContentMock
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BlobRepository
operator|.
name|BlobContent
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mocks
specifier|private
name|Object
index|[]
name|mocks
init|=
operator|new
name|Object
index|[]
block|{
name|mockContainer
block|,
name|decoderMock
block|,
name|blobContentMock
block|,
name|mapMock
block|}
decl_stmt|;
DECL|field|repository
name|BlobRepository
name|repository
decl_stmt|;
DECL|field|blobData
name|ByteBuffer
name|blobData
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|BLOBSTR
operator|.
name|getBytes
argument_list|(
name|UTF8
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|blobFetched
name|boolean
name|blobFetched
init|=
literal|false
decl_stmt|;
DECL|field|blobKey
name|String
name|blobKey
init|=
literal|""
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IllegalAccessException
throws|,
name|NoSuchFieldException
block|{
name|blobFetched
operator|=
literal|false
expr_stmt|;
name|blobKey
operator|=
literal|""
expr_stmt|;
name|EasyMock
operator|.
name|reset
argument_list|(
name|mocks
argument_list|)
expr_stmt|;
name|repository
operator|=
operator|new
name|BlobRepository
argument_list|(
name|mockContainer
argument_list|)
block|{
annotation|@
name|Override
name|ByteBuffer
name|fetchBlob
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|blobKey
operator|=
name|key
expr_stmt|;
name|blobFetched
operator|=
literal|true
expr_stmt|;
return|return
name|blobData
return|;
block|}
annotation|@
name|Override
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|BlobContent
argument_list|>
name|createMap
parameter_list|()
block|{
return|return
name|mapMock
return|;
block|}
block|}
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|EasyMock
operator|.
name|verify
argument_list|(
name|mocks
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SolrException
operator|.
name|class
argument_list|)
DECL|method|testCloudOnly
specifier|public
name|void
name|testCloudOnly
parameter_list|()
block|{
name|expect
argument_list|(
name|mockContainer
operator|.
name|isZooKeeperAware
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mocks
argument_list|)
expr_stmt|;
name|BlobRepository
operator|.
name|BlobContentRef
name|ref
init|=
name|repository
operator|.
name|getBlobIncRef
argument_list|(
literal|"foo!"
argument_list|)
decl_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|testGetBlobIncrRefString
specifier|public
name|void
name|testGetBlobIncrRefString
parameter_list|()
block|{
name|expect
argument_list|(
name|mockContainer
operator|.
name|isZooKeeperAware
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mapMock
operator|.
name|get
argument_list|(
literal|"foo!"
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mapMock
operator|.
name|put
argument_list|(
name|eq
argument_list|(
literal|"foo!"
argument_list|)
argument_list|,
name|anyObject
argument_list|(
name|BlobRepository
operator|.
name|BlobContent
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mocks
argument_list|)
expr_stmt|;
name|BlobRepository
operator|.
name|BlobContentRef
name|ref
init|=
name|repository
operator|.
name|getBlobIncRef
argument_list|(
literal|"foo!"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"foo!"
operator|.
name|equals
argument_list|(
name|blobKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|blobFetched
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ref
operator|.
name|blob
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|blobData
argument_list|,
name|ref
operator|.
name|blob
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|testCachedAlready
specifier|public
name|void
name|testCachedAlready
parameter_list|()
block|{
name|expect
argument_list|(
name|mockContainer
operator|.
name|isZooKeeperAware
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mapMock
operator|.
name|get
argument_list|(
literal|"foo!"
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|BlobRepository
operator|.
name|BlobContent
argument_list|<
name|BlobRepository
argument_list|>
argument_list|(
literal|"foo!"
argument_list|,
name|blobData
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mocks
argument_list|)
expr_stmt|;
name|BlobRepository
operator|.
name|BlobContentRef
name|ref
init|=
name|repository
operator|.
name|getBlobIncRef
argument_list|(
literal|"foo!"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|blobKey
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|blobFetched
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ref
operator|.
name|blob
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|blobData
argument_list|,
name|ref
operator|.
name|blob
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|testGetBlobIncrRefStringDecoder
specifier|public
name|void
name|testGetBlobIncrRefStringDecoder
parameter_list|()
block|{
name|expect
argument_list|(
name|mockContainer
operator|.
name|isZooKeeperAware
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mapMock
operator|.
name|get
argument_list|(
literal|"foo!mocked"
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mapMock
operator|.
name|put
argument_list|(
name|eq
argument_list|(
literal|"foo!mocked"
argument_list|)
argument_list|,
name|anyObject
argument_list|(
name|BlobRepository
operator|.
name|BlobContent
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mocks
argument_list|)
expr_stmt|;
name|BlobRepository
operator|.
name|BlobContentRef
name|ref
init|=
name|repository
operator|.
name|getBlobIncRef
argument_list|(
literal|"foo!"
argument_list|,
operator|new
name|BlobRepository
operator|.
name|Decoder
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|decode
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copy
argument_list|(
name|inputStream
argument_list|,
name|writer
argument_list|,
name|UTF8
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|assertEquals
argument_list|(
name|BLOBSTR
argument_list|,
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|PARSED
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"mocked"
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo!"
argument_list|,
name|blobKey
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|blobFetched
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ref
operator|.
name|blob
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PARSED
argument_list|,
name|ref
operator|.
name|blob
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
