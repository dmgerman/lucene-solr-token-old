begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|CollectionsHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|CoreAdminHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|InfoHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarEntry
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|not
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|nullValue
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsInstanceOf
operator|.
name|instanceOf
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|matchers
operator|.
name|JUnitMatchers
operator|.
name|containsString
import|;
end_import
begin_class
DECL|class|TestCoreContainer
specifier|public
class|class
name|TestCoreContainer
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|oldSolrHome
specifier|private
specifier|static
name|String
name|oldSolrHome
decl_stmt|;
DECL|field|SOLR_HOME_PROP
specifier|private
specifier|static
specifier|final
name|String
name|SOLR_HOME_PROP
init|=
literal|"solr.solr.home"
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|oldSolrHome
operator|=
name|System
operator|.
name|getProperty
argument_list|(
name|SOLR_HOME_PROP
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"configsets"
argument_list|,
name|getFile
argument_list|(
literal|"solr/configsets"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
block|{
if|if
condition|(
name|oldSolrHome
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|SOLR_HOME_PROP
argument_list|,
name|oldSolrHome
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|clearProperty
argument_list|(
name|SOLR_HOME_PROP
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|init
specifier|private
name|CoreContainer
name|init
parameter_list|(
name|String
name|xml
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|solrHomeDirectory
init|=
name|createTempDir
argument_list|()
decl_stmt|;
return|return
name|init
argument_list|(
name|solrHomeDirectory
argument_list|,
name|xml
argument_list|)
return|;
block|}
DECL|method|init
specifier|private
name|CoreContainer
name|init
parameter_list|(
name|Path
name|homeDirectory
parameter_list|,
name|String
name|xml
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrResourceLoader
name|loader
init|=
operator|new
name|SolrResourceLoader
argument_list|(
name|homeDirectory
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|CoreContainer
name|ret
init|=
operator|new
name|CoreContainer
argument_list|(
name|SolrXmlConfig
operator|.
name|fromString
argument_list|(
name|loader
argument_list|,
name|xml
argument_list|)
argument_list|)
decl_stmt|;
name|ret
operator|.
name|load
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Test
DECL|method|testShareSchema
specifier|public
name|void
name|testShareSchema
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"shareSchema"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|CoreContainer
name|cores
init|=
name|init
argument_list|(
name|CONFIGSETS_SOLR_XML
argument_list|)
decl_stmt|;
try|try
block|{
name|CoreDescriptor
name|descriptor1
init|=
operator|new
name|CoreDescriptor
argument_list|(
name|cores
argument_list|,
literal|"core1"
argument_list|,
literal|"./collection1"
argument_list|,
literal|"configSet"
argument_list|,
literal|"minimal"
argument_list|)
decl_stmt|;
name|SolrCore
name|core1
init|=
name|cores
operator|.
name|create
argument_list|(
name|descriptor1
argument_list|)
decl_stmt|;
name|CoreDescriptor
name|descriptor2
init|=
operator|new
name|CoreDescriptor
argument_list|(
name|cores
argument_list|,
literal|"core2"
argument_list|,
literal|"./collection1"
argument_list|,
literal|"configSet"
argument_list|,
literal|"minimal"
argument_list|)
decl_stmt|;
name|SolrCore
name|core2
init|=
name|cores
operator|.
name|create
argument_list|(
name|descriptor2
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|core1
operator|.
name|getLatestSchema
argument_list|()
argument_list|,
name|core2
operator|.
name|getLatestSchema
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cores
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"shareSchema"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testReloadSequential
specifier|public
name|void
name|testReloadSequential
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CoreContainer
name|cc
init|=
name|init
argument_list|(
name|CONFIGSETS_SOLR_XML
argument_list|)
decl_stmt|;
name|CoreDescriptor
name|descriptor1
init|=
operator|new
name|CoreDescriptor
argument_list|(
name|cc
argument_list|,
literal|"core1"
argument_list|,
literal|"./collection1"
argument_list|,
literal|"configSet"
argument_list|,
literal|"minimal"
argument_list|)
decl_stmt|;
name|cc
operator|.
name|create
argument_list|(
name|descriptor1
argument_list|)
expr_stmt|;
try|try
block|{
name|cc
operator|.
name|reload
argument_list|(
literal|"core1"
argument_list|)
expr_stmt|;
name|cc
operator|.
name|reload
argument_list|(
literal|"core1"
argument_list|)
expr_stmt|;
name|cc
operator|.
name|reload
argument_list|(
literal|"core1"
argument_list|)
expr_stmt|;
name|cc
operator|.
name|reload
argument_list|(
literal|"core1"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testReloadThreaded
specifier|public
name|void
name|testReloadThreaded
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CoreContainer
name|cc
init|=
name|init
argument_list|(
name|CONFIGSETS_SOLR_XML
argument_list|)
decl_stmt|;
name|CoreDescriptor
name|descriptor1
init|=
operator|new
name|CoreDescriptor
argument_list|(
name|cc
argument_list|,
literal|"core1"
argument_list|,
literal|"./collection1"
argument_list|,
literal|"configSet"
argument_list|,
literal|"minimal"
argument_list|)
decl_stmt|;
name|cc
operator|.
name|create
argument_list|(
name|descriptor1
argument_list|)
expr_stmt|;
class|class
name|TestThread
extends|extends
name|Thread
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cc
operator|.
name|reload
argument_list|(
literal|"core1"
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numThreads
init|=
literal|4
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|threads
operator|.
name|add
argument_list|(
operator|new
name|TestThread
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoCores
specifier|public
name|void
name|testNoCores
parameter_list|()
throws|throws
name|Exception
block|{
name|CoreContainer
name|cores
init|=
name|init
argument_list|(
name|CONFIGSETS_SOLR_XML
argument_list|)
decl_stmt|;
try|try
block|{
comment|//assert zero cores
name|assertEquals
argument_list|(
literal|"There should not be cores"
argument_list|,
literal|0
argument_list|,
name|cores
operator|.
name|getCores
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//add a new core
name|CoreDescriptor
name|coreDescriptor
init|=
operator|new
name|CoreDescriptor
argument_list|(
name|cores
argument_list|,
literal|"core1"
argument_list|,
literal|"collection1"
argument_list|,
name|CoreDescriptor
operator|.
name|CORE_CONFIGSET
argument_list|,
literal|"minimal"
argument_list|)
decl_stmt|;
name|SolrCore
name|newCore
init|=
name|cores
operator|.
name|create
argument_list|(
name|coreDescriptor
argument_list|)
decl_stmt|;
comment|//assert one registered core
name|assertEquals
argument_list|(
literal|"There core registered"
argument_list|,
literal|1
argument_list|,
name|cores
operator|.
name|getCores
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cores
operator|.
name|unload
argument_list|(
literal|"core1"
argument_list|)
expr_stmt|;
comment|//assert cero cores
name|assertEquals
argument_list|(
literal|"There should not be cores"
argument_list|,
literal|0
argument_list|,
name|cores
operator|.
name|getCores
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// try and remove a core that does not exist
try|try
block|{
name|cores
operator|.
name|unload
argument_list|(
literal|"non_existent_core"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception when unloading a non-existent core"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Cannot unload non-existent core [non_existent_core]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// try and remove a null core
try|try
block|{
name|cores
operator|.
name|unload
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception when unloading a null core"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|e
operator|instanceof
name|SolrException
operator|)
condition|)
block|{
name|fail
argument_list|(
literal|"Should not have thrown SolrException but got "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Cannot unload non-existent core [null]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cores
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testLogWatcherEnabledByDefault
specifier|public
name|void
name|testLogWatcherEnabledByDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|CoreContainer
name|cc
init|=
name|init
argument_list|(
literal|"<solr></solr>"
argument_list|)
decl_stmt|;
try|try
block|{
name|assertNotNull
argument_list|(
name|cc
operator|.
name|getLogging
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDeleteBadCores
specifier|public
name|void
name|testDeleteBadCores
parameter_list|()
throws|throws
name|Exception
block|{
name|MockCoresLocator
name|cl
init|=
operator|new
name|MockCoresLocator
argument_list|()
decl_stmt|;
name|SolrResourceLoader
name|resourceLoader
init|=
operator|new
name|SolrResourceLoader
argument_list|(
name|createTempDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"configsets"
argument_list|,
name|getFile
argument_list|(
literal|"solr/configsets"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|CoreContainer
name|cc
init|=
operator|new
name|CoreContainer
argument_list|(
name|SolrXmlConfig
operator|.
name|fromString
argument_list|(
name|resourceLoader
argument_list|,
name|CONFIGSETS_SOLR_XML
argument_list|)
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|,
name|cl
argument_list|)
decl_stmt|;
name|CoreDescriptor
name|badcore
init|=
operator|new
name|CoreDescriptor
argument_list|(
name|cc
argument_list|,
literal|"badcore"
argument_list|,
literal|"badcore"
argument_list|,
literal|"configSet"
argument_list|,
literal|"nosuchconfigset"
argument_list|)
decl_stmt|;
name|cl
operator|.
name|add
argument_list|(
name|badcore
argument_list|)
expr_stmt|;
try|try
block|{
name|cc
operator|.
name|load
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|cc
operator|.
name|getCoreInitFailures
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cc
operator|.
name|getCoreInitFailures
argument_list|()
operator|.
name|get
argument_list|(
literal|"badcore"
argument_list|)
operator|.
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"nosuchconfigset"
argument_list|)
argument_list|)
expr_stmt|;
name|cc
operator|.
name|unload
argument_list|(
literal|"badcore"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cc
operator|.
name|getCoreInitFailures
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// can we create the core now with a good config?
name|SolrCore
name|core
init|=
name|cc
operator|.
name|create
argument_list|(
operator|new
name|CoreDescriptor
argument_list|(
name|cc
argument_list|,
literal|"badcore"
argument_list|,
literal|"badcore"
argument_list|,
literal|"configSet"
argument_list|,
literal|"minimal"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|core
argument_list|,
name|not
argument_list|(
name|nullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testClassLoaderHierarchy
specifier|public
name|void
name|testClassLoaderHierarchy
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CoreContainer
name|cc
init|=
name|init
argument_list|(
name|CONFIGSETS_SOLR_XML
argument_list|)
decl_stmt|;
try|try
block|{
name|ClassLoader
name|sharedLoader
init|=
name|cc
operator|.
name|loader
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|ClassLoader
name|contextLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|contextLoader
argument_list|,
name|sharedLoader
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|CoreDescriptor
name|descriptor1
init|=
operator|new
name|CoreDescriptor
argument_list|(
name|cc
argument_list|,
literal|"core1"
argument_list|,
literal|"./collection1"
argument_list|,
literal|"configSet"
argument_list|,
literal|"minimal"
argument_list|)
decl_stmt|;
name|SolrCore
name|core1
init|=
name|cc
operator|.
name|create
argument_list|(
name|descriptor1
argument_list|)
decl_stmt|;
name|ClassLoader
name|coreLoader
init|=
name|core1
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|sharedLoader
argument_list|,
name|coreLoader
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSharedLib
specifier|public
name|void
name|testSharedLib
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|tmpRoot
init|=
name|createTempDir
argument_list|(
literal|"testSharedLib"
argument_list|)
decl_stmt|;
name|File
name|lib
init|=
operator|new
name|File
argument_list|(
name|tmpRoot
operator|.
name|toFile
argument_list|()
argument_list|,
literal|"lib"
argument_list|)
decl_stmt|;
name|lib
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|JarOutputStream
name|jar1
init|=
operator|new
name|JarOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|lib
argument_list|,
literal|"jar1.jar"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|jar1
operator|.
name|putNextEntry
argument_list|(
operator|new
name|JarEntry
argument_list|(
literal|"defaultSharedLibFile"
argument_list|)
argument_list|)
expr_stmt|;
name|jar1
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
name|jar1
operator|.
name|close
argument_list|()
expr_stmt|;
name|File
name|customLib
init|=
operator|new
name|File
argument_list|(
name|tmpRoot
operator|.
name|toFile
argument_list|()
argument_list|,
literal|"customLib"
argument_list|)
decl_stmt|;
name|customLib
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|JarOutputStream
name|jar2
init|=
operator|new
name|JarOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|customLib
argument_list|,
literal|"jar2.jar"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|jar2
operator|.
name|putNextEntry
argument_list|(
operator|new
name|JarEntry
argument_list|(
literal|"customSharedLibFile"
argument_list|)
argument_list|)
expr_stmt|;
name|jar2
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
name|jar2
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|CoreContainer
name|cc1
init|=
name|init
argument_list|(
name|tmpRoot
argument_list|,
literal|"<solr></solr>"
argument_list|)
decl_stmt|;
try|try
block|{
name|cc1
operator|.
name|loader
operator|.
name|openResource
argument_list|(
literal|"defaultSharedLibFile"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|cc1
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
specifier|final
name|CoreContainer
name|cc2
init|=
name|init
argument_list|(
name|tmpRoot
argument_list|,
literal|"<solr><str name=\"sharedLib\">lib</str></solr>"
argument_list|)
decl_stmt|;
try|try
block|{
name|cc2
operator|.
name|loader
operator|.
name|openResource
argument_list|(
literal|"defaultSharedLibFile"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|cc2
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
specifier|final
name|CoreContainer
name|cc3
init|=
name|init
argument_list|(
name|tmpRoot
argument_list|,
literal|"<solr><str name=\"sharedLib\">customLib</str></solr>"
argument_list|)
decl_stmt|;
try|try
block|{
name|cc3
operator|.
name|loader
operator|.
name|openResource
argument_list|(
literal|"customSharedLibFile"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|cc3
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|field|CONFIGSETS_SOLR_XML
specifier|private
specifier|static
specifier|final
name|String
name|CONFIGSETS_SOLR_XML
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
operator|+
literal|"<solr>\n"
operator|+
literal|"<str name=\"configSetBaseDir\">${configsets:configsets}</str>\n"
operator|+
literal|"<str name=\"shareSchema\">${shareSchema:false}</str>\n"
operator|+
literal|"</solr>"
decl_stmt|;
DECL|field|CUSTOM_HANDLERS_SOLR_XML
specifier|private
specifier|static
specifier|final
name|String
name|CUSTOM_HANDLERS_SOLR_XML
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
operator|+
literal|"<solr>"
operator|+
literal|"<str name=\"collectionsHandler\">"
operator|+
name|CustomCollectionsHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"</str>"
operator|+
literal|"<str name=\"infoHandler\">"
operator|+
name|CustomInfoHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"</str>"
operator|+
literal|"<str name=\"adminHandler\">"
operator|+
name|CustomCoreAdminHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"</str>"
operator|+
literal|"</solr>"
decl_stmt|;
DECL|class|CustomCollectionsHandler
specifier|public
specifier|static
class|class
name|CustomCollectionsHandler
extends|extends
name|CollectionsHandler
block|{
DECL|method|CustomCollectionsHandler
specifier|public
name|CustomCollectionsHandler
parameter_list|(
name|CoreContainer
name|cc
parameter_list|)
block|{
name|super
argument_list|(
name|cc
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CustomInfoHandler
specifier|public
specifier|static
class|class
name|CustomInfoHandler
extends|extends
name|InfoHandler
block|{
DECL|method|CustomInfoHandler
specifier|public
name|CustomInfoHandler
parameter_list|(
name|CoreContainer
name|cc
parameter_list|)
block|{
name|super
argument_list|(
name|cc
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CustomCoreAdminHandler
specifier|public
specifier|static
class|class
name|CustomCoreAdminHandler
extends|extends
name|CoreAdminHandler
block|{
DECL|method|CustomCoreAdminHandler
specifier|public
name|CustomCoreAdminHandler
parameter_list|(
name|CoreContainer
name|cc
parameter_list|)
block|{
name|super
argument_list|(
name|cc
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCustomHandlers
specifier|public
name|void
name|testCustomHandlers
parameter_list|()
throws|throws
name|Exception
block|{
name|CoreContainer
name|cc
init|=
name|init
argument_list|(
name|CUSTOM_HANDLERS_SOLR_XML
argument_list|)
decl_stmt|;
try|try
block|{
name|cc
operator|.
name|load
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|cc
operator|.
name|getCollectionsHandler
argument_list|()
argument_list|,
name|is
argument_list|(
name|instanceOf
argument_list|(
name|CustomCollectionsHandler
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cc
operator|.
name|getInfoHandler
argument_list|()
argument_list|,
name|is
argument_list|(
name|instanceOf
argument_list|(
name|CustomInfoHandler
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cc
operator|.
name|getMultiCoreHandler
argument_list|()
argument_list|,
name|is
argument_list|(
name|instanceOf
argument_list|(
name|CustomCoreAdminHandler
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|MockCoresLocator
specifier|private
specifier|static
class|class
name|MockCoresLocator
implements|implements
name|CoresLocator
block|{
DECL|field|cores
name|List
argument_list|<
name|CoreDescriptor
argument_list|>
name|cores
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|add
name|void
name|add
parameter_list|(
name|CoreDescriptor
name|cd
parameter_list|)
block|{
name|cores
operator|.
name|add
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|create
specifier|public
name|void
name|create
parameter_list|(
name|CoreContainer
name|cc
parameter_list|,
name|CoreDescriptor
modifier|...
name|coreDescriptors
parameter_list|)
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|persist
specifier|public
name|void
name|persist
parameter_list|(
name|CoreContainer
name|cc
parameter_list|,
name|CoreDescriptor
modifier|...
name|coreDescriptors
parameter_list|)
block|{      }
annotation|@
name|Override
DECL|method|delete
specifier|public
name|void
name|delete
parameter_list|(
name|CoreContainer
name|cc
parameter_list|,
name|CoreDescriptor
modifier|...
name|coreDescriptors
parameter_list|)
block|{      }
annotation|@
name|Override
DECL|method|rename
specifier|public
name|void
name|rename
parameter_list|(
name|CoreContainer
name|cc
parameter_list|,
name|CoreDescriptor
name|oldCD
parameter_list|,
name|CoreDescriptor
name|newCD
parameter_list|)
block|{      }
annotation|@
name|Override
DECL|method|swap
specifier|public
name|void
name|swap
parameter_list|(
name|CoreContainer
name|cc
parameter_list|,
name|CoreDescriptor
name|cd1
parameter_list|,
name|CoreDescriptor
name|cd2
parameter_list|)
block|{      }
annotation|@
name|Override
DECL|method|discover
specifier|public
name|List
argument_list|<
name|CoreDescriptor
argument_list|>
name|discover
parameter_list|(
name|CoreContainer
name|cc
parameter_list|)
block|{
return|return
name|cores
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCoreInitFailuresFromEmptyContainer
specifier|public
name|void
name|testCoreInitFailuresFromEmptyContainer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// reused state
name|Map
argument_list|<
name|String
argument_list|,
name|CoreContainer
operator|.
name|CoreLoadFailure
argument_list|>
name|failures
init|=
literal|null
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|cores
init|=
literal|null
decl_stmt|;
name|Exception
name|fail
init|=
literal|null
decl_stmt|;
comment|// ----
comment|// init the CoreContainer
name|CoreContainer
name|cc
init|=
name|init
argument_list|(
name|CONFIGSETS_SOLR_XML
argument_list|)
decl_stmt|;
comment|// check that we have the cores we expect
name|cores
operator|=
name|cc
operator|.
name|getCoreNames
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"core names is null"
argument_list|,
name|cores
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of cores"
argument_list|,
literal|0
argument_list|,
name|cores
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that we have the failures we expect
name|failures
operator|=
name|cc
operator|.
name|getCoreInitFailures
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"core failures is a null map"
argument_list|,
name|failures
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of core failures"
argument_list|,
literal|0
argument_list|,
name|failures
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// -----
comment|// try to add a collection with a path that doesn't exist
specifier|final
name|CoreDescriptor
name|bogus
init|=
operator|new
name|CoreDescriptor
argument_list|(
name|cc
argument_list|,
literal|"bogus"
argument_list|,
literal|"bogus_path"
argument_list|)
decl_stmt|;
try|try
block|{
name|ignoreException
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
literal|"bogus_path"
argument_list|)
argument_list|)
expr_stmt|;
name|cc
operator|.
name|create
argument_list|(
name|bogus
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"bogus inst dir failed to trigger exception from create"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"init exception doesn't mention bogus dir: "
operator|+
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|0
operator|<
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"bogus_path"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check that we have the cores we expect
name|cores
operator|=
name|cc
operator|.
name|getCoreNames
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"core names is null"
argument_list|,
name|cores
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of cores"
argument_list|,
literal|0
argument_list|,
name|cores
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that we have the failures we expect
name|failures
operator|=
name|cc
operator|.
name|getCoreInitFailures
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"core failures is a null map"
argument_list|,
name|failures
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of core failures"
argument_list|,
literal|1
argument_list|,
name|failures
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|fail
operator|=
name|failures
operator|.
name|get
argument_list|(
literal|"bogus"
argument_list|)
operator|.
name|exception
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"null failure for test core"
argument_list|,
name|fail
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"init failure doesn't mention problem: "
operator|+
name|fail
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|0
operator|<
name|fail
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"bogus_path"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that we get null accessing a non-existent core
name|assertNull
argument_list|(
name|cc
operator|.
name|getCore
argument_list|(
literal|"does_not_exist"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that we get a 500 accessing the core with an init failure
try|try
block|{
name|SolrCore
name|c
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"bogus"
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Failed to get Exception on accessing core with init failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|ex
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
comment|// double wrapped
name|String
name|cause
init|=
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"getCore() ex cause doesn't mention init fail: "
operator|+
name|cause
argument_list|,
literal|0
operator|<
name|cause
operator|.
name|indexOf
argument_list|(
literal|"bogus_path"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCoreInitFailuresOnReload
specifier|public
name|void
name|testCoreInitFailuresOnReload
parameter_list|()
throws|throws
name|Exception
block|{
comment|// reused state
name|Map
argument_list|<
name|String
argument_list|,
name|CoreContainer
operator|.
name|CoreLoadFailure
argument_list|>
name|failures
init|=
literal|null
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|cores
init|=
literal|null
decl_stmt|;
name|Exception
name|fail
init|=
literal|null
decl_stmt|;
comment|// -----
comment|// init the  CoreContainer with the mix of ok/bad cores
name|MockCoresLocator
name|cl
init|=
operator|new
name|MockCoresLocator
argument_list|()
decl_stmt|;
name|SolrResourceLoader
name|resourceLoader
init|=
operator|new
name|SolrResourceLoader
argument_list|(
name|createTempDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"configsets"
argument_list|,
name|getFile
argument_list|(
literal|"solr/configsets"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|CoreContainer
name|cc
init|=
operator|new
name|CoreContainer
argument_list|(
name|SolrXmlConfig
operator|.
name|fromString
argument_list|(
name|resourceLoader
argument_list|,
name|CONFIGSETS_SOLR_XML
argument_list|)
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|,
name|cl
argument_list|)
decl_stmt|;
name|cl
operator|.
name|add
argument_list|(
operator|new
name|CoreDescriptor
argument_list|(
name|cc
argument_list|,
literal|"col_ok"
argument_list|,
literal|"col_ok"
argument_list|,
literal|"configSet"
argument_list|,
literal|"minimal"
argument_list|)
argument_list|)
expr_stmt|;
name|cl
operator|.
name|add
argument_list|(
operator|new
name|CoreDescriptor
argument_list|(
name|cc
argument_list|,
literal|"col_bad"
argument_list|,
literal|"col_bad"
argument_list|,
literal|"configSet"
argument_list|,
literal|"bad-mergepolicy"
argument_list|)
argument_list|)
expr_stmt|;
name|cc
operator|.
name|load
argument_list|()
expr_stmt|;
comment|// check that we have the cores we expect
name|cores
operator|=
name|cc
operator|.
name|getCoreNames
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"core names is null"
argument_list|,
name|cores
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of cores"
argument_list|,
literal|1
argument_list|,
name|cores
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"col_ok not found"
argument_list|,
name|cores
operator|.
name|contains
argument_list|(
literal|"col_ok"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that we have the failures we expect
name|failures
operator|=
name|cc
operator|.
name|getCoreInitFailures
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"core failures is a null map"
argument_list|,
name|failures
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of core failures"
argument_list|,
literal|1
argument_list|,
name|failures
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|fail
operator|=
name|failures
operator|.
name|get
argument_list|(
literal|"col_bad"
argument_list|)
operator|.
name|exception
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"null failure for test core"
argument_list|,
name|fail
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"init failure doesn't mention problem: "
operator|+
name|fail
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|0
operator|<
name|fail
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"DummyMergePolicy"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that we get null accessing a non-existent core
name|assertNull
argument_list|(
name|cc
operator|.
name|getCore
argument_list|(
literal|"does_not_exist"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that we get a 500 accessing the core with an init failure
try|try
block|{
name|SolrCore
name|c
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"col_bad"
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Failed to get Exception on accessing core with init failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|ex
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
comment|// double wrapped
name|String
name|cause
init|=
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"getCore() ex cause doesn't mention init fail: "
operator|+
name|cause
argument_list|,
literal|0
operator|<
name|cause
operator|.
name|indexOf
argument_list|(
literal|"DummyMergePolicy"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// -----
comment|// "fix" the bad collection
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|getFile
argument_list|(
literal|"solr/collection1/conf/solrconfig-defaults.xml"
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|getFile
argument_list|(
name|cc
operator|.
name|getSolrHome
argument_list|()
argument_list|,
literal|"col_bad"
argument_list|,
literal|"conf"
argument_list|,
literal|"solrconfig.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|getFile
argument_list|(
literal|"solr/collection1/conf/schema-minimal.xml"
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|getFile
argument_list|(
name|cc
operator|.
name|getSolrHome
argument_list|()
argument_list|,
literal|"col_bad"
argument_list|,
literal|"conf"
argument_list|,
literal|"schema.xml"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|CoreDescriptor
name|fixed
init|=
operator|new
name|CoreDescriptor
argument_list|(
name|cc
argument_list|,
literal|"col_bad"
argument_list|,
literal|"col_bad"
argument_list|)
decl_stmt|;
name|cc
operator|.
name|create
argument_list|(
name|fixed
argument_list|)
expr_stmt|;
comment|// check that we have the cores we expect
name|cores
operator|=
name|cc
operator|.
name|getCoreNames
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"core names is null"
argument_list|,
name|cores
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of cores"
argument_list|,
literal|2
argument_list|,
name|cores
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"col_ok not found"
argument_list|,
name|cores
operator|.
name|contains
argument_list|(
literal|"col_ok"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"col_bad not found"
argument_list|,
name|cores
operator|.
name|contains
argument_list|(
literal|"col_bad"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that we have the failures we expect
name|failures
operator|=
name|cc
operator|.
name|getCoreInitFailures
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"core failures is a null map"
argument_list|,
name|failures
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of core failures"
argument_list|,
literal|0
argument_list|,
name|failures
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// -----
comment|// try to add a collection with a path that doesn't exist
specifier|final
name|CoreDescriptor
name|bogus
init|=
operator|new
name|CoreDescriptor
argument_list|(
name|cc
argument_list|,
literal|"bogus"
argument_list|,
literal|"bogus_path"
argument_list|)
decl_stmt|;
try|try
block|{
name|ignoreException
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
literal|"bogus_path"
argument_list|)
argument_list|)
expr_stmt|;
name|cc
operator|.
name|create
argument_list|(
name|bogus
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"bogus inst dir failed to trigger exception from create"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"init exception doesn't mention bogus dir: "
operator|+
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|0
operator|<
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"bogus_path"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check that we have the cores we expect
name|cores
operator|=
name|cc
operator|.
name|getCoreNames
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"core names is null"
argument_list|,
name|cores
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of cores"
argument_list|,
literal|2
argument_list|,
name|cores
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"col_ok not found"
argument_list|,
name|cores
operator|.
name|contains
argument_list|(
literal|"col_ok"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"col_bad not found"
argument_list|,
name|cores
operator|.
name|contains
argument_list|(
literal|"col_bad"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that we have the failures we expect
name|failures
operator|=
name|cc
operator|.
name|getCoreInitFailures
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"core failures is a null map"
argument_list|,
name|failures
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of core failures"
argument_list|,
literal|1
argument_list|,
name|failures
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|fail
operator|=
name|failures
operator|.
name|get
argument_list|(
literal|"bogus"
argument_list|)
operator|.
name|exception
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"null failure for test core"
argument_list|,
name|fail
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"init failure doesn't mention problem: "
operator|+
name|fail
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|0
operator|<
name|fail
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"bogus_path"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that we get null accessing a non-existent core
name|assertNull
argument_list|(
name|cc
operator|.
name|getCore
argument_list|(
literal|"does_not_exist"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that we get a 500 accessing the core with an init failure
try|try
block|{
name|SolrCore
name|c
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"bogus"
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Failed to get Exception on accessing core with init failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|ex
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
comment|// double wrapped
name|String
name|cause
init|=
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"getCore() ex cause doesn't mention init fail: "
operator|+
name|cause
argument_list|,
literal|0
operator|<
name|cause
operator|.
name|indexOf
argument_list|(
literal|"bogus_path"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// -----
comment|// break col_bad's config and try to RELOAD to add failure
specifier|final
name|long
name|col_bad_old_start
init|=
name|getCoreStartTime
argument_list|(
name|cc
argument_list|,
literal|"col_bad"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|write
argument_list|(
name|FileUtils
operator|.
name|getFile
argument_list|(
name|cc
operator|.
name|getSolrHome
argument_list|()
argument_list|,
literal|"col_bad"
argument_list|,
literal|"conf"
argument_list|,
literal|"solrconfig.xml"
argument_list|)
argument_list|,
literal|"This is giberish, not valid XML<"
argument_list|,
name|IOUtils
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
try|try
block|{
name|ignoreException
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
literal|"SAX"
argument_list|)
argument_list|)
expr_stmt|;
name|cc
operator|.
name|reload
argument_list|(
literal|"col_bad"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"corrupt solrconfig.xml failed to trigger exception from reload"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|Throwable
name|rootException
init|=
name|getWrappedException
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"We're supposed to have a wrapped SAXParserException here, but we don't"
argument_list|,
name|rootException
operator|instanceof
name|SAXParseException
argument_list|)
expr_stmt|;
name|SAXParseException
name|se
init|=
operator|(
name|SAXParseException
operator|)
name|rootException
decl_stmt|;
name|assertTrue
argument_list|(
literal|"reload exception doesn't refer to slrconfig.xml "
operator|+
name|se
operator|.
name|getSystemId
argument_list|()
argument_list|,
literal|0
operator|<
name|se
operator|.
name|getSystemId
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"solrconfig.xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Failed core reload should not have changed start time"
argument_list|,
name|col_bad_old_start
argument_list|,
name|getCoreStartTime
argument_list|(
name|cc
argument_list|,
literal|"col_bad"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that we have the cores we expect
name|cores
operator|=
name|cc
operator|.
name|getCoreNames
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"core names is null"
argument_list|,
name|cores
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of cores"
argument_list|,
literal|2
argument_list|,
name|cores
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"col_ok not found"
argument_list|,
name|cores
operator|.
name|contains
argument_list|(
literal|"col_ok"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"col_bad not found"
argument_list|,
name|cores
operator|.
name|contains
argument_list|(
literal|"col_bad"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that we have the failures we expect
name|failures
operator|=
name|cc
operator|.
name|getCoreInitFailures
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"core failures is a null map"
argument_list|,
name|failures
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of core failures"
argument_list|,
literal|2
argument_list|,
name|failures
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Throwable
name|ex
init|=
name|getWrappedException
argument_list|(
name|failures
operator|.
name|get
argument_list|(
literal|"col_bad"
argument_list|)
operator|.
name|exception
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"null failure for test core"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"init failure isn't SAXParseException"
argument_list|,
name|ex
operator|instanceof
name|SAXParseException
argument_list|)
expr_stmt|;
name|SAXParseException
name|saxEx
init|=
operator|(
name|SAXParseException
operator|)
name|ex
decl_stmt|;
name|assertTrue
argument_list|(
literal|"init failure doesn't mention problem: "
operator|+
name|saxEx
operator|.
name|toString
argument_list|()
argument_list|,
name|saxEx
operator|.
name|getSystemId
argument_list|()
operator|.
name|contains
argument_list|(
literal|"solrconfig.xml"
argument_list|)
argument_list|)
expr_stmt|;
comment|// ----
comment|// fix col_bad's config (again) and RELOAD to fix failure
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|getFile
argument_list|(
literal|"solr/collection1/conf/solrconfig-defaults.xml"
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|getFile
argument_list|(
name|cc
operator|.
name|getSolrHome
argument_list|()
argument_list|,
literal|"col_bad"
argument_list|,
literal|"conf"
argument_list|,
literal|"solrconfig.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|cc
operator|.
name|reload
argument_list|(
literal|"col_bad"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Core reload should have changed start time"
argument_list|,
name|col_bad_old_start
operator|<
name|getCoreStartTime
argument_list|(
name|cc
argument_list|,
literal|"col_bad"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that we have the cores we expect
name|cores
operator|=
name|cc
operator|.
name|getCoreNames
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"core names is null"
argument_list|,
name|cores
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of cores"
argument_list|,
literal|2
argument_list|,
name|cores
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"col_ok not found"
argument_list|,
name|cores
operator|.
name|contains
argument_list|(
literal|"col_ok"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"col_bad not found"
argument_list|,
name|cores
operator|.
name|contains
argument_list|(
literal|"col_bad"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that we have the failures we expect
name|failures
operator|=
name|cc
operator|.
name|getCoreInitFailures
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"core failures is a null map"
argument_list|,
name|failures
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of core failures"
argument_list|,
literal|1
argument_list|,
name|failures
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|getCoreStartTime
specifier|private
name|long
name|getCoreStartTime
parameter_list|(
specifier|final
name|CoreContainer
name|cc
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
block|{
try|try
init|(
name|SolrCore
name|tmp
init|=
name|cc
operator|.
name|getCore
argument_list|(
name|name
argument_list|)
init|)
block|{
return|return
name|tmp
operator|.
name|getStartTimeStamp
argument_list|()
operator|.
name|getTime
argument_list|()
return|;
block|}
block|}
block|}
end_class
end_unit
