begin_unit
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrInfoMBean
operator|.
name|Category
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|MockInfoMBean
class|class
name|MockInfoMBean
implements|implements
name|SolrInfoMBean
block|{
annotation|@
name|Override
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"mock"
return|;
block|}
annotation|@
name|Override
DECL|method|getCategory
specifier|public
name|Category
name|getCategory
parameter_list|()
block|{
return|return
name|Category
operator|.
name|OTHER
return|;
block|}
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"mock"
return|;
block|}
annotation|@
name|Override
DECL|method|getDocs
specifier|public
name|URL
index|[]
name|getDocs
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getVersion
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
literal|"mock"
return|;
block|}
annotation|@
name|Override
DECL|method|getSource
specifier|public
name|String
name|getSource
parameter_list|()
block|{
return|return
literal|"mock"
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getStatistics
specifier|public
name|NamedList
name|getStatistics
parameter_list|()
block|{
name|NamedList
name|myList
init|=
operator|new
name|NamedList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|myList
operator|.
name|add
argument_list|(
literal|"Integer"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|myList
operator|.
name|add
argument_list|(
literal|"Double"
argument_list|,
literal|567.534
argument_list|)
expr_stmt|;
name|myList
operator|.
name|add
argument_list|(
literal|"Long"
argument_list|,
literal|32352463l
argument_list|)
expr_stmt|;
name|myList
operator|.
name|add
argument_list|(
literal|"Short"
argument_list|,
operator|(
name|short
operator|)
literal|32768
argument_list|)
expr_stmt|;
name|myList
operator|.
name|add
argument_list|(
literal|"Byte"
argument_list|,
operator|(
name|byte
operator|)
literal|254
argument_list|)
expr_stmt|;
name|myList
operator|.
name|add
argument_list|(
literal|"Float"
argument_list|,
literal|3.456f
argument_list|)
expr_stmt|;
name|myList
operator|.
name|add
argument_list|(
literal|"String"
argument_list|,
literal|"testing"
argument_list|)
expr_stmt|;
name|myList
operator|.
name|add
argument_list|(
literal|"Object"
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|myList
return|;
block|}
block|}
end_class
end_unit
