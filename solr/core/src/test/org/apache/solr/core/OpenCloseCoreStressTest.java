begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|UpdateResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TimeOut
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import
begin_comment
comment|/**  * Incorporate the open/close stress tests into unit tests.  */
end_comment
begin_class
DECL|class|OpenCloseCoreStressTest
specifier|public
class|class
name|OpenCloseCoreStressTest
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|locker
specifier|private
specifier|final
name|Object
name|locker
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|numCores
specifier|private
name|int
name|numCores
init|=
name|TEST_NIGHTLY
condition|?
literal|7
else|:
literal|5
decl_stmt|;
DECL|field|coreCounts
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|coreCounts
decl_stmt|;
DECL|field|coreNames
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|coreNames
decl_stmt|;
DECL|field|COMMIT_WITHIN
specifier|static
specifier|final
name|int
name|COMMIT_WITHIN
init|=
literal|5000
decl_stmt|;
DECL|field|indexingThreads
specifier|final
name|int
name|indexingThreads
init|=
name|TEST_NIGHTLY
condition|?
literal|9
else|:
literal|5
decl_stmt|;
DECL|field|queryThreads
specifier|final
name|int
name|queryThreads
init|=
name|TEST_NIGHTLY
condition|?
literal|9
else|:
literal|5
decl_stmt|;
DECL|field|resetInterval
specifier|final
name|int
name|resetInterval
init|=
literal|30
operator|*
literal|60
decl_stmt|;
comment|// minutes to report then delete everything
DECL|field|cumulativeDocs
name|long
name|cumulativeDocs
init|=
literal|0
decl_stmt|;
DECL|field|url
name|String
name|url
decl_stmt|;
DECL|field|jetty
name|JettySolrRunner
name|jetty
init|=
literal|null
decl_stmt|;
DECL|field|solrHomeDirectory
name|File
name|solrHomeDirectory
decl_stmt|;
DECL|field|indexingClients
name|List
argument_list|<
name|HttpSolrClient
argument_list|>
name|indexingClients
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|indexingThreads
argument_list|)
decl_stmt|;
DECL|field|queryingClients
name|List
argument_list|<
name|HttpSolrClient
argument_list|>
name|queryingClients
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|queryThreads
argument_list|)
decl_stmt|;
DECL|field|savedFactory
specifier|static
name|String
name|savedFactory
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
block|{    }
annotation|@
name|Before
DECL|method|setupServer
specifier|public
name|void
name|setupServer
parameter_list|()
throws|throws
name|Exception
block|{
name|coreCounts
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
expr_stmt|;
name|coreNames
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|cumulativeDocs
operator|=
literal|0
expr_stmt|;
name|solrHomeDirectory
operator|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
expr_stmt|;
name|jetty
operator|=
operator|new
name|JettySolrRunner
argument_list|(
name|solrHomeDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|buildJettyConfig
argument_list|(
literal|"/solr"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDownServer
specifier|public
name|void
name|tearDownServer
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|jetty
operator|!=
literal|null
condition|)
name|jetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|indexingClients
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|queryingClients
argument_list|)
expr_stmt|;
name|indexingClients
operator|.
name|clear
argument_list|()
expr_stmt|;
name|queryingClients
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test5Seconds
specifier|public
name|void
name|test5Seconds
parameter_list|()
throws|throws
name|Exception
block|{
name|doStress
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Nightly
DECL|method|test15SecondsOld
specifier|public
name|void
name|test15SecondsOld
parameter_list|()
throws|throws
name|Exception
block|{
name|doStress
argument_list|(
literal|15
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Nightly
DECL|method|test15SecondsNew
specifier|public
name|void
name|test15SecondsNew
parameter_list|()
throws|throws
name|Exception
block|{
name|doStress
argument_list|(
literal|15
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Nightly
DECL|method|test10MinutesOld
specifier|public
name|void
name|test10MinutesOld
parameter_list|()
throws|throws
name|Exception
block|{
name|doStress
argument_list|(
literal|300
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Nightly
DECL|method|test10MinutesNew
specifier|public
name|void
name|test10MinutesNew
parameter_list|()
throws|throws
name|Exception
block|{
name|doStress
argument_list|(
literal|300
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Weekly
DECL|method|test1Hour
specifier|public
name|void
name|test1Hour
parameter_list|()
throws|throws
name|Exception
block|{
name|doStress
argument_list|(
literal|1800
argument_list|)
expr_stmt|;
block|}
DECL|method|buildClients
specifier|private
name|void
name|buildClients
parameter_list|()
throws|throws
name|Exception
block|{
name|jetty
operator|.
name|start
argument_list|()
expr_stmt|;
name|url
operator|=
name|buildUrl
argument_list|(
name|jetty
operator|.
name|getLocalPort
argument_list|()
argument_list|,
literal|"/solr/"
argument_list|)
expr_stmt|;
comment|// Mostly to keep annoying logging messages from being sent out all the time.
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|indexingThreads
condition|;
operator|++
name|idx
control|)
block|{
name|HttpSolrClient
name|client
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|client
operator|.
name|setDefaultMaxConnectionsPerHost
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|client
operator|.
name|setConnectionTimeout
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
name|client
operator|.
name|setSoTimeout
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
name|indexingClients
operator|.
name|add
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|queryThreads
condition|;
operator|++
name|idx
control|)
block|{
name|HttpSolrClient
name|client
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|client
operator|.
name|setDefaultMaxConnectionsPerHost
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|client
operator|.
name|setConnectionTimeout
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
name|client
operator|.
name|setSoTimeout
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
name|queryingClients
operator|.
name|add
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Unless things go _really_ well, stop after you have the directories set up.
DECL|method|doStress
specifier|private
name|void
name|doStress
parameter_list|(
name|int
name|secondsToRun
parameter_list|)
throws|throws
name|Exception
block|{
name|makeCores
argument_list|(
name|solrHomeDirectory
argument_list|)
expr_stmt|;
comment|//MUST start the server after the cores are made.
name|buildClients
argument_list|()
expr_stmt|;
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Starting indexing and querying"
argument_list|)
expr_stmt|;
name|int
name|secondsRun
init|=
literal|0
decl_stmt|;
name|int
name|secondsRemaining
init|=
name|secondsToRun
decl_stmt|;
do|do
block|{
name|int
name|cycleSeconds
init|=
name|Math
operator|.
name|min
argument_list|(
name|resetInterval
argument_list|,
name|secondsRemaining
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"\n\n\n\n\nStarting a %,d second cycle, seconds left: %,d. Seconds run so far: %,d."
argument_list|,
name|cycleSeconds
argument_list|,
name|secondsRemaining
argument_list|,
name|secondsRun
argument_list|)
argument_list|)
expr_stmt|;
name|Indexer
name|idxer
init|=
operator|new
name|Indexer
argument_list|(
name|this
argument_list|,
name|url
argument_list|,
name|indexingClients
argument_list|,
name|indexingThreads
argument_list|,
name|cycleSeconds
argument_list|,
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|Queries
name|queries
init|=
operator|new
name|Queries
argument_list|(
name|this
argument_list|,
name|url
argument_list|,
name|queryingClients
argument_list|,
name|queryThreads
argument_list|,
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|idxer
operator|.
name|waitOnThreads
argument_list|()
expr_stmt|;
name|queries
operator|.
name|waitOnThreads
argument_list|()
expr_stmt|;
name|secondsRemaining
operator|=
name|Math
operator|.
name|max
argument_list|(
name|secondsRemaining
operator|-
name|resetInterval
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkResults
argument_list|(
name|queryingClients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|queries
argument_list|,
name|idxer
argument_list|)
expr_stmt|;
name|secondsRun
operator|+=
name|cycleSeconds
expr_stmt|;
if|if
condition|(
name|secondsRemaining
operator|>
literal|0
condition|)
block|{
name|deleteAllDocuments
argument_list|(
name|queryingClients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|queries
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|secondsRemaining
operator|>
literal|0
condition|)
do|;
name|assertTrue
argument_list|(
literal|"We didn't index any documents, somethings really messed up"
argument_list|,
name|cumulativeDocs
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Caught unexpected exception"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|makeCores
specifier|private
name|void
name|makeCores
parameter_list|(
name|File
name|home
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|testSrcRoot
init|=
operator|new
name|File
argument_list|(
name|SolrTestCaseJ4
operator|.
name|TEST_HOME
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|srcSolrXml
init|=
literal|"solr-stress-new.xml"
decl_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|testSrcRoot
argument_list|,
name|srcSolrXml
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|home
argument_list|,
literal|"solr.xml"
argument_list|)
argument_list|)
expr_stmt|;
comment|// create directories in groups of 100 until you have enough.
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|numCores
condition|;
operator|++
name|idx
control|)
block|{
name|String
name|coreName
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%05d_core"
argument_list|,
name|idx
argument_list|)
decl_stmt|;
name|makeCore
argument_list|(
operator|new
name|File
argument_list|(
name|home
argument_list|,
name|coreName
argument_list|)
argument_list|,
name|testSrcRoot
argument_list|)
expr_stmt|;
name|coreCounts
operator|.
name|put
argument_list|(
name|coreName
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|coreNames
operator|.
name|add
argument_list|(
name|coreName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|makeCore
specifier|private
name|void
name|makeCore
parameter_list|(
name|File
name|coreDir
parameter_list|,
name|File
name|testSrcRoot
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|conf
init|=
operator|new
name|File
argument_list|(
name|coreDir
argument_list|,
literal|"conf"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|conf
operator|.
name|mkdirs
argument_list|()
condition|)
name|log
operator|.
name|warn
argument_list|(
literal|"mkdirs returned false in makeCore... ignoring"
argument_list|)
expr_stmt|;
name|File
name|testConf
init|=
operator|new
name|File
argument_list|(
name|testSrcRoot
argument_list|,
literal|"collection1/conf"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|testConf
argument_list|,
literal|"schema-tiny.xml"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|conf
argument_list|,
literal|"schema-tiny.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|testConf
argument_list|,
literal|"solrconfig-minimal.xml"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|conf
argument_list|,
literal|"solrconfig-minimal.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|testConf
argument_list|,
literal|"solrconfig.snippet.randomindexconfig.xml"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|conf
argument_list|,
literal|"solrconfig.snippet.randomindexconfig.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|testSrcRoot
argument_list|,
literal|"conf/core.properties"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|coreDir
argument_list|,
literal|"core.properties"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteAllDocuments
name|void
name|deleteAllDocuments
parameter_list|(
name|HttpSolrClient
name|client
parameter_list|,
name|Queries
name|queries
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Deleting data from last cycle, this may take a few minutes."
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|core
range|:
name|coreNames
control|)
block|{
try|try
block|{
name|client
operator|.
name|setBaseURL
argument_list|(
name|url
operator|+
name|core
argument_list|)
expr_stmt|;
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|client
operator|.
name|optimize
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// should be close to a no-op.
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|// We're testing, after all. Let's be really sure things are as we expect.
name|log
operator|.
name|info
argument_list|(
literal|"Insuring all cores empty"
argument_list|)
expr_stmt|;
name|long
name|foundDocs
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|core
range|:
name|coreNames
control|)
block|{
try|try
block|{
name|long
name|found
init|=
name|queries
operator|.
name|getCount
argument_list|(
name|client
argument_list|,
name|core
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Cores should be empty"
argument_list|,
name|found
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|foundDocs
operator|+=
name|found
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|foundDocs
operator|>
literal|0
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Found docs after purging done, this is bad."
argument_list|)
expr_stmt|;
block|}
comment|// Reset counters for another go-round
name|coreCounts
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|core
range|:
name|coreNames
control|)
block|{
name|coreCounts
operator|.
name|put
argument_list|(
name|core
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkResults
specifier|private
name|void
name|checkResults
parameter_list|(
name|HttpSolrClient
name|client
parameter_list|,
name|Queries
name|queries
parameter_list|,
name|Indexer
name|idxer
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Checking if indexes have all the documents they should..."
argument_list|)
expr_stmt|;
name|long
name|totalDocsFound
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|ent
range|:
name|coreCounts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|client
operator|.
name|setBaseURL
argument_list|(
name|url
operator|+
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|3
condition|;
operator|++
name|idx
control|)
block|{
try|try
block|{
name|client
operator|.
name|commit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
comment|// retry loop
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Exception when committing core "
operator|+
name|ent
operator|.
name|getKey
argument_list|()
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|numFound
init|=
name|queries
operator|.
name|getCount
argument_list|(
name|client
argument_list|,
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|totalDocsFound
operator|+=
name|numFound
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Core %s bad!"
argument_list|,
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
operator|(
name|long
operator|)
name|ent
operator|.
name|getValue
argument_list|()
argument_list|,
name|numFound
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"\n\nDocs indexed (cumulative, all cycles): %,d, total docs: %,d: Cycle stats: updates: %,d: qtimes: %,d"
argument_list|,
name|Indexer
operator|.
name|idUnique
operator|.
name|get
argument_list|()
argument_list|,
name|totalDocsFound
argument_list|,
name|idxer
operator|.
name|getAccumUpdates
argument_list|()
argument_list|,
name|idxer
operator|.
name|getAccumQtimes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cumulativeDocs
operator|+=
name|totalDocsFound
expr_stmt|;
block|}
DECL|method|getRandomCore
name|String
name|getRandomCore
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
return|return
name|coreNames
operator|.
name|get
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
operator|%
name|coreNames
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
DECL|method|incrementCoreCount
name|void
name|incrementCoreCount
parameter_list|(
name|String
name|core
parameter_list|)
block|{
synchronized|synchronized
init|(
name|locker
init|)
block|{
name|coreCounts
operator|.
name|put
argument_list|(
name|core
argument_list|,
name|coreCounts
operator|.
name|get
argument_list|(
name|core
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
begin_class
DECL|class|Indexer
class|class
name|Indexer
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|idUnique
specifier|static
name|AtomicInteger
name|idUnique
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|errors
specifier|static
name|AtomicInteger
name|errors
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|docsThisCycle
specifier|static
name|AtomicInteger
name|docsThisCycle
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|qTimesAccum
specifier|static
name|AtomicLong
name|qTimesAccum
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|updateCounts
specifier|static
name|AtomicInteger
name|updateCounts
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|lastCount
specifier|static
specifier|volatile
name|int
name|lastCount
decl_stmt|;
DECL|field|stopTimeout
specifier|static
specifier|volatile
name|TimeOut
name|stopTimeout
decl_stmt|;
DECL|field|nextTimeout
specifier|private
specifier|static
specifier|volatile
name|TimeOut
name|nextTimeout
decl_stmt|;
DECL|field|_threads
name|ArrayList
argument_list|<
name|OneIndexer
argument_list|>
name|_threads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|Indexer
specifier|public
name|Indexer
parameter_list|(
name|OpenCloseCoreStressTest
name|OCCST
parameter_list|,
name|String
name|url
parameter_list|,
name|List
argument_list|<
name|HttpSolrClient
argument_list|>
name|clients
parameter_list|,
name|int
name|numThreads
parameter_list|,
name|int
name|secondsToRun
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
name|stopTimeout
operator|=
operator|new
name|TimeOut
argument_list|(
name|secondsToRun
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|nextTimeout
operator|=
operator|new
name|TimeOut
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|docsThisCycle
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|qTimesAccum
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|updateCounts
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|numThreads
condition|;
operator|++
name|idx
control|)
block|{
name|OneIndexer
name|one
init|=
operator|new
name|OneIndexer
argument_list|(
name|OCCST
argument_list|,
name|url
argument_list|,
name|clients
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|,
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|_threads
operator|.
name|add
argument_list|(
name|one
argument_list|)
expr_stmt|;
name|one
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|waitOnThreads
specifier|public
name|void
name|waitOnThreads
parameter_list|()
block|{
for|for
control|(
name|Thread
name|thread
range|:
name|_threads
control|)
block|{
try|try
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|getAccumQtimes
specifier|public
name|long
name|getAccumQtimes
parameter_list|()
block|{
return|return
name|qTimesAccum
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getAccumUpdates
specifier|public
name|int
name|getAccumUpdates
parameter_list|()
block|{
return|return
name|updateCounts
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|progress
specifier|synchronized
specifier|static
name|void
name|progress
parameter_list|(
name|int
name|myId
parameter_list|,
name|String
name|core
parameter_list|)
block|{
if|if
condition|(
name|nextTimeout
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|" s indexed: [run %,8d] [cycle %,8d] [last minute %,8d] Last core updated: %s. Seconds left in cycle %,4d"
argument_list|,
name|myId
argument_list|,
name|docsThisCycle
operator|.
name|get
argument_list|()
argument_list|,
name|myId
operator|-
name|lastCount
argument_list|,
name|core
argument_list|,
name|stopTimeout
operator|.
name|timeLeft
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|lastCount
operator|=
name|myId
expr_stmt|;
name|nextTimeout
operator|=
operator|new
name|TimeOut
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
begin_class
DECL|class|OneIndexer
class|class
name|OneIndexer
extends|extends
name|Thread
block|{
DECL|field|OCCST
specifier|private
specifier|final
name|OpenCloseCoreStressTest
name|OCCST
decl_stmt|;
DECL|field|client
specifier|private
specifier|final
name|HttpSolrClient
name|client
decl_stmt|;
DECL|field|baseUrl
specifier|private
specifier|final
name|String
name|baseUrl
decl_stmt|;
DECL|field|random
specifier|private
specifier|final
name|Random
name|random
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|OneIndexer
name|OneIndexer
parameter_list|(
name|OpenCloseCoreStressTest
name|OCCST
parameter_list|,
name|String
name|url
parameter_list|,
name|HttpSolrClient
name|client
parameter_list|,
name|long
name|seed
parameter_list|)
block|{
name|this
operator|.
name|OCCST
operator|=
name|OCCST
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|baseUrl
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|random
operator|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Starting indexing thread: "
operator|+
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|Indexer
operator|.
name|stopTimeout
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
name|int
name|myId
init|=
name|Indexer
operator|.
name|idUnique
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|Indexer
operator|.
name|docsThisCycle
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|String
name|core
init|=
name|OCCST
operator|.
name|getRandomCore
argument_list|(
name|random
argument_list|)
decl_stmt|;
name|OCCST
operator|.
name|incrementCoreCount
argument_list|(
name|core
argument_list|)
expr_stmt|;
name|Indexer
operator|.
name|progress
argument_list|(
name|myId
argument_list|,
name|core
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|3
condition|;
operator|++
name|idx
control|)
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"id"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|myId
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"text"
argument_list|,
literal|"text "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|myId
argument_list|)
argument_list|)
expr_stmt|;
name|UpdateRequest
name|update
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|update
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|setBaseURL
argument_list|(
name|baseUrl
operator|+
name|core
argument_list|)
expr_stmt|;
name|UpdateResponse
name|response
init|=
name|client
operator|.
name|add
argument_list|(
name|doc
argument_list|,
name|OpenCloseCoreStressTest
operator|.
name|COMMIT_WITHIN
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to index a document to core "
operator|+
name|core
operator|+
literal|" with status "
operator|+
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Indexer
operator|.
name|qTimesAccum
operator|.
name|addAndGet
argument_list|(
name|response
operator|.
name|getQTime
argument_list|()
argument_list|)
expr_stmt|;
name|Indexer
operator|.
name|updateCounts
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
break|break;
comment|// retry loop.
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
comment|// Let's not go crazy here.
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|InterruptedException
condition|)
return|return;
name|Indexer
operator|.
name|errors
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|idx
operator|==
literal|2
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Could not reach server while indexing for three tries, quitting "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Indexing thread "
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|" swallowed one exception "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|tex
parameter_list|)
block|{
return|return;
block|}
block|}
block|}
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Leaving indexing thread "
operator|+
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
begin_class
DECL|class|Queries
class|class
name|Queries
block|{
DECL|field|_keepon
specifier|static
name|AtomicBoolean
name|_keepon
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
DECL|field|_threads
name|List
argument_list|<
name|Thread
argument_list|>
name|_threads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|_errors
specifier|static
name|AtomicInteger
name|_errors
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|baseUrl
name|String
name|baseUrl
decl_stmt|;
DECL|method|Queries
specifier|public
name|Queries
parameter_list|(
name|OpenCloseCoreStressTest
name|OCCST
parameter_list|,
name|String
name|url
parameter_list|,
name|List
argument_list|<
name|HttpSolrClient
argument_list|>
name|clients
parameter_list|,
name|int
name|numThreads
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
name|baseUrl
operator|=
name|url
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|numThreads
condition|;
operator|++
name|idx
control|)
block|{
name|Thread
name|one
init|=
operator|new
name|OneQuery
argument_list|(
name|OCCST
argument_list|,
name|url
argument_list|,
name|clients
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|,
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|_threads
operator|.
name|add
argument_list|(
name|one
argument_list|)
expr_stmt|;
name|one
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|waitOnThreads
specifier|public
name|void
name|waitOnThreads
parameter_list|()
block|{
name|Queries
operator|.
name|_keepon
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|_threads
control|)
block|{
try|try
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|getCount
specifier|public
name|long
name|getCount
parameter_list|(
name|HttpSolrClient
name|client
parameter_list|,
name|String
name|core
parameter_list|)
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/select"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|long
name|numFound
init|=
literal|0
decl_stmt|;
name|client
operator|.
name|setBaseURL
argument_list|(
name|baseUrl
operator|+
name|core
argument_list|)
expr_stmt|;
try|try
block|{
name|QueryResponse
name|response
init|=
name|client
operator|.
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|numFound
operator|=
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|numFound
return|;
block|}
block|}
end_class
begin_class
DECL|class|OneQuery
class|class
name|OneQuery
extends|extends
name|Thread
block|{
DECL|field|OCCST
name|OpenCloseCoreStressTest
name|OCCST
decl_stmt|;
DECL|field|client
specifier|private
specifier|final
name|HttpSolrClient
name|client
decl_stmt|;
DECL|field|baseUrl
specifier|private
specifier|final
name|String
name|baseUrl
decl_stmt|;
DECL|field|random
specifier|private
specifier|final
name|Random
name|random
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|OneQuery
name|OneQuery
parameter_list|(
name|OpenCloseCoreStressTest
name|OCCST
parameter_list|,
name|String
name|url
parameter_list|,
name|HttpSolrClient
name|client
parameter_list|,
name|long
name|seed
parameter_list|)
block|{
name|this
operator|.
name|OCCST
operator|=
name|OCCST
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|baseUrl
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|random
operator|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Starting query thread: "
operator|+
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|Queries
operator|.
name|_keepon
operator|.
name|get
argument_list|()
condition|)
block|{
name|String
name|core
init|=
name|OCCST
operator|.
name|getRandomCore
argument_list|(
name|random
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|3
condition|;
operator|++
name|idx
control|)
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/select"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
try|try
block|{
comment|// sleep between 250ms and 10000 ms
name|Thread
operator|.
name|sleep
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
comment|// Let's not go crazy here.
name|client
operator|.
name|setBaseURL
argument_list|(
name|baseUrl
operator|+
name|core
argument_list|)
expr_stmt|;
name|QueryResponse
name|response
init|=
name|client
operator|.
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to query core "
operator|+
name|core
operator|+
literal|" with status "
operator|+
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Perhaps collect some stats here in future.
break|break;
comment|// retry loop
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|InterruptedException
condition|)
return|return;
name|Queries
operator|.
name|_errors
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|idx
operator|==
literal|2
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Could not reach server while indexing for three tries, quitting "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Querying thread: "
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|" swallowed exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500L
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|tex
parameter_list|)
block|{
return|return;
block|}
block|}
block|}
block|}
block|}
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Leaving query thread: "
operator|+
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
