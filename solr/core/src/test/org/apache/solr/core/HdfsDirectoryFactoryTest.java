begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|LockFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|NoLockFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|hdfs
operator|.
name|HdfsTestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|DirectoryFactory
operator|.
name|DirContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|SnapShooter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|store
operator|.
name|hdfs
operator|.
name|HdfsLocalityReporter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|BadHdfsThreadsFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|MockCoreContainer
operator|.
name|MockCoreDescriptor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakFilters
import|;
end_import
begin_class
annotation|@
name|ThreadLeakFilters
argument_list|(
name|defaultFilters
operator|=
literal|true
argument_list|,
name|filters
operator|=
block|{
name|BadHdfsThreadsFilter
operator|.
name|class
comment|// hdfs currently leaks thread(s)
block|}
argument_list|)
DECL|class|HdfsDirectoryFactoryTest
specifier|public
class|class
name|HdfsDirectoryFactoryTest
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|dfsCluster
specifier|private
specifier|static
name|MiniDFSCluster
name|dfsCluster
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupClass
specifier|public
specifier|static
name|void
name|setupClass
parameter_list|()
throws|throws
name|Exception
block|{
name|dfsCluster
operator|=
name|HdfsTestUtil
operator|.
name|setupClass
argument_list|(
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|teardownClass
specifier|public
specifier|static
name|void
name|teardownClass
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsTestUtil
operator|.
name|teardownClass
argument_list|(
name|dfsCluster
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.hdfs.home"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
name|HdfsDirectoryFactory
operator|.
name|NRTCACHINGDIRECTORY_MAXMERGESIZEMB
argument_list|)
expr_stmt|;
name|dfsCluster
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInitArgsOrSysPropConfig
specifier|public
name|void
name|testInitArgsOrSysPropConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsDirectoryFactory
name|hdfsFactory
init|=
operator|new
name|HdfsDirectoryFactory
argument_list|()
decl_stmt|;
comment|// test sys prop config
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.hdfs.home"
argument_list|,
name|HdfsTestUtil
operator|.
name|getURI
argument_list|(
name|dfsCluster
argument_list|)
operator|+
literal|"/solr1"
argument_list|)
expr_stmt|;
name|hdfsFactory
operator|.
name|init
argument_list|(
operator|new
name|NamedList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|dataHome
init|=
name|hdfsFactory
operator|.
name|getDataHome
argument_list|(
operator|new
name|MockCoreDescriptor
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dataHome
operator|.
name|endsWith
argument_list|(
literal|"/solr1/mock/data"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.hdfs.home"
argument_list|)
expr_stmt|;
comment|// test init args config
name|NamedList
argument_list|<
name|Object
argument_list|>
name|nl
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|nl
operator|.
name|add
argument_list|(
literal|"solr.hdfs.home"
argument_list|,
name|HdfsTestUtil
operator|.
name|getURI
argument_list|(
name|dfsCluster
argument_list|)
operator|+
literal|"/solr2"
argument_list|)
expr_stmt|;
name|hdfsFactory
operator|.
name|init
argument_list|(
name|nl
argument_list|)
expr_stmt|;
name|dataHome
operator|=
name|hdfsFactory
operator|.
name|getDataHome
argument_list|(
operator|new
name|MockCoreDescriptor
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dataHome
operator|.
name|endsWith
argument_list|(
literal|"/solr2/mock/data"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test sys prop and init args config - init args wins
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.hdfs.home"
argument_list|,
name|HdfsTestUtil
operator|.
name|getURI
argument_list|(
name|dfsCluster
argument_list|)
operator|+
literal|"/solr1"
argument_list|)
expr_stmt|;
name|hdfsFactory
operator|.
name|init
argument_list|(
name|nl
argument_list|)
expr_stmt|;
name|dataHome
operator|=
name|hdfsFactory
operator|.
name|getDataHome
argument_list|(
operator|new
name|MockCoreDescriptor
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dataHome
operator|.
name|endsWith
argument_list|(
literal|"/solr2/mock/data"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.hdfs.home"
argument_list|)
expr_stmt|;
comment|// set conf dir by sys prop
name|Path
name|confDir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|HdfsDirectoryFactory
operator|.
name|CONFIG_DIRECTORY
argument_list|,
name|confDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Directory
name|dir
init|=
name|hdfsFactory
operator|.
name|create
argument_list|(
name|HdfsTestUtil
operator|.
name|getURI
argument_list|(
name|dfsCluster
argument_list|)
operator|+
literal|"/solr"
argument_list|,
name|NoLockFactory
operator|.
name|INSTANCE
argument_list|,
name|DirContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|confDir
operator|.
name|toString
argument_list|()
argument_list|,
name|hdfsFactory
operator|.
name|getConfDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// check bool and int getConf impls
name|nl
operator|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
expr_stmt|;
name|nl
operator|.
name|add
argument_list|(
name|HdfsDirectoryFactory
operator|.
name|NRTCACHINGDIRECTORY_MAXMERGESIZEMB
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|HdfsDirectoryFactory
operator|.
name|NRTCACHINGDIRECTORY_MAXMERGESIZEMB
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|nl
operator|.
name|add
argument_list|(
name|HdfsDirectoryFactory
operator|.
name|BLOCKCACHE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|HdfsDirectoryFactory
operator|.
name|BLOCKCACHE_ENABLED
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|hdfsFactory
operator|.
name|init
argument_list|(
name|nl
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|hdfsFactory
operator|.
name|getConfig
argument_list|(
name|HdfsDirectoryFactory
operator|.
name|NRTCACHINGDIRECTORY_MAXMERGESIZEMB
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|hdfsFactory
operator|.
name|getConfig
argument_list|(
name|HdfsDirectoryFactory
operator|.
name|BLOCKCACHE_ENABLED
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|nl
operator|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
expr_stmt|;
name|hdfsFactory
operator|.
name|init
argument_list|(
name|nl
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|HdfsDirectoryFactory
operator|.
name|BLOCKCACHE_ENABLED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hdfsFactory
operator|.
name|getConfig
argument_list|(
name|HdfsDirectoryFactory
operator|.
name|NRTCACHINGDIRECTORY_MAXMERGESIZEMB
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|hdfsFactory
operator|.
name|getConfig
argument_list|(
name|HdfsDirectoryFactory
operator|.
name|BLOCKCACHE_ENABLED
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
name|HdfsDirectoryFactory
operator|.
name|NRTCACHINGDIRECTORY_MAXMERGESIZEMB
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
name|HdfsDirectoryFactory
operator|.
name|BLOCKCACHE_ENABLED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hdfsFactory
operator|.
name|getConfig
argument_list|(
name|HdfsDirectoryFactory
operator|.
name|NRTCACHINGDIRECTORY_MAXMERGESIZEMB
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|hdfsFactory
operator|.
name|getConfig
argument_list|(
name|HdfsDirectoryFactory
operator|.
name|BLOCKCACHE_ENABLED
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|hdfsFactory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCleanupOldIndexDirectories
specifier|public
name|void
name|testCleanupOldIndexDirectories
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsDirectoryFactory
name|hdfsFactory
init|=
operator|new
name|HdfsDirectoryFactory
argument_list|()
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.hdfs.home"
argument_list|,
name|HdfsTestUtil
operator|.
name|getURI
argument_list|(
name|dfsCluster
argument_list|)
operator|+
literal|"/solr1"
argument_list|)
expr_stmt|;
name|hdfsFactory
operator|.
name|init
argument_list|(
operator|new
name|NamedList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|dataHome
init|=
name|hdfsFactory
operator|.
name|getDataHome
argument_list|(
operator|new
name|MockCoreDescriptor
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dataHome
operator|.
name|endsWith
argument_list|(
literal|"/solr1/mock/data"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.hdfs.home"
argument_list|)
expr_stmt|;
name|FileSystem
name|hdfs
init|=
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
name|dataHomePath
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
argument_list|(
name|dataHome
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
name|currentIndexDirPath
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
argument_list|(
name|dataHomePath
argument_list|,
literal|"index"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|hdfs
operator|.
name|isDirectory
argument_list|(
name|currentIndexDirPath
argument_list|)
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|currentIndexDirPath
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|isDirectory
argument_list|(
name|currentIndexDirPath
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|timestamp1
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|SnapShooter
operator|.
name|DATE_FMT
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
name|oldIndexDirPath
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
argument_list|(
name|dataHomePath
argument_list|,
literal|"index."
operator|+
name|timestamp1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|hdfs
operator|.
name|isDirectory
argument_list|(
name|oldIndexDirPath
argument_list|)
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|oldIndexDirPath
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|isDirectory
argument_list|(
name|oldIndexDirPath
argument_list|)
argument_list|)
expr_stmt|;
name|hdfsFactory
operator|.
name|cleanupOldIndexDirectories
argument_list|(
name|dataHomePath
operator|.
name|toString
argument_list|()
argument_list|,
name|currentIndexDirPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|isDirectory
argument_list|(
name|currentIndexDirPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|hdfs
operator|.
name|isDirectory
argument_list|(
name|oldIndexDirPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocalityReporter
specifier|public
name|void
name|testLocalityReporter
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HdfsTestUtil
operator|.
name|getClientConfiguration
argument_list|(
name|dfsCluster
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.permissions.enabled"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|HdfsDirectoryFactory
name|factory
init|=
operator|new
name|HdfsDirectoryFactory
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|HdfsDirectoryFactory
operator|.
name|HDFS_HOME
argument_list|,
name|HdfsTestUtil
operator|.
name|getURI
argument_list|(
name|dfsCluster
argument_list|)
operator|+
literal|"/solr"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|HdfsDirectoryFactory
operator|.
name|BLOCKCACHE_ENABLED
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|HdfsDirectoryFactory
operator|.
name|NRTCACHINGDIRECTORY_ENABLE
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|factory
operator|.
name|init
argument_list|(
operator|new
name|NamedList
argument_list|<>
argument_list|(
name|props
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|SolrInfoMBean
argument_list|>
name|it
init|=
name|factory
operator|.
name|offerMBeans
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// skip
name|SolrInfoMBean
name|localityBean
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// brittle, but it's ok
comment|// Make sure we have the right bean.
name|assertEquals
argument_list|(
literal|"Got the wrong bean: "
operator|+
name|localityBean
operator|.
name|getName
argument_list|()
argument_list|,
literal|"hdfs-locality"
argument_list|,
name|localityBean
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// We haven't done anything, so there should be no data
name|NamedList
argument_list|<
name|?
argument_list|>
name|statistics
init|=
name|localityBean
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Saw bytes that were not written: "
operator|+
name|statistics
operator|.
name|get
argument_list|(
name|HdfsLocalityReporter
operator|.
name|LOCALITY_BYTES_TOTAL
argument_list|)
argument_list|,
literal|0l
argument_list|,
name|statistics
operator|.
name|get
argument_list|(
name|HdfsLocalityReporter
operator|.
name|LOCALITY_BYTES_TOTAL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Counted bytes as local when none written: "
operator|+
name|statistics
operator|.
name|get
argument_list|(
name|HdfsLocalityReporter
operator|.
name|LOCALITY_BYTES_RATIO
argument_list|)
argument_list|,
literal|0
argument_list|,
name|statistics
operator|.
name|get
argument_list|(
name|HdfsLocalityReporter
operator|.
name|LOCALITY_BYTES_RATIO
argument_list|)
argument_list|)
expr_stmt|;
comment|// create a directory and a file
name|String
name|path
init|=
name|HdfsTestUtil
operator|.
name|getURI
argument_list|(
name|dfsCluster
argument_list|)
operator|+
literal|"/solr3/"
decl_stmt|;
name|Directory
name|dir
init|=
name|factory
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|NoLockFactory
operator|.
name|INSTANCE
argument_list|,
name|DirContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
try|try
init|(
name|IndexOutput
name|writer
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"output"
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|writer
operator|.
name|writeLong
argument_list|(
literal|42l
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|long_bytes
init|=
name|Long
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
decl_stmt|;
comment|// no locality because hostname not set
name|factory
operator|.
name|setHost
argument_list|(
literal|"bogus"
argument_list|)
expr_stmt|;
name|statistics
operator|=
name|localityBean
operator|.
name|getStatistics
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of total bytes counted: "
operator|+
name|statistics
operator|.
name|get
argument_list|(
name|HdfsLocalityReporter
operator|.
name|LOCALITY_BYTES_TOTAL
argument_list|)
argument_list|,
name|long_bytes
argument_list|,
name|statistics
operator|.
name|get
argument_list|(
name|HdfsLocalityReporter
operator|.
name|LOCALITY_BYTES_TOTAL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of total blocks counted: "
operator|+
name|statistics
operator|.
name|get
argument_list|(
name|HdfsLocalityReporter
operator|.
name|LOCALITY_BLOCKS_TOTAL
argument_list|)
argument_list|,
literal|1
argument_list|,
name|statistics
operator|.
name|get
argument_list|(
name|HdfsLocalityReporter
operator|.
name|LOCALITY_BLOCKS_TOTAL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Counted block as local when bad hostname set: "
operator|+
name|statistics
operator|.
name|get
argument_list|(
name|HdfsLocalityReporter
operator|.
name|LOCALITY_BLOCKS_LOCAL
argument_list|)
argument_list|,
literal|0
argument_list|,
name|statistics
operator|.
name|get
argument_list|(
name|HdfsLocalityReporter
operator|.
name|LOCALITY_BLOCKS_LOCAL
argument_list|)
argument_list|)
expr_stmt|;
comment|// set hostname and check again
name|factory
operator|.
name|setHost
argument_list|(
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
name|statistics
operator|=
name|localityBean
operator|.
name|getStatistics
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Did not count block as local after setting hostname: "
operator|+
name|statistics
operator|.
name|get
argument_list|(
name|HdfsLocalityReporter
operator|.
name|LOCALITY_BYTES_LOCAL
argument_list|)
argument_list|,
name|long_bytes
argument_list|,
name|statistics
operator|.
name|get
argument_list|(
name|HdfsLocalityReporter
operator|.
name|LOCALITY_BYTES_LOCAL
argument_list|)
argument_list|)
expr_stmt|;
name|factory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
