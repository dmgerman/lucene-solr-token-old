begin_unit
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|Charsets
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|CoreAdminHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|LocalSolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|AddUpdateCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|CommitUpdateCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|UpdateHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TestHarness
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_class
DECL|class|TestLazyCores
specifier|public
class|class
name|TestLazyCores
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-minimal.xml"
argument_list|,
literal|"schema-tiny.xml"
argument_list|)
expr_stmt|;
block|}
DECL|field|solrHomeDirectory
specifier|private
specifier|final
name|File
name|solrHomeDirectory
init|=
operator|new
name|File
argument_list|(
name|TEMP_DIR
argument_list|,
name|TestLazyCores
operator|.
name|getSimpleClassName
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|init
specifier|private
name|CoreContainer
name|init
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|solrHomeDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|solrHomeDirectory
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Failed to mkdirs workDir"
argument_list|,
name|solrHomeDirectory
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|1
init|;
name|idx
operator|<
literal|10
condition|;
operator|++
name|idx
control|)
block|{
name|copyMinConf
argument_list|(
operator|new
name|File
argument_list|(
name|solrHomeDirectory
argument_list|,
literal|"collection"
operator|+
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SolrResourceLoader
name|loader
init|=
operator|new
name|SolrResourceLoader
argument_list|(
name|solrHomeDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|solrXml
init|=
operator|new
name|File
argument_list|(
name|solrHomeDirectory
argument_list|,
literal|"solr.xml"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|write
argument_list|(
name|solrXml
argument_list|,
name|LOTS_SOLR_XML
argument_list|,
name|Charsets
operator|.
name|UTF_8
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigSolrXmlOld
name|config
init|=
operator|(
name|ConfigSolrXmlOld
operator|)
name|ConfigSolr
operator|.
name|fromFile
argument_list|(
name|loader
argument_list|,
name|solrXml
argument_list|)
decl_stmt|;
name|CoresLocator
name|locator
init|=
operator|new
name|SolrXMLCoresLocator
operator|.
name|NonPersistingLocator
argument_list|(
name|LOTS_SOLR_XML
argument_list|,
name|config
argument_list|)
decl_stmt|;
specifier|final
name|CoreContainer
name|cores
init|=
operator|new
name|CoreContainer
argument_list|(
name|loader
argument_list|,
name|config
argument_list|,
name|locator
argument_list|)
decl_stmt|;
name|cores
operator|.
name|load
argument_list|()
expr_stmt|;
return|return
name|cores
return|;
block|}
annotation|@
name|After
DECL|method|after
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|solrHomeDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|solrHomeDirectory
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testLazyLoad
specifier|public
name|void
name|testLazyLoad
parameter_list|()
throws|throws
name|Exception
block|{
name|CoreContainer
name|cc
init|=
name|init
argument_list|()
decl_stmt|;
try|try
block|{
comment|// NOTE: This checks the initial state for loading, no need to do this elsewhere.
name|checkInCores
argument_list|(
name|cc
argument_list|,
literal|"collection1"
argument_list|,
literal|"collectionLazy2"
argument_list|,
literal|"collectionLazy5"
argument_list|)
expr_stmt|;
name|checkNotInCores
argument_list|(
name|cc
argument_list|,
literal|"collectionLazy3"
argument_list|,
literal|"collectionLazy4"
argument_list|,
literal|"collectionLazy6"
argument_list|,
literal|"collectionLazy7"
argument_list|,
literal|"collectionLazy8"
argument_list|,
literal|"collectionLazy9"
argument_list|)
expr_stmt|;
name|SolrCore
name|core1
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"collection1"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"core1 should not be transient"
argument_list|,
name|core1
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|isTransient
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"core1 should be loadable"
argument_list|,
name|core1
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|isLoadOnStartup
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|core1
operator|.
name|getSolrConfig
argument_list|()
argument_list|)
expr_stmt|;
name|SolrCore
name|core2
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"collectionLazy2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"core2 should be transient"
argument_list|,
name|core2
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|isTransient
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"core2 should be loadable"
argument_list|,
name|core2
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|isLoadOnStartup
argument_list|()
argument_list|)
expr_stmt|;
name|SolrCore
name|core3
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"collectionLazy3"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"core3 should be transient"
argument_list|,
name|core3
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|isTransient
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"core3 should not be loadable"
argument_list|,
name|core3
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|isLoadOnStartup
argument_list|()
argument_list|)
expr_stmt|;
name|SolrCore
name|core4
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"collectionLazy4"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"core4 should not be transient"
argument_list|,
name|core4
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|isTransient
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"core4 should not be loadable"
argument_list|,
name|core4
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|isLoadOnStartup
argument_list|()
argument_list|)
expr_stmt|;
name|SolrCore
name|core5
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"collectionLazy5"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"core5 should not be transient"
argument_list|,
name|core5
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|isTransient
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"core5 should be loadable"
argument_list|,
name|core5
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|isLoadOnStartup
argument_list|()
argument_list|)
expr_stmt|;
name|core1
operator|.
name|close
argument_list|()
expr_stmt|;
name|core2
operator|.
name|close
argument_list|()
expr_stmt|;
name|core3
operator|.
name|close
argument_list|()
expr_stmt|;
name|core4
operator|.
name|close
argument_list|()
expr_stmt|;
name|core5
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|// This is a little weak. I'm not sure how to test that lazy core2 is loaded automagically. The getCore
comment|// will, of course, load it.
DECL|method|checkSearch
specifier|private
name|void
name|checkSearch
parameter_list|(
name|SolrCore
name|core
parameter_list|)
throws|throws
name|IOException
block|{
name|addLazy
argument_list|(
name|core
argument_list|,
literal|"id"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|addLazy
argument_list|(
name|core
argument_list|,
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"v_t"
argument_list|,
literal|"Hello Dude"
argument_list|)
expr_stmt|;
name|addLazy
argument_list|(
name|core
argument_list|,
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"v_t"
argument_list|,
literal|"Hello Yonik"
argument_list|)
expr_stmt|;
name|addLazy
argument_list|(
name|core
argument_list|,
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"v_s"
argument_list|,
literal|"{!literal}"
argument_list|)
expr_stmt|;
name|addLazy
argument_list|(
name|core
argument_list|,
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"v_s"
argument_list|,
literal|"other stuff"
argument_list|)
expr_stmt|;
name|addLazy
argument_list|(
name|core
argument_list|,
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"v_f"
argument_list|,
literal|"3.14159"
argument_list|)
expr_stmt|;
name|addLazy
argument_list|(
name|core
argument_list|,
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"v_f"
argument_list|,
literal|"8983"
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|req
init|=
name|makeReq
argument_list|(
name|core
argument_list|)
decl_stmt|;
name|CommitUpdateCommand
name|cmtCmd
init|=
operator|new
name|CommitUpdateCommand
argument_list|(
name|req
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|commit
argument_list|(
name|cmtCmd
argument_list|)
expr_stmt|;
comment|// Just get a couple of searches to work!
name|assertQ
argument_list|(
literal|"test prefix query"
argument_list|,
name|makeReq
argument_list|(
name|core
argument_list|,
literal|"q"
argument_list|,
literal|"{!prefix f=v_t}hel"
argument_list|,
literal|"wt"
argument_list|,
literal|"xml"
argument_list|)
argument_list|,
literal|"//result[@numFound='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test raw query"
argument_list|,
name|makeReq
argument_list|(
name|core
argument_list|,
literal|"q"
argument_list|,
literal|"{!raw f=v_t}hello"
argument_list|,
literal|"wt"
argument_list|,
literal|"xml"
argument_list|)
argument_list|,
literal|"//result[@numFound='2']"
argument_list|)
expr_stmt|;
comment|// no analysis is done, so these should match nothing
name|assertQ
argument_list|(
literal|"test raw query"
argument_list|,
name|makeReq
argument_list|(
name|core
argument_list|,
literal|"q"
argument_list|,
literal|"{!raw f=v_t}Hello"
argument_list|,
literal|"wt"
argument_list|,
literal|"xml"
argument_list|)
argument_list|,
literal|"//result[@numFound='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test raw query"
argument_list|,
name|makeReq
argument_list|(
name|core
argument_list|,
literal|"q"
argument_list|,
literal|"{!raw f=v_f}1.5"
argument_list|,
literal|"wt"
argument_list|,
literal|"xml"
argument_list|)
argument_list|,
literal|"//result[@numFound='0']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLazySearch
specifier|public
name|void
name|testLazySearch
parameter_list|()
throws|throws
name|Exception
block|{
name|CoreContainer
name|cc
init|=
name|init
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Make sure Lazy4 isn't loaded. Should be loaded on the get
name|checkNotInCores
argument_list|(
name|cc
argument_list|,
literal|"collectionLazy4"
argument_list|)
expr_stmt|;
name|SolrCore
name|core4
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"collectionLazy4"
argument_list|)
decl_stmt|;
name|checkSearch
argument_list|(
name|core4
argument_list|)
expr_stmt|;
comment|// Now just insure that the normal searching on "collection1" finds _0_ on the same query that found _2_ above.
comment|// Use of makeReq above and req below is tricky, very tricky.
name|assertQ
argument_list|(
literal|"test raw query"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!raw f=v_t}hello"
argument_list|,
literal|"wt"
argument_list|,
literal|"xml"
argument_list|)
argument_list|,
literal|"//result[@numFound='0']"
argument_list|)
expr_stmt|;
name|checkInCores
argument_list|(
name|cc
argument_list|,
literal|"collectionLazy4"
argument_list|)
expr_stmt|;
name|core4
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCachingLimit
specifier|public
name|void
name|testCachingLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|CoreContainer
name|cc
init|=
name|init
argument_list|()
decl_stmt|;
try|try
block|{
comment|// First check that all the cores that should be loaded at startup actually are.
name|checkInCores
argument_list|(
name|cc
argument_list|,
literal|"collection1"
argument_list|,
literal|"collectionLazy2"
argument_list|,
literal|"collectionLazy5"
argument_list|)
expr_stmt|;
name|checkNotInCores
argument_list|(
name|cc
argument_list|,
literal|"collectionLazy3"
argument_list|,
literal|"collectionLazy4"
argument_list|,
literal|"collectionLazy6"
argument_list|,
literal|"collectionLazy7"
argument_list|,
literal|"collectionLazy8"
argument_list|,
literal|"collectionLazy9"
argument_list|)
expr_stmt|;
comment|// By putting these in non-alpha order, we're also checking that we're  not just seeing an artifact.
name|SolrCore
name|core1
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"collection1"
argument_list|)
decl_stmt|;
name|SolrCore
name|core3
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"collectionLazy3"
argument_list|)
decl_stmt|;
name|SolrCore
name|core4
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"collectionLazy4"
argument_list|)
decl_stmt|;
name|SolrCore
name|core2
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"collectionLazy2"
argument_list|)
decl_stmt|;
name|SolrCore
name|core5
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"collectionLazy5"
argument_list|)
decl_stmt|;
name|checkInCores
argument_list|(
name|cc
argument_list|,
literal|"collection1"
argument_list|,
literal|"collectionLazy2"
argument_list|,
literal|"collectionLazy3"
argument_list|,
literal|"collectionLazy4"
argument_list|,
literal|"collectionLazy5"
argument_list|)
expr_stmt|;
name|checkNotInCores
argument_list|(
name|cc
argument_list|,
literal|"collectionLazy6"
argument_list|,
literal|"collectionLazy7"
argument_list|,
literal|"collectionLazy8"
argument_list|,
literal|"collectionLazy9"
argument_list|)
expr_stmt|;
comment|// map should be full up, add one more and verify
name|SolrCore
name|core6
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"collectionLazy6"
argument_list|)
decl_stmt|;
name|checkInCores
argument_list|(
name|cc
argument_list|,
literal|"collection1"
argument_list|,
literal|"collectionLazy2"
argument_list|,
literal|"collectionLazy3"
argument_list|,
literal|"collectionLazy4"
argument_list|,
literal|"collectionLazy5"
argument_list|,
literal|"collectionLazy6"
argument_list|)
expr_stmt|;
name|checkNotInCores
argument_list|(
name|cc
argument_list|,
literal|"collectionLazy7"
argument_list|,
literal|"collectionLazy8"
argument_list|,
literal|"collectionLazy9"
argument_list|)
expr_stmt|;
name|SolrCore
name|core7
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"collectionLazy7"
argument_list|)
decl_stmt|;
name|checkInCores
argument_list|(
name|cc
argument_list|,
literal|"collection1"
argument_list|,
literal|"collectionLazy2"
argument_list|,
literal|"collectionLazy3"
argument_list|,
literal|"collectionLazy4"
argument_list|,
literal|"collectionLazy5"
argument_list|,
literal|"collectionLazy6"
argument_list|,
literal|"collectionLazy7"
argument_list|)
expr_stmt|;
name|checkNotInCores
argument_list|(
name|cc
argument_list|,
literal|"collectionLazy8"
argument_list|,
literal|"collectionLazy9"
argument_list|)
expr_stmt|;
name|SolrCore
name|core8
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"collectionLazy8"
argument_list|)
decl_stmt|;
name|checkInCores
argument_list|(
name|cc
argument_list|,
literal|"collection1"
argument_list|,
literal|"collectionLazy2"
argument_list|,
literal|"collectionLazy4"
argument_list|,
literal|"collectionLazy5"
argument_list|,
literal|"collectionLazy6"
argument_list|,
literal|"collectionLazy7"
argument_list|,
literal|"collectionLazy8"
argument_list|)
expr_stmt|;
name|checkNotInCores
argument_list|(
name|cc
argument_list|,
literal|"collectionLazy3"
argument_list|,
literal|"collectionLazy9"
argument_list|)
expr_stmt|;
name|SolrCore
name|core9
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"collectionLazy9"
argument_list|)
decl_stmt|;
name|checkInCores
argument_list|(
name|cc
argument_list|,
literal|"collection1"
argument_list|,
literal|"collectionLazy4"
argument_list|,
literal|"collectionLazy5"
argument_list|,
literal|"collectionLazy6"
argument_list|,
literal|"collectionLazy7"
argument_list|,
literal|"collectionLazy8"
argument_list|,
literal|"collectionLazy9"
argument_list|)
expr_stmt|;
name|checkNotInCores
argument_list|(
name|cc
argument_list|,
literal|"collectionLazy2"
argument_list|,
literal|"collectionLazy3"
argument_list|)
expr_stmt|;
comment|// Note decrementing the count when the core is removed from the lazyCores list is appropriate, since the
comment|// refcount is 1 when constructed. anyone _else_ who's opened up one has to close it.
name|core1
operator|.
name|close
argument_list|()
expr_stmt|;
name|core2
operator|.
name|close
argument_list|()
expr_stmt|;
name|core3
operator|.
name|close
argument_list|()
expr_stmt|;
name|core4
operator|.
name|close
argument_list|()
expr_stmt|;
name|core5
operator|.
name|close
argument_list|()
expr_stmt|;
name|core6
operator|.
name|close
argument_list|()
expr_stmt|;
name|core7
operator|.
name|close
argument_list|()
expr_stmt|;
name|core8
operator|.
name|close
argument_list|()
expr_stmt|;
name|core9
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Test case for SOLR-4300
annotation|@
name|Test
DECL|method|testRace
specifier|public
name|void
name|testRace
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|SolrCore
argument_list|>
name|theCores
init|=
operator|new
name|ArrayList
argument_list|<
name|SolrCore
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|CoreContainer
name|cc
init|=
name|init
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
literal|15
index|]
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|threads
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
name|threads
index|[
name|idx
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|SolrCore
name|core
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"collectionLazy3"
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|theCores
init|)
block|{
name|theCores
operator|.
name|add
argument_list|(
name|core
argument_list|)
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|threads
index|[
name|idx
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|theCores
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
operator|++
name|idx
control|)
block|{
name|assertEquals
argument_list|(
literal|"Cores should be the same!"
argument_list|,
name|theCores
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|,
name|theCores
operator|.
name|get
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SolrCore
name|core
range|:
name|theCores
control|)
block|{
name|core
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|tryCreateFail
specifier|private
name|void
name|tryCreateFail
parameter_list|(
name|CoreAdminHandler
name|admin
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|dataDir
parameter_list|,
name|String
modifier|...
name|errs
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|SolrQueryResponse
name|resp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
name|SolrQueryRequest
name|request
init|=
name|req
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminParams
operator|.
name|CoreAdminAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|,
name|CoreAdminParams
operator|.
name|DATA_DIR
argument_list|,
name|dataDir
argument_list|,
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|name
argument_list|,
literal|"schema"
argument_list|,
literal|"schema.xml"
argument_list|,
literal|"config"
argument_list|,
literal|"solrconfig.xml"
argument_list|)
decl_stmt|;
name|admin
operator|.
name|handleRequestBody
argument_list|(
name|request
argument_list|,
name|resp
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an error"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|se
parameter_list|)
block|{
comment|//SolrException cause = (SolrException)se.getCause();
name|assertEquals
argument_list|(
literal|"Exception code should be 500"
argument_list|,
literal|500
argument_list|,
name|se
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|err
range|:
name|errs
control|)
block|{
name|assertTrue
argument_list|(
literal|"Should have seen an exception containing the an error"
argument_list|,
name|se
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|err
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testCreateSame
specifier|public
name|void
name|testCreateSame
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CoreContainer
name|cc
init|=
name|init
argument_list|()
decl_stmt|;
try|try
block|{
comment|// First, try all 4 combinations of load on startup and transient
specifier|final
name|CoreAdminHandler
name|admin
init|=
operator|new
name|CoreAdminHandler
argument_list|(
name|cc
argument_list|)
decl_stmt|;
name|SolrCore
name|lc2
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"collectionLazy2"
argument_list|)
decl_stmt|;
name|SolrCore
name|lc4
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"collectionLazy4"
argument_list|)
decl_stmt|;
name|SolrCore
name|lc5
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"collectionLazy5"
argument_list|)
decl_stmt|;
name|SolrCore
name|lc6
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"collectionLazy6"
argument_list|)
decl_stmt|;
name|copyMinConf
argument_list|(
operator|new
name|File
argument_list|(
name|solrHomeDirectory
argument_list|,
literal|"t2"
argument_list|)
argument_list|)
expr_stmt|;
name|copyMinConf
argument_list|(
operator|new
name|File
argument_list|(
name|solrHomeDirectory
argument_list|,
literal|"t4"
argument_list|)
argument_list|)
expr_stmt|;
name|copyMinConf
argument_list|(
operator|new
name|File
argument_list|(
name|solrHomeDirectory
argument_list|,
literal|"t5"
argument_list|)
argument_list|)
expr_stmt|;
name|copyMinConf
argument_list|(
operator|new
name|File
argument_list|(
name|solrHomeDirectory
argument_list|,
literal|"t6"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should also fail with the same name
name|tryCreateFail
argument_list|(
name|admin
argument_list|,
literal|"collectionLazy2"
argument_list|,
literal|"t12"
argument_list|,
literal|"Core with name"
argument_list|,
literal|"collectionLazy2"
argument_list|,
literal|"already exists"
argument_list|)
expr_stmt|;
name|tryCreateFail
argument_list|(
name|admin
argument_list|,
literal|"collectionLazy4"
argument_list|,
literal|"t14"
argument_list|,
literal|"Core with name"
argument_list|,
literal|"collectionLazy4"
argument_list|,
literal|"already exists"
argument_list|)
expr_stmt|;
name|tryCreateFail
argument_list|(
name|admin
argument_list|,
literal|"collectionLazy5"
argument_list|,
literal|"t15"
argument_list|,
literal|"Core with name"
argument_list|,
literal|"collectionLazy5"
argument_list|,
literal|"already exists"
argument_list|)
expr_stmt|;
name|tryCreateFail
argument_list|(
name|admin
argument_list|,
literal|"collectionLazy6"
argument_list|,
literal|"t16"
argument_list|,
literal|"Core with name"
argument_list|,
literal|"collectionLazy6"
argument_list|,
literal|"already exists"
argument_list|)
expr_stmt|;
name|lc2
operator|.
name|close
argument_list|()
expr_stmt|;
name|lc4
operator|.
name|close
argument_list|()
expr_stmt|;
name|lc5
operator|.
name|close
argument_list|()
expr_stmt|;
name|lc6
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|//Make sure persisting not-loaded lazy cores is done. See SOLR-4347
annotation|@
name|Test
DECL|method|testPersistence
specifier|public
name|void
name|testPersistence
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CoreContainer
name|cc
init|=
name|init
argument_list|()
decl_stmt|;
try|try
block|{
name|copyMinConf
argument_list|(
operator|new
name|File
argument_list|(
name|solrHomeDirectory
argument_list|,
literal|"core1"
argument_list|)
argument_list|)
expr_stmt|;
name|copyMinConf
argument_list|(
operator|new
name|File
argument_list|(
name|solrHomeDirectory
argument_list|,
literal|"core2"
argument_list|)
argument_list|)
expr_stmt|;
name|copyMinConf
argument_list|(
operator|new
name|File
argument_list|(
name|solrHomeDirectory
argument_list|,
literal|"core3"
argument_list|)
argument_list|)
expr_stmt|;
name|copyMinConf
argument_list|(
operator|new
name|File
argument_list|(
name|solrHomeDirectory
argument_list|,
literal|"core4"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|CoreDescriptor
name|cd1
init|=
name|buildCoreDescriptor
argument_list|(
name|cc
argument_list|,
literal|"core1"
argument_list|,
literal|"./core1"
argument_list|)
operator|.
name|isTransient
argument_list|(
literal|true
argument_list|)
operator|.
name|loadOnStartup
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|CoreDescriptor
name|cd2
init|=
name|buildCoreDescriptor
argument_list|(
name|cc
argument_list|,
literal|"core2"
argument_list|,
literal|"./core2"
argument_list|)
operator|.
name|isTransient
argument_list|(
literal|true
argument_list|)
operator|.
name|loadOnStartup
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|CoreDescriptor
name|cd3
init|=
name|buildCoreDescriptor
argument_list|(
name|cc
argument_list|,
literal|"core3"
argument_list|,
literal|"./core3"
argument_list|)
operator|.
name|isTransient
argument_list|(
literal|false
argument_list|)
operator|.
name|loadOnStartup
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|CoreDescriptor
name|cd4
init|=
name|buildCoreDescriptor
argument_list|(
name|cc
argument_list|,
literal|"core4"
argument_list|,
literal|"./core4"
argument_list|)
operator|.
name|isTransient
argument_list|(
literal|false
argument_list|)
operator|.
name|loadOnStartup
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|SolrCore
name|core1
init|=
name|cc
operator|.
name|create
argument_list|(
name|cd1
argument_list|)
decl_stmt|;
name|SolrCore
name|core2
init|=
name|cc
operator|.
name|create
argument_list|(
name|cd2
argument_list|)
decl_stmt|;
name|SolrCore
name|core3
init|=
name|cc
operator|.
name|create
argument_list|(
name|cd3
argument_list|)
decl_stmt|;
name|SolrCore
name|core4
init|=
name|cc
operator|.
name|create
argument_list|(
name|cd4
argument_list|)
decl_stmt|;
name|SolrXMLCoresLocator
operator|.
name|NonPersistingLocator
name|locator
init|=
operator|(
name|SolrXMLCoresLocator
operator|.
name|NonPersistingLocator
operator|)
name|cc
operator|.
name|getCoresLocator
argument_list|()
decl_stmt|;
name|TestHarness
operator|.
name|validateXPath
argument_list|(
name|locator
operator|.
name|xml
argument_list|,
literal|"/solr/cores/core[@name='collection1']"
argument_list|,
literal|"/solr/cores/core[@name='collectionLazy2']"
argument_list|,
literal|"/solr/cores/core[@name='collectionLazy3']"
argument_list|,
literal|"/solr/cores/core[@name='collectionLazy4']"
argument_list|,
literal|"/solr/cores/core[@name='collectionLazy5']"
argument_list|,
literal|"/solr/cores/core[@name='collectionLazy6']"
argument_list|,
literal|"/solr/cores/core[@name='collectionLazy7']"
argument_list|,
literal|"/solr/cores/core[@name='collectionLazy8']"
argument_list|,
literal|"/solr/cores/core[@name='collectionLazy9']"
argument_list|,
literal|"/solr/cores/core[@name='core1']"
argument_list|,
literal|"/solr/cores/core[@name='core2']"
argument_list|,
literal|"/solr/cores/core[@name='core3']"
argument_list|,
literal|"/solr/cores/core[@name='core4']"
argument_list|,
literal|"13=count(/solr/cores/core)"
argument_list|)
expr_stmt|;
name|removeOne
argument_list|(
name|cc
argument_list|,
literal|"collectionLazy2"
argument_list|)
expr_stmt|;
name|removeOne
argument_list|(
name|cc
argument_list|,
literal|"collectionLazy3"
argument_list|)
expr_stmt|;
name|removeOne
argument_list|(
name|cc
argument_list|,
literal|"collectionLazy4"
argument_list|)
expr_stmt|;
name|removeOne
argument_list|(
name|cc
argument_list|,
literal|"collectionLazy5"
argument_list|)
expr_stmt|;
name|removeOne
argument_list|(
name|cc
argument_list|,
literal|"collectionLazy6"
argument_list|)
expr_stmt|;
name|removeOne
argument_list|(
name|cc
argument_list|,
literal|"collectionLazy7"
argument_list|)
expr_stmt|;
name|removeOne
argument_list|(
name|cc
argument_list|,
literal|"core1"
argument_list|)
expr_stmt|;
name|removeOne
argument_list|(
name|cc
argument_list|,
literal|"core2"
argument_list|)
expr_stmt|;
name|removeOne
argument_list|(
name|cc
argument_list|,
literal|"core3"
argument_list|)
expr_stmt|;
name|removeOne
argument_list|(
name|cc
argument_list|,
literal|"core4"
argument_list|)
expr_stmt|;
comment|// now test that unloading a core means the core is not persisted
name|TestHarness
operator|.
name|validateXPath
argument_list|(
name|locator
operator|.
name|xml
argument_list|,
literal|"3=count(/solr/cores/core)"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Test that transient cores
comment|// 1> produce errors as appropriate when the config or schema files are foo'd
comment|// 2> "self heal". That is, if the problem is corrected can the core be reloaded and used?
comment|// 3> that OK cores can be searched even when some cores failed to load.
annotation|@
name|Test
DECL|method|testBadConfigsGenerateErrors
specifier|public
name|void
name|testBadConfigsGenerateErrors
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CoreContainer
name|cc
init|=
name|initGoodAndBad
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"core1"
argument_list|,
literal|"core2"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"badSchema1"
argument_list|,
literal|"badSchema2"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"badConfig1"
argument_list|,
literal|"badConfig2"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
comment|// first, did the two good cores load successfully?
name|checkInCores
argument_list|(
name|cc
argument_list|,
literal|"core1"
argument_list|,
literal|"core2"
argument_list|)
expr_stmt|;
comment|// Did the bad cores fail to load?
name|checkNotInCores
argument_list|(
name|cc
argument_list|,
literal|"badSchema1"
argument_list|,
literal|"badSchema2"
argument_list|,
literal|"badConfig1"
argument_list|,
literal|"badConfig2"
argument_list|)
expr_stmt|;
comment|//  Can we still search the "good" cores even though there were core init failures?
name|SolrCore
name|core1
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"core1"
argument_list|)
decl_stmt|;
name|checkSearch
argument_list|(
name|core1
argument_list|)
expr_stmt|;
comment|// Did we get the expected message for each of the cores that failed to load? Make sure we don't run afoul of
comment|// the dreaded slash/backslash difference on Windows and *nix machines.
name|testMessage
argument_list|(
name|cc
operator|.
name|getCoreInitFailures
argument_list|()
argument_list|,
literal|"TestLazyCores"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"badConfig1"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"solrconfig.xml"
argument_list|)
expr_stmt|;
name|testMessage
argument_list|(
name|cc
operator|.
name|getCoreInitFailures
argument_list|()
argument_list|,
literal|"TestLazyCores"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"badConfig2"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"solrconfig.xml"
argument_list|)
expr_stmt|;
name|testMessage
argument_list|(
name|cc
operator|.
name|getCoreInitFailures
argument_list|()
argument_list|,
literal|"TestLazyCores"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"badSchema1"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"schema.xml"
argument_list|)
expr_stmt|;
name|testMessage
argument_list|(
name|cc
operator|.
name|getCoreInitFailures
argument_list|()
argument_list|,
literal|"TestLazyCores"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"badSchema2"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"schema.xml"
argument_list|)
expr_stmt|;
comment|// Status should report that there are failure messages for the bad cores and none for the good cores.
name|checkStatus
argument_list|(
name|cc
argument_list|,
literal|true
argument_list|,
literal|"core1"
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|cc
argument_list|,
literal|true
argument_list|,
literal|"core2"
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|cc
argument_list|,
literal|false
argument_list|,
literal|"badSchema1"
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|cc
argument_list|,
literal|false
argument_list|,
literal|"badSchema2"
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|cc
argument_list|,
literal|false
argument_list|,
literal|"badConfig1"
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|cc
argument_list|,
literal|false
argument_list|,
literal|"badConfig2"
argument_list|)
expr_stmt|;
comment|// Copy good config and schema files in and see if you can then load them (they are transient after all)
name|copyGoodConf
argument_list|(
literal|"badConfig1"
argument_list|,
literal|"solrconfig-minimal.xml"
argument_list|,
literal|"solrconfig.xml"
argument_list|)
expr_stmt|;
name|copyGoodConf
argument_list|(
literal|"badConfig2"
argument_list|,
literal|"solrconfig-minimal.xml"
argument_list|,
literal|"solrconfig.xml"
argument_list|)
expr_stmt|;
name|copyGoodConf
argument_list|(
literal|"badSchema1"
argument_list|,
literal|"schema-tiny.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
name|copyGoodConf
argument_list|(
literal|"badSchema2"
argument_list|,
literal|"schema-tiny.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
comment|// This should force a reload of the cores.
name|SolrCore
name|bc1
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"badConfig1"
argument_list|)
decl_stmt|;
name|SolrCore
name|bc2
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"badConfig2"
argument_list|)
decl_stmt|;
name|SolrCore
name|bs1
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"badSchema1"
argument_list|)
decl_stmt|;
name|SolrCore
name|bs2
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"badSchema2"
argument_list|)
decl_stmt|;
comment|// all the cores should be found in the list now.
name|checkInCores
argument_list|(
name|cc
argument_list|,
literal|"core1"
argument_list|,
literal|"core2"
argument_list|,
literal|"badSchema1"
argument_list|,
literal|"badSchema2"
argument_list|,
literal|"badConfig1"
argument_list|,
literal|"badConfig2"
argument_list|)
expr_stmt|;
comment|// Did we clear out the errors by putting good files in place? And the cores that never were bad should be OK too.
name|checkStatus
argument_list|(
name|cc
argument_list|,
literal|true
argument_list|,
literal|"core1"
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|cc
argument_list|,
literal|true
argument_list|,
literal|"core2"
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|cc
argument_list|,
literal|true
argument_list|,
literal|"badSchema1"
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|cc
argument_list|,
literal|true
argument_list|,
literal|"badSchema2"
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|cc
argument_list|,
literal|true
argument_list|,
literal|"badConfig1"
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|cc
argument_list|,
literal|true
argument_list|,
literal|"badConfig2"
argument_list|)
expr_stmt|;
comment|// Are the formerly bad cores now searchable? Testing one of each should do.
name|checkSearch
argument_list|(
name|core1
argument_list|)
expr_stmt|;
name|checkSearch
argument_list|(
name|bc1
argument_list|)
expr_stmt|;
name|checkSearch
argument_list|(
name|bs1
argument_list|)
expr_stmt|;
name|core1
operator|.
name|close
argument_list|()
expr_stmt|;
name|bc1
operator|.
name|close
argument_list|()
expr_stmt|;
name|bc2
operator|.
name|close
argument_list|()
expr_stmt|;
name|bs1
operator|.
name|close
argument_list|()
expr_stmt|;
name|bs2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|// See fi the message you expect is in the list of failures
DECL|method|testMessage
specifier|private
name|void
name|testMessage
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
name|failures
parameter_list|,
name|String
name|lookFor
parameter_list|)
block|{
for|for
control|(
name|Exception
name|e
range|:
name|failures
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
name|lookFor
argument_list|)
operator|!=
operator|-
literal|1
condition|)
return|return;
block|}
name|fail
argument_list|(
literal|"Should have found message containing these tokens "
operator|+
name|lookFor
operator|+
literal|" in the failure messages"
argument_list|)
expr_stmt|;
block|}
comment|// Just localizes writing a configuration rather than repeating it for good and bad files.
DECL|method|writeCustomConfig
specifier|private
name|void
name|writeCustomConfig
parameter_list|(
name|String
name|coreName
parameter_list|,
name|String
name|config
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|rand_snip
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|coreRoot
init|=
operator|new
name|File
argument_list|(
name|solrHomeDirectory
argument_list|,
name|coreName
argument_list|)
decl_stmt|;
name|File
name|subHome
init|=
operator|new
name|File
argument_list|(
name|coreRoot
argument_list|,
literal|"conf"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|coreRoot
operator|.
name|exists
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Failed to make subdirectory "
argument_list|,
name|coreRoot
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Write the file for core discovery
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
operator|new
name|File
argument_list|(
name|coreRoot
argument_list|,
literal|"core.properties"
argument_list|)
argument_list|,
literal|"name="
operator|+
name|coreName
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
operator|+
literal|"transient=true"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
operator|+
literal|"loadOnStartup=true"
argument_list|,
name|Charsets
operator|.
name|UTF_8
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
operator|new
name|File
argument_list|(
name|subHome
argument_list|,
literal|"solrconfig.snippet.randomindexconfig.xml"
argument_list|)
argument_list|,
name|rand_snip
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
operator|new
name|File
argument_list|(
name|subHome
argument_list|,
literal|"solrconfig.xml"
argument_list|)
argument_list|,
name|config
argument_list|,
name|Charsets
operator|.
name|UTF_8
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
operator|new
name|File
argument_list|(
name|subHome
argument_list|,
literal|"schema.xml"
argument_list|)
argument_list|,
name|schema
argument_list|,
name|Charsets
operator|.
name|UTF_8
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Write out the cores' config files, both bad schema files, bad config files as well as some good cores.
DECL|method|initGoodAndBad
specifier|private
name|CoreContainer
name|initGoodAndBad
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|goodCores
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|badSchemaCores
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|badConfigCores
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Don't pollute the log with exception traces when they're expected.
name|ignoreException
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
literal|"SAXParseException"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|solrHomeDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|solrHomeDirectory
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Failed to mkdirs workDir"
argument_list|,
name|solrHomeDirectory
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create the cores that should be fine.
for|for
control|(
name|String
name|coreName
range|:
name|goodCores
control|)
block|{
name|File
name|coreRoot
init|=
operator|new
name|File
argument_list|(
name|solrHomeDirectory
argument_list|,
name|coreName
argument_list|)
decl_stmt|;
name|copyMinConf
argument_list|(
name|coreRoot
argument_list|,
literal|"name="
operator|+
name|coreName
argument_list|)
expr_stmt|;
block|}
comment|// Collect the files that we'll write to the config directories.
name|String
name|top
init|=
name|SolrTestCaseJ4
operator|.
name|TEST_HOME
argument_list|()
operator|+
literal|"/collection1/conf"
decl_stmt|;
name|String
name|min_schema
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
operator|new
name|File
argument_list|(
name|top
argument_list|,
literal|"schema-tiny.xml"
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|min_config
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
operator|new
name|File
argument_list|(
name|top
argument_list|,
literal|"solrconfig-minimal.xml"
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|rand_snip
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
operator|new
name|File
argument_list|(
name|top
argument_list|,
literal|"solrconfig.snippet.randomindexconfig.xml"
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Now purposely mess up the config files, introducing stupid syntax errors.
name|String
name|bad_config
init|=
name|min_config
operator|.
name|replace
argument_list|(
literal|"<requestHandler"
argument_list|,
literal|"<reqsthalr"
argument_list|)
decl_stmt|;
name|String
name|bad_schema
init|=
name|min_schema
operator|.
name|replace
argument_list|(
literal|"<field"
argument_list|,
literal|"<filed"
argument_list|)
decl_stmt|;
comment|// Create the cores with bad configs
for|for
control|(
name|String
name|coreName
range|:
name|badConfigCores
control|)
block|{
name|writeCustomConfig
argument_list|(
name|coreName
argument_list|,
name|bad_config
argument_list|,
name|min_schema
argument_list|,
name|rand_snip
argument_list|)
expr_stmt|;
block|}
comment|// Create the cores with bad schemas.
for|for
control|(
name|String
name|coreName
range|:
name|badSchemaCores
control|)
block|{
name|writeCustomConfig
argument_list|(
name|coreName
argument_list|,
name|min_config
argument_list|,
name|bad_schema
argument_list|,
name|rand_snip
argument_list|)
expr_stmt|;
block|}
comment|// Write the solr.xml file. Cute how minimal it can be now....
name|File
name|solrXml
init|=
operator|new
name|File
argument_list|(
name|solrHomeDirectory
argument_list|,
literal|"solr.xml"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|write
argument_list|(
name|solrXml
argument_list|,
literal|"<solr/>"
argument_list|,
name|Charsets
operator|.
name|UTF_8
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SolrResourceLoader
name|loader
init|=
operator|new
name|SolrResourceLoader
argument_list|(
name|solrHomeDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|ConfigSolrXml
name|config
init|=
operator|(
name|ConfigSolrXml
operator|)
name|ConfigSolr
operator|.
name|fromFile
argument_list|(
name|loader
argument_list|,
name|solrXml
argument_list|)
decl_stmt|;
name|CoresLocator
name|locator
init|=
operator|new
name|CorePropertiesLocator
argument_list|(
name|solrHomeDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
comment|// OK this should succeed, but at the end we should have recorded a series of errors.
specifier|final
name|CoreContainer
name|cores
init|=
operator|new
name|CoreContainer
argument_list|(
name|loader
argument_list|,
name|config
argument_list|,
name|locator
argument_list|)
decl_stmt|;
name|cores
operator|.
name|load
argument_list|()
expr_stmt|;
return|return
name|cores
return|;
block|}
comment|// We want to see that the core "heals itself" if an un-corrupted file is written to the directory.
DECL|method|copyGoodConf
specifier|private
name|void
name|copyGoodConf
parameter_list|(
name|String
name|coreName
parameter_list|,
name|String
name|srcName
parameter_list|,
name|String
name|dstName
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|coreRoot
init|=
operator|new
name|File
argument_list|(
name|solrHomeDirectory
argument_list|,
name|coreName
argument_list|)
decl_stmt|;
name|File
name|subHome
init|=
operator|new
name|File
argument_list|(
name|coreRoot
argument_list|,
literal|"conf"
argument_list|)
decl_stmt|;
name|String
name|top
init|=
name|SolrTestCaseJ4
operator|.
name|TEST_HOME
argument_list|()
operator|+
literal|"/collection1/conf"
decl_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|top
argument_list|,
name|srcName
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|subHome
argument_list|,
name|dstName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// If ok==true, we shouldn't be seeing any failure cases.
comment|// if ok==false, the core being examined should have a failure in the list.
DECL|method|checkStatus
specifier|private
name|void
name|checkStatus
parameter_list|(
name|CoreContainer
name|cc
parameter_list|,
name|Boolean
name|ok
parameter_list|,
name|String
name|core
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrQueryResponse
name|resp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
specifier|final
name|CoreAdminHandler
name|admin
init|=
operator|new
name|CoreAdminHandler
argument_list|(
name|cc
argument_list|)
decl_stmt|;
name|admin
operator|.
name|handleRequestBody
argument_list|(
name|req
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminParams
operator|.
name|CoreAdminAction
operator|.
name|STATUS
operator|.
name|toString
argument_list|()
argument_list|,
name|CoreAdminParams
operator|.
name|CORE
argument_list|,
name|core
argument_list|)
argument_list|,
name|resp
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
name|failures
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
operator|)
name|resp
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|"initFailures"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
if|if
condition|(
name|failures
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|fail
argument_list|(
literal|"Should have cleared the error, but there are failues "
operator|+
name|failures
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|failures
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|fail
argument_list|(
literal|"Should have had errors here but the status return has no failures!"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|removeOne
specifier|private
name|void
name|removeOne
parameter_list|(
name|CoreContainer
name|cc
parameter_list|,
name|String
name|coreName
parameter_list|)
block|{
name|SolrCore
name|tmp
init|=
name|cc
operator|.
name|remove
argument_list|(
name|coreName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmp
operator|!=
literal|null
condition|)
name|tmp
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|checkNotInCores
specifier|public
specifier|static
name|void
name|checkNotInCores
parameter_list|(
name|CoreContainer
name|cc
parameter_list|,
name|String
modifier|...
name|nameCheck
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|names
init|=
name|cc
operator|.
name|getCoreNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|nameCheck
control|)
block|{
name|assertFalse
argument_list|(
literal|"core "
operator|+
name|name
operator|+
literal|" was found in the list of cores"
argument_list|,
name|names
operator|.
name|contains
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkInCores
specifier|public
specifier|static
name|void
name|checkInCores
parameter_list|(
name|CoreContainer
name|cc
parameter_list|,
name|String
modifier|...
name|nameCheck
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|names
init|=
name|cc
operator|.
name|getCoreNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|nameCheck
control|)
block|{
name|assertTrue
argument_list|(
literal|"core "
operator|+
name|name
operator|+
literal|" was not found in the list of cores"
argument_list|,
name|names
operator|.
name|contains
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addLazy
specifier|private
name|void
name|addLazy
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|String
modifier|...
name|fieldValues
parameter_list|)
throws|throws
name|IOException
block|{
name|UpdateHandler
name|updater
init|=
name|core
operator|.
name|getUpdateHandler
argument_list|()
decl_stmt|;
name|AddUpdateCommand
name|cmd
init|=
operator|new
name|AddUpdateCommand
argument_list|(
name|makeReq
argument_list|(
name|core
argument_list|)
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|solrDoc
operator|=
name|sdoc
argument_list|(
name|fieldValues
argument_list|)
expr_stmt|;
name|updater
operator|.
name|addDoc
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
DECL|method|makeReq
specifier|private
name|LocalSolrQueryRequest
name|makeReq
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|String
modifier|...
name|q
parameter_list|)
block|{
if|if
condition|(
name|q
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
name|q
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|q
operator|.
name|length
operator|%
literal|2
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The length of the string array (query arguments) needs to be even"
argument_list|)
throw|;
block|}
name|NamedList
operator|.
name|NamedListEntry
index|[]
name|entries
init|=
operator|new
name|NamedList
operator|.
name|NamedListEntry
index|[
name|q
operator|.
name|length
operator|/
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|q
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|entries
index|[
name|i
operator|/
literal|2
index|]
operator|=
operator|new
name|NamedList
operator|.
name|NamedListEntry
argument_list|<
name|String
argument_list|>
argument_list|(
name|q
index|[
name|i
index|]
argument_list|,
name|q
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
operator|new
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|entries
argument_list|)
argument_list|)
return|;
block|}
DECL|field|LOTS_SOLR_XML
specifier|private
specifier|final
specifier|static
name|String
name|LOTS_SOLR_XML
init|=
literal|"<solr persistent=\"false\"> "
operator|+
literal|"<cores adminPath=\"/admin/cores\" defaultCoreName=\"collectionLazy2\" transientCacheSize=\"4\">  "
operator|+
literal|"<core name=\"collection1\" instanceDir=\"collection1\"  /> "
operator|+
literal|"<core name=\"collectionLazy2\" instanceDir=\"collection2\" transient=\"true\" loadOnStartup=\"true\"   /> "
operator|+
literal|"<core name=\"collectionLazy3\" instanceDir=\"collection3\" transient=\"on\" loadOnStartup=\"false\"    /> "
operator|+
literal|"<core name=\"collectionLazy4\" instanceDir=\"collection4\" transient=\"false\" loadOnStartup=\"false\" /> "
operator|+
literal|"<core name=\"collectionLazy5\" instanceDir=\"collection5\" transient=\"false\" loadOnStartup=\"true\" /> "
operator|+
literal|"<core name=\"collectionLazy6\" instanceDir=\"collection6\" transient=\"true\" loadOnStartup=\"false\" /> "
operator|+
literal|"<core name=\"collectionLazy7\" instanceDir=\"collection7\" transient=\"true\" loadOnStartup=\"false\" /> "
operator|+
literal|"<core name=\"collectionLazy8\" instanceDir=\"collection8\" transient=\"true\" loadOnStartup=\"false\" /> "
operator|+
literal|"<core name=\"collectionLazy9\" instanceDir=\"collection9\" transient=\"true\" loadOnStartup=\"false\" /> "
operator|+
literal|"</cores> "
operator|+
literal|"</solr>"
decl_stmt|;
block|}
end_class
end_unit
