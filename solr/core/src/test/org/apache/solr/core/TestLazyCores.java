begin_unit
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|LocalSolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|AddUpdateCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|CommitUpdateCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|UpdateHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_class
DECL|class|TestLazyCores
specifier|public
class|class
name|TestLazyCores
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
block|}
DECL|field|cores
specifier|private
name|CoreContainer
name|cores
decl_stmt|;
annotation|@
name|Before
DECL|method|before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|ParserConfigurationException
block|{
name|String
name|solrHome
decl_stmt|;
name|solrHome
operator|=
name|SolrResourceLoader
operator|.
name|locateSolrHome
argument_list|()
expr_stmt|;
name|File
name|fconf
init|=
operator|new
name|File
argument_list|(
name|solrHome
argument_list|,
literal|"solr-lots-of-cores.xml"
argument_list|)
decl_stmt|;
name|cores
operator|=
operator|new
name|CoreContainer
argument_list|(
name|solrHome
argument_list|)
expr_stmt|;
name|cores
operator|.
name|load
argument_list|(
name|solrHome
argument_list|,
name|fconf
argument_list|)
expr_stmt|;
name|cores
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLazyLoad
specifier|public
name|void
name|testLazyLoad
parameter_list|()
block|{
try|try
block|{
comment|// NOTE: the way this works, this should not assert, however if it's put after the getCore on this collection,
comment|// that will cause the core to be loaded and this test will fail.
name|Collection
argument_list|<
name|String
argument_list|>
name|names
init|=
name|cores
operator|.
name|getCoreNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|assertFalse
argument_list|(
literal|"collectionLazy2"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SolrCore
name|core1
init|=
name|cores
operator|.
name|getCore
argument_list|(
literal|"collection1"
argument_list|)
decl_stmt|;
name|CoreDescriptor
name|cont
init|=
name|core1
operator|.
name|getCoreDescriptor
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"core1 should not be swappable"
argument_list|,
name|core1
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|isSwappable
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"core1 should  be loadable"
argument_list|,
name|core1
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|isLoadOnStartup
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|core1
operator|.
name|getSolrConfig
argument_list|()
argument_list|)
expr_stmt|;
name|SolrCore
name|core2
init|=
name|cores
operator|.
name|getCore
argument_list|(
literal|"collectionLazy2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"core2 should not be swappable"
argument_list|,
name|core2
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|isSwappable
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"core2 should not be loadable"
argument_list|,
name|core2
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|isLoadOnStartup
argument_list|()
argument_list|)
expr_stmt|;
name|SolrCore
name|core3
init|=
name|cores
operator|.
name|getCore
argument_list|(
literal|"collectionLazy3"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"core3 should not be swappable"
argument_list|,
name|core3
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|isSwappable
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"core3 should not be loadable"
argument_list|,
name|core3
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|isLoadOnStartup
argument_list|()
argument_list|)
expr_stmt|;
name|SolrCore
name|core4
init|=
name|cores
operator|.
name|getCore
argument_list|(
literal|"collectionLazy4"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"core4 should not be swappable"
argument_list|,
name|core4
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|isSwappable
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"core4 should not be loadable"
argument_list|,
name|core4
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|isLoadOnStartup
argument_list|()
argument_list|)
expr_stmt|;
name|SolrCore
name|core5
init|=
name|cores
operator|.
name|getCore
argument_list|(
literal|"collectionLazy5"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"core5 should not be swappable"
argument_list|,
name|core5
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|isSwappable
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"core5 should  be loadable"
argument_list|,
name|core5
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|isLoadOnStartup
argument_list|()
argument_list|)
expr_stmt|;
name|core1
operator|.
name|close
argument_list|()
expr_stmt|;
name|core2
operator|.
name|close
argument_list|()
expr_stmt|;
name|core3
operator|.
name|close
argument_list|()
expr_stmt|;
name|core4
operator|.
name|close
argument_list|()
expr_stmt|;
name|core5
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|cores
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|// This is a little weak. I'm not sure how to test that lazy core2 is loaded automagically. The getCore
comment|// will, of course, load it.
annotation|@
name|Test
DECL|method|testLazySearch
specifier|public
name|void
name|testLazySearch
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
comment|// Make sure Lazy2 isn't loaded.
name|checkNotInCores
argument_list|(
literal|"collectionLazy2"
argument_list|)
expr_stmt|;
name|SolrCore
name|core2
init|=
name|cores
operator|.
name|getCore
argument_list|(
literal|"collectionLazy2"
argument_list|)
decl_stmt|;
name|addLazy
argument_list|(
name|core2
argument_list|,
literal|"id"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|addLazy
argument_list|(
name|core2
argument_list|,
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"v_t"
argument_list|,
literal|"Hello Dude"
argument_list|)
expr_stmt|;
name|addLazy
argument_list|(
name|core2
argument_list|,
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"v_t"
argument_list|,
literal|"Hello Yonik"
argument_list|)
expr_stmt|;
name|addLazy
argument_list|(
name|core2
argument_list|,
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"v_s"
argument_list|,
literal|"{!literal}"
argument_list|)
expr_stmt|;
name|addLazy
argument_list|(
name|core2
argument_list|,
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"v_s"
argument_list|,
literal|"other stuff"
argument_list|)
expr_stmt|;
name|addLazy
argument_list|(
name|core2
argument_list|,
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"v_f"
argument_list|,
literal|"3.14159"
argument_list|)
expr_stmt|;
name|addLazy
argument_list|(
name|core2
argument_list|,
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"v_f"
argument_list|,
literal|"8983"
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|req
init|=
name|makeReq
argument_list|(
name|core2
argument_list|)
decl_stmt|;
name|CommitUpdateCommand
name|cmtCmd
init|=
operator|new
name|CommitUpdateCommand
argument_list|(
name|req
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|core2
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|commit
argument_list|(
name|cmtCmd
argument_list|)
expr_stmt|;
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|holder
init|=
name|core2
operator|.
name|getSearcher
argument_list|()
decl_stmt|;
name|SolrIndexSearcher
name|searcher
init|=
name|holder
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Just get a couple of searches to work!
name|assertQ
argument_list|(
literal|"test prefix query"
argument_list|,
name|makeReq
argument_list|(
name|core2
argument_list|,
literal|"q"
argument_list|,
literal|"{!prefix f=v_t}hel"
argument_list|)
argument_list|,
literal|"//result[@numFound='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test raw query"
argument_list|,
name|makeReq
argument_list|(
name|core2
argument_list|,
literal|"q"
argument_list|,
literal|"{!raw f=v_t}hello"
argument_list|)
argument_list|,
literal|"//result[@numFound='2']"
argument_list|)
expr_stmt|;
comment|// Now just insure that the normal searching on "collection1" finds _0_ on the same query that found _2_ above.
comment|// Use of makeReq above and req below is tricky, very tricky.
name|assertQ
argument_list|(
literal|"test raw query"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!raw f=v_t}hello"
argument_list|)
argument_list|,
literal|"//result[@numFound='0']"
argument_list|)
expr_stmt|;
comment|// no analysis is done, so these should match nothing
name|assertQ
argument_list|(
literal|"test raw query"
argument_list|,
name|makeReq
argument_list|(
name|core2
argument_list|,
literal|"q"
argument_list|,
literal|"{!raw f=v_t}Hello"
argument_list|)
argument_list|,
literal|"//result[@numFound='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test raw query"
argument_list|,
name|makeReq
argument_list|(
name|core2
argument_list|,
literal|"q"
argument_list|,
literal|"{!raw f=v_f}1.5"
argument_list|)
argument_list|,
literal|"//result[@numFound='0']"
argument_list|)
expr_stmt|;
name|checkInCores
argument_list|(
literal|"collectionLazy2"
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
name|core2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|cores
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCachingLimit
specifier|public
name|void
name|testCachingLimit
parameter_list|()
block|{
try|try
block|{
comment|// NOTE: the way this works, this should not assert, however if it's put after the getCore on this collection,
comment|// that will cause the core to be loaded and this test will fail.
name|Collection
argument_list|<
name|String
argument_list|>
name|names
init|=
name|cores
operator|.
name|getCoreNames
argument_list|()
decl_stmt|;
comment|// By putting these in non-alpha order, we're also checking that we're  not just seeing an artifact.
name|SolrCore
name|core1
init|=
name|cores
operator|.
name|getCore
argument_list|(
literal|"collection1"
argument_list|)
decl_stmt|;
name|SolrCore
name|core2
init|=
name|cores
operator|.
name|getCore
argument_list|(
literal|"collectionLazy3"
argument_list|)
decl_stmt|;
name|SolrCore
name|core4
init|=
name|cores
operator|.
name|getCore
argument_list|(
literal|"collectionLazy4"
argument_list|)
decl_stmt|;
name|SolrCore
name|core3
init|=
name|cores
operator|.
name|getCore
argument_list|(
literal|"collectionLazy2"
argument_list|)
decl_stmt|;
name|SolrCore
name|core5
init|=
name|cores
operator|.
name|getCore
argument_list|(
literal|"collectionLazy5"
argument_list|)
decl_stmt|;
name|checkInCores
argument_list|(
literal|"collection1"
argument_list|,
literal|"collectionLazy2"
argument_list|,
literal|"collectionLazy3"
argument_list|,
literal|"collectionLazy4"
argument_list|,
literal|"collectionLazy5"
argument_list|)
expr_stmt|;
name|checkNotInCores
argument_list|(
literal|"collectionLazy6"
argument_list|,
literal|"collectionLazy7"
argument_list|,
literal|"collectionLazy8"
argument_list|,
literal|"collectionLazy9"
argument_list|)
expr_stmt|;
comment|// map should be full up, add one more and verify
name|SolrCore
name|core6
init|=
name|cores
operator|.
name|getCore
argument_list|(
literal|"collectionLazy6"
argument_list|)
decl_stmt|;
name|checkInCores
argument_list|(
literal|"collection1"
argument_list|,
literal|"collectionLazy2"
argument_list|,
literal|"collectionLazy3"
argument_list|,
literal|"collectionLazy4"
argument_list|,
literal|"collectionLazy5"
argument_list|,
literal|"collectionLazy6"
argument_list|)
expr_stmt|;
name|checkNotInCores
argument_list|(
literal|"collectionLazy7"
argument_list|,
literal|"collectionLazy8"
argument_list|,
literal|"collectionLazy9"
argument_list|)
expr_stmt|;
name|SolrCore
name|core7
init|=
name|cores
operator|.
name|getCore
argument_list|(
literal|"collectionLazy7"
argument_list|)
decl_stmt|;
name|checkInCores
argument_list|(
literal|"collection1"
argument_list|,
literal|"collectionLazy2"
argument_list|,
literal|"collectionLazy3"
argument_list|,
literal|"collectionLazy4"
argument_list|,
literal|"collectionLazy5"
argument_list|,
literal|"collectionLazy6"
argument_list|,
literal|"collectionLazy7"
argument_list|)
expr_stmt|;
name|checkNotInCores
argument_list|(
literal|"collectionLazy8"
argument_list|,
literal|"collectionLazy9"
argument_list|)
expr_stmt|;
name|SolrCore
name|core8
init|=
name|cores
operator|.
name|getCore
argument_list|(
literal|"collectionLazy8"
argument_list|)
decl_stmt|;
name|checkInCores
argument_list|(
literal|"collection1"
argument_list|,
literal|"collectionLazy2"
argument_list|,
literal|"collectionLazy4"
argument_list|,
literal|"collectionLazy5"
argument_list|,
literal|"collectionLazy6"
argument_list|,
literal|"collectionLazy7"
argument_list|,
literal|"collectionLazy8"
argument_list|)
expr_stmt|;
name|checkNotInCores
argument_list|(
literal|"collectionLazy3"
argument_list|,
literal|"collectionLazy9"
argument_list|)
expr_stmt|;
name|SolrCore
name|core9
init|=
name|cores
operator|.
name|getCore
argument_list|(
literal|"collectionLazy9"
argument_list|)
decl_stmt|;
name|checkInCores
argument_list|(
literal|"collection1"
argument_list|,
literal|"collectionLazy4"
argument_list|,
literal|"collectionLazy5"
argument_list|,
literal|"collectionLazy6"
argument_list|,
literal|"collectionLazy7"
argument_list|,
literal|"collectionLazy8"
argument_list|,
literal|"collectionLazy9"
argument_list|)
expr_stmt|;
name|checkNotInCores
argument_list|(
literal|"collectionLazy2"
argument_list|,
literal|"collectionLazy3"
argument_list|)
expr_stmt|;
comment|// Note decrementing the count when the core is removed from the lazyCores list is appropriate, since the
comment|// refcount is 1 when constructed. anyone _else_ who's opened up one has to close it.
name|core1
operator|.
name|close
argument_list|()
expr_stmt|;
name|core2
operator|.
name|close
argument_list|()
expr_stmt|;
name|core3
operator|.
name|close
argument_list|()
expr_stmt|;
name|core4
operator|.
name|close
argument_list|()
expr_stmt|;
name|core5
operator|.
name|close
argument_list|()
expr_stmt|;
name|core6
operator|.
name|close
argument_list|()
expr_stmt|;
name|core7
operator|.
name|close
argument_list|()
expr_stmt|;
name|core8
operator|.
name|close
argument_list|()
expr_stmt|;
name|core9
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|cores
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkNotInCores
specifier|private
name|void
name|checkNotInCores
parameter_list|(
name|String
modifier|...
name|nameCheck
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|names
init|=
name|cores
operator|.
name|getCoreNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|nameCheck
control|)
block|{
name|assertFalse
argument_list|(
literal|"core "
operator|+
name|name
operator|+
literal|" was found in the list of cores"
argument_list|,
name|names
operator|.
name|contains
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkInCores
specifier|private
name|void
name|checkInCores
parameter_list|(
name|String
modifier|...
name|nameCheck
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|names
init|=
name|cores
operator|.
name|getCoreNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|nameCheck
control|)
block|{
name|assertTrue
argument_list|(
literal|"core "
operator|+
name|name
operator|+
literal|" was not found in the list of cores"
argument_list|,
name|names
operator|.
name|contains
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addLazy
specifier|private
name|void
name|addLazy
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|String
modifier|...
name|fieldValues
parameter_list|)
throws|throws
name|IOException
block|{
name|UpdateHandler
name|updater
init|=
name|core
operator|.
name|getUpdateHandler
argument_list|()
decl_stmt|;
name|SolrQueryRequest
name|req
init|=
name|makeReq
argument_list|(
name|core
argument_list|)
decl_stmt|;
name|AddUpdateCommand
name|cmd
init|=
operator|new
name|AddUpdateCommand
argument_list|(
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|fieldValues
operator|.
name|length
operator|%
literal|2
operator|)
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The length of the string array (query arguments) needs to be even"
argument_list|)
throw|;
block|}
name|cmd
operator|.
name|solrDoc
operator|=
operator|new
name|SolrInputDocument
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|fieldValues
operator|.
name|length
condition|;
name|idx
operator|+=
literal|2
control|)
block|{
name|cmd
operator|.
name|solrDoc
operator|.
name|addField
argument_list|(
name|fieldValues
index|[
name|idx
index|]
argument_list|,
name|fieldValues
index|[
name|idx
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|updater
operator|.
name|addDoc
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
DECL|method|makeReq
specifier|private
name|LocalSolrQueryRequest
name|makeReq
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|String
modifier|...
name|q
parameter_list|)
block|{
if|if
condition|(
name|q
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
name|q
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|q
operator|.
name|length
operator|%
literal|2
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The length of the string array (query arguments) needs to be even"
argument_list|)
throw|;
block|}
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
init|=
operator|new
name|NamedList
operator|.
name|NamedListEntry
index|[
name|q
operator|.
name|length
operator|/
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|q
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|entries
index|[
name|i
operator|/
literal|2
index|]
operator|=
operator|new
name|NamedList
operator|.
name|NamedListEntry
argument_list|<
name|String
argument_list|>
argument_list|(
name|q
index|[
name|i
index|]
argument_list|,
name|q
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
operator|new
name|NamedList
argument_list|(
name|entries
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class
end_unit
