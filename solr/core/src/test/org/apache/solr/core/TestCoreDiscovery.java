begin_unit
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|not
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|internal
operator|.
name|matchers
operator|.
name|StringContains
operator|.
name|containsString
import|;
end_import
begin_class
DECL|class|TestCoreDiscovery
specifier|public
class|class
name|TestCoreDiscovery
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|()
expr_stmt|;
block|}
DECL|field|solrHomeDirectory
specifier|private
specifier|final
name|File
name|solrHomeDirectory
init|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
decl_stmt|;
DECL|method|setMeUp
specifier|private
name|void
name|setMeUp
parameter_list|(
name|String
name|alternateCoreDir
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.solr.home"
argument_list|,
name|solrHomeDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|xmlStr
init|=
name|SOLR_XML
decl_stmt|;
if|if
condition|(
name|alternateCoreDir
operator|!=
literal|null
condition|)
block|{
name|xmlStr
operator|=
name|xmlStr
operator|.
name|replace
argument_list|(
literal|"<solr>"
argument_list|,
literal|"<solr><str name=\"coreRootDirectory\">"
operator|+
name|alternateCoreDir
operator|+
literal|"</str> "
argument_list|)
expr_stmt|;
block|}
name|File
name|tmpFile
init|=
operator|new
name|File
argument_list|(
name|solrHomeDirectory
argument_list|,
name|SolrXmlConfig
operator|.
name|SOLR_XML_FILE
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|write
argument_list|(
name|tmpFile
argument_list|,
name|xmlStr
argument_list|,
name|IOUtils
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
DECL|method|setMeUp
specifier|private
name|void
name|setMeUp
parameter_list|()
throws|throws
name|Exception
block|{
name|setMeUp
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|makeCorePropFile
specifier|private
name|Properties
name|makeCorePropFile
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|isLazy
parameter_list|,
name|boolean
name|loadOnStartup
parameter_list|,
name|String
modifier|...
name|extraProps
parameter_list|)
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_NAME
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_SCHEMA
argument_list|,
literal|"schema-tiny.xml"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_CONFIG
argument_list|,
literal|"solrconfig-minimal.xml"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_TRANSIENT
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|isLazy
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_LOADONSTARTUP
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|loadOnStartup
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_DATADIR
argument_list|,
literal|"${core.dataDir:stuffandnonsense}"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_INSTDIR
argument_list|,
literal|"totallybogus"
argument_list|)
expr_stmt|;
comment|// For testing that this property is ignored if present.
for|for
control|(
name|String
name|extra
range|:
name|extraProps
control|)
block|{
name|String
index|[]
name|parts
init|=
name|extra
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|props
return|;
block|}
DECL|method|addCoreWithProps
specifier|private
name|void
name|addCoreWithProps
parameter_list|(
name|Properties
name|stockProps
parameter_list|,
name|File
name|propFile
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|propFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
name|propFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|Writer
name|out
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|propFile
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
try|try
block|{
name|stockProps
operator|.
name|store
argument_list|(
name|out
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|addConfFiles
argument_list|(
operator|new
name|File
argument_list|(
name|propFile
operator|.
name|getParent
argument_list|()
argument_list|,
literal|"conf"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addCoreWithProps
specifier|private
name|void
name|addCoreWithProps
parameter_list|(
name|String
name|name
parameter_list|,
name|Properties
name|stockProps
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|propFile
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|solrHomeDirectory
argument_list|,
name|name
argument_list|)
argument_list|,
name|CorePropertiesLocator
operator|.
name|PROPERTIES_FILENAME
argument_list|)
decl_stmt|;
name|File
name|parent
init|=
name|propFile
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to mkdirs for "
operator|+
name|parent
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|parent
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|addCoreWithProps
argument_list|(
name|stockProps
argument_list|,
name|propFile
argument_list|)
expr_stmt|;
block|}
DECL|method|addConfFiles
specifier|private
name|void
name|addConfFiles
parameter_list|(
name|File
name|confDir
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|top
init|=
name|SolrTestCaseJ4
operator|.
name|TEST_HOME
argument_list|()
operator|+
literal|"/collection1/conf"
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to mkdirs for "
operator|+
name|confDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|confDir
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|top
argument_list|,
literal|"schema-tiny.xml"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|confDir
argument_list|,
literal|"schema-tiny.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|top
argument_list|,
literal|"solrconfig-minimal.xml"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|confDir
argument_list|,
literal|"solrconfig-minimal.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|top
argument_list|,
literal|"solrconfig.snippet.randomindexconfig.xml"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|confDir
argument_list|,
literal|"solrconfig.snippet.randomindexconfig.xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|init
specifier|private
name|CoreContainer
name|init
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CoreContainer
name|cores
init|=
operator|new
name|CoreContainer
argument_list|()
decl_stmt|;
try|try
block|{
name|cores
operator|.
name|load
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|cores
operator|.
name|shutdown
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
name|cores
return|;
block|}
annotation|@
name|After
DECL|method|after
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{    }
comment|// Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores
comment|// set and insure that we find all the cores and can load them.
annotation|@
name|Test
DECL|method|testDiscovery
specifier|public
name|void
name|testDiscovery
parameter_list|()
throws|throws
name|Exception
block|{
name|setMeUp
argument_list|()
expr_stmt|;
comment|// name, isLazy, loadOnStartup
name|addCoreWithProps
argument_list|(
literal|"core1"
argument_list|,
name|makeCorePropFile
argument_list|(
literal|"core1"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|"dataDir=core1"
argument_list|)
argument_list|)
expr_stmt|;
name|addCoreWithProps
argument_list|(
literal|"core2"
argument_list|,
name|makeCorePropFile
argument_list|(
literal|"core2"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|"dataDir=core2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// I suspect what we're adding in here is a "configset" rather than a schema or solrconfig.
comment|//
name|addCoreWithProps
argument_list|(
literal|"lazy1"
argument_list|,
name|makeCorePropFile
argument_list|(
literal|"lazy1"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|"dataDir=lazy1"
argument_list|)
argument_list|)
expr_stmt|;
name|CoreContainer
name|cc
init|=
name|init
argument_list|()
decl_stmt|;
try|try
block|{
name|TestLazyCores
operator|.
name|checkInCores
argument_list|(
name|cc
argument_list|,
literal|"core1"
argument_list|)
expr_stmt|;
name|TestLazyCores
operator|.
name|checkNotInCores
argument_list|(
name|cc
argument_list|,
literal|"lazy1"
argument_list|,
literal|"core2"
argument_list|,
literal|"collection1"
argument_list|)
expr_stmt|;
comment|// force loading of core2 and lazy1 by getting them from the CoreContainer
try|try
init|(
name|SolrCore
name|core1
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"core1"
argument_list|)
init|;
name|SolrCore
name|core2
operator|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"core2"
argument_list|)
init|;
name|SolrCore
name|lazy1
operator|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"lazy1"
argument_list|)
init|)
block|{
comment|// Let's assert we did the right thing for implicit properties too.
name|CoreDescriptor
name|desc
init|=
name|core1
operator|.
name|getCoreDescriptor
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"core1"
argument_list|,
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// This is too long and ugly to put in. Besides, it varies.
name|assertNotNull
argument_list|(
name|desc
operator|.
name|getInstanceDir
argument_list|()
argument_list|)
expr_stmt|;
comment|// Prove we're ignoring this even though it's set in the properties file
name|assertFalse
argument_list|(
literal|"InstanceDir should be ignored"
argument_list|,
name|desc
operator|.
name|getInstanceDir
argument_list|()
operator|.
name|contains
argument_list|(
literal|"totallybogus"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"core1"
argument_list|,
name|desc
operator|.
name|getDataDir
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"solrconfig-minimal.xml"
argument_list|,
name|desc
operator|.
name|getConfigName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"schema-tiny.xml"
argument_list|,
name|desc
operator|.
name|getSchemaName
argument_list|()
argument_list|)
expr_stmt|;
name|TestLazyCores
operator|.
name|checkInCores
argument_list|(
name|cc
argument_list|,
literal|"core1"
argument_list|,
literal|"core2"
argument_list|,
literal|"lazy1"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Insure that if the number of transient cores that are loaded on startup is greater than the cache size that Solr
comment|// "does the right thing". Which means
comment|// 1> stop loading cores after transient cache size is reached, in this case that magic number is 3
comment|//    one non-transient and two transient.
comment|// 2> still loads cores as time passes.
comment|//
comment|// This seems like a silly test, but it hangs forever on 4.10 so let's guard against it in future. The behavior
comment|// has gone away with the removal of the complexity around the old-style solr.xml files.
comment|//
comment|// NOTE: The order that cores are loaded depends upon how the core discovery is traversed. I don't think we can
comment|//       make the test depend on that order, so after load just insure that the cores counts are correct.
annotation|@
name|Test
DECL|method|testTooManyTransientCores
specifier|public
name|void
name|testTooManyTransientCores
parameter_list|()
throws|throws
name|Exception
block|{
name|setMeUp
argument_list|()
expr_stmt|;
comment|// name, isLazy, loadOnStartup
name|addCoreWithProps
argument_list|(
literal|"coreLOS"
argument_list|,
name|makeCorePropFile
argument_list|(
literal|"coreLOS"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|"dataDir=coreLOS"
argument_list|)
argument_list|)
expr_stmt|;
name|addCoreWithProps
argument_list|(
literal|"coreT1"
argument_list|,
name|makeCorePropFile
argument_list|(
literal|"coreT1"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|"dataDir=coreT1"
argument_list|)
argument_list|)
expr_stmt|;
name|addCoreWithProps
argument_list|(
literal|"coreT2"
argument_list|,
name|makeCorePropFile
argument_list|(
literal|"coreT2"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|"dataDir=coreT2"
argument_list|)
argument_list|)
expr_stmt|;
name|addCoreWithProps
argument_list|(
literal|"coreT3"
argument_list|,
name|makeCorePropFile
argument_list|(
literal|"coreT3"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|"dataDir=coreT3"
argument_list|)
argument_list|)
expr_stmt|;
name|addCoreWithProps
argument_list|(
literal|"coreT4"
argument_list|,
name|makeCorePropFile
argument_list|(
literal|"coreT4"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|"dataDir=coreT4"
argument_list|)
argument_list|)
expr_stmt|;
name|addCoreWithProps
argument_list|(
literal|"coreT5"
argument_list|,
name|makeCorePropFile
argument_list|(
literal|"coreT5"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|"dataDir=coreT5"
argument_list|)
argument_list|)
expr_stmt|;
name|addCoreWithProps
argument_list|(
literal|"coreT6"
argument_list|,
name|makeCorePropFile
argument_list|(
literal|"coreT6"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|"dataDir=coreT6"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Do this specially since we need to search.
specifier|final
name|CoreContainer
name|cc
init|=
operator|new
name|CoreContainer
argument_list|(
name|solrHomeDirectory
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|cc
operator|.
name|load
argument_list|()
expr_stmt|;
comment|// Just check that the proper number of cores are loaded since making the test depend on order would be fragile
name|assertEquals
argument_list|(
literal|"There should only be 3 cores loaded, coreLOS and two coreT? cores"
argument_list|,
literal|3
argument_list|,
name|cc
operator|.
name|getCoreNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SolrCore
name|c1
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"coreT1"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Core T1 should NOT BE NULL"
argument_list|,
name|c1
argument_list|)
expr_stmt|;
name|SolrCore
name|c2
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"coreT2"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Core T2 should NOT BE NULL"
argument_list|,
name|c2
argument_list|)
expr_stmt|;
name|SolrCore
name|c3
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"coreT3"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Core T3 should NOT BE NULL"
argument_list|,
name|c3
argument_list|)
expr_stmt|;
name|SolrCore
name|c4
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"coreT4"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Core T4 should NOT BE NULL"
argument_list|,
name|c4
argument_list|)
expr_stmt|;
name|SolrCore
name|c5
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"coreT5"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Core T5 should NOT BE NULL"
argument_list|,
name|c5
argument_list|)
expr_stmt|;
name|SolrCore
name|c6
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"coreT6"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Core T6 should NOT BE NULL"
argument_list|,
name|c6
argument_list|)
expr_stmt|;
name|c1
operator|.
name|close
argument_list|()
expr_stmt|;
name|c2
operator|.
name|close
argument_list|()
expr_stmt|;
name|c3
operator|.
name|close
argument_list|()
expr_stmt|;
name|c4
operator|.
name|close
argument_list|()
expr_stmt|;
name|c5
operator|.
name|close
argument_list|()
expr_stmt|;
name|c6
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cc
operator|!=
literal|null
condition|)
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testDuplicateNames
specifier|public
name|void
name|testDuplicateNames
parameter_list|()
throws|throws
name|Exception
block|{
name|setMeUp
argument_list|()
expr_stmt|;
comment|// name, isLazy, loadOnStartup
name|addCoreWithProps
argument_list|(
literal|"core1"
argument_list|,
name|makeCorePropFile
argument_list|(
literal|"core1"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|addCoreWithProps
argument_list|(
literal|"core2"
argument_list|,
name|makeCorePropFile
argument_list|(
literal|"core2"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|"name=core1"
argument_list|)
argument_list|)
expr_stmt|;
name|CoreContainer
name|cc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cc
operator|=
name|init
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception in testDuplicateNames"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|se
parameter_list|)
block|{
name|String
name|message
init|=
name|se
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Wrong exception thrown on duplicate core names"
argument_list|,
name|message
operator|.
name|indexOf
argument_list|(
literal|"Found multiple cores with the name [core1]"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|File
operator|.
name|separator
operator|+
literal|"core1 should have been mentioned in the message: "
operator|+
name|message
argument_list|,
name|message
operator|.
name|indexOf
argument_list|(
name|File
operator|.
name|separator
operator|+
literal|"core1"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|File
operator|.
name|separator
operator|+
literal|"core2 should have been mentioned in the message:"
operator|+
name|message
argument_list|,
name|message
operator|.
name|indexOf
argument_list|(
name|File
operator|.
name|separator
operator|+
literal|"core2"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cc
operator|!=
literal|null
condition|)
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testAlternateCoreDir
specifier|public
name|void
name|testAlternateCoreDir
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|alt
init|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|setMeUp
argument_list|(
name|alt
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|addCoreWithProps
argument_list|(
name|makeCorePropFile
argument_list|(
literal|"core1"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|"dataDir=core1"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|alt
argument_list|,
literal|"core1"
operator|+
name|File
operator|.
name|separator
operator|+
name|CorePropertiesLocator
operator|.
name|PROPERTIES_FILENAME
argument_list|)
argument_list|)
expr_stmt|;
name|addCoreWithProps
argument_list|(
name|makeCorePropFile
argument_list|(
literal|"core2"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|"dataDir=core2"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|alt
argument_list|,
literal|"core2"
operator|+
name|File
operator|.
name|separator
operator|+
name|CorePropertiesLocator
operator|.
name|PROPERTIES_FILENAME
argument_list|)
argument_list|)
expr_stmt|;
name|CoreContainer
name|cc
init|=
name|init
argument_list|()
decl_stmt|;
try|try
init|(
name|SolrCore
name|core1
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"core1"
argument_list|)
init|;
name|SolrCore
name|core2
operator|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"core2"
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|core1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|core2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAlternateRelativeCoreDir
specifier|public
name|void
name|testAlternateRelativeCoreDir
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|relative
init|=
literal|"relativeCoreDir"
decl_stmt|;
name|setMeUp
argument_list|(
name|relative
argument_list|)
expr_stmt|;
comment|// two cores under the relative directory
name|addCoreWithProps
argument_list|(
name|makeCorePropFile
argument_list|(
literal|"core1"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|"dataDir=core1"
argument_list|)
argument_list|,
name|solrHomeDirectory
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|relative
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"core1"
argument_list|)
operator|.
name|resolve
argument_list|(
name|CorePropertiesLocator
operator|.
name|PROPERTIES_FILENAME
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|addCoreWithProps
argument_list|(
name|makeCorePropFile
argument_list|(
literal|"core2"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|"dataDir=core2"
argument_list|)
argument_list|,
name|solrHomeDirectory
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|relative
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"core2"
argument_list|)
operator|.
name|resolve
argument_list|(
name|CorePropertiesLocator
operator|.
name|PROPERTIES_FILENAME
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
comment|// one core *not* under the relative directory
name|addCoreWithProps
argument_list|(
name|makeCorePropFile
argument_list|(
literal|"core0"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|"datadir=core0"
argument_list|)
argument_list|,
name|solrHomeDirectory
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"core0"
argument_list|)
operator|.
name|resolve
argument_list|(
name|CorePropertiesLocator
operator|.
name|PROPERTIES_FILENAME
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|CoreContainer
name|cc
init|=
name|init
argument_list|()
decl_stmt|;
try|try
init|(
name|SolrCore
name|core1
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"core1"
argument_list|)
init|;
name|SolrCore
name|core2
operator|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"core2"
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|core1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|core2
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cc
operator|.
name|getCore
argument_list|(
literal|"core0"
argument_list|)
argument_list|)
expr_stmt|;
name|SolrCore
name|core3
init|=
name|cc
operator|.
name|create
argument_list|(
operator|new
name|CoreDescriptor
argument_list|(
name|cc
argument_list|,
literal|"core3"
argument_list|,
literal|"core3"
argument_list|,
literal|"configSet"
argument_list|,
literal|"minimal"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|core3
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getInstanceDir
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"relative"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNoCoreDir
specifier|public
name|void
name|testNoCoreDir
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|noCoreDir
init|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|setMeUp
argument_list|(
name|noCoreDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|addCoreWithProps
argument_list|(
name|makeCorePropFile
argument_list|(
literal|"core1"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|noCoreDir
argument_list|,
literal|"core1"
operator|+
name|File
operator|.
name|separator
operator|+
name|CorePropertiesLocator
operator|.
name|PROPERTIES_FILENAME
argument_list|)
argument_list|)
expr_stmt|;
name|addCoreWithProps
argument_list|(
name|makeCorePropFile
argument_list|(
literal|"core2"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|noCoreDir
argument_list|,
literal|"core2"
operator|+
name|File
operator|.
name|separator
operator|+
name|CorePropertiesLocator
operator|.
name|PROPERTIES_FILENAME
argument_list|)
argument_list|)
expr_stmt|;
name|CoreContainer
name|cc
init|=
name|init
argument_list|()
decl_stmt|;
try|try
init|(
name|SolrCore
name|core1
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"core1"
argument_list|)
init|;
name|SolrCore
name|core2
operator|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"core2"
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|core1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|core2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCoreDirCantRead
specifier|public
name|void
name|testCoreDirCantRead
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|coreDir
init|=
name|solrHomeDirectory
decl_stmt|;
name|setMeUp
argument_list|(
name|coreDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|addCoreWithProps
argument_list|(
name|makeCorePropFile
argument_list|(
literal|"core1"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|coreDir
argument_list|,
literal|"core1"
operator|+
name|File
operator|.
name|separator
operator|+
name|CorePropertiesLocator
operator|.
name|PROPERTIES_FILENAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// Insure that another core is opened successfully
name|addCoreWithProps
argument_list|(
name|makeCorePropFile
argument_list|(
literal|"core2"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|"dataDir=core2"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|coreDir
argument_list|,
literal|"core2"
operator|+
name|File
operator|.
name|separator
operator|+
name|CorePropertiesLocator
operator|.
name|PROPERTIES_FILENAME
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|toSet
init|=
operator|new
name|File
argument_list|(
name|coreDir
argument_list|,
literal|"core1"
argument_list|)
decl_stmt|;
name|assumeTrue
argument_list|(
literal|"Cannot make "
operator|+
name|toSet
operator|+
literal|" non-readable. Test aborted."
argument_list|,
name|toSet
operator|.
name|setReadable
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|CoreContainer
name|cc
init|=
name|init
argument_list|()
decl_stmt|;
try|try
init|(
name|SolrCore
name|core1
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"core1"
argument_list|)
init|;
name|SolrCore
name|core2
operator|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"core2"
argument_list|)
init|)
block|{
name|assertNull
argument_list|(
name|core1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|core2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// So things can be cleaned up by the framework!
name|toSet
operator|.
name|setReadable
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNonCoreDirCantRead
specifier|public
name|void
name|testNonCoreDirCantRead
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|coreDir
init|=
name|solrHomeDirectory
decl_stmt|;
name|setMeUp
argument_list|(
name|coreDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|addCoreWithProps
argument_list|(
name|makeCorePropFile
argument_list|(
literal|"core1"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|coreDir
argument_list|,
literal|"core1"
operator|+
name|File
operator|.
name|separator
operator|+
name|CorePropertiesLocator
operator|.
name|PROPERTIES_FILENAME
argument_list|)
argument_list|)
expr_stmt|;
name|addCoreWithProps
argument_list|(
name|makeCorePropFile
argument_list|(
literal|"core2"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|"dataDir=core2"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|coreDir
argument_list|,
literal|"core2"
operator|+
name|File
operator|.
name|separator
operator|+
name|CorePropertiesLocator
operator|.
name|PROPERTIES_FILENAME
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|toSet
init|=
operator|new
name|File
argument_list|(
name|solrHomeDirectory
argument_list|,
literal|"cantReadDir"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should have been able to make directory '"
operator|+
name|toSet
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"' "
argument_list|,
name|toSet
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|assumeTrue
argument_list|(
literal|"Cannot make "
operator|+
name|toSet
operator|+
literal|" non-readable. Test aborted."
argument_list|,
name|toSet
operator|.
name|setReadable
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|CoreContainer
name|cc
init|=
name|init
argument_list|()
decl_stmt|;
try|try
init|(
name|SolrCore
name|core1
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"core1"
argument_list|)
init|;
name|SolrCore
name|core2
operator|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"core2"
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|core1
argument_list|)
expr_stmt|;
comment|// Should be able to open the perfectly valid core1 despite a non-readable directory
name|assertNotNull
argument_list|(
name|core2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// So things can be cleaned up by the framework!
name|toSet
operator|.
name|setReadable
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFileCantRead
specifier|public
name|void
name|testFileCantRead
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|coreDir
init|=
name|solrHomeDirectory
decl_stmt|;
name|setMeUp
argument_list|(
name|coreDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|addCoreWithProps
argument_list|(
name|makeCorePropFile
argument_list|(
literal|"core1"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|coreDir
argument_list|,
literal|"core1"
operator|+
name|File
operator|.
name|separator
operator|+
name|CorePropertiesLocator
operator|.
name|PROPERTIES_FILENAME
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|toSet
init|=
operator|new
name|File
argument_list|(
name|solrHomeDirectory
argument_list|,
literal|"cantReadFile"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should have been able to make file '"
operator|+
name|toSet
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"' "
argument_list|,
name|toSet
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|assumeTrue
argument_list|(
literal|"Cannot make "
operator|+
name|toSet
operator|+
literal|" non-readable. Test aborted."
argument_list|,
name|toSet
operator|.
name|setReadable
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|CoreContainer
name|cc
init|=
name|init
argument_list|()
decl_stmt|;
try|try
init|(
name|SolrCore
name|core1
init|=
name|cc
operator|.
name|getCore
argument_list|(
literal|"core1"
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|core1
argument_list|)
expr_stmt|;
comment|// Should still be able to create core despite r/o file.
block|}
finally|finally
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// So things can be cleaned up by the framework!
name|toSet
operator|.
name|setReadable
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSolrHomeDoesntExist
specifier|public
name|void
name|testSolrHomeDoesntExist
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|homeDir
init|=
name|solrHomeDirectory
decl_stmt|;
name|IOUtils
operator|.
name|rm
argument_list|(
name|homeDir
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
name|CoreContainer
name|cc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cc
operator|=
name|init
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Core init doesn't report if solr home directory doesn't exist "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|0
operator|<=
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"solr.xml does not exist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cc
operator|!=
literal|null
condition|)
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testSolrHomeNotReadable
specifier|public
name|void
name|testSolrHomeNotReadable
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|homeDir
init|=
name|solrHomeDirectory
decl_stmt|;
name|setMeUp
argument_list|(
name|homeDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|addCoreWithProps
argument_list|(
name|makeCorePropFile
argument_list|(
literal|"core1"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"core1"
operator|+
name|File
operator|.
name|separator
operator|+
name|CorePropertiesLocator
operator|.
name|PROPERTIES_FILENAME
argument_list|)
argument_list|)
expr_stmt|;
name|assumeTrue
argument_list|(
literal|"Cannot make "
operator|+
name|homeDir
operator|+
literal|" non-readable. Test aborted."
argument_list|,
name|homeDir
operator|.
name|setReadable
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|CoreContainer
name|cc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cc
operator|=
name|init
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Error reading core root directory"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cc
operator|!=
literal|null
condition|)
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|// So things can be cleaned up by the framework!
name|homeDir
operator|.
name|setReadable
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// For testing whether finding a solr.xml overrides looking at solr.properties
DECL|field|SOLR_XML
specifier|private
specifier|final
specifier|static
name|String
name|SOLR_XML
init|=
literal|"<solr> "
operator|+
literal|"<int name=\"transientCacheSize\">2</int> "
operator|+
literal|"<str name=\"configSetBaseDir\">"
operator|+
name|Paths
operator|.
name|get
argument_list|(
name|TEST_HOME
argument_list|()
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"configsets"
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
literal|"</str>"
operator|+
literal|"<solrcloud> "
operator|+
literal|"<str name=\"hostContext\">solrprop</str> "
operator|+
literal|"<int name=\"zkClientTimeout\">20</int> "
operator|+
literal|"<str name=\"host\">222.333.444.555</str> "
operator|+
literal|"<int name=\"hostPort\">6000</int>  "
operator|+
literal|"</solrcloud> "
operator|+
literal|"</solr>"
decl_stmt|;
annotation|@
name|Test
DECL|method|testRootDirectoryResolution
specifier|public
name|void
name|testRootDirectoryResolution
parameter_list|()
block|{
name|SolrResourceLoader
name|loader
init|=
operator|new
name|SolrResourceLoader
argument_list|(
name|solrHomeDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|NodeConfig
name|config
init|=
name|SolrXmlConfig
operator|.
name|fromString
argument_list|(
name|loader
argument_list|,
literal|"<solr><str name=\"coreRootDirectory\">relative</str></solr>"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|config
operator|.
name|getCoreRootDirectory
argument_list|()
argument_list|,
name|containsString
argument_list|(
name|solrHomeDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|NodeConfig
name|absConfig
init|=
name|SolrXmlConfig
operator|.
name|fromString
argument_list|(
name|loader
argument_list|,
literal|"<solr><str name=\"coreRootDirectory\">/absolute</str></solr>"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|absConfig
operator|.
name|getCoreRootDirectory
argument_list|()
argument_list|,
name|not
argument_list|(
name|containsString
argument_list|(
name|solrHomeDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
