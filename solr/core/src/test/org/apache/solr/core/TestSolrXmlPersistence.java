begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|rules
operator|.
name|SystemPropertiesRestoreRule
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|CoreAdminHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TestHarness
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|RuleChain
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_class
DECL|class|TestSolrXmlPersistence
specifier|public
class|class
name|TestSolrXmlPersistence
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|solrHomeDirectory
specifier|private
name|File
name|solrHomeDirectory
init|=
operator|new
name|File
argument_list|(
name|TEMP_DIR
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|solrTestRules
specifier|public
name|TestRule
name|solrTestRules
init|=
name|RuleChain
operator|.
name|outerRule
argument_list|(
operator|new
name|SystemPropertiesRestoreRule
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|init
specifier|private
name|CoreContainer
name|init
parameter_list|(
name|String
name|solrXmlString
parameter_list|,
name|String
modifier|...
name|subDirs
parameter_list|)
throws|throws
name|Exception
block|{
name|createTempDir
argument_list|()
expr_stmt|;
name|solrHomeDirectory
operator|=
name|dataDir
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|subDirs
control|)
block|{
name|copyMinConf
argument_list|(
operator|new
name|File
argument_list|(
name|solrHomeDirectory
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|File
name|solrXml
init|=
operator|new
name|File
argument_list|(
name|solrHomeDirectory
argument_list|,
literal|"solr.xml"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|write
argument_list|(
name|solrXml
argument_list|,
name|solrXmlString
argument_list|,
name|IOUtils
operator|.
name|CHARSET_UTF_8
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|CoreContainer
name|cores
init|=
name|createCoreContainer
argument_list|(
name|solrHomeDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|solrXmlString
argument_list|)
decl_stmt|;
return|return
name|cores
return|;
block|}
comment|// take a solr.xml with system vars in<solr>,<cores> and<core> and<core/properties> tags that have system
comment|// variables defined. Insure that after persisting solr.xml, they're all still there as ${} syntax.
comment|// Also insure that nothing extra crept in.
annotation|@
name|Test
DECL|method|testSystemVars
specifier|public
name|void
name|testSystemVars
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Set these system props in order to insure that we don't write out the values rather than the ${} syntax.
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.zkclienttimeout"
argument_list|,
literal|"93"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solrconfig"
argument_list|,
literal|"solrconfig.xml"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"schema"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"zkHostSet"
argument_list|,
literal|"localhost:9983"
argument_list|)
expr_stmt|;
name|CoreContainer
name|cc
init|=
name|init
argument_list|(
name|SOLR_XML_LOTS_SYSVARS
argument_list|,
literal|"SystemVars1"
argument_list|,
literal|"SystemVars2"
argument_list|)
decl_stmt|;
try|try
block|{
name|origMatchesPersist
argument_list|(
name|cc
argument_list|,
name|SOLR_XML_LOTS_SYSVARS
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|solrHomeDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|solrHomeDirectory
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testReload
specifier|public
name|void
name|testReload
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Whether the core is transient or not can make a difference.
name|doReloadTest
argument_list|(
literal|"SystemVars2"
argument_list|)
expr_stmt|;
name|doReloadTest
argument_list|(
literal|"SystemVars1"
argument_list|)
expr_stmt|;
block|}
DECL|method|doReloadTest
specifier|private
name|void
name|doReloadTest
parameter_list|(
name|String
name|which
parameter_list|)
throws|throws
name|Exception
block|{
name|CoreContainer
name|cc
init|=
name|init
argument_list|(
name|SOLR_XML_LOTS_SYSVARS
argument_list|,
literal|"SystemVars1"
argument_list|,
literal|"SystemVars2"
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|CoreAdminHandler
name|admin
init|=
operator|new
name|CoreAdminHandler
argument_list|(
name|cc
argument_list|)
decl_stmt|;
name|SolrQueryResponse
name|resp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
name|admin
operator|.
name|handleRequestBody
argument_list|(
name|req
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminParams
operator|.
name|CoreAdminAction
operator|.
name|RELOAD
operator|.
name|toString
argument_list|()
argument_list|,
name|CoreAdminParams
operator|.
name|CORE
argument_list|,
name|which
argument_list|)
argument_list|,
name|resp
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Exception on reload"
argument_list|,
name|resp
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|origMatchesPersist
argument_list|(
name|cc
argument_list|,
name|SOLR_XML_LOTS_SYSVARS
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|solrHomeDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|solrHomeDirectory
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testRename
specifier|public
name|void
name|testRename
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestRename
argument_list|(
literal|"SystemVars1"
argument_list|)
expr_stmt|;
name|doTestRename
argument_list|(
literal|"SystemVars2"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestRename
specifier|private
name|void
name|doTestRename
parameter_list|(
name|String
name|which
parameter_list|)
throws|throws
name|Exception
block|{
name|CoreContainer
name|cc
init|=
name|init
argument_list|(
name|SOLR_XML_LOTS_SYSVARS
argument_list|,
literal|"SystemVars1"
argument_list|,
literal|"SystemVars2"
argument_list|)
decl_stmt|;
name|SolrXMLCoresLocator
operator|.
name|NonPersistingLocator
name|locator
init|=
operator|(
name|SolrXMLCoresLocator
operator|.
name|NonPersistingLocator
operator|)
name|cc
operator|.
name|getCoresLocator
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|CoreAdminHandler
name|admin
init|=
operator|new
name|CoreAdminHandler
argument_list|(
name|cc
argument_list|)
decl_stmt|;
name|SolrQueryResponse
name|resp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
name|admin
operator|.
name|handleRequestBody
argument_list|(
name|req
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminParams
operator|.
name|CoreAdminAction
operator|.
name|RENAME
operator|.
name|toString
argument_list|()
argument_list|,
name|CoreAdminParams
operator|.
name|CORE
argument_list|,
name|which
argument_list|,
name|CoreAdminParams
operator|.
name|OTHER
argument_list|,
literal|"RenamedCore"
argument_list|)
argument_list|,
name|resp
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Exception on rename"
argument_list|,
name|resp
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
comment|// OK, Assure that if I change everything that has been renamed with the original value for the core, it matches
comment|// the old list
name|String
index|[]
name|persistList
init|=
name|getAllNodes
argument_list|()
decl_stmt|;
name|String
index|[]
name|expressions
init|=
operator|new
name|String
index|[
name|persistList
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|persistList
operator|.
name|length
condition|;
operator|++
name|idx
control|)
block|{
name|expressions
index|[
name|idx
index|]
operator|=
name|persistList
index|[
name|idx
index|]
operator|.
name|replaceAll
argument_list|(
literal|"RenamedCore"
argument_list|,
name|which
argument_list|)
expr_stmt|;
block|}
comment|//assertXmlFile(origXml, expressions);
name|TestHarness
operator|.
name|validateXPath
argument_list|(
name|SOLR_XML_LOTS_SYSVARS
argument_list|,
name|expressions
argument_list|)
expr_stmt|;
comment|// Now the other way, If I replace the original name in the original XML file with "RenamedCore", does it match
comment|// what was persisted?
name|persistList
operator|=
name|getAllNodes
argument_list|(
name|SOLR_XML_LOTS_SYSVARS
argument_list|)
expr_stmt|;
name|expressions
operator|=
operator|new
name|String
index|[
name|persistList
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|persistList
operator|.
name|length
condition|;
operator|++
name|idx
control|)
block|{
comment|// /solr/cores/core[@name='SystemVars1' and @collection='${collection:collection1}']
name|expressions
index|[
name|idx
index|]
operator|=
name|persistList
index|[
name|idx
index|]
operator|.
name|replace
argument_list|(
literal|"@name='"
operator|+
name|which
operator|+
literal|"'"
argument_list|,
literal|"@name='RenamedCore'"
argument_list|)
expr_stmt|;
block|}
name|TestHarness
operator|.
name|validateXPath
argument_list|(
name|locator
operator|.
name|xml
argument_list|,
name|expressions
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|solrHomeDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|solrHomeDirectory
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testSwap
specifier|public
name|void
name|testSwap
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestSwap
argument_list|(
literal|"SystemVars1"
argument_list|,
literal|"SystemVars2"
argument_list|)
expr_stmt|;
name|doTestSwap
argument_list|(
literal|"SystemVars2"
argument_list|,
literal|"SystemVars1"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestSwap
specifier|private
name|void
name|doTestSwap
parameter_list|(
name|String
name|from
parameter_list|,
name|String
name|to
parameter_list|)
throws|throws
name|Exception
block|{
name|CoreContainer
name|cc
init|=
name|init
argument_list|(
name|SOLR_XML_LOTS_SYSVARS
argument_list|,
literal|"SystemVars1"
argument_list|,
literal|"SystemVars2"
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|CoreAdminHandler
name|admin
init|=
operator|new
name|CoreAdminHandler
argument_list|(
name|cc
argument_list|)
decl_stmt|;
name|SolrQueryResponse
name|resp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
name|admin
operator|.
name|handleRequestBody
argument_list|(
name|req
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminParams
operator|.
name|CoreAdminAction
operator|.
name|SWAP
operator|.
name|toString
argument_list|()
argument_list|,
name|CoreAdminParams
operator|.
name|CORE
argument_list|,
name|from
argument_list|,
name|CoreAdminParams
operator|.
name|OTHER
argument_list|,
name|to
argument_list|)
argument_list|,
name|resp
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Exception on swap"
argument_list|,
name|resp
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|persistList
init|=
name|getAllNodes
argument_list|()
decl_stmt|;
name|String
index|[]
name|expressions
init|=
operator|new
name|String
index|[
name|persistList
operator|.
name|length
index|]
decl_stmt|;
comment|// Now manually change the names back and it should match exactly to the original XML.
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|persistList
operator|.
name|length
condition|;
operator|++
name|idx
control|)
block|{
name|String
name|fromName
init|=
literal|"@name='"
operator|+
name|from
operator|+
literal|"'"
decl_stmt|;
name|String
name|toName
init|=
literal|"@name='"
operator|+
name|to
operator|+
literal|"'"
decl_stmt|;
if|if
condition|(
name|persistList
index|[
name|idx
index|]
operator|.
name|contains
argument_list|(
name|fromName
argument_list|)
condition|)
block|{
name|expressions
index|[
name|idx
index|]
operator|=
name|persistList
index|[
name|idx
index|]
operator|.
name|replace
argument_list|(
name|fromName
argument_list|,
name|toName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expressions
index|[
name|idx
index|]
operator|=
name|persistList
index|[
name|idx
index|]
operator|.
name|replace
argument_list|(
name|toName
argument_list|,
name|fromName
argument_list|)
expr_stmt|;
block|}
block|}
comment|//assertXmlFile(origXml, expressions);
name|TestHarness
operator|.
name|validateXPath
argument_list|(
name|SOLR_XML_LOTS_SYSVARS
argument_list|,
name|expressions
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|solrHomeDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|solrHomeDirectory
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testMinimalXml
specifier|public
name|void
name|testMinimalXml
parameter_list|()
throws|throws
name|Exception
block|{
name|CoreContainer
name|cc
init|=
name|init
argument_list|(
name|SOLR_XML_MINIMAL
argument_list|,
literal|"SystemVars1"
argument_list|)
decl_stmt|;
try|try
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|origMatchesPersist
argument_list|(
name|cc
argument_list|,
name|SOLR_XML_MINIMAL
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|solrHomeDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|solrHomeDirectory
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|origMatchesPersist
specifier|private
name|void
name|origMatchesPersist
parameter_list|(
name|CoreContainer
name|cc
parameter_list|,
name|String
name|originalSolrXML
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|expressions
init|=
name|getAllNodes
argument_list|(
name|originalSolrXML
argument_list|)
decl_stmt|;
name|SolrXMLCoresLocator
operator|.
name|NonPersistingLocator
name|locator
init|=
operator|(
name|SolrXMLCoresLocator
operator|.
name|NonPersistingLocator
operator|)
name|cc
operator|.
name|getCoresLocator
argument_list|()
decl_stmt|;
name|TestHarness
operator|.
name|validateXPath
argument_list|(
name|locator
operator|.
name|xml
argument_list|,
name|expressions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnloadCreate
specifier|public
name|void
name|testUnloadCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestUnloadCreate
argument_list|(
literal|"SystemVars1"
argument_list|)
expr_stmt|;
name|doTestUnloadCreate
argument_list|(
literal|"SystemVars2"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestUnloadCreate
specifier|private
name|void
name|doTestUnloadCreate
parameter_list|(
name|String
name|which
parameter_list|)
throws|throws
name|Exception
block|{
name|CoreContainer
name|cc
init|=
name|init
argument_list|(
name|SOLR_XML_LOTS_SYSVARS
argument_list|,
literal|"SystemVars1"
argument_list|,
literal|"SystemVars2"
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|CoreAdminHandler
name|admin
init|=
operator|new
name|CoreAdminHandler
argument_list|(
name|cc
argument_list|)
decl_stmt|;
name|SolrQueryResponse
name|resp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
name|admin
operator|.
name|handleRequestBody
argument_list|(
name|req
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminParams
operator|.
name|CoreAdminAction
operator|.
name|UNLOAD
operator|.
name|toString
argument_list|()
argument_list|,
name|CoreAdminParams
operator|.
name|CORE
argument_list|,
name|which
argument_list|)
argument_list|,
name|resp
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Exception on unload"
argument_list|,
name|resp
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
comment|//origMatchesPersist(cc, new File(solrHomeDirectory, "unloadcreate1.solr.xml"));
name|String
name|instPath
init|=
operator|new
name|File
argument_list|(
name|solrHomeDirectory
argument_list|,
name|which
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|admin
operator|.
name|handleRequestBody
argument_list|(
name|req
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminParams
operator|.
name|CoreAdminAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|,
name|CoreAdminParams
operator|.
name|INSTANCE_DIR
argument_list|,
name|instPath
argument_list|,
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|which
argument_list|)
argument_list|,
name|resp
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Exception on create"
argument_list|,
name|resp
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|persistList
init|=
name|getAllNodes
argument_list|()
decl_stmt|;
name|String
index|[]
name|expressions
init|=
operator|new
name|String
index|[
name|persistList
operator|.
name|length
index|]
decl_stmt|;
comment|// Now manually change the names back and it should match exactly to the original XML.
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|persistList
operator|.
name|length
condition|;
operator|++
name|idx
control|)
block|{
name|String
name|name
init|=
literal|"@name='"
operator|+
name|which
operator|+
literal|"'"
decl_stmt|;
if|if
condition|(
name|persistList
index|[
name|idx
index|]
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|persistList
index|[
name|idx
index|]
operator|.
name|contains
argument_list|(
literal|"@schema='schema.xml'"
argument_list|)
condition|)
block|{
name|expressions
index|[
name|idx
index|]
operator|=
name|persistList
index|[
name|idx
index|]
operator|.
name|replace
argument_list|(
literal|"schema.xml"
argument_list|,
literal|"${schema:schema.xml}"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|persistList
index|[
name|idx
index|]
operator|.
name|contains
argument_list|(
literal|"@config='solrconfig.xml'"
argument_list|)
condition|)
block|{
name|expressions
index|[
name|idx
index|]
operator|=
name|persistList
index|[
name|idx
index|]
operator|.
name|replace
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"${solrconfig:solrconfig.xml}"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|persistList
index|[
name|idx
index|]
operator|.
name|contains
argument_list|(
literal|"@instanceDir="
argument_list|)
condition|)
block|{
name|expressions
index|[
name|idx
index|]
operator|=
name|persistList
index|[
name|idx
index|]
operator|.
name|replaceFirst
argument_list|(
literal|"instanceDir\\='.*?'"
argument_list|,
literal|"instanceDir='"
operator|+
name|which
operator|+
literal|"/'"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expressions
index|[
name|idx
index|]
operator|=
name|persistList
index|[
name|idx
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
name|expressions
index|[
name|idx
index|]
operator|=
name|persistList
index|[
name|idx
index|]
expr_stmt|;
block|}
block|}
comment|//assertXmlFile(origXml, expressions);
name|TestHarness
operator|.
name|validateXPath
argument_list|(
name|SOLR_XML_LOTS_SYSVARS
argument_list|,
name|expressions
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|solrHomeDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|solrHomeDirectory
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testCreatePersistCore
specifier|public
name|void
name|testCreatePersistCore
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Template for creating a core.
name|CoreContainer
name|cc
init|=
name|init
argument_list|(
name|SOLR_XML_LOTS_SYSVARS
argument_list|,
literal|"SystemVars1"
argument_list|,
literal|"SystemVars2"
argument_list|,
literal|"props1"
argument_list|,
literal|"props2"
argument_list|)
decl_stmt|;
name|SolrXMLCoresLocator
operator|.
name|NonPersistingLocator
name|locator
init|=
operator|(
name|SolrXMLCoresLocator
operator|.
name|NonPersistingLocator
operator|)
name|cc
operator|.
name|getCoresLocator
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|CoreAdminHandler
name|admin
init|=
operator|new
name|CoreAdminHandler
argument_list|(
name|cc
argument_list|)
decl_stmt|;
comment|// create a new core (using CoreAdminHandler) w/ properties
name|SolrQueryResponse
name|resp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
name|admin
operator|.
name|handleRequestBody
argument_list|(
name|req
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminParams
operator|.
name|CoreAdminAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|,
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
literal|"props1"
argument_list|,
name|CoreAdminParams
operator|.
name|TRANSIENT
argument_list|,
literal|"true"
argument_list|,
name|CoreAdminParams
operator|.
name|LOAD_ON_STARTUP
argument_list|,
literal|"true"
argument_list|,
name|CoreAdminParams
operator|.
name|PROPERTY_PREFIX
operator|+
literal|"prefix1"
argument_list|,
literal|"valuep1"
argument_list|,
name|CoreAdminParams
operator|.
name|PROPERTY_PREFIX
operator|+
literal|"prefix2"
argument_list|,
literal|"valueP2"
argument_list|,
literal|"wt"
argument_list|,
literal|"json"
argument_list|,
comment|// need to insure that extra parameters are _not_ preserved (actually happened).
literal|"qt"
argument_list|,
literal|"admin/cores"
argument_list|)
argument_list|,
name|resp
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Exception on create"
argument_list|,
name|resp
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|instPath2
init|=
operator|new
name|File
argument_list|(
name|solrHomeDirectory
argument_list|,
literal|"props2"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|admin
operator|.
name|handleRequestBody
argument_list|(
name|req
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminParams
operator|.
name|CoreAdminAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|,
name|CoreAdminParams
operator|.
name|INSTANCE_DIR
argument_list|,
name|instPath2
argument_list|,
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
literal|"props2"
argument_list|,
name|CoreAdminParams
operator|.
name|PROPERTY_PREFIX
operator|+
literal|"prefix2_1"
argument_list|,
literal|"valuep2_1"
argument_list|,
name|CoreAdminParams
operator|.
name|PROPERTY_PREFIX
operator|+
literal|"prefix2_2"
argument_list|,
literal|"valueP2_2"
argument_list|,
name|CoreAdminParams
operator|.
name|CONFIG
argument_list|,
literal|"solrconfig.xml"
argument_list|,
name|CoreAdminParams
operator|.
name|DATA_DIR
argument_list|,
literal|"./dataDirTest"
argument_list|,
name|CoreAdminParams
operator|.
name|SCHEMA
argument_list|,
literal|"schema.xml"
argument_list|)
argument_list|,
name|resp
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Exception on create"
argument_list|,
name|resp
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
comment|// Everything that was in the original XML file should be in the persisted one.
name|TestHarness
operator|.
name|validateXPath
argument_list|(
name|locator
operator|.
name|xml
argument_list|,
name|getAllNodes
argument_list|(
name|SOLR_XML_LOTS_SYSVARS
argument_list|)
argument_list|)
expr_stmt|;
comment|// And the params for the new core should be in the persisted file.
name|TestHarness
operator|.
name|validateXPath
argument_list|(
name|locator
operator|.
name|xml
argument_list|,
literal|"/solr/cores/core[@name='props1']/property[@name='prefix1' and @value='valuep1']"
argument_list|,
literal|"/solr/cores/core[@name='props1']/property[@name='prefix2' and @value='valueP2']"
argument_list|,
literal|"/solr/cores/core[@name='props1' and @transient='true']"
argument_list|,
literal|"/solr/cores/core[@name='props1' and @loadOnStartup='true']"
argument_list|,
literal|"/solr/cores/core[@name='props1' and @instanceDir='props1"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"']"
argument_list|,
literal|"/solr/cores/core[@name='props2']/property[@name='prefix2_1' and @value='valuep2_1']"
argument_list|,
literal|"/solr/cores/core[@name='props2']/property[@name='prefix2_2' and @value='valueP2_2']"
argument_list|,
literal|"/solr/cores/core[@name='props2' and @config='solrconfig.xml']"
argument_list|,
literal|"/solr/cores/core[@name='props2' and @schema='schema.xml']"
argument_list|,
literal|"/solr/cores/core[@name='props2' and not(@loadOnStartup)]"
argument_list|,
literal|"/solr/cores/core[@name='props2' and not(@transient)]"
argument_list|,
literal|"/solr/cores/core[@name='props2' and @instanceDir='"
operator|+
name|instPath2
operator|+
literal|"']"
argument_list|,
literal|"/solr/cores/core[@name='props2' and @dataDir='./dataDirTest']"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|solrHomeDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|solrHomeDirectory
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testPersist
specifier|public
name|void
name|testPersist
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|defXml
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
operator|new
name|File
argument_list|(
name|SolrTestCaseJ4
operator|.
name|TEST_HOME
argument_list|()
argument_list|,
literal|"solr.xml"
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|CoreContainer
name|cores
init|=
name|init
argument_list|(
name|defXml
argument_list|,
literal|"collection1"
argument_list|)
decl_stmt|;
name|SolrXMLCoresLocator
operator|.
name|NonPersistingLocator
name|locator
init|=
operator|(
name|SolrXMLCoresLocator
operator|.
name|NonPersistingLocator
operator|)
name|cores
operator|.
name|getCoresLocator
argument_list|()
decl_stmt|;
name|String
name|instDir
init|=
literal|null
decl_stmt|;
block|{
name|SolrCore
name|template
init|=
literal|null
decl_stmt|;
try|try
block|{
name|template
operator|=
name|cores
operator|.
name|getCore
argument_list|(
literal|"collection1"
argument_list|)
expr_stmt|;
name|instDir
operator|=
name|template
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getRawInstanceDir
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|template
condition|)
name|template
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|final
name|File
name|instDirFile
init|=
operator|new
name|File
argument_list|(
name|cores
operator|.
name|getSolrHome
argument_list|()
argument_list|,
name|instDir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"instDir doesn't exist: "
operator|+
name|instDir
argument_list|,
name|instDirFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// sanity check the basic persistence of the default init
name|TestHarness
operator|.
name|validateXPath
argument_list|(
name|locator
operator|.
name|xml
argument_list|,
literal|"/solr[@persistent='true']"
argument_list|,
literal|"/solr/cores[@defaultCoreName='collection1' and not(@transientCacheSize)]"
argument_list|,
literal|"/solr/cores/core[@name='collection1' and @instanceDir='"
operator|+
name|instDir
operator|+
literal|"' and @transient='false' and @loadOnStartup='true' ]"
argument_list|,
literal|"1=count(/solr/cores/core)"
argument_list|)
expr_stmt|;
comment|// create some new cores and sanity check the persistence
specifier|final
name|File
name|dataXfile
init|=
operator|new
name|File
argument_list|(
name|solrHomeDirectory
argument_list|,
literal|"dataX"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|dataX
init|=
name|dataXfile
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"dataXfile mkdirs failed: "
operator|+
name|dataX
argument_list|,
name|dataXfile
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|File
name|instYfile
init|=
operator|new
name|File
argument_list|(
name|solrHomeDirectory
argument_list|,
literal|"instY"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|copyDirectory
argument_list|(
name|instDirFile
argument_list|,
name|instYfile
argument_list|)
expr_stmt|;
comment|// :HACK: dataDir leaves off trailing "/", but instanceDir uses it
specifier|final
name|String
name|instY
init|=
name|instYfile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/"
decl_stmt|;
specifier|final
name|CoreDescriptor
name|xd
init|=
name|buildCoreDescriptor
argument_list|(
name|cores
argument_list|,
literal|"X"
argument_list|,
name|instDir
argument_list|)
operator|.
name|withDataDir
argument_list|(
name|dataX
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|CoreDescriptor
name|yd
init|=
operator|new
name|CoreDescriptor
argument_list|(
name|cores
argument_list|,
literal|"Y"
argument_list|,
name|instY
argument_list|)
decl_stmt|;
name|SolrCore
name|x
init|=
literal|null
decl_stmt|;
name|SolrCore
name|y
init|=
literal|null
decl_stmt|;
try|try
block|{
name|x
operator|=
name|cores
operator|.
name|create
argument_list|(
name|xd
argument_list|)
expr_stmt|;
name|y
operator|=
name|cores
operator|.
name|create
argument_list|(
name|yd
argument_list|)
expr_stmt|;
name|cores
operator|.
name|register
argument_list|(
name|x
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cores
operator|.
name|register
argument_list|(
name|y
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cores not added?"
argument_list|,
literal|3
argument_list|,
name|cores
operator|.
name|getCoreNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TestHarness
operator|.
name|validateXPath
argument_list|(
name|locator
operator|.
name|xml
argument_list|,
literal|"/solr[@persistent='true']"
argument_list|,
literal|"/solr/cores[@defaultCoreName='collection1']"
argument_list|,
literal|"/solr/cores/core[@name='collection1' and @instanceDir='"
operator|+
name|instDir
operator|+
literal|"']"
argument_list|,
literal|"/solr/cores/core[@name='X' and @instanceDir='"
operator|+
name|instDir
operator|+
literal|"' and @dataDir='"
operator|+
name|dataX
operator|+
literal|"']"
argument_list|,
literal|"/solr/cores/core[@name='Y' and @instanceDir='"
operator|+
name|instY
operator|+
literal|"']"
argument_list|,
literal|"3=count(/solr/cores/core)"
argument_list|)
expr_stmt|;
comment|// Test for saving implicit properties, we should not do this.
name|TestHarness
operator|.
name|validateXPath
argument_list|(
name|locator
operator|.
name|xml
argument_list|,
literal|"/solr/cores/core[@name='X' and not(@solr.core.instanceDir) and not (@solr.core.configName)]"
argument_list|)
expr_stmt|;
comment|// delete a core, check persistence again
name|assertNotNull
argument_list|(
literal|"removing X returned null"
argument_list|,
name|cores
operator|.
name|remove
argument_list|(
literal|"X"
argument_list|)
argument_list|)
expr_stmt|;
name|TestHarness
operator|.
name|validateXPath
argument_list|(
name|locator
operator|.
name|xml
argument_list|,
literal|"/solr[@persistent='true']"
argument_list|,
literal|"/solr/cores[@defaultCoreName='collection1']"
argument_list|,
literal|"/solr/cores/core[@name='collection1' and @instanceDir='"
operator|+
name|instDir
operator|+
literal|"']"
argument_list|,
literal|"/solr/cores/core[@name='Y' and @instanceDir='"
operator|+
name|instY
operator|+
literal|"']"
argument_list|,
literal|"2=count(/solr/cores/core)"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// y is closed by the container, but
comment|// x has been removed from the container
if|if
condition|(
name|x
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|x
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|cores
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getAllNodes
specifier|private
name|String
index|[]
name|getAllNodes
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|expressions
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// XPATH and value for all elements in the indicated XML
name|DocumentBuilderFactory
name|docBuilderFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|docBuilder
init|=
name|docBuilderFactory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|docBuilder
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|Node
name|root
init|=
name|document
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|gatherNodes
argument_list|(
name|root
argument_list|,
name|expressions
argument_list|,
literal|""
argument_list|)
expr_stmt|;
return|return
name|expressions
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|expressions
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|getAllNodes
specifier|private
name|String
index|[]
name|getAllNodes
parameter_list|()
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
return|return
name|getAllNodes
argument_list|(
operator|new
name|FileInputStream
argument_list|(
operator|new
name|File
argument_list|(
name|solrHomeDirectory
argument_list|,
literal|"solr.xml"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getAllNodes
specifier|private
name|String
index|[]
name|getAllNodes
parameter_list|(
name|String
name|xmlString
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
return|return
name|getAllNodes
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|xmlString
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/*   private void assertSolrXmlFile(String... xpathExpressions) throws IOException, SAXException {     assertXmlFile(new File(solrHomeDirectory, "solr.xml"), xpathExpressions);   }   */
comment|// Note this is pretty specialized for a solr.xml file because working with the DOM is such a pain.
DECL|field|qualified
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|qualified
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
block|{
name|add
argument_list|(
literal|"core"
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"property"
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"int"
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"str"
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"long"
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"property"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|field|addText
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|addText
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
block|{
name|add
argument_list|(
literal|"int"
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"str"
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"long"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|// path is the path to parent node
DECL|method|gatherNodes
specifier|private
name|void
name|gatherNodes
parameter_list|(
name|Node
name|node
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|expressions
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|String
name|nodeName
init|=
name|node
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
name|String
name|thisPath
init|=
name|path
operator|+
literal|"/"
operator|+
name|nodeName
decl_stmt|;
comment|//Parent[@id='1']/Children/child[@name]
comment|// Add in the xpaths for verification of any attributes.
name|NamedNodeMap
name|attrs
init|=
name|node
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|String
name|qualifier
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|attrs
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Assemble the prefix for qualifying all of the attributes with the same name
if|if
condition|(
name|qualified
operator|.
name|contains
argument_list|(
name|nodeName
argument_list|)
condition|)
block|{
name|qualifier
operator|=
literal|"@name='"
operator|+
name|node
operator|.
name|getAttributes
argument_list|()
operator|.
name|getNamedItem
argument_list|(
literal|"name"
argument_list|)
operator|.
name|getTextContent
argument_list|()
operator|+
literal|"'"
expr_stmt|;
block|}
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|attrs
operator|.
name|getLength
argument_list|()
condition|;
operator|++
name|idx
control|)
block|{
name|Node
name|attr
init|=
name|attrs
operator|.
name|item
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|qualifier
argument_list|)
operator|&&
literal|"name"
operator|.
name|equals
argument_list|(
name|attr
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
comment|// Already added "name" attribute in qualifier string.
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|qualifier
argument_list|)
condition|)
block|{
comment|// Create [@name="stuff" and @attrib="value"] fragment
name|expressions
operator|.
name|add
argument_list|(
name|thisPath
operator|+
literal|"["
operator|+
name|qualifier
operator|+
literal|" and @"
operator|+
name|attr
operator|.
name|getNodeName
argument_list|()
operator|+
literal|"='"
operator|+
name|attr
operator|.
name|getTextContent
argument_list|()
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Create [@attrib="value"] fragment
name|expressions
operator|.
name|add
argument_list|(
name|thisPath
operator|+
literal|"["
operator|+
name|qualifier
operator|+
literal|" @"
operator|+
name|attr
operator|.
name|getNodeName
argument_list|()
operator|+
literal|"='"
operator|+
name|attr
operator|.
name|getTextContent
argument_list|()
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Now add the text for special nodes
comment|// a[normalize-space(text())='somesite']
if|if
condition|(
name|addText
operator|.
name|contains
argument_list|(
name|nodeName
argument_list|)
condition|)
block|{
name|expressions
operator|.
name|add
argument_list|(
name|thisPath
operator|+
literal|"["
operator|+
name|qualifier
operator|+
literal|" and text()='"
operator|+
name|node
operator|.
name|getTextContent
argument_list|()
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
comment|// Now collect all the child element nodes.
name|NodeList
name|nodeList
init|=
name|node
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeList
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|currentNode
init|=
name|nodeList
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentNode
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|qualifier
argument_list|)
condition|)
block|{
name|gatherNodes
argument_list|(
name|currentNode
argument_list|,
name|expressions
argument_list|,
name|thisPath
operator|+
literal|"["
operator|+
name|qualifier
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|gatherNodes
argument_list|(
name|currentNode
argument_list|,
name|expressions
argument_list|,
name|thisPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|field|SOLR_XML_LOTS_SYSVARS
specifier|public
specifier|static
name|String
name|SOLR_XML_LOTS_SYSVARS
init|=
literal|"<solr persistent=\"${solr.xml.persist:false}\" coreLoadThreads=\"12\" sharedLib=\"${something:.}\">\n"
operator|+
literal|"<logging class=\"${logclass:log4j.class}\" enabled=\"{logenable:true}\">\n"
operator|+
literal|"<watcher size=\"${watchSize:13}\" threshold=\"${logThresh:54}\" />\n"
operator|+
literal|"</logging>\n"
operator|+
literal|"<cores adminPath=\"/admin/cores\" defaultCoreName=\"SystemVars1\" host=\"127.0.0.1\" \n"
operator|+
literal|"       hostPort=\"${hostPort:8983}\" hostContext=\"${hostContext:solr}\" \n"
operator|+
literal|"       zkClientTimeout=\"${solr.zkclienttimeout:30000}\" \n"
operator|+
literal|"       shareSchema=\"${shareSchema:false}\" distribUpdateConnTimeout=\"${distribUpdateConnTimeout:15000}\" \n"
operator|+
literal|"       distribUpdateSoTimeout=\"${distribUpdateSoTimeout:120000}\" \n"
operator|+
literal|"       leaderVoteWait=\"${leadVoteWait:32}\" managementPath=\"${manpath:/var/lib/path}\" transientCacheSize=\"${tranSize:128}\"> \n"
operator|+
literal|"<core name=\"SystemVars1\" instanceDir=\"SystemVars1/\" shard=\"${shard:32}\" \n"
operator|+
literal|"          collection=\"${collection:collection1}\" config=\"${solrconfig:solrconfig.xml}\" \n"
operator|+
literal|"          schema=\"${schema:schema.xml}\" ulogDir=\"${ulog:./}\" roles=\"${myrole:boss}\" \n"
operator|+
literal|"          dataDir=\"${data:./}\" loadOnStartup=\"${onStart:true}\" transient=\"${tran:true}\" \n"
operator|+
literal|"          coreNodeName=\"${coreNode:utterlyridiculous}\" \n"
operator|+
literal|">\n"
operator|+
literal|"</core>\n"
operator|+
literal|"<core name=\"SystemVars2\" instanceDir=\"SystemVars2/\" shard=\"${shard:32}\" \n"
operator|+
literal|"          collection=\"${collection:collection2}\" config=\"${solrconfig:solrconfig.xml}\" \n"
operator|+
literal|"          coreNodeName=\"${coreNodeName:}\" schema=\"${schema:schema.xml}\">\n"
operator|+
literal|"<property name=\"collection\" value=\"{collection:collection2}\"/>\n"
operator|+
literal|"<property name=\"schema\" value=\"${schema:schema.xml}\"/>\n"
operator|+
literal|"<property name=\"coreNodeName\" value=\"EricksCore\"/>\n"
operator|+
literal|"</core>\n"
operator|+
literal|"<shardHandlerFactory name=\"${shhandler:shardHandlerFactory}\" class=\"${handlefac:HttpShardHandlerFactory}\">\n"
operator|+
literal|"<int name=\"socketTimeout\">${socketTimeout:120000}</int> \n"
operator|+
literal|"<int name=\"connTimeout\">${connTimeout:15000}</int> \n"
operator|+
literal|"<str name=\"arbitraryName\">${arbitrarySysValue:foobar}</str>\n"
operator|+
literal|"</shardHandlerFactory> \n"
operator|+
literal|"</cores>\n"
operator|+
literal|"</solr>"
decl_stmt|;
DECL|field|SOLR_XML_MINIMAL
specifier|private
specifier|static
name|String
name|SOLR_XML_MINIMAL
init|=
literal|"<solr>\n"
operator|+
literal|"<cores> \n"
operator|+
literal|"<core name=\"SystemVars1\" instanceDir=\"SystemVars1/\" />\n"
operator|+
literal|"</cores>\n"
operator|+
literal|"</solr>"
decl_stmt|;
block|}
end_class
end_unit
