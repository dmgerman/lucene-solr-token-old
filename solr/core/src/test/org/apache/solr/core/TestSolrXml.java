begin_unit
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|rules
operator|.
name|SystemPropertiesRestoreRule
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|RuleChain
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|internal
operator|.
name|matchers
operator|.
name|StringContains
operator|.
name|containsString
import|;
end_import
begin_class
DECL|class|TestSolrXml
specifier|public
class|class
name|TestSolrXml
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|Rule
DECL|field|solrTestRules
specifier|public
name|TestRule
name|solrTestRules
init|=
name|RuleChain
operator|.
name|outerRule
argument_list|(
operator|new
name|SystemPropertiesRestoreRule
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|expectedException
specifier|public
name|ExpectedException
name|expectedException
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
comment|// tmp dir, cleanedup automaticly.
DECL|field|solrHome
specifier|private
specifier|static
name|File
name|solrHome
init|=
literal|null
decl_stmt|;
DECL|field|loader
specifier|private
specifier|static
name|SolrResourceLoader
name|loader
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupLoader
specifier|public
specifier|static
name|void
name|setupLoader
parameter_list|()
throws|throws
name|Exception
block|{
name|solrHome
operator|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
expr_stmt|;
name|loader
operator|=
operator|new
name|SolrResourceLoader
argument_list|(
name|solrHome
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|cleanupLoader
specifier|public
specifier|static
name|void
name|cleanupLoader
parameter_list|()
throws|throws
name|Exception
block|{
name|solrHome
operator|=
literal|null
expr_stmt|;
name|loader
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|testAllInfoPresent
specifier|public
name|void
name|testAllInfoPresent
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|testSrcRoot
init|=
operator|new
name|File
argument_list|(
name|SolrTestCaseJ4
operator|.
name|TEST_HOME
argument_list|()
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|testSrcRoot
argument_list|,
literal|"solr-50-all.xml"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|solrHome
argument_list|,
literal|"solr.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|ConfigSolr
name|cfg
init|=
name|ConfigSolr
operator|.
name|fromSolrHome
argument_list|(
name|loader
argument_list|,
name|solrHome
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"core admin handler class"
argument_list|,
literal|"testAdminHandler"
argument_list|,
name|cfg
operator|.
name|getCoreAdminHandlerClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"collection handler class"
argument_list|,
literal|"testCollectionsHandler"
argument_list|,
name|cfg
operator|.
name|getCollectionsHandlerClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"info handler class"
argument_list|,
literal|"testInfoHandler"
argument_list|,
name|cfg
operator|.
name|getInfoHandlerClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"core load threads"
argument_list|,
literal|11
argument_list|,
name|cfg
operator|.
name|getCoreLoadThreadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"core root dir"
argument_list|,
name|cfg
operator|.
name|getCoreRootDirectory
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"testCoreRootDirectory"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"distrib conn timeout"
argument_list|,
literal|22
argument_list|,
name|cfg
operator|.
name|getDistributedConnectionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"distrib socket timeout"
argument_list|,
literal|33
argument_list|,
name|cfg
operator|.
name|getDistributedSocketTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max update conn"
argument_list|,
literal|3
argument_list|,
name|cfg
operator|.
name|getMaxUpdateConnections
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max update conn/host"
argument_list|,
literal|37
argument_list|,
name|cfg
operator|.
name|getMaxUpdateConnectionsPerHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"host"
argument_list|,
literal|"testHost"
argument_list|,
name|cfg
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"zk host context"
argument_list|,
literal|"testHostContext"
argument_list|,
name|cfg
operator|.
name|getZkHostContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"solr host port"
argument_list|,
literal|"44"
argument_list|,
name|cfg
operator|.
name|getSolrHostPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"leader vote wait"
argument_list|,
literal|55
argument_list|,
name|cfg
operator|.
name|getLeaderVoteWait
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"logging class"
argument_list|,
literal|"testLoggingClass"
argument_list|,
name|cfg
operator|.
name|getLogWatcherConfig
argument_list|()
operator|.
name|getLoggingClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"log watcher"
argument_list|,
literal|true
argument_list|,
name|cfg
operator|.
name|getLogWatcherConfig
argument_list|()
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"log watcher size"
argument_list|,
literal|88
argument_list|,
name|cfg
operator|.
name|getLogWatcherConfig
argument_list|()
operator|.
name|getWatcherSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"log watcher thresh"
argument_list|,
literal|"99"
argument_list|,
name|cfg
operator|.
name|getLogWatcherConfig
argument_list|()
operator|.
name|getWatcherThreshold
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"manage path"
argument_list|,
literal|"testManagementPath"
argument_list|,
name|cfg
operator|.
name|getManagementPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"shardLib"
argument_list|,
literal|"testSharedLib"
argument_list|,
name|cfg
operator|.
name|getSharedLibDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"schema cache"
argument_list|,
literal|true
argument_list|,
name|cfg
operator|.
name|hasSchemaCache
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"trans cache size"
argument_list|,
literal|66
argument_list|,
name|cfg
operator|.
name|getTransientCacheSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"zk client timeout"
argument_list|,
literal|77
argument_list|,
name|cfg
operator|.
name|getZkClientTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"zk host"
argument_list|,
literal|"testZkHost"
argument_list|,
name|cfg
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test  a few property substitutions that happen to be in solr-50-all.xml.
DECL|method|testPropertySub
specifier|public
name|void
name|testPropertySub
parameter_list|()
throws|throws
name|IOException
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"coreRootDirectory"
argument_list|,
literal|"myCoreRoot"
operator|+
name|File
operator|.
name|separator
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"hostPort"
argument_list|,
literal|"8888"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"shareSchema"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"socketTimeout"
argument_list|,
literal|"220"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"connTimeout"
argument_list|,
literal|"200"
argument_list|)
expr_stmt|;
name|File
name|testSrcRoot
init|=
operator|new
name|File
argument_list|(
name|SolrTestCaseJ4
operator|.
name|TEST_HOME
argument_list|()
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|testSrcRoot
argument_list|,
literal|"solr-50-all.xml"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|solrHome
argument_list|,
literal|"solr.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|ConfigSolr
name|cfg
init|=
name|ConfigSolr
operator|.
name|fromSolrHome
argument_list|(
name|loader
argument_list|,
name|solrHome
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cfg
operator|.
name|getCoreRootDirectory
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"myCoreRoot"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"solr host port"
argument_list|,
literal|"8888"
argument_list|,
name|cfg
operator|.
name|getSolrHostPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"schema cache"
argument_list|,
literal|false
argument_list|,
name|cfg
operator|.
name|hasSchemaCache
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testExplicitNullGivesDefaults
specifier|public
name|void
name|testExplicitNullGivesDefaults
parameter_list|()
throws|throws
name|IOException
block|{
comment|// 2 diff options, one where the default is in fact null, and one where it isn't
name|String
name|solrXml
init|=
literal|"<solr><solrcloud><null name=\"host\"/><null name=\"leaderVoteWait\"/></solrcloud></solr>"
decl_stmt|;
name|ConfigSolr
name|cfg
init|=
name|ConfigSolr
operator|.
name|fromString
argument_list|(
name|loader
argument_list|,
name|solrXml
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"host"
argument_list|,
literal|null
argument_list|,
name|cfg
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"leaderVoteWait"
argument_list|,
literal|180000
argument_list|,
name|cfg
operator|.
name|getLeaderVoteWait
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIntAsLongBad
specifier|public
name|void
name|testIntAsLongBad
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|bad
init|=
literal|""
operator|+
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|String
name|solrXml
init|=
literal|"<solr><long name=\"transientCacheSize\">"
operator|+
name|bad
operator|+
literal|"</long></solr>"
decl_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|SolrException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Value of '%s' can not be parsed as 'int'"
argument_list|,
name|bad
argument_list|)
argument_list|)
expr_stmt|;
name|ConfigSolr
name|cfg
init|=
name|ConfigSolr
operator|.
name|fromString
argument_list|(
name|loader
argument_list|,
name|solrXml
argument_list|)
decl_stmt|;
block|}
DECL|method|testIntAsLongOk
specifier|public
name|void
name|testIntAsLongOk
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|ok
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|String
name|solrXml
init|=
literal|"<solr><long name=\"transientCacheSize\">"
operator|+
name|ok
operator|+
literal|"</long></solr>"
decl_stmt|;
name|ConfigSolr
name|cfg
init|=
name|ConfigSolr
operator|.
name|fromString
argument_list|(
name|loader
argument_list|,
name|solrXml
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
name|cfg
operator|.
name|getTransientCacheSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiCloudSectionError
specifier|public
name|void
name|testMultiCloudSectionError
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|solrXml
init|=
literal|"<solr>"
operator|+
literal|"<solrcloud><bool name=\"genericCoreNodeNames\">true</bool></solrcloud>"
operator|+
literal|"<solrcloud><bool name=\"genericCoreNodeNames\">false</bool></solrcloud>"
operator|+
literal|"</solr>"
decl_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|SolrException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"2 instances of<solrcloud> found in solr.xml"
argument_list|)
expr_stmt|;
name|ConfigSolr
name|cfg
init|=
name|ConfigSolr
operator|.
name|fromString
argument_list|(
name|loader
argument_list|,
name|solrXml
argument_list|)
decl_stmt|;
block|}
DECL|method|testMultiLoggingSectionError
specifier|public
name|void
name|testMultiLoggingSectionError
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|solrXml
init|=
literal|"<solr>"
operator|+
literal|"<logging><str name=\"class\">foo</str></logging>"
operator|+
literal|"<logging><str name=\"class\">foo</str></logging>"
operator|+
literal|"</solr>"
decl_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|SolrException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"2 instances of<logging> found in solr.xml"
argument_list|)
expr_stmt|;
name|ConfigSolr
name|cfg
init|=
name|ConfigSolr
operator|.
name|fromString
argument_list|(
name|loader
argument_list|,
name|solrXml
argument_list|)
decl_stmt|;
block|}
DECL|method|testMultiLoggingWatcherSectionError
specifier|public
name|void
name|testMultiLoggingWatcherSectionError
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|solrXml
init|=
literal|"<solr><logging>"
operator|+
literal|"<watcher><int name=\"threshold\">42</int></watcher>"
operator|+
literal|"<watcher><int name=\"threshold\">42</int></watcher>"
operator|+
literal|"<watcher><int name=\"threshold\">42</int></watcher>"
operator|+
literal|"</logging></solr>"
decl_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|SolrException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"3 instances of Logging<watcher> found in solr.xml"
argument_list|)
expr_stmt|;
name|ConfigSolr
name|cfg
init|=
name|ConfigSolr
operator|.
name|fromString
argument_list|(
name|loader
argument_list|,
name|solrXml
argument_list|)
decl_stmt|;
block|}
DECL|method|testValidStringValueWhenBoolTypeIsExpected
specifier|public
name|void
name|testValidStringValueWhenBoolTypeIsExpected
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|genericCoreNodeNames
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|String
name|solrXml
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"<solr><solrcloud><str name=\"genericCoreNodeNames\">%s</str></solrcloud></solr>"
argument_list|,
name|genericCoreNodeNames
argument_list|)
decl_stmt|;
name|ConfigSolr
name|configSolr
init|=
name|ConfigSolr
operator|.
name|fromString
argument_list|(
name|loader
argument_list|,
name|solrXml
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"gen core node names"
argument_list|,
name|genericCoreNodeNames
argument_list|,
name|configSolr
operator|.
name|getGenericCoreNodeNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testValidStringValueWhenIntTypeIsExpected
specifier|public
name|void
name|testValidStringValueWhenIntTypeIsExpected
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|maxUpdateConnections
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|String
name|solrXml
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"<solr><solrcloud><str name=\"maxUpdateConnections\">%d</str></solrcloud></solr>"
argument_list|,
name|maxUpdateConnections
argument_list|)
decl_stmt|;
name|ConfigSolr
name|configSolr
init|=
name|ConfigSolr
operator|.
name|fromString
argument_list|(
name|loader
argument_list|,
name|solrXml
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"max update conn"
argument_list|,
name|maxUpdateConnections
argument_list|,
name|configSolr
operator|.
name|getMaxUpdateConnections
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailAtConfigParseTimeWhenIntTypeIsExpectedAndLongTypeIsGiven
specifier|public
name|void
name|testFailAtConfigParseTimeWhenIntTypeIsExpectedAndLongTypeIsGiven
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|val
init|=
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|String
name|solrXml
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"<solr><solrcloud><long name=\"maxUpdateConnections\">%d</long></solrcloud></solr>"
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|SolrException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Value of '%d' can not be parsed as 'int'"
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|ConfigSolr
name|configSolr
init|=
name|ConfigSolr
operator|.
name|fromString
argument_list|(
name|loader
argument_list|,
name|solrXml
argument_list|)
decl_stmt|;
block|}
DECL|method|testFailAtConfigParseTimeWhenBoolTypeIsExpectedAndLongTypeIsGiven
specifier|public
name|void
name|testFailAtConfigParseTimeWhenBoolTypeIsExpectedAndLongTypeIsGiven
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|val
init|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|String
name|solrXml
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"<solr><solrcloud><long name=\"genericCoreNodeNames\">%d</long></solrcloud></solr>"
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|SolrException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Value of '%d' can not be parsed as 'bool'"
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|ConfigSolr
name|configSolr
init|=
name|ConfigSolr
operator|.
name|fromString
argument_list|(
name|loader
argument_list|,
name|solrXml
argument_list|)
decl_stmt|;
block|}
DECL|method|testFailAtConfigParseTimeWhenBoolTypeIsExpectedAndDoubleTypeIsGiven
specifier|public
name|void
name|testFailAtConfigParseTimeWhenBoolTypeIsExpectedAndDoubleTypeIsGiven
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|val
init|=
literal|""
operator|+
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|String
name|solrXml
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"<solr><solrcloud><double name=\"genericCoreNodeNames\">%s</double></solrcloud></solr>"
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|SolrException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Value of '%s' can not be parsed as 'bool'"
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|ConfigSolr
name|configSolr
init|=
name|ConfigSolr
operator|.
name|fromString
argument_list|(
name|loader
argument_list|,
name|solrXml
argument_list|)
decl_stmt|;
block|}
DECL|method|testFailAtConfigParseTimeWhenBoolTypeIsExpectedAndValueIsInvalidString
specifier|public
name|void
name|testFailAtConfigParseTimeWhenBoolTypeIsExpectedAndValueIsInvalidString
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|solrXml
init|=
literal|"<solr><solrcloud><bool name=\"genericCoreNodeNames\">NOT_A_BOOLEAN</bool></solrcloud></solr>"
decl_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|SolrException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"invalid boolean value: NOT_A_BOOLEAN"
argument_list|)
expr_stmt|;
name|ConfigSolr
name|configSolr
init|=
name|ConfigSolr
operator|.
name|fromString
argument_list|(
name|loader
argument_list|,
name|solrXml
argument_list|)
decl_stmt|;
block|}
DECL|method|testFailAtConfigParseTimeWhenIntTypeIsExpectedAndBoolTypeIsGiven
specifier|public
name|void
name|testFailAtConfigParseTimeWhenIntTypeIsExpectedAndBoolTypeIsGiven
parameter_list|()
throws|throws
name|IOException
block|{
comment|// given:
name|boolean
name|randomBoolean
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|String
name|solrXml
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"<solr><logging><int name=\"unknown-option\">%s</int></logging></solr>"
argument_list|,
name|randomBoolean
argument_list|)
decl_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|SolrException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Value of 'unknown-option' can not be parsed as 'int': \"%s\""
argument_list|,
name|randomBoolean
argument_list|)
argument_list|)
expr_stmt|;
name|ConfigSolr
name|configSolr
init|=
name|ConfigSolr
operator|.
name|fromString
argument_list|(
name|loader
argument_list|,
name|solrXml
argument_list|)
decl_stmt|;
block|}
DECL|method|testFailAtConfigParseTimeWhenUnrecognizedSolrCloudOptionWasFound
specifier|public
name|void
name|testFailAtConfigParseTimeWhenUnrecognizedSolrCloudOptionWasFound
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|solrXml
init|=
literal|"<solr><solrcloud><bool name=\"unknown-option\">true</bool></solrcloud></solr>"
decl_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|SolrException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"<solrcloud> section of solr.xml contains 1 unknown config parameter(s): [unknown-option]"
argument_list|)
expr_stmt|;
name|ConfigSolr
name|configSolr
init|=
name|ConfigSolr
operator|.
name|fromString
argument_list|(
name|loader
argument_list|,
name|solrXml
argument_list|)
decl_stmt|;
block|}
DECL|method|testFailAtConfigParseTimeWhenUnrecognizedSolrOptionWasFound
specifier|public
name|void
name|testFailAtConfigParseTimeWhenUnrecognizedSolrOptionWasFound
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|solrXml
init|=
literal|"<solr><bool name=\"unknown-bool-option\">true</bool><str name=\"unknown-str-option\">true</str></solr>"
decl_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|SolrException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"Main section of solr.xml contains 2 unknown config parameter(s): [unknown-bool-option, unknown-str-option]"
argument_list|)
expr_stmt|;
name|ConfigSolr
name|configSolr
init|=
name|ConfigSolr
operator|.
name|fromString
argument_list|(
name|loader
argument_list|,
name|solrXml
argument_list|)
decl_stmt|;
block|}
DECL|method|testFailAtConfigParseTimeWhenUnrecognizedLoggingOptionWasFound
specifier|public
name|void
name|testFailAtConfigParseTimeWhenUnrecognizedLoggingOptionWasFound
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|solrXml
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"<solr><logging><bool name=\"unknown-option\">%s</bool></logging></solr>"
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|SolrException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"<logging> section of solr.xml contains 1 unknown config parameter(s): [unknown-option]"
argument_list|)
expr_stmt|;
name|ConfigSolr
name|configSolr
init|=
name|ConfigSolr
operator|.
name|fromString
argument_list|(
name|loader
argument_list|,
name|solrXml
argument_list|)
decl_stmt|;
block|}
DECL|method|testFailAtConfigParseTimeWhenLoggingConfigParamsAreDuplicated
specifier|public
name|void
name|testFailAtConfigParseTimeWhenLoggingConfigParamsAreDuplicated
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|v1
init|=
literal|""
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|String
name|v2
init|=
literal|""
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|String
name|solrXml
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"<solr><logging>"
operator|+
literal|"<str name=\"class\">%s</str>"
operator|+
literal|"<str name=\"class\">%s</str>"
operator|+
literal|"</logging></solr>"
argument_list|,
name|v1
argument_list|,
name|v2
argument_list|)
decl_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|SolrException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"<logging> section of solr.xml contains duplicated 'class' in solr.xml: [%s, %s]"
argument_list|,
name|v1
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|ConfigSolr
name|configSolr
init|=
name|ConfigSolr
operator|.
name|fromString
argument_list|(
name|loader
argument_list|,
name|solrXml
argument_list|)
decl_stmt|;
block|}
DECL|method|testFailAtConfigParseTimeWhenSolrCloudConfigParamsAreDuplicated
specifier|public
name|void
name|testFailAtConfigParseTimeWhenSolrCloudConfigParamsAreDuplicated
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|v1
init|=
literal|""
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|String
name|v2
init|=
literal|""
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|String
name|v3
init|=
literal|""
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|String
name|solrXml
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"<solr><solrcloud>"
operator|+
literal|"<int name=\"zkClientTimeout\">%s</int>"
operator|+
literal|"<int name=\"zkClientTimeout\">%s</int>"
operator|+
literal|"<str name=\"zkHost\">foo</str>"
operator|+
comment|// other ok val in middle
literal|"<int name=\"zkClientTimeout\">%s</int>"
operator|+
literal|"</solrcloud></solr>"
argument_list|,
name|v1
argument_list|,
name|v2
argument_list|,
name|v3
argument_list|)
decl_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|SolrException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"<solrcloud> section of solr.xml contains duplicated 'zkClientTimeout' in solr.xml: [%s, %s, %s]"
argument_list|,
name|v1
argument_list|,
name|v2
argument_list|,
name|v3
argument_list|)
argument_list|)
expr_stmt|;
name|ConfigSolr
name|configSolr
init|=
name|ConfigSolr
operator|.
name|fromString
argument_list|(
name|loader
argument_list|,
name|solrXml
argument_list|)
decl_stmt|;
block|}
DECL|method|testFailAtConfigParseTimeWhenSolrConfigParamsAreDuplicated
specifier|public
name|void
name|testFailAtConfigParseTimeWhenSolrConfigParamsAreDuplicated
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|v1
init|=
literal|""
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|String
name|v2
init|=
literal|""
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|String
name|solrXml
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"<solr>"
operator|+
literal|"<int name=\"coreLoadThreads\">%s</int>"
operator|+
literal|"<str name=\"coreLoadThreads\">%s</str>"
operator|+
literal|"</solr>"
argument_list|,
name|v1
argument_list|,
name|v2
argument_list|)
decl_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|SolrException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Main section of solr.xml contains duplicated 'coreLoadThreads' in solr.xml: [%s, %s]"
argument_list|,
name|v1
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|ConfigSolr
name|configSolr
init|=
name|ConfigSolr
operator|.
name|fromString
argument_list|(
name|loader
argument_list|,
name|solrXml
argument_list|)
decl_stmt|;
block|}
block|}
end_class
end_unit
