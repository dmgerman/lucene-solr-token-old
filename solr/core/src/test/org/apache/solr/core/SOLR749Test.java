begin_unit
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|QParserPlugin
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|FooQParserPlugin
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|ValueSourceParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_comment
comment|/**  * Test for https://issues.apache.org/jira/browse/SOLR-749  *  **/
end_comment
begin_class
DECL|class|SOLR749Test
specifier|public
class|class
name|SOLR749Test
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-SOLR-749.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
block|}
DECL|method|testConstruction
specifier|public
name|void
name|testConstruction
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"core is null and it shouldn't be"
argument_list|,
name|core
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|QParserPlugin
name|parserPlugin
init|=
name|core
operator|.
name|getQueryPlugin
argument_list|(
name|QParserPlugin
operator|.
name|DEFAULT_QTYPE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"parserPlugin is null and it shouldn't be"
argument_list|,
name|parserPlugin
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"parserPlugin is not an instanceof "
operator|+
name|FooQParserPlugin
operator|.
name|class
argument_list|,
name|parserPlugin
operator|instanceof
name|FooQParserPlugin
argument_list|)
expr_stmt|;
name|ValueSourceParser
name|vsp
init|=
name|core
operator|.
name|getValueSourceParser
argument_list|(
literal|"boost"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"vsp is null and it shouldn't be"
argument_list|,
name|vsp
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"vsp is not an instanceof "
operator|+
name|DummyValueSourceParser
operator|.
name|class
argument_list|,
name|vsp
operator|instanceof
name|DummyValueSourceParser
argument_list|)
expr_stmt|;
block|}
DECL|method|testHowManyDocsHaveBoostFunctionComputed
specifier|public
name|void
name|testHowManyDocsHaveBoostFunctionComputed
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// NOTE: we can't rely on the default lucene syntax because "FooQParser" is registered as "lucene"
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!notfoo}*:*"
argument_list|)
argument_list|,
literal|"//result[@numFound=100]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!notfoo}id:[* TO 49]"
argument_list|)
argument_list|,
literal|"//result[@numFound=50]"
argument_list|)
expr_stmt|;
try|try
block|{
name|assertQ
argument_list|(
literal|"query wrapped in boost func should only eval func for query matches"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!boost b=$boostFunc defType=notfoo}id:[* TO 49]"
argument_list|,
literal|"boostFunc"
argument_list|,
literal|"countUsage('boost_func',3.4)"
argument_list|)
argument_list|,
literal|"//result[@numFound=50]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|50
argument_list|,
name|CountUsageValueSourceParser
operator|.
name|getAndClearCount
argument_list|(
literal|"boost_func"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"func query that is filtered should be evaled only for filtered docs"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!func}product(id,countUsage('func_q',4.5))"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!notfoo}id:[30 TO 59]"
argument_list|)
argument_list|,
literal|"//result[@numFound=30]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|CountUsageValueSourceParser
operator|.
name|getAndClearCount
argument_list|(
literal|"func_q"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"func query that wraps a query which is also used as a should be evaled only for filtered docs"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!func}product(query($qq),countUsage('func_q_wrapping_fq',4.5))"
argument_list|,
literal|"qq"
argument_list|,
literal|"{!notfoo}id:[20 TO 39]"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!query v=$qq}"
argument_list|)
argument_list|,
literal|"//result[@numFound=20]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|CountUsageValueSourceParser
operator|.
name|getAndClearCount
argument_list|(
literal|"func_q_wrapping_fq"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"frange in complex bq w/ other mandatory clauses to check skipping"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!notfoo}(+id:[20 TO 39] -id:25 +{!frange l=4.5 u=4.5 v='countUsage(frange_in_bq,4.5)'})"
argument_list|)
argument_list|,
literal|"//result[@numFound=19]"
argument_list|)
expr_stmt|;
comment|// don't assume specific clause evaluation ordering.
comment|// ideally this is 19, but could be as high as 20 depending on wether frange's
comment|// scorer has next() called on it before other clauses skipTo
name|int
name|count
init|=
name|CountUsageValueSourceParser
operator|.
name|getAndClearCount
argument_list|(
literal|"frange_in_bq"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"frange_in_bq: "
operator|+
name|count
argument_list|,
operator|(
literal|19
operator|<=
name|count
operator|&&
name|count
operator|<=
literal|20
operator|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|CountUsageValueSourceParser
operator|.
name|clearCounters
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
