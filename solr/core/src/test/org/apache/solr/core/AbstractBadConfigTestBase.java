begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|script
operator|.
name|ScriptEngineManager
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import
begin_class
DECL|class|AbstractBadConfigTestBase
specifier|public
specifier|abstract
class|class
name|AbstractBadConfigTestBase
extends|extends
name|SolrTestCaseJ4
block|{
comment|/**    * Given a solrconfig.xml file name, a schema file name, and an     * expected errString, asserts that initializing a core with these     * files causes an error matching the specified errString ot be thrown.    */
DECL|method|assertConfigs
specifier|protected
specifier|final
name|void
name|assertConfigs
parameter_list|(
specifier|final
name|String
name|solrconfigFile
parameter_list|,
specifier|final
name|String
name|schemaFile
parameter_list|,
specifier|final
name|String
name|errString
parameter_list|)
throws|throws
name|Exception
block|{
name|ignoreException
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|errString
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|initCore
argument_list|(
name|solrconfigFile
argument_list|,
name|schemaFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// short circuit out if we found what we expected
if|if
condition|(
operator|-
literal|1
operator|!=
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
name|errString
argument_list|)
condition|)
return|return;
comment|// Test the cause too in case the expected error is wrapped by the TestHarness
comment|// (NOTE: we don't go all the way down. Either errString should be changed,
comment|// or some error wrapping should use a better message or both)
if|if
condition|(
literal|null
operator|!=
name|e
operator|.
name|getCause
argument_list|()
operator|&&
literal|null
operator|!=
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|&&
operator|-
literal|1
operator|!=
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
name|errString
argument_list|)
condition|)
return|return;
comment|// otherwise, rethrow it, possibly completley unrelated
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unexpected error, expected error matching: "
operator|+
name|errString
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|deleteCore
argument_list|()
expr_stmt|;
name|resetExceptionIgnores
argument_list|()
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"Did not encounter any exception from: "
operator|+
name|solrconfigFile
operator|+
literal|" using "
operator|+
name|schemaFile
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
