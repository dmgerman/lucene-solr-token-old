begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr
package|package
name|org
operator|.
name|apache
operator|.
name|solr
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|ChaosMonkey
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ShardParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_comment
comment|/**  * TODO? perhaps use:  *  http://docs.codehaus.org/display/JETTY/ServletTester  * rather then open a real connection?  *  *  * @since solr 1.3  */
end_comment
begin_class
DECL|class|TestDistributedSearch
specifier|public
class|class
name|TestDistributedSearch
extends|extends
name|BaseDistributedSearchTestCase
block|{
DECL|field|t1
name|String
name|t1
init|=
literal|"a_t"
decl_stmt|;
DECL|field|i1
name|String
name|i1
init|=
literal|"a_si"
decl_stmt|;
DECL|field|nint
name|String
name|nint
init|=
literal|"n_i"
decl_stmt|;
DECL|field|tint
name|String
name|tint
init|=
literal|"n_ti"
decl_stmt|;
DECL|field|nfloat
name|String
name|nfloat
init|=
literal|"n_f"
decl_stmt|;
DECL|field|tfloat
name|String
name|tfloat
init|=
literal|"n_tf"
decl_stmt|;
DECL|field|ndouble
name|String
name|ndouble
init|=
literal|"n_d"
decl_stmt|;
DECL|field|tdouble
name|String
name|tdouble
init|=
literal|"n_td"
decl_stmt|;
DECL|field|nlong
name|String
name|nlong
init|=
literal|"n_l"
decl_stmt|;
DECL|field|tlong
name|String
name|tlong
init|=
literal|"other_tl1"
decl_stmt|;
DECL|field|ndate
name|String
name|ndate
init|=
literal|"n_dt"
decl_stmt|;
DECL|field|tdate_a
name|String
name|tdate_a
init|=
literal|"a_n_tdt"
decl_stmt|;
DECL|field|tdate_b
name|String
name|tdate_b
init|=
literal|"b_n_tdt"
decl_stmt|;
DECL|field|oddField
name|String
name|oddField
init|=
literal|"oddField_s"
decl_stmt|;
DECL|field|missingField
name|String
name|missingField
init|=
literal|"ignore_exception__missing_but_valid_field_t"
decl_stmt|;
DECL|field|invalidField
name|String
name|invalidField
init|=
literal|"ignore_exception__invalid_field_not_in_schema"
decl_stmt|;
annotation|@
name|Override
DECL|method|doTest
specifier|public
name|void
name|doTest
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|backupStress
init|=
name|stress
decl_stmt|;
comment|// make a copy so we can restore
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|1
argument_list|,
name|i1
argument_list|,
literal|100
argument_list|,
name|tlong
argument_list|,
literal|100
argument_list|,
name|t1
argument_list|,
literal|"now is the time for all good men"
argument_list|,
name|tdate_a
argument_list|,
literal|"2010-04-20T11:00:00Z"
argument_list|,
name|tdate_b
argument_list|,
literal|"2009-08-20T11:00:00Z"
argument_list|,
literal|"foo_f"
argument_list|,
literal|1.414f
argument_list|,
literal|"foo_b"
argument_list|,
literal|"true"
argument_list|,
literal|"foo_d"
argument_list|,
literal|1.414d
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|2
argument_list|,
name|i1
argument_list|,
literal|50
argument_list|,
name|tlong
argument_list|,
literal|50
argument_list|,
name|t1
argument_list|,
literal|"to come to the aid of their country."
argument_list|,
name|tdate_a
argument_list|,
literal|"2010-05-02T11:00:00Z"
argument_list|,
name|tdate_b
argument_list|,
literal|"2009-11-02T11:00:00Z"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|3
argument_list|,
name|i1
argument_list|,
literal|2
argument_list|,
name|tlong
argument_list|,
literal|2
argument_list|,
name|t1
argument_list|,
literal|"how now brown cow"
argument_list|,
name|tdate_a
argument_list|,
literal|"2010-05-03T11:00:00Z"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|4
argument_list|,
name|i1
argument_list|,
operator|-
literal|100
argument_list|,
name|tlong
argument_list|,
literal|101
argument_list|,
name|t1
argument_list|,
literal|"the quick fox jumped over the lazy dog"
argument_list|,
name|tdate_a
argument_list|,
literal|"2010-05-03T11:00:00Z"
argument_list|,
name|tdate_b
argument_list|,
literal|"2010-05-03T11:00:00Z"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|5
argument_list|,
name|i1
argument_list|,
literal|500
argument_list|,
name|tlong
argument_list|,
literal|500
argument_list|,
name|t1
argument_list|,
literal|"the quick fox jumped way over the lazy dog"
argument_list|,
name|tdate_a
argument_list|,
literal|"2010-05-05T11:00:00Z"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|6
argument_list|,
name|i1
argument_list|,
operator|-
literal|600
argument_list|,
name|tlong
argument_list|,
literal|600
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy sat on a wall"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|7
argument_list|,
name|i1
argument_list|,
literal|123
argument_list|,
name|tlong
argument_list|,
literal|123
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy had a great fall"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|8
argument_list|,
name|i1
argument_list|,
literal|876
argument_list|,
name|tlong
argument_list|,
literal|876
argument_list|,
name|tdate_b
argument_list|,
literal|"2010-01-05T11:00:00Z"
argument_list|,
name|t1
argument_list|,
literal|"all the kings horses and all the kings men"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|9
argument_list|,
name|i1
argument_list|,
literal|7
argument_list|,
name|tlong
argument_list|,
literal|7
argument_list|,
name|t1
argument_list|,
literal|"couldn't put humpty together again"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|10
argument_list|,
name|i1
argument_list|,
literal|4321
argument_list|,
name|tlong
argument_list|,
literal|4321
argument_list|,
name|t1
argument_list|,
literal|"this too shall pass"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|11
argument_list|,
name|i1
argument_list|,
operator|-
literal|987
argument_list|,
name|tlong
argument_list|,
literal|987
argument_list|,
name|t1
argument_list|,
literal|"An eye for eye only ends up making the whole world blind."
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|12
argument_list|,
name|i1
argument_list|,
literal|379
argument_list|,
name|tlong
argument_list|,
literal|379
argument_list|,
name|t1
argument_list|,
literal|"Great works are performed, not by strength, but by perseverance."
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|13
argument_list|,
name|i1
argument_list|,
literal|232
argument_list|,
name|tlong
argument_list|,
literal|232
argument_list|,
name|t1
argument_list|,
literal|"no eggs on wall, lesson learned"
argument_list|,
name|oddField
argument_list|,
literal|"odd man out"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|14
argument_list|,
literal|"SubjectTerms_mfacet"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mathematical models"
block|,
literal|"mathematical analysis"
block|}
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|15
argument_list|,
literal|"SubjectTerms_mfacet"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"test 1"
block|,
literal|"test 2"
block|,
literal|"test3"
block|}
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|16
argument_list|,
literal|"SubjectTerms_mfacet"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"test 1"
block|,
literal|"test 2"
block|,
literal|"test3"
block|}
argument_list|)
expr_stmt|;
name|String
index|[]
name|vals
init|=
operator|new
name|String
index|[
literal|100
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|vals
index|[
name|i
index|]
operator|=
literal|"test "
operator|+
name|i
expr_stmt|;
block|}
name|indexr
argument_list|(
name|id
argument_list|,
literal|17
argument_list|,
literal|"SubjectTerms_mfacet"
argument_list|,
name|vals
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|100
init|;
name|i
operator|<
literal|150
condition|;
name|i
operator|++
control|)
block|{
name|indexr
argument_list|(
name|id
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|commit
argument_list|()
expr_stmt|;
name|handle
operator|.
name|clear
argument_list|()
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"QTime"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"timestamp"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
comment|// random value sort
for|for
control|(
name|String
name|f
range|:
name|fieldNames
control|)
block|{
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|f
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|f
operator|+
literal|" asc"
argument_list|)
expr_stmt|;
block|}
comment|// these queries should be exactly ordered and scores should exactly match
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"{!func}testfunc(add("
operator|+
name|i1
operator|+
literal|",5))"
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"n_tl1 asc"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"n_tl1 desc"
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"maxScore"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|i1
argument_list|)
expr_stmt|;
comment|// does not expect maxScore. So if it comes ,ignore it. JavaBinCodec.writeSolrDocumentList()
comment|//is agnostic of request params.
name|handle
operator|.
name|remove
argument_list|(
literal|"maxScore"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|i1
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
comment|// even scores should match exactly here
name|handle
operator|.
name|put
argument_list|(
literal|"highlighting"
argument_list|,
name|UNORDERED
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"response"
argument_list|,
name|UNORDERED
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"maxScore"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"quick"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"foofoofoo"
argument_list|,
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
comment|// no fields in returned docs
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"start"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"score"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"quick"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"start"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"start"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"now their fox sat had put"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"now their fox sat had put"
argument_list|,
literal|"fl"
argument_list|,
literal|"foofoofoo"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"matchesnothing"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
comment|// test that a single NOW value is propagated to all shards... if that is true
comment|// then the primary sort should always be a tie and then the secondary should always decide
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"{!func}ms(NOW)"
argument_list|,
literal|"sort"
argument_list|,
literal|"score desc,"
operator|+
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"quick"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// simple date facet on one field
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.date"
argument_list|,
name|tdate_a
argument_list|,
literal|"facet.date.other"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.date.start"
argument_list|,
literal|"2010-05-01T11:00:00Z"
argument_list|,
literal|"facet.date.gap"
argument_list|,
literal|"+1DAY"
argument_list|,
literal|"facet.date.end"
argument_list|,
literal|"2010-05-20T11:00:00Z"
argument_list|)
expr_stmt|;
comment|// date facet on multiple fields
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.date"
argument_list|,
name|tdate_a
argument_list|,
literal|"facet.date"
argument_list|,
name|tdate_b
argument_list|,
literal|"facet.date.other"
argument_list|,
literal|"all"
argument_list|,
literal|"f."
operator|+
name|tdate_b
operator|+
literal|".facet.date.start"
argument_list|,
literal|"2009-05-01T11:00:00Z"
argument_list|,
literal|"f."
operator|+
name|tdate_b
operator|+
literal|".facet.date.gap"
argument_list|,
literal|"+3MONTHS"
argument_list|,
literal|"facet.date.start"
argument_list|,
literal|"2010-05-01T11:00:00Z"
argument_list|,
literal|"facet.date.gap"
argument_list|,
literal|"+1DAY"
argument_list|,
literal|"facet.date.end"
argument_list|,
literal|"2010-05-20T11:00:00Z"
argument_list|)
expr_stmt|;
comment|// simple range facet on one field
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|tlong
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|200
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|100
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|900
argument_list|)
expr_stmt|;
comment|// range facet on multiple fields
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|tlong
argument_list|,
literal|"facet.range"
argument_list|,
name|i1
argument_list|,
literal|"f."
operator|+
name|i1
operator|+
literal|".facet.range.start"
argument_list|,
literal|300
argument_list|,
literal|"f."
operator|+
name|i1
operator|+
literal|".facet.range.gap"
argument_list|,
literal|87
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|900
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|200
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|100
argument_list|,
literal|"f."
operator|+
name|tlong
operator|+
literal|".facet.range.end"
argument_list|,
literal|900
argument_list|)
expr_stmt|;
comment|//  variations of fl
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"score"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
name|i1
operator|+
literal|",score"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
name|i1
argument_list|,
literal|"fl"
argument_list|,
literal|"score"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"fl"
argument_list|,
name|i1
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
name|i1
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"fl"
argument_list|,
name|nint
argument_list|,
literal|"fl"
argument_list|,
name|tint
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
name|nint
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"fl"
argument_list|,
name|tint
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|stress
operator|=
literal|0
expr_stmt|;
comment|// turn off stress... we want to tex max combos in min time
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|25
operator|*
name|RANDOM_MULTIPLIER
condition|;
name|i
operator|++
control|)
block|{
name|String
name|f
init|=
name|fieldNames
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|fieldNames
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
name|f
operator|=
name|t1
expr_stmt|;
comment|// the text field is a really interesting one to facet on (and it's multi-valued too)
comment|// we want a random query and not just *:* so we'll get zero counts in facets also
comment|// TODO: do a better random query
name|String
name|q
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"*:*"
else|:
literal|"id:(1 3 5 7 9 11 13) OR id:[100 TO "
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
operator|+
literal|"]"
decl_stmt|;
name|int
name|nolimit
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|10000
decl_stmt|;
comment|// these should be equivalent
comment|// if limit==-1, we should always get exact matches
name|query
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.limit"
argument_list|,
name|nolimit
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.mincount"
argument_list|,
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|"facet.offset"
argument_list|,
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.limit"
argument_list|,
name|nolimit
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|,
literal|"facet.mincount"
argument_list|,
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|"facet.offset"
argument_list|,
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
comment|// for index sort, we should get exact results for mincount<= 1
name|query
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|,
literal|"facet.mincount"
argument_list|,
name|random
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"facet.offset"
argument_list|,
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|,
literal|"facet.limit"
argument_list|,
name|random
operator|.
name|nextInt
argument_list|(
literal|11
argument_list|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|stress
operator|=
name|backupStress
expr_stmt|;
comment|// restore stress
comment|// test faceting multiple things at once
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"quick"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
comment|// test filter tagging, facet exclusion, and naming (multi-select facet support)
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"{!key=myquick}quick"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"{!key=myall ex=a}all"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=mykey ex=a}"
operator|+
name|t1
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=other ex=b}"
operator|+
name|t1
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=again ex=a,b}"
operator|+
name|t1
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=a}id:[1 TO 7]"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=b}id:[3 TO 9]"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!ex=t1}SubjectTerms_mfacet"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=t1}SubjectTerms_mfacet:(test 1)"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// test field that is valid in schema but missing in all shards
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|missingField
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// test field that is valid in schema and missing in some shards
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|oddField
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
name|i1
argument_list|)
expr_stmt|;
comment|/*** TODO: the failure may come back in "exception"     try {       // test error produced for field that is invalid for schema       query("q","*:*", "rows",100, "facet","true", "facet.field",invalidField, "facet.mincount",2);       TestCase.fail("SolrServerException expected for invalid field that is not in schema");     } catch (SolrServerException ex) {       // expected     }     ***/
comment|// Try to get better coverage for refinement queries by turning off over requesting.
comment|// This makes it much more likely that we may not get the top facet values and hence
comment|// we turn of that checking.
name|handle
operator|.
name|put
argument_list|(
literal|"facet_fields"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
literal|5
argument_list|,
literal|"facet.shard.limit"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// check a complex key name
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key='$a b/c \\' \\} foo'}"
operator|+
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
literal|5
argument_list|,
literal|"facet.shard.limit"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key='$a'}"
operator|+
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
literal|5
argument_list|,
literal|"facet.shard.limit"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|handle
operator|.
name|remove
argument_list|(
literal|"facet_fields"
argument_list|)
expr_stmt|;
comment|// index the same document to two servers and make sure things
comment|// don't blow up.
if|if
condition|(
name|clients
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
block|{
name|index
argument_list|(
name|id
argument_list|,
literal|100
argument_list|,
name|i1
argument_list|,
literal|107
argument_list|,
name|t1
argument_list|,
literal|"oh no, a duplicate!"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clients
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|index_specific
argument_list|(
name|i
argument_list|,
name|id
argument_list|,
literal|100
argument_list|,
name|i1
argument_list|,
literal|107
argument_list|,
name|t1
argument_list|,
literal|"oh no, a duplicate!"
argument_list|)
expr_stmt|;
block|}
name|commit
argument_list|()
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"duplicate"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"fox duplicate horses"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
comment|//SOLR 3161 ensure shards.qt=/update fails (anything but search handler really)
comment|// Also see TestRemoteStreaming#testQtUpdateFails()
try|try
block|{
name|ignoreException
argument_list|(
literal|"isShard is only acceptable"
argument_list|)
expr_stmt|;
comment|// query("q","*:*","shards.qt","/update","stream.body","<delete><query>*:*</query></delete>");
comment|// fail();
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
comment|//expected
block|}
name|unIgnoreException
argument_list|(
literal|"isShard is only acceptable"
argument_list|)
expr_stmt|;
comment|// test debugging
name|handle
operator|.
name|put
argument_list|(
literal|"explain"
argument_list|,
name|UNORDERED
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"debug"
argument_list|,
name|UNORDERED
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"time"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"now their fox sat had put"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
name|CommonParams
operator|.
name|DEBUG_QUERY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"id:[1 TO 5]"
argument_list|,
name|CommonParams
operator|.
name|DEBUG_QUERY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"id:[1 TO 5]"
argument_list|,
name|CommonParams
operator|.
name|DEBUG
argument_list|,
name|CommonParams
operator|.
name|TIMING
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"id:[1 TO 5]"
argument_list|,
name|CommonParams
operator|.
name|DEBUG
argument_list|,
name|CommonParams
operator|.
name|RESULTS
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"id:[1 TO 5]"
argument_list|,
name|CommonParams
operator|.
name|DEBUG
argument_list|,
name|CommonParams
operator|.
name|QUERY
argument_list|)
expr_stmt|;
comment|// Check Info is added to for each shard
name|ModifiableSolrParams
name|q
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|q
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|q
operator|.
name|set
argument_list|(
name|ShardParams
operator|.
name|SHARDS_INFO
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setDistributedParams
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|queryServer
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|?
argument_list|>
name|sinfo
init|=
operator|(
name|NamedList
argument_list|<
name|?
argument_list|>
operator|)
name|rsp
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
name|ShardParams
operator|.
name|SHARDS_INFO
argument_list|)
decl_stmt|;
name|String
name|shards
init|=
name|getShardsString
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
name|StringUtils
operator|.
name|countMatches
argument_list|(
name|shards
argument_list|,
literal|","
argument_list|)
operator|+
literal|1
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"missing shard info"
argument_list|,
name|sinfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"should have an entry for each shard ["
operator|+
name|sinfo
operator|+
literal|"] "
operator|+
name|shards
argument_list|,
name|cnt
argument_list|,
name|sinfo
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// test shards.tolerant=true
for|for
control|(
name|int
name|numDownServers
init|=
literal|0
init|;
name|numDownServers
operator|<
name|jettys
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|numDownServers
operator|++
control|)
block|{
name|List
argument_list|<
name|JettySolrRunner
argument_list|>
name|upJettys
init|=
operator|new
name|ArrayList
argument_list|<
name|JettySolrRunner
argument_list|>
argument_list|(
name|jettys
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SolrServer
argument_list|>
name|upClients
init|=
operator|new
name|ArrayList
argument_list|<
name|SolrServer
argument_list|>
argument_list|(
name|clients
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|JettySolrRunner
argument_list|>
name|downJettys
init|=
operator|new
name|ArrayList
argument_list|<
name|JettySolrRunner
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|upShards
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|shardsArr
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDownServers
condition|;
name|i
operator|++
control|)
block|{
comment|// shut down some of the jettys
name|int
name|indexToRemove
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|upJettys
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|JettySolrRunner
name|downJetty
init|=
name|upJettys
operator|.
name|remove
argument_list|(
name|indexToRemove
argument_list|)
decl_stmt|;
name|upClients
operator|.
name|remove
argument_list|(
name|indexToRemove
argument_list|)
expr_stmt|;
name|upShards
operator|.
name|remove
argument_list|(
name|indexToRemove
argument_list|)
expr_stmt|;
name|ChaosMonkey
operator|.
name|stop
argument_list|(
name|downJetty
argument_list|)
expr_stmt|;
name|downJettys
operator|.
name|add
argument_list|(
name|downJetty
argument_list|)
expr_stmt|;
block|}
name|queryPartialResults
argument_list|(
name|upShards
argument_list|,
name|upClients
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
name|ShardParams
operator|.
name|SHARDS_INFO
argument_list|,
literal|"true"
argument_list|,
name|ShardParams
operator|.
name|SHARDS_TOLERANT
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// restart the jettys
for|for
control|(
name|JettySolrRunner
name|downJetty
range|:
name|downJettys
control|)
block|{
name|downJetty
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
comment|// This index has the same number for every field
comment|// TODO: This test currently fails because debug info is obtained only
comment|// on shards with matches.
comment|// query("q","matchesnothing","fl","*,score", "debugQuery", "true");
comment|// Thread.sleep(10000000000L);
block|}
DECL|method|queryPartialResults
specifier|protected
name|void
name|queryPartialResults
parameter_list|(
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|upShards
parameter_list|,
specifier|final
name|List
argument_list|<
name|SolrServer
argument_list|>
name|upClients
parameter_list|,
name|Object
modifier|...
name|q
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|q
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|params
operator|.
name|add
argument_list|(
name|q
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|q
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO: look into why passing true causes fails
name|params
operator|.
name|set
argument_list|(
literal|"distrib"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
specifier|final
name|QueryResponse
name|controlRsp
init|=
name|controlClient
operator|.
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|validateControlData
argument_list|(
name|controlRsp
argument_list|)
expr_stmt|;
name|params
operator|.
name|remove
argument_list|(
literal|"distrib"
argument_list|)
expr_stmt|;
name|setDistributedParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|queryRandomUpServer
argument_list|(
name|params
argument_list|,
name|upClients
argument_list|)
decl_stmt|;
name|comparePartialResponses
argument_list|(
name|rsp
argument_list|,
name|controlRsp
argument_list|,
name|upShards
argument_list|)
expr_stmt|;
if|if
condition|(
name|stress
operator|>
literal|0
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"starting stress..."
argument_list|)
expr_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|nThreads
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|stress
condition|;
name|j
operator|++
control|)
block|{
name|int
name|which
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|upClients
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|SolrServer
name|client
init|=
name|upClients
operator|.
name|get
argument_list|(
name|which
argument_list|)
decl_stmt|;
try|try
block|{
name|QueryResponse
name|rsp
init|=
name|client
operator|.
name|query
argument_list|(
operator|new
name|ModifiableSolrParams
argument_list|(
name|params
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|verifyStress
condition|)
block|{
name|comparePartialResponses
argument_list|(
name|rsp
argument_list|,
name|controlRsp
argument_list|,
name|upShards
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|queryRandomUpServer
specifier|protected
name|QueryResponse
name|queryRandomUpServer
parameter_list|(
name|ModifiableSolrParams
name|params
parameter_list|,
name|List
argument_list|<
name|SolrServer
argument_list|>
name|upClients
parameter_list|)
throws|throws
name|SolrServerException
block|{
comment|// query a random "up" server
name|int
name|which
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|upClients
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|SolrServer
name|client
init|=
name|upClients
operator|.
name|get
argument_list|(
name|which
argument_list|)
decl_stmt|;
name|QueryResponse
name|rsp
init|=
name|client
operator|.
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
return|return
name|rsp
return|;
block|}
DECL|method|comparePartialResponses
specifier|protected
name|void
name|comparePartialResponses
parameter_list|(
name|QueryResponse
name|rsp
parameter_list|,
name|QueryResponse
name|controlRsp
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|upShards
parameter_list|)
block|{
name|NamedList
argument_list|<
name|?
argument_list|>
name|sinfo
init|=
operator|(
name|NamedList
argument_list|<
name|?
argument_list|>
operator|)
name|rsp
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
name|ShardParams
operator|.
name|SHARDS_INFO
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"missing shard info"
argument_list|,
name|sinfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"should have an entry for each shard ["
operator|+
name|sinfo
operator|+
literal|"] "
operator|+
name|shards
argument_list|,
name|shardsArr
operator|.
name|length
argument_list|,
name|sinfo
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// identify each one
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|sinfo
control|)
block|{
name|String
name|shard
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|NamedList
argument_list|<
name|?
argument_list|>
name|info
init|=
operator|(
name|NamedList
argument_list|<
name|?
argument_list|>
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shardsArr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|s
init|=
name|shardsArr
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|shard
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
comment|// make sure that it responded if it's up
if|if
condition|(
name|upShards
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Expected to find numFound in the up shard info"
argument_list|,
name|info
operator|.
name|get
argument_list|(
literal|"numFound"
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"Expected to find error in the down shard info"
argument_list|,
name|info
operator|.
name|get
argument_list|(
literal|"error"
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertTrue
argument_list|(
literal|"Couldn't find shard "
operator|+
name|shard
operator|+
literal|" represented in shards info"
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
