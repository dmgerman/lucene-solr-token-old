begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr
package|package
name|org
operator|.
name|apache
operator|.
name|solr
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|FacetField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|FieldStatsInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|RangeFacet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|ChaosMonkey
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|EnumFieldValue
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ShardParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|StatsParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
operator|.
name|FacetRangeMethod
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|StatsComponentTest
operator|.
name|StatSetCombinations
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|StatsField
operator|.
name|Stat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|TrackingShardHandlerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|TrackingShardHandlerFactory
operator|.
name|RequestTrackingQueue
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|TrackingShardHandlerFactory
operator|.
name|ShardRequestAndParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/**  * TODO? perhaps use:  *  http://docs.codehaus.org/display/JETTY/ServletTester  * rather then open a real connection?  *  *  * @since solr 1.3  */
end_comment
begin_class
annotation|@
name|Slow
DECL|class|TestDistributedSearch
specifier|public
class|class
name|TestDistributedSearch
extends|extends
name|BaseDistributedSearchTestCase
block|{
DECL|field|t1
name|String
name|t1
init|=
literal|"a_t"
decl_stmt|;
DECL|field|i1
name|String
name|i1
init|=
literal|"a_i1"
decl_stmt|;
DECL|field|nint
name|String
name|nint
init|=
literal|"n_i"
decl_stmt|;
DECL|field|tint
name|String
name|tint
init|=
literal|"n_ti"
decl_stmt|;
DECL|field|tlong
name|String
name|tlong
init|=
literal|"other_tl1"
decl_stmt|;
DECL|field|tdate_a
name|String
name|tdate_a
init|=
literal|"a_n_tdt"
decl_stmt|;
DECL|field|tdate_b
name|String
name|tdate_b
init|=
literal|"b_n_tdt"
decl_stmt|;
DECL|field|oddField
name|String
name|oddField
init|=
literal|"oddField_s"
decl_stmt|;
DECL|field|missingField
name|String
name|missingField
init|=
literal|"ignore_exception__missing_but_valid_field_t"
decl_stmt|;
DECL|field|invalidField
name|String
name|invalidField
init|=
literal|"ignore_exception__invalid_field_not_in_schema"
decl_stmt|;
annotation|@
name|Override
DECL|method|getSolrXml
specifier|protected
name|String
name|getSolrXml
parameter_list|()
block|{
return|return
literal|"solr-trackingshardhandler.xml"
return|;
block|}
annotation|@
name|Test
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|QueryResponse
name|rsp
init|=
literal|null
decl_stmt|;
name|int
name|backupStress
init|=
name|stress
decl_stmt|;
comment|// make a copy so we can restore
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|1
argument_list|,
name|i1
argument_list|,
literal|100
argument_list|,
name|tlong
argument_list|,
literal|100
argument_list|,
name|t1
argument_list|,
literal|"now is the time for all good men"
argument_list|,
literal|"foo_sev_enum"
argument_list|,
literal|"Medium"
argument_list|,
name|tdate_a
argument_list|,
literal|"2010-04-20T11:00:00Z"
argument_list|,
name|tdate_b
argument_list|,
literal|"2009-08-20T11:00:00Z"
argument_list|,
literal|"foo_f"
argument_list|,
literal|1.414f
argument_list|,
literal|"foo_b"
argument_list|,
literal|"true"
argument_list|,
literal|"foo_d"
argument_list|,
literal|1.414d
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|2
argument_list|,
name|i1
argument_list|,
literal|50
argument_list|,
name|tlong
argument_list|,
literal|50
argument_list|,
name|t1
argument_list|,
literal|"to come to the aid of their country."
argument_list|,
literal|"foo_sev_enum"
argument_list|,
literal|"Medium"
argument_list|,
literal|"foo_sev_enum"
argument_list|,
literal|"High"
argument_list|,
name|tdate_a
argument_list|,
literal|"2010-05-02T11:00:00Z"
argument_list|,
name|tdate_b
argument_list|,
literal|"2009-11-02T11:00:00Z"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|3
argument_list|,
name|i1
argument_list|,
literal|2
argument_list|,
name|tlong
argument_list|,
literal|2
argument_list|,
name|t1
argument_list|,
literal|"how now brown cow"
argument_list|,
name|tdate_a
argument_list|,
literal|"2010-05-03T11:00:00Z"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|4
argument_list|,
name|i1
argument_list|,
operator|-
literal|100
argument_list|,
name|tlong
argument_list|,
literal|101
argument_list|,
name|t1
argument_list|,
literal|"the quick fox jumped over the lazy dog"
argument_list|,
name|tdate_a
argument_list|,
literal|"2010-05-03T11:00:00Z"
argument_list|,
name|tdate_b
argument_list|,
literal|"2010-05-03T11:00:00Z"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|5
argument_list|,
name|i1
argument_list|,
literal|500
argument_list|,
name|tlong
argument_list|,
literal|500
argument_list|,
name|t1
argument_list|,
literal|"the quick fox jumped way over the lazy dog"
argument_list|,
name|tdate_a
argument_list|,
literal|"2010-05-05T11:00:00Z"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|6
argument_list|,
name|i1
argument_list|,
operator|-
literal|600
argument_list|,
name|tlong
argument_list|,
literal|600
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy sat on a wall"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|7
argument_list|,
name|i1
argument_list|,
literal|123
argument_list|,
name|tlong
argument_list|,
literal|123
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy had a great fall"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|8
argument_list|,
name|i1
argument_list|,
literal|876
argument_list|,
name|tlong
argument_list|,
literal|876
argument_list|,
name|tdate_b
argument_list|,
literal|"2010-01-05T11:00:00Z"
argument_list|,
literal|"foo_sev_enum"
argument_list|,
literal|"High"
argument_list|,
name|t1
argument_list|,
literal|"all the kings horses and all the kings men"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|9
argument_list|,
name|i1
argument_list|,
literal|7
argument_list|,
name|tlong
argument_list|,
literal|7
argument_list|,
name|t1
argument_list|,
literal|"couldn't put humpty together again"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
comment|// try to ensure there's more than one segment
name|indexr
argument_list|(
name|id
argument_list|,
literal|10
argument_list|,
name|i1
argument_list|,
literal|4321
argument_list|,
name|tlong
argument_list|,
literal|4321
argument_list|,
name|t1
argument_list|,
literal|"this too shall pass"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|11
argument_list|,
name|i1
argument_list|,
operator|-
literal|987
argument_list|,
name|tlong
argument_list|,
literal|987
argument_list|,
literal|"foo_sev_enum"
argument_list|,
literal|"Medium"
argument_list|,
name|t1
argument_list|,
literal|"An eye for eye only ends up making the whole world blind."
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|12
argument_list|,
name|i1
argument_list|,
literal|379
argument_list|,
name|tlong
argument_list|,
literal|379
argument_list|,
name|t1
argument_list|,
literal|"Great works are performed, not by strength, but by perseverance."
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|13
argument_list|,
name|i1
argument_list|,
literal|232
argument_list|,
name|tlong
argument_list|,
literal|232
argument_list|,
name|t1
argument_list|,
literal|"no eggs on wall, lesson learned"
argument_list|,
name|oddField
argument_list|,
literal|"odd man out"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1001"
argument_list|,
literal|"lowerfilt"
argument_list|,
literal|"toyota"
argument_list|)
expr_stmt|;
comment|// for spellcheck
name|indexr
argument_list|(
name|id
argument_list|,
literal|14
argument_list|,
literal|"SubjectTerms_mfacet"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mathematical models"
block|,
literal|"mathematical analysis"
block|}
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|15
argument_list|,
literal|"SubjectTerms_mfacet"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"test 1"
block|,
literal|"test 2"
block|,
literal|"test3"
block|}
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|16
argument_list|,
literal|"SubjectTerms_mfacet"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"test 1"
block|,
literal|"test 2"
block|,
literal|"test3"
block|}
argument_list|)
expr_stmt|;
name|String
index|[]
name|vals
init|=
operator|new
name|String
index|[
literal|100
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|vals
index|[
name|i
index|]
operator|=
literal|"test "
operator|+
name|i
expr_stmt|;
block|}
name|indexr
argument_list|(
name|id
argument_list|,
literal|17
argument_list|,
literal|"SubjectTerms_mfacet"
argument_list|,
name|vals
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|100
init|;
name|i
operator|<
literal|150
condition|;
name|i
operator|++
control|)
block|{
name|indexr
argument_list|(
name|id
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|commit
argument_list|()
expr_stmt|;
name|handle
operator|.
name|clear
argument_list|()
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"timestamp"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"_version_"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
comment|// not a cloud test, but may use updateLog
comment|//Test common query parameters.
name|validateCommonQueryParameters
argument_list|()
expr_stmt|;
comment|// random value sort
for|for
control|(
name|String
name|f
range|:
name|fieldNames
control|)
block|{
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|f
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|f
operator|+
literal|" asc"
argument_list|)
expr_stmt|;
block|}
comment|// these queries should be exactly ordered and scores should exactly match
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"{!func}testfunc(add("
operator|+
name|i1
operator|+
literal|",5))"
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"n_tl1 asc"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"n_tl1 desc"
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"maxScore"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|i1
argument_list|)
expr_stmt|;
comment|// does not expect maxScore. So if it comes ,ignore it. JavaBinCodec.writeSolrDocumentList()
comment|//is agnostic of request params.
name|handle
operator|.
name|remove
argument_list|(
literal|"maxScore"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|i1
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
comment|// even scores should match exactly here
name|handle
operator|.
name|put
argument_list|(
literal|"highlighting"
argument_list|,
name|UNORDERED
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"response"
argument_list|,
name|UNORDERED
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"maxScore"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"quick"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"foofoofoo"
argument_list|,
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
comment|// no fields in returned docs
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"start"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"score"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"quick"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"start"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"start"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"now their fox sat had put"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"now their fox sat had put"
argument_list|,
literal|"fl"
argument_list|,
literal|"foofoofoo"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"matchesnothing"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
comment|// test that a single NOW value is propagated to all shards... if that is true
comment|// then the primary sort should always be a tie and then the secondary should always decide
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"{!func}ms(NOW)"
argument_list|,
literal|"sort"
argument_list|,
literal|"score desc,"
operator|+
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"quick"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"quick"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// a facet query to test out chars out of the ascii range
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"{!term f=foo_s}international\u00ff\u01ff\u2222\u3333"
argument_list|)
expr_stmt|;
comment|// simple field facet on date fields
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|1
argument_list|,
comment|// TODO: limit shouldn't be needed: SOLR-6386
literal|"facet.field"
argument_list|,
name|tdate_a
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rsp
operator|.
name|getFacetFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|1
argument_list|,
comment|// TODO: limit shouldn't be needed: SOLR-6386
literal|"facet.field"
argument_list|,
name|tdate_b
argument_list|,
literal|"facet.field"
argument_list|,
name|tdate_a
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rsp
operator|.
name|getFacetFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|facetQuery
init|=
literal|"id:[1 TO 15]"
decl_stmt|;
comment|// simple date facet on one field
name|query
argument_list|(
literal|"q"
argument_list|,
name|facetQuery
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.date"
argument_list|,
name|tdate_a
argument_list|,
literal|"facet.date"
argument_list|,
name|tdate_a
argument_list|,
literal|"facet.date.other"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.date.start"
argument_list|,
literal|"2010-05-01T11:00:00Z"
argument_list|,
literal|"facet.date.gap"
argument_list|,
literal|"+1DAY"
argument_list|,
literal|"facet.date.end"
argument_list|,
literal|"2010-05-20T11:00:00Z"
argument_list|)
expr_stmt|;
comment|// date facet on multiple fields
name|query
argument_list|(
literal|"q"
argument_list|,
name|facetQuery
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.date"
argument_list|,
name|tdate_a
argument_list|,
literal|"facet.date"
argument_list|,
name|tdate_b
argument_list|,
literal|"facet.date"
argument_list|,
name|tdate_a
argument_list|,
literal|"facet.date.other"
argument_list|,
literal|"all"
argument_list|,
literal|"f."
operator|+
name|tdate_b
operator|+
literal|".facet.date.start"
argument_list|,
literal|"2009-05-01T11:00:00Z"
argument_list|,
literal|"f."
operator|+
name|tdate_b
operator|+
literal|".facet.date.gap"
argument_list|,
literal|"+3MONTHS"
argument_list|,
literal|"facet.date.start"
argument_list|,
literal|"2010-05-01T11:00:00Z"
argument_list|,
literal|"facet.date.gap"
argument_list|,
literal|"+1DAY"
argument_list|,
literal|"facet.date.end"
argument_list|,
literal|"2010-05-20T11:00:00Z"
argument_list|)
expr_stmt|;
comment|// simple range facet on one field
name|query
argument_list|(
literal|"q"
argument_list|,
name|facetQuery
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|tlong
argument_list|,
literal|"facet.range"
argument_list|,
name|tlong
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|200
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|100
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|900
argument_list|,
literal|"facet.range.method"
argument_list|,
name|FacetRangeMethod
operator|.
name|FILTER
argument_list|)
expr_stmt|;
comment|// simple range facet on one field using dv method
name|query
argument_list|(
literal|"q"
argument_list|,
name|facetQuery
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|tlong
argument_list|,
literal|"facet.range"
argument_list|,
name|tlong
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|200
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|100
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|900
argument_list|,
literal|"facet.range.method"
argument_list|,
name|FacetRangeMethod
operator|.
name|DV
argument_list|)
expr_stmt|;
comment|// range facet on multiple fields
name|query
argument_list|(
literal|"q"
argument_list|,
name|facetQuery
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|tlong
argument_list|,
literal|"facet.range"
argument_list|,
name|i1
argument_list|,
literal|"f."
operator|+
name|i1
operator|+
literal|".facet.range.start"
argument_list|,
literal|300
argument_list|,
literal|"f."
operator|+
name|i1
operator|+
literal|".facet.range.gap"
argument_list|,
literal|87
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|900
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|200
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|100
argument_list|,
literal|"f."
operator|+
name|tlong
operator|+
literal|".facet.range.end"
argument_list|,
literal|900
argument_list|,
literal|"f."
operator|+
name|i1
operator|+
literal|".facet.range.method"
argument_list|,
name|FacetRangeMethod
operator|.
name|FILTER
argument_list|,
literal|"f."
operator|+
name|tlong
operator|+
literal|".facet.range.method"
argument_list|,
name|FacetRangeMethod
operator|.
name|DV
argument_list|)
expr_stmt|;
comment|// range facet with "other" param
name|QueryResponse
name|response
init|=
name|query
argument_list|(
literal|"q"
argument_list|,
name|facetQuery
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|tlong
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|200
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|100
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|900
argument_list|,
literal|"facet.range.other"
argument_list|,
literal|"all"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tlong
argument_list|,
name|response
operator|.
name|getFacetRanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|6
argument_list|)
argument_list|,
name|response
operator|.
name|getFacetRanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBefore
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|5
argument_list|)
argument_list|,
name|response
operator|.
name|getFacetRanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBetween
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|2
argument_list|)
argument_list|,
name|response
operator|.
name|getFacetRanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAfter
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test mincounts. Do NOT want to go through all the stuff where with validateControlData in query() method
comment|// Purposely packing a _bunch_ of stuff together here to insure that the proper level of mincount is used for
comment|// each
name|ModifiableSolrParams
name|minParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|minParams
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|minParams
operator|.
name|set
argument_list|(
literal|"rows"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|minParams
operator|.
name|set
argument_list|(
literal|"facet"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|minParams
operator|.
name|set
argument_list|(
literal|"facet.missing"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|minParams
operator|.
name|set
argument_list|(
literal|"facet.field"
argument_list|,
name|i1
argument_list|)
expr_stmt|;
name|minParams
operator|.
name|set
argument_list|(
literal|"facet.missing"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|minParams
operator|.
name|set
argument_list|(
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Return a separate section of ranges over i1. Should respect global range mincount
name|minParams
operator|.
name|set
argument_list|(
literal|"facet.range"
argument_list|,
name|i1
argument_list|)
expr_stmt|;
name|minParams
operator|.
name|set
argument_list|(
literal|"f."
operator|+
name|i1
operator|+
literal|".facet.range.start"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|minParams
operator|.
name|set
argument_list|(
literal|"f."
operator|+
name|i1
operator|+
literal|".facet.range.gap"
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|minParams
operator|.
name|set
argument_list|(
literal|"f."
operator|+
name|i1
operator|+
literal|".facet.range.end"
argument_list|,
literal|1200
argument_list|)
expr_stmt|;
name|minParams
operator|.
name|set
argument_list|(
literal|"f."
operator|+
name|i1
operator|+
literal|".facet.mincount"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Return a separate section of ranges over tlong Should respect facet.mincount
name|minParams
operator|.
name|add
argument_list|(
literal|"facet.range"
argument_list|,
name|tlong
argument_list|)
expr_stmt|;
name|minParams
operator|.
name|set
argument_list|(
literal|"f."
operator|+
name|tlong
operator|+
literal|".facet.range.start"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|minParams
operator|.
name|set
argument_list|(
literal|"f."
operator|+
name|tlong
operator|+
literal|".facet.range.gap"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|minParams
operator|.
name|set
argument_list|(
literal|"f."
operator|+
name|tlong
operator|+
literal|".facet.range.end"
argument_list|,
literal|1200
argument_list|)
expr_stmt|;
comment|// Repeat with a range type of date
name|minParams
operator|.
name|add
argument_list|(
literal|"facet.range"
argument_list|,
name|tdate_b
argument_list|)
expr_stmt|;
name|minParams
operator|.
name|set
argument_list|(
literal|"f."
operator|+
name|tdate_b
operator|+
literal|".facet.range.start"
argument_list|,
literal|"2009-02-01T00:00:00Z"
argument_list|)
expr_stmt|;
name|minParams
operator|.
name|set
argument_list|(
literal|"f."
operator|+
name|tdate_b
operator|+
literal|".facet.range.gap"
argument_list|,
literal|"+1YEAR"
argument_list|)
expr_stmt|;
name|minParams
operator|.
name|set
argument_list|(
literal|"f."
operator|+
name|tdate_b
operator|+
literal|".facet.range.end"
argument_list|,
literal|"2011-01-01T00:00:00Z"
argument_list|)
expr_stmt|;
name|minParams
operator|.
name|set
argument_list|(
literal|"f."
operator|+
name|tdate_b
operator|+
literal|".facet.mincount"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Insure that global mincount is respected for facet queries
name|minParams
operator|.
name|set
argument_list|(
literal|"facet.query"
argument_list|,
name|tdate_a
operator|+
literal|":[2010-01-01T00:00:00Z TO 2011-01-01T00:00:00Z]"
argument_list|)
expr_stmt|;
comment|// Should return some counts
comment|//minParams.set("facet.query", tdate_a + ":[* TO *]"); // Should be removed
name|minParams
operator|.
name|add
argument_list|(
literal|"facet.query"
argument_list|,
name|tdate_b
operator|+
literal|":[2008-01-01T00:00:00Z TO 2009-09-01T00:00:00Z]"
argument_list|)
expr_stmt|;
comment|// Should be removed from response
name|setDistributedParams
argument_list|(
name|minParams
argument_list|)
expr_stmt|;
name|QueryResponse
name|minResp
init|=
name|queryServer
argument_list|(
name|minParams
argument_list|)
decl_stmt|;
name|ModifiableSolrParams
name|eParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|eParams
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
name|tdate_b
operator|+
literal|":[* TO *]"
argument_list|)
expr_stmt|;
name|eParams
operator|.
name|set
argument_list|(
literal|"rows"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|eParams
operator|.
name|set
argument_list|(
literal|"fl"
argument_list|,
name|tdate_b
argument_list|)
expr_stmt|;
name|setDistributedParams
argument_list|(
name|eParams
argument_list|)
expr_stmt|;
name|QueryResponse
name|eResp
init|=
name|queryServer
argument_list|(
name|eParams
argument_list|)
decl_stmt|;
comment|// Check that exactly the right numbers of counts came through
name|assertEquals
argument_list|(
literal|"Should be exactly 2 range facets returned after minCounts taken into account "
argument_list|,
literal|3
argument_list|,
name|minResp
operator|.
name|getFacetRanges
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should only be 1 query facets returned after minCounts taken into account "
argument_list|,
literal|1
argument_list|,
name|minResp
operator|.
name|getFacetQuery
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkMinCountsField
argument_list|(
name|minResp
operator|.
name|getFacetField
argument_list|(
name|i1
argument_list|)
operator|.
name|getValues
argument_list|()
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|null
block|,
literal|55L
block|}
argument_list|)
expr_stmt|;
comment|// Should just be the null entries for field
name|checkMinCountsRange
argument_list|(
name|minResp
operator|.
name|getFacetRanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCounts
argument_list|()
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"0"
block|,
literal|5L
block|}
argument_list|)
expr_stmt|;
comment|// range on i1
name|checkMinCountsRange
argument_list|(
name|minResp
operator|.
name|getFacetRanges
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCounts
argument_list|()
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"0"
block|,
literal|3L
block|,
literal|"100"
block|,
literal|3L
block|}
argument_list|)
expr_stmt|;
comment|// range on tlong
name|checkMinCountsRange
argument_list|(
name|minResp
operator|.
name|getFacetRanges
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getCounts
argument_list|()
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"2009-02-01T00:00:00Z"
block|,
literal|3L
block|}
argument_list|)
expr_stmt|;
comment|// date (range) on tvh
name|assertTrue
argument_list|(
literal|"Should have a facet for tdate_a"
argument_list|,
name|minResp
operator|.
name|getFacetQuery
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"a_n_tdt:[2010-01-01T00:00:00Z TO 2011-01-01T00:00:00Z]"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|qCount
init|=
name|minResp
operator|.
name|getFacetQuery
argument_list|()
operator|.
name|get
argument_list|(
literal|"a_n_tdt:[2010-01-01T00:00:00Z TO 2011-01-01T00:00:00Z]"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"tdate_a should be 5"
argument_list|,
name|qCount
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// Now let's do some queries, the above is getting too complex
name|minParams
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|minParams
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|minParams
operator|.
name|set
argument_list|(
literal|"rows"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|minParams
operator|.
name|set
argument_list|(
literal|"facet"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|minParams
operator|.
name|set
argument_list|(
literal|"facet.mincount"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|minParams
operator|.
name|set
argument_list|(
literal|"facet.query"
argument_list|,
name|tdate_a
operator|+
literal|":[2010-01-01T00:00:00Z TO 2010-05-04T00:00:00Z]"
argument_list|)
expr_stmt|;
name|minParams
operator|.
name|add
argument_list|(
literal|"facet.query"
argument_list|,
name|tdate_b
operator|+
literal|":[2009-01-01T00:00:00Z TO 2010-01-01T00:00:00Z]"
argument_list|)
expr_stmt|;
comment|// Should be removed
name|setDistributedParams
argument_list|(
name|minParams
argument_list|)
expr_stmt|;
name|minResp
operator|=
name|queryServer
argument_list|(
name|minParams
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should only be 1 query facets returned after minCounts taken into account "
argument_list|,
literal|1
argument_list|,
name|minResp
operator|.
name|getFacetQuery
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should be an entry for a_n_tdt"
argument_list|,
name|minResp
operator|.
name|getFacetQuery
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"a_n_tdt:[2010-01-01T00:00:00Z TO 2010-05-04T00:00:00Z]"
argument_list|)
argument_list|)
expr_stmt|;
name|qCount
operator|=
name|minResp
operator|.
name|getFacetQuery
argument_list|()
operator|.
name|get
argument_list|(
literal|"a_n_tdt:[2010-01-01T00:00:00Z TO 2010-05-04T00:00:00Z]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a_n_tdt should have a count of 4 "
argument_list|,
name|qCount
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|//  variations of fl
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"score"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
name|i1
operator|+
literal|",score"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
name|i1
argument_list|,
literal|"fl"
argument_list|,
literal|"score"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"fl"
argument_list|,
name|i1
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
name|i1
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"fl"
argument_list|,
name|nint
argument_list|,
literal|"fl"
argument_list|,
name|tint
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
name|nint
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"fl"
argument_list|,
name|tint
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"did"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"did:[docid]"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|handle
operator|.
name|remove
argument_list|(
literal|"did"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"log("
operator|+
name|tlong
operator|+
literal|"),abs("
operator|+
name|tlong
operator|+
literal|"),score"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"n_*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
comment|// basic spellcheck testing
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"toyata"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,lowerfilt"
argument_list|,
literal|"spellcheck"
argument_list|,
literal|true
argument_list|,
literal|"spellcheck.q"
argument_list|,
literal|"toyata"
argument_list|,
literal|"qt"
argument_list|,
literal|"spellCheckCompRH_Direct"
argument_list|,
literal|"shards.qt"
argument_list|,
literal|"spellCheckCompRH_Direct"
argument_list|)
expr_stmt|;
name|stress
operator|=
literal|0
expr_stmt|;
comment|// turn off stress... we want to tex max combos in min time
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|25
operator|*
name|RANDOM_MULTIPLIER
condition|;
name|i
operator|++
control|)
block|{
name|String
name|f
init|=
name|fieldNames
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|fieldNames
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
name|f
operator|=
name|t1
expr_stmt|;
comment|// the text field is a really interesting one to facet on (and it's multi-valued too)
comment|// we want a random query and not just *:* so we'll get zero counts in facets also
comment|// TODO: do a better random query
name|String
name|q
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"*:*"
else|:
literal|"id:(1 3 5 7 9 11 13) OR id:[100 TO "
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
operator|+
literal|"]"
decl_stmt|;
name|int
name|nolimit
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|10000
decl_stmt|;
comment|// these should be equivalent
comment|// if limit==-1, we should always get exact matches
name|query
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.limit"
argument_list|,
name|nolimit
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.mincount"
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|"facet.offset"
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.limit"
argument_list|,
name|nolimit
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|,
literal|"facet.mincount"
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|"facet.offset"
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
comment|// for index sort, we should get exact results for mincount<= 1
name|query
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|,
literal|"facet.mincount"
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"facet.offset"
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|,
literal|"facet.limit"
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|11
argument_list|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|stress
operator|=
name|backupStress
expr_stmt|;
comment|// restore stress
comment|// test faceting multiple things at once
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"quick"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
comment|// test filter tagging, facet exclusion, and naming (multi-select facet support)
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"{!key=myquick}quick"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"{!key=myall ex=a}all"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=mykey ex=a}"
operator|+
name|t1
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=other ex=b}"
operator|+
name|t1
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=again ex=a,b}"
operator|+
name|t1
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=a}id:[1 TO 7]"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=b}id:[3 TO 9]"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!ex=t1}SubjectTerms_mfacet"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=t1}SubjectTerms_mfacet:(test 1)"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// test field that is valid in schema but missing in all shards
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|missingField
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// test field that is valid in schema and missing in some shards
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|oddField
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"stats_dt"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
name|i1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
name|tdate_a
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
name|tdate_b
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!cardinality='true'}"
operator|+
name|oddField
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!cardinality='true'}"
operator|+
name|tlong
argument_list|)
expr_stmt|;
block|{
comment|// don't leak variabls
comment|// long
name|FieldStatsInfo
name|s
init|=
name|rsp
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
name|tlong
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"missing stats"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong cardinality"
argument_list|,
operator|new
name|Long
argument_list|(
literal|13
argument_list|)
argument_list|,
name|s
operator|.
name|getCardinality
argument_list|()
argument_list|)
expr_stmt|;
comment|//
name|assertNull
argument_list|(
literal|"expected null for min"
argument_list|,
name|s
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for mean"
argument_list|,
name|s
operator|.
name|getMean
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for count"
argument_list|,
name|s
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for calcDistinct"
argument_list|,
name|s
operator|.
name|getCountDistinct
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for distinct vals"
argument_list|,
name|s
operator|.
name|getDistinctValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for max"
argument_list|,
name|s
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for missing"
argument_list|,
name|s
operator|.
name|getMissing
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for stddev"
argument_list|,
name|s
operator|.
name|getStddev
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for sum"
argument_list|,
name|s
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for percentiles"
argument_list|,
name|s
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
comment|// string
name|s
operator|=
name|rsp
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
name|oddField
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"missing stats"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong cardinality"
argument_list|,
operator|new
name|Long
argument_list|(
literal|1
argument_list|)
argument_list|,
name|s
operator|.
name|getCardinality
argument_list|()
argument_list|)
expr_stmt|;
comment|//
name|assertNull
argument_list|(
literal|"expected null for min"
argument_list|,
name|s
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for mean"
argument_list|,
name|s
operator|.
name|getMean
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for count"
argument_list|,
name|s
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for calcDistinct"
argument_list|,
name|s
operator|.
name|getCountDistinct
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for distinct vals"
argument_list|,
name|s
operator|.
name|getDistinctValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for max"
argument_list|,
name|s
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for missing"
argument_list|,
name|s
operator|.
name|getMissing
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for stddev"
argument_list|,
name|s
operator|.
name|getStddev
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for sum"
argument_list|,
name|s
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for percentiles"
argument_list|,
name|s
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!percentiles='1,2,3,4,5'}"
operator|+
name|i1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!percentiles='1,20,30,40,98,99,99.9'}"
operator|+
name|i1
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!percentiles='1.0,99.999,0.001'}"
operator|+
name|tlong
argument_list|)
expr_stmt|;
block|{
comment|// don't leak variabls
name|Double
index|[]
name|expectedKeys
init|=
operator|new
name|Double
index|[]
block|{
literal|1.0D
block|,
literal|99.999D
block|,
literal|0.001D
block|}
decl_stmt|;
name|Double
index|[]
name|expectedVals
init|=
operator|new
name|Double
index|[]
block|{
literal|2.0D
block|,
literal|4320.0D
block|,
literal|2.0D
block|}
decl_stmt|;
name|FieldStatsInfo
name|s
init|=
name|rsp
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
name|tlong
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no stats for "
operator|+
name|tlong
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
name|p
init|=
name|s
operator|.
name|getPercentiles
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no percentils"
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"insufficient percentiles"
argument_list|,
name|expectedKeys
operator|.
name|length
argument_list|,
name|p
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Double
argument_list|>
name|actualKeys
init|=
name|p
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Double
name|expectedKey
init|=
name|expectedKeys
index|[
name|i
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Ran out of actual keys as of : "
operator|+
name|i
operator|+
literal|"->"
operator|+
name|expectedKey
argument_list|,
name|actualKeys
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedKey
argument_list|,
name|actualKeys
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"percentiles are off: "
operator|+
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|expectedVals
index|[
name|i
index|]
argument_list|,
name|p
operator|.
name|get
argument_list|(
name|expectedKey
argument_list|)
argument_list|,
literal|1.0D
argument_list|)
expr_stmt|;
block|}
comment|//
name|assertNull
argument_list|(
literal|"expected null for count"
argument_list|,
name|s
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for count"
argument_list|,
name|s
operator|.
name|getMean
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for count"
argument_list|,
name|s
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for calcDistinct"
argument_list|,
name|s
operator|.
name|getCountDistinct
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for distinct vals"
argument_list|,
name|s
operator|.
name|getDistinctValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for max"
argument_list|,
name|s
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for missing"
argument_list|,
name|s
operator|.
name|getMissing
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for stddev"
argument_list|,
name|s
operator|.
name|getStddev
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for sum"
argument_list|,
name|s
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!percentiles='1,20,50,80,99'}"
operator|+
name|tdate_a
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=nothing}-*:*"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=special_key ex=nothing}stats_dt"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"f.stats_dt.stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=special_key}stats_dt"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"f.stats_dt.stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=xxx}id:[3 TO 9]"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=special_key}stats_dt"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!ex=xxx}stats_dt"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
comment|// do a really simple query so distributed IDF doesn't cause problems
comment|// when comparing with control collection
literal|"stats.field"
argument_list|,
literal|"{!lucene key=q_key}"
operator|+
name|i1
operator|+
literal|"foo_b:true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!func key=f_key}sum("
operator|+
name|tlong
operator|+
literal|","
operator|+
name|i1
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"stats_dt"
argument_list|,
literal|"stats.field"
argument_list|,
name|i1
argument_list|,
literal|"stats.field"
argument_list|,
name|tdate_a
argument_list|,
literal|"stats.field"
argument_list|,
name|tdate_b
argument_list|)
expr_stmt|;
comment|// only ask for "min" and "mean", explicitly exclude deps of mean, whitebox check shard responses
try|try
block|{
name|RequestTrackingQueue
name|trackingQueue
init|=
operator|new
name|RequestTrackingQueue
argument_list|()
decl_stmt|;
name|TrackingShardHandlerFactory
operator|.
name|setTrackingQueue
argument_list|(
name|jettys
argument_list|,
name|trackingQueue
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!min=true sum=false mean=true count=false}"
operator|+
name|i1
argument_list|)
expr_stmt|;
name|FieldStatsInfo
name|s
init|=
name|rsp
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
name|i1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no stats for "
operator|+
name|i1
argument_list|,
name|s
argument_list|)
expr_stmt|;
comment|//
name|assertEquals
argument_list|(
literal|"wrong min"
argument_list|,
operator|-
literal|987.0D
argument_list|,
operator|(
name|Double
operator|)
name|s
operator|.
name|getMin
argument_list|()
argument_list|,
literal|0.0001D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong mean"
argument_list|,
literal|377.153846D
argument_list|,
operator|(
name|Double
operator|)
name|s
operator|.
name|getMean
argument_list|()
argument_list|,
literal|0.0001D
argument_list|)
expr_stmt|;
comment|//
name|assertNull
argument_list|(
literal|"expected null for count"
argument_list|,
name|s
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for calcDistinct"
argument_list|,
name|s
operator|.
name|getCountDistinct
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for distinct vals"
argument_list|,
name|s
operator|.
name|getDistinctValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for max"
argument_list|,
name|s
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for missing"
argument_list|,
name|s
operator|.
name|getMissing
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for stddev"
argument_list|,
name|s
operator|.
name|getStddev
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for sum"
argument_list|,
name|s
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for percentiles"
argument_list|,
name|s
operator|.
name|getPercentiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for cardinality"
argument_list|,
name|s
operator|.
name|getCardinality
argument_list|()
argument_list|)
expr_stmt|;
comment|// sanity check deps relationship
for|for
control|(
name|Stat
name|dep
range|:
name|EnumSet
operator|.
name|of
argument_list|(
name|Stat
operator|.
name|sum
argument_list|,
name|Stat
operator|.
name|count
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
literal|"Purpose of this test is to ensure that asking for some stats works even when the deps "
operator|+
literal|"of those stats are explicitly excluded -- but the expected dep relationshp is no longer valid. "
operator|+
literal|"ie: who changed the code and didn't change this test?, expected: "
operator|+
name|dep
argument_list|,
name|Stat
operator|.
name|mean
operator|.
name|getDistribDeps
argument_list|()
operator|.
name|contains
argument_list|(
name|dep
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check our shard requests& responses - ensure we didn't get unneccessary stats from every shard
name|int
name|numStatsShardRequests
init|=
literal|0
decl_stmt|;
name|EnumSet
argument_list|<
name|Stat
argument_list|>
name|shardStatsExpected
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|Stat
operator|.
name|min
argument_list|,
name|Stat
operator|.
name|sum
argument_list|,
name|Stat
operator|.
name|count
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|ShardRequestAndParams
argument_list|>
name|shard
range|:
name|trackingQueue
operator|.
name|getAllRequests
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|ShardRequestAndParams
name|shardReq
range|:
name|shard
control|)
block|{
if|if
condition|(
name|shardReq
operator|.
name|params
operator|.
name|getBool
argument_list|(
name|StatsParams
operator|.
name|STATS
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|numStatsShardRequests
operator|++
expr_stmt|;
for|for
control|(
name|ShardResponse
name|shardRsp
range|:
name|shardReq
operator|.
name|sreq
operator|.
name|responses
control|)
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|shardStats
init|=
operator|(
operator|(
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
operator|)
name|shardRsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"stats"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"stats_fields"
argument_list|)
operator|.
name|get
argument_list|(
name|i1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no stard stats for "
operator|+
name|i1
argument_list|,
name|shardStats
argument_list|)
expr_stmt|;
comment|//
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|shardStats
control|)
block|{
name|Stat
name|found
init|=
name|Stat
operator|.
name|forName
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"found shardRsp stat key we were not expecting: "
operator|+
name|entry
argument_list|,
name|found
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"found stat we were not expecting: "
operator|+
name|entry
argument_list|,
name|shardStatsExpected
operator|.
name|contains
argument_list|(
name|found
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|assertTrue
argument_list|(
literal|"did't see any stats=true shard requests"
argument_list|,
literal|0
operator|<
name|numStatsShardRequests
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TrackingShardHandlerFactory
operator|.
name|setTrackingQueue
argument_list|(
name|jettys
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// only ask for "min", "mean" and "stddev",
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!min=true mean=true stddev=true}"
operator|+
name|i1
argument_list|)
expr_stmt|;
block|{
comment|// don't leak variables
name|FieldStatsInfo
name|s
init|=
name|rsp
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
name|i1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no stats for "
operator|+
name|i1
argument_list|,
name|s
argument_list|)
expr_stmt|;
comment|//
name|assertEquals
argument_list|(
literal|"wrong min"
argument_list|,
operator|-
literal|987.0D
argument_list|,
operator|(
name|Double
operator|)
name|s
operator|.
name|getMin
argument_list|()
argument_list|,
literal|0.0001D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong mean"
argument_list|,
literal|377.153846D
argument_list|,
operator|(
name|Double
operator|)
name|s
operator|.
name|getMean
argument_list|()
argument_list|,
literal|0.0001D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong stddev"
argument_list|,
literal|1271.76215D
argument_list|,
operator|(
name|Double
operator|)
name|s
operator|.
name|getStddev
argument_list|()
argument_list|,
literal|0.0001D
argument_list|)
expr_stmt|;
comment|//
name|assertNull
argument_list|(
literal|"expected null for count"
argument_list|,
name|s
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for calcDistinct"
argument_list|,
name|s
operator|.
name|getCountDistinct
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for distinct vals"
argument_list|,
name|s
operator|.
name|getDistinctValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for max"
argument_list|,
name|s
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for missing"
argument_list|,
name|s
operator|.
name|getMissing
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for sum"
argument_list|,
name|s
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for percentiles"
argument_list|,
name|s
operator|.
name|getPercentiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for cardinality"
argument_list|,
name|s
operator|.
name|getCardinality
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// request stats, but disable them all via param refs
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"doMin"
argument_list|,
literal|"false"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!min=$doMin}"
operator|+
name|i1
argument_list|)
expr_stmt|;
block|{
comment|// don't leak variables
name|FieldStatsInfo
name|s
init|=
name|rsp
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
name|i1
argument_list|)
decl_stmt|;
comment|// stats section should exist, even though stats should be null
name|assertNotNull
argument_list|(
literal|"no stats for "
operator|+
name|i1
argument_list|,
name|s
argument_list|)
expr_stmt|;
comment|//
name|assertNull
argument_list|(
literal|"expected null for min"
argument_list|,
name|s
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for mean"
argument_list|,
name|s
operator|.
name|getMean
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for stddev"
argument_list|,
name|s
operator|.
name|getStddev
argument_list|()
argument_list|)
expr_stmt|;
comment|//
name|assertNull
argument_list|(
literal|"expected null for count"
argument_list|,
name|s
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for calcDistinct"
argument_list|,
name|s
operator|.
name|getCountDistinct
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for distinct vals"
argument_list|,
name|s
operator|.
name|getDistinctValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for max"
argument_list|,
name|s
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for missing"
argument_list|,
name|s
operator|.
name|getMissing
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for sum"
argument_list|,
name|s
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for percentiles"
argument_list|,
name|s
operator|.
name|getPercentiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for cardinality"
argument_list|,
name|s
operator|.
name|getCardinality
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
index|[]
name|stats
init|=
operator|new
name|String
index|[]
block|{
literal|"min"
block|,
literal|"max"
block|,
literal|"sum"
block|,
literal|"sumOfSquares"
block|,
literal|"stddev"
block|,
literal|"mean"
block|,
literal|"missing"
block|,
literal|"count"
block|}
decl_stmt|;
comment|// ask for arbitrary pairs of stats
for|for
control|(
name|String
name|stat1
range|:
name|stats
control|)
block|{
for|for
control|(
name|String
name|stat2
range|:
name|stats
control|)
block|{
comment|// NOTE: stat1 might equal stat2 - good edge case to test for
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!"
operator|+
name|stat1
operator|+
literal|"=true "
operator|+
name|stat2
operator|+
literal|"=true}"
operator|+
name|i1
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|statsExpected
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|statsExpected
operator|.
name|add
argument_list|(
name|stat1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|stat1
operator|.
name|equals
argument_list|(
name|stat2
argument_list|)
condition|)
block|{
name|statsExpected
operator|.
name|add
argument_list|(
name|stat2
argument_list|)
expr_stmt|;
block|}
comment|// ignore the FieldStatsInfo convinience class, and look directly at the NamedList
comment|// so we don't need any sort of crazy reflection
name|NamedList
argument_list|<
name|Object
argument_list|>
name|svals
init|=
operator|(
operator|(
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
operator|)
name|rsp
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"stats"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"stats_fields"
argument_list|)
operator|.
name|get
argument_list|(
name|i1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no stats for field "
operator|+
name|i1
argument_list|,
name|svals
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong quantity of stats"
argument_list|,
name|statsExpected
operator|.
name|size
argument_list|()
argument_list|,
name|svals
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|statsExpected
control|)
block|{
name|assertNotNull
argument_list|(
literal|"stat shouldn't be null: "
operator|+
name|s
argument_list|,
name|svals
operator|.
name|get
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"stat should be a Number: "
operator|+
name|s
operator|+
literal|" -> "
operator|+
name|svals
operator|.
name|get
argument_list|(
name|s
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|,
name|svals
operator|.
name|get
argument_list|(
name|s
argument_list|)
operator|instanceof
name|Number
argument_list|)
expr_stmt|;
comment|// some loose assertions since we're iterating over various stats
if|if
condition|(
name|svals
operator|.
name|get
argument_list|(
name|s
argument_list|)
operator|instanceof
name|Double
condition|)
block|{
name|Double
name|val
init|=
operator|(
name|Double
operator|)
name|svals
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"stat shouldn't be NaN: "
operator|+
name|s
argument_list|,
name|val
operator|.
name|isNaN
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"stat shouldn't be Inf: "
operator|+
name|s
argument_list|,
name|val
operator|.
name|isInfinite
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"stat shouldn't be 0: "
operator|+
name|s
argument_list|,
name|val
operator|.
name|equals
argument_list|(
literal|0.0D
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// count or missing
name|assertTrue
argument_list|(
literal|"stat should be count of missing: "
operator|+
name|s
argument_list|,
operator|(
literal|"count"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
operator|||
literal|"missing"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"stat should be a Long: "
operator|+
name|s
operator|+
literal|" -> "
operator|+
name|svals
operator|.
name|get
argument_list|(
name|s
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|,
name|svals
operator|.
name|get
argument_list|(
name|s
argument_list|)
operator|instanceof
name|Long
argument_list|)
expr_stmt|;
name|Long
name|val
init|=
operator|(
name|Long
operator|)
name|svals
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"stat shouldn't be 0: "
operator|+
name|s
argument_list|,
name|val
operator|.
name|equals
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// all of these diff ways of asking for min& calcdistinct should have the same result
for|for
control|(
name|SolrParams
name|p
range|:
operator|new
name|SolrParams
index|[]
block|{
name|params
argument_list|(
literal|"stats.field"
argument_list|,
literal|"{!min=true calcdistinct=true}"
operator|+
name|i1
argument_list|)
block|,
name|params
argument_list|(
literal|"stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!min=true}"
operator|+
name|i1
argument_list|)
block|,
name|params
argument_list|(
literal|"f."
operator|+
name|i1
operator|+
literal|".stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!min=true}"
operator|+
name|i1
argument_list|)
block|,
name|params
argument_list|(
literal|"stats.calcdistinct"
argument_list|,
literal|"false"
argument_list|,
literal|"f."
operator|+
name|i1
operator|+
literal|".stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!min=true}"
operator|+
name|i1
argument_list|)
block|,
name|params
argument_list|(
literal|"stats.calcdistinct"
argument_list|,
literal|"false"
argument_list|,
literal|"f."
operator|+
name|i1
operator|+
literal|".stats.calcdistinct"
argument_list|,
literal|"false"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!min=true calcdistinct=true}"
operator|+
name|i1
argument_list|)
block|,
name|params
argument_list|(
literal|"stats.calcdistinct"
argument_list|,
literal|"false"
argument_list|,
literal|"f."
operator|+
name|i1
operator|+
literal|".stats.calcdistinct"
argument_list|,
literal|"false"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!min=true countDistinct=true distinctValues=true}"
operator|+
name|i1
argument_list|)
block|,
name|params
argument_list|(
literal|"stats.field"
argument_list|,
literal|"{!min=true countDistinct=true distinctValues=true}"
operator|+
name|i1
argument_list|)
block|,
name|params
argument_list|(
literal|"yes"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!min=$yes countDistinct=$yes distinctValues=$yes}"
operator|+
name|i1
argument_list|)
block|,       }
control|)
block|{
name|rsp
operator|=
name|query
argument_list|(
name|SolrParams
operator|.
name|wrapDefaults
argument_list|(
name|p
argument_list|,
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|FieldStatsInfo
name|s
init|=
name|rsp
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
name|i1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|+
literal|" no stats for "
operator|+
name|i1
argument_list|,
name|s
argument_list|)
expr_stmt|;
comment|//
name|assertEquals
argument_list|(
name|p
operator|+
literal|" wrong min"
argument_list|,
operator|-
literal|987.0D
argument_list|,
operator|(
name|Double
operator|)
name|s
operator|.
name|getMin
argument_list|()
argument_list|,
literal|0.0001D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|+
literal|" wrong calcDistinct"
argument_list|,
operator|new
name|Long
argument_list|(
literal|13
argument_list|)
argument_list|,
name|s
operator|.
name|getCountDistinct
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|+
literal|" expected non-null list for distinct vals"
argument_list|,
name|s
operator|.
name|getDistinctValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|+
literal|" expected list for distinct vals"
argument_list|,
literal|13
argument_list|,
name|s
operator|.
name|getDistinctValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//
name|assertNull
argument_list|(
name|p
operator|+
literal|" expected null for mean"
argument_list|,
name|s
operator|.
name|getMean
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|p
operator|+
literal|" expected null for count"
argument_list|,
name|s
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|p
operator|+
literal|" expected null for max"
argument_list|,
name|s
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|p
operator|+
literal|" expected null for missing"
argument_list|,
name|s
operator|.
name|getMissing
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|p
operator|+
literal|" expected null for stddev"
argument_list|,
name|s
operator|.
name|getStddev
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|p
operator|+
literal|" expected null for sum"
argument_list|,
name|s
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|p
operator|+
literal|" expected null for percentiles"
argument_list|,
name|s
operator|.
name|getPercentiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|p
operator|+
literal|" expected null for cardinality"
argument_list|,
name|s
operator|.
name|getCardinality
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// all of these diff ways of excluding calcdistinct should have the same result
for|for
control|(
name|SolrParams
name|p
range|:
operator|new
name|SolrParams
index|[]
block|{
name|params
argument_list|(
literal|"stats.field"
argument_list|,
literal|"{!min=true calcdistinct=false}"
operator|+
name|i1
argument_list|)
block|,
name|params
argument_list|(
literal|"stats.calcdistinct"
argument_list|,
literal|"false"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!min=true}"
operator|+
name|i1
argument_list|)
block|,
name|params
argument_list|(
literal|"f."
operator|+
name|i1
operator|+
literal|".stats.calcdistinct"
argument_list|,
literal|"false"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!min=true}"
operator|+
name|i1
argument_list|)
block|,
name|params
argument_list|(
literal|"stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|,
literal|"f."
operator|+
name|i1
operator|+
literal|".stats.calcdistinct"
argument_list|,
literal|"false"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!min=true}"
operator|+
name|i1
argument_list|)
block|,
name|params
argument_list|(
literal|"stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|,
literal|"f."
operator|+
name|i1
operator|+
literal|".stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!min=true calcdistinct=false}"
operator|+
name|i1
argument_list|)
block|,
name|params
argument_list|(
literal|"stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|,
literal|"f."
operator|+
name|i1
operator|+
literal|".stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!min=true countDistinct=false distinctValues=false}"
operator|+
name|i1
argument_list|)
block|,       }
control|)
block|{
name|rsp
operator|=
name|query
argument_list|(
name|SolrParams
operator|.
name|wrapDefaults
argument_list|(
name|p
argument_list|,
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|FieldStatsInfo
name|s
init|=
name|rsp
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
name|i1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|+
literal|" no stats for "
operator|+
name|i1
argument_list|,
name|s
argument_list|)
expr_stmt|;
comment|//
name|assertEquals
argument_list|(
name|p
operator|+
literal|" wrong min"
argument_list|,
operator|-
literal|987.0D
argument_list|,
operator|(
name|Double
operator|)
name|s
operator|.
name|getMin
argument_list|()
argument_list|,
literal|0.0001D
argument_list|)
expr_stmt|;
comment|//
name|assertNull
argument_list|(
name|p
operator|+
literal|" expected null for calcDistinct"
argument_list|,
name|s
operator|.
name|getCountDistinct
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|p
operator|+
literal|" expected null for distinct vals"
argument_list|,
name|s
operator|.
name|getDistinctValues
argument_list|()
argument_list|)
expr_stmt|;
comment|//
name|assertNull
argument_list|(
name|p
operator|+
literal|" expected null for mean"
argument_list|,
name|s
operator|.
name|getMean
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|p
operator|+
literal|" expected null for count"
argument_list|,
name|s
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|p
operator|+
literal|" expected null for max"
argument_list|,
name|s
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|p
operator|+
literal|" expected null for missing"
argument_list|,
name|s
operator|.
name|getMissing
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|p
operator|+
literal|" expected null for stddev"
argument_list|,
name|s
operator|.
name|getStddev
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|p
operator|+
literal|" expected null for sum"
argument_list|,
name|s
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|p
operator|+
literal|" expected null for percentiles"
argument_list|,
name|s
operator|.
name|getPercentiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|p
operator|+
literal|" expected null for cardinality"
argument_list|,
name|s
operator|.
name|getCardinality
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// this field doesn't exist in any doc in the result set.
comment|// ensure we get expected values for the stats we ask for, but null for the stats
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!min=true mean=true stddev=true}does_not_exist_i"
argument_list|)
expr_stmt|;
block|{
comment|// don't leak variables
name|FieldStatsInfo
name|s
init|=
name|rsp
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|"does_not_exist_i"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no stats for bogus field"
argument_list|,
name|s
argument_list|)
expr_stmt|;
comment|// things we explicit expect because we asked for them
comment|// NOTE: min is expected to be null even though requested because of no values
name|assertEquals
argument_list|(
literal|"wrong min"
argument_list|,
literal|null
argument_list|,
name|s
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"mean should be NaN"
argument_list|,
operator|(
operator|(
name|Double
operator|)
name|s
operator|.
name|getMean
argument_list|()
operator|)
operator|.
name|isNaN
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong stddev"
argument_list|,
literal|0.0D
argument_list|,
operator|(
name|Double
operator|)
name|s
operator|.
name|getStddev
argument_list|()
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
comment|// things that we didn't ask for, so they better be null
name|assertNull
argument_list|(
literal|"expected null for count"
argument_list|,
name|s
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for calcDistinct"
argument_list|,
name|s
operator|.
name|getCountDistinct
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for distinct vals"
argument_list|,
name|s
operator|.
name|getDistinctValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for max"
argument_list|,
name|s
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for missing"
argument_list|,
name|s
operator|.
name|getMissing
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for sum"
argument_list|,
name|s
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for percentiles"
argument_list|,
name|s
operator|.
name|getPercentiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for cardinality"
argument_list|,
name|s
operator|.
name|getCardinality
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// look at stats on non numeric fields
comment|//
comment|// not all stats are supported on every field type, so some of these permutations will
comment|// result in no stats being computed but this at least lets us sanity check that for each
comment|// of these field+stats(s) combinations we get consistent results between the distribted
comment|// request and the single node situation.
comment|//
comment|// NOTE: percentiles excluded because it doesn't support simple 'true/false' syntax
comment|// (and since it doesn't work for non-numerics anyway, we aren't missing any coverage here)
name|EnumSet
argument_list|<
name|Stat
argument_list|>
name|allStats
init|=
name|EnumSet
operator|.
name|complementOf
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Stat
operator|.
name|percentiles
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|numTotalStatQueries
init|=
literal|0
decl_stmt|;
comment|// don't go overboard, just do all permutations of 1 or 2 stat params, for each field& query
specifier|final
name|int
name|numStatParamsAtOnce
init|=
literal|2
decl_stmt|;
for|for
control|(
name|int
name|numParams
init|=
literal|1
init|;
name|numParams
operator|<=
name|numStatParamsAtOnce
condition|;
name|numParams
operator|++
control|)
block|{
for|for
control|(
name|EnumSet
argument_list|<
name|Stat
argument_list|>
name|set
range|:
operator|new
name|StatSetCombinations
argument_list|(
name|numParams
argument_list|,
name|allStats
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|field
range|:
operator|new
name|String
index|[]
block|{
literal|"foo_f"
block|,
name|i1
block|,
name|tlong
block|,
name|tdate_a
block|,
name|oddField
block|,
literal|"foo_sev_enum"
block|,
comment|// fields that no doc has any value in
literal|"bogus___s"
block|,
literal|"bogus___f"
block|,
literal|"bogus___i"
block|,
literal|"bogus___tdt"
block|,
literal|"bogus___sev_enum"
block|}
control|)
block|{
for|for
control|(
name|String
name|q
range|:
operator|new
name|String
index|[]
block|{
literal|"*:*"
block|,
comment|// all docs
literal|"bogus___s:bogus"
block|,
comment|// no docs
literal|"id:"
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
block|,
comment|// 0 or 1 doc...
literal|"id:"
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
block|,
literal|"id:"
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
block|,
literal|"id:"
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
block|,
literal|"id:"
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|200
argument_list|)
block|}
control|)
block|{
comment|// EnumSets use natural ordering, we want to randomize the order of the params
name|List
argument_list|<
name|Stat
argument_list|>
name|combo
init|=
operator|new
name|ArrayList
argument_list|<
name|Stat
argument_list|>
argument_list|(
name|set
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|combo
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|StringBuilder
name|paras
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"{!key=k "
argument_list|)
decl_stmt|;
for|for
control|(
name|Stat
name|stat
range|:
name|combo
control|)
block|{
name|paras
operator|.
name|append
argument_list|(
name|stat
operator|+
literal|"=true "
argument_list|)
expr_stmt|;
block|}
name|paras
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
operator|.
name|append
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|numTotalStatQueries
operator|++
expr_stmt|;
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
name|paras
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// simple assert, mostly relying on comparison with single shard
name|FieldStatsInfo
name|s
init|=
name|rsp
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|"k"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
comment|// TODO: if we had a programatic way to determine what stats are supported
comment|// by what field types, we could make more confident asserts here.
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Sanity check failed: either test broke, or test changed, or you adjusted Stat enum"
operator|+
literal|" (adjust constant accordingly if intentional)"
argument_list|,
literal|5082
argument_list|,
name|numTotalStatQueries
argument_list|)
expr_stmt|;
comment|/*** TODO: the failure may come back in "exception"     try {       // test error produced for field that is invalid for schema       query("q","*:*", "rows",100, "facet","true", "facet.field",invalidField, "facet.mincount",2);       TestCase.fail("SolrServerException expected for invalid field that is not in schema");     } catch (SolrServerException ex) {       // expected     }     ***/
comment|// Try to get better coverage for refinement queries by turning off over requesting.
comment|// This makes it much more likely that we may not get the top facet values and hence
comment|// we turn of that checking.
name|handle
operator|.
name|put
argument_list|(
literal|"facet_fields"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
literal|5
argument_list|,
literal|"facet.shard.limit"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// check a complex key name
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key='$a b/c \\' \\} foo'}"
operator|+
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
literal|5
argument_list|,
literal|"facet.shard.limit"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key='$a'}"
operator|+
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
literal|5
argument_list|,
literal|"facet.shard.limit"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|handle
operator|.
name|remove
argument_list|(
literal|"facet_fields"
argument_list|)
expr_stmt|;
comment|// index the same document to two servers and make sure things
comment|// don't blow up.
if|if
condition|(
name|clients
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
block|{
name|index
argument_list|(
name|id
argument_list|,
literal|100
argument_list|,
name|i1
argument_list|,
literal|107
argument_list|,
name|t1
argument_list|,
literal|"oh no, a duplicate!"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clients
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|index_specific
argument_list|(
name|i
argument_list|,
name|id
argument_list|,
literal|100
argument_list|,
name|i1
argument_list|,
literal|107
argument_list|,
name|t1
argument_list|,
literal|"oh no, a duplicate!"
argument_list|)
expr_stmt|;
block|}
name|commit
argument_list|()
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"duplicate"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"fox duplicate horses"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
comment|//SOLR 3161 ensure shards.qt=/update fails (anything but search handler really)
comment|// Also see TestRemoteStreaming#testQtUpdateFails()
try|try
block|{
name|ignoreException
argument_list|(
literal|"isShard is only acceptable"
argument_list|)
expr_stmt|;
comment|// query("q","*:*","shards.qt","/update","stream.body","<delete><query>*:*</query></delete>");
comment|// fail();
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
comment|//expected
block|}
name|unIgnoreException
argument_list|(
literal|"isShard is only acceptable"
argument_list|)
expr_stmt|;
comment|// test debugging
comment|// handle.put("explain", UNORDERED);
name|handle
operator|.
name|put
argument_list|(
literal|"explain"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
comment|// internal docids differ, idf differs w/o global idf
name|handle
operator|.
name|put
argument_list|(
literal|"debug"
argument_list|,
name|UNORDERED
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"time"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"track"
argument_list|,
name|SKIP
argument_list|)
expr_stmt|;
comment|//track is not included in single node search
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"now their fox sat had put"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
name|CommonParams
operator|.
name|DEBUG_QUERY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"id:[1 TO 5]"
argument_list|,
name|CommonParams
operator|.
name|DEBUG_QUERY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"id:[1 TO 5]"
argument_list|,
name|CommonParams
operator|.
name|DEBUG
argument_list|,
name|CommonParams
operator|.
name|TIMING
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"id:[1 TO 5]"
argument_list|,
name|CommonParams
operator|.
name|DEBUG
argument_list|,
name|CommonParams
operator|.
name|RESULTS
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"id:[1 TO 5]"
argument_list|,
name|CommonParams
operator|.
name|DEBUG
argument_list|,
name|CommonParams
operator|.
name|QUERY
argument_list|)
expr_stmt|;
comment|// SOLR-6545, wild card field list
name|indexr
argument_list|(
name|id
argument_list|,
literal|"19"
argument_list|,
literal|"text"
argument_list|,
literal|"d"
argument_list|,
literal|"cat_a_sS"
argument_list|,
literal|"1"
argument_list|,
name|t1
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"id:19"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"fl"
argument_list|,
literal|"*a_sS"
argument_list|)
expr_stmt|;
name|assertFieldValues
argument_list|(
name|rsp
operator|.
name|getResults
argument_list|()
argument_list|,
literal|"id"
argument_list|,
literal|19
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"id:19"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|t1
operator|+
literal|",cat*"
argument_list|)
expr_stmt|;
name|assertFieldValues
argument_list|(
name|rsp
operator|.
name|getResults
argument_list|()
argument_list|,
literal|"id"
argument_list|,
literal|19
argument_list|)
expr_stmt|;
comment|// Check Info is added to for each shard
name|ModifiableSolrParams
name|q
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|q
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|q
operator|.
name|set
argument_list|(
name|ShardParams
operator|.
name|SHARDS_INFO
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setDistributedParams
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|queryServer
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|?
argument_list|>
name|sinfo
init|=
operator|(
name|NamedList
argument_list|<
name|?
argument_list|>
operator|)
name|rsp
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
name|ShardParams
operator|.
name|SHARDS_INFO
argument_list|)
decl_stmt|;
name|String
name|shards
init|=
name|getShardsString
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
name|StringUtils
operator|.
name|countMatches
argument_list|(
name|shards
argument_list|,
literal|","
argument_list|)
operator|+
literal|1
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"missing shard info"
argument_list|,
name|sinfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"should have an entry for each shard ["
operator|+
name|sinfo
operator|+
literal|"] "
operator|+
name|shards
argument_list|,
name|cnt
argument_list|,
name|sinfo
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// test shards.tolerant=true
for|for
control|(
name|int
name|numDownServers
init|=
literal|0
init|;
name|numDownServers
operator|<
name|jettys
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|numDownServers
operator|++
control|)
block|{
name|List
argument_list|<
name|JettySolrRunner
argument_list|>
name|upJettys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|jettys
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SolrClient
argument_list|>
name|upClients
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|clients
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|JettySolrRunner
argument_list|>
name|downJettys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|upShards
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|shardsArr
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDownServers
condition|;
name|i
operator|++
control|)
block|{
comment|// shut down some of the jettys
name|int
name|indexToRemove
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|upJettys
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|JettySolrRunner
name|downJetty
init|=
name|upJettys
operator|.
name|remove
argument_list|(
name|indexToRemove
argument_list|)
decl_stmt|;
name|upClients
operator|.
name|remove
argument_list|(
name|indexToRemove
argument_list|)
expr_stmt|;
name|upShards
operator|.
name|remove
argument_list|(
name|indexToRemove
argument_list|)
expr_stmt|;
name|ChaosMonkey
operator|.
name|stop
argument_list|(
name|downJetty
argument_list|)
expr_stmt|;
name|downJettys
operator|.
name|add
argument_list|(
name|downJetty
argument_list|)
expr_stmt|;
block|}
name|queryPartialResults
argument_list|(
name|upShards
argument_list|,
name|upClients
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
literal|5
argument_list|,
name|ShardParams
operator|.
name|SHARDS_INFO
argument_list|,
literal|"true"
argument_list|,
name|ShardParams
operator|.
name|SHARDS_TOLERANT
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|queryPartialResults
argument_list|(
name|upShards
argument_list|,
name|upClients
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.query"
argument_list|,
name|i1
operator|+
literal|":[1 TO 50]"
argument_list|,
literal|"facet.query"
argument_list|,
name|i1
operator|+
literal|":[1 TO 50]"
argument_list|,
name|ShardParams
operator|.
name|SHARDS_INFO
argument_list|,
literal|"true"
argument_list|,
name|ShardParams
operator|.
name|SHARDS_TOLERANT
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// test group query
name|queryPartialResults
argument_list|(
name|upShards
argument_list|,
name|upClients
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.query"
argument_list|,
name|t1
operator|+
literal|":kings OR "
operator|+
name|t1
operator|+
literal|":eggs"
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|,
name|CommonParams
operator|.
name|TIME_ALLOWED
argument_list|,
literal|1
argument_list|,
name|ShardParams
operator|.
name|SHARDS_INFO
argument_list|,
literal|"true"
argument_list|,
name|ShardParams
operator|.
name|SHARDS_TOLERANT
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|queryPartialResults
argument_list|(
name|upShards
argument_list|,
name|upClients
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
name|i1
argument_list|,
name|ShardParams
operator|.
name|SHARDS_INFO
argument_list|,
literal|"true"
argument_list|,
name|ShardParams
operator|.
name|SHARDS_TOLERANT
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|queryPartialResults
argument_list|(
name|upShards
argument_list|,
name|upClients
argument_list|,
literal|"q"
argument_list|,
literal|"toyata"
argument_list|,
literal|"spellcheck"
argument_list|,
literal|"true"
argument_list|,
literal|"spellcheck.q"
argument_list|,
literal|"toyata"
argument_list|,
literal|"qt"
argument_list|,
literal|"spellCheckCompRH_Direct"
argument_list|,
literal|"shards.qt"
argument_list|,
literal|"spellCheckCompRH_Direct"
argument_list|,
name|ShardParams
operator|.
name|SHARDS_INFO
argument_list|,
literal|"true"
argument_list|,
name|ShardParams
operator|.
name|SHARDS_TOLERANT
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// restart the jettys
for|for
control|(
name|JettySolrRunner
name|downJetty
range|:
name|downJettys
control|)
block|{
name|downJetty
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
comment|// This index has the same number for every field
comment|// TODO: This test currently fails because debug info is obtained only
comment|// on shards with matches.
comment|// query("q","matchesnothing","fl","*,score", "debugQuery", "true");
comment|// Thread.sleep(10000000000L);
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// delete all docs and test stats request
name|commit
argument_list|()
expr_stmt|;
try|try
block|{
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"stats_dt"
argument_list|,
literal|"stats.field"
argument_list|,
name|i1
argument_list|,
literal|"stats.field"
argument_list|,
name|tdate_a
argument_list|,
literal|"stats.field"
argument_list|,
name|tdate_b
argument_list|,
literal|"stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HttpSolrClient
operator|.
name|RemoteSolrException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"java.lang.NullPointerException"
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"NullPointerException with stats request on empty index"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|String
name|fieldName
init|=
literal|"severity"
decl_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|fieldName
argument_list|,
literal|"Not Available"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
name|fieldName
argument_list|,
literal|"Low"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
name|fieldName
argument_list|,
literal|"Medium"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
name|fieldName
argument_list|,
literal|"High"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
name|fieldName
argument_list|,
literal|"Critical"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|EnumFieldValue
argument_list|(
literal|0
argument_list|,
literal|"Not Available"
argument_list|)
argument_list|,
name|rsp
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
name|fieldName
argument_list|,
name|StatsParams
operator|.
name|STATS_CALC_DISTINCT
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|EnumFieldValue
argument_list|(
literal|4
argument_list|,
literal|"Critical"
argument_list|)
argument_list|,
name|rsp
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"severity"
argument_list|,
name|UNORDERED
argument_list|)
expr_stmt|;
comment|// this is stupid, but stats.facet doesn't garuntee order
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
name|fieldName
argument_list|,
literal|"stats.facet"
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
block|}
DECL|method|checkMinCountsField
specifier|protected
name|void
name|checkMinCountsField
parameter_list|(
name|List
argument_list|<
name|FacetField
operator|.
name|Count
argument_list|>
name|counts
parameter_list|,
name|Object
index|[]
name|pairs
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"There should be exactly "
operator|+
name|pairs
operator|.
name|length
operator|/
literal|2
operator|+
literal|" returned counts. There were: "
operator|+
name|counts
operator|.
name|size
argument_list|()
argument_list|,
name|counts
operator|.
name|size
argument_list|()
argument_list|,
name|pairs
operator|.
name|length
operator|/
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Variable len param must be an even number, it was: "
operator|+
name|pairs
operator|.
name|length
argument_list|,
operator|(
name|pairs
operator|.
name|length
operator|%
literal|2
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|pairs_idx
init|=
literal|0
init|,
name|counts_idx
init|=
literal|0
init|;
name|pairs_idx
operator|<
name|pairs
operator|.
name|length
condition|;
name|pairs_idx
operator|+=
literal|2
operator|,
name|counts_idx
operator|++
control|)
block|{
name|String
name|act_name
init|=
name|counts
operator|.
name|get
argument_list|(
name|counts_idx
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|long
name|act_count
init|=
name|counts
operator|.
name|get
argument_list|(
name|counts_idx
argument_list|)
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|String
name|exp_name
init|=
operator|(
name|String
operator|)
name|pairs
index|[
name|pairs_idx
index|]
decl_stmt|;
name|long
name|exp_count
init|=
operator|(
name|long
operator|)
name|pairs
index|[
name|pairs_idx
operator|+
literal|1
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected ordered entry "
operator|+
name|exp_name
operator|+
literal|" at position "
operator|+
name|counts_idx
operator|+
literal|" got "
operator|+
name|act_name
argument_list|,
name|act_name
argument_list|,
name|exp_name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected count for entry: "
operator|+
name|exp_name
operator|+
literal|" at position "
operator|+
name|counts_idx
operator|+
literal|" got "
operator|+
name|act_count
argument_list|,
name|act_count
argument_list|,
name|exp_count
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkMinCountsRange
specifier|protected
name|void
name|checkMinCountsRange
parameter_list|(
name|List
argument_list|<
name|RangeFacet
operator|.
name|Count
argument_list|>
name|counts
parameter_list|,
name|Object
index|[]
name|pairs
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"There should be exactly "
operator|+
name|pairs
operator|.
name|length
operator|/
literal|2
operator|+
literal|" returned counts. There were: "
operator|+
name|counts
operator|.
name|size
argument_list|()
argument_list|,
name|counts
operator|.
name|size
argument_list|()
argument_list|,
name|pairs
operator|.
name|length
operator|/
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Variable len param must be an even number, it was: "
operator|+
name|pairs
operator|.
name|length
argument_list|,
operator|(
name|pairs
operator|.
name|length
operator|%
literal|2
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|pairs_idx
init|=
literal|0
init|,
name|counts_idx
init|=
literal|0
init|;
name|pairs_idx
operator|<
name|pairs
operator|.
name|length
condition|;
name|pairs_idx
operator|+=
literal|2
operator|,
name|counts_idx
operator|++
control|)
block|{
name|String
name|act_name
init|=
name|counts
operator|.
name|get
argument_list|(
name|counts_idx
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|act_count
init|=
name|counts
operator|.
name|get
argument_list|(
name|counts_idx
argument_list|)
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|String
name|exp_name
init|=
operator|(
name|String
operator|)
name|pairs
index|[
name|pairs_idx
index|]
decl_stmt|;
name|long
name|exp_count
init|=
operator|(
name|long
operator|)
name|pairs
index|[
name|pairs_idx
operator|+
literal|1
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected ordered entry "
operator|+
name|exp_name
operator|+
literal|" at position "
operator|+
name|counts_idx
operator|+
literal|" got "
operator|+
name|act_name
argument_list|,
name|act_name
argument_list|,
name|exp_name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected count for entry: "
operator|+
name|exp_name
operator|+
literal|" at position "
operator|+
name|counts_idx
operator|+
literal|" got "
operator|+
name|act_count
argument_list|,
name|act_count
argument_list|,
name|exp_count
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|queryPartialResults
specifier|protected
name|void
name|queryPartialResults
parameter_list|(
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|upShards
parameter_list|,
specifier|final
name|List
argument_list|<
name|SolrClient
argument_list|>
name|upClients
parameter_list|,
name|Object
modifier|...
name|q
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|q
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|params
operator|.
name|add
argument_list|(
name|q
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|q
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO: look into why passing true causes fails
name|params
operator|.
name|set
argument_list|(
literal|"distrib"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
specifier|final
name|QueryResponse
name|controlRsp
init|=
name|controlClient
operator|.
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
comment|// if time.allowed is specified then even a control response can return a partialResults header
if|if
condition|(
name|params
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|TIME_ALLOWED
argument_list|)
operator|==
literal|null
condition|)
block|{
name|validateControlData
argument_list|(
name|controlRsp
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|remove
argument_list|(
literal|"distrib"
argument_list|)
expr_stmt|;
name|setDistributedParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|queryRandomUpServer
argument_list|(
name|params
argument_list|,
name|upClients
argument_list|)
decl_stmt|;
name|comparePartialResponses
argument_list|(
name|rsp
argument_list|,
name|controlRsp
argument_list|,
name|upShards
argument_list|)
expr_stmt|;
if|if
condition|(
name|stress
operator|>
literal|0
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"starting stress..."
argument_list|)
expr_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|nThreads
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|stress
condition|;
name|j
operator|++
control|)
block|{
name|int
name|which
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|upClients
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|SolrClient
name|client
init|=
name|upClients
operator|.
name|get
argument_list|(
name|which
argument_list|)
decl_stmt|;
try|try
block|{
name|QueryResponse
name|rsp
init|=
name|client
operator|.
name|query
argument_list|(
operator|new
name|ModifiableSolrParams
argument_list|(
name|params
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|verifyStress
condition|)
block|{
name|comparePartialResponses
argument_list|(
name|rsp
argument_list|,
name|controlRsp
argument_list|,
name|upShards
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SolrServerException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|queryRandomUpServer
specifier|protected
name|QueryResponse
name|queryRandomUpServer
parameter_list|(
name|ModifiableSolrParams
name|params
parameter_list|,
name|List
argument_list|<
name|SolrClient
argument_list|>
name|upClients
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
comment|// query a random "up" server
name|int
name|which
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|upClients
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|SolrClient
name|client
init|=
name|upClients
operator|.
name|get
argument_list|(
name|which
argument_list|)
decl_stmt|;
name|QueryResponse
name|rsp
init|=
name|client
operator|.
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
return|return
name|rsp
return|;
block|}
DECL|method|comparePartialResponses
specifier|protected
name|void
name|comparePartialResponses
parameter_list|(
name|QueryResponse
name|rsp
parameter_list|,
name|QueryResponse
name|controlRsp
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|upShards
parameter_list|)
block|{
name|NamedList
argument_list|<
name|?
argument_list|>
name|sinfo
init|=
operator|(
name|NamedList
argument_list|<
name|?
argument_list|>
operator|)
name|rsp
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
name|ShardParams
operator|.
name|SHARDS_INFO
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"missing shard info"
argument_list|,
name|sinfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"should have an entry for each shard ["
operator|+
name|sinfo
operator|+
literal|"] "
operator|+
name|shards
argument_list|,
name|shardsArr
operator|.
name|length
argument_list|,
name|sinfo
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// identify each one
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|sinfo
control|)
block|{
name|String
name|shard
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|NamedList
argument_list|<
name|?
argument_list|>
name|info
init|=
operator|(
name|NamedList
argument_list|<
name|?
argument_list|>
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shardsArr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|s
init|=
name|shardsArr
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|shard
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
comment|// make sure that it responded if it's up
if|if
condition|(
name|upShards
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Expected to find numFound in the up shard info"
argument_list|,
name|info
operator|.
name|get
argument_list|(
literal|"numFound"
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected to find shardAddress in the up shard info"
argument_list|,
name|info
operator|.
name|get
argument_list|(
literal|"shardAddress"
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"Expected to find the partialResults header set if a shard is down"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|rsp
operator|.
name|getHeader
argument_list|()
operator|.
name|get
argument_list|(
literal|"partialResults"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected to find error in the down shard info"
argument_list|,
name|info
operator|.
name|get
argument_list|(
literal|"error"
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertTrue
argument_list|(
literal|"Couldn't find shard "
operator|+
name|shard
operator|+
literal|" represented in shards info"
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|validateControlData
specifier|public
name|void
name|validateControlData
parameter_list|(
name|QueryResponse
name|control
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|validateControlData
argument_list|(
name|control
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Expected the partialResults header to be null"
argument_list|,
name|control
operator|.
name|getHeader
argument_list|()
operator|.
name|get
argument_list|(
literal|"partialResults"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|validateCommonQueryParameters
specifier|private
name|void
name|validateCommonQueryParameters
parameter_list|()
throws|throws
name|Exception
block|{
name|ignoreException
argument_list|(
literal|"parameter cannot be negative"
argument_list|)
expr_stmt|;
try|try
block|{
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setStart
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|setQuery
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|QueryResponse
name|resp
init|=
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected the last query to fail, but got response: "
operator|+
name|resp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
operator|.
name|code
argument_list|,
name|e
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setRows
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|setStart
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|QueryResponse
name|resp
init|=
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected the last query to fail, but got response: "
operator|+
name|resp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
operator|.
name|code
argument_list|,
name|e
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|resetExceptionIgnores
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
