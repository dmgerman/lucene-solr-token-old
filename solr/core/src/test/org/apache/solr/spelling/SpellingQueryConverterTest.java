begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.spelling
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|spelling
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|WhitespaceAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_comment
comment|/**  * Test for SpellingQueryConverter  *  *  * @since solr 1.3  */
end_comment
begin_class
DECL|class|SpellingQueryConverterTest
specifier|public
class|class
name|SpellingQueryConverterTest
extends|extends
name|LuceneTestCase
block|{
annotation|@
name|Test
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|SpellingQueryConverter
name|converter
init|=
operator|new
name|SpellingQueryConverter
argument_list|()
decl_stmt|;
name|converter
operator|.
name|init
argument_list|(
operator|new
name|NamedList
argument_list|()
argument_list|)
expr_stmt|;
name|converter
operator|.
name|setAnalyzer
argument_list|(
operator|new
name|WhitespaceAnalyzer
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|)
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
name|converter
operator|.
name|convert
argument_list|(
literal|"field:foo"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"tokens is null and it shouldn't be"
argument_list|,
name|tokens
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"tokens Size: "
operator|+
name|tokens
operator|.
name|size
argument_list|()
operator|+
literal|" is not: "
operator|+
literal|1
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpecialChars
specifier|public
name|void
name|testSpecialChars
parameter_list|()
block|{
name|SpellingQueryConverter
name|converter
init|=
operator|new
name|SpellingQueryConverter
argument_list|()
decl_stmt|;
name|converter
operator|.
name|init
argument_list|(
operator|new
name|NamedList
argument_list|()
argument_list|)
expr_stmt|;
name|converter
operator|.
name|setAnalyzer
argument_list|(
operator|new
name|WhitespaceAnalyzer
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|original
init|=
literal|"field_with_underscore:value_with_underscore"
decl_stmt|;
name|Collection
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
name|converter
operator|.
name|convert
argument_list|(
name|original
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"tokens is null and it shouldn't be"
argument_list|,
name|tokens
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tokens Size: "
operator|+
name|tokens
operator|.
name|size
argument_list|()
operator|+
literal|" is not 1"
argument_list|,
literal|1
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Token offsets do not match"
argument_list|,
name|isOffsetCorrect
argument_list|(
name|original
argument_list|,
name|tokens
argument_list|)
argument_list|)
expr_stmt|;
name|original
operator|=
literal|"field_with_digits123:value_with_digits123"
expr_stmt|;
name|tokens
operator|=
name|converter
operator|.
name|convert
argument_list|(
name|original
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"tokens is null and it shouldn't be"
argument_list|,
name|tokens
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tokens Size: "
operator|+
name|tokens
operator|.
name|size
argument_list|()
operator|+
literal|" is not 1"
argument_list|,
literal|1
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Token offsets do not match"
argument_list|,
name|isOffsetCorrect
argument_list|(
name|original
argument_list|,
name|tokens
argument_list|)
argument_list|)
expr_stmt|;
name|original
operator|=
literal|"field-with-hyphens:value-with-hyphens"
expr_stmt|;
name|tokens
operator|=
name|converter
operator|.
name|convert
argument_list|(
name|original
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"tokens is null and it shouldn't be"
argument_list|,
name|tokens
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tokens Size: "
operator|+
name|tokens
operator|.
name|size
argument_list|()
operator|+
literal|" is not 1"
argument_list|,
literal|1
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Token offsets do not match"
argument_list|,
name|isOffsetCorrect
argument_list|(
name|original
argument_list|,
name|tokens
argument_list|)
argument_list|)
expr_stmt|;
comment|// mix 'em up and add some to the value
comment|//    original = "field_with-123s:value_,.|with-hyphens";
comment|//    tokens = converter.convert(original);
comment|//    assertTrue("tokens is null and it shouldn't be", tokens != null);
comment|//    assertEquals("tokens Size: " + tokens.size() + " is not 1", 1, tokens.size());
comment|//    assertTrue("Token offsets do not match", isOffsetCorrect(original, tokens));
name|original
operator|=
literal|"foo:bar^5.0"
expr_stmt|;
name|tokens
operator|=
name|converter
operator|.
name|convert
argument_list|(
name|original
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"tokens is null and it shouldn't be"
argument_list|,
name|tokens
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tokens Size: "
operator|+
name|tokens
operator|.
name|size
argument_list|()
operator|+
literal|" is not 1"
argument_list|,
literal|1
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Token offsets do not match"
argument_list|,
name|isOffsetCorrect
argument_list|(
name|original
argument_list|,
name|tokens
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|isOffsetCorrect
specifier|private
name|boolean
name|isOffsetCorrect
parameter_list|(
name|String
name|s
parameter_list|,
name|Collection
argument_list|<
name|Token
argument_list|>
name|tokens
parameter_list|)
block|{
for|for
control|(
name|Token
name|token
range|:
name|tokens
control|)
block|{
name|int
name|start
init|=
name|token
operator|.
name|startOffset
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|token
operator|.
name|endOffset
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
operator|.
name|equals
argument_list|(
name|token
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Test
DECL|method|testUnicode
specifier|public
name|void
name|testUnicode
parameter_list|()
block|{
name|SpellingQueryConverter
name|converter
init|=
operator|new
name|SpellingQueryConverter
argument_list|()
decl_stmt|;
name|converter
operator|.
name|init
argument_list|(
operator|new
name|NamedList
argument_list|()
argument_list|)
expr_stmt|;
name|converter
operator|.
name|setAnalyzer
argument_list|(
operator|new
name|WhitespaceAnalyzer
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|)
argument_list|)
expr_stmt|;
comment|// chinese text value
name|Collection
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
name|converter
operator|.
name|convert
argument_list|(
literal|"text_field:æè´­ä¹°äºéå·åæè£ã"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"tokens is null and it shouldn't be"
argument_list|,
name|tokens
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tokens Size: "
operator|+
name|tokens
operator|.
name|size
argument_list|()
operator|+
literal|" is not 1"
argument_list|,
literal|1
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tokens
operator|=
name|converter
operator|.
name|convert
argument_list|(
literal|"text_è´­field:æè´­ä¹°äºéå·åæè£ã"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"tokens is null and it shouldn't be"
argument_list|,
name|tokens
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tokens Size: "
operator|+
name|tokens
operator|.
name|size
argument_list|()
operator|+
literal|" is not 1"
argument_list|,
literal|1
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tokens
operator|=
name|converter
operator|.
name|convert
argument_list|(
literal|"text_field:æè´­xyzä¹°äºéå·åæè£ã"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"tokens is null and it shouldn't be"
argument_list|,
name|tokens
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tokens Size: "
operator|+
name|tokens
operator|.
name|size
argument_list|()
operator|+
literal|" is not 1"
argument_list|,
literal|1
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleClauses
specifier|public
name|void
name|testMultipleClauses
parameter_list|()
block|{
name|SpellingQueryConverter
name|converter
init|=
operator|new
name|SpellingQueryConverter
argument_list|()
decl_stmt|;
name|converter
operator|.
name|init
argument_list|(
operator|new
name|NamedList
argument_list|()
argument_list|)
expr_stmt|;
name|converter
operator|.
name|setAnalyzer
argument_list|(
operator|new
name|WhitespaceAnalyzer
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|)
argument_list|)
expr_stmt|;
comment|// two field:value pairs should give two tokens
name|Collection
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
name|converter
operator|.
name|convert
argument_list|(
literal|"ä¹°text_field:æè´­ä¹°äºéå·åæè£ã field2:bar"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"tokens is null and it shouldn't be"
argument_list|,
name|tokens
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tokens Size: "
operator|+
name|tokens
operator|.
name|size
argument_list|()
operator|+
literal|" is not 2"
argument_list|,
literal|2
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// a field:value pair and a search term should give two tokens
name|tokens
operator|=
name|converter
operator|.
name|convert
argument_list|(
literal|"text_field:æè´­ä¹°äºéå·åæè£ã bar"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"tokens is null and it shouldn't be"
argument_list|,
name|tokens
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tokens Size: "
operator|+
name|tokens
operator|.
name|size
argument_list|()
operator|+
literal|" is not 2"
argument_list|,
literal|2
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRequiredOrProhibitedFlags
specifier|public
name|void
name|testRequiredOrProhibitedFlags
parameter_list|()
block|{
name|SpellingQueryConverter
name|converter
init|=
operator|new
name|SpellingQueryConverter
argument_list|()
decl_stmt|;
name|converter
operator|.
name|init
argument_list|(
operator|new
name|NamedList
argument_list|()
argument_list|)
expr_stmt|;
name|converter
operator|.
name|setAnalyzer
argument_list|(
operator|new
name|WhitespaceAnalyzer
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|>
argument_list|(
name|converter
operator|.
name|convert
argument_list|(
literal|"aaa bbb ccc"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should have 3 tokens"
argument_list|,
name|tokens
operator|!=
literal|null
operator|&&
name|tokens
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"token 1 should be optional"
argument_list|,
operator|!
name|hasRequiredFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|&&
operator|!
name|hasProhibitedFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"token 2 should be optional"
argument_list|,
operator|!
name|hasRequiredFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|&&
operator|!
name|hasProhibitedFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"token 3 should be optional"
argument_list|,
operator|!
name|hasRequiredFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|&&
operator|!
name|hasProhibitedFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|>
argument_list|(
name|converter
operator|.
name|convert
argument_list|(
literal|"+aaa bbb -ccc"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should have 3 tokens"
argument_list|,
name|tokens
operator|!=
literal|null
operator|&&
name|tokens
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"token 1 should be required"
argument_list|,
name|hasRequiredFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|&&
operator|!
name|hasProhibitedFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"token 2 should be optional"
argument_list|,
operator|!
name|hasRequiredFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|&&
operator|!
name|hasProhibitedFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"token 3 should be prohibited"
argument_list|,
operator|!
name|hasRequiredFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|&&
name|hasProhibitedFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|>
argument_list|(
name|converter
operator|.
name|convert
argument_list|(
literal|"aaa AND bbb ccc"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should have 3 tokens"
argument_list|,
name|tokens
operator|!=
literal|null
operator|&&
name|tokens
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"token 1 doesn't precede n.b.o."
argument_list|,
operator|!
name|hasNBOFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|&&
name|hasInBooleanFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"token 2 doesn't precede n.b.o."
argument_list|,
operator|!
name|hasNBOFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|&&
name|hasInBooleanFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"token 3 doesn't precede n.b.o."
argument_list|,
operator|!
name|hasNBOFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|&&
name|hasInBooleanFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|>
argument_list|(
name|converter
operator|.
name|convert
argument_list|(
literal|"aaa OR bbb OR ccc"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should have 3 tokens"
argument_list|,
name|tokens
operator|!=
literal|null
operator|&&
name|tokens
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"token 1 doesn't precede n.b.o."
argument_list|,
operator|!
name|hasNBOFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|&&
name|hasInBooleanFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"token 2 doesn't precede n.b.o."
argument_list|,
operator|!
name|hasNBOFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|&&
name|hasInBooleanFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"token 3 doesn't precede n.b.o."
argument_list|,
operator|!
name|hasNBOFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|&&
name|hasInBooleanFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|>
argument_list|(
name|converter
operator|.
name|convert
argument_list|(
literal|"aaa AND bbb NOT ccc"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should have 3 tokens"
argument_list|,
name|tokens
operator|!=
literal|null
operator|&&
name|tokens
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"token 1 doesn't precede n.b.o."
argument_list|,
operator|!
name|hasNBOFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|&&
name|hasInBooleanFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"token 2 precedes n.b.o."
argument_list|,
name|hasNBOFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|&&
name|hasInBooleanFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"token 3 doesn't precede n.b.o."
argument_list|,
operator|!
name|hasNBOFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|&&
name|hasInBooleanFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|>
argument_list|(
name|converter
operator|.
name|convert
argument_list|(
literal|"aaa NOT bbb AND ccc"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should have 3 tokens"
argument_list|,
name|tokens
operator|!=
literal|null
operator|&&
name|tokens
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"token 1 precedes n.b.o."
argument_list|,
name|hasNBOFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|&&
name|hasInBooleanFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"token 2 precedes n.b.o."
argument_list|,
name|hasNBOFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|&&
name|hasInBooleanFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"token 3 doesn't precedes n.b.o."
argument_list|,
operator|!
name|hasNBOFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|&&
name|hasInBooleanFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|>
argument_list|(
name|converter
operator|.
name|convert
argument_list|(
literal|"aaa AND NOT bbb AND ccc"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should have 3 tokens"
argument_list|,
name|tokens
operator|!=
literal|null
operator|&&
name|tokens
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"token 1 precedes n.b.o."
argument_list|,
name|hasNBOFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|&&
name|hasInBooleanFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"token 2 precedes n.b.o."
argument_list|,
name|hasNBOFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|&&
name|hasInBooleanFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"token 3 doesn't precedes n.b.o."
argument_list|,
operator|!
name|hasNBOFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|&&
name|hasInBooleanFlag
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|hasRequiredFlag
specifier|private
name|boolean
name|hasRequiredFlag
parameter_list|(
name|Token
name|t
parameter_list|)
block|{
return|return
operator|(
name|t
operator|.
name|getFlags
argument_list|()
operator|&
name|QueryConverter
operator|.
name|REQUIRED_TERM_FLAG
operator|)
operator|==
name|QueryConverter
operator|.
name|REQUIRED_TERM_FLAG
return|;
block|}
DECL|method|hasProhibitedFlag
specifier|private
name|boolean
name|hasProhibitedFlag
parameter_list|(
name|Token
name|t
parameter_list|)
block|{
return|return
operator|(
name|t
operator|.
name|getFlags
argument_list|()
operator|&
name|QueryConverter
operator|.
name|PROHIBITED_TERM_FLAG
operator|)
operator|==
name|QueryConverter
operator|.
name|PROHIBITED_TERM_FLAG
return|;
block|}
DECL|method|hasNBOFlag
specifier|private
name|boolean
name|hasNBOFlag
parameter_list|(
name|Token
name|t
parameter_list|)
block|{
return|return
operator|(
name|t
operator|.
name|getFlags
argument_list|()
operator|&
name|QueryConverter
operator|.
name|TERM_PRECEDES_NEW_BOOLEAN_OPERATOR_FLAG
operator|)
operator|==
name|QueryConverter
operator|.
name|TERM_PRECEDES_NEW_BOOLEAN_OPERATOR_FLAG
return|;
block|}
DECL|method|hasInBooleanFlag
specifier|private
name|boolean
name|hasInBooleanFlag
parameter_list|(
name|Token
name|t
parameter_list|)
block|{
return|return
operator|(
name|t
operator|.
name|getFlags
argument_list|()
operator|&
name|QueryConverter
operator|.
name|TERM_IN_BOOLEAN_QUERY_FLAG
operator|)
operator|==
name|QueryConverter
operator|.
name|TERM_IN_BOOLEAN_QUERY_FLAG
return|;
block|}
block|}
end_class
end_unit
