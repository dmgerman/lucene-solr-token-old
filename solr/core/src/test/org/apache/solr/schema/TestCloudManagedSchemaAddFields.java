begin_unit
begin_package
DECL|package|org.apache.solr.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractFullDistribZkTestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|BaseTestHarness
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RESTfulServerProvider
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RestTestHarness
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|ext
operator|.
name|servlet
operator|.
name|ServerServlet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import
begin_class
DECL|class|TestCloudManagedSchemaAddFields
specifier|public
class|class
name|TestCloudManagedSchemaAddFields
extends|extends
name|AbstractFullDistribZkTestBase
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestCloudManagedSchemaAddField
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|TestCloudManagedSchemaAddFields
specifier|public
name|TestCloudManagedSchemaAddFields
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|fixShardCount
operator|=
literal|true
expr_stmt|;
name|sliceCount
operator|=
literal|4
expr_stmt|;
name|shardCount
operator|=
literal|8
expr_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|initSysProperties
specifier|public
specifier|static
name|void
name|initSysProperties
parameter_list|()
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"managed.schema.mutable"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"enable.update.log"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCloudSolrConfig
specifier|protected
name|String
name|getCloudSolrConfig
parameter_list|()
block|{
return|return
literal|"solrconfig-managed-schema.xml"
return|;
block|}
annotation|@
name|Override
DECL|method|getExtraServlets
specifier|public
name|SortedMap
argument_list|<
name|ServletHolder
argument_list|,
name|String
argument_list|>
name|getExtraServlets
parameter_list|()
block|{
specifier|final
name|SortedMap
argument_list|<
name|ServletHolder
argument_list|,
name|String
argument_list|>
name|extraServlets
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ServletHolder
name|solrRestApi
init|=
operator|new
name|ServletHolder
argument_list|(
literal|"SolrSchemaRestApi"
argument_list|,
name|ServerServlet
operator|.
name|class
argument_list|)
decl_stmt|;
name|solrRestApi
operator|.
name|setInitParameter
argument_list|(
literal|"org.restlet.application"
argument_list|,
literal|"org.apache.solr.rest.SolrSchemaRestApi"
argument_list|)
expr_stmt|;
name|extraServlets
operator|.
name|put
argument_list|(
name|solrRestApi
argument_list|,
literal|"/schema/*"
argument_list|)
expr_stmt|;
comment|// '/schema/*' matches '/schema', '/schema/', and '/schema/whatever...'
return|return
name|extraServlets
return|;
block|}
DECL|field|restTestHarnesses
specifier|private
name|List
argument_list|<
name|RestTestHarness
argument_list|>
name|restTestHarnesses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|setupHarnesses
specifier|private
name|void
name|setupHarnesses
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clients
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|HttpSolrServer
name|client
init|=
operator|(
name|HttpSolrServer
operator|)
name|clients
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|RestTestHarness
name|harness
init|=
operator|new
name|RestTestHarness
argument_list|(
operator|new
name|RESTfulServerProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getBaseURL
parameter_list|()
block|{
return|return
name|client
operator|.
name|getBaseURL
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|restTestHarnesses
operator|.
name|add
argument_list|(
name|harness
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doTest
specifier|public
name|void
name|doTest
parameter_list|()
throws|throws
name|Exception
block|{
name|setupHarnesses
argument_list|()
expr_stmt|;
comment|// First. add a bunch of fields, but do it fast enough
comment|// and verify shards' schemas after all of them are added
name|int
name|numFields
init|=
literal|200
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numFields
condition|;
operator|++
name|i
control|)
block|{
name|RestTestHarness
name|publisher
init|=
name|restTestHarnesses
operator|.
name|get
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|restTestHarnesses
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|newFieldName
init|=
literal|"newfield"
operator|+
name|i
decl_stmt|;
specifier|final
name|String
name|content
init|=
literal|"[{\"name\":\""
operator|+
name|newFieldName
operator|+
literal|"\",\"type\":\"text\",\"stored\":\"false\"}]"
decl_stmt|;
name|String
name|request
init|=
literal|"/schema/fields/?wt=xml"
decl_stmt|;
name|String
name|response
init|=
name|publisher
operator|.
name|post
argument_list|(
name|request
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|String
name|result
init|=
name|publisher
operator|.
name|validateXPath
argument_list|(
name|response
argument_list|,
literal|"/response/lst[@name='responseHeader']/int[@name='status'][.='0']"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|result
condition|)
block|{
name|fail
argument_list|(
literal|"POST REQUEST FAILED: xpath="
operator|+
name|result
operator|+
literal|"  request="
operator|+
name|request
operator|+
literal|"  content="
operator|+
name|content
operator|+
literal|"  response="
operator|+
name|response
argument_list|)
expr_stmt|;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100000
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numFields
condition|;
operator|++
name|i
control|)
block|{
name|String
name|newFieldName
init|=
literal|"newfield"
operator|+
name|i
decl_stmt|;
for|for
control|(
name|RestTestHarness
name|client
range|:
name|restTestHarnesses
control|)
block|{
name|String
name|request
init|=
literal|"/schema/fields/"
operator|+
name|newFieldName
operator|+
literal|"?wt=xml"
decl_stmt|;
name|String
name|response
init|=
name|client
operator|.
name|query
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|String
name|result
init|=
name|client
operator|.
name|validateXPath
argument_list|(
name|response
argument_list|,
literal|"/response/lst[@name='responseHeader']/int[@name='status'][.='0']"
argument_list|,
literal|"/response/lst[@name='field']/str[@name='name'][.='"
operator|+
name|newFieldName
operator|+
literal|"']"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|result
condition|)
block|{
if|if
condition|(
name|response
operator|.
name|contains
argument_list|(
literal|"Field '"
operator|+
name|newFieldName
operator|+
literal|"' not found."
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"QUERY FAILED: xpath="
operator|+
name|result
operator|+
literal|"  request="
operator|+
name|request
operator|+
literal|"  response="
operator|+
name|response
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class
end_unit
