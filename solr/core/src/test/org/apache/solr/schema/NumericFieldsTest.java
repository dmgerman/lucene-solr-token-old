begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|NumericFieldsTest
specifier|public
class|class
name|NumericFieldsTest
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-master.xml"
argument_list|,
literal|"schema-numeric.xml"
argument_list|)
expr_stmt|;
block|}
DECL|field|types
specifier|static
name|String
index|[]
name|types
init|=
operator|new
name|String
index|[]
block|{
literal|"int"
block|,
literal|"long"
block|,
literal|"float"
block|,
literal|"double"
block|,
literal|"date"
block|}
decl_stmt|;
DECL|method|getDoc
specifier|public
specifier|static
name|SolrInputDocument
name|getDoc
parameter_list|(
name|String
name|id
parameter_list|,
name|Integer
name|number
parameter_list|,
name|String
name|date
parameter_list|)
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|t
range|:
name|types
control|)
block|{
if|if
condition|(
literal|"date"
operator|.
name|equals
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|doc
operator|.
name|addField
argument_list|(
name|t
argument_list|,
name|date
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
name|t
operator|+
literal|"_last"
argument_list|,
name|date
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
name|t
operator|+
literal|"_first"
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|addField
argument_list|(
name|t
argument_list|,
name|number
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
name|t
operator|+
literal|"_last"
argument_list|,
name|number
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
name|t
operator|+
literal|"_first"
argument_list|,
name|number
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|doc
return|;
block|}
annotation|@
name|Test
DECL|method|testSortMissingFirstLast
specifier|public
name|void
name|testSortMissingFirstLast
parameter_list|()
block|{
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"M1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|getDoc
argument_list|(
literal|"+4"
argument_list|,
literal|4
argument_list|,
literal|"2011-04-04T00:00:00Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|getDoc
argument_list|(
literal|"+5"
argument_list|,
literal|5
argument_list|,
literal|"2011-05-05T00:00:00Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|getDoc
argument_list|(
literal|"-3"
argument_list|,
operator|-
literal|3
argument_list|,
literal|"2011-01-01T00:00:00Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"M2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// 'normal' sorting.  Missing Values are 0
name|String
name|suffix
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|t
range|:
name|types
control|)
block|{
if|if
condition|(
literal|"date"
operator|.
name|equals
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|assertQ
argument_list|(
literal|"Sorting Asc: "
operator|+
name|t
operator|+
name|suffix
argument_list|,
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
operator|(
name|t
operator|+
name|suffix
operator|)
operator|+
literal|" asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='5']"
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.='M1']"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.='M2']"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.='-3']"
argument_list|,
literal|"//result/doc[4]/str[@name='id'][.='+4']"
argument_list|,
literal|"//result/doc[5]/str[@name='id'][.='+5']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Sorting Desc: "
operator|+
name|t
operator|+
name|suffix
argument_list|,
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
operator|(
name|t
operator|+
name|suffix
operator|)
operator|+
literal|" desc"
argument_list|)
argument_list|,
literal|"//*[@numFound='5']"
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.='+5']"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.='+4']"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.='-3']"
argument_list|,
literal|"//result/doc[4]/str[@name='id'][.='M1']"
argument_list|,
literal|"//result/doc[5]/str[@name='id'][.='M2']"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertQ
argument_list|(
literal|"Sorting Asc: "
operator|+
name|t
operator|+
name|suffix
argument_list|,
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
operator|(
name|t
operator|+
name|suffix
operator|)
operator|+
literal|" asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='5']"
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.='-3']"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.='M1']"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.='M2']"
argument_list|,
literal|"//result/doc[4]/str[@name='id'][.='+4']"
argument_list|,
literal|"//result/doc[5]/str[@name='id'][.='+5']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Sorting Desc: "
operator|+
name|t
operator|+
name|suffix
argument_list|,
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
operator|(
name|t
operator|+
name|suffix
operator|)
operator|+
literal|" desc"
argument_list|)
argument_list|,
literal|"//*[@numFound='5']"
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.='+5']"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.='+4']"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.='M1']"
argument_list|,
literal|"//result/doc[4]/str[@name='id'][.='M2']"
argument_list|,
literal|"//result/doc[5]/str[@name='id'][.='-3']"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// sortMissingLast = true
name|suffix
operator|=
literal|"_last"
expr_stmt|;
for|for
control|(
name|String
name|t
range|:
name|types
control|)
block|{
name|assertQ
argument_list|(
literal|"Sorting Asc: "
operator|+
name|t
operator|+
name|suffix
argument_list|,
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
operator|(
name|t
operator|+
name|suffix
operator|)
operator|+
literal|" asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='5']"
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.='-3']"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.='+4']"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.='+5']"
argument_list|,
literal|"//result/doc[4]/str[@name='id'][.='M1']"
argument_list|,
literal|"//result/doc[5]/str[@name='id'][.='M2']"
argument_list|)
expr_stmt|;
comment|// This does not match
name|assertQ
argument_list|(
literal|"Sorting Desc: "
operator|+
name|t
operator|+
name|suffix
argument_list|,
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
operator|(
name|t
operator|+
name|suffix
operator|)
operator|+
literal|" desc"
argument_list|,
literal|"indent"
argument_list|,
literal|"on"
argument_list|)
argument_list|,
literal|"//*[@numFound='5']"
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.='+5']"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.='+4']"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.='-3']"
argument_list|,
literal|"//result/doc[4]/str[@name='id'][.='M1']"
argument_list|,
literal|"//result/doc[5]/str[@name='id'][.='M2']"
argument_list|)
expr_stmt|;
block|}
comment|// sortMissingFirst = true
name|suffix
operator|=
literal|"_first"
expr_stmt|;
for|for
control|(
name|String
name|t
range|:
name|types
control|)
block|{
name|assertQ
argument_list|(
literal|"Sorting Asc: "
operator|+
name|t
operator|+
name|suffix
argument_list|,
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
operator|(
name|t
operator|+
name|suffix
operator|)
operator|+
literal|" asc"
argument_list|,
literal|"indent"
argument_list|,
literal|"on"
argument_list|)
argument_list|,
literal|"//*[@numFound='5']"
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.='M1']"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.='M2']"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.='-3']"
argument_list|,
literal|"//result/doc[4]/str[@name='id'][.='+4']"
argument_list|,
literal|"//result/doc[5]/str[@name='id'][.='+5']"
argument_list|)
expr_stmt|;
comment|// This does not match
name|assertQ
argument_list|(
literal|"Sorting Desc: "
operator|+
name|t
operator|+
name|suffix
argument_list|,
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
operator|(
name|t
operator|+
name|suffix
operator|)
operator|+
literal|" desc"
argument_list|,
literal|"indent"
argument_list|,
literal|"on"
argument_list|)
argument_list|,
literal|"//*[@numFound='5']"
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.='M1']"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.='M2']"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.='+5']"
argument_list|,
literal|"//result/doc[4]/str[@name='id'][.='+4']"
argument_list|,
literal|"//result/doc[5]/str[@name='id'][.='-3']"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
