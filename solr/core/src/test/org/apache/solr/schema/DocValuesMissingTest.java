begin_unit
begin_package
DECL|package|org.apache.solr.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|SuppressCodecs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_comment
comment|/**  * Tests things like sorting on docvalues with missing values  */
end_comment
begin_class
annotation|@
name|SuppressCodecs
argument_list|(
block|{
literal|"Lucene40"
block|,
literal|"Lucene41"
block|,
literal|"Lucene42"
block|}
argument_list|)
comment|// old formats cannot represent missing values
DECL|class|DocValuesMissingTest
specifier|public
class|class
name|DocValuesMissingTest
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-basic.xml"
argument_list|,
literal|"schema-docValuesMissing.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** float with default lucene sort (treats as 0) */
DECL|method|testFloatSort
specifier|public
name|void
name|testFloatSort
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"-1.3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"4.2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"floatdv asc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=0]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=2]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"floatdv desc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=0]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=1]"
argument_list|)
expr_stmt|;
block|}
comment|/** float with sort missing always first */
DECL|method|testFloatSortMissingFirst
specifier|public
name|void
name|testFloatSortMissingFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"floatdv_missingfirst"
argument_list|,
literal|"-1.3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"floatdv_missingfirst"
argument_list|,
literal|"4.2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"floatdv_missingfirst asc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=0]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=2]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"floatdv_missingfirst desc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=0]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=1]"
argument_list|)
expr_stmt|;
block|}
comment|/** float with sort missing always last */
DECL|method|testFloatSortMissingLast
specifier|public
name|void
name|testFloatSortMissingLast
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"floatdv_missinglast"
argument_list|,
literal|"-1.3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"floatdv_missinglast"
argument_list|,
literal|"4.2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"floatdv_missinglast asc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"floatdv_missinglast desc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=0]"
argument_list|)
expr_stmt|;
block|}
comment|/** float function query based on missing */
DECL|method|testFloatMissingFunction
specifier|public
name|void
name|testFloatMissingFunction
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"-1.3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"4.2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"e:exists(floatdv)"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/bool[@name='e'][.='false']"
argument_list|,
literal|"//result/doc[2]/bool[@name='e'][.='true']"
argument_list|,
literal|"//result/doc[3]/bool[@name='e'][.='true']"
argument_list|)
expr_stmt|;
block|}
comment|/** float missing facet count */
DECL|method|testFloatMissingFacet
specifier|public
name|void
name|testFloatMissingFacet
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"-1.3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"4.2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.missing"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='floatdv']/int[@name='-1.3'][.=1]"
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='floatdv']/int[@name='4.2'][.=1]"
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='floatdv']/int[.=2]"
argument_list|)
expr_stmt|;
block|}
comment|/** int with default lucene sort (treats as 0) */
DECL|method|testIntSort
specifier|public
name|void
name|testIntSort
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"intdv"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"intdv"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"intdv asc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=0]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=2]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"intdv desc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=0]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=1]"
argument_list|)
expr_stmt|;
block|}
comment|/** int with sort missing always first */
DECL|method|testIntSortMissingFirst
specifier|public
name|void
name|testIntSortMissingFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"intdv_missingfirst"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"intdv_missingfirst"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"intdv_missingfirst asc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=0]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=2]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"intdv_missingfirst desc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=0]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=1]"
argument_list|)
expr_stmt|;
block|}
comment|/** int with sort missing always last */
DECL|method|testIntSortMissingLast
specifier|public
name|void
name|testIntSortMissingLast
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"intdv_missinglast"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"intdv_missinglast"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"intdv_missinglast asc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"intdv_missinglast desc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=0]"
argument_list|)
expr_stmt|;
block|}
comment|/** int function query based on missing */
DECL|method|testIntMissingFunction
specifier|public
name|void
name|testIntMissingFunction
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"intdv"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"intdv"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"e:exists(intdv)"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/bool[@name='e'][.='false']"
argument_list|,
literal|"//result/doc[2]/bool[@name='e'][.='true']"
argument_list|,
literal|"//result/doc[3]/bool[@name='e'][.='true']"
argument_list|)
expr_stmt|;
block|}
comment|/** int missing facet count */
DECL|method|testIntMissingFacet
specifier|public
name|void
name|testIntMissingFacet
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"intdv"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"intdv"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"intdv"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.missing"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='intdv']/int[@name='-1'][.=1]"
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='intdv']/int[@name='4'][.=1]"
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='intdv']/int[.=2]"
argument_list|)
expr_stmt|;
block|}
comment|/** double with default lucene sort (treats as 0) */
DECL|method|testDoubleSort
specifier|public
name|void
name|testDoubleSort
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"-1.3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"4.2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"doubledv asc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=0]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=2]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"doubledv desc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=0]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=1]"
argument_list|)
expr_stmt|;
block|}
comment|/** double with sort missing always first */
DECL|method|testDoubleSortMissingFirst
specifier|public
name|void
name|testDoubleSortMissingFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"doubledv_missingfirst"
argument_list|,
literal|"-1.3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"doubledv_missingfirst"
argument_list|,
literal|"4.2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"doubledv_missingfirst asc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=0]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=2]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"doubledv_missingfirst desc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=0]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=1]"
argument_list|)
expr_stmt|;
block|}
comment|/** double with sort missing always last */
DECL|method|testDoubleSortMissingLast
specifier|public
name|void
name|testDoubleSortMissingLast
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"doubledv_missinglast"
argument_list|,
literal|"-1.3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"doubledv_missinglast"
argument_list|,
literal|"4.2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"doubledv_missinglast asc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"doubledv_missinglast desc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=0]"
argument_list|)
expr_stmt|;
block|}
comment|/** double function query based on missing */
DECL|method|testDoubleMissingFunction
specifier|public
name|void
name|testDoubleMissingFunction
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"-1.3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"4.2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"e:exists(doubledv)"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/bool[@name='e'][.='false']"
argument_list|,
literal|"//result/doc[2]/bool[@name='e'][.='true']"
argument_list|,
literal|"//result/doc[3]/bool[@name='e'][.='true']"
argument_list|)
expr_stmt|;
block|}
comment|/** double missing facet count */
DECL|method|testDoubleMissingFacet
specifier|public
name|void
name|testDoubleMissingFacet
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"-1.3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"4.2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.missing"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='doubledv']/int[@name='-1.3'][.=1]"
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='doubledv']/int[@name='4.2'][.=1]"
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='doubledv']/int[.=2]"
argument_list|)
expr_stmt|;
block|}
comment|/** long with default lucene sort (treats as 0) */
DECL|method|testLongSort
specifier|public
name|void
name|testLongSort
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"longdv"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"longdv"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"longdv asc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=0]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=2]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"longdv desc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=0]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=1]"
argument_list|)
expr_stmt|;
block|}
comment|/** long with sort missing always first */
DECL|method|testLongSortMissingFirst
specifier|public
name|void
name|testLongSortMissingFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"longdv_missingfirst"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"longdv_missingfirst"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"longdv_missingfirst asc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=0]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=2]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"longdv_missingfirst desc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=0]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=1]"
argument_list|)
expr_stmt|;
block|}
comment|/** long with sort missing always last */
DECL|method|testLongSortMissingLast
specifier|public
name|void
name|testLongSortMissingLast
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"longdv_missinglast"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"longdv_missinglast"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"longdv_missinglast asc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"longdv_missinglast desc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=0]"
argument_list|)
expr_stmt|;
block|}
comment|/** long function query based on missing */
DECL|method|testLongMissingFunction
specifier|public
name|void
name|testLongMissingFunction
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"longdv"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"longdv"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"e:exists(longdv)"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/bool[@name='e'][.='false']"
argument_list|,
literal|"//result/doc[2]/bool[@name='e'][.='true']"
argument_list|,
literal|"//result/doc[3]/bool[@name='e'][.='true']"
argument_list|)
expr_stmt|;
block|}
comment|/** long missing facet count */
DECL|method|testLongMissingFacet
specifier|public
name|void
name|testLongMissingFacet
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"longdv"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"longdv"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"longdv"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.missing"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='longdv']/int[@name='-1'][.=1]"
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='longdv']/int[@name='4'][.=1]"
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='longdv']/int[.=2]"
argument_list|)
expr_stmt|;
block|}
comment|/** date with default lucene sort (treats as 1970) */
DECL|method|testDateSort
specifier|public
name|void
name|testDateSort
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"datedv"
argument_list|,
literal|"1900-12-31T23:59:59.999Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"datedv"
argument_list|,
literal|"2005-12-31T23:59:59.999Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"datedv asc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=0]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=2]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"datedv desc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=0]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=1]"
argument_list|)
expr_stmt|;
block|}
comment|/** date with sort missing always first */
DECL|method|testDateSortMissingFirst
specifier|public
name|void
name|testDateSortMissingFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"datedv_missingfirst"
argument_list|,
literal|"1900-12-31T23:59:59.999Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"datedv_missingfirst"
argument_list|,
literal|"2005-12-31T23:59:59.999Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"datedv_missingfirst asc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=0]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=2]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"datedv_missingfirst desc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=0]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=1]"
argument_list|)
expr_stmt|;
block|}
comment|/** date with sort missing always last */
DECL|method|testDateSortMissingLast
specifier|public
name|void
name|testDateSortMissingLast
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"datedv_missinglast"
argument_list|,
literal|"1900-12-31T23:59:59.999Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"datedv_missinglast"
argument_list|,
literal|"2005-12-31T23:59:59.999Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"datedv_missinglast asc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"datedv_missinglast desc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=0]"
argument_list|)
expr_stmt|;
block|}
comment|/** date function query based on missing */
DECL|method|testDateMissingFunction
specifier|public
name|void
name|testDateMissingFunction
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"datedv"
argument_list|,
literal|"1900-12-31T23:59:59.999Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"datedv"
argument_list|,
literal|"2005-12-31T23:59:59.999Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"e:exists(datedv)"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/bool[@name='e'][.='false']"
argument_list|,
literal|"//result/doc[2]/bool[@name='e'][.='true']"
argument_list|,
literal|"//result/doc[3]/bool[@name='e'][.='true']"
argument_list|)
expr_stmt|;
block|}
comment|/** date missing facet count */
DECL|method|testDateMissingFacet
specifier|public
name|void
name|testDateMissingFacet
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"datedv"
argument_list|,
literal|"1900-12-31T23:59:59.999Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"datedv"
argument_list|,
literal|"2005-12-31T23:59:59.999Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"datedv"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.missing"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='datedv']/int[@name='1900-12-31T23:59:59.999Z'][.=1]"
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='datedv']/int[@name='2005-12-31T23:59:59.999Z'][.=1]"
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='datedv']/int[.=2]"
argument_list|)
expr_stmt|;
block|}
comment|/** string with default lucene sort (treats as "") */
DECL|method|testStringSort
specifier|public
name|void
name|testStringSort
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"stringdv"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"stringdv"
argument_list|,
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"stringdv asc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=0]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=2]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"stringdv desc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=0]"
argument_list|)
expr_stmt|;
block|}
comment|/** string with sort missing always first */
DECL|method|testStringSortMissingFirst
specifier|public
name|void
name|testStringSortMissingFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"stringdv_missingfirst"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"stringdv_missingfirst"
argument_list|,
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"stringdv_missingfirst asc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=0]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=2]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"stringdv_missingfirst desc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=0]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=1]"
argument_list|)
expr_stmt|;
block|}
comment|/** string with sort missing always last */
DECL|method|testStringSortMissingLast
specifier|public
name|void
name|testStringSortMissingLast
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"stringdv_missinglast"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"stringdv_missinglast"
argument_list|,
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"stringdv_missinglast asc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"stringdv_missinglast desc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.=0]"
argument_list|)
expr_stmt|;
block|}
comment|/** string function query based on missing */
DECL|method|testStringMissingFunction
specifier|public
name|void
name|testStringMissingFunction
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"stringdv"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"stringdv"
argument_list|,
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"e:exists(stringdv)"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/bool[@name='e'][.='false']"
argument_list|,
literal|"//result/doc[2]/bool[@name='e'][.='true']"
argument_list|,
literal|"//result/doc[3]/bool[@name='e'][.='true']"
argument_list|)
expr_stmt|;
block|}
comment|/** string missing facet count */
DECL|method|testStringMissingFacet
specifier|public
name|void
name|testStringMissingFacet
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"stringdv"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"stringdv"
argument_list|,
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"stringdv"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.missing"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='stringdv']/int[@name='a'][.=1]"
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='stringdv']/int[@name='z'][.=1]"
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='stringdv']/int[.=2]"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
