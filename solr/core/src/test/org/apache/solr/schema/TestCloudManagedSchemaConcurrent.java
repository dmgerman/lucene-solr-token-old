begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
package|;
end_package
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractFullDistribZkTestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|BaseTestHarness
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RESTfulServerProvider
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RestTestHarness
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|ext
operator|.
name|servlet
operator|.
name|ServerServlet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_class
DECL|class|TestCloudManagedSchemaConcurrent
specifier|public
class|class
name|TestCloudManagedSchemaConcurrent
extends|extends
name|AbstractFullDistribZkTestBase
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|SUCCESS_XPATH
specifier|private
specifier|static
specifier|final
name|String
name|SUCCESS_XPATH
init|=
literal|"/response/lst[@name='responseHeader']/int[@name='status'][.='0']"
decl_stmt|;
DECL|field|PUT_DYNAMIC_FIELDNAME
specifier|private
specifier|static
specifier|final
name|String
name|PUT_DYNAMIC_FIELDNAME
init|=
literal|"newdynamicfieldPut"
decl_stmt|;
DECL|field|POST_DYNAMIC_FIELDNAME
specifier|private
specifier|static
specifier|final
name|String
name|POST_DYNAMIC_FIELDNAME
init|=
literal|"newdynamicfieldPost"
decl_stmt|;
DECL|field|PUT_FIELDNAME
specifier|private
specifier|static
specifier|final
name|String
name|PUT_FIELDNAME
init|=
literal|"newfieldPut"
decl_stmt|;
DECL|field|POST_FIELDNAME
specifier|private
specifier|static
specifier|final
name|String
name|POST_FIELDNAME
init|=
literal|"newfieldPost"
decl_stmt|;
DECL|field|PUT_FIELDTYPE
specifier|private
specifier|static
specifier|final
name|String
name|PUT_FIELDTYPE
init|=
literal|"newfieldtypePut"
decl_stmt|;
DECL|field|POST_FIELDTYPE
specifier|private
specifier|static
specifier|final
name|String
name|POST_FIELDTYPE
init|=
literal|"newfieldtypePost"
decl_stmt|;
DECL|method|TestCloudManagedSchemaConcurrent
specifier|public
name|TestCloudManagedSchemaConcurrent
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|sliceCount
operator|=
literal|4
expr_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|initSysProperties
specifier|public
specifier|static
name|void
name|initSysProperties
parameter_list|()
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"managed.schema.mutable"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"enable.update.log"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|distribTearDown
specifier|public
name|void
name|distribTearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|distribTearDown
argument_list|()
expr_stmt|;
for|for
control|(
name|RestTestHarness
name|h
range|:
name|restTestHarnesses
control|)
block|{
name|h
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getCloudSolrConfig
specifier|protected
name|String
name|getCloudSolrConfig
parameter_list|()
block|{
return|return
literal|"solrconfig-managed-schema.xml"
return|;
block|}
annotation|@
name|Override
DECL|method|getExtraServlets
specifier|public
name|SortedMap
argument_list|<
name|ServletHolder
argument_list|,
name|String
argument_list|>
name|getExtraServlets
parameter_list|()
block|{
specifier|final
name|SortedMap
argument_list|<
name|ServletHolder
argument_list|,
name|String
argument_list|>
name|extraServlets
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ServletHolder
name|solrRestApi
init|=
operator|new
name|ServletHolder
argument_list|(
literal|"SolrSchemaRestApi"
argument_list|,
name|ServerServlet
operator|.
name|class
argument_list|)
decl_stmt|;
name|solrRestApi
operator|.
name|setInitParameter
argument_list|(
literal|"org.restlet.application"
argument_list|,
literal|"org.apache.solr.rest.SolrSchemaRestApi"
argument_list|)
expr_stmt|;
name|extraServlets
operator|.
name|put
argument_list|(
name|solrRestApi
argument_list|,
literal|"/schema/*"
argument_list|)
expr_stmt|;
comment|// '/schema/*' matches '/schema', '/schema/', and '/schema/whatever...'
return|return
name|extraServlets
return|;
block|}
DECL|field|restTestHarnesses
specifier|private
name|List
argument_list|<
name|RestTestHarness
argument_list|>
name|restTestHarnesses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|setupHarnesses
specifier|private
name|void
name|setupHarnesses
parameter_list|()
block|{
for|for
control|(
specifier|final
name|SolrClient
name|client
range|:
name|clients
control|)
block|{
name|RestTestHarness
name|harness
init|=
operator|new
name|RestTestHarness
argument_list|(
operator|new
name|RESTfulServerProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getBaseURL
parameter_list|()
block|{
return|return
operator|(
operator|(
name|HttpSolrClient
operator|)
name|client
operator|)
operator|.
name|getBaseURL
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|restTestHarnesses
operator|.
name|add
argument_list|(
name|harness
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifySuccess
specifier|private
specifier|static
name|void
name|verifySuccess
parameter_list|(
name|String
name|request
parameter_list|,
name|String
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|result
init|=
name|BaseTestHarness
operator|.
name|validateXPath
argument_list|(
name|response
argument_list|,
name|SUCCESS_XPATH
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|result
condition|)
block|{
name|String
name|msg
init|=
literal|"QUERY FAILED: xpath="
operator|+
name|result
operator|+
literal|"  request="
operator|+
name|request
operator|+
literal|"  response="
operator|+
name|response
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addFieldPut
specifier|private
specifier|static
name|void
name|addFieldPut
parameter_list|(
name|RestTestHarness
name|publisher
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|int
name|updateTimeoutSecs
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|content
init|=
literal|"{\"type\":\"text\",\"stored\":\"false\"}"
decl_stmt|;
name|String
name|request
init|=
literal|"/schema/fields/"
operator|+
name|fieldName
operator|+
literal|"?wt=xml"
decl_stmt|;
if|if
condition|(
name|updateTimeoutSecs
operator|>
literal|0
condition|)
name|request
operator|+=
literal|"&updateTimeoutSecs="
operator|+
name|updateTimeoutSecs
expr_stmt|;
name|String
name|response
init|=
name|publisher
operator|.
name|put
argument_list|(
name|request
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|verifySuccess
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
DECL|method|addFieldPost
specifier|private
specifier|static
name|void
name|addFieldPost
parameter_list|(
name|RestTestHarness
name|publisher
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|int
name|updateTimeoutSecs
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|content
init|=
literal|"[{\"name\":\""
operator|+
name|fieldName
operator|+
literal|"\",\"type\":\"text\",\"stored\":\"false\"}]"
decl_stmt|;
name|String
name|request
init|=
literal|"/schema/fields/?wt=xml"
decl_stmt|;
if|if
condition|(
name|updateTimeoutSecs
operator|>
literal|0
condition|)
name|request
operator|+=
literal|"&updateTimeoutSecs="
operator|+
name|updateTimeoutSecs
expr_stmt|;
name|String
name|response
init|=
name|publisher
operator|.
name|post
argument_list|(
name|request
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|verifySuccess
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
DECL|method|addDynamicFieldPut
specifier|private
specifier|static
name|void
name|addDynamicFieldPut
parameter_list|(
name|RestTestHarness
name|publisher
parameter_list|,
name|String
name|dynamicFieldPattern
parameter_list|,
name|int
name|updateTimeoutSecs
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|content
init|=
literal|"{\"type\":\"text\",\"stored\":\"false\"}"
decl_stmt|;
name|String
name|request
init|=
literal|"/schema/dynamicfields/"
operator|+
name|dynamicFieldPattern
operator|+
literal|"?wt=xml"
decl_stmt|;
if|if
condition|(
name|updateTimeoutSecs
operator|>
literal|0
condition|)
name|request
operator|+=
literal|"&updateTimeoutSecs="
operator|+
name|updateTimeoutSecs
expr_stmt|;
name|String
name|response
init|=
name|publisher
operator|.
name|put
argument_list|(
name|request
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|verifySuccess
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
DECL|method|addDynamicFieldPost
specifier|private
specifier|static
name|void
name|addDynamicFieldPost
parameter_list|(
name|RestTestHarness
name|publisher
parameter_list|,
name|String
name|dynamicFieldPattern
parameter_list|,
name|int
name|updateTimeoutSecs
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|content
init|=
literal|"[{\"name\":\""
operator|+
name|dynamicFieldPattern
operator|+
literal|"\",\"type\":\"text\",\"stored\":\"false\"}]"
decl_stmt|;
name|String
name|request
init|=
literal|"/schema/dynamicfields/?wt=xml"
decl_stmt|;
if|if
condition|(
name|updateTimeoutSecs
operator|>
literal|0
condition|)
name|request
operator|+=
literal|"&updateTimeoutSecs="
operator|+
name|updateTimeoutSecs
expr_stmt|;
name|String
name|response
init|=
name|publisher
operator|.
name|post
argument_list|(
name|request
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|verifySuccess
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
DECL|method|copyField
specifier|private
specifier|static
name|void
name|copyField
parameter_list|(
name|RestTestHarness
name|publisher
parameter_list|,
name|String
name|source
parameter_list|,
name|String
name|dest
parameter_list|,
name|int
name|updateTimeoutSecs
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|content
init|=
literal|"[{\"source\":\""
operator|+
name|source
operator|+
literal|"\",\"dest\":[\""
operator|+
name|dest
operator|+
literal|"\"]}]"
decl_stmt|;
name|String
name|request
init|=
literal|"/schema/copyfields/?wt=xml"
decl_stmt|;
if|if
condition|(
name|updateTimeoutSecs
operator|>
literal|0
condition|)
name|request
operator|+=
literal|"&updateTimeoutSecs="
operator|+
name|updateTimeoutSecs
expr_stmt|;
name|String
name|response
init|=
name|publisher
operator|.
name|post
argument_list|(
name|request
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|verifySuccess
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
DECL|method|addFieldTypePut
specifier|private
specifier|static
name|void
name|addFieldTypePut
parameter_list|(
name|RestTestHarness
name|publisher
parameter_list|,
name|String
name|typeName
parameter_list|,
name|int
name|updateTimeoutSecs
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|content
init|=
literal|"{\"class\":\"solr.TrieIntField\"}"
decl_stmt|;
name|String
name|request
init|=
literal|"/schema/fieldtypes/"
operator|+
name|typeName
operator|+
literal|"?wt=xml"
decl_stmt|;
if|if
condition|(
name|updateTimeoutSecs
operator|>
literal|0
condition|)
name|request
operator|+=
literal|"&updateTimeoutSecs="
operator|+
name|updateTimeoutSecs
expr_stmt|;
name|String
name|response
init|=
name|publisher
operator|.
name|put
argument_list|(
name|request
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|verifySuccess
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
DECL|method|addFieldTypePost
specifier|private
specifier|static
name|void
name|addFieldTypePost
parameter_list|(
name|RestTestHarness
name|publisher
parameter_list|,
name|String
name|typeName
parameter_list|,
name|int
name|updateTimeoutSecs
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|content
init|=
literal|"[{\"name\":\""
operator|+
name|typeName
operator|+
literal|"\",\"class\":\"solr.TrieIntField\"}]"
decl_stmt|;
name|String
name|request
init|=
literal|"/schema/fieldtypes/?wt=xml"
decl_stmt|;
if|if
condition|(
name|updateTimeoutSecs
operator|>
literal|0
condition|)
name|request
operator|+=
literal|"&updateTimeoutSecs="
operator|+
name|updateTimeoutSecs
expr_stmt|;
name|String
name|response
init|=
name|publisher
operator|.
name|post
argument_list|(
name|request
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|verifySuccess
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
DECL|method|getExpectedFieldResponses
specifier|private
name|String
index|[]
name|getExpectedFieldResponses
parameter_list|(
name|Info
name|info
parameter_list|)
block|{
name|String
index|[]
name|expectedAddFields
init|=
operator|new
name|String
index|[
literal|1
operator|+
name|info
operator|.
name|numAddFieldPuts
operator|+
name|info
operator|.
name|numAddFieldPosts
index|]
decl_stmt|;
name|expectedAddFields
index|[
literal|0
index|]
operator|=
name|SUCCESS_XPATH
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|info
operator|.
name|numAddFieldPuts
condition|;
operator|++
name|i
control|)
block|{
name|String
name|newFieldName
init|=
name|PUT_FIELDNAME
operator|+
name|info
operator|.
name|fieldNameSuffix
operator|+
name|i
decl_stmt|;
name|expectedAddFields
index|[
literal|1
operator|+
name|i
index|]
operator|=
literal|"/response/arr[@name='fields']/lst/str[@name='name'][.='"
operator|+
name|newFieldName
operator|+
literal|"']"
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|info
operator|.
name|numAddFieldPosts
condition|;
operator|++
name|i
control|)
block|{
name|String
name|newFieldName
init|=
name|POST_FIELDNAME
operator|+
name|info
operator|.
name|fieldNameSuffix
operator|+
name|i
decl_stmt|;
name|expectedAddFields
index|[
literal|1
operator|+
name|info
operator|.
name|numAddFieldPuts
operator|+
name|i
index|]
operator|=
literal|"/response/arr[@name='fields']/lst/str[@name='name'][.='"
operator|+
name|newFieldName
operator|+
literal|"']"
expr_stmt|;
block|}
return|return
name|expectedAddFields
return|;
block|}
DECL|method|getExpectedDynamicFieldResponses
specifier|private
name|String
index|[]
name|getExpectedDynamicFieldResponses
parameter_list|(
name|Info
name|info
parameter_list|)
block|{
name|String
index|[]
name|expectedAddDynamicFields
init|=
operator|new
name|String
index|[
literal|1
operator|+
name|info
operator|.
name|numAddDynamicFieldPuts
operator|+
name|info
operator|.
name|numAddDynamicFieldPosts
index|]
decl_stmt|;
name|expectedAddDynamicFields
index|[
literal|0
index|]
operator|=
name|SUCCESS_XPATH
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|info
operator|.
name|numAddDynamicFieldPuts
condition|;
operator|++
name|i
control|)
block|{
name|String
name|newDynamicFieldPattern
init|=
name|PUT_DYNAMIC_FIELDNAME
operator|+
name|info
operator|.
name|fieldNameSuffix
operator|+
name|i
operator|+
literal|"_*"
decl_stmt|;
name|expectedAddDynamicFields
index|[
literal|1
operator|+
name|i
index|]
operator|=
literal|"/response/arr[@name='dynamicFields']/lst/str[@name='name'][.='"
operator|+
name|newDynamicFieldPattern
operator|+
literal|"']"
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|info
operator|.
name|numAddDynamicFieldPosts
condition|;
operator|++
name|i
control|)
block|{
name|String
name|newDynamicFieldPattern
init|=
name|POST_DYNAMIC_FIELDNAME
operator|+
name|info
operator|.
name|fieldNameSuffix
operator|+
name|i
operator|+
literal|"_*"
decl_stmt|;
name|expectedAddDynamicFields
index|[
literal|1
operator|+
name|info
operator|.
name|numAddDynamicFieldPuts
operator|+
name|i
index|]
operator|=
literal|"/response/arr[@name='dynamicFields']/lst/str[@name='name'][.='"
operator|+
name|newDynamicFieldPattern
operator|+
literal|"']"
expr_stmt|;
block|}
return|return
name|expectedAddDynamicFields
return|;
block|}
DECL|method|getExpectedCopyFieldResponses
specifier|private
name|String
index|[]
name|getExpectedCopyFieldResponses
parameter_list|(
name|Info
name|info
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|expectedCopyFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedCopyFields
operator|.
name|add
argument_list|(
name|SUCCESS_XPATH
argument_list|)
expr_stmt|;
for|for
control|(
name|CopyFieldInfo
name|cpi
range|:
name|info
operator|.
name|copyFields
control|)
block|{
name|String
name|expectedSourceName
init|=
name|cpi
operator|.
name|getSourceField
argument_list|()
decl_stmt|;
name|expectedCopyFields
operator|.
name|add
argument_list|(
literal|"/response/arr[@name='copyFields']/lst/str[@name='source'][.='"
operator|+
name|expectedSourceName
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|String
name|expectedDestName
init|=
name|cpi
operator|.
name|getDestField
argument_list|()
decl_stmt|;
name|expectedCopyFields
operator|.
name|add
argument_list|(
literal|"/response/arr[@name='copyFields']/lst/str[@name='dest'][.='"
operator|+
name|expectedDestName
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
return|return
name|expectedCopyFields
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|expectedCopyFields
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|getExpectedFieldTypeResponses
specifier|private
name|String
index|[]
name|getExpectedFieldTypeResponses
parameter_list|(
name|Info
name|info
parameter_list|)
block|{
name|String
index|[]
name|expectedAddFieldTypes
init|=
operator|new
name|String
index|[
literal|1
operator|+
name|info
operator|.
name|numAddFieldTypePuts
operator|+
name|info
operator|.
name|numAddFieldTypePosts
index|]
decl_stmt|;
name|expectedAddFieldTypes
index|[
literal|0
index|]
operator|=
name|SUCCESS_XPATH
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|info
operator|.
name|numAddFieldTypePuts
condition|;
operator|++
name|i
control|)
block|{
name|String
name|newFieldTypeName
init|=
name|PUT_FIELDTYPE
operator|+
name|info
operator|.
name|fieldNameSuffix
operator|+
name|i
decl_stmt|;
name|expectedAddFieldTypes
index|[
literal|1
operator|+
name|i
index|]
operator|=
literal|"/response/arr[@name='fieldTypes']/lst/str[@name='name'][.='"
operator|+
name|newFieldTypeName
operator|+
literal|"']"
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|info
operator|.
name|numAddFieldTypePosts
condition|;
operator|++
name|i
control|)
block|{
name|String
name|newFieldTypeName
init|=
name|POST_FIELDTYPE
operator|+
name|info
operator|.
name|fieldNameSuffix
operator|+
name|i
decl_stmt|;
name|expectedAddFieldTypes
index|[
literal|1
operator|+
name|info
operator|.
name|numAddFieldTypePuts
operator|+
name|i
index|]
operator|=
literal|"/response/arr[@name='fieldTypes']/lst/str[@name='name'][.='"
operator|+
name|newFieldTypeName
operator|+
literal|"']"
expr_stmt|;
block|}
return|return
name|expectedAddFieldTypes
return|;
block|}
annotation|@
name|Test
annotation|@
name|ShardsFixed
argument_list|(
name|num
operator|=
literal|8
argument_list|)
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyWaitForSchemaUpdateToPropagate
argument_list|()
expr_stmt|;
name|setupHarnesses
argument_list|()
expr_stmt|;
name|concurrentOperationsTest
argument_list|()
expr_stmt|;
name|schemaLockTest
argument_list|()
expr_stmt|;
block|}
DECL|class|Info
specifier|private
class|class
name|Info
block|{
DECL|field|numAddFieldPuts
name|int
name|numAddFieldPuts
init|=
literal|0
decl_stmt|;
DECL|field|numAddFieldPosts
name|int
name|numAddFieldPosts
init|=
literal|0
decl_stmt|;
DECL|field|numAddDynamicFieldPuts
name|int
name|numAddDynamicFieldPuts
init|=
literal|0
decl_stmt|;
DECL|field|numAddDynamicFieldPosts
name|int
name|numAddDynamicFieldPosts
init|=
literal|0
decl_stmt|;
DECL|field|numAddFieldTypePuts
name|int
name|numAddFieldTypePuts
init|=
literal|0
decl_stmt|;
DECL|field|numAddFieldTypePosts
name|int
name|numAddFieldTypePosts
init|=
literal|0
decl_stmt|;
DECL|field|fieldNameSuffix
specifier|public
name|String
name|fieldNameSuffix
decl_stmt|;
DECL|field|copyFields
name|List
argument_list|<
name|CopyFieldInfo
argument_list|>
name|copyFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|Info
specifier|public
name|Info
parameter_list|(
name|String
name|fieldNameSuffix
parameter_list|)
block|{
name|this
operator|.
name|fieldNameSuffix
operator|=
name|fieldNameSuffix
expr_stmt|;
block|}
block|}
DECL|enum|Operation
specifier|private
enum|enum
name|Operation
block|{
DECL|enum constant|PUT_AddField
name|PUT_AddField
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|RestTestHarness
name|publisher
parameter_list|,
name|int
name|fieldNum
parameter_list|,
name|Info
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|fieldname
init|=
name|PUT_FIELDNAME
operator|+
name|info
operator|.
name|numAddFieldPuts
operator|++
decl_stmt|;
name|addFieldPut
argument_list|(
name|publisher
argument_list|,
name|fieldname
argument_list|,
literal|15
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enum constant|POST_AddField
name|POST_AddField
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|RestTestHarness
name|publisher
parameter_list|,
name|int
name|fieldNum
parameter_list|,
name|Info
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|fieldname
init|=
name|POST_FIELDNAME
operator|+
name|info
operator|.
name|numAddFieldPosts
operator|++
decl_stmt|;
name|addFieldPost
argument_list|(
name|publisher
argument_list|,
name|fieldname
argument_list|,
literal|15
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enum constant|PUT_AddDynamicField
name|PUT_AddDynamicField
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|RestTestHarness
name|publisher
parameter_list|,
name|int
name|fieldNum
parameter_list|,
name|Info
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|addDynamicFieldPut
argument_list|(
name|publisher
argument_list|,
name|PUT_DYNAMIC_FIELDNAME
operator|+
name|info
operator|.
name|numAddDynamicFieldPuts
operator|++
operator|+
literal|"_*"
argument_list|,
literal|15
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enum constant|POST_AddDynamicField
name|POST_AddDynamicField
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|RestTestHarness
name|publisher
parameter_list|,
name|int
name|fieldNum
parameter_list|,
name|Info
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|addDynamicFieldPost
argument_list|(
name|publisher
argument_list|,
name|POST_DYNAMIC_FIELDNAME
operator|+
name|info
operator|.
name|numAddDynamicFieldPosts
operator|++
operator|+
literal|"_*"
argument_list|,
literal|15
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enum constant|POST_AddCopyField
name|POST_AddCopyField
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|RestTestHarness
name|publisher
parameter_list|,
name|int
name|fieldNum
parameter_list|,
name|Info
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|sourceField
init|=
literal|null
decl_stmt|;
name|String
name|destField
init|=
literal|null
decl_stmt|;
name|int
name|sourceType
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceType
operator|==
literal|0
condition|)
block|{
comment|// existing
name|sourceField
operator|=
literal|"name"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sourceType
operator|==
literal|1
condition|)
block|{
comment|// newly created
name|sourceField
operator|=
literal|"copySource"
operator|+
name|fieldNum
expr_stmt|;
name|addFieldPut
argument_list|(
name|publisher
argument_list|,
name|sourceField
argument_list|,
literal|15
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// dynamic
name|sourceField
operator|=
literal|"*_dynamicSource"
operator|+
name|fieldNum
operator|+
literal|"_t"
expr_stmt|;
comment|// * only supported if both src and dst use it
name|destField
operator|=
literal|"*_dynamicDest"
operator|+
name|fieldNum
operator|+
literal|"_t"
expr_stmt|;
block|}
if|if
condition|(
name|destField
operator|==
literal|null
condition|)
block|{
name|int
name|destType
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|destType
operator|==
literal|0
condition|)
block|{
comment|// existing
name|destField
operator|=
literal|"title"
expr_stmt|;
block|}
else|else
block|{
comment|// newly created
name|destField
operator|=
literal|"copyDest"
operator|+
name|fieldNum
expr_stmt|;
name|addFieldPut
argument_list|(
name|publisher
argument_list|,
name|destField
argument_list|,
literal|15
argument_list|)
expr_stmt|;
block|}
block|}
name|copyField
argument_list|(
name|publisher
argument_list|,
name|sourceField
argument_list|,
name|destField
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|info
operator|.
name|copyFields
operator|.
name|add
argument_list|(
operator|new
name|CopyFieldInfo
argument_list|(
name|sourceField
argument_list|,
name|destField
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enum constant|PUT_AddFieldType
name|PUT_AddFieldType
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|RestTestHarness
name|publisher
parameter_list|,
name|int
name|fieldNum
parameter_list|,
name|Info
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|typeName
init|=
name|PUT_FIELDTYPE
operator|+
name|info
operator|.
name|numAddFieldTypePuts
operator|++
decl_stmt|;
name|addFieldTypePut
argument_list|(
name|publisher
argument_list|,
name|typeName
argument_list|,
literal|15
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enum constant|POST_AddFieldType
name|POST_AddFieldType
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|RestTestHarness
name|publisher
parameter_list|,
name|int
name|fieldNum
parameter_list|,
name|Info
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|typeName
init|=
name|POST_FIELDTYPE
operator|+
name|info
operator|.
name|numAddFieldTypePosts
operator|++
decl_stmt|;
name|addFieldTypePost
argument_list|(
name|publisher
argument_list|,
name|typeName
argument_list|,
literal|15
argument_list|)
expr_stmt|;
block|}
block|}
block|;
DECL|method|execute
specifier|public
specifier|abstract
name|void
name|execute
parameter_list|(
name|RestTestHarness
name|publisher
parameter_list|,
name|int
name|fieldNum
parameter_list|,
name|Info
name|info
parameter_list|)
throws|throws
name|Exception
function_decl|;
DECL|field|VALUES
specifier|private
specifier|static
specifier|final
name|Operation
index|[]
name|VALUES
init|=
name|values
argument_list|()
decl_stmt|;
DECL|method|randomOperation
specifier|public
specifier|static
name|Operation
name|randomOperation
parameter_list|()
block|{
return|return
name|VALUES
index|[
name|r
operator|.
name|nextInt
argument_list|(
name|VALUES
operator|.
name|length
argument_list|)
index|]
return|;
block|}
block|}
DECL|method|verifyWaitForSchemaUpdateToPropagate
specifier|private
name|void
name|verifyWaitForSchemaUpdateToPropagate
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testCollectionName
init|=
literal|"collection1"
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|Replica
name|shard1Leader
init|=
name|clusterState
operator|.
name|getLeader
argument_list|(
name|testCollectionName
argument_list|,
literal|"shard1"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|coreUrl
init|=
operator|(
operator|new
name|ZkCoreNodeProps
argument_list|(
name|shard1Leader
argument_list|)
operator|)
operator|.
name|getCoreUrl
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|coreUrl
argument_list|)
expr_stmt|;
name|RestTestHarness
name|harness
init|=
operator|new
name|RestTestHarness
argument_list|(
operator|new
name|RESTfulServerProvider
argument_list|()
block|{
specifier|public
name|String
name|getBaseURL
parameter_list|()
block|{
return|return
name|coreUrl
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|coreUrl
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|coreUrl
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
else|:
name|coreUrl
return|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|addFieldTypePut
argument_list|(
name|harness
argument_list|,
literal|"fooInt"
argument_list|,
literal|15
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|harness
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// go into ZK to get the version of the managed schema after the update
name|SolrZkClient
name|zkClient
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getZkClient
argument_list|()
decl_stmt|;
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
name|String
name|znodePath
init|=
literal|"/configs/conf1/managed-schema"
decl_stmt|;
name|byte
index|[]
name|managedSchemaBytes
init|=
name|zkClient
operator|.
name|getData
argument_list|(
name|znodePath
argument_list|,
literal|null
argument_list|,
name|stat
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|schemaZkVersion
init|=
name|stat
operator|.
name|getVersion
argument_list|()
decl_stmt|;
comment|// now loop over all replicas and verify each has the same schema version
name|Replica
name|randomReplicaNotLeader
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Slice
name|slice
range|:
name|clusterState
operator|.
name|getActiveSlices
argument_list|(
name|testCollectionName
argument_list|)
control|)
block|{
for|for
control|(
name|Replica
name|replica
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
name|validateZkVersion
argument_list|(
name|replica
argument_list|,
name|schemaZkVersion
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// save a random replica to test zk watcher behavior
if|if
condition|(
name|randomReplicaNotLeader
operator|==
literal|null
operator|&&
operator|!
name|replica
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|shard1Leader
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
name|randomReplicaNotLeader
operator|=
name|replica
expr_stmt|;
block|}
block|}
name|assertNotNull
argument_list|(
name|randomReplicaNotLeader
argument_list|)
expr_stmt|;
comment|// now update the data and then verify the znode watcher fires correctly
comment|// before an after a zk session expiration (see SOLR-6249)
name|zkClient
operator|.
name|setData
argument_list|(
name|znodePath
argument_list|,
name|managedSchemaBytes
argument_list|,
name|schemaZkVersion
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|stat
operator|=
operator|new
name|Stat
argument_list|()
expr_stmt|;
name|managedSchemaBytes
operator|=
name|zkClient
operator|.
name|getData
argument_list|(
name|znodePath
argument_list|,
literal|null
argument_list|,
name|stat
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|int
name|updatedSchemaZkVersion
init|=
name|stat
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|updatedSchemaZkVersion
operator|>
name|schemaZkVersion
argument_list|)
expr_stmt|;
name|validateZkVersion
argument_list|(
name|randomReplicaNotLeader
argument_list|,
name|updatedSchemaZkVersion
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// ok - looks like the watcher fired correctly on the replica
comment|// now, expire that replica's zk session and then verify the watcher fires again (after reconnect)
name|JettySolrRunner
name|randomReplicaJetty
init|=
name|getJettyOnPort
argument_list|(
name|getReplicaPort
argument_list|(
name|randomReplicaNotLeader
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|randomReplicaJetty
argument_list|)
expr_stmt|;
name|chaosMonkey
operator|.
name|expireSession
argument_list|(
name|randomReplicaJetty
argument_list|)
expr_stmt|;
comment|// update the data again to cause watchers to fire
name|zkClient
operator|.
name|setData
argument_list|(
name|znodePath
argument_list|,
name|managedSchemaBytes
argument_list|,
name|updatedSchemaZkVersion
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|stat
operator|=
operator|new
name|Stat
argument_list|()
expr_stmt|;
name|managedSchemaBytes
operator|=
name|zkClient
operator|.
name|getData
argument_list|(
name|znodePath
argument_list|,
literal|null
argument_list|,
name|stat
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|updatedSchemaZkVersion
operator|=
name|stat
operator|.
name|getVersion
argument_list|()
expr_stmt|;
comment|// give up to 10 secs for the replica to recover after zk session loss and see the update
name|validateZkVersion
argument_list|(
name|randomReplicaNotLeader
argument_list|,
name|updatedSchemaZkVersion
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sends a GET request to get the zk schema version from a specific replica.    */
DECL|method|validateZkVersion
specifier|protected
name|void
name|validateZkVersion
parameter_list|(
name|Replica
name|replica
parameter_list|,
name|int
name|schemaZkVersion
parameter_list|,
name|int
name|waitSecs
parameter_list|,
name|boolean
name|retry
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|replicaUrl
init|=
operator|(
operator|new
name|ZkCoreNodeProps
argument_list|(
name|replica
argument_list|)
operator|)
operator|.
name|getCoreUrl
argument_list|()
decl_stmt|;
name|RestTestHarness
name|testHarness
init|=
operator|new
name|RestTestHarness
argument_list|(
operator|new
name|RESTfulServerProvider
argument_list|()
block|{
specifier|public
name|String
name|getBaseURL
parameter_list|()
block|{
return|return
name|replicaUrl
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|replicaUrl
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|replicaUrl
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
else|:
name|replicaUrl
return|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|waitMs
init|=
name|waitSecs
operator|*
literal|1000L
decl_stmt|;
if|if
condition|(
name|waitMs
operator|>
literal|0
condition|)
name|Thread
operator|.
name|sleep
argument_list|(
name|waitMs
argument_list|)
expr_stmt|;
comment|// wait a moment for the zk watcher to fire
try|try
block|{
name|testHarness
operator|.
name|validateQuery
argument_list|(
literal|"/schema/zkversion?wt=xml"
argument_list|,
literal|"//zkversion="
operator|+
name|schemaZkVersion
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
if|if
condition|(
name|retry
condition|)
block|{
comment|// brief wait before retrying
name|Thread
operator|.
name|sleep
argument_list|(
name|waitMs
operator|>
literal|0
condition|?
name|waitMs
else|:
literal|2000L
argument_list|)
expr_stmt|;
name|testHarness
operator|.
name|validateQuery
argument_list|(
literal|"/schema/zkversion?wt=xml"
argument_list|,
literal|"//zkversion="
operator|+
name|schemaZkVersion
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|exc
throw|;
block|}
block|}
block|}
finally|finally
block|{
name|testHarness
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|concurrentOperationsTest
specifier|private
name|void
name|concurrentOperationsTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|// First, add a bunch of fields and dynamic fields via PUT and POST, as well as copyFields,
comment|// but do it fast enough and verify shards' schemas after all of them are added
name|int
name|numFields
init|=
literal|100
decl_stmt|;
name|Info
name|info
init|=
operator|new
name|Info
argument_list|(
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|fieldNum
init|=
literal|0
init|;
name|fieldNum
operator|<=
name|numFields
condition|;
operator|++
name|fieldNum
control|)
block|{
name|RestTestHarness
name|publisher
init|=
name|restTestHarnesses
operator|.
name|get
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|restTestHarnesses
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Operation
operator|.
name|randomOperation
argument_list|()
operator|.
name|execute
argument_list|(
name|publisher
argument_list|,
name|fieldNum
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|expectedAddFields
init|=
name|getExpectedFieldResponses
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|String
index|[]
name|expectedAddDynamicFields
init|=
name|getExpectedDynamicFieldResponses
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|String
index|[]
name|expectedCopyFields
init|=
name|getExpectedCopyFieldResponses
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|String
index|[]
name|expectedAddFieldTypes
init|=
name|getExpectedFieldTypeResponses
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|long
name|maxTimeoutMillis
init|=
literal|100000
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|String
name|request
init|=
literal|null
decl_stmt|;
name|String
name|response
init|=
literal|null
decl_stmt|;
name|String
name|result
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|!
name|success
operator|&&
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startTime
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|<
name|maxTimeoutMillis
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
for|for
control|(
name|RestTestHarness
name|client
range|:
name|restTestHarnesses
control|)
block|{
comment|// verify addFieldTypePuts and addFieldTypePosts
name|request
operator|=
literal|"/schema/fieldtypes?wt=xml"
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|query
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|result
operator|=
name|BaseTestHarness
operator|.
name|validateXPath
argument_list|(
name|response
argument_list|,
name|expectedAddFieldTypes
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
comment|// verify addFieldPuts and addFieldPosts
name|request
operator|=
literal|"/schema/fields?wt=xml"
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|query
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|result
operator|=
name|BaseTestHarness
operator|.
name|validateXPath
argument_list|(
name|response
argument_list|,
name|expectedAddFields
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
comment|// verify addDynamicFieldPuts and addDynamicFieldPosts
name|request
operator|=
literal|"/schema/dynamicfields?wt=xml"
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|query
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|result
operator|=
name|BaseTestHarness
operator|.
name|validateXPath
argument_list|(
name|response
argument_list|,
name|expectedAddDynamicFields
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
comment|// verify copyFields
name|request
operator|=
literal|"/schema/copyfields?wt=xml"
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|query
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|result
operator|=
name|BaseTestHarness
operator|.
name|validateXPath
argument_list|(
name|response
argument_list|,
name|expectedCopyFields
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
name|success
operator|=
operator|(
name|result
operator|==
literal|null
operator|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|String
name|msg
init|=
literal|"QUERY FAILED: xpath="
operator|+
name|result
operator|+
literal|"  request="
operator|+
name|request
operator|+
literal|"  response="
operator|+
name|response
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|PutPostThread
specifier|private
specifier|abstract
class|class
name|PutPostThread
extends|extends
name|Thread
block|{
DECL|field|harness
name|RestTestHarness
name|harness
decl_stmt|;
DECL|field|info
name|Info
name|info
decl_stmt|;
DECL|field|fieldName
specifier|public
name|String
name|fieldName
decl_stmt|;
DECL|method|PutPostThread
specifier|public
name|PutPostThread
parameter_list|(
name|RestTestHarness
name|harness
parameter_list|,
name|Info
name|info
parameter_list|)
block|{
name|this
operator|.
name|harness
operator|=
name|harness
expr_stmt|;
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
block|}
DECL|method|run
specifier|public
specifier|abstract
name|void
name|run
parameter_list|()
function_decl|;
block|}
DECL|class|PutFieldThread
specifier|private
class|class
name|PutFieldThread
extends|extends
name|PutPostThread
block|{
DECL|method|PutFieldThread
specifier|public
name|PutFieldThread
parameter_list|(
name|RestTestHarness
name|harness
parameter_list|,
name|Info
name|info
parameter_list|)
block|{
name|super
argument_list|(
name|harness
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|fieldName
operator|=
name|PUT_FIELDNAME
operator|+
literal|"Thread"
operator|+
name|info
operator|.
name|numAddFieldPuts
operator|++
expr_stmt|;
block|}
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// don't have the client side wait for all replicas to see the update or that defeats the purpose
comment|// of testing the locking support on the server-side
name|addFieldPut
argument_list|(
name|harness
argument_list|,
name|fieldName
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// log.error("###ACTUAL FAILURE!");
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|class|PostFieldThread
specifier|private
class|class
name|PostFieldThread
extends|extends
name|PutPostThread
block|{
DECL|method|PostFieldThread
specifier|public
name|PostFieldThread
parameter_list|(
name|RestTestHarness
name|harness
parameter_list|,
name|Info
name|info
parameter_list|)
block|{
name|super
argument_list|(
name|harness
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|fieldName
operator|=
name|POST_FIELDNAME
operator|+
literal|"Thread"
operator|+
name|info
operator|.
name|numAddFieldPosts
operator|++
expr_stmt|;
block|}
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|addFieldPost
argument_list|(
name|harness
argument_list|,
name|fieldName
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// log.error("###ACTUAL FAILURE!");
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|class|PutFieldTypeThread
specifier|private
class|class
name|PutFieldTypeThread
extends|extends
name|PutPostThread
block|{
DECL|method|PutFieldTypeThread
specifier|public
name|PutFieldTypeThread
parameter_list|(
name|RestTestHarness
name|harness
parameter_list|,
name|Info
name|info
parameter_list|)
block|{
name|super
argument_list|(
name|harness
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|fieldName
operator|=
name|PUT_FIELDTYPE
operator|+
literal|"Thread"
operator|+
name|info
operator|.
name|numAddFieldTypePuts
operator|++
expr_stmt|;
block|}
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|addFieldTypePut
argument_list|(
name|harness
argument_list|,
name|fieldName
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// log.error("###ACTUAL FAILURE!");
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|class|PostFieldTypeThread
specifier|private
class|class
name|PostFieldTypeThread
extends|extends
name|PutPostThread
block|{
DECL|method|PostFieldTypeThread
specifier|public
name|PostFieldTypeThread
parameter_list|(
name|RestTestHarness
name|harness
parameter_list|,
name|Info
name|info
parameter_list|)
block|{
name|super
argument_list|(
name|harness
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|fieldName
operator|=
name|POST_FIELDTYPE
operator|+
literal|"Thread"
operator|+
name|info
operator|.
name|numAddFieldTypePosts
operator|++
expr_stmt|;
block|}
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|addFieldTypePost
argument_list|(
name|harness
argument_list|,
name|fieldName
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// log.error("###ACTUAL FAILURE!");
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|class|PutDynamicFieldThread
specifier|private
class|class
name|PutDynamicFieldThread
extends|extends
name|PutPostThread
block|{
DECL|method|PutDynamicFieldThread
specifier|public
name|PutDynamicFieldThread
parameter_list|(
name|RestTestHarness
name|harness
parameter_list|,
name|Info
name|info
parameter_list|)
block|{
name|super
argument_list|(
name|harness
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|fieldName
operator|=
name|PUT_FIELDNAME
operator|+
literal|"Thread"
operator|+
name|info
operator|.
name|numAddFieldPuts
operator|++
expr_stmt|;
block|}
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|addFieldPut
argument_list|(
name|harness
argument_list|,
name|fieldName
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// log.error("###ACTUAL FAILURE!");
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|class|PostDynamicFieldThread
specifier|private
class|class
name|PostDynamicFieldThread
extends|extends
name|PutPostThread
block|{
DECL|method|PostDynamicFieldThread
specifier|public
name|PostDynamicFieldThread
parameter_list|(
name|RestTestHarness
name|harness
parameter_list|,
name|Info
name|info
parameter_list|)
block|{
name|super
argument_list|(
name|harness
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|fieldName
operator|=
name|POST_FIELDNAME
operator|+
literal|"Thread"
operator|+
name|info
operator|.
name|numAddFieldPosts
operator|++
expr_stmt|;
block|}
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|addFieldPost
argument_list|(
name|harness
argument_list|,
name|fieldName
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// log.error("###ACTUAL FAILURE!");
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|schemaLockTest
specifier|private
name|void
name|schemaLockTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|// First, add a bunch of fields via PUT and POST, as well as copyFields,
comment|// but do it fast enough and verify shards' schemas after all of them are added
name|int
name|numFields
init|=
literal|5
decl_stmt|;
name|Info
name|info
init|=
operator|new
name|Info
argument_list|(
literal|"Thread"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|numFields
condition|;
operator|++
name|i
control|)
block|{
comment|// System.err.println("###ITERATION: " + i);
name|RestTestHarness
name|publisher
init|=
name|restTestHarnesses
operator|.
name|get
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|restTestHarnesses
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|PostFieldThread
name|postFieldThread
init|=
operator|new
name|PostFieldThread
argument_list|(
name|publisher
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|postFieldThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|publisher
operator|=
name|restTestHarnesses
operator|.
name|get
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|restTestHarnesses
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PutFieldThread
name|putFieldThread
init|=
operator|new
name|PutFieldThread
argument_list|(
name|publisher
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|putFieldThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|publisher
operator|=
name|restTestHarnesses
operator|.
name|get
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|restTestHarnesses
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PostDynamicFieldThread
name|postDynamicFieldThread
init|=
operator|new
name|PostDynamicFieldThread
argument_list|(
name|publisher
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|postDynamicFieldThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|publisher
operator|=
name|restTestHarnesses
operator|.
name|get
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|restTestHarnesses
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PutDynamicFieldThread
name|putDynamicFieldThread
init|=
operator|new
name|PutDynamicFieldThread
argument_list|(
name|publisher
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|putDynamicFieldThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|publisher
operator|=
name|restTestHarnesses
operator|.
name|get
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|restTestHarnesses
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PostFieldTypeThread
name|postFieldTypeThread
init|=
operator|new
name|PostFieldTypeThread
argument_list|(
name|publisher
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|postFieldTypeThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|publisher
operator|=
name|restTestHarnesses
operator|.
name|get
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|restTestHarnesses
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PutFieldTypeThread
name|putFieldTypeThread
init|=
operator|new
name|PutFieldTypeThread
argument_list|(
name|publisher
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|putFieldTypeThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|postFieldThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|putFieldThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|postDynamicFieldThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|putDynamicFieldThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|postFieldTypeThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|putFieldTypeThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|String
index|[]
name|expectedAddFields
init|=
name|getExpectedFieldResponses
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|String
index|[]
name|expectedAddFieldTypes
init|=
name|getExpectedFieldTypeResponses
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|String
index|[]
name|expectedAddDynamicFields
init|=
name|getExpectedDynamicFieldResponses
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|long
name|maxTimeoutMillis
init|=
literal|100000
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|String
name|request
init|=
literal|null
decl_stmt|;
name|String
name|response
init|=
literal|null
decl_stmt|;
name|String
name|result
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|!
name|success
operator|&&
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startTime
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|<
name|maxTimeoutMillis
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// int j = 0;
for|for
control|(
name|RestTestHarness
name|client
range|:
name|restTestHarnesses
control|)
block|{
comment|// System.err.println("###CHECKING HARNESS: " + j++ + " for iteration: " + i);
comment|// verify addFieldPuts and addFieldPosts
name|request
operator|=
literal|"/schema/fields?wt=xml"
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|query
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|//System.err.println("###RESPONSE: " + response);
name|result
operator|=
name|BaseTestHarness
operator|.
name|validateXPath
argument_list|(
name|response
argument_list|,
name|expectedAddFields
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
comment|// System.err.println("###FAILURE!");
break|break;
block|}
comment|// verify addDynamicFieldPuts and addDynamicFieldPosts
name|request
operator|=
literal|"/schema/dynamicfields?wt=xml"
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|query
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|//System.err.println("###RESPONSE: " + response);
name|result
operator|=
name|BaseTestHarness
operator|.
name|validateXPath
argument_list|(
name|response
argument_list|,
name|expectedAddDynamicFields
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
comment|// System.err.println("###FAILURE!");
break|break;
block|}
name|request
operator|=
literal|"/schema/fieldtypes?wt=xml"
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|query
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|//System.err.println("###RESPONSE: " + response);
name|result
operator|=
name|BaseTestHarness
operator|.
name|validateXPath
argument_list|(
name|response
argument_list|,
name|expectedAddFieldTypes
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
comment|// System.err.println("###FAILURE!");
break|break;
block|}
block|}
name|success
operator|=
operator|(
name|result
operator|==
literal|null
operator|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|String
name|msg
init|=
literal|"QUERY FAILED: xpath="
operator|+
name|result
operator|+
literal|"  request="
operator|+
name|request
operator|+
literal|"  response="
operator|+
name|response
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|CopyFieldInfo
specifier|private
specifier|static
class|class
name|CopyFieldInfo
block|{
DECL|field|sourceField
specifier|private
name|String
name|sourceField
decl_stmt|;
DECL|field|destField
specifier|private
name|String
name|destField
decl_stmt|;
DECL|method|CopyFieldInfo
specifier|public
name|CopyFieldInfo
parameter_list|(
name|String
name|sourceField
parameter_list|,
name|String
name|destField
parameter_list|)
block|{
name|this
operator|.
name|sourceField
operator|=
name|sourceField
expr_stmt|;
name|this
operator|.
name|destField
operator|=
name|destField
expr_stmt|;
block|}
DECL|method|getSourceField
specifier|public
name|String
name|getSourceField
parameter_list|()
block|{
return|return
name|sourceField
return|;
block|}
DECL|method|getDestField
specifier|public
name|String
name|getDestField
parameter_list|()
block|{
return|return
name|destField
return|;
block|}
block|}
block|}
end_class
end_unit
