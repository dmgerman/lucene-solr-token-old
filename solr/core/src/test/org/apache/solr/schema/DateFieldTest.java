begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DateMathParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_class
DECL|class|DateFieldTest
specifier|public
class|class
name|DateFieldTest
extends|extends
name|LuceneTestCase
block|{
DECL|field|UTC
specifier|public
specifier|static
name|TimeZone
name|UTC
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
decl_stmt|;
DECL|field|f
specifier|protected
name|DateField
name|f
init|=
literal|null
decl_stmt|;
DECL|field|p
specifier|protected
name|DateMathParser
name|p
init|=
operator|new
name|DateMathParser
argument_list|(
name|UTC
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|f
operator|=
operator|new
name|DateField
argument_list|()
expr_stmt|;
block|}
DECL|method|assertToI
specifier|public
name|void
name|assertToI
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
name|input
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Input: "
operator|+
name|input
argument_list|,
name|expected
argument_list|,
name|f
operator|.
name|toInternal
argument_list|(
name|input
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertToI
specifier|public
name|void
name|assertToI
parameter_list|(
name|String
name|expected
parameter_list|,
name|long
name|input
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Input: "
operator|+
name|input
argument_list|,
name|expected
argument_list|,
name|f
operator|.
name|toInternal
argument_list|(
operator|new
name|Date
argument_list|(
name|input
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToInternal
specifier|public
name|void
name|testToInternal
parameter_list|()
throws|throws
name|Exception
block|{
name|assertToI
argument_list|(
literal|"1995-12-31T23:59:59.999"
argument_list|,
literal|"1995-12-31T23:59:59.999666Z"
argument_list|)
expr_stmt|;
name|assertToI
argument_list|(
literal|"1995-12-31T23:59:59.999"
argument_list|,
literal|"1995-12-31T23:59:59.999Z"
argument_list|)
expr_stmt|;
name|assertToI
argument_list|(
literal|"1995-12-31T23:59:59.99"
argument_list|,
literal|"1995-12-31T23:59:59.99Z"
argument_list|)
expr_stmt|;
name|assertToI
argument_list|(
literal|"1995-12-31T23:59:59.9"
argument_list|,
literal|"1995-12-31T23:59:59.9Z"
argument_list|)
expr_stmt|;
name|assertToI
argument_list|(
literal|"1995-12-31T23:59:59"
argument_list|,
literal|"1995-12-31T23:59:59Z"
argument_list|)
expr_stmt|;
comment|// here the input isn't in the canonical form, but we should be forgiving
name|assertToI
argument_list|(
literal|"1995-12-31T23:59:59.99"
argument_list|,
literal|"1995-12-31T23:59:59.990Z"
argument_list|)
expr_stmt|;
name|assertToI
argument_list|(
literal|"1995-12-31T23:59:59.9"
argument_list|,
literal|"1995-12-31T23:59:59.900Z"
argument_list|)
expr_stmt|;
name|assertToI
argument_list|(
literal|"1995-12-31T23:59:59.9"
argument_list|,
literal|"1995-12-31T23:59:59.90Z"
argument_list|)
expr_stmt|;
name|assertToI
argument_list|(
literal|"1995-12-31T23:59:59"
argument_list|,
literal|"1995-12-31T23:59:59.000Z"
argument_list|)
expr_stmt|;
name|assertToI
argument_list|(
literal|"1995-12-31T23:59:59"
argument_list|,
literal|"1995-12-31T23:59:59.00Z"
argument_list|)
expr_stmt|;
name|assertToI
argument_list|(
literal|"1995-12-31T23:59:59"
argument_list|,
literal|"1995-12-31T23:59:59.0Z"
argument_list|)
expr_stmt|;
comment|// kind of kludgy, but we have other tests for the actual date math
name|assertToI
argument_list|(
name|f
operator|.
name|toInternal
argument_list|(
name|p
operator|.
name|parseMath
argument_list|(
literal|"/DAY"
argument_list|)
argument_list|)
argument_list|,
literal|"NOW/DAY"
argument_list|)
expr_stmt|;
comment|// as of Solr 1.3
name|assertToI
argument_list|(
literal|"1995-12-31T00:00:00"
argument_list|,
literal|"1995-12-31T23:59:59Z/DAY"
argument_list|)
expr_stmt|;
name|assertToI
argument_list|(
literal|"1995-12-31T00:00:00"
argument_list|,
literal|"1995-12-31T23:59:59.123Z/DAY"
argument_list|)
expr_stmt|;
name|assertToI
argument_list|(
literal|"1995-12-31T00:00:00"
argument_list|,
literal|"1995-12-31T23:59:59.123999Z/DAY"
argument_list|)
expr_stmt|;
block|}
DECL|method|testToInternalObj
specifier|public
name|void
name|testToInternalObj
parameter_list|()
throws|throws
name|Exception
block|{
name|assertToI
argument_list|(
literal|"1995-12-31T23:59:59.999"
argument_list|,
literal|820454399999l
argument_list|)
expr_stmt|;
name|assertToI
argument_list|(
literal|"1995-12-31T23:59:59.99"
argument_list|,
literal|820454399990l
argument_list|)
expr_stmt|;
name|assertToI
argument_list|(
literal|"1995-12-31T23:59:59.9"
argument_list|,
literal|820454399900l
argument_list|)
expr_stmt|;
name|assertToI
argument_list|(
literal|"1995-12-31T23:59:59"
argument_list|,
literal|820454399000l
argument_list|)
expr_stmt|;
block|}
DECL|method|assertParseMath
specifier|public
name|void
name|assertParseMath
parameter_list|(
name|long
name|expected
parameter_list|,
name|String
name|input
parameter_list|)
block|{
name|Date
name|d
init|=
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Input: "
operator|+
name|input
argument_list|,
name|expected
argument_list|,
name|f
operator|.
name|parseMath
argument_list|(
name|d
argument_list|,
name|input
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// as of Solr1.3
DECL|method|testParseMath
specifier|public
name|void
name|testParseMath
parameter_list|()
block|{
name|assertParseMath
argument_list|(
literal|820454699999l
argument_list|,
literal|"1995-12-31T23:59:59.999765Z+5MINUTES"
argument_list|)
expr_stmt|;
name|assertParseMath
argument_list|(
literal|820454699999l
argument_list|,
literal|"1995-12-31T23:59:59.999Z+5MINUTES"
argument_list|)
expr_stmt|;
name|assertParseMath
argument_list|(
literal|820454699990l
argument_list|,
literal|"1995-12-31T23:59:59.99Z+5MINUTES"
argument_list|)
expr_stmt|;
name|assertParseMath
argument_list|(
literal|194918400000l
argument_list|,
literal|"1976-03-06T03:06:00Z/DAY"
argument_list|)
expr_stmt|;
comment|// here the input isn't in the canonical form, but we should be forgiving
name|assertParseMath
argument_list|(
literal|820454699990l
argument_list|,
literal|"1995-12-31T23:59:59.990Z+5MINUTES"
argument_list|)
expr_stmt|;
name|assertParseMath
argument_list|(
literal|194918400000l
argument_list|,
literal|"1976-03-06T03:06:00.0Z/DAY"
argument_list|)
expr_stmt|;
name|assertParseMath
argument_list|(
literal|194918400000l
argument_list|,
literal|"1976-03-06T03:06:00.00Z/DAY"
argument_list|)
expr_stmt|;
name|assertParseMath
argument_list|(
literal|194918400000l
argument_list|,
literal|"1976-03-06T03:06:00.000Z/DAY"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertToObject
specifier|public
name|void
name|assertToObject
parameter_list|(
name|long
name|expected
parameter_list|,
name|String
name|input
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"Input: "
operator|+
name|input
argument_list|,
name|expected
argument_list|,
name|f
operator|.
name|toObject
argument_list|(
name|input
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// as of Solr1.3
DECL|method|testToObject
specifier|public
name|void
name|testToObject
parameter_list|()
throws|throws
name|Exception
block|{
comment|// just after epoch
name|assertToObject
argument_list|(
literal|5L
argument_list|,
literal|"1970-01-01T00:00:00.005Z"
argument_list|)
expr_stmt|;
name|assertToObject
argument_list|(
literal|0L
argument_list|,
literal|"1970-01-01T00:00:00Z"
argument_list|)
expr_stmt|;
name|assertToObject
argument_list|(
literal|370L
argument_list|,
literal|"1970-01-01T00:00:00.37Z"
argument_list|)
expr_stmt|;
name|assertToObject
argument_list|(
literal|900L
argument_list|,
literal|"1970-01-01T00:00:00.9Z"
argument_list|)
expr_stmt|;
comment|// well after epoch
name|assertToObject
argument_list|(
literal|820454399987l
argument_list|,
literal|"1995-12-31T23:59:59.987666Z"
argument_list|)
expr_stmt|;
name|assertToObject
argument_list|(
literal|820454399987l
argument_list|,
literal|"1995-12-31T23:59:59.987Z"
argument_list|)
expr_stmt|;
name|assertToObject
argument_list|(
literal|820454399980l
argument_list|,
literal|"1995-12-31T23:59:59.98Z"
argument_list|)
expr_stmt|;
name|assertToObject
argument_list|(
literal|820454399900l
argument_list|,
literal|"1995-12-31T23:59:59.9Z"
argument_list|)
expr_stmt|;
name|assertToObject
argument_list|(
literal|820454399000l
argument_list|,
literal|"1995-12-31T23:59:59Z"
argument_list|)
expr_stmt|;
comment|// waaaay after epoch
name|assertToObject
argument_list|(
literal|327434918399005L
argument_list|,
literal|"12345-12-31T23:59:59.005Z"
argument_list|)
expr_stmt|;
name|assertToObject
argument_list|(
literal|327434918399000L
argument_list|,
literal|"12345-12-31T23:59:59Z"
argument_list|)
expr_stmt|;
name|assertToObject
argument_list|(
literal|327434918399370L
argument_list|,
literal|"12345-12-31T23:59:59.37Z"
argument_list|)
expr_stmt|;
name|assertToObject
argument_list|(
literal|327434918399900L
argument_list|,
literal|"12345-12-31T23:59:59.9Z"
argument_list|)
expr_stmt|;
comment|// well before epoch
name|assertToObject
argument_list|(
operator|-
literal|52700112001000L
argument_list|,
literal|"0299-12-31T23:59:59Z"
argument_list|)
expr_stmt|;
name|assertToObject
argument_list|(
operator|-
literal|52700112000877L
argument_list|,
literal|"0299-12-31T23:59:59.123Z"
argument_list|)
expr_stmt|;
name|assertToObject
argument_list|(
operator|-
literal|52700112000910L
argument_list|,
literal|"0299-12-31T23:59:59.09Z"
argument_list|)
expr_stmt|;
comment|// flexible in parsing years less then 4 digits
name|assertToObject
argument_list|(
operator|-
literal|52700112001000L
argument_list|,
literal|"299-12-31T23:59:59Z"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFormatter
specifier|public
name|void
name|testFormatter
parameter_list|()
block|{
comment|// just after epoch
name|assertFormat
argument_list|(
literal|"1970-01-01T00:00:00.005"
argument_list|,
literal|5L
argument_list|)
expr_stmt|;
name|assertFormat
argument_list|(
literal|"1970-01-01T00:00:00"
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|assertFormat
argument_list|(
literal|"1970-01-01T00:00:00.37"
argument_list|,
literal|370L
argument_list|)
expr_stmt|;
name|assertFormat
argument_list|(
literal|"1970-01-01T00:00:00.9"
argument_list|,
literal|900L
argument_list|)
expr_stmt|;
comment|// well after epoch
name|assertFormat
argument_list|(
literal|"1999-12-31T23:59:59.005"
argument_list|,
literal|946684799005L
argument_list|)
expr_stmt|;
name|assertFormat
argument_list|(
literal|"1999-12-31T23:59:59"
argument_list|,
literal|946684799000L
argument_list|)
expr_stmt|;
name|assertFormat
argument_list|(
literal|"1999-12-31T23:59:59.37"
argument_list|,
literal|946684799370L
argument_list|)
expr_stmt|;
name|assertFormat
argument_list|(
literal|"1999-12-31T23:59:59.9"
argument_list|,
literal|946684799900L
argument_list|)
expr_stmt|;
comment|// waaaay after epoch
name|assertFormat
argument_list|(
literal|"12345-12-31T23:59:59.005"
argument_list|,
literal|327434918399005L
argument_list|)
expr_stmt|;
name|assertFormat
argument_list|(
literal|"12345-12-31T23:59:59"
argument_list|,
literal|327434918399000L
argument_list|)
expr_stmt|;
name|assertFormat
argument_list|(
literal|"12345-12-31T23:59:59.37"
argument_list|,
literal|327434918399370L
argument_list|)
expr_stmt|;
name|assertFormat
argument_list|(
literal|"12345-12-31T23:59:59.9"
argument_list|,
literal|327434918399900L
argument_list|)
expr_stmt|;
comment|// well before epoch
name|assertFormat
argument_list|(
literal|"0299-12-31T23:59:59"
argument_list|,
operator|-
literal|52700112001000L
argument_list|)
expr_stmt|;
name|assertFormat
argument_list|(
literal|"0299-12-31T23:59:59.123"
argument_list|,
operator|-
literal|52700112000877L
argument_list|)
expr_stmt|;
name|assertFormat
argument_list|(
literal|"0299-12-31T23:59:59.09"
argument_list|,
operator|-
literal|52700112000910L
argument_list|)
expr_stmt|;
block|}
comment|/**     * Using dates in the canonical format, verify that parsing+formating     * is an identify function    */
DECL|method|testRoundTrip
specifier|public
name|void
name|testRoundTrip
parameter_list|()
throws|throws
name|Exception
block|{
comment|// typical dates, various precision
name|assertRoundTrip
argument_list|(
literal|"1995-12-31T23:59:59.987Z"
argument_list|)
expr_stmt|;
name|assertRoundTrip
argument_list|(
literal|"1995-12-31T23:59:59.98Z"
argument_list|)
expr_stmt|;
name|assertRoundTrip
argument_list|(
literal|"1995-12-31T23:59:59.9Z"
argument_list|)
expr_stmt|;
name|assertRoundTrip
argument_list|(
literal|"1995-12-31T23:59:59Z"
argument_list|)
expr_stmt|;
name|assertRoundTrip
argument_list|(
literal|"1976-03-06T03:06:00Z"
argument_list|)
expr_stmt|;
comment|// dates with atypical years
name|assertRoundTrip
argument_list|(
literal|"0001-01-01T01:01:01Z"
argument_list|)
expr_stmt|;
name|assertRoundTrip
argument_list|(
literal|"12021-12-01T03:03:03Z"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"SOLR-2773: Non-Positive years don't work"
argument_list|)
DECL|method|testRoundTripNonPositiveYear
specifier|public
name|void
name|testRoundTripNonPositiveYear
parameter_list|()
throws|throws
name|Exception
block|{
comment|// :TODO: ambiguity about year zero
comment|// assertRoundTrip("0000-04-04T04:04:04Z");
comment|// dates with negative years
name|assertRoundTrip
argument_list|(
literal|"-0005-05-05T05:05:05Z"
argument_list|)
expr_stmt|;
name|assertRoundTrip
argument_list|(
literal|"-2021-12-01T04:04:04Z"
argument_list|)
expr_stmt|;
name|assertRoundTrip
argument_list|(
literal|"-12021-12-01T02:02:02Z"
argument_list|)
expr_stmt|;
comment|// :TODO: assertFormat and assertToObject some negative years
block|}
DECL|method|assertFormat
specifier|protected
name|void
name|assertFormat
parameter_list|(
specifier|final
name|String
name|expected
parameter_list|,
specifier|final
name|long
name|millis
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|f
operator|.
name|formatDate
argument_list|(
operator|new
name|Date
argument_list|(
name|millis
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertRoundTrip
specifier|protected
name|void
name|assertRoundTrip
parameter_list|(
name|String
name|canonicalDate
parameter_list|)
throws|throws
name|Exception
block|{
name|Date
name|d
init|=
name|DateField
operator|.
name|parseDate
argument_list|(
name|canonicalDate
argument_list|)
decl_stmt|;
name|String
name|result
init|=
name|DateField
operator|.
name|formatDate
argument_list|(
name|d
argument_list|)
operator|+
literal|"Z"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"d:"
operator|+
name|d
operator|.
name|getTime
argument_list|()
argument_list|,
name|canonicalDate
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateField
specifier|public
name|void
name|testCreateField
parameter_list|()
block|{
name|int
name|props
init|=
name|FieldProperties
operator|.
name|INDEXED
operator|^
name|FieldProperties
operator|.
name|STORED
decl_stmt|;
name|SchemaField
name|sf
init|=
operator|new
name|SchemaField
argument_list|(
literal|"test"
argument_list|,
name|f
argument_list|,
name|props
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|IndexableField
name|out
init|=
operator|(
name|Field
operator|)
name|f
operator|.
name|createField
argument_list|(
name|sf
argument_list|,
literal|"1995-12-31T23:59:59Z"
argument_list|,
literal|1.0f
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|820454399000l
argument_list|,
name|f
operator|.
name|toObject
argument_list|(
name|out
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|=
operator|(
name|Field
operator|)
name|f
operator|.
name|createField
argument_list|(
name|sf
argument_list|,
operator|new
name|Date
argument_list|(
literal|820454399000l
argument_list|)
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|820454399000l
argument_list|,
name|f
operator|.
name|toObject
argument_list|(
name|out
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
