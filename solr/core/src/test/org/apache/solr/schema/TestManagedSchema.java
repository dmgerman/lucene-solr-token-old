begin_unit
begin_package
DECL|package|org.apache.solr.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|AbstractBadConfigTestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|CoreAdminHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_class
DECL|class|TestManagedSchema
specifier|public
class|class
name|TestManagedSchema
extends|extends
name|AbstractBadConfigTestBase
block|{
DECL|field|tmpSolrHome
specifier|private
specifier|static
name|File
name|tmpSolrHome
decl_stmt|;
DECL|field|tmpConfDir
specifier|private
specifier|static
name|File
name|tmpConfDir
decl_stmt|;
DECL|field|collection
specifier|private
specifier|static
specifier|final
name|String
name|collection
init|=
literal|"collection1"
decl_stmt|;
DECL|field|confDir
specifier|private
specifier|static
specifier|final
name|String
name|confDir
init|=
name|collection
operator|+
literal|"/conf"
decl_stmt|;
annotation|@
name|Before
DECL|method|initManagedSchemaCore
specifier|private
name|void
name|initManagedSchemaCore
parameter_list|()
throws|throws
name|Exception
block|{
name|createTempDir
argument_list|()
expr_stmt|;
specifier|final
name|String
name|tmpSolrHomePath
init|=
name|TEMP_DIR
operator|+
name|File
operator|.
name|separator
operator|+
name|TestManagedSchema
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|tmpSolrHome
operator|=
operator|new
name|File
argument_list|(
name|tmpSolrHomePath
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
name|tmpConfDir
operator|=
operator|new
name|File
argument_list|(
name|tmpSolrHome
argument_list|,
name|confDir
argument_list|)
expr_stmt|;
name|File
name|testHomeConfDir
init|=
operator|new
name|File
argument_list|(
name|TEST_HOME
argument_list|()
argument_list|,
name|confDir
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|copyFileToDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|testHomeConfDir
argument_list|,
literal|"solrconfig-managed-schema.xml"
argument_list|)
argument_list|,
name|tmpConfDir
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFileToDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|testHomeConfDir
argument_list|,
literal|"solrconfig-basic.xml"
argument_list|)
argument_list|,
name|tmpConfDir
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFileToDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|testHomeConfDir
argument_list|,
literal|"schema-minimal.xml"
argument_list|)
argument_list|,
name|tmpConfDir
argument_list|)
expr_stmt|;
comment|// initCore will trigger an upgrade to managed schema, since the solrconfig has
comment|//<schemaFactory class="ManagedIndexSchemaFactory" ... />
name|initCore
argument_list|(
literal|"solrconfig-managed-schema.xml"
argument_list|,
literal|"schema-minimal.xml"
argument_list|,
name|tmpSolrHome
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|deleteCoreAndTempSolrHomeDirectory
specifier|private
name|void
name|deleteCoreAndTempSolrHomeDirectory
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteCore
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|tmpSolrHome
argument_list|)
expr_stmt|;
block|}
DECL|method|testUpgrade
specifier|public
name|void
name|testUpgrade
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|managedSchemaFile
init|=
operator|new
name|File
argument_list|(
name|tmpConfDir
argument_list|,
literal|"managed-schema"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|managedSchemaFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|managedSchema
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|managedSchemaFile
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|managedSchema
operator|.
name|contains
argument_list|(
literal|"DO NOT EDIT"
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|upgradedOriginalSchemaFile
init|=
operator|new
name|File
argument_list|(
name|tmpConfDir
argument_list|,
literal|"schema-minimal.xml.bak"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|upgradedOriginalSchemaFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertSchemaResource
argument_list|(
name|collection
argument_list|,
literal|"managed-schema"
argument_list|)
expr_stmt|;
block|}
DECL|method|testUpgradeThenRestart
specifier|public
name|void
name|testUpgradeThenRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|assertSchemaResource
argument_list|(
name|collection
argument_list|,
literal|"managed-schema"
argument_list|)
expr_stmt|;
name|deleteCore
argument_list|()
expr_stmt|;
name|File
name|nonManagedSchemaFile
init|=
operator|new
name|File
argument_list|(
name|tmpConfDir
argument_list|,
literal|"schema-minimal.xml"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|nonManagedSchemaFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|initCore
argument_list|(
literal|"solrconfig-managed-schema.xml"
argument_list|,
literal|"schema-minimal.xml"
argument_list|,
name|tmpSolrHome
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|managedSchemaFile
init|=
operator|new
name|File
argument_list|(
name|tmpConfDir
argument_list|,
literal|"managed-schema"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|managedSchemaFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|managedSchema
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|managedSchemaFile
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|managedSchema
operator|.
name|contains
argument_list|(
literal|"DO NOT EDIT"
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|upgradedOriginalSchemaFile
init|=
operator|new
name|File
argument_list|(
name|tmpConfDir
argument_list|,
literal|"schema-minimal.xml.bak"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|upgradedOriginalSchemaFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertSchemaResource
argument_list|(
name|collection
argument_list|,
literal|"managed-schema"
argument_list|)
expr_stmt|;
block|}
DECL|method|testUpgradeThenRestartNonManaged
specifier|public
name|void
name|testUpgradeThenRestartNonManaged
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteCore
argument_list|()
expr_stmt|;
comment|// After upgrade to managed schema, fail to restart when solrconfig doesn't contain
comment|//<schemaFactory class="ManagedIndexSchemaFactory">...</schemaFactory>
name|assertConfigs
argument_list|(
literal|"solrconfig-basic.xml"
argument_list|,
literal|"schema-minimal.xml"
argument_list|,
name|tmpSolrHome
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"Can't find resource 'schema-minimal.xml'"
argument_list|)
expr_stmt|;
block|}
DECL|method|testUpgradeThenRestartNonManagedAfterPuttingBackNonManagedSchema
specifier|public
name|void
name|testUpgradeThenRestartNonManagedAfterPuttingBackNonManagedSchema
parameter_list|()
throws|throws
name|Exception
block|{
name|assertSchemaResource
argument_list|(
name|collection
argument_list|,
literal|"managed-schema"
argument_list|)
expr_stmt|;
name|deleteCore
argument_list|()
expr_stmt|;
name|File
name|nonManagedSchemaFile
init|=
operator|new
name|File
argument_list|(
name|tmpConfDir
argument_list|,
literal|"schema-minimal.xml"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|nonManagedSchemaFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|upgradedOriginalSchemaFile
init|=
operator|new
name|File
argument_list|(
name|tmpConfDir
argument_list|,
literal|"schema-minimal.xml.bak"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|upgradedOriginalSchemaFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// After upgrade to managed schema, downgrading to non-managed should work after putting back the non-managed schema.
name|FileUtils
operator|.
name|moveFile
argument_list|(
name|upgradedOriginalSchemaFile
argument_list|,
name|nonManagedSchemaFile
argument_list|)
expr_stmt|;
name|initCore
argument_list|(
literal|"solrconfig-basic.xml"
argument_list|,
literal|"schema-minimal.xml"
argument_list|,
name|tmpSolrHome
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertSchemaResource
argument_list|(
name|collection
argument_list|,
literal|"schema-minimal.xml"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSchemaResource
specifier|private
name|void
name|assertSchemaResource
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|expectedSchemaResource
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|CoreContainer
name|cores
init|=
name|h
operator|.
name|getCoreContainer
argument_list|()
decl_stmt|;
name|cores
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|CoreAdminHandler
name|admin
init|=
operator|new
name|CoreAdminHandler
argument_list|(
name|cores
argument_list|)
decl_stmt|;
name|SolrQueryRequest
name|request
init|=
name|req
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminParams
operator|.
name|CoreAdminAction
operator|.
name|STATUS
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SolrQueryResponse
name|response
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
name|admin
operator|.
name|handleRequestBody
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Exception on create"
argument_list|,
name|response
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|NamedList
name|responseValues
init|=
name|response
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|NamedList
name|status
init|=
operator|(
name|NamedList
operator|)
name|responseValues
operator|.
name|get
argument_list|(
literal|"status"
argument_list|)
decl_stmt|;
name|NamedList
name|collectionStatus
init|=
operator|(
name|NamedList
operator|)
name|status
operator|.
name|get
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|String
name|collectionSchema
init|=
operator|(
name|String
operator|)
name|collectionStatus
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|SCHEMA
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Schema resource name differs from expected name"
argument_list|,
name|expectedSchemaResource
argument_list|,
name|collectionSchema
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
