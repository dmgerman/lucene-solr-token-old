begin_unit
begin_package
DECL|package|org.apache.solr.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|DateRangeFieldTest
specifier|public
class|class
name|DateRangeFieldTest
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
block|}
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
block|{
name|assertU
argument_list|(
name|delQ
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|,
literal|"dateRange"
argument_list|,
literal|"[* TO *]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"dateRange"
argument_list|,
literal|"2014-05-21T12:00:00.000Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"dateRange"
argument_list|,
literal|"[2000 TO 2014-05-21]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|//ensure stored value is the same (not toString of Shape)
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|,
literal|"fl"
argument_list|,
literal|"dateRange"
argument_list|)
argument_list|,
literal|"//result/doc/arr[@name='dateRange']/str[.='2014-05-21T12:00:00.000Z']"
argument_list|)
expr_stmt|;
name|String
index|[]
name|commonParams
init|=
block|{
literal|"q"
block|,
literal|"{!field f=dateRange op=$op v=$qq}"
block|,
literal|"sort"
block|,
literal|"id asc"
block|}
decl_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|commonParams
argument_list|,
literal|"qq"
argument_list|,
literal|"[* TO *]"
argument_list|)
argument_list|,
name|xpathMatches
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|commonParams
argument_list|,
literal|"qq"
argument_list|,
literal|"2012"
argument_list|)
argument_list|,
name|xpathMatches
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|commonParams
argument_list|,
literal|"qq"
argument_list|,
literal|"2013"
argument_list|,
literal|"op"
argument_list|,
literal|"Contains"
argument_list|)
argument_list|,
name|xpathMatches
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|commonParams
argument_list|,
literal|"qq"
argument_list|,
literal|"2014"
argument_list|,
literal|"op"
argument_list|,
literal|"Contains"
argument_list|)
argument_list|,
name|xpathMatches
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|commonParams
argument_list|,
literal|"qq"
argument_list|,
literal|"[1999 TO 2001]"
argument_list|,
literal|"op"
argument_list|,
literal|"IsWithin"
argument_list|)
argument_list|,
name|xpathMatches
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|commonParams
argument_list|,
literal|"qq"
argument_list|,
literal|"2014-05"
argument_list|,
literal|"op"
argument_list|,
literal|"IsWithin"
argument_list|)
argument_list|,
name|xpathMatches
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|//show without local-params
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"dateRange:\"2014-05-21T12:00:00.000Z\""
argument_list|)
argument_list|,
name|xpathMatches
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"dateRange:[1999 TO 2001]"
argument_list|)
argument_list|,
name|xpathMatches
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiValuedDateRanges
specifier|public
name|void
name|testMultiValuedDateRanges
parameter_list|()
block|{
name|assertU
argument_list|(
name|delQ
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|,
literal|"dateRange"
argument_list|,
literal|"[2000 TO 2010]"
argument_list|,
literal|"dateRange"
argument_list|,
literal|"[2011 TO 2014]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"dateRange"
argument_list|,
literal|"[2000-01 TO 2010-10]"
argument_list|,
literal|"dateRange"
argument_list|,
literal|"[2010-11 TO 2014-12]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"dateRange"
argument_list|,
literal|"[2000-01-01 TO 2010-08-01]"
argument_list|,
literal|"dateRange"
argument_list|,
literal|"[2010-08-01 TO 2014-12-01]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"dateRange"
argument_list|,
literal|"[1990 TO 1995]"
argument_list|,
literal|"dateRange"
argument_list|,
literal|"[1997 TO 1999]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|commonParams
init|=
block|{
literal|"q"
block|,
literal|"{!field f=dateRange op=$op v=$qq}"
block|,
literal|"sort"
block|,
literal|"id asc"
block|}
decl_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|commonParams
argument_list|,
literal|"qq"
argument_list|,
literal|"[2000 TO 2014]"
argument_list|,
literal|"op"
argument_list|,
literal|"IsWithin"
argument_list|)
argument_list|,
name|xpathMatches
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|commonParams
argument_list|,
literal|"qq"
argument_list|,
literal|"[2000 TO 2013]"
argument_list|,
literal|"op"
argument_list|,
literal|"IsWithin"
argument_list|)
argument_list|,
name|xpathMatches
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|commonParams
argument_list|,
literal|"qq"
argument_list|,
literal|"[2000 TO 2014]"
argument_list|,
literal|"op"
argument_list|,
literal|"Contains"
argument_list|)
argument_list|,
name|xpathMatches
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|commonParams
argument_list|,
literal|"qq"
argument_list|,
literal|"[2000 TO 2015]"
argument_list|,
literal|"op"
argument_list|,
literal|"Contains"
argument_list|)
argument_list|,
name|xpathMatches
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|commonParams
argument_list|,
literal|"qq"
argument_list|,
literal|"[2000-01 TO 2014-12]"
argument_list|,
literal|"op"
argument_list|,
literal|"IsWithin"
argument_list|)
argument_list|,
name|xpathMatches
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|commonParams
argument_list|,
literal|"qq"
argument_list|,
literal|"[2000 TO 2014-11]"
argument_list|,
literal|"op"
argument_list|,
literal|"IsWithin"
argument_list|)
argument_list|,
name|xpathMatches
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|commonParams
argument_list|,
literal|"qq"
argument_list|,
literal|"[2000-01 TO 2014-12]"
argument_list|,
literal|"op"
argument_list|,
literal|"Contains"
argument_list|)
argument_list|,
name|xpathMatches
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|commonParams
argument_list|,
literal|"qq"
argument_list|,
literal|"[2000-01-01 TO 2014-12-31]"
argument_list|,
literal|"op"
argument_list|,
literal|"IsWithin"
argument_list|)
argument_list|,
name|xpathMatches
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|commonParams
argument_list|,
literal|"qq"
argument_list|,
literal|"[2000-01-01 TO 2014-12-01]"
argument_list|,
literal|"op"
argument_list|,
literal|"Contains"
argument_list|)
argument_list|,
name|xpathMatches
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|commonParams
argument_list|,
literal|"qq"
argument_list|,
literal|"[2000 TO 2000]"
argument_list|,
literal|"op"
argument_list|,
literal|"Contains"
argument_list|)
argument_list|,
name|xpathMatches
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|commonParams
argument_list|,
literal|"qq"
argument_list|,
literal|"[2000 TO 2000]"
argument_list|,
literal|"op"
argument_list|,
literal|"Contains"
argument_list|)
argument_list|,
name|xpathMatches
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|commonParams
argument_list|,
literal|"qq"
argument_list|,
literal|"[1996-01-01 TO 1996-12-31]"
argument_list|,
literal|"op"
argument_list|,
literal|"Contains"
argument_list|)
argument_list|,
name|xpathMatches
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|xpathMatches
specifier|private
name|String
index|[]
name|xpathMatches
parameter_list|(
name|int
modifier|...
name|docIds
parameter_list|)
block|{
name|String
index|[]
name|tests
init|=
operator|new
name|String
index|[
name|docIds
operator|!=
literal|null
condition|?
name|docIds
operator|.
name|length
operator|+
literal|1
else|:
literal|1
index|]
decl_stmt|;
name|tests
index|[
literal|0
index|]
operator|=
literal|"*[count(//doc)="
operator|+
operator|(
name|tests
operator|.
name|length
operator|-
literal|1
operator|)
operator|+
literal|"]"
expr_stmt|;
if|if
condition|(
name|docIds
operator|!=
literal|null
operator|&&
name|docIds
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|int
name|i
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|docId
range|:
name|docIds
control|)
block|{
name|tests
index|[
name|i
operator|++
index|]
operator|=
literal|"//result/doc/int[@name='id'][.='"
operator|+
name|docId
operator|+
literal|"']"
expr_stmt|;
block|}
block|}
return|return
name|tests
return|;
block|}
block|}
end_class
end_unit
