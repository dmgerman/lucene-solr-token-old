begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValuesType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|FunctionValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import
begin_class
DECL|class|DocValuesTest
specifier|public
class|class
name|DocValuesTest
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeTests
specifier|public
specifier|static
name|void
name|beforeTests
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-basic.xml"
argument_list|,
literal|"schema-docValues.xml"
argument_list|)
expr_stmt|;
comment|// sanity check our schema meets our expectations
specifier|final
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
operator|new
name|String
index|[]
block|{
literal|"floatdv"
block|,
literal|"intdv"
block|,
literal|"doubledv"
block|,
literal|"longdv"
block|,
literal|"datedv"
block|,
literal|"stringdv"
block|}
control|)
block|{
specifier|final
name|SchemaField
name|sf
init|=
name|schema
operator|.
name|getField
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|f
operator|+
literal|" is multiValued, test is useless, who changed the schema?"
argument_list|,
name|sf
operator|.
name|multiValued
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|f
operator|+
literal|" is indexed, test is useless, who changed the schema?"
argument_list|,
name|sf
operator|.
name|indexed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|+
literal|" has no docValues, test is useless, who changed the schema?"
argument_list|,
name|sf
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|delQ
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDocValues
specifier|public
name|void
name|testDocValues
parameter_list|()
throws|throws
name|IOException
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCoreInc
argument_list|()
init|)
block|{
specifier|final
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searcherRef
init|=
name|core
operator|.
name|openNewSearcher
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|SolrIndexSearcher
name|searcher
init|=
name|searcherRef
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|LeafReader
name|reader
init|=
name|searcher
operator|.
name|getLeafReader
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|FieldInfos
name|infos
init|=
name|reader
operator|.
name|getFieldInfos
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|NUMERIC
argument_list|,
name|infos
operator|.
name|fieldInfo
argument_list|(
literal|"floatdv"
argument_list|)
operator|.
name|getDocValuesType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|NUMERIC
argument_list|,
name|infos
operator|.
name|fieldInfo
argument_list|(
literal|"intdv"
argument_list|)
operator|.
name|getDocValuesType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|NUMERIC
argument_list|,
name|infos
operator|.
name|fieldInfo
argument_list|(
literal|"doubledv"
argument_list|)
operator|.
name|getDocValuesType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|NUMERIC
argument_list|,
name|infos
operator|.
name|fieldInfo
argument_list|(
literal|"longdv"
argument_list|)
operator|.
name|getDocValuesType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|SORTED
argument_list|,
name|infos
operator|.
name|fieldInfo
argument_list|(
literal|"stringdv"
argument_list|)
operator|.
name|getDocValuesType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|long
operator|)
name|Float
operator|.
name|floatToIntBits
argument_list|(
literal|1
argument_list|)
argument_list|,
name|reader
operator|.
name|getNumericDocValues
argument_list|(
literal|"floatdv"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|reader
operator|.
name|getNumericDocValues
argument_list|(
literal|"intdv"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|doubleToLongBits
argument_list|(
literal|3
argument_list|)
argument_list|,
name|reader
operator|.
name|getNumericDocValues
argument_list|(
literal|"doubledv"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|reader
operator|.
name|getNumericDocValues
argument_list|(
literal|"longdv"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|IndexSchema
name|schema
init|=
name|core
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
specifier|final
name|SchemaField
name|floatDv
init|=
name|schema
operator|.
name|getField
argument_list|(
literal|"floatdv"
argument_list|)
decl_stmt|;
specifier|final
name|SchemaField
name|intDv
init|=
name|schema
operator|.
name|getField
argument_list|(
literal|"intdv"
argument_list|)
decl_stmt|;
specifier|final
name|SchemaField
name|doubleDv
init|=
name|schema
operator|.
name|getField
argument_list|(
literal|"doubledv"
argument_list|)
decl_stmt|;
specifier|final
name|SchemaField
name|longDv
init|=
name|schema
operator|.
name|getField
argument_list|(
literal|"longdv"
argument_list|)
decl_stmt|;
name|FunctionValues
name|values
init|=
name|floatDv
operator|.
name|getType
argument_list|()
operator|.
name|getValueSource
argument_list|(
name|floatDv
argument_list|,
literal|null
argument_list|)
operator|.
name|getValues
argument_list|(
literal|null
argument_list|,
name|searcher
operator|.
name|getLeafReader
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1f
argument_list|,
name|values
operator|.
name|floatVal
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1f
argument_list|,
name|values
operator|.
name|objectVal
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|values
operator|=
name|intDv
operator|.
name|getType
argument_list|()
operator|.
name|getValueSource
argument_list|(
name|intDv
argument_list|,
literal|null
argument_list|)
operator|.
name|getValues
argument_list|(
literal|null
argument_list|,
name|searcher
operator|.
name|getLeafReader
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|values
operator|.
name|intVal
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|values
operator|.
name|objectVal
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|values
operator|=
name|doubleDv
operator|.
name|getType
argument_list|()
operator|.
name|getValueSource
argument_list|(
name|doubleDv
argument_list|,
literal|null
argument_list|)
operator|.
name|getValues
argument_list|(
literal|null
argument_list|,
name|searcher
operator|.
name|getLeafReader
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3d
argument_list|,
name|values
operator|.
name|doubleVal
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3d
argument_list|,
name|values
operator|.
name|objectVal
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|values
operator|=
name|longDv
operator|.
name|getType
argument_list|()
operator|.
name|getValueSource
argument_list|(
name|longDv
argument_list|,
literal|null
argument_list|)
operator|.
name|getValues
argument_list|(
literal|null
argument_list|,
name|searcher
operator|.
name|getLeafReader
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|values
operator|.
name|longVal
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|values
operator|.
name|objectVal
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|searcherRef
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|testDocValuesSorting
specifier|public
name|void
name|testDocValuesSorting
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"2"
argument_list|,
literal|"intdv"
argument_list|,
literal|"3"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"4"
argument_list|,
literal|"longdv"
argument_list|,
literal|"5"
argument_list|,
literal|"datedv"
argument_list|,
literal|"1995-12-31T23:59:59.999Z"
argument_list|,
literal|"stringdv"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"5"
argument_list|,
literal|"intdv"
argument_list|,
literal|"4"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"3"
argument_list|,
literal|"longdv"
argument_list|,
literal|"2"
argument_list|,
literal|"datedv"
argument_list|,
literal|"1997-12-31T23:59:59.999Z"
argument_list|,
literal|"stringdv"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"3"
argument_list|,
literal|"intdv"
argument_list|,
literal|"1"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"2"
argument_list|,
literal|"longdv"
argument_list|,
literal|"1"
argument_list|,
literal|"datedv"
argument_list|,
literal|"1996-12-31T23:59:59.999Z"
argument_list|,
literal|"stringdv"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"floatdv desc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"//int[@name='id'][.='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"intdv desc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"//int[@name='id'][.='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"doubledv desc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"//int[@name='id'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"longdv desc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"//int[@name='id'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"datedv desc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"//int[@name='id'][.='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"stringdv desc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"//int[@name='id'][.='4']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"floatdv asc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"//int[@name='id'][.='4']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"intdv asc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"//int[@name='id'][.='3']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"doubledv asc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"//int[@name='id'][.='3']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"longdv asc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"//int[@name='id'][.='3']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"datedv asc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"//int[@name='id'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"stringdv asc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"//int[@name='id'][.='2']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testDocValuesSorting2
specifier|public
name|void
name|testDocValuesSorting2
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"12"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"50.567"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"+0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"4.9E-324"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"-0.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"-5.123"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"1.7976931348623157E308"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"doubledv asc"
argument_list|)
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.='6']"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.='5']"
argument_list|,
literal|"//result/doc[3]/int[@name='id'][.='3']"
argument_list|,
literal|"//result/doc[4]/int[@name='id'][.='4']"
argument_list|,
literal|"//result/doc[5]/int[@name='id'][.='1']"
argument_list|,
literal|"//result/doc[6]/int[@name='id'][.='2']"
argument_list|,
literal|"//result/doc[7]/int[@name='id'][.='7']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testDocValuesFaceting
specifier|public
name|void
name|testDocValuesFaceting
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
operator|++
name|i
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// to have several segments
block|}
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1000"
operator|+
name|i
argument_list|,
literal|"floatdv"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
literal|"intdv"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
literal|"doubledv"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
literal|"longdv"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
literal|"datedv"
argument_list|,
operator|(
literal|1900
operator|+
name|i
operator|)
operator|+
literal|"-12-31T23:59:59.999Z"
argument_list|,
literal|"stringdv"
argument_list|,
literal|"abc"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"longdv"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='longdv']/int[@name='4'][.='51']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"longdv"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='longdv']/int[@name='0'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"longdv"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"33"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='longdv']/int[@name='33'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='floatdv']/int[@name='1.0'][.='51']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"-1"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='floatdv']/int[@name='0.0'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"33"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='floatdv']/int[@name='33.0'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='doubledv']/int[@name='3.0'][.='51']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"-1"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='doubledv']/int[@name='0.0'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"33"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='doubledv']/int[@name='33.0'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"intdv"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='intdv']/int[@name='2'][.='51']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"intdv"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"-1"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='intdv']/int[@name='0'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"intdv"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"33"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='intdv']/int[@name='33'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"datedv"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='datedv']/int[@name='1995-12-31T23:59:59.999Z'][.='50']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"datedv"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"-1"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='datedv']/int[@name='1900-12-31T23:59:59.999Z'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"datedv"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"33"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='datedv']/int[@name='1933-12-31T23:59:59.999Z'][.='1']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testDocValuesStats
specifier|public
name|void
name|testDocValuesStats
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
operator|++
name|i
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1000"
operator|+
name|i
argument_list|,
literal|"floatdv"
argument_list|,
literal|""
operator|+
name|i
operator|%
literal|2
argument_list|,
literal|"intdv"
argument_list|,
literal|""
operator|+
name|i
operator|%
literal|3
argument_list|,
literal|"doubledv"
argument_list|,
literal|""
operator|+
name|i
operator|%
literal|4
argument_list|,
literal|"longdv"
argument_list|,
literal|""
operator|+
name|i
operator|%
literal|5
argument_list|,
literal|"datedv"
argument_list|,
operator|(
literal|1900
operator|+
name|i
operator|%
literal|6
operator|)
operator|+
literal|"-12-31T23:59:59.999Z"
argument_list|,
literal|"stringdv"
argument_list|,
literal|"abc"
operator|+
name|i
operator|%
literal|7
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// to have several segments
block|}
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"stringdv"
argument_list|)
argument_list|,
literal|"//str[@name='min'][.='abc0']"
argument_list|,
literal|"//str[@name='max'][.='abc6']"
argument_list|,
literal|"//long[@name='count'][.='50']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"floatdv"
argument_list|)
argument_list|,
literal|"//double[@name='min'][.='0.0']"
argument_list|,
literal|"//double[@name='max'][.='1.0']"
argument_list|,
literal|"//long[@name='count'][.='50']"
argument_list|,
literal|"//double[@name='sum'][.='25.0']"
argument_list|,
literal|"//double[@name='mean'][.='0.5']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"intdv"
argument_list|)
argument_list|,
literal|"//double[@name='min'][.='0.0']"
argument_list|,
literal|"//double[@name='max'][.='2.0']"
argument_list|,
literal|"//long[@name='count'][.='50']"
argument_list|,
literal|"//double[@name='sum'][.='49.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"doubledv"
argument_list|)
argument_list|,
literal|"//double[@name='min'][.='0.0']"
argument_list|,
literal|"//double[@name='max'][.='3.0']"
argument_list|,
literal|"//long[@name='count'][.='50']"
argument_list|,
literal|"//double[@name='sum'][.='73.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"longdv"
argument_list|)
argument_list|,
literal|"//double[@name='min'][.='0.0']"
argument_list|,
literal|"//double[@name='max'][.='4.0']"
argument_list|,
literal|"//long[@name='count'][.='50']"
argument_list|,
literal|"//double[@name='sum'][.='100.0']"
argument_list|,
literal|"//double[@name='mean'][.='2.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"datedv"
argument_list|)
argument_list|,
literal|"//date[@name='min'][.='1900-12-31T23:59:59.999Z']"
argument_list|,
literal|"//date[@name='max'][.='1905-12-31T23:59:59.999Z']"
argument_list|,
literal|"//long[@name='count'][.='50']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"stats.facet"
argument_list|,
literal|"intdv"
argument_list|)
argument_list|,
literal|"//lst[@name='intdv']/lst[@name='0']/long[@name='count'][.='17']"
argument_list|,
literal|"//lst[@name='intdv']/lst[@name='1']/long[@name='count'][.='17']"
argument_list|,
literal|"//lst[@name='intdv']/lst[@name='2']/long[@name='count'][.='16']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"stats.facet"
argument_list|,
literal|"datedv"
argument_list|)
argument_list|,
literal|"//lst[@name='datedv']/lst[@name='1900-12-31T23:59:59.999Z']/long[@name='count'][.='9']"
argument_list|,
literal|"//lst[@name='datedv']/lst[@name='1901-12-31T23:59:59.999Z']/long[@name='count'][.='9']"
argument_list|,
literal|"//lst[@name='datedv']/lst[@name='1902-12-31T23:59:59.999Z']/long[@name='count'][.='8']"
argument_list|,
literal|"//lst[@name='datedv']/lst[@name='1903-12-31T23:59:59.999Z']/long[@name='count'][.='8']"
argument_list|,
literal|"//lst[@name='datedv']/lst[@name='1904-12-31T23:59:59.999Z']/long[@name='count'][.='8']"
argument_list|,
literal|"//lst[@name='datedv']/lst[@name='1905-12-31T23:59:59.999Z']/long[@name='count'][.='8']"
argument_list|)
expr_stmt|;
block|}
comment|/** Tests the ability to do basic queries (without scoring, just match-only) on    *  docvalues fields that are not inverted (indexed "forward" only)    */
DECL|method|testDocValuesMatch
specifier|public
name|void
name|testDocValuesMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"2"
argument_list|,
literal|"intdv"
argument_list|,
literal|"3"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"3.1"
argument_list|,
literal|"longdv"
argument_list|,
literal|"5"
argument_list|,
literal|"datedv"
argument_list|,
literal|"1995-12-31T23:59:59.999Z"
argument_list|,
literal|"stringdv"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"-5"
argument_list|,
literal|"intdv"
argument_list|,
literal|"4"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"-4.3"
argument_list|,
literal|"longdv"
argument_list|,
literal|"2"
argument_list|,
literal|"datedv"
argument_list|,
literal|"1997-12-31T23:59:59.999Z"
argument_list|,
literal|"stringdv"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"3"
argument_list|,
literal|"intdv"
argument_list|,
literal|"1"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"2.1"
argument_list|,
literal|"longdv"
argument_list|,
literal|"1"
argument_list|,
literal|"datedv"
argument_list|,
literal|"1996-12-31T23:59:59.999Z"
argument_list|,
literal|"stringdv"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"3"
argument_list|,
literal|"intdv"
argument_list|,
literal|"-1"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"1.5"
argument_list|,
literal|"longdv"
argument_list|,
literal|"1"
argument_list|,
literal|"datedv"
argument_list|,
literal|"1996-12-31T23:59:59.999Z"
argument_list|,
literal|"stringdv"
argument_list|,
literal|"car"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// string: termquery
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"stringdv:car"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=4]"
argument_list|)
expr_stmt|;
comment|// string: range query
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"stringdv:[b TO d]"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.=3]"
argument_list|,
literal|"//result/doc[3]/int[@name='id'][.=4]"
argument_list|)
expr_stmt|;
comment|// string: prefix query
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"stringdv:c*"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=3]"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.=4]"
argument_list|)
expr_stmt|;
comment|// string: wildcard query
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"stringdv:c?r"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=4]"
argument_list|)
expr_stmt|;
comment|// string: regexp query
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"stringdv:/c[a-b]r/"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=4]"
argument_list|)
expr_stmt|;
comment|// float: termquery
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"floatdv:3"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=3]"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.=4]"
argument_list|)
expr_stmt|;
comment|// float: rangequery
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"floatdv:[2 TO 3]"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.=3]"
argument_list|,
literal|"//result/doc[3]/int[@name='id'][.=4]"
argument_list|)
expr_stmt|;
comment|// (neg) float: termquery
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"floatdv:\"-5\""
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=2]"
argument_list|)
expr_stmt|;
comment|// (neg) float: rangequery
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"floatdv:[-6 TO -4]"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=2]"
argument_list|)
expr_stmt|;
comment|// (cross zero bounds) float: rangequery
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"floatdv:[-6 TO 2.1]"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.=2]"
argument_list|)
expr_stmt|;
comment|// int: termquery
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"intdv:1"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=3]"
argument_list|)
expr_stmt|;
comment|// int: rangequery
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"intdv:[3 TO 4]"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.=2]"
argument_list|)
expr_stmt|;
comment|// (neg) int: termquery
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"intdv:\"-1\""
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=4]"
argument_list|)
expr_stmt|;
comment|// (neg) int: rangequery
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"intdv:[-1 TO 1]"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=3]"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.=4]"
argument_list|)
expr_stmt|;
comment|// long: termquery
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"longdv:1"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=3]"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.=4]"
argument_list|)
expr_stmt|;
comment|// long: rangequery
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"longdv:[1 TO 2]"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.=3]"
argument_list|,
literal|"//result/doc[3]/int[@name='id'][.=4]"
argument_list|)
expr_stmt|;
comment|// double: termquery
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"doubledv:3.1"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=1]"
argument_list|)
expr_stmt|;
comment|// double: rangequery
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"doubledv:[2 TO 3.3]"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.=3]"
argument_list|)
expr_stmt|;
comment|// (neg) double: termquery
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"doubledv:\"-4.3\""
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=2]"
argument_list|)
expr_stmt|;
comment|// (neg) double: rangequery
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"doubledv:[-6 TO -4]"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=2]"
argument_list|)
expr_stmt|;
comment|// (cross zero bounds) double: rangequery
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"doubledv:[-6 TO 2.0]"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.=4]"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFloatAndDoubleRangeQueryRandom
specifier|public
name|void
name|testFloatAndDoubleRangeQueryRandom
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|fieldName
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"floatdv"
block|,
literal|"doubledv"
block|}
decl_stmt|;
name|Number
name|largestNegative
index|[]
init|=
operator|new
name|Number
index|[]
block|{
literal|0f
operator|-
name|Float
operator|.
name|MIN_NORMAL
block|,
literal|0f
operator|-
name|Double
operator|.
name|MIN_NORMAL
block|}
decl_stmt|;
name|Number
name|smallestPositive
index|[]
init|=
operator|new
name|Number
index|[]
block|{
name|Float
operator|.
name|MIN_NORMAL
block|,
name|Double
operator|.
name|MIN_NORMAL
block|}
decl_stmt|;
name|Number
name|positiveInfinity
index|[]
init|=
operator|new
name|Number
index|[]
block|{
name|Float
operator|.
name|POSITIVE_INFINITY
block|,
name|Double
operator|.
name|POSITIVE_INFINITY
block|}
decl_stmt|;
name|Number
name|negativeInfinity
index|[]
init|=
operator|new
name|Number
index|[]
block|{
name|Float
operator|.
name|NEGATIVE_INFINITY
block|,
name|Double
operator|.
name|NEGATIVE_INFINITY
block|}
decl_stmt|;
name|Number
name|largestValue
index|[]
init|=
operator|new
name|Number
index|[]
block|{
name|Float
operator|.
name|MAX_VALUE
block|,
name|Double
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
name|Number
name|zero
index|[]
init|=
operator|new
name|Number
index|[]
block|{
literal|0f
block|,
literal|0d
block|}
decl_stmt|;
name|Function
argument_list|<
name|Supplier
argument_list|<
name|Number
argument_list|>
argument_list|,
name|Number
argument_list|>
name|noNaN
init|=
parameter_list|(
name|next
parameter_list|)
lambda|->
block|{
name|Number
name|num
decl_stmt|;
while|while
condition|(
name|String
operator|.
name|valueOf
argument_list|(
name|num
operator|=
name|next
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
literal|"NaN"
argument_list|)
condition|)
empty_stmt|;
return|return
name|num
return|;
block|}
decl_stmt|;
name|List
argument_list|<
name|Supplier
argument_list|<
name|Number
argument_list|>
argument_list|>
name|nextRandNoNaN
init|=
name|Arrays
operator|.
name|asList
argument_list|(
parameter_list|()
lambda|->
name|noNaN
operator|.
name|apply
argument_list|(
parameter_list|()
lambda|->
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
argument_list|)
argument_list|,
parameter_list|()
lambda|->
name|noNaN
operator|.
name|apply
argument_list|(
parameter_list|()
lambda|->
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Function
argument_list|<
name|Number
argument_list|,
name|Long
argument_list|>
argument_list|>
name|toSortableLong
init|=
name|Arrays
operator|.
name|asList
argument_list|(
parameter_list|(
name|num
parameter_list|)
lambda|->
operator|(
name|long
operator|)
name|NumericUtils
operator|.
name|floatToSortableInt
argument_list|(
name|num
operator|.
name|floatValue
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|num
parameter_list|)
lambda|->
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|num
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Number minusZero[] = new Number[] {-0f, -0d}; // -0 == 0, so we should not treat them differently (and we should not guarantee that sign is preserved... we should be able to index both as 0)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldName
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|delQ
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|Number
name|specialValues
index|[]
init|=
operator|new
name|Number
index|[]
block|{
name|largestNegative
index|[
name|i
index|]
block|,
name|smallestPositive
index|[
name|i
index|]
block|,
name|negativeInfinity
index|[
name|i
index|]
block|,
name|largestValue
index|[
name|i
index|]
block|,
name|positiveInfinity
index|[
name|i
index|]
block|,
name|zero
index|[
name|i
index|]
block|}
decl_stmt|;
name|List
argument_list|<
name|Number
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numDocs
init|=
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numDocs
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|5
condition|)
block|{
comment|// Add a boundary value with 5% probability
name|values
operator|.
name|add
argument_list|(
name|specialValues
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|specialValues
operator|.
name|length
argument_list|)
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|fieldName
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"floatdv"
argument_list|)
condition|)
block|{
comment|// Add random values with 95% probability
name|values
operator|.
name|add
argument_list|(
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|values
operator|.
name|add
argument_list|(
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Indexing
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|j
operator|+
literal|1
argument_list|)
argument_list|,
name|fieldName
index|[
name|i
index|]
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Indexed values: "
operator|+
name|values
argument_list|)
expr_stmt|;
comment|// Querying
name|int
name|numQueries
init|=
literal|10000
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numQueries
condition|;
name|j
operator|++
control|)
block|{
name|boolean
name|minInclusive
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|boolean
name|maxInclusive
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|Number
name|minVal
decl_stmt|,
name|maxVal
decl_stmt|;
name|String
name|min
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|minVal
operator|=
name|nextRandNoNaN
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|max
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|maxVal
operator|=
name|nextRandNoNaN
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
comment|// randomly use boundary values for min, 15% of the time
name|int
name|r
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|<
literal|5
condition|)
block|{
name|minVal
operator|=
name|negativeInfinity
index|[
name|i
index|]
expr_stmt|;
name|min
operator|=
literal|"*"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|10
condition|)
block|{
name|minVal
operator|=
name|specialValues
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|specialValues
operator|.
name|length
argument_list|)
index|]
expr_stmt|;
name|min
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|minVal
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|15
condition|)
block|{
name|minVal
operator|=
name|values
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|min
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|minVal
argument_list|)
expr_stmt|;
block|}
comment|// randomly use boundary values for max, 15% of the time
name|r
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|<
literal|5
condition|)
block|{
name|maxVal
operator|=
name|positiveInfinity
index|[
name|i
index|]
expr_stmt|;
name|max
operator|=
literal|"*"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|10
condition|)
block|{
name|maxVal
operator|=
name|specialValues
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|specialValues
operator|.
name|length
argument_list|)
index|]
expr_stmt|;
name|max
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|maxVal
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
literal|15
condition|)
block|{
comment|// Don't pick a NaN for the range query
name|Number
name|tmp
init|=
name|values
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Double
operator|.
name|isNaN
argument_list|(
name|tmp
operator|.
name|doubleValue
argument_list|()
argument_list|)
operator|&&
operator|!
name|Float
operator|.
name|isNaN
argument_list|(
name|tmp
operator|.
name|floatValue
argument_list|()
argument_list|)
condition|)
block|{
name|maxVal
operator|=
name|tmp
expr_stmt|;
name|max
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|maxVal
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|tests
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|Number
name|val
init|=
name|values
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|long
name|valSortable
init|=
name|toSortableLong
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|apply
argument_list|(
name|val
argument_list|)
decl_stmt|;
name|long
name|minSortable
init|=
name|toSortableLong
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|apply
argument_list|(
name|minVal
argument_list|)
decl_stmt|;
name|long
name|maxSortable
init|=
name|toSortableLong
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|apply
argument_list|(
name|maxVal
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|minInclusive
operator|&&
name|minSortable
operator|<=
name|valSortable
operator|||
operator|!
name|minInclusive
operator|&&
name|minSortable
operator|<
name|valSortable
operator|)
operator|&&
operator|(
name|maxInclusive
operator|&&
name|maxSortable
operator|>=
name|valSortable
operator|||
operator|!
name|maxInclusive
operator|&&
name|maxSortable
operator|>
name|valSortable
operator|)
condition|)
block|{
name|counter
operator|++
expr_stmt|;
name|tests
operator|.
name|add
argument_list|(
literal|"//result/doc["
operator|+
name|counter
operator|+
literal|"]/int[@name='id'][.="
operator|+
operator|(
name|k
operator|+
literal|1
operator|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|tests
operator|.
name|add
argument_list|(
literal|"//result/doc["
operator|+
name|counter
operator|+
literal|"]/float[@name='score'][.=1.0]"
argument_list|)
expr_stmt|;
block|}
block|}
name|tests
operator|.
name|add
argument_list|(
literal|0
argument_list|,
literal|"//*[@numFound='"
operator|+
name|counter
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|String
name|testsArr
index|[]
init|=
operator|new
name|String
index|[
name|tests
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|tests
operator|.
name|size
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|testsArr
index|[
name|k
index|]
operator|=
name|tests
operator|.
name|get
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Expected: "
operator|+
name|tests
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
index|[
name|i
index|]
operator|+
literal|":"
operator|+
operator|(
name|minInclusive
condition|?
literal|'['
else|:
literal|'{'
operator|)
operator|+
name|min
operator|+
literal|" TO "
operator|+
name|max
operator|+
operator|(
name|maxInclusive
condition|?
literal|']'
else|:
literal|'}'
operator|)
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|fieldName
index|[
name|i
index|]
operator|+
literal|",score"
argument_list|)
argument_list|,
name|testsArr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testFloatAndDoubleRangeQuery
specifier|public
name|void
name|testFloatAndDoubleRangeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|fieldName
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"floatdv"
block|,
literal|"doubledv"
block|}
decl_stmt|;
name|String
name|largestNegative
index|[]
init|=
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
literal|0f
operator|-
name|Float
operator|.
name|MIN_NORMAL
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
literal|0f
operator|-
name|Double
operator|.
name|MIN_NORMAL
argument_list|)
block|}
decl_stmt|;
name|String
name|negativeInfinity
index|[]
init|=
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
name|Float
operator|.
name|NEGATIVE_INFINITY
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
block|}
decl_stmt|;
name|String
name|largestValue
index|[]
init|=
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
name|Float
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldName
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|fieldName
index|[
name|i
index|]
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
name|fieldName
index|[
name|i
index|]
argument_list|,
literal|"-5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
name|fieldName
index|[
name|i
index|]
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
name|fieldName
index|[
name|i
index|]
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
name|fieldName
index|[
name|i
index|]
argument_list|,
name|largestNegative
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
name|fieldName
index|[
name|i
index|]
argument_list|,
name|negativeInfinity
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
name|fieldName
index|[
name|i
index|]
argument_list|,
name|largestValue
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// Negative Zero to Positive
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
index|[
name|i
index|]
operator|+
literal|":[-0.0 TO 2.5]"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|fieldName
index|[
name|i
index|]
operator|+
literal|",score"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=1]"
argument_list|)
expr_stmt|;
comment|// Negative to Positive Zero
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
index|[
name|i
index|]
operator|+
literal|":[-6 TO 0]"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|fieldName
index|[
name|i
index|]
operator|+
literal|",score"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.=5]"
argument_list|)
expr_stmt|;
comment|// Negative to Positive
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
index|[
name|i
index|]
operator|+
literal|":[-6 TO 2.5]"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|fieldName
index|[
name|i
index|]
operator|+
literal|",score"
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[3]/int[@name='id'][.=5]"
argument_list|)
expr_stmt|;
comment|// Positive to Positive
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
index|[
name|i
index|]
operator|+
literal|":[2 TO 3]"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|fieldName
index|[
name|i
index|]
operator|+
literal|",score"
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.=3]"
argument_list|,
literal|"//result/doc[3]/int[@name='id'][.=4]"
argument_list|)
expr_stmt|;
comment|// Positive to POSITIVE_INF
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
index|[
name|i
index|]
operator|+
literal|":[2 TO *]"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|fieldName
index|[
name|i
index|]
operator|+
literal|",score"
argument_list|)
argument_list|,
literal|"//*[@numFound='4']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.=3]"
argument_list|,
literal|"//result/doc[3]/int[@name='id'][.=4]"
argument_list|,
literal|"//result/doc[4]/int[@name='id'][.=7]"
argument_list|)
expr_stmt|;
comment|// NEGATIVE_INF to Negative
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
index|[
name|i
index|]
operator|+
literal|":[* TO -1]"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|fieldName
index|[
name|i
index|]
operator|+
literal|",score"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.=6]"
argument_list|)
expr_stmt|;
comment|// NEGATIVE_INF to Positive
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
index|[
name|i
index|]
operator|+
literal|":[* TO 2]"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|fieldName
index|[
name|i
index|]
argument_list|)
argument_list|,
literal|"//*[@numFound='4']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[3]/int[@name='id'][.=5]"
argument_list|,
literal|"//result/doc[4]/int[@name='id'][.=6]"
argument_list|)
expr_stmt|;
comment|// NEGATIVE_INF to Positive (non-inclusive)
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
index|[
name|i
index|]
operator|+
literal|":[* TO 2}"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|fieldName
index|[
name|i
index|]
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.=5]"
argument_list|,
literal|"//result/doc[3]/int[@name='id'][.=6]"
argument_list|)
expr_stmt|;
comment|// Negative to POSITIVE_INF
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
index|[
name|i
index|]
operator|+
literal|":[-6 TO *]"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|fieldName
index|[
name|i
index|]
argument_list|)
argument_list|,
literal|"//*[@numFound='6']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[3]/int[@name='id'][.=3]"
argument_list|,
literal|"//result/doc[4]/int[@name='id'][.=4]"
argument_list|,
literal|"//result/doc[5]/int[@name='id'][.=5]"
argument_list|,
literal|"//result/doc[6]/int[@name='id'][.=7]"
argument_list|)
expr_stmt|;
comment|// NEGATIVE_INF to POSITIVE_INF
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
index|[
name|i
index|]
operator|+
literal|":[* TO *]"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|fieldName
index|[
name|i
index|]
operator|+
literal|",score"
argument_list|)
argument_list|,
literal|"//*[@numFound='7']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.=1]"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.=2]"
argument_list|,
literal|"//result/doc[3]/int[@name='id'][.=3]"
argument_list|,
literal|"//result/doc[4]/int[@name='id'][.=4]"
argument_list|,
literal|"//result/doc[5]/int[@name='id'][.=5]"
argument_list|,
literal|"//result/doc[6]/int[@name='id'][.=6]"
argument_list|,
literal|"//result/doc[7]/int[@name='id'][.=7]"
argument_list|,
literal|"//result/doc[1]/float[@name='score'][.=1.0]"
argument_list|,
literal|"//result/doc[2]/float[@name='score'][.=1.0]"
argument_list|,
literal|"//result/doc[3]/float[@name='score'][.=1.0]"
argument_list|,
literal|"//result/doc[4]/float[@name='score'][.=1.0]"
argument_list|,
literal|"//result/doc[5]/float[@name='score'][.=1.0]"
argument_list|,
literal|"//result/doc[6]/float[@name='score'][.=1.0]"
argument_list|,
literal|"//result/doc[7]/float[@name='score'][.=1.0]"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
