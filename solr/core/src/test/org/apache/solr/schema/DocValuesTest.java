begin_unit
begin_package
DECL|package|org.apache.solr.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
operator|.
name|DocValuesType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|FunctionValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_class
DECL|class|DocValuesTest
specifier|public
class|class
name|DocValuesTest
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeTests
specifier|public
specifier|static
name|void
name|beforeTests
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-basic.xml"
argument_list|,
literal|"schema-docValues.xml"
argument_list|)
expr_stmt|;
block|}
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|delQ
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDocValues
specifier|public
name|void
name|testDocValues
parameter_list|()
throws|throws
name|IOException
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCoreInc
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searcherRef
init|=
name|core
operator|.
name|openNewSearcher
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|SolrIndexSearcher
name|searcher
init|=
name|searcherRef
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|AtomicReader
name|reader
init|=
name|searcher
operator|.
name|getAtomicReader
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|FieldInfos
name|infos
init|=
name|reader
operator|.
name|getFieldInfos
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|NUMERIC
argument_list|,
name|infos
operator|.
name|fieldInfo
argument_list|(
literal|"floatdv"
argument_list|)
operator|.
name|getDocValuesType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|NUMERIC
argument_list|,
name|infos
operator|.
name|fieldInfo
argument_list|(
literal|"intdv"
argument_list|)
operator|.
name|getDocValuesType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|NUMERIC
argument_list|,
name|infos
operator|.
name|fieldInfo
argument_list|(
literal|"doubledv"
argument_list|)
operator|.
name|getDocValuesType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|NUMERIC
argument_list|,
name|infos
operator|.
name|fieldInfo
argument_list|(
literal|"longdv"
argument_list|)
operator|.
name|getDocValuesType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|SORTED
argument_list|,
name|infos
operator|.
name|fieldInfo
argument_list|(
literal|"stringdv"
argument_list|)
operator|.
name|getDocValuesType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|long
operator|)
name|Float
operator|.
name|floatToIntBits
argument_list|(
literal|1
argument_list|)
argument_list|,
name|reader
operator|.
name|getNumericDocValues
argument_list|(
literal|"floatdv"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|reader
operator|.
name|getNumericDocValues
argument_list|(
literal|"intdv"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|doubleToLongBits
argument_list|(
literal|3
argument_list|)
argument_list|,
name|reader
operator|.
name|getNumericDocValues
argument_list|(
literal|"doubledv"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|reader
operator|.
name|getNumericDocValues
argument_list|(
literal|"longdv"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|IndexSchema
name|schema
init|=
name|core
operator|.
name|getSchema
argument_list|()
decl_stmt|;
specifier|final
name|SchemaField
name|floatDv
init|=
name|schema
operator|.
name|getField
argument_list|(
literal|"floatdv"
argument_list|)
decl_stmt|;
specifier|final
name|SchemaField
name|intDv
init|=
name|schema
operator|.
name|getField
argument_list|(
literal|"intdv"
argument_list|)
decl_stmt|;
specifier|final
name|SchemaField
name|doubleDv
init|=
name|schema
operator|.
name|getField
argument_list|(
literal|"doubledv"
argument_list|)
decl_stmt|;
specifier|final
name|SchemaField
name|longDv
init|=
name|schema
operator|.
name|getField
argument_list|(
literal|"longdv"
argument_list|)
decl_stmt|;
name|FunctionValues
name|values
init|=
name|floatDv
operator|.
name|getType
argument_list|()
operator|.
name|getValueSource
argument_list|(
name|floatDv
argument_list|,
literal|null
argument_list|)
operator|.
name|getValues
argument_list|(
literal|null
argument_list|,
name|searcher
operator|.
name|getAtomicReader
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1f
argument_list|,
name|values
operator|.
name|floatVal
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1f
argument_list|,
name|values
operator|.
name|objectVal
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|values
operator|=
name|intDv
operator|.
name|getType
argument_list|()
operator|.
name|getValueSource
argument_list|(
name|intDv
argument_list|,
literal|null
argument_list|)
operator|.
name|getValues
argument_list|(
literal|null
argument_list|,
name|searcher
operator|.
name|getAtomicReader
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|values
operator|.
name|intVal
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|values
operator|.
name|objectVal
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|values
operator|=
name|doubleDv
operator|.
name|getType
argument_list|()
operator|.
name|getValueSource
argument_list|(
name|doubleDv
argument_list|,
literal|null
argument_list|)
operator|.
name|getValues
argument_list|(
literal|null
argument_list|,
name|searcher
operator|.
name|getAtomicReader
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3d
argument_list|,
name|values
operator|.
name|doubleVal
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3d
argument_list|,
name|values
operator|.
name|objectVal
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|values
operator|=
name|longDv
operator|.
name|getType
argument_list|()
operator|.
name|getValueSource
argument_list|(
name|longDv
argument_list|,
literal|null
argument_list|)
operator|.
name|getValues
argument_list|(
literal|null
argument_list|,
name|searcher
operator|.
name|getAtomicReader
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|values
operator|.
name|longVal
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|values
operator|.
name|objectVal
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|searcherRef
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|core
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testDocValuesSorting
specifier|public
name|void
name|testDocValuesSorting
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"2"
argument_list|,
literal|"intdv"
argument_list|,
literal|"3"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"4"
argument_list|,
literal|"longdv"
argument_list|,
literal|"5"
argument_list|,
literal|"datedv"
argument_list|,
literal|"1995-12-31T23:59:59.999Z"
argument_list|,
literal|"stringdv"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"5"
argument_list|,
literal|"intdv"
argument_list|,
literal|"4"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"3"
argument_list|,
literal|"longdv"
argument_list|,
literal|"2"
argument_list|,
literal|"datedv"
argument_list|,
literal|"1997-12-31T23:59:59.999Z"
argument_list|,
literal|"stringdv"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"3"
argument_list|,
literal|"intdv"
argument_list|,
literal|"1"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"2"
argument_list|,
literal|"longdv"
argument_list|,
literal|"1"
argument_list|,
literal|"datedv"
argument_list|,
literal|"1996-12-31T23:59:59.999Z"
argument_list|,
literal|"stringdv"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"floatdv desc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"//str[@name='id'][.='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"intdv desc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"//str[@name='id'][.='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"doubledv desc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"//str[@name='id'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"longdv desc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"//str[@name='id'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"datedv desc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"//str[@name='id'][.='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"stringdv desc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"//str[@name='id'][.='4']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"floatdv asc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"//str[@name='id'][.='4']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"intdv asc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"//str[@name='id'][.='3']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"doubledv asc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"//str[@name='id'][.='3']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"longdv asc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"//str[@name='id'][.='3']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"datedv asc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"//str[@name='id'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"stringdv asc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"//str[@name='id'][.='2']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testDocValuesFaceting
specifier|public
name|void
name|testDocValuesFaceting
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
operator|++
name|i
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|commit
argument_list|()
expr_stmt|;
comment|// to have several segments
block|}
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1000"
operator|+
name|i
argument_list|,
literal|"floatdv"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
literal|"intdv"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
literal|"doubledv"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
literal|"longdv"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
literal|"datedv"
argument_list|,
operator|(
literal|1900
operator|+
name|i
operator|)
operator|+
literal|"-12-31T23:59:59.999Z"
argument_list|,
literal|"stringdv"
argument_list|,
literal|"abc"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"longdv"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='longdv']/int[@name='4'][.='51']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"longdv"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='longdv']/int[@name='0'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"longdv"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"33"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='longdv']/int[@name='33'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='floatdv']/int[@name='1.0'][.='51']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"-1"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='floatdv']/int[@name='0.0'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"33"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='floatdv']/int[@name='33.0'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='doubledv']/int[@name='3.0'][.='51']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"-1"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='doubledv']/int[@name='0.0'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"33"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='doubledv']/int[@name='33.0'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"intdv"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='intdv']/int[@name='2'][.='51']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"intdv"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"-1"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='intdv']/int[@name='0'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"intdv"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"33"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='intdv']/int[@name='33'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"datedv"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='datedv']/int[@name='1995-12-31T23:59:59.999Z'][.='50']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"datedv"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"-1"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='datedv']/int[@name='1900-12-31T23:59:59.999Z'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"datedv"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"33"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"//lst[@name='datedv']/int[@name='1933-12-31T23:59:59.999Z'][.='1']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testDocValuesStats
specifier|public
name|void
name|testDocValuesStats
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
operator|++
name|i
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1000"
operator|+
name|i
argument_list|,
literal|"floatdv"
argument_list|,
literal|""
operator|+
name|i
operator|%
literal|2
argument_list|,
literal|"intdv"
argument_list|,
literal|""
operator|+
name|i
operator|%
literal|3
argument_list|,
literal|"doubledv"
argument_list|,
literal|""
operator|+
name|i
operator|%
literal|4
argument_list|,
literal|"longdv"
argument_list|,
literal|""
operator|+
name|i
operator|%
literal|5
argument_list|,
literal|"datedv"
argument_list|,
operator|(
literal|1900
operator|+
name|i
operator|%
literal|6
operator|)
operator|+
literal|"-12-31T23:59:59.999Z"
argument_list|,
literal|"stringdv"
argument_list|,
literal|"abc"
operator|+
name|i
operator|%
literal|7
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|commit
argument_list|()
expr_stmt|;
comment|// to have several segments
block|}
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"stringdv"
argument_list|)
argument_list|,
literal|"//str[@name='min'][.='abc0']"
argument_list|,
literal|"//str[@name='max'][.='abc6']"
argument_list|,
literal|"//long[@name='count'][.='50']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"floatdv"
argument_list|)
argument_list|,
literal|"//double[@name='min'][.='0.0']"
argument_list|,
literal|"//double[@name='max'][.='1.0']"
argument_list|,
literal|"//long[@name='count'][.='50']"
argument_list|,
literal|"//double[@name='sum'][.='25.0']"
argument_list|,
literal|"//double[@name='mean'][.='0.5']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"intdv"
argument_list|)
argument_list|,
literal|"//double[@name='min'][.='0.0']"
argument_list|,
literal|"//double[@name='max'][.='2.0']"
argument_list|,
literal|"//long[@name='count'][.='50']"
argument_list|,
literal|"//double[@name='sum'][.='49.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"doubledv"
argument_list|)
argument_list|,
literal|"//double[@name='min'][.='0.0']"
argument_list|,
literal|"//double[@name='max'][.='3.0']"
argument_list|,
literal|"//long[@name='count'][.='50']"
argument_list|,
literal|"//double[@name='sum'][.='73.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"longdv"
argument_list|)
argument_list|,
literal|"//double[@name='min'][.='0.0']"
argument_list|,
literal|"//double[@name='max'][.='4.0']"
argument_list|,
literal|"//long[@name='count'][.='50']"
argument_list|,
literal|"//double[@name='sum'][.='100.0']"
argument_list|,
literal|"//double[@name='mean'][.='2.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"datedv"
argument_list|)
argument_list|,
literal|"//date[@name='min'][.='1900-12-31T23:59:59.999Z']"
argument_list|,
literal|"//date[@name='max'][.='1905-12-31T23:59:59.999Z']"
argument_list|,
literal|"//long[@name='count'][.='50']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"stats.facet"
argument_list|,
literal|"intdv"
argument_list|)
argument_list|,
literal|"//lst[@name='intdv']/lst[@name='0']/long[@name='count'][.='17']"
argument_list|,
literal|"//lst[@name='intdv']/lst[@name='1']/long[@name='count'][.='17']"
argument_list|,
literal|"//lst[@name='intdv']/lst[@name='2']/long[@name='count'][.='16']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"stats.facet"
argument_list|,
literal|"datedv"
argument_list|)
argument_list|,
literal|"//lst[@name='datedv']/lst[@name='1900-12-31T23:59:59.999Z']/long[@name='count'][.='9']"
argument_list|,
literal|"//lst[@name='datedv']/lst[@name='1901-12-31T23:59:59.999Z']/long[@name='count'][.='9']"
argument_list|,
literal|"//lst[@name='datedv']/lst[@name='1902-12-31T23:59:59.999Z']/long[@name='count'][.='8']"
argument_list|,
literal|"//lst[@name='datedv']/lst[@name='1903-12-31T23:59:59.999Z']/long[@name='count'][.='8']"
argument_list|,
literal|"//lst[@name='datedv']/lst[@name='1904-12-31T23:59:59.999Z']/long[@name='count'][.='8']"
argument_list|,
literal|"//lst[@name='datedv']/lst[@name='1905-12-31T23:59:59.999Z']/long[@name='count'][.='8']"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
