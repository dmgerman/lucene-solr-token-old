begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_class
DECL|class|ExternalFileFieldSortTest
specifier|public
class|class
name|ExternalFileFieldSortTest
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeTests
specifier|public
specifier|static
name|void
name|beforeTests
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-basic.xml"
argument_list|,
literal|"schema-eff.xml"
argument_list|)
expr_stmt|;
name|updateExternalFile
argument_list|()
expr_stmt|;
block|}
DECL|method|updateExternalFile
specifier|static
name|void
name|updateExternalFile
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|testHome
init|=
name|SolrTestCaseJ4
operator|.
name|getFile
argument_list|(
literal|"solr/collection1"
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|String
name|filename
init|=
literal|"external_eff"
decl_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|testHome
operator|+
literal|"/"
operator|+
name|filename
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getDataDir
argument_list|()
operator|+
literal|"/"
operator|+
name|filename
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addDocuments
specifier|private
name|void
name|addDocuments
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertU
argument_list|(
literal|"add a test doc"
argument_list|,
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
literal|"commit"
argument_list|,
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSort
specifier|public
name|void
name|testSort
parameter_list|()
block|{
name|addDocuments
argument_list|()
expr_stmt|;
name|assertQ
argument_list|(
literal|"query"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"eff asc"
argument_list|)
argument_list|,
literal|"//result/doc[position()=1]/str[.='3']"
argument_list|,
literal|"//result/doc[position()=2]/str[.='1']"
argument_list|,
literal|"//result/doc[position()=10]/str[.='8']"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
