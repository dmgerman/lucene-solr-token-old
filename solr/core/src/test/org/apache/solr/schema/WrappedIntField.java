begin_unit
begin_package
DECL|package|org.apache.solr.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|expressions
operator|.
name|Expression
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|expressions
operator|.
name|SimpleBindings
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|expressions
operator|.
name|js
operator|.
name|JavascriptCompiler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import
begin_comment
comment|/**  * Custom field wrapping an int, to test sorting via a custom comparator.  */
end_comment
begin_class
DECL|class|WrappedIntField
specifier|public
class|class
name|WrappedIntField
extends|extends
name|TrieIntField
block|{
DECL|field|expr
name|Expression
name|expr
decl_stmt|;
DECL|method|WrappedIntField
specifier|public
name|WrappedIntField
parameter_list|()
block|{
try|try
block|{
name|expr
operator|=
name|JavascriptCompiler
operator|.
name|compile
argument_list|(
literal|"payload % 3"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"impossible?"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getSortField
specifier|public
name|SortField
name|getSortField
parameter_list|(
specifier|final
name|SchemaField
name|field
parameter_list|,
specifier|final
name|boolean
name|reverse
parameter_list|)
block|{
name|field
operator|.
name|checkSortability
argument_list|()
expr_stmt|;
name|SimpleBindings
name|bindings
init|=
operator|new
name|SimpleBindings
argument_list|()
decl_stmt|;
name|bindings
operator|.
name|add
argument_list|(
name|super
operator|.
name|getSortField
argument_list|(
name|field
argument_list|,
name|reverse
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|expr
operator|.
name|getSortField
argument_list|(
name|bindings
argument_list|,
name|reverse
argument_list|)
return|;
block|}
block|}
end_class
end_unit
