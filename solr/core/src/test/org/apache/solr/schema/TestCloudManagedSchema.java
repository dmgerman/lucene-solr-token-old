begin_unit
begin_package
DECL|package|org.apache.solr.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|ResponseParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractFullDistribZkTestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_class
DECL|class|TestCloudManagedSchema
specifier|public
class|class
name|TestCloudManagedSchema
extends|extends
name|AbstractFullDistribZkTestBase
block|{
DECL|method|TestCloudManagedSchema
specifier|public
name|TestCloudManagedSchema
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|initSysProperties
specifier|public
specifier|static
name|void
name|initSysProperties
parameter_list|()
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"managed.schema.mutable"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"enable.update.log"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCloudSolrConfig
specifier|protected
name|String
name|getCloudSolrConfig
parameter_list|()
block|{
return|return
literal|"solrconfig-managed-schema.xml"
return|;
block|}
annotation|@
name|Override
DECL|method|doTest
specifier|public
name|void
name|doTest
parameter_list|()
throws|throws
name|Exception
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminParams
operator|.
name|CoreAdminAction
operator|.
name|STATUS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|QueryRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/cores"
argument_list|)
expr_stmt|;
name|int
name|which
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|clients
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|HttpSolrServer
name|client
init|=
operator|(
name|HttpSolrServer
operator|)
name|clients
operator|.
name|get
argument_list|(
name|which
argument_list|)
decl_stmt|;
name|String
name|previousBaseURL
init|=
name|client
operator|.
name|getBaseURL
argument_list|()
decl_stmt|;
comment|// Strip /collection1 step from baseURL - requests fail otherwise
name|client
operator|.
name|setBaseURL
argument_list|(
name|previousBaseURL
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|previousBaseURL
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|NamedList
name|namedListResponse
init|=
name|client
operator|.
name|request
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|client
operator|.
name|setBaseURL
argument_list|(
name|previousBaseURL
argument_list|)
expr_stmt|;
comment|// Restore baseURL
name|NamedList
name|status
init|=
operator|(
name|NamedList
operator|)
name|namedListResponse
operator|.
name|get
argument_list|(
literal|"status"
argument_list|)
decl_stmt|;
name|NamedList
name|collectionStatus
init|=
operator|(
name|NamedList
operator|)
name|status
operator|.
name|get
argument_list|(
literal|"collection1"
argument_list|)
decl_stmt|;
name|String
name|collectionSchema
init|=
operator|(
name|String
operator|)
name|collectionStatus
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|SCHEMA
argument_list|)
decl_stmt|;
comment|// Make sure the upgrade to managed schema happened
name|assertEquals
argument_list|(
literal|"Schema resource name differs from expected name"
argument_list|,
literal|"managed-schema"
argument_list|,
name|collectionSchema
argument_list|)
expr_stmt|;
comment|// Make sure "DO NOT EDIT" is in the content of the managed schema
name|String
name|fileContent
init|=
name|getFileContentFromZooKeeper
argument_list|(
literal|"managed-schema"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Managed schema is missing"
argument_list|,
name|fileContent
operator|.
name|contains
argument_list|(
literal|"DO NOT EDIT"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure the original non-managed schema is no longer in ZooKeeper
name|assertFileNotInZooKeeper
argument_list|(
literal|"schema.xml"
argument_list|)
expr_stmt|;
comment|// Make sure the renamed non-managed schema is present in ZooKeeper
name|fileContent
operator|=
name|getFileContentFromZooKeeper
argument_list|(
literal|"schema.xml.bak"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"schema file doesn't contain '<schema'"
argument_list|,
name|fileContent
operator|.
name|contains
argument_list|(
literal|"<schema"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getFileContentFromZooKeeper
specifier|private
name|String
name|getFileContentFromZooKeeper
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|QueryRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|(
literal|"file"
argument_list|,
name|fileName
argument_list|)
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/file"
argument_list|)
expr_stmt|;
name|RawResponseParser
name|responseParser
init|=
operator|new
name|RawResponseParser
argument_list|()
decl_stmt|;
name|request
operator|.
name|setResponseParser
argument_list|(
name|responseParser
argument_list|)
expr_stmt|;
name|int
name|which
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|clients
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// For some reason, /admin/file requests work without stripping the /collection1 step from the URL
comment|// (unlike /admin/cores requests - see above)
name|SolrServer
name|client
init|=
name|clients
operator|.
name|get
argument_list|(
name|which
argument_list|)
decl_stmt|;
name|client
operator|.
name|request
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
name|responseParser
operator|.
name|getRawFileContent
argument_list|()
return|;
block|}
DECL|class|RawResponseParser
specifier|private
class|class
name|RawResponseParser
extends|extends
name|ResponseParser
block|{
comment|// Stolen from ShowFileRequestHandlerTest
DECL|field|rawFileContent
specifier|private
name|String
name|rawFileContent
init|=
literal|null
decl_stmt|;
DECL|method|getRawFileContent
name|String
name|getRawFileContent
parameter_list|()
block|{
return|return
name|rawFileContent
return|;
block|}
annotation|@
name|Override
DECL|method|getWriterType
specifier|public
name|String
name|getWriterType
parameter_list|()
block|{
return|return
literal|"mock"
return|;
comment|//unfortunately this gets put onto params wt=mock but it apparently has no effect
block|}
annotation|@
name|Override
DECL|method|processResponse
specifier|public
name|NamedList
argument_list|<
name|Object
argument_list|>
name|processResponse
parameter_list|(
name|InputStream
name|body
parameter_list|,
name|String
name|encoding
parameter_list|)
block|{
try|try
block|{
name|rawFileContent
operator|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|body
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|processResponse
specifier|public
name|NamedList
argument_list|<
name|Object
argument_list|>
name|processResponse
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"TODO unimplemented"
argument_list|)
throw|;
comment|//TODO
block|}
block|}
DECL|method|assertFileNotInZooKeeper
specifier|protected
specifier|final
name|void
name|assertFileNotInZooKeeper
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Stolen from AbstractBadConfigTestBase
name|String
name|errString
init|=
literal|"Not Found"
decl_stmt|;
name|ignoreException
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|errString
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|rawContent
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rawContent
operator|=
name|getFileContentFromZooKeeper
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// short circuit out if we found what we expected
if|if
condition|(
operator|-
literal|1
operator|!=
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
name|errString
argument_list|)
condition|)
return|return;
comment|// otherwise, rethrow it, possibly completely unrelated
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unexpected error, expected error matching: "
operator|+
name|errString
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|resetExceptionIgnores
argument_list|()
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"File '"
operator|+
name|fileName
operator|+
literal|"' was unexpectedly found in ZooKeeper.  Content starts with '"
operator|+
name|rawContent
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
operator|+
literal|" [...]'"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
