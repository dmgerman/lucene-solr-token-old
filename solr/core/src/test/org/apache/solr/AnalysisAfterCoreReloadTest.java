begin_unit
begin_package
DECL|package|org.apache.solr
package|package
name|org
operator|.
name|apache
operator|.
name|solr
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|AbstractUpdateRequest
operator|.
name|ACTION
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|AbstractSolrTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_class
DECL|class|AnalysisAfterCoreReloadTest
specifier|public
class|class
name|AnalysisAfterCoreReloadTest
extends|extends
name|AbstractSolrTestCase
block|{
DECL|field|homeDir
specifier|private
name|File
name|homeDir
decl_stmt|;
DECL|field|port
name|int
name|port
init|=
literal|0
decl_stmt|;
DECL|field|context
specifier|static
specifier|final
name|String
name|context
init|=
literal|"/solr"
decl_stmt|;
DECL|field|jetty
name|JettySolrRunner
name|jetty
decl_stmt|;
DECL|field|collection
specifier|static
specifier|final
name|String
name|collection
init|=
literal|"collection1"
decl_stmt|;
annotation|@
name|After
DECL|method|cleanUp
specifier|public
name|void
name|cleanUp
parameter_list|()
throws|throws
name|Exception
block|{
name|jetty
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|homeDir
operator|!=
literal|null
operator|&&
name|homeDir
operator|.
name|isDirectory
argument_list|()
operator|&&
name|homeDir
operator|.
name|exists
argument_list|()
condition|)
name|recurseDelete
argument_list|(
name|homeDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSolrHome
specifier|public
name|String
name|getSolrHome
parameter_list|()
block|{
return|return
name|homeDir
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|homeDir
operator|=
operator|new
name|File
argument_list|(
name|TEMP_DIR
operator|+
name|File
operator|.
name|separator
operator|+
literal|"solr-test-home-"
operator|+
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
expr_stmt|;
name|homeDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|copyDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|getFile
argument_list|(
literal|"solr/"
operator|+
name|collection
argument_list|)
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|,
name|homeDir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|jetty
operator|=
operator|new
name|JettySolrRunner
argument_list|(
name|getSolrHome
argument_list|()
argument_list|,
name|context
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jetty
operator|.
name|start
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|port
operator|=
name|jetty
operator|.
name|getLocalPort
argument_list|()
expr_stmt|;
block|}
DECL|method|testStopwordsAfterCoreReload
specifier|public
name|void
name|testStopwordsAfterCoreReload
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|setField
argument_list|(
literal|"id"
argument_list|,
literal|"42"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setField
argument_list|(
literal|"teststop"
argument_list|,
literal|"terma stopworda stopwordb stopwordc"
argument_list|)
expr_stmt|;
comment|// default stopwords - stopworda and stopwordb
name|UpdateRequest
name|up
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|up
operator|.
name|setAction
argument_list|(
name|ACTION
operator|.
name|COMMIT
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|up
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|up
operator|.
name|process
argument_list|(
name|getSolrCore
argument_list|()
argument_list|)
expr_stmt|;
name|SolrQuery
name|q
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|QueryRequest
name|r
init|=
operator|new
name|QueryRequest
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|q
operator|.
name|setQuery
argument_list|(
literal|"teststop:terma"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|process
argument_list|(
name|getSolrCore
argument_list|()
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|=
operator|new
name|SolrQuery
argument_list|()
expr_stmt|;
name|r
operator|=
operator|new
name|QueryRequest
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|q
operator|.
name|setQuery
argument_list|(
literal|"teststop:stopworda"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|process
argument_list|(
name|getSolrCore
argument_list|()
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|=
operator|new
name|SolrQuery
argument_list|()
expr_stmt|;
name|r
operator|=
operator|new
name|QueryRequest
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|q
operator|.
name|setQuery
argument_list|(
literal|"teststop:stopwordb"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|process
argument_list|(
name|getSolrCore
argument_list|()
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|=
operator|new
name|SolrQuery
argument_list|()
expr_stmt|;
name|r
operator|=
operator|new
name|QueryRequest
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|q
operator|.
name|setQuery
argument_list|(
literal|"teststop:stopwordc"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|process
argument_list|(
name|getSolrCore
argument_list|()
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// overwrite stopwords file with stopword list ["stopwordc"] and reload the core
name|overwriteStopwords
argument_list|(
literal|"stopwordc\n"
argument_list|)
expr_stmt|;
name|SolrServer
name|coreadmin
init|=
name|getSolrAdmin
argument_list|()
decl_stmt|;
name|CoreAdminRequest
operator|.
name|reloadCore
argument_list|(
name|collection
argument_list|,
name|coreadmin
argument_list|)
expr_stmt|;
name|up
operator|.
name|process
argument_list|(
name|getSolrCore
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|=
operator|new
name|SolrQuery
argument_list|()
expr_stmt|;
name|r
operator|=
operator|new
name|QueryRequest
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|q
operator|.
name|setQuery
argument_list|(
literal|"teststop:terma"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|process
argument_list|(
name|getSolrCore
argument_list|()
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|=
operator|new
name|SolrQuery
argument_list|()
expr_stmt|;
name|r
operator|=
operator|new
name|QueryRequest
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|q
operator|.
name|setQuery
argument_list|(
literal|"teststop:stopworda"
argument_list|)
expr_stmt|;
comment|// stopworda is no longer a stopword
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|process
argument_list|(
name|getSolrCore
argument_list|()
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|=
operator|new
name|SolrQuery
argument_list|()
expr_stmt|;
name|r
operator|=
operator|new
name|QueryRequest
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|q
operator|.
name|setQuery
argument_list|(
literal|"teststop:stopwordb"
argument_list|)
expr_stmt|;
comment|// stopwordb is no longer a stopword
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|process
argument_list|(
name|getSolrCore
argument_list|()
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|=
operator|new
name|SolrQuery
argument_list|()
expr_stmt|;
name|r
operator|=
operator|new
name|QueryRequest
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|q
operator|.
name|setQuery
argument_list|(
literal|"teststop:stopwordc"
argument_list|)
expr_stmt|;
comment|// stopwordc should be a stopword
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|process
argument_list|(
name|getSolrCore
argument_list|()
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|overwriteStopwords
specifier|private
name|void
name|overwriteStopwords
parameter_list|(
name|String
name|stopwords
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getCore
argument_list|(
name|collection
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|configDir
init|=
name|core
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|getConfigDir
argument_list|()
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|configDir
argument_list|,
literal|"stopwords.txt"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
name|file
argument_list|,
name|stopwords
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|core
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getSolrAdmin
specifier|protected
name|SolrServer
name|getSolrAdmin
parameter_list|()
block|{
return|return
name|createServer
argument_list|(
literal|""
argument_list|)
return|;
block|}
DECL|method|getSolrCore
specifier|protected
name|SolrServer
name|getSolrCore
parameter_list|()
block|{
return|return
name|createServer
argument_list|(
name|collection
argument_list|)
return|;
block|}
DECL|method|createServer
specifier|private
name|SolrServer
name|createServer
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
block|{
comment|// setup the server...
name|String
name|url
init|=
literal|"http://localhost:"
operator|+
name|port
operator|+
name|context
operator|+
literal|"/"
operator|+
name|name
decl_stmt|;
name|HttpSolrServer
name|s
init|=
operator|new
name|HttpSolrServer
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|s
operator|.
name|setConnectionTimeout
argument_list|(
name|SolrTestCaseJ4
operator|.
name|DEFAULT_CONNECTION_TIMEOUT
argument_list|)
expr_stmt|;
name|s
operator|.
name|setDefaultMaxConnectionsPerHost
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|s
operator|.
name|setMaxTotalConnections
argument_list|(
literal|100
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getSchemaFile
specifier|public
name|String
name|getSchemaFile
parameter_list|()
block|{
return|return
literal|"schema.xml"
return|;
block|}
annotation|@
name|Override
DECL|method|getSolrConfigFile
specifier|public
name|String
name|getSolrConfigFile
parameter_list|()
block|{
return|return
literal|"solrconfig.xml"
return|;
block|}
block|}
end_class
end_unit
