begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|OpenBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|OpenBitSetIterator
import|;
end_import
begin_comment
comment|/** Performance tester for OpenBitSet.  * Use -Xbatch for more predictable results, and run tests such that the duration  * is at least 10 seconds for better accuracy.  Close browsers on your system (javascript  * or flash may be running and cause more erratic results).  *  *  */
end_comment
begin_class
DECL|class|BitSetPerf
specifier|public
class|class
name|BitSetPerf
block|{
DECL|field|rand
specifier|static
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|method|randomSets
specifier|static
name|void
name|randomSets
parameter_list|(
name|int
name|maxSize
parameter_list|,
name|int
name|bitsToSet
parameter_list|,
name|BitSet
name|target1
parameter_list|,
name|OpenBitSet
name|target2
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bitsToSet
condition|;
name|i
operator|++
control|)
block|{
name|int
name|idx
decl_stmt|;
do|do
block|{
name|idx
operator|=
name|rand
operator|.
name|nextInt
argument_list|(
name|maxSize
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|target2
operator|.
name|getAndSet
argument_list|(
name|idx
argument_list|)
condition|)
do|;
name|target1
operator|.
name|set
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
comment|/***      int i=target1.cardinality();      if (i!=bitsToSet || i!=target2.cardinality()) throw new RuntimeException();      ***/
block|}
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|5
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"BitSetTest<bitSetSize><numSets><numBitsSet><testName><iter><impl>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  impl => open for OpenBitSet"
argument_list|)
expr_stmt|;
block|}
name|int
name|bitSetSize
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|numSets
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|int
name|numBitsSet
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|String
name|test
init|=
name|args
index|[
literal|3
index|]
decl_stmt|;
name|int
name|iter
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|4
index|]
argument_list|)
decl_stmt|;
name|String
name|impl
init|=
name|args
operator|.
name|length
operator|>
literal|5
condition|?
name|args
index|[
literal|5
index|]
operator|.
name|intern
argument_list|()
else|:
literal|"bit"
decl_stmt|;
name|BitSet
index|[]
name|sets
init|=
operator|new
name|BitSet
index|[
name|numSets
index|]
decl_stmt|;
name|OpenBitSet
index|[]
name|osets
init|=
operator|new
name|OpenBitSet
index|[
name|numSets
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSets
condition|;
name|i
operator|++
control|)
block|{
name|sets
index|[
name|i
index|]
operator|=
operator|new
name|BitSet
argument_list|(
name|bitSetSize
argument_list|)
expr_stmt|;
name|osets
index|[
name|i
index|]
operator|=
operator|new
name|OpenBitSet
argument_list|(
name|bitSetSize
argument_list|)
expr_stmt|;
name|randomSets
argument_list|(
name|bitSetSize
argument_list|,
name|numBitsSet
argument_list|,
name|sets
index|[
name|i
index|]
argument_list|,
name|osets
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|BitSet
name|bs
init|=
operator|new
name|BitSet
argument_list|(
name|bitSetSize
argument_list|)
decl_stmt|;
name|OpenBitSet
name|obs
init|=
operator|new
name|OpenBitSet
argument_list|(
name|bitSetSize
argument_list|)
decl_stmt|;
name|randomSets
argument_list|(
name|bitSetSize
argument_list|,
name|numBitsSet
argument_list|,
name|bs
argument_list|,
name|obs
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
literal|0
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"union"
operator|.
name|equals
argument_list|(
name|test
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|it
init|=
literal|0
init|;
name|it
operator|<
name|iter
condition|;
name|it
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSets
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|impl
operator|==
literal|"open"
condition|)
block|{
name|OpenBitSet
name|other
init|=
name|osets
index|[
name|i
index|]
decl_stmt|;
name|obs
operator|.
name|union
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BitSet
name|other
init|=
name|sets
index|[
name|i
index|]
decl_stmt|;
name|bs
operator|.
name|or
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
literal|"cardinality"
operator|.
name|equals
argument_list|(
name|test
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|it
init|=
literal|0
init|;
name|it
operator|<
name|iter
condition|;
name|it
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSets
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|impl
operator|==
literal|"open"
condition|)
block|{
name|ret
operator|+=
name|osets
index|[
name|i
index|]
operator|.
name|cardinality
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|+=
name|sets
index|[
name|i
index|]
operator|.
name|cardinality
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
literal|"get"
operator|.
name|equals
argument_list|(
name|test
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|it
init|=
literal|0
init|;
name|it
operator|<
name|iter
condition|;
name|it
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSets
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|impl
operator|==
literal|"open"
condition|)
block|{
name|OpenBitSet
name|oset
init|=
name|osets
index|[
name|i
index|]
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|bitSetSize
condition|;
name|k
operator|++
control|)
if|if
condition|(
name|oset
operator|.
name|fastGet
argument_list|(
name|k
argument_list|)
condition|)
name|ret
operator|++
expr_stmt|;
block|}
else|else
block|{
name|BitSet
name|bset
init|=
name|sets
index|[
name|i
index|]
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|bitSetSize
condition|;
name|k
operator|++
control|)
if|if
condition|(
name|bset
operator|.
name|get
argument_list|(
name|k
argument_list|)
condition|)
name|ret
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
literal|"icount"
operator|.
name|equals
argument_list|(
name|test
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|it
init|=
literal|0
init|;
name|it
operator|<
name|iter
condition|;
name|it
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSets
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|impl
operator|==
literal|"open"
condition|)
block|{
name|OpenBitSet
name|a
init|=
name|osets
index|[
name|i
index|]
decl_stmt|;
name|OpenBitSet
name|b
init|=
name|osets
index|[
name|i
operator|+
literal|1
index|]
decl_stmt|;
name|ret
operator|+=
name|OpenBitSet
operator|.
name|intersectionCount
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BitSet
name|a
init|=
name|sets
index|[
name|i
index|]
decl_stmt|;
name|BitSet
name|b
init|=
name|sets
index|[
name|i
operator|+
literal|1
index|]
decl_stmt|;
name|BitSet
name|newset
init|=
operator|(
name|BitSet
operator|)
name|a
operator|.
name|clone
argument_list|()
decl_stmt|;
name|newset
operator|.
name|and
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|ret
operator|+=
name|newset
operator|.
name|cardinality
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
literal|"clone"
operator|.
name|equals
argument_list|(
name|test
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|it
init|=
literal|0
init|;
name|it
operator|<
name|iter
condition|;
name|it
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSets
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|impl
operator|==
literal|"open"
condition|)
block|{
name|osets
index|[
name|i
index|]
operator|=
operator|(
name|OpenBitSet
operator|)
name|osets
index|[
name|i
index|]
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sets
index|[
name|i
index|]
operator|=
operator|(
name|BitSet
operator|)
name|sets
index|[
name|i
index|]
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
literal|"nextSetBit"
operator|.
name|equals
argument_list|(
name|test
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|it
init|=
literal|0
init|;
name|it
operator|<
name|iter
condition|;
name|it
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSets
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|impl
operator|==
literal|"open"
condition|)
block|{
specifier|final
name|OpenBitSet
name|set
init|=
name|osets
index|[
name|i
index|]
decl_stmt|;
for|for
control|(
name|int
name|next
init|=
name|set
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
init|;
name|next
operator|>=
literal|0
condition|;
name|next
operator|=
name|set
operator|.
name|nextSetBit
argument_list|(
name|next
operator|+
literal|1
argument_list|)
control|)
block|{
name|ret
operator|+=
name|next
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|BitSet
name|set
init|=
name|sets
index|[
name|i
index|]
decl_stmt|;
for|for
control|(
name|int
name|next
init|=
name|set
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
init|;
name|next
operator|>=
literal|0
condition|;
name|next
operator|=
name|set
operator|.
name|nextSetBit
argument_list|(
name|next
operator|+
literal|1
argument_list|)
control|)
block|{
name|ret
operator|+=
name|next
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
literal|"iterator"
operator|.
name|equals
argument_list|(
name|test
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|it
init|=
literal|0
init|;
name|it
operator|<
name|iter
condition|;
name|it
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSets
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|impl
operator|==
literal|"open"
condition|)
block|{
specifier|final
name|OpenBitSet
name|set
init|=
name|osets
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|OpenBitSetIterator
name|iterator
init|=
operator|new
name|OpenBitSetIterator
argument_list|(
name|set
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|next
init|=
name|iterator
operator|.
name|nextDoc
argument_list|()
init|;
name|next
operator|>=
literal|0
condition|;
name|next
operator|=
name|iterator
operator|.
name|nextDoc
argument_list|()
control|)
block|{
name|ret
operator|+=
name|next
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|BitSet
name|set
init|=
name|sets
index|[
name|i
index|]
decl_stmt|;
for|for
control|(
name|int
name|next
init|=
name|set
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
init|;
name|next
operator|>=
literal|0
condition|;
name|next
operator|=
name|set
operator|.
name|nextSetBit
argument_list|(
name|next
operator|+
literal|1
argument_list|)
control|)
block|{
name|ret
operator|+=
name|next
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ret="
operator|+
name|ret
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TIME="
operator|+
operator|(
name|end
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
