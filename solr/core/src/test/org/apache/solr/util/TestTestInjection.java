begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_class
DECL|class|TestTestInjection
specifier|public
class|class
name|TestTestInjection
extends|extends
name|LuceneTestCase
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
block|{      }
annotation|@
name|AfterClass
DECL|method|cleanup
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
block|{      }
DECL|method|testBasics
specifier|public
name|void
name|testBasics
parameter_list|()
block|{
name|TestInjection
operator|.
name|failReplicaRequests
operator|=
literal|"true:100"
expr_stmt|;
try|try
block|{
name|TestInjection
operator|.
name|injectFailReplicaRequests
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"should fail 100%"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
literal|"Should not fail based on bad syntax"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
operator|.
name|contains
argument_list|(
literal|"bad syntax"
argument_list|)
argument_list|)
expr_stmt|;
comment|// good
comment|// assertTrue("Should fail with * based error: " + e.getClass().getName(), (e instanceof *));
block|}
name|TestInjection
operator|.
name|failReplicaRequests
operator|=
literal|"true:00"
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
comment|// should never fail
name|TestInjection
operator|.
name|injectFailReplicaRequests
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testBadSyntax
specifier|public
name|void
name|testBadSyntax
parameter_list|()
block|{
name|testBadSyntax
argument_list|(
literal|"true/10"
argument_list|)
expr_stmt|;
name|testBadSyntax
argument_list|(
literal|"boo:100"
argument_list|)
expr_stmt|;
name|testBadSyntax
argument_list|(
literal|"false:100f"
argument_list|)
expr_stmt|;
name|testBadSyntax
argument_list|(
literal|"TRUE:0:"
argument_list|)
expr_stmt|;
block|}
DECL|method|testGoodSyntax
specifier|public
name|void
name|testGoodSyntax
parameter_list|()
block|{
name|testGoodSyntax
argument_list|(
literal|"true:10"
argument_list|)
expr_stmt|;
name|testGoodSyntax
argument_list|(
literal|"true:100"
argument_list|)
expr_stmt|;
name|testGoodSyntax
argument_list|(
literal|"false:100"
argument_list|)
expr_stmt|;
name|testGoodSyntax
argument_list|(
literal|"TRUE:0"
argument_list|)
expr_stmt|;
name|testGoodSyntax
argument_list|(
literal|"TRUE:00"
argument_list|)
expr_stmt|;
name|testGoodSyntax
argument_list|(
literal|"TRUE:000"
argument_list|)
expr_stmt|;
name|testGoodSyntax
argument_list|(
literal|"FALSE:50"
argument_list|)
expr_stmt|;
name|testGoodSyntax
argument_list|(
literal|"FAlsE:99"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBadSyntax
specifier|public
name|void
name|testBadSyntax
parameter_list|(
name|String
name|syntax
parameter_list|)
block|{
name|TestInjection
operator|.
name|failReplicaRequests
operator|=
name|syntax
expr_stmt|;
try|try
block|{
name|TestInjection
operator|.
name|injectFailReplicaRequests
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"should fail 100%"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
operator|.
name|contains
argument_list|(
literal|"bad syntax"
argument_list|)
argument_list|)
expr_stmt|;
comment|// good
block|}
block|}
DECL|method|testGoodSyntax
specifier|public
name|void
name|testGoodSyntax
parameter_list|(
name|String
name|syntax
parameter_list|)
block|{
name|TestInjection
operator|.
name|failReplicaRequests
operator|=
name|syntax
expr_stmt|;
try|try
block|{
name|TestInjection
operator|.
name|injectFailReplicaRequests
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// we can fail, but should not be for bad syntax
name|assertFalse
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
operator|.
name|contains
argument_list|(
literal|"bad syntax"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
