begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|QParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|QueryCommand
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|QueryResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|SolrPluginUtils
operator|.
name|DisjunctionMaxQueryParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|DocList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PhraseQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DisjunctionMaxQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_comment
comment|/**  * Tests that the functions in SolrPluginUtils work as advertised.  */
end_comment
begin_class
DECL|class|SolrPluginUtilsTest
specifier|public
class|class
name|SolrPluginUtilsTest
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDocListConversion
specifier|public
name|void
name|testDocListConversion
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
literal|""
argument_list|,
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3234"
argument_list|,
literal|"val_i"
argument_list|,
literal|"1"
argument_list|,
literal|"val_dynamic"
argument_list|,
literal|"quick red fox"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
literal|""
argument_list|,
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3235"
argument_list|,
literal|"val_i"
argument_list|,
literal|"1"
argument_list|,
literal|"val_dynamic"
argument_list|,
literal|"quick green fox"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
literal|""
argument_list|,
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3236"
argument_list|,
literal|"val_i"
argument_list|,
literal|"1"
argument_list|,
literal|"val_dynamic"
argument_list|,
literal|"quick brown fox"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
literal|""
argument_list|,
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|holder
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSearcher
argument_list|()
decl_stmt|;
try|try
block|{
name|SolrIndexSearcher
name|srchr
init|=
name|holder
operator|.
name|get
argument_list|()
decl_stmt|;
name|QueryResult
name|qr
init|=
operator|new
name|QueryResult
argument_list|()
decl_stmt|;
name|QueryCommand
name|cmd
init|=
operator|new
name|QueryCommand
argument_list|()
decl_stmt|;
name|cmd
operator|.
name|setQuery
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setLen
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|qr
operator|=
name|srchr
operator|.
name|search
argument_list|(
name|qr
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
name|DocList
name|docs
init|=
name|qr
operator|.
name|getDocList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong docs size"
argument_list|,
literal|3
argument_list|,
name|docs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|fields
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|"val_dynamic"
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|"dynamic_val"
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|"range_facet_l"
argument_list|)
expr_stmt|;
comment|// copied from id
name|SolrDocumentList
name|list
init|=
name|SolrPluginUtils
operator|.
name|docListToSolrDocumentList
argument_list|(
name|docs
argument_list|,
name|srchr
argument_list|,
name|fields
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong list Size"
argument_list|,
name|docs
operator|.
name|size
argument_list|()
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrDocument
name|document
range|:
name|list
control|)
block|{
name|assertTrue
argument_list|(
literal|"unexpected field"
argument_list|,
operator|!
name|document
operator|.
name|containsKey
argument_list|(
literal|"val_i"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"unexpected id field"
argument_list|,
operator|!
name|document
operator|.
name|containsKey
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"original field"
argument_list|,
name|document
operator|.
name|containsKey
argument_list|(
literal|"val_dynamic"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"dyn copy field"
argument_list|,
name|document
operator|.
name|containsKey
argument_list|(
literal|"dynamic_val"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"copy field"
argument_list|,
name|document
operator|.
name|containsKey
argument_list|(
literal|"range_facet_l"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"original field null"
argument_list|,
name|document
operator|.
name|get
argument_list|(
literal|"val_dynamic"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"dyn copy field null"
argument_list|,
name|document
operator|.
name|get
argument_list|(
literal|"dynamic_val"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"copy field null"
argument_list|,
name|document
operator|.
name|get
argument_list|(
literal|"range_facet_l"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|holder
condition|)
name|holder
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPartialEscape
specifier|public
name|void
name|testPartialEscape
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|pe
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|pe
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo\\:bar"
argument_list|,
name|pe
argument_list|(
literal|"foo:bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"+foo\\:bar"
argument_list|,
name|pe
argument_list|(
literal|"+foo:bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo \\! bar"
argument_list|,
name|pe
argument_list|(
literal|"foo ! bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo\\?"
argument_list|,
name|pe
argument_list|(
literal|"foo?"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo \"bar\""
argument_list|,
name|pe
argument_list|(
literal|"foo \"bar\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo\\! \"bar\""
argument_list|,
name|pe
argument_list|(
literal|"foo! \"bar\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStripUnbalancedQuotes
specifier|public
name|void
name|testStripUnbalancedQuotes
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|strip
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|strip
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo \"bar\""
argument_list|,
name|strip
argument_list|(
literal|"foo \"bar\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"42"
argument_list|,
name|strip
argument_list|(
literal|"42\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\"how now brown cow?\""
argument_list|,
name|strip
argument_list|(
literal|"\"how now brown cow?\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\"you go\" \"now!\""
argument_list|,
name|strip
argument_list|(
literal|"\"you go\" \"now!\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStripIllegalOperators
specifier|public
name|void
name|testStripIllegalOperators
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|stripOp
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|stripOp
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo -bar"
argument_list|,
name|stripOp
argument_list|(
literal|"foo -bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo +bar"
argument_list|,
name|stripOp
argument_list|(
literal|"foo +bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo + bar"
argument_list|,
name|stripOp
argument_list|(
literal|"foo + bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo+ bar"
argument_list|,
name|stripOp
argument_list|(
literal|"foo+ bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo+ bar"
argument_list|,
name|stripOp
argument_list|(
literal|"foo+ bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo+"
argument_list|,
name|stripOp
argument_list|(
literal|"foo+"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo bar"
argument_list|,
name|stripOp
argument_list|(
literal|"foo bar -"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo bar "
argument_list|,
name|stripOp
argument_list|(
literal|"foo bar - + ++"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo bar"
argument_list|,
name|stripOp
argument_list|(
literal|"foo --bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo bar "
argument_list|,
name|stripOp
argument_list|(
literal|"foo -------------------------------------------------------------------------------------------------------------------------bar --"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo bar "
argument_list|,
name|stripOp
argument_list|(
literal|"foo --bar -----------------------------------------------------------------------------------------------------------------------"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParseFieldBoosts
specifier|public
name|void
name|testParseFieldBoosts
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|e1
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|e1
operator|.
name|put
argument_list|(
literal|"fieldOne"
argument_list|,
literal|2.3f
argument_list|)
expr_stmt|;
name|e1
operator|.
name|put
argument_list|(
literal|"fieldTwo"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|e1
operator|.
name|put
argument_list|(
literal|"fieldThree"
argument_list|,
operator|-
literal|0.4f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"basic e1"
argument_list|,
name|e1
argument_list|,
name|SolrPluginUtils
operator|.
name|parseFieldBoosts
argument_list|(
literal|"fieldOne^2.3 fieldTwo fieldThree^-0.4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"spacey e1"
argument_list|,
name|e1
argument_list|,
name|SolrPluginUtils
operator|.
name|parseFieldBoosts
argument_list|(
literal|"  fieldOne^2.3   fieldTwo fieldThree^-0.4   "
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"really spacey e1"
argument_list|,
name|e1
argument_list|,
name|SolrPluginUtils
operator|.
name|parseFieldBoosts
argument_list|(
literal|" \t fieldOne^2.3 \n  fieldTwo fieldThree^-0.4   "
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"really spacey e1"
argument_list|,
name|e1
argument_list|,
name|SolrPluginUtils
operator|.
name|parseFieldBoosts
argument_list|(
operator|new
name|String
index|[]
block|{
literal|" \t fieldOne^2.3 \n"
block|,
literal|"  fieldTwo fieldThree^-0.4   "
block|,
literal|" "
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|e2
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"empty e2"
argument_list|,
name|e2
argument_list|,
name|SolrPluginUtils
operator|.
name|parseFieldBoosts
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"spacey e2"
argument_list|,
name|e2
argument_list|,
name|SolrPluginUtils
operator|.
name|parseFieldBoosts
argument_list|(
literal|"   \t   "
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDisjunctionMaxQueryParser
specifier|public
name|void
name|testDisjunctionMaxQueryParser
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|out
decl_stmt|;
name|String
name|t
decl_stmt|;
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|()
decl_stmt|;
name|QParser
name|qparser
init|=
name|QParser
operator|.
name|getParser
argument_list|(
literal|"hi"
argument_list|,
literal|"dismax"
argument_list|,
name|req
argument_list|)
decl_stmt|;
name|DisjunctionMaxQueryParser
name|qp
init|=
operator|new
name|SolrPluginUtils
operator|.
name|DisjunctionMaxQueryParser
argument_list|(
name|qparser
argument_list|,
name|req
operator|.
name|getSchema
argument_list|()
operator|.
name|getDefaultSearchFieldName
argument_list|()
argument_list|)
decl_stmt|;
name|qp
operator|.
name|addAlias
argument_list|(
literal|"hoss"
argument_list|,
literal|0.01f
argument_list|,
name|SolrPluginUtils
operator|.
name|parseFieldBoosts
argument_list|(
literal|"title^2.0 title_stemmed name^1.2 subject^0.5"
argument_list|)
argument_list|)
expr_stmt|;
name|qp
operator|.
name|addAlias
argument_list|(
literal|"test"
argument_list|,
literal|0.01f
argument_list|,
name|SolrPluginUtils
operator|.
name|parseFieldBoosts
argument_list|(
literal|"text^2.0"
argument_list|)
argument_list|)
expr_stmt|;
name|qp
operator|.
name|addAlias
argument_list|(
literal|"unused"
argument_list|,
literal|1.0f
argument_list|,
name|SolrPluginUtils
operator|.
name|parseFieldBoosts
argument_list|(
literal|"subject^0.5 sind^1.5"
argument_list|)
argument_list|)
expr_stmt|;
comment|/* first some sanity tests that don't use aliasing at all */
name|t
operator|=
literal|"XXXXXXXX"
expr_stmt|;
name|out
operator|=
name|qp
operator|.
name|parse
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|t
operator|+
literal|" sanity test gave back null"
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|+
literal|" sanity test isn't TermQuery: "
operator|+
name|out
operator|.
name|getClass
argument_list|()
argument_list|,
name|out
operator|instanceof
name|TermQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|+
literal|" sanity test is wrong field"
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getDefaultSearchFieldName
argument_list|()
argument_list|,
operator|(
operator|(
name|TermQuery
operator|)
name|out
operator|)
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|=
literal|"subject:XXXXXXXX"
expr_stmt|;
name|out
operator|=
name|qp
operator|.
name|parse
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|t
operator|+
literal|" sanity test gave back null"
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|+
literal|" sanity test isn't TermQuery: "
operator|+
name|out
operator|.
name|getClass
argument_list|()
argument_list|,
name|out
operator|instanceof
name|TermQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|+
literal|" sanity test is wrong field"
argument_list|,
literal|"subject"
argument_list|,
operator|(
operator|(
name|TermQuery
operator|)
name|out
operator|)
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
expr_stmt|;
comment|/* field has untokenzied type, so this should be a term anyway */
name|t
operator|=
literal|"sind:\"simple phrase\""
expr_stmt|;
name|out
operator|=
name|qp
operator|.
name|parse
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|t
operator|+
literal|" sanity test gave back null"
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|+
literal|" sanity test isn't TermQuery: "
operator|+
name|out
operator|.
name|getClass
argument_list|()
argument_list|,
name|out
operator|instanceof
name|TermQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|+
literal|" sanity test is wrong field"
argument_list|,
literal|"sind"
argument_list|,
operator|(
operator|(
name|TermQuery
operator|)
name|out
operator|)
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|=
literal|"subject:\"simple phrase\""
expr_stmt|;
name|out
operator|=
name|qp
operator|.
name|parse
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|t
operator|+
literal|" sanity test gave back null"
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|+
literal|" sanity test isn't PhraseQuery: "
operator|+
name|out
operator|.
name|getClass
argument_list|()
argument_list|,
name|out
operator|instanceof
name|PhraseQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|+
literal|" sanity test is wrong field"
argument_list|,
literal|"subject"
argument_list|,
operator|(
operator|(
name|PhraseQuery
operator|)
name|out
operator|)
operator|.
name|getTerms
argument_list|()
index|[
literal|0
index|]
operator|.
name|field
argument_list|()
argument_list|)
expr_stmt|;
comment|/* now some tests that use aliasing */
comment|/* basic usage of single "term" */
name|t
operator|=
literal|"hoss:XXXXXXXX"
expr_stmt|;
name|out
operator|=
name|qp
operator|.
name|parse
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|t
operator|+
literal|" was null"
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|+
literal|" wasn't a DMQ:"
operator|+
name|out
operator|.
name|getClass
argument_list|()
argument_list|,
name|out
operator|instanceof
name|DisjunctionMaxQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|+
literal|" wrong number of clauses"
argument_list|,
literal|4
argument_list|,
name|countItems
argument_list|(
operator|(
operator|(
name|DisjunctionMaxQuery
operator|)
name|out
operator|)
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|/* odd case, but should still work, DMQ of one clause */
name|t
operator|=
literal|"test:YYYYY"
expr_stmt|;
name|out
operator|=
name|qp
operator|.
name|parse
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|t
operator|+
literal|" was null"
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|+
literal|" wasn't a DMQ:"
operator|+
name|out
operator|.
name|getClass
argument_list|()
argument_list|,
name|out
operator|instanceof
name|DisjunctionMaxQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|+
literal|" wrong number of clauses"
argument_list|,
literal|1
argument_list|,
name|countItems
argument_list|(
operator|(
operator|(
name|DisjunctionMaxQuery
operator|)
name|out
operator|)
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|/* basic usage of multiple "terms" */
name|t
operator|=
literal|"hoss:XXXXXXXX test:YYYYY"
expr_stmt|;
name|out
operator|=
name|qp
operator|.
name|parse
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|t
operator|+
literal|" was null"
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|+
literal|" wasn't a boolean:"
operator|+
name|out
operator|.
name|getClass
argument_list|()
argument_list|,
name|out
operator|instanceof
name|BooleanQuery
argument_list|)
expr_stmt|;
block|{
name|BooleanQuery
name|bq
init|=
operator|(
name|BooleanQuery
operator|)
name|out
decl_stmt|;
name|List
argument_list|<
name|BooleanClause
argument_list|>
name|clauses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|bq
operator|.
name|clauses
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|t
operator|+
literal|" wrong number of clauses"
argument_list|,
literal|2
argument_list|,
name|clauses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Query
name|sub
init|=
name|clauses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|t
operator|+
literal|" first wasn't a DMQ:"
operator|+
name|sub
operator|.
name|getClass
argument_list|()
argument_list|,
name|sub
operator|instanceof
name|DisjunctionMaxQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|+
literal|" first had wrong number of clauses"
argument_list|,
literal|4
argument_list|,
name|countItems
argument_list|(
operator|(
operator|(
name|DisjunctionMaxQuery
operator|)
name|sub
operator|)
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sub
operator|=
name|clauses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getQuery
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|+
literal|" second wasn't a DMQ:"
operator|+
name|sub
operator|.
name|getClass
argument_list|()
argument_list|,
name|sub
operator|instanceof
name|DisjunctionMaxQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|+
literal|" second had wrong number of clauses"
argument_list|,
literal|1
argument_list|,
name|countItems
argument_list|(
operator|(
operator|(
name|DisjunctionMaxQuery
operator|)
name|sub
operator|)
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* a phrase, and a term that is a stop word for some fields */
name|t
operator|=
literal|"hoss:\"XXXXXX YYYYY\" hoss:the"
expr_stmt|;
name|out
operator|=
name|qp
operator|.
name|parse
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|t
operator|+
literal|" was null"
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|+
literal|" wasn't a boolean:"
operator|+
name|out
operator|.
name|getClass
argument_list|()
argument_list|,
name|out
operator|instanceof
name|BooleanQuery
argument_list|)
expr_stmt|;
block|{
name|BooleanQuery
name|bq
init|=
operator|(
name|BooleanQuery
operator|)
name|out
decl_stmt|;
name|List
argument_list|<
name|BooleanClause
argument_list|>
name|clauses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|bq
operator|.
name|clauses
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|t
operator|+
literal|" wrong number of clauses"
argument_list|,
literal|2
argument_list|,
name|clauses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Query
name|sub
init|=
name|clauses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|t
operator|+
literal|" first wasn't a DMQ:"
operator|+
name|sub
operator|.
name|getClass
argument_list|()
argument_list|,
name|sub
operator|instanceof
name|DisjunctionMaxQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|+
literal|" first had wrong number of clauses"
argument_list|,
literal|4
argument_list|,
name|countItems
argument_list|(
operator|(
operator|(
name|DisjunctionMaxQuery
operator|)
name|sub
operator|)
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sub
operator|=
name|clauses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getQuery
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|+
literal|" second wasn't a DMQ:"
operator|+
name|sub
operator|.
name|getClass
argument_list|()
argument_list|,
name|sub
operator|instanceof
name|DisjunctionMaxQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|+
literal|" second had wrong number of clauses (stop words)"
argument_list|,
literal|2
argument_list|,
name|countItems
argument_list|(
operator|(
operator|(
name|DisjunctionMaxQuery
operator|)
name|sub
operator|)
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|countItems
specifier|private
specifier|static
name|int
name|countItems
parameter_list|(
name|Iterator
name|i
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
annotation|@
name|Test
DECL|method|testMinShouldMatchCalculator
specifier|public
name|void
name|testMinShouldMatchCalculator
parameter_list|()
block|{
comment|/* zero is zero is zero */
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|calcMSM
argument_list|(
literal|5
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|calcMSM
argument_list|(
literal|5
argument_list|,
literal|"0%"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|calcMSM
argument_list|(
literal|5
argument_list|,
literal|" -5 "
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|calcMSM
argument_list|(
literal|5
argument_list|,
literal|"\n -100% \n"
argument_list|)
argument_list|)
expr_stmt|;
comment|/* basic integers */
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|calcMSM
argument_list|(
literal|5
argument_list|,
literal|" \n3\n "
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|calcMSM
argument_list|(
literal|5
argument_list|,
literal|"-3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|calcMSM
argument_list|(
literal|3
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|calcMSM
argument_list|(
literal|3
argument_list|,
literal|"-3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|calcMSM
argument_list|(
literal|3
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|calcMSM
argument_list|(
literal|3
argument_list|,
literal|"-5"
argument_list|)
argument_list|)
expr_stmt|;
comment|/* positive percentages with rounding */
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|calcMSM
argument_list|(
literal|3
argument_list|,
literal|" \n25% \n"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|calcMSM
argument_list|(
literal|4
argument_list|,
literal|"25%"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|calcMSM
argument_list|(
literal|5
argument_list|,
literal|" 25% "
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|calcMSM
argument_list|(
literal|10
argument_list|,
literal|"25%"
argument_list|)
argument_list|)
expr_stmt|;
comment|/* negative percentages with rounding */
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|calcMSM
argument_list|(
literal|3
argument_list|,
literal|" \n-25%\n "
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|calcMSM
argument_list|(
literal|4
argument_list|,
literal|"-25%"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|calcMSM
argument_list|(
literal|5
argument_list|,
literal|"-25%"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|calcMSM
argument_list|(
literal|10
argument_list|,
literal|"-25%"
argument_list|)
argument_list|)
expr_stmt|;
comment|/* conditional */
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|calcMSM
argument_list|(
literal|1
argument_list|,
literal|"3<0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|calcMSM
argument_list|(
literal|2
argument_list|,
literal|"3<0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|calcMSM
argument_list|(
literal|3
argument_list|,
literal|"3<0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|calcMSM
argument_list|(
literal|4
argument_list|,
literal|"3<0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|calcMSM
argument_list|(
literal|5
argument_list|,
literal|"3<0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|calcMSM
argument_list|(
literal|1
argument_list|,
literal|"3<25%"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|calcMSM
argument_list|(
literal|2
argument_list|,
literal|" 3\n<\n25% "
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|calcMSM
argument_list|(
literal|3
argument_list|,
literal|"3<25%"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|calcMSM
argument_list|(
literal|4
argument_list|,
literal|"\n 3< \n25%\n "
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|calcMSM
argument_list|(
literal|5
argument_list|,
literal|"3<25%"
argument_list|)
argument_list|)
expr_stmt|;
comment|/* multiple conditionals */
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|calcMSM
argument_list|(
literal|1
argument_list|,
literal|"\n3< -25% 10< -3 \n"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|calcMSM
argument_list|(
literal|2
argument_list|,
literal|" 3< -25% 10< -3\n"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|calcMSM
argument_list|(
literal|3
argument_list|,
literal|" 3< -25% \n 10< -3 \n"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|calcMSM
argument_list|(
literal|4
argument_list|,
literal|" 3< -25% 10< -3 "
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|calcMSM
argument_list|(
literal|5
argument_list|,
literal|" 3< -25% 10< -3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|calcMSM
argument_list|(
literal|6
argument_list|,
literal|"3<-25% 10<-3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|calcMSM
argument_list|(
literal|7
argument_list|,
literal|" 3< -25% 10< -3 "
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|calcMSM
argument_list|(
literal|8
argument_list|,
literal|" 3< -25% 10 \n< -3\n"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|calcMSM
argument_list|(
literal|9
argument_list|,
literal|" 3< -25% 10< -3 \n"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|calcMSM
argument_list|(
literal|10
argument_list|,
literal|" 3< -25% 10< -3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|calcMSM
argument_list|(
literal|11
argument_list|,
literal|"3<-25% 10<-3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|calcMSM
argument_list|(
literal|12
argument_list|,
literal|"3<-25% 10<-3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|97
argument_list|,
name|calcMSM
argument_list|(
literal|100
argument_list|,
literal|"3<-25% 10<-3"
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|q
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|SolrPluginUtils
operator|.
name|setMinShouldMatch
argument_list|(
name|q
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|q
operator|.
name|build
argument_list|()
operator|.
name|getMinimumNumberShouldMatch
argument_list|()
argument_list|)
expr_stmt|;
name|SolrPluginUtils
operator|.
name|setMinShouldMatch
argument_list|(
name|q
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|q
operator|.
name|build
argument_list|()
operator|.
name|getMinimumNumberShouldMatch
argument_list|()
argument_list|)
expr_stmt|;
name|SolrPluginUtils
operator|.
name|setMinShouldMatch
argument_list|(
name|q
argument_list|,
literal|"50%"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|q
operator|.
name|build
argument_list|()
operator|.
name|getMinimumNumberShouldMatch
argument_list|()
argument_list|)
expr_stmt|;
name|SolrPluginUtils
operator|.
name|setMinShouldMatch
argument_list|(
name|q
argument_list|,
literal|"99"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|q
operator|.
name|build
argument_list|()
operator|.
name|getMinimumNumberShouldMatch
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"e"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"f"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|SolrPluginUtils
operator|.
name|setMinShouldMatch
argument_list|(
name|q
argument_list|,
literal|"50%"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|q
operator|.
name|build
argument_list|()
operator|.
name|getMinimumNumberShouldMatch
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMinShouldMatchAutoRelax
specifier|public
name|void
name|testMinShouldMatchAutoRelax
parameter_list|()
block|{
comment|/* The basics should not be affected by autoRelax */
name|BooleanQuery
operator|.
name|Builder
name|q
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|SolrPluginUtils
operator|.
name|setMinShouldMatch
argument_list|(
name|q
argument_list|,
literal|"0"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|q
operator|.
name|build
argument_list|()
operator|.
name|getMinimumNumberShouldMatch
argument_list|()
argument_list|)
expr_stmt|;
name|SolrPluginUtils
operator|.
name|setMinShouldMatch
argument_list|(
name|q
argument_list|,
literal|"1"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|q
operator|.
name|build
argument_list|()
operator|.
name|getMinimumNumberShouldMatch
argument_list|()
argument_list|)
expr_stmt|;
name|SolrPluginUtils
operator|.
name|setMinShouldMatch
argument_list|(
name|q
argument_list|,
literal|"50%"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|q
operator|.
name|build
argument_list|()
operator|.
name|getMinimumNumberShouldMatch
argument_list|()
argument_list|)
expr_stmt|;
name|SolrPluginUtils
operator|.
name|setMinShouldMatch
argument_list|(
name|q
argument_list|,
literal|"99"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|q
operator|.
name|build
argument_list|()
operator|.
name|getMinimumNumberShouldMatch
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"e"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"f"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|SolrPluginUtils
operator|.
name|setMinShouldMatch
argument_list|(
name|q
argument_list|,
literal|"50%"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|q
operator|.
name|build
argument_list|()
operator|.
name|getMinimumNumberShouldMatch
argument_list|()
argument_list|)
expr_stmt|;
comment|/* Simulate stopwords through uneven disjuncts */
name|q
operator|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
operator|new
name|DisjunctionMaxQuery
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|0.0f
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|dmq
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"b"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|0f
argument_list|)
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|dmq
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|dmq
operator|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"b"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|dmq
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
comment|// Without relax
name|SolrPluginUtils
operator|.
name|setMinShouldMatch
argument_list|(
name|q
argument_list|,
literal|"100%"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|q
operator|.
name|build
argument_list|()
operator|.
name|getMinimumNumberShouldMatch
argument_list|()
argument_list|)
expr_stmt|;
comment|// With relax
name|SolrPluginUtils
operator|.
name|setMinShouldMatch
argument_list|(
name|q
argument_list|,
literal|"100%"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|q
operator|.
name|build
argument_list|()
operator|.
name|getMinimumNumberShouldMatch
argument_list|()
argument_list|)
expr_stmt|;
comment|// Still same result with a MUST clause extra
name|q
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"must"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|SolrPluginUtils
operator|.
name|setMinShouldMatch
argument_list|(
name|q
argument_list|,
literal|"100%"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|q
operator|.
name|build
argument_list|()
operator|.
name|getMinimumNumberShouldMatch
argument_list|()
argument_list|)
expr_stmt|;
comment|// Combination of dismax and non-dismax SHOULD clauses
name|q
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"b"
argument_list|,
literal|"should"
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|SolrPluginUtils
operator|.
name|setMinShouldMatch
argument_list|(
name|q
argument_list|,
literal|"100%"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|q
operator|.
name|build
argument_list|()
operator|.
name|getMinimumNumberShouldMatch
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|InvokeSettersTestClass
specifier|private
class|class
name|InvokeSettersTestClass
block|{
DECL|field|aFloat
specifier|private
name|float
name|aFloat
init|=
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
decl_stmt|;
DECL|method|getAFloat
specifier|public
name|float
name|getAFloat
parameter_list|()
block|{
return|return
name|aFloat
return|;
block|}
DECL|method|setAFloat
specifier|public
name|void
name|setAFloat
parameter_list|(
name|float
name|aFloat
parameter_list|)
block|{
name|this
operator|.
name|aFloat
operator|=
name|aFloat
expr_stmt|;
block|}
DECL|method|setAFloat
specifier|public
name|void
name|setAFloat
parameter_list|(
name|String
name|aFloat
parameter_list|)
block|{
name|this
operator|.
name|aFloat
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|aFloat
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInvokeSetters
specifier|public
name|void
name|testInvokeSetters
parameter_list|()
block|{
specifier|final
name|Float
name|theFloat
init|=
operator|new
name|Float
argument_list|(
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
argument_list|)
decl_stmt|;
name|implTestInvokeSetters
argument_list|(
name|theFloat
argument_list|,
name|theFloat
argument_list|)
expr_stmt|;
name|implTestInvokeSetters
argument_list|(
name|theFloat
argument_list|,
name|theFloat
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|implTestInvokeSetters
specifier|public
name|void
name|implTestInvokeSetters
parameter_list|(
specifier|final
name|Float
name|theFloat
parameter_list|,
specifier|final
name|Object
name|theFloatObject
parameter_list|)
block|{
specifier|final
name|InvokeSettersTestClass
name|bean
init|=
operator|new
name|InvokeSettersTestClass
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|initArgs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|initArgs
operator|.
name|put
argument_list|(
literal|"aFloat"
argument_list|,
name|theFloatObject
argument_list|)
expr_stmt|;
name|SolrPluginUtils
operator|.
name|invokeSetters
argument_list|(
name|bean
argument_list|,
name|initArgs
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bean
operator|.
name|getAFloat
argument_list|()
argument_list|,
name|theFloat
operator|.
name|floatValue
argument_list|()
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
block|}
comment|/** macro */
DECL|method|pe
specifier|public
name|String
name|pe
parameter_list|(
name|CharSequence
name|s
parameter_list|)
block|{
return|return
name|SolrPluginUtils
operator|.
name|partialEscape
argument_list|(
name|s
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** macro */
DECL|method|strip
specifier|public
name|String
name|strip
parameter_list|(
name|CharSequence
name|s
parameter_list|)
block|{
return|return
name|SolrPluginUtils
operator|.
name|stripUnbalancedQuotes
argument_list|(
name|s
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** macro */
DECL|method|stripOp
specifier|public
name|String
name|stripOp
parameter_list|(
name|CharSequence
name|s
parameter_list|)
block|{
return|return
name|SolrPluginUtils
operator|.
name|stripIllegalOperators
argument_list|(
name|s
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** macro */
DECL|method|calcMSM
specifier|public
name|int
name|calcMSM
parameter_list|(
name|int
name|clauses
parameter_list|,
name|String
name|spec
parameter_list|)
block|{
return|return
name|SolrPluginUtils
operator|.
name|calculateMinShouldMatch
argument_list|(
name|clauses
argument_list|,
name|spec
argument_list|)
return|;
block|}
block|}
end_class
end_unit
