begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.util.hll
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|hll
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/**  * Tests {@link HLLUtil} static methods.  *  * @author tkarnezo  */
end_comment
begin_class
DECL|class|HLLUtilTest
specifier|public
class|class
name|HLLUtilTest
extends|extends
name|LuceneTestCase
block|{
comment|/**      * Tests that {@link HLLUtil#largeEstimatorCutoff(int, int)} is the same      * as a trivial implementation.      */
annotation|@
name|Test
DECL|method|largeEstimatorCutoffTest
specifier|public
name|void
name|largeEstimatorCutoffTest
parameter_list|()
block|{
for|for
control|(
name|int
name|log2m
init|=
name|HLL
operator|.
name|MINIMUM_LOG2M_PARAM
init|;
name|log2m
operator|<=
name|HLL
operator|.
name|MAXIMUM_LOG2M_PARAM
condition|;
name|log2m
operator|++
control|)
block|{
for|for
control|(
name|int
name|regWidth
init|=
name|HLL
operator|.
name|MINIMUM_REGWIDTH_PARAM
init|;
name|regWidth
operator|<=
name|HLL
operator|.
name|MINIMUM_REGWIDTH_PARAM
condition|;
name|regWidth
operator|++
control|)
block|{
specifier|final
name|double
name|cutoff
init|=
name|HLLUtil
operator|.
name|largeEstimatorCutoff
argument_list|(
name|log2m
argument_list|,
name|regWidth
argument_list|)
decl_stmt|;
comment|// See blog post (http://research.neustar.biz/2013/01/24/hyperloglog-googles-take-on-engineering-hll/)
comment|// and original paper (Fig. 3) for information on 2^L and
comment|// "large range correction" cutoff.
specifier|final
name|double
name|expected
init|=
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
name|regWidth
argument_list|)
operator|-
literal|2
operator|+
name|log2m
argument_list|)
operator|/
literal|30.0
decl_stmt|;
name|assertEquals
argument_list|(
name|cutoff
argument_list|,
name|expected
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
