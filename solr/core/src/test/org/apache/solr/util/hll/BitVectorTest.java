begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.util.hll
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|hll
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/**  * Unit tests for {@link BitVector}.  */
end_comment
begin_class
DECL|class|BitVectorTest
specifier|public
class|class
name|BitVectorTest
extends|extends
name|LuceneTestCase
block|{
comment|/**      * Tests {@link BitVector#getRegister(long)} and {@link BitVector#setRegister(long, long)}.      */
annotation|@
name|Test
DECL|method|getSetRegisterTest
specifier|public
name|void
name|getSetRegisterTest
parameter_list|()
block|{
block|{
comment|// locally scoped for sanity
comment|// NOTE:  registers are only 5bits wide
specifier|final
name|BitVector
name|vector1
init|=
operator|new
name|BitVector
argument_list|(
literal|5
comment|/*width*/
argument_list|,
literal|128
comment|/*count, 2^7*/
argument_list|)
decl_stmt|;
specifier|final
name|BitVector
name|vector2
init|=
operator|new
name|BitVector
argument_list|(
literal|5
comment|/*width*/
argument_list|,
literal|128
comment|/*count, 2^7*/
argument_list|)
decl_stmt|;
specifier|final
name|BitVector
name|vector3
init|=
operator|new
name|BitVector
argument_list|(
literal|5
comment|/*width*/
argument_list|,
literal|128
comment|/*count, 2^7*/
argument_list|)
decl_stmt|;
specifier|final
name|BitVector
name|vector4
init|=
operator|new
name|BitVector
argument_list|(
literal|5
comment|/*width*/
argument_list|,
literal|128
comment|/*count, 2^7*/
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|128
comment|/*2^7*/
condition|;
name|i
operator|++
control|)
block|{
name|vector1
operator|.
name|setRegister
argument_list|(
name|i
argument_list|,
literal|0x1F
argument_list|)
expr_stmt|;
name|vector2
operator|.
name|setRegister
argument_list|(
name|i
argument_list|,
operator|(
name|i
operator|&
literal|0x1F
operator|)
argument_list|)
expr_stmt|;
name|vector3
operator|.
name|setRegister
argument_list|(
name|i
argument_list|,
operator|(
operator|(
literal|127
operator|-
name|i
operator|)
operator|&
literal|0x1F
operator|)
argument_list|)
expr_stmt|;
name|vector4
operator|.
name|setRegister
argument_list|(
name|i
argument_list|,
literal|0x15
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|128
comment|/*2^7*/
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|vector1
operator|.
name|getRegister
argument_list|(
name|i
argument_list|)
argument_list|,
literal|0x1F
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|vector2
operator|.
name|getRegister
argument_list|(
name|i
argument_list|)
argument_list|,
operator|(
name|i
operator|&
literal|0x1F
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|vector3
operator|.
name|getRegister
argument_list|(
name|i
argument_list|)
argument_list|,
operator|(
operator|(
literal|127
operator|-
name|i
operator|)
operator|&
literal|0x1F
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|vector4
operator|.
name|getRegister
argument_list|(
name|i
argument_list|)
argument_list|,
literal|0x15
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// ========================================================================
comment|/**      * Tests {@link BitVector#registerIterator()}      */
annotation|@
name|Test
DECL|method|registerIteratorTest
specifier|public
name|void
name|registerIteratorTest
parameter_list|()
block|{
block|{
comment|// scoped locally for sanity
comment|// NOTE:  registers are only 5bits wide
specifier|final
name|BitVector
name|vector1
init|=
operator|new
name|BitVector
argument_list|(
literal|5
comment|/*width*/
argument_list|,
literal|128
comment|/*count, 2^7*/
argument_list|)
decl_stmt|;
specifier|final
name|BitVector
name|vector2
init|=
operator|new
name|BitVector
argument_list|(
literal|5
comment|/*width*/
argument_list|,
literal|128
comment|/*count, 2^7*/
argument_list|)
decl_stmt|;
specifier|final
name|BitVector
name|vector3
init|=
operator|new
name|BitVector
argument_list|(
literal|5
comment|/*width*/
argument_list|,
literal|128
comment|/*count, 2^7*/
argument_list|)
decl_stmt|;
specifier|final
name|BitVector
name|vector4
init|=
operator|new
name|BitVector
argument_list|(
literal|5
comment|/*width*/
argument_list|,
literal|128
comment|/*count, 2^7*/
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|128
comment|/*2^7*/
condition|;
name|i
operator|++
control|)
block|{
name|vector1
operator|.
name|setRegister
argument_list|(
name|i
argument_list|,
literal|0x1F
argument_list|)
expr_stmt|;
name|vector2
operator|.
name|setRegister
argument_list|(
name|i
argument_list|,
operator|(
name|i
operator|&
literal|0x1F
operator|)
argument_list|)
expr_stmt|;
name|vector3
operator|.
name|setRegister
argument_list|(
name|i
argument_list|,
operator|(
operator|(
literal|127
operator|-
name|i
operator|)
operator|&
literal|0x1F
operator|)
argument_list|)
expr_stmt|;
name|vector4
operator|.
name|setRegister
argument_list|(
name|i
argument_list|,
literal|0x15
argument_list|)
expr_stmt|;
block|}
specifier|final
name|LongIterator
name|registerIterator1
init|=
name|vector1
operator|.
name|registerIterator
argument_list|()
decl_stmt|;
specifier|final
name|LongIterator
name|registerIterator2
init|=
name|vector2
operator|.
name|registerIterator
argument_list|()
decl_stmt|;
specifier|final
name|LongIterator
name|registerIterator3
init|=
name|vector3
operator|.
name|registerIterator
argument_list|()
decl_stmt|;
specifier|final
name|LongIterator
name|registerIterator4
init|=
name|vector4
operator|.
name|registerIterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|128
comment|/*2^7*/
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|registerIterator1
operator|.
name|hasNext
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|registerIterator2
operator|.
name|hasNext
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|registerIterator3
operator|.
name|hasNext
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|registerIterator4
operator|.
name|hasNext
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|registerIterator1
operator|.
name|next
argument_list|()
argument_list|,
literal|0x1F
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|registerIterator2
operator|.
name|next
argument_list|()
argument_list|,
operator|(
name|i
operator|&
literal|0x1F
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|registerIterator3
operator|.
name|next
argument_list|()
argument_list|,
operator|(
operator|(
literal|127
operator|-
name|i
operator|)
operator|&
literal|0x1F
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|registerIterator4
operator|.
name|next
argument_list|()
argument_list|,
literal|0x15
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|registerIterator1
operator|.
name|hasNext
argument_list|()
argument_list|,
literal|false
comment|/*no more*/
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|registerIterator2
operator|.
name|hasNext
argument_list|()
argument_list|,
literal|false
comment|/*no more*/
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|registerIterator3
operator|.
name|hasNext
argument_list|()
argument_list|,
literal|false
comment|/*no more*/
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|registerIterator4
operator|.
name|hasNext
argument_list|()
argument_list|,
literal|false
comment|/*no more*/
argument_list|)
expr_stmt|;
block|}
block|{
comment|// scoped locally for sanity
comment|// Vectors that are shorter than one word
name|assertIterator
argument_list|(
literal|1
argument_list|,
literal|12
comment|/* 1*12=12 bits, fewer than a single word */
argument_list|)
expr_stmt|;
name|assertIterator
argument_list|(
literal|2
argument_list|,
literal|12
comment|/* 2*12=24 bits, fewer than a single word */
argument_list|)
expr_stmt|;
name|assertIterator
argument_list|(
literal|3
argument_list|,
literal|12
comment|/* 3*12=36 bits, fewer than a single word */
argument_list|)
expr_stmt|;
name|assertIterator
argument_list|(
literal|4
argument_list|,
literal|12
comment|/* 4*12=48 bits, fewer than a single word */
argument_list|)
expr_stmt|;
comment|// Vectors that don't fit exactly into longs
name|assertIterator
argument_list|(
literal|5
argument_list|,
literal|16
comment|/* 5*16=80 bits */
argument_list|)
expr_stmt|;
name|assertIterator
argument_list|(
literal|5
argument_list|,
literal|32
comment|/* 5*32=160 bits */
argument_list|)
expr_stmt|;
block|}
comment|// Iterate over vectors that are padded
block|}
DECL|method|assertIterator
specifier|private
specifier|static
name|void
name|assertIterator
parameter_list|(
specifier|final
name|int
name|width
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
block|{
specifier|final
name|BitVector
name|vector
init|=
operator|new
name|BitVector
argument_list|(
name|width
argument_list|,
name|count
argument_list|)
decl_stmt|;
specifier|final
name|LongIterator
name|iter
init|=
name|vector
operator|.
name|registerIterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"expected more elements: width=%s, count=%s"
argument_list|,
name|width
argument_list|,
name|count
argument_list|)
argument_list|,
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: fill with a sentinel value
name|assertEquals
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"expected no more elements: width=%s, count=%s"
argument_list|,
name|width
argument_list|,
name|count
argument_list|)
argument_list|,
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// ========================================================================
comment|/**      * Tests {@link BitVector#setMaxRegister(long, long)}      */
annotation|@
name|Test
DECL|method|setMaxRegisterTest
specifier|public
name|void
name|setMaxRegisterTest
parameter_list|()
block|{
specifier|final
name|BitVector
name|vector
init|=
operator|new
name|BitVector
argument_list|(
literal|5
comment|/*width*/
argument_list|,
literal|128
comment|/*count, 2^7*/
argument_list|)
decl_stmt|;
name|vector
operator|.
name|setRegister
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// should replace with a larger value
name|vector
operator|.
name|setMaxRegister
argument_list|(
literal|0
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|vector
operator|.
name|getRegister
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|11
argument_list|)
expr_stmt|;
comment|// should not replace with a smaller or equal value
name|vector
operator|.
name|setMaxRegister
argument_list|(
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|vector
operator|.
name|getRegister
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|vector
operator|.
name|setMaxRegister
argument_list|(
literal|0
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|vector
operator|.
name|getRegister
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|11
argument_list|)
expr_stmt|;
block|}
comment|// ========================================================================
comment|// fill
comment|/**      * Tests {@link BitVector#fill(long)}      */
annotation|@
name|Test
DECL|method|fillTest
specifier|public
name|void
name|fillTest
parameter_list|()
block|{
specifier|final
name|BitVector
name|vector
init|=
operator|new
name|BitVector
argument_list|(
literal|5
comment|/*width*/
argument_list|,
literal|128
comment|/*count, 2^7*/
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|128
comment|/*2^7*/
condition|;
name|i
operator|++
control|)
block|{
name|vector
operator|.
name|setRegister
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|vector
operator|.
name|fill
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|128
comment|/*2^7*/
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|vector
operator|.
name|getRegister
argument_list|(
name|i
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|vector
operator|.
name|fill
argument_list|(
literal|17L
comment|/*arbitrary*/
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|128
comment|/*2^7*/
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|vector
operator|.
name|getRegister
argument_list|(
name|i
argument_list|)
argument_list|,
literal|17
comment|/*arbitrary*/
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
