begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|MemOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import
begin_class
DECL|class|TestFastOutputStream
specifier|public
class|class
name|TestFastOutputStream
extends|extends
name|LuceneTestCase
block|{
DECL|field|rand
name|Random
name|rand
decl_stmt|;
DECL|field|arr
name|byte
index|[]
name|arr
decl_stmt|;
DECL|method|testRandomWrites
specifier|public
name|void
name|testRandomWrites
parameter_list|()
throws|throws
name|Exception
block|{
name|rand
operator|=
name|random
argument_list|()
expr_stmt|;
name|arr
operator|=
operator|new
name|byte
index|[
literal|20000
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|arr
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|rand
operator|.
name|nextInt
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|doRandomWrites
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|doRandomWrites
specifier|public
name|void
name|doRandomWrites
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|bufSize
init|=
operator|(
name|rand
operator|.
name|nextBoolean
argument_list|()
condition|?
name|rand
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
else|:
name|rand
operator|.
name|nextInt
argument_list|(
literal|20000
argument_list|)
operator|)
operator|+
literal|1
decl_stmt|;
name|MemOutputStream
name|out
init|=
operator|new
name|MemOutputStream
argument_list|(
operator|new
name|byte
index|[
name|bufSize
index|]
argument_list|)
decl_stmt|;
name|int
name|hash
init|=
literal|0
decl_stmt|;
name|long
name|written
init|=
literal|0
decl_stmt|;
name|int
name|iter
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iter
condition|;
name|i
operator|++
control|)
block|{
name|int
name|off
init|=
name|rand
operator|.
name|nextInt
argument_list|(
name|arr
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|off
operator|<
name|arr
operator|.
name|length
condition|?
name|rand
operator|.
name|nextInt
argument_list|(
name|arr
operator|.
name|length
operator|-
name|off
argument_list|)
else|:
literal|0
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|arr
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|hash
operator|=
name|incHash
argument_list|(
name|hash
argument_list|,
name|arr
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|written
operator|+=
name|len
expr_stmt|;
name|int
name|pos
init|=
name|rand
operator|.
name|nextInt
argument_list|(
name|arr
operator|.
name|length
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|arr
index|[
name|pos
index|]
argument_list|)
expr_stmt|;
name|hash
operator|=
name|incHash
argument_list|(
name|hash
argument_list|,
name|arr
argument_list|,
name|pos
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|written
operator|+=
literal|1
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|int
name|hash2
init|=
literal|0
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|buffer
range|:
name|out
operator|.
name|buffers
control|)
block|{
name|hash2
operator|=
name|incHash
argument_list|(
name|hash2
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|hash
argument_list|,
name|hash2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|written
argument_list|,
name|out
operator|.
name|written
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|written
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|incHash
specifier|public
name|int
name|incHash
parameter_list|(
name|int
name|hash
parameter_list|,
name|byte
index|[]
name|arr
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|off
init|;
name|i
operator|<
name|off
operator|+
name|len
condition|;
name|i
operator|++
control|)
block|{
name|hash
operator|=
name|hash
operator|*
literal|31
operator|+
name|arr
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|hash
return|;
block|}
block|}
end_class
end_unit
