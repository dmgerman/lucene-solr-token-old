begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.util.hll
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|hll
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import static
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|RandomizedTest
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|hll
operator|.
name|HLL
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * Serialization smoke-tests.  */
end_comment
begin_class
DECL|class|HLLSerializationTest
specifier|public
class|class
name|HLLSerializationTest
extends|extends
name|LuceneTestCase
block|{
comment|/**    * A smoke-test that covers serialization/deserialization of an HLL    * under most possible init parameters.    */
annotation|@
name|Test
annotation|@
name|Slow
annotation|@
name|Nightly
DECL|method|serializationSmokeTest
specifier|public
name|void
name|serializationSmokeTest
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|randomLong
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|randomCount
init|=
literal|250
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Long
argument_list|>
name|randoms
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|(
name|randomCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randomCount
condition|;
name|i
operator|++
control|)
block|{
name|randoms
operator|.
name|add
argument_list|(
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// NOTE: log2m<=16 was chosen as the max log2m parameter so that the test
comment|//       completes in a reasonable amount of time. Not much is gained by
comment|//       testing larger values
specifier|final
name|int
name|maxLog2m
init|=
literal|16
decl_stmt|;
for|for
control|(
name|HLLType
name|type
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|HLLType
operator|.
name|class
argument_list|)
control|)
block|{
name|assertCardinality
argument_list|(
name|type
argument_list|,
name|maxLog2m
argument_list|,
name|randoms
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A smoke-test that covers serialization/deserialization of HLLs    * under the max possible numeric init parameters, iterating over all possible combinations of     * the other params.    *    * @see #manyValuesHLLSerializationTest    */
annotation|@
name|Test
annotation|@
name|Slow
annotation|@
name|Monster
argument_list|(
literal|"needs roughly -Dtests.heapsize=8g because of the (multiple) massive data structs"
argument_list|)
DECL|method|monsterHLLSerializationTest
specifier|public
name|void
name|monsterHLLSerializationTest
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|randomLong
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|randomCount
init|=
literal|250
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Long
argument_list|>
name|randoms
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|(
name|randomCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randomCount
condition|;
name|i
operator|++
control|)
block|{
name|randoms
operator|.
name|add
argument_list|(
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|HLLType
name|type
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|HLLType
operator|.
name|class
argument_list|)
control|)
block|{
for|for
control|(
name|boolean
name|sparse
range|:
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|false
block|}
control|)
block|{
name|HLL
name|hll
init|=
operator|new
name|HLL
argument_list|(
name|MAXIMUM_LOG2M_PARAM
argument_list|,
name|MAXIMUM_REGWIDTH_PARAM
argument_list|,
name|MAXIMUM_EXPTHRESH_PARAM
argument_list|,
name|sparse
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|assertCardinality
argument_list|(
name|hll
argument_list|,
name|randoms
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * A smoke-test that covers serialization/deserialization of a (single) HLL    * with random init params with an extremely large number of unique values added to it.    *    * @see #monsterHLLSerializationTest    */
annotation|@
name|Test
annotation|@
name|Slow
annotation|@
name|Monster
argument_list|(
literal|"may require as much as -Dtests.heapsize=4g depending on random values picked"
argument_list|)
DECL|method|manyValuesHLLSerializationTest
specifier|public
name|void
name|manyValuesHLLSerializationTest
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HLLType
index|[]
name|ALL_TYPES
init|=
name|EnumSet
operator|.
name|allOf
argument_list|(
name|HLLType
operator|.
name|class
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|HLLType
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|ALL_TYPES
argument_list|)
expr_stmt|;
specifier|final
name|int
name|log2m
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|MINIMUM_LOG2M_PARAM
argument_list|,
name|MAXIMUM_LOG2M_PARAM
argument_list|)
decl_stmt|;
specifier|final
name|int
name|regwidth
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|MINIMUM_REGWIDTH_PARAM
argument_list|,
name|MAXIMUM_REGWIDTH_PARAM
argument_list|)
decl_stmt|;
specifier|final
name|int
name|expthresh
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|MINIMUM_EXPTHRESH_PARAM
argument_list|,
name|MAXIMUM_EXPTHRESH_PARAM
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|sparse
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
specifier|final
name|HLLType
name|type
init|=
name|ALL_TYPES
index|[
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|ALL_TYPES
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
decl_stmt|;
name|HLL
name|hll
init|=
operator|new
name|HLL
argument_list|(
name|log2m
argument_list|,
name|regwidth
argument_list|,
name|expthresh
argument_list|,
name|sparse
argument_list|,
name|type
argument_list|)
decl_stmt|;
specifier|final
name|long
name|NUM_VALS
init|=
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
literal|150000
argument_list|,
literal|1000000
argument_list|)
decl_stmt|;
specifier|final
name|long
name|MIN_VAL
init|=
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|-
name|NUM_VALS
argument_list|)
decl_stmt|;
specifier|final
name|long
name|MAX_VAL
init|=
name|MIN_VAL
operator|+
name|NUM_VALS
decl_stmt|;
assert|assert
name|MIN_VAL
operator|<
name|MAX_VAL
assert|;
for|for
control|(
name|long
name|val
init|=
name|MIN_VAL
init|;
name|val
operator|<
name|MAX_VAL
condition|;
name|val
operator|++
control|)
block|{
name|hll
operator|.
name|addRaw
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|expectedCardinality
init|=
name|hll
operator|.
name|cardinality
argument_list|()
decl_stmt|;
specifier|final
name|HLLType
name|expectedType
init|=
name|hll
operator|.
name|getType
argument_list|()
decl_stmt|;
name|byte
index|[]
name|serializedData
init|=
name|hll
operator|.
name|toBytes
argument_list|()
decl_stmt|;
name|hll
operator|=
literal|null
expr_stmt|;
comment|// allow some GC
name|HLL
name|copy
init|=
name|HLL
operator|.
name|fromBytes
argument_list|(
name|serializedData
argument_list|)
decl_stmt|;
name|serializedData
operator|=
literal|null
expr_stmt|;
comment|// allow some GC
name|assertEquals
argument_list|(
name|expectedCardinality
argument_list|,
name|copy
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedType
argument_list|,
name|copy
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * A smoke-test that covers serialization/deserialization of a (single) HLL    * with random the max possible numeric init parameters, with randomized values for the other params.    *    * @see #monsterHLLSerializationTest    */
annotation|@
name|Test
annotation|@
name|Slow
annotation|@
name|Monster
argument_list|(
literal|"can require as much as -Dtests.heapsize=4g because of the massive data structs"
argument_list|)
DECL|method|manyValuesMonsterHLLSerializationTest
specifier|public
name|void
name|manyValuesMonsterHLLSerializationTest
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HLLType
index|[]
name|ALL_TYPES
init|=
name|EnumSet
operator|.
name|allOf
argument_list|(
name|HLLType
operator|.
name|class
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|HLLType
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|ALL_TYPES
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|sparse
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
specifier|final
name|HLLType
name|type
init|=
name|ALL_TYPES
index|[
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|ALL_TYPES
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
decl_stmt|;
name|HLL
name|hll
init|=
operator|new
name|HLL
argument_list|(
name|MAXIMUM_LOG2M_PARAM
argument_list|,
name|MAXIMUM_REGWIDTH_PARAM
argument_list|,
name|MAXIMUM_EXPTHRESH_PARAM
argument_list|,
name|sparse
argument_list|,
name|type
argument_list|)
decl_stmt|;
specifier|final
name|long
name|NUM_VALS
init|=
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
literal|150000
argument_list|,
literal|1000000
argument_list|)
decl_stmt|;
specifier|final
name|long
name|MIN_VAL
init|=
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|-
name|NUM_VALS
argument_list|)
decl_stmt|;
specifier|final
name|long
name|MAX_VAL
init|=
name|MIN_VAL
operator|+
name|NUM_VALS
decl_stmt|;
assert|assert
name|MIN_VAL
operator|<
name|MAX_VAL
assert|;
for|for
control|(
name|long
name|val
init|=
name|MIN_VAL
init|;
name|val
operator|<
name|MAX_VAL
condition|;
name|val
operator|++
control|)
block|{
name|hll
operator|.
name|addRaw
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|expectedCardinality
init|=
name|hll
operator|.
name|cardinality
argument_list|()
decl_stmt|;
specifier|final
name|HLLType
name|expectedType
init|=
name|hll
operator|.
name|getType
argument_list|()
decl_stmt|;
name|byte
index|[]
name|serializedData
init|=
name|hll
operator|.
name|toBytes
argument_list|()
decl_stmt|;
name|hll
operator|=
literal|null
expr_stmt|;
comment|// allow some GC
name|HLL
name|copy
init|=
name|HLL
operator|.
name|fromBytes
argument_list|(
name|serializedData
argument_list|)
decl_stmt|;
name|serializedData
operator|=
literal|null
expr_stmt|;
comment|// allow some GC
name|assertEquals
argument_list|(
name|expectedCardinality
argument_list|,
name|copy
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedType
argument_list|,
name|copy
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Iterates over all possible constructor args, with the exception of log2m,     * which is only iterated up to the specified max so the test runs in a     * "reasonable" amount of time and ram.    */
DECL|method|assertCardinality
specifier|private
specifier|static
name|void
name|assertCardinality
parameter_list|(
specifier|final
name|HLLType
name|hllType
parameter_list|,
specifier|final
name|int
name|maxLog2m
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|Long
argument_list|>
name|items
parameter_list|)
throws|throws
name|CloneNotSupportedException
block|{
for|for
control|(
name|int
name|regw
init|=
name|MINIMUM_REGWIDTH_PARAM
init|;
name|regw
operator|<=
name|MAXIMUM_REGWIDTH_PARAM
condition|;
name|regw
operator|++
control|)
block|{
for|for
control|(
name|int
name|expthr
init|=
name|MINIMUM_EXPTHRESH_PARAM
init|;
name|expthr
operator|<=
name|MAXIMUM_EXPTHRESH_PARAM
condition|;
name|expthr
operator|++
control|)
block|{
for|for
control|(
specifier|final
name|boolean
name|sparse
range|:
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|false
block|}
control|)
block|{
for|for
control|(
name|int
name|log2m
init|=
name|MINIMUM_LOG2M_PARAM
init|;
name|log2m
operator|<=
name|maxLog2m
condition|;
name|log2m
operator|++
control|)
block|{
name|assertCardinality
argument_list|(
operator|new
name|HLL
argument_list|(
name|log2m
argument_list|,
name|regw
argument_list|,
name|expthr
argument_list|,
name|sparse
argument_list|,
name|hllType
argument_list|)
argument_list|,
name|items
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * Adds all of the items to the specified hll, then does a round trip serialize/deserialize and confirms    * equality of several properties (including the byte serialization).  Repeats process with a clone.    */
DECL|method|assertCardinality
specifier|private
specifier|static
name|void
name|assertCardinality
parameter_list|(
name|HLL
name|hll
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|Long
argument_list|>
name|items
parameter_list|)
throws|throws
name|CloneNotSupportedException
block|{
for|for
control|(
specifier|final
name|Long
name|item
range|:
name|items
control|)
block|{
name|hll
operator|.
name|addRaw
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|hllCardinality
init|=
name|hll
operator|.
name|cardinality
argument_list|()
decl_stmt|;
specifier|final
name|HLLType
name|hllType
init|=
name|hll
operator|.
name|getType
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|hllBytes
init|=
name|hll
operator|.
name|toBytes
argument_list|()
decl_stmt|;
name|hll
operator|=
literal|null
expr_stmt|;
comment|// allow some GC
name|HLL
name|copy
init|=
name|HLL
operator|.
name|fromBytes
argument_list|(
name|hllBytes
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|copy
operator|.
name|cardinality
argument_list|()
argument_list|,
name|hllCardinality
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|copy
operator|.
name|getType
argument_list|()
argument_list|,
name|hllType
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|copy
operator|.
name|toBytes
argument_list|()
argument_list|,
name|hllBytes
argument_list|)
argument_list|)
expr_stmt|;
name|HLL
name|clone
init|=
name|copy
operator|.
name|clone
argument_list|()
decl_stmt|;
name|copy
operator|=
literal|null
expr_stmt|;
comment|// allow some GC
name|assertEquals
argument_list|(
name|clone
operator|.
name|cardinality
argument_list|()
argument_list|,
name|hllCardinality
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clone
operator|.
name|getType
argument_list|()
argument_list|,
name|hllType
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|clone
operator|.
name|toBytes
argument_list|()
argument_list|,
name|hllBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
