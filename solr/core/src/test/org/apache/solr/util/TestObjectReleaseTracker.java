begin_unit
begin_package
DECL|package|org.apache.solr.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestRuleLimitSysouts
operator|.
name|Limit
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ObjectReleaseTracker
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
annotation|@
name|Limit
argument_list|(
name|bytes
operator|=
literal|150000
argument_list|)
comment|// raise limit as this writes to sys err
DECL|class|TestObjectReleaseTracker
specifier|public
class|class
name|TestObjectReleaseTracker
extends|extends
name|LuceneTestCase
block|{
annotation|@
name|Test
DECL|method|testObjectReleaseTracker
specifier|public
name|void
name|testObjectReleaseTracker
parameter_list|()
block|{
name|ObjectReleaseTracker
operator|.
name|track
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectReleaseTracker
operator|.
name|release
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ObjectReleaseTracker
operator|.
name|clearObjectTrackerAndCheckEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ObjectReleaseTracker
operator|.
name|clearObjectTrackerAndCheckEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|obj
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|ObjectReleaseTracker
operator|.
name|track
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|ObjectReleaseTracker
operator|.
name|release
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ObjectReleaseTracker
operator|.
name|clearObjectTrackerAndCheckEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|obj1
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|ObjectReleaseTracker
operator|.
name|track
argument_list|(
name|obj1
argument_list|)
expr_stmt|;
name|Object
name|obj2
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|ObjectReleaseTracker
operator|.
name|track
argument_list|(
name|obj2
argument_list|)
expr_stmt|;
name|Object
name|obj3
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|ObjectReleaseTracker
operator|.
name|track
argument_list|(
name|obj3
argument_list|)
expr_stmt|;
name|ObjectReleaseTracker
operator|.
name|release
argument_list|(
name|obj1
argument_list|)
expr_stmt|;
name|ObjectReleaseTracker
operator|.
name|release
argument_list|(
name|obj2
argument_list|)
expr_stmt|;
name|ObjectReleaseTracker
operator|.
name|release
argument_list|(
name|obj3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ObjectReleaseTracker
operator|.
name|clearObjectTrackerAndCheckEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectReleaseTracker
operator|.
name|track
argument_list|(
name|obj1
argument_list|)
expr_stmt|;
name|ObjectReleaseTracker
operator|.
name|track
argument_list|(
name|obj2
argument_list|)
expr_stmt|;
name|ObjectReleaseTracker
operator|.
name|track
argument_list|(
name|obj3
argument_list|)
expr_stmt|;
name|ObjectReleaseTracker
operator|.
name|release
argument_list|(
name|obj1
argument_list|)
expr_stmt|;
name|ObjectReleaseTracker
operator|.
name|release
argument_list|(
name|obj2
argument_list|)
expr_stmt|;
comment|// ObjectReleaseTracker.release(obj3);
name|assertFalse
argument_list|(
name|ObjectReleaseTracker
operator|.
name|clearObjectTrackerAndCheckEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ObjectReleaseTracker
operator|.
name|clearObjectTrackerAndCheckEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
