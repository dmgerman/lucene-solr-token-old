begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.servlet
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpMethodBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|NameValuePair
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|methods
operator|.
name|GetMethod
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|methods
operator|.
name|HeadMethod
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|methods
operator|.
name|PostMethod
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrJettyTestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CommonsHttpSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|CacheHeaderTestBase
specifier|public
specifier|abstract
class|class
name|CacheHeaderTestBase
extends|extends
name|SolrJettyTestBase
block|{
DECL|method|getSelectMethod
specifier|protected
name|HttpMethodBase
name|getSelectMethod
parameter_list|(
name|String
name|method
parameter_list|)
block|{
name|CommonsHttpSolrServer
name|httpserver
init|=
operator|(
name|CommonsHttpSolrServer
operator|)
name|getSolrServer
argument_list|()
decl_stmt|;
name|HttpMethodBase
name|m
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"GET"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|m
operator|=
operator|new
name|GetMethod
argument_list|(
name|httpserver
operator|.
name|getBaseURL
argument_list|()
operator|+
literal|"/select"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"HEAD"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|m
operator|=
operator|new
name|HeadMethod
argument_list|(
name|httpserver
operator|.
name|getBaseURL
argument_list|()
operator|+
literal|"/select"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"POST"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|m
operator|=
operator|new
name|PostMethod
argument_list|(
name|httpserver
operator|.
name|getBaseURL
argument_list|()
operator|+
literal|"/select"
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|setQueryString
argument_list|(
operator|new
name|NameValuePair
index|[]
block|{
operator|new
name|NameValuePair
argument_list|(
literal|"q"
argument_list|,
literal|"solr"
argument_list|)
block|,
operator|new
name|NameValuePair
argument_list|(
literal|"qt"
argument_list|,
literal|"standard"
argument_list|)
block|}
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
DECL|method|getUpdateMethod
specifier|protected
name|HttpMethodBase
name|getUpdateMethod
parameter_list|(
name|String
name|method
parameter_list|)
block|{
name|CommonsHttpSolrServer
name|httpserver
init|=
operator|(
name|CommonsHttpSolrServer
operator|)
name|getSolrServer
argument_list|()
decl_stmt|;
name|HttpMethodBase
name|m
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"GET"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|m
operator|=
operator|new
name|GetMethod
argument_list|(
name|httpserver
operator|.
name|getBaseURL
argument_list|()
operator|+
literal|"/update/csv"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"POST"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|m
operator|=
operator|new
name|PostMethod
argument_list|(
name|httpserver
operator|.
name|getBaseURL
argument_list|()
operator|+
literal|"/update/csv"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"HEAD"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|m
operator|=
operator|new
name|HeadMethod
argument_list|(
name|httpserver
operator|.
name|getBaseURL
argument_list|()
operator|+
literal|"/update/csv"
argument_list|)
expr_stmt|;
block|}
return|return
name|m
return|;
block|}
DECL|method|getClient
specifier|protected
name|HttpClient
name|getClient
parameter_list|()
block|{
name|CommonsHttpSolrServer
name|httpserver
init|=
operator|(
name|CommonsHttpSolrServer
operator|)
name|getSolrServer
argument_list|()
decl_stmt|;
return|return
name|httpserver
operator|.
name|getHttpClient
argument_list|()
return|;
block|}
DECL|method|checkResponseBody
specifier|protected
name|void
name|checkResponseBody
parameter_list|(
name|String
name|method
parameter_list|,
name|HttpMethodBase
name|resp
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|responseBody
init|=
name|resp
operator|.
name|getResponseBodyAsString
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"GET"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|resp
operator|.
name|getStatusCode
argument_list|()
condition|)
block|{
case|case
literal|200
case|:
name|assertTrue
argument_list|(
literal|"Response body was empty for method "
operator|+
name|method
argument_list|,
name|responseBody
operator|!=
literal|null
operator|&&
name|responseBody
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
literal|304
case|:
name|assertTrue
argument_list|(
literal|"Response body was not empty for method "
operator|+
name|method
argument_list|,
name|responseBody
operator|==
literal|null
operator|||
name|responseBody
operator|.
name|length
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
literal|412
case|:
name|assertTrue
argument_list|(
literal|"Response body was not empty for method "
operator|+
name|method
argument_list|,
name|responseBody
operator|==
literal|null
operator|||
name|responseBody
operator|.
name|length
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
break|break;
default|default:
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|responseBody
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unknown request response"
argument_list|,
literal|0
argument_list|,
name|resp
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"HEAD"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Response body was not empty for method "
operator|+
name|method
argument_list|,
name|responseBody
operator|==
literal|null
operator|||
name|responseBody
operator|.
name|length
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|// The tests
annotation|@
name|Test
DECL|method|testLastModified
specifier|public
name|void
name|testLastModified
parameter_list|()
throws|throws
name|Exception
block|{
name|doLastModified
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|doLastModified
argument_list|(
literal|"HEAD"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEtag
specifier|public
name|void
name|testEtag
parameter_list|()
throws|throws
name|Exception
block|{
name|doETag
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|doETag
argument_list|(
literal|"HEAD"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCacheControl
specifier|public
name|void
name|testCacheControl
parameter_list|()
throws|throws
name|Exception
block|{
name|doCacheControl
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|doCacheControl
argument_list|(
literal|"HEAD"
argument_list|)
expr_stmt|;
name|doCacheControl
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
block|}
DECL|method|doCacheControl
specifier|protected
specifier|abstract
name|void
name|doCacheControl
parameter_list|(
name|String
name|method
parameter_list|)
throws|throws
name|Exception
function_decl|;
DECL|method|doETag
specifier|protected
specifier|abstract
name|void
name|doETag
parameter_list|(
name|String
name|method
parameter_list|)
throws|throws
name|Exception
function_decl|;
DECL|method|doLastModified
specifier|protected
specifier|abstract
name|void
name|doLastModified
parameter_list|(
name|String
name|method
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
end_class
end_unit
