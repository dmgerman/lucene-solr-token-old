begin_unit
begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/**  *  *  **/
end_comment
begin_class
DECL|class|DebugComponentTest
specifier|public
class|class
name|DebugComponentTest
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"title"
argument_list|,
literal|"this is a title."
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"title"
argument_list|,
literal|"this is another title."
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"title"
argument_list|,
literal|"Mary had a little lamb."
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasicInterface
specifier|public
name|void
name|testBasicInterface
parameter_list|()
throws|throws
name|Exception
block|{
comment|//make sure the basics are in place
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
name|CommonParams
operator|.
name|DEBUG_QUERY
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"//str[@name='rawquerystring']='*:*'"
argument_list|,
literal|"//str[@name='querystring']='*:*'"
argument_list|,
literal|"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'"
argument_list|,
literal|"//str[@name='parsedquery_toString']='*:*'"
argument_list|,
literal|"count(//lst[@name='explain']/*)=3"
argument_list|,
literal|"//lst[@name='explain']/str[@name='1']"
argument_list|,
literal|"//lst[@name='explain']/str[@name='2']"
argument_list|,
literal|"//lst[@name='explain']/str[@name='3']"
argument_list|,
literal|"//str[@name='QParser']"
argument_list|,
comment|// make sure the QParser is specified
literal|"count(//lst[@name='timing']/*)=3"
argument_list|,
comment|//should be three pieces to timings
literal|"//lst[@name='timing']/double[@name='time']"
argument_list|,
comment|//make sure we have a time value, but don't specify it's result
literal|"count(//lst[@name='prepare']/*)>0"
argument_list|,
literal|"//lst[@name='prepare']/double[@name='time']"
argument_list|,
literal|"count(//lst[@name='process']/*)>0"
argument_list|,
literal|"//lst[@name='process']/double[@name='time']"
argument_list|)
expr_stmt|;
block|}
comment|// Test the ability to specify which pieces to include
annotation|@
name|Test
DECL|method|testPerItemInterface
specifier|public
name|void
name|testPerItemInterface
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Same as debugQuery = true
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"debug"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"//str[@name='rawquerystring']='*:*'"
argument_list|,
literal|"//str[@name='querystring']='*:*'"
argument_list|,
literal|"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'"
argument_list|,
literal|"//str[@name='parsedquery_toString']='*:*'"
argument_list|,
literal|"//str[@name='QParser']"
argument_list|,
comment|// make sure the QParser is specified
literal|"count(//lst[@name='explain']/*)=3"
argument_list|,
literal|"//lst[@name='explain']/str[@name='1']"
argument_list|,
literal|"//lst[@name='explain']/str[@name='2']"
argument_list|,
literal|"//lst[@name='explain']/str[@name='3']"
argument_list|,
literal|"count(//lst[@name='timing']/*)=3"
argument_list|,
comment|//should be three pieces to timings
literal|"//lst[@name='timing']/double[@name='time']"
argument_list|,
comment|//make sure we have a time value, but don't specify it's result
literal|"count(//lst[@name='prepare']/*)>0"
argument_list|,
literal|"//lst[@name='prepare']/double[@name='time']"
argument_list|,
literal|"count(//lst[@name='process']/*)>0"
argument_list|,
literal|"//lst[@name='process']/double[@name='time']"
argument_list|)
expr_stmt|;
comment|//timing only
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"debug"
argument_list|,
name|CommonParams
operator|.
name|TIMING
argument_list|)
argument_list|,
literal|"count(//str[@name='rawquerystring'])=0"
argument_list|,
literal|"count(//str[@name='querystring'])=0"
argument_list|,
literal|"count(//str[@name='parsedquery'])=0"
argument_list|,
literal|"count(//str[@name='parsedquery_toString'])=0"
argument_list|,
literal|"count(//lst[@name='explain']/*)=0"
argument_list|,
literal|"count(//str[@name='QParser'])=0"
argument_list|,
comment|// make sure the QParser is specified
literal|"count(//lst[@name='timing']/*)=3"
argument_list|,
comment|//should be three pieces to timings
literal|"//lst[@name='timing']/double[@name='time']"
argument_list|,
comment|//make sure we have a time value, but don't specify it's result
literal|"count(//lst[@name='prepare']/*)>0"
argument_list|,
literal|"//lst[@name='prepare']/double[@name='time']"
argument_list|,
literal|"count(//lst[@name='process']/*)>0"
argument_list|,
literal|"//lst[@name='process']/double[@name='time']"
argument_list|)
expr_stmt|;
comment|//query only
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"debug"
argument_list|,
name|CommonParams
operator|.
name|QUERY
argument_list|)
argument_list|,
literal|"//str[@name='rawquerystring']='*:*'"
argument_list|,
literal|"//str[@name='querystring']='*:*'"
argument_list|,
literal|"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'"
argument_list|,
literal|"//str[@name='parsedquery_toString']='*:*'"
argument_list|,
literal|"count(//lst[@name='explain']/*)=0"
argument_list|,
literal|"//str[@name='QParser']"
argument_list|,
comment|// make sure the QParser is specified
literal|"count(//lst[@name='timing']/*)=0"
argument_list|)
expr_stmt|;
comment|//explains
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"debug"
argument_list|,
name|CommonParams
operator|.
name|RESULTS
argument_list|)
argument_list|,
literal|"count(//str[@name='rawquerystring'])=0"
argument_list|,
literal|"count(//str[@name='querystring'])=0"
argument_list|,
literal|"count(//str[@name='parsedquery'])=0"
argument_list|,
literal|"count(//str[@name='parsedquery_toString'])=0"
argument_list|,
literal|"count(//lst[@name='explain']/*)=3"
argument_list|,
literal|"//lst[@name='explain']/str[@name='1']"
argument_list|,
literal|"//lst[@name='explain']/str[@name='2']"
argument_list|,
literal|"//lst[@name='explain']/str[@name='3']"
argument_list|,
literal|"count(//str[@name='QParser'])=0"
argument_list|,
comment|// make sure the QParser is specified
literal|"count(//lst[@name='timing']/*)=0"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"debug"
argument_list|,
name|CommonParams
operator|.
name|RESULTS
argument_list|,
literal|"debug"
argument_list|,
name|CommonParams
operator|.
name|QUERY
argument_list|)
argument_list|,
literal|"//str[@name='rawquerystring']='*:*'"
argument_list|,
literal|"//str[@name='querystring']='*:*'"
argument_list|,
literal|"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'"
argument_list|,
literal|"//str[@name='parsedquery_toString']='*:*'"
argument_list|,
literal|"//str[@name='QParser']"
argument_list|,
comment|// make sure the QParser is specified
literal|"count(//lst[@name='explain']/*)=3"
argument_list|,
literal|"//lst[@name='explain']/str[@name='1']"
argument_list|,
literal|"//lst[@name='explain']/str[@name='2']"
argument_list|,
literal|"//lst[@name='explain']/str[@name='3']"
argument_list|,
literal|"count(//lst[@name='timing']/*)=0"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
