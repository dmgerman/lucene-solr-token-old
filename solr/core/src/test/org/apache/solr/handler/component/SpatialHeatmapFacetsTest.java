begin_unit
begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|Repeat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|BaseDistributedSearchTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|SpatialHeatmapFacetsTest
specifier|public
class|class
name|SpatialHeatmapFacetsTest
extends|extends
name|BaseDistributedSearchTestCase
block|{
DECL|field|FIELD
specifier|private
specifier|static
specifier|final
name|String
name|FIELD
init|=
literal|"srpt_quad"
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeSuperClass
specifier|public
specifier|static
name|void
name|beforeSuperClass
parameter_list|()
throws|throws
name|Exception
block|{
name|schemaString
operator|=
literal|"schema-spatial.xml"
expr_stmt|;
name|configString
operator|=
literal|"solrconfig-basic.xml"
expr_stmt|;
comment|//Strictly not necessary (set already in Ant& Maven) but your IDE might not have this set
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.awt.headless"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|handle
operator|.
name|clear
argument_list|()
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"QTime"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"timestamp"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"maxScore"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|SolrParams
name|baseParams
init|=
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
name|FacetParams
operator|.
name|FACET_HEATMAP
argument_list|,
name|FIELD
argument_list|)
decl_stmt|;
specifier|final
name|String
name|testBox
init|=
literal|"[\"50 50\" TO \"180 90\"]"
decl_stmt|;
comment|//top-right somewhere on edge (whatever)
comment|//----- First we test gridLevel derivation
try|try
block|{
name|getHmObj
argument_list|(
name|query
argument_list|(
name|params
argument_list|(
name|baseParams
argument_list|,
name|FacetParams
operator|.
name|FACET_HEATMAP_GEOM
argument_list|,
name|testBox
argument_list|,
name|FacetParams
operator|.
name|FACET_HEATMAP_DIST_ERR
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"gridLevel"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
operator|.
name|code
argument_list|,
name|e
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|getHmObj
argument_list|(
name|query
argument_list|(
name|params
argument_list|(
name|baseParams
argument_list|,
name|FacetParams
operator|.
name|FACET_HEATMAP_GEOM
argument_list|,
name|testBox
argument_list|,
name|FacetParams
operator|.
name|FACET_HEATMAP_DIST_ERR_PCT
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"gridLevel"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
operator|.
name|code
argument_list|,
name|e
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Monkeying with these params changes the gridLevel in different directions. We don't test the exact
comment|// computation here; that's not _that_ relevant, and is Lucene spatial's job (not Solr) any way.
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|getHmObj
argument_list|(
name|query
argument_list|(
name|params
argument_list|(
name|baseParams
argument_list|,
name|FacetParams
operator|.
name|FACET_HEATMAP_GEOM
argument_list|,
name|testBox
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"gridLevel"
argument_list|)
argument_list|)
expr_stmt|;
comment|//default
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|getHmObj
argument_list|(
name|query
argument_list|(
name|params
argument_list|(
name|baseParams
argument_list|,
name|FacetParams
operator|.
name|FACET_HEATMAP_GEOM
argument_list|,
name|testBox
argument_list|,
name|FacetParams
operator|.
name|FACET_HEATMAP_LEVEL
argument_list|,
literal|"3"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"gridLevel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getHmObj
argument_list|(
name|query
argument_list|(
name|params
argument_list|(
name|baseParams
argument_list|,
name|FacetParams
operator|.
name|FACET_HEATMAP_GEOM
argument_list|,
name|testBox
argument_list|,
name|FacetParams
operator|.
name|FACET_HEATMAP_DIST_ERR
argument_list|,
literal|"100"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"gridLevel"
argument_list|)
argument_list|)
expr_stmt|;
comment|//TODO test impact of distance units
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|getHmObj
argument_list|(
name|query
argument_list|(
name|params
argument_list|(
name|baseParams
argument_list|,
name|FacetParams
operator|.
name|FACET_HEATMAP_GEOM
argument_list|,
name|testBox
argument_list|,
name|FacetParams
operator|.
name|FACET_HEATMAP_DIST_ERR_PCT
argument_list|,
literal|"0.05"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"gridLevel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|getHmObj
argument_list|(
name|query
argument_list|(
name|params
argument_list|(
name|baseParams
argument_list|,
name|FacetParams
operator|.
name|FACET_HEATMAP_DIST_ERR_PCT
argument_list|,
literal|"0.10"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"gridLevel"
argument_list|)
argument_list|)
expr_stmt|;
comment|//test key output label doing 2 heatmaps with different settings on the same field
block|{
specifier|final
name|ModifiableSolrParams
name|params
init|=
name|params
argument_list|(
name|baseParams
argument_list|,
name|FacetParams
operator|.
name|FACET_HEATMAP_DIST_ERR_PCT
argument_list|,
literal|"0.10"
argument_list|)
decl_stmt|;
name|String
name|courseFormat
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"png"
else|:
literal|"ints2D"
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|FacetParams
operator|.
name|FACET_HEATMAP
argument_list|,
literal|"{!key=course "
operator|+
name|FacetParams
operator|.
name|FACET_HEATMAP_LEVEL
operator|+
literal|"=2 "
operator|+
name|FacetParams
operator|.
name|FACET_HEATMAP_FORMAT
operator|+
literal|"="
operator|+
name|courseFormat
operator|+
literal|"}"
operator|+
name|FIELD
argument_list|)
expr_stmt|;
specifier|final
name|QueryResponse
name|response
init|=
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|getHmObj
argument_list|(
name|response
argument_list|)
operator|.
name|get
argument_list|(
literal|"gridLevel"
argument_list|)
argument_list|)
expr_stmt|;
comment|//same test as above
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|findRecursive
argument_list|(
literal|"facet_counts"
argument_list|,
literal|"facet_heatmaps"
argument_list|,
literal|"course"
argument_list|,
literal|"gridLevel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|findRecursive
argument_list|(
literal|"facet_counts"
argument_list|,
literal|"facet_heatmaps"
argument_list|,
literal|"course"
argument_list|)
operator|)
operator|.
name|asMap
argument_list|(
literal|0
argument_list|)
operator|.
name|containsKey
argument_list|(
literal|"counts_"
operator|+
name|courseFormat
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// ------ Index data
name|index
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|,
name|FIELD
argument_list|,
literal|"ENVELOPE(100, 120, 80, 40)"
argument_list|)
expr_stmt|;
comment|// on right side
name|index
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|FIELD
argument_list|,
literal|"ENVELOPE(-120, -110, 80, 20)"
argument_list|)
expr_stmt|;
comment|// on left side (outside heatmap)
name|index
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
name|FIELD
argument_list|,
literal|"POINT(70 60)"
argument_list|)
expr_stmt|;
comment|//just left of BOX 0
name|index
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
name|FIELD
argument_list|,
literal|"POINT(91 89)"
argument_list|)
expr_stmt|;
comment|//just outside box 0 (above it) near pole,
name|commit
argument_list|()
expr_stmt|;
comment|// ----- Search
comment|// this test simply has some 0's, nulls, 1's and a 2 in there.
name|NamedList
name|hmObj
init|=
name|getHmObj
argument_list|(
name|query
argument_list|(
name|params
argument_list|(
name|baseParams
argument_list|,
name|FacetParams
operator|.
name|FACET_HEATMAP_GEOM
argument_list|,
literal|"[\"50 20\" TO \"180 90\"]"
argument_list|,
name|FacetParams
operator|.
name|FACET_HEATMAP_LEVEL
argument_list|,
literal|"4"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|counts
init|=
operator|(
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
operator|)
name|hmObj
operator|.
name|get
argument_list|(
literal|"counts_ints2D"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|counts
argument_list|)
expr_stmt|;
comment|// test using a circle input shape
name|hmObj
operator|=
name|getHmObj
argument_list|(
name|query
argument_list|(
name|params
argument_list|(
name|baseParams
argument_list|,
name|FacetParams
operator|.
name|FACET_HEATMAP_GEOM
argument_list|,
literal|"BUFFER(POINT(110 40), 7)"
argument_list|,
name|FacetParams
operator|.
name|FACET_HEATMAP_LEVEL
argument_list|,
literal|"7"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|counts
operator|=
operator|(
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
operator|)
name|hmObj
operator|.
name|get
argument_list|(
literal|"counts_ints2D"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
comment|//curved; we have a 0
name|Arrays
operator|.
name|asList
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
comment|//curved; we have a 0
name|Arrays
operator|.
name|asList
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
comment|//curved; we have a 0
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
comment|//no data here (below edge of rect 0)
argument_list|)
argument_list|,
name|counts
argument_list|)
expr_stmt|;
comment|// Search in no-where ville and get null counts
name|assertNull
argument_list|(
name|getHmObj
argument_list|(
name|query
argument_list|(
name|params
argument_list|(
name|baseParams
argument_list|,
name|FacetParams
operator|.
name|FACET_HEATMAP_GEOM
argument_list|,
literal|"ENVELOPE(0, 10, -80, -90)"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"counts_ints2D"
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|v
init|=
name|getHmObj
argument_list|(
name|query
argument_list|(
name|params
argument_list|(
name|baseParams
argument_list|,
name|FacetParams
operator|.
name|FACET_HEATMAP_FORMAT
argument_list|,
literal|"png"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"counts_png"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|v
operator|instanceof
name|byte
index|[]
argument_list|)
expr_stmt|;
comment|//simply test we can read the image
name|assertNotNull
argument_list|(
name|SpatialHeatmapFacets
operator|.
name|PngHelper
operator|.
name|readImage
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
comment|//good enough for this test method
block|}
DECL|method|getHmObj
specifier|private
name|NamedList
name|getHmObj
parameter_list|(
name|QueryResponse
name|response
parameter_list|)
block|{
return|return
operator|(
name|NamedList
operator|)
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|findRecursive
argument_list|(
literal|"facet_counts"
argument_list|,
literal|"facet_heatmaps"
argument_list|,
name|FIELD
argument_list|)
return|;
block|}
DECL|method|params
specifier|private
name|ModifiableSolrParams
name|params
parameter_list|(
name|SolrParams
name|baseParams
parameter_list|,
name|String
modifier|...
name|moreParams
parameter_list|)
block|{
specifier|final
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|baseParams
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|params
argument_list|(
name|moreParams
argument_list|)
argument_list|)
expr_stmt|;
comment|//actually replaces
return|return
name|params
return|;
block|}
annotation|@
name|Test
annotation|@
name|Repeat
argument_list|(
name|iterations
operator|=
literal|3
argument_list|)
DECL|method|testPng
specifier|public
name|void
name|testPng
parameter_list|()
block|{
comment|//We test via round-trip randomized data:
comment|// Make random data
name|int
name|columns
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|rows
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
index|[]
name|counts
init|=
operator|new
name|int
index|[
name|columns
operator|*
name|rows
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|counts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|ri
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
name|ri
operator|>=
literal|0
operator|&&
name|ri
operator|<=
literal|3
condition|)
block|{
name|counts
index|[
name|i
index|]
operator|=
name|ri
expr_stmt|;
comment|// 0 thru 3 will be made common
block|}
elseif|else
if|if
condition|(
name|ri
operator|>
literal|3
condition|)
block|{
name|counts
index|[
name|i
index|]
operator|=
name|Math
operator|.
name|abs
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
comment|//lots of other possible values up to max
block|}
block|}
comment|// Round-trip
specifier|final
name|byte
index|[]
name|bytes
init|=
name|SpatialHeatmapFacets
operator|.
name|asPngBytes
argument_list|(
name|columns
argument_list|,
name|rows
argument_list|,
name|counts
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|int
index|[]
name|countsOut
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
operator|new
name|int
index|[
name|columns
operator|*
name|rows
index|]
else|:
literal|null
decl_stmt|;
name|int
name|base
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|countsOut
operator|!=
literal|null
condition|)
block|{
name|base
operator|=
literal|9
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|countsOut
argument_list|,
name|base
argument_list|)
expr_stmt|;
block|}
name|countsOut
operator|=
name|SpatialHeatmapFacets
operator|.
name|addPngToIntArray
argument_list|(
name|bytes
argument_list|,
name|countsOut
argument_list|)
expr_stmt|;
comment|// Test equal
name|assertEquals
argument_list|(
name|counts
operator|.
name|length
argument_list|,
name|countsOut
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|countsOut
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|counts
index|[
name|i
index|]
argument_list|,
name|countsOut
index|[
name|i
index|]
operator|-
name|base
argument_list|)
expr_stmt|;
comment|//back out the base input to prove we added
block|}
block|}
block|}
end_class
end_unit
