begin_unit
begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|BlobRepository
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|SolrCoreAware
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|ResourceSharingTestComponent
specifier|public
class|class
name|ResourceSharingTestComponent
extends|extends
name|SearchComponent
implements|implements
name|SolrCoreAware
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|core
specifier|private
name|SolrCore
name|core
decl_stmt|;
DECL|field|blob
specifier|private
specifier|volatile
name|BlobRepository
operator|.
name|BlobContent
argument_list|<
name|TestObject
argument_list|>
name|blob
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"SynchronizeOnNonFinalField"
argument_list|)
annotation|@
name|Override
DECL|method|prepare
specifier|public
name|void
name|prepare
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrParams
name|params
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|ModifiableSolrParams
name|mParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|String
name|q
init|=
literal|"text:"
operator|+
name|getTestObj
argument_list|()
operator|.
name|getLastCollection
argument_list|()
decl_stmt|;
name|mParams
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|)
expr_stmt|;
comment|// search for the last collection name.
comment|// This should cause the param to show up in the response...
name|rb
operator|.
name|req
operator|.
name|setParams
argument_list|(
name|mParams
argument_list|)
expr_stmt|;
name|getTestObj
argument_list|()
operator|.
name|setLastCollection
argument_list|(
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process
specifier|public
name|void
name|process
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"ResourceSharingTestComponent"
return|;
block|}
annotation|@
name|Override
DECL|method|getSource
specifier|public
name|String
name|getSource
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getTestObj
name|TestObject
name|getTestObj
parameter_list|()
block|{
return|return
name|this
operator|.
name|blob
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|inform
specifier|public
name|void
name|inform
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Informing test component..."
argument_list|)
expr_stmt|;
name|this
operator|.
name|core
operator|=
name|core
expr_stmt|;
name|this
operator|.
name|blob
operator|=
name|core
operator|.
name|loadDecodeAndCacheBlob
argument_list|(
name|getKey
argument_list|()
argument_list|,
operator|new
name|DumbCsvDecoder
argument_list|()
argument_list|)
operator|.
name|blob
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Test component informed!"
argument_list|)
expr_stmt|;
block|}
DECL|method|getKey
specifier|private
name|String
name|getKey
parameter_list|()
block|{
return|return
name|getResourceName
argument_list|()
operator|+
literal|"/"
operator|+
name|getResourceVersion
argument_list|()
return|;
block|}
DECL|method|getResourceName
specifier|public
name|String
name|getResourceName
parameter_list|()
block|{
return|return
literal|"testResource"
return|;
block|}
DECL|method|getResourceVersion
specifier|public
name|String
name|getResourceVersion
parameter_list|()
block|{
return|return
literal|"1"
return|;
block|}
DECL|class|DumbCsvDecoder
class|class
name|DumbCsvDecoder
implements|implements
name|BlobRepository
operator|.
name|Decoder
argument_list|<
name|Object
argument_list|>
block|{
DECL|field|dict
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dict
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|DumbCsvDecoder
specifier|public
name|DumbCsvDecoder
parameter_list|()
block|{}
DECL|method|processSimpleCsvRow
name|void
name|processSimpleCsvRow
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|String
index|[]
name|row
init|=
name|string
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
comment|// dumbest csv parser ever... :)
name|getDict
argument_list|()
operator|.
name|put
argument_list|(
name|row
index|[
literal|0
index|]
argument_list|,
name|row
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|getDict
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getDict
parameter_list|()
block|{
return|return
name|dict
return|;
block|}
annotation|@
name|Override
DECL|method|decode
specifier|public
name|TestObject
name|decode
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
block|{
comment|// loading a tiny csv like:
comment|//
comment|// foo,bar
comment|// baz,bam
try|try
init|(
name|Stream
argument_list|<
name|String
argument_list|>
name|lines
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|inputStream
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|lines
argument_list|()
init|)
block|{
name|lines
operator|.
name|forEach
argument_list|(
name|this
operator|::
name|processSimpleCsvRow
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"failed to read dictionary {}"
argument_list|,
name|getResourceName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot load  dictionary "
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|dict
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bam"
argument_list|,
name|dict
operator|.
name|get
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Loaded {}  using {}"
argument_list|,
name|getDict
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
comment|// if we get here we have seen the data from the blob and all we need is to test that two collections
comment|// are able to see the same object..
return|return
operator|new
name|TestObject
argument_list|()
return|;
block|}
block|}
DECL|class|TestObject
specifier|public
specifier|static
class|class
name|TestObject
block|{
DECL|field|NEVER_UPDATED
specifier|public
specifier|static
specifier|final
name|String
name|NEVER_UPDATED
init|=
literal|"never updated"
decl_stmt|;
DECL|field|lastCollection
specifier|private
specifier|volatile
name|String
name|lastCollection
init|=
name|NEVER_UPDATED
decl_stmt|;
DECL|method|getLastCollection
specifier|public
name|String
name|getLastCollection
parameter_list|()
block|{
return|return
name|this
operator|.
name|lastCollection
return|;
block|}
DECL|method|setLastCollection
specifier|public
name|void
name|setLastCollection
parameter_list|(
name|String
name|lastCollection
parameter_list|)
block|{
name|this
operator|.
name|lastCollection
operator|=
name|lastCollection
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
