begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|PivotFacetField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_comment
comment|/**  * A light weight test of various helper methods used in pivot faceting  *  **/
end_comment
begin_class
DECL|class|TestPivotHelperCode
specifier|public
class|class
name|TestPivotHelperCode
extends|extends
name|SolrTestCaseJ4
block|{
comment|/**    * test refinement encoding/decoding matches specific expected encoded values     * @see PivotFacetHelper#encodeRefinementValuePath    * @see PivotFacetHelper#decodeRefinementValuePath    */
DECL|method|testRefinementStringEncodingWhiteBox
specifier|public
name|void
name|testRefinementStringEncodingWhiteBox
parameter_list|()
block|{
comment|// trivial example with some basci escaping of an embedded comma
name|assertBiDirectionalEncoding
argument_list|(
name|strs
argument_list|(
literal|"foo,bar"
argument_list|,
literal|"yak"
argument_list|,
literal|"zat"
argument_list|)
argument_list|,
literal|"~foo\\,bar,~yak,~zat"
argument_list|)
expr_stmt|;
comment|// simple single valued case
name|assertBiDirectionalEncoding
argument_list|(
name|strs
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"~foo"
argument_list|)
expr_stmt|;
comment|// special case: empty list
name|assertBiDirectionalEncoding
argument_list|(
name|strs
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// special case: single element list containing empty string
name|assertBiDirectionalEncoding
argument_list|(
name|strs
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|"~"
argument_list|)
expr_stmt|;
comment|// special case: single element list containing null
name|assertBiDirectionalEncoding
argument_list|(
name|strs
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
argument_list|,
literal|"^"
argument_list|)
expr_stmt|;
comment|// mix of empty strings& null with other values
name|assertBiDirectionalEncoding
argument_list|(
name|strs
argument_list|(
literal|""
argument_list|,
literal|"foo"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
literal|"~,~foo,~,~,^,~bar"
argument_list|)
expr_stmt|;
block|}
comment|/**    * test refinement encoding/decoding of random sets of values can be round tripped,     * w/o worrying about what the actual encoding looks like    *    * @see PivotFacetHelper#encodeRefinementValuePath    * @see PivotFacetHelper#decodeRefinementValuePath    */
DECL|method|testRefinementStringEncodingBlockBoxRoundTrip
specifier|public
name|void
name|testRefinementStringEncodingBlockBoxRoundTrip
parameter_list|()
block|{
comment|// random data: we should be able to round trip any set of random strings
specifier|final
name|int
name|numIters
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIters
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|numStrs
init|=
name|atLeast
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|data
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|numStrs
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numStrs
condition|;
name|j
operator|++
control|)
block|{
comment|// :TODO: mix in nulls
name|data
operator|.
name|add
argument_list|(
name|TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|encoded
init|=
name|PivotFacetHelper
operator|.
name|encodeRefinementValuePath
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|decoded
init|=
name|PivotFacetHelper
operator|.
name|decodeRefinementValuePath
argument_list|(
name|encoded
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|data
argument_list|,
name|decoded
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertBiDirectionalEncoding
specifier|private
name|void
name|assertBiDirectionalEncoding
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|data
parameter_list|,
name|String
name|encoded
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|data
argument_list|,
name|PivotFacetHelper
operator|.
name|decodeRefinementValuePath
argument_list|(
name|encoded
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encoded
argument_list|,
name|PivotFacetHelper
operator|.
name|encodeRefinementValuePath
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCompareWithNullLast
specifier|public
name|void
name|testCompareWithNullLast
parameter_list|()
throws|throws
name|Exception
block|{
name|Long
name|a
init|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|Long
name|b
init|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
argument_list|,
name|PivotFacetFieldValueCollection
operator|.
name|compareWithNullLast
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
operator|.
name|compareTo
argument_list|(
name|a
argument_list|)
argument_list|,
name|PivotFacetFieldValueCollection
operator|.
name|compareWithNullLast
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|Long
name|bb
init|=
operator|new
name|Long
argument_list|(
name|b
operator|.
name|longValue
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|PivotFacetFieldValueCollection
operator|.
name|compareWithNullLast
argument_list|(
name|b
argument_list|,
name|bb
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|PivotFacetFieldValueCollection
operator|.
name|compareWithNullLast
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|PivotFacetFieldValueCollection
operator|.
name|compareWithNullLast
argument_list|(
name|a
argument_list|,
literal|null
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|PivotFacetFieldValueCollection
operator|.
name|compareWithNullLast
argument_list|(
name|b
argument_list|,
literal|null
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|<
name|PivotFacetFieldValueCollection
operator|.
name|compareWithNullLast
argument_list|(
literal|null
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|<
name|PivotFacetFieldValueCollection
operator|.
name|compareWithNullLast
argument_list|(
literal|null
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|strs
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|strs
parameter_list|(
name|String
modifier|...
name|strs
parameter_list|)
block|{
return|return
name|Arrays
operator|.
expr|<
name|String
operator|>
name|asList
argument_list|(
name|strs
argument_list|)
return|;
block|}
block|}
end_class
end_unit
