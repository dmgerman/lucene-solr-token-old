begin_unit
begin_package
DECL|package|org.apache.solr.handler
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|presto
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParser
import|;
end_import
begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|presto
operator|.
name|sql
operator|.
name|tree
operator|.
name|Statement
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|ExceptionStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|SolrStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|TupleStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractFullDistribZkTestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|TestSQLHandler
specifier|public
class|class
name|TestSQLHandler
extends|extends
name|AbstractFullDistribZkTestBase
block|{
static|static
block|{
name|schemaString
operator|=
literal|"schema-sql.xml"
expr_stmt|;
block|}
DECL|method|TestSQLHandler
specifier|public
name|TestSQLHandler
parameter_list|()
block|{
name|sliceCount
operator|=
literal|2
expr_stmt|;
block|}
comment|//@BeforeClass
comment|//public static void beforeSuperClass() {
comment|//AbstractZkTestCase.SOLRHOME = new File(SOLR_HOME());
comment|// }
annotation|@
name|AfterClass
DECL|method|afterSuperClass
specifier|public
specifier|static
name|void
name|afterSuperClass
parameter_list|()
block|{    }
DECL|method|getCloudSolrConfig
specifier|protected
name|String
name|getCloudSolrConfig
parameter_list|()
block|{
return|return
literal|"solrconfig-sql.xml"
return|;
block|}
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|// we expect this time of exception as shards go up and down...
comment|//ignoreException(".*");
name|System
operator|.
name|setProperty
argument_list|(
literal|"numShards"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|sliceCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|resetExceptionIgnores
argument_list|()
expr_stmt|;
block|}
DECL|method|delete
specifier|private
name|void
name|delete
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteCore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|doTest
specifier|public
name|void
name|doTest
parameter_list|()
throws|throws
name|Exception
block|{
name|testPredicate
argument_list|()
expr_stmt|;
name|testBasicSelect
argument_list|()
expr_stmt|;
name|testBasicGrouping
argument_list|()
expr_stmt|;
name|testSQLException
argument_list|()
expr_stmt|;
name|testTimeSeriesGrouping
argument_list|()
expr_stmt|;
name|testParallelBasicGrouping
argument_list|()
expr_stmt|;
name|testParallelTimeSeriesGrouping
argument_list|()
expr_stmt|;
block|}
DECL|method|testPredicate
specifier|private
name|void
name|testPredicate
parameter_list|()
throws|throws
name|Exception
block|{
name|SqlParser
name|parser
init|=
operator|new
name|SqlParser
argument_list|()
decl_stmt|;
name|String
name|sql
init|=
literal|"select a from b where c = 'd'"
decl_stmt|;
name|Statement
name|statement
init|=
name|parser
operator|.
name|createStatement
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|SQLHandler
operator|.
name|SQLVisitor
name|sqlVistor
init|=
operator|new
name|SQLHandler
operator|.
name|SQLVisitor
argument_list|(
operator|new
name|StringBuilder
argument_list|()
argument_list|)
decl_stmt|;
name|sqlVistor
operator|.
name|process
argument_list|(
name|statement
argument_list|,
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|sqlVistor
operator|.
name|query
operator|.
name|equals
argument_list|(
literal|"(c:d)"
argument_list|)
operator|)
assert|;
comment|//Add parens
name|parser
operator|=
operator|new
name|SqlParser
argument_list|()
expr_stmt|;
name|sql
operator|=
literal|"select a from b where (c = 'd')"
expr_stmt|;
name|statement
operator|=
name|parser
operator|.
name|createStatement
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|sqlVistor
operator|=
operator|new
name|SQLHandler
operator|.
name|SQLVisitor
argument_list|(
operator|new
name|StringBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|sqlVistor
operator|.
name|process
argument_list|(
name|statement
argument_list|,
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|sqlVistor
operator|.
name|query
operator|.
name|equals
argument_list|(
literal|"(c:d)"
argument_list|)
operator|)
assert|;
comment|//Phrase
name|parser
operator|=
operator|new
name|SqlParser
argument_list|()
expr_stmt|;
name|sql
operator|=
literal|"select a from b where (c = '\"d d\"')"
expr_stmt|;
name|statement
operator|=
name|parser
operator|.
name|createStatement
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|sqlVistor
operator|=
operator|new
name|SQLHandler
operator|.
name|SQLVisitor
argument_list|(
operator|new
name|StringBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|sqlVistor
operator|.
name|process
argument_list|(
name|statement
argument_list|,
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|sqlVistor
operator|.
name|query
operator|.
name|equals
argument_list|(
literal|"(c:\"d d\")"
argument_list|)
operator|)
assert|;
comment|// AND
name|parser
operator|=
operator|new
name|SqlParser
argument_list|()
expr_stmt|;
name|sql
operator|=
literal|"select a from b where ((c = 'd') AND (l = 'z'))"
expr_stmt|;
name|statement
operator|=
name|parser
operator|.
name|createStatement
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|sqlVistor
operator|=
operator|new
name|SQLHandler
operator|.
name|SQLVisitor
argument_list|(
operator|new
name|StringBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|sqlVistor
operator|.
name|process
argument_list|(
name|statement
argument_list|,
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|sqlVistor
operator|.
name|query
operator|.
name|equals
argument_list|(
literal|"((c:d) AND (l:z))"
argument_list|)
operator|)
assert|;
comment|// OR
name|parser
operator|=
operator|new
name|SqlParser
argument_list|()
expr_stmt|;
name|sql
operator|=
literal|"select a from b where ((c = 'd') OR (l = 'z'))"
expr_stmt|;
name|statement
operator|=
name|parser
operator|.
name|createStatement
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|sqlVistor
operator|=
operator|new
name|SQLHandler
operator|.
name|SQLVisitor
argument_list|(
operator|new
name|StringBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|sqlVistor
operator|.
name|process
argument_list|(
name|statement
argument_list|,
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|sqlVistor
operator|.
name|query
operator|.
name|equals
argument_list|(
literal|"((c:d) OR (l:z))"
argument_list|)
operator|)
assert|;
comment|// AND NOT
name|parser
operator|=
operator|new
name|SqlParser
argument_list|()
expr_stmt|;
name|sql
operator|=
literal|"select a from b where ((c = 'd') AND NOT (l = 'z'))"
expr_stmt|;
name|statement
operator|=
name|parser
operator|.
name|createStatement
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|sqlVistor
operator|=
operator|new
name|SQLHandler
operator|.
name|SQLVisitor
argument_list|(
operator|new
name|StringBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|sqlVistor
operator|.
name|process
argument_list|(
name|statement
argument_list|,
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|sqlVistor
operator|.
name|query
operator|.
name|equals
argument_list|(
literal|"((c:d) AND -(l:z))"
argument_list|)
operator|)
assert|;
comment|// NESTED
name|parser
operator|=
operator|new
name|SqlParser
argument_list|()
expr_stmt|;
name|sql
operator|=
literal|"select a from b where ((c = 'd') OR ((l = 'z') AND (m = 'j')))"
expr_stmt|;
name|statement
operator|=
name|parser
operator|.
name|createStatement
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|sqlVistor
operator|=
operator|new
name|SQLHandler
operator|.
name|SQLVisitor
argument_list|(
operator|new
name|StringBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|sqlVistor
operator|.
name|process
argument_list|(
name|statement
argument_list|,
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|sqlVistor
operator|.
name|query
operator|.
name|equals
argument_list|(
literal|"((c:d) OR ((l:z) AND (m:j)))"
argument_list|)
operator|)
assert|;
comment|// NESTED NOT
name|parser
operator|=
operator|new
name|SqlParser
argument_list|()
expr_stmt|;
name|sql
operator|=
literal|"select a from b where ((c = 'd') OR ((l = 'z') AND NOT (m = 'j')))"
expr_stmt|;
name|statement
operator|=
name|parser
operator|.
name|createStatement
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|sqlVistor
operator|=
operator|new
name|SQLHandler
operator|.
name|SQLVisitor
argument_list|(
operator|new
name|StringBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|sqlVistor
operator|.
name|process
argument_list|(
name|statement
argument_list|,
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|sqlVistor
operator|.
name|query
operator|.
name|equals
argument_list|(
literal|"((c:d) OR ((l:z) AND -(m:j)))"
argument_list|)
operator|)
assert|;
comment|// RANGE - Will have to do until SQL BETWEEN is supported.
comment|// NESTED
name|parser
operator|=
operator|new
name|SqlParser
argument_list|()
expr_stmt|;
name|sql
operator|=
literal|"select a from b where ((c = '[0 TO 100]') OR ((l = 'z') AND (m = 'j')))"
expr_stmt|;
name|statement
operator|=
name|parser
operator|.
name|createStatement
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|sqlVistor
operator|=
operator|new
name|SQLHandler
operator|.
name|SQLVisitor
argument_list|(
operator|new
name|StringBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|sqlVistor
operator|.
name|process
argument_list|(
name|statement
argument_list|,
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|sqlVistor
operator|.
name|query
operator|.
name|equals
argument_list|(
literal|"((c:[0 TO 100]) OR ((l:z) AND (m:j)))"
argument_list|)
operator|)
assert|;
comment|// Wildcard
name|parser
operator|=
operator|new
name|SqlParser
argument_list|()
expr_stmt|;
name|sql
operator|=
literal|"select a from b where ((c = '[0 TO 100]') OR ((l = 'z*') AND (m = 'j')))"
expr_stmt|;
name|statement
operator|=
name|parser
operator|.
name|createStatement
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|sqlVistor
operator|=
operator|new
name|SQLHandler
operator|.
name|SQLVisitor
argument_list|(
operator|new
name|StringBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|sqlVistor
operator|.
name|process
argument_list|(
name|statement
argument_list|,
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|sqlVistor
operator|.
name|query
operator|.
name|equals
argument_list|(
literal|"((c:[0 TO 100]) OR ((l:z*) AND (m:j)))"
argument_list|)
operator|)
assert|;
comment|// Complex Lucene/Solr Query
name|parser
operator|=
operator|new
name|SqlParser
argument_list|()
expr_stmt|;
name|sql
operator|=
literal|"select a from b where ((c = '[0 TO 100]') OR ((l = 'z*') AND (m = '(j OR (k NOT s))')))"
expr_stmt|;
name|statement
operator|=
name|parser
operator|.
name|createStatement
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|sqlVistor
operator|=
operator|new
name|SQLHandler
operator|.
name|SQLVisitor
argument_list|(
operator|new
name|StringBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|sqlVistor
operator|.
name|process
argument_list|(
name|statement
argument_list|,
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|sqlVistor
operator|.
name|query
operator|.
name|equals
argument_list|(
literal|"((c:[0 TO 100]) OR ((l:z*) AND (m:(j OR (k NOT s)))))"
argument_list|)
operator|)
assert|;
block|}
DECL|method|testBasicSelect
specifier|private
name|void
name|testBasicSelect
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|CloudJettyRunner
name|jetty
init|=
name|this
operator|.
name|cloudJettys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"a"
argument_list|,
literal|"field_i"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"b"
argument_list|,
literal|"field_i"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"a"
argument_list|,
literal|"field_i"
argument_list|,
literal|"20"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"b"
argument_list|,
literal|"field_i"
argument_list|,
literal|"11"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"40"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"50"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"60"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|Map
name|params
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"sql"
argument_list|,
literal|"select id, field_i, str_s from mytable where text='XXXX' order by field_i desc"
argument_list|)
expr_stmt|;
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|8
operator|)
assert|;
name|Tuple
name|tuple
init|=
literal|null
decl_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|8
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|60
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|7
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|50
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|6
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|40
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|5
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|30
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|20
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|11
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|6
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|8
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|7
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|7
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
name|params
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"sql"
argument_list|,
literal|"select id, field_i, str_s from mytable where text='XXXX' order by field_i desc limit 1"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|8
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|60
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
name|params
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"sql"
argument_list|,
literal|"select id, field_i, str_s from mytable where text='XXXX' AND id='(1 2 3)' order by field_i desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|20
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|8
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|7
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
block|}
finally|finally
block|{
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testSQLException
specifier|private
name|void
name|testSQLException
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|CloudJettyRunner
name|jetty
init|=
name|this
operator|.
name|cloudJettys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"a"
argument_list|,
literal|"field_i"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"b"
argument_list|,
literal|"field_i"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"a"
argument_list|,
literal|"field_i"
argument_list|,
literal|"20"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"b"
argument_list|,
literal|"field_i"
argument_list|,
literal|"11"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"40"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"50"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"60"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|Map
name|params
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"sql"
argument_list|,
literal|"select id, field_i, str_s from mytable where text='XXXX' order by field_iff desc"
argument_list|)
expr_stmt|;
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|Tuple
name|tuple
init|=
name|getTuple
argument_list|(
operator|new
name|ExceptionStream
argument_list|(
name|solrStream
argument_list|)
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|EOF
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|EXCEPTION
operator|)
assert|;
comment|//A parse exception detected before being sent to the search engine
assert|assert
operator|(
name|tuple
operator|.
name|getException
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Fields in the sort spec must be included in the field list"
argument_list|)
operator|)
assert|;
name|params
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"sql"
argument_list|,
literal|"select id, field_iff, str_s from mytable where text='XXXX' order by field_iff desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|getTuple
argument_list|(
operator|new
name|ExceptionStream
argument_list|(
name|solrStream
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|EOF
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|EXCEPTION
operator|)
assert|;
comment|//An exception not detected by the parser thrown from the /select handler
assert|assert
operator|(
name|tuple
operator|.
name|getException
argument_list|()
operator|.
name|contains
argument_list|(
literal|"An exception has occurred on the server, refer to server log for details"
argument_list|)
operator|)
assert|;
name|params
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"sql"
argument_list|,
literal|"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), avg(field_i) from mytable where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|getTuple
argument_list|(
operator|new
name|ExceptionStream
argument_list|(
name|solrStream
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|EOF
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|EXCEPTION
operator|)
assert|;
comment|//An exception not detected by the parser thrown from the /export handler
assert|assert
operator|(
name|tuple
operator|.
name|getException
argument_list|()
operator|.
name|contains
argument_list|(
literal|"undefined field:"
argument_list|)
operator|)
assert|;
block|}
finally|finally
block|{
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testBasicGrouping
specifier|private
name|void
name|testBasicGrouping
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|CloudJettyRunner
name|jetty
init|=
name|this
operator|.
name|cloudJettys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"a"
argument_list|,
literal|"field_i"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"b"
argument_list|,
literal|"field_i"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"a"
argument_list|,
literal|"field_i"
argument_list|,
literal|"20"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"b"
argument_list|,
literal|"field_i"
argument_list|,
literal|"11"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"40"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"50"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"60"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|Map
name|params
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"sql"
argument_list|,
literal|"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from mytable where text='XXXX' group by str_s order by sum(field_i) asc limit 2"
argument_list|)
expr_stmt|;
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
comment|//Only two results because of the limit.
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|Tuple
name|tuple
init|=
literal|null
decl_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(field_i)"
argument_list|)
operator|==
literal|19
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(field_i)"
argument_list|)
operator|==
literal|8
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(field_i)"
argument_list|)
operator|==
literal|11
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(field_i)"
argument_list|)
operator|==
literal|9.5D
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(field_i)"
argument_list|)
operator|==
literal|27
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(field_i)"
argument_list|)
operator|==
literal|7
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(field_i)"
argument_list|)
operator|==
literal|20
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(field_i)"
argument_list|)
operator|==
literal|13.5D
operator|)
assert|;
name|params
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"sql"
argument_list|,
literal|"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from mytable where (text='XXXX' AND NOT text='\"XXXX XXX\"') group by str_s order by str_s desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
comment|//The sort by and order by match and no limit is applied. All the Tuples should be returned in
comment|//this scenario.
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(field_i)"
argument_list|)
operator|==
literal|180
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(field_i)"
argument_list|)
operator|==
literal|30
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(field_i)"
argument_list|)
operator|==
literal|60
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(field_i)"
argument_list|)
operator|==
literal|45
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(field_i)"
argument_list|)
operator|==
literal|19
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(field_i)"
argument_list|)
operator|==
literal|8
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(field_i)"
argument_list|)
operator|==
literal|11
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(field_i)"
argument_list|)
operator|==
literal|9.5D
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(field_i)"
argument_list|)
operator|==
literal|27
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(field_i)"
argument_list|)
operator|==
literal|7
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(field_i)"
argument_list|)
operator|==
literal|20
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(field_i)"
argument_list|)
operator|==
literal|13.5D
operator|)
assert|;
name|params
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"sql"
argument_list|,
literal|"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from mytable where text='XXXX' group by str_s having sum(field_i) = 19"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(field_i)"
argument_list|)
operator|==
literal|19
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(field_i)"
argument_list|)
operator|==
literal|8
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(field_i)"
argument_list|)
operator|==
literal|11
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(field_i)"
argument_list|)
operator|==
literal|9.5D
operator|)
assert|;
name|params
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"sql"
argument_list|,
literal|"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from mytable where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 8))"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
comment|//Only two results because of the limit.
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(field_i)"
argument_list|)
operator|==
literal|19
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(field_i)"
argument_list|)
operator|==
literal|8
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(field_i)"
argument_list|)
operator|==
literal|11
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(field_i)"
argument_list|)
operator|==
literal|9.5D
operator|)
assert|;
name|params
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"sql"
argument_list|,
literal|"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from mytable where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 100))"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
assert|;
block|}
finally|finally
block|{
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testParallelBasicGrouping
specifier|private
name|void
name|testParallelBasicGrouping
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|CloudJettyRunner
name|jetty
init|=
name|this
operator|.
name|cloudJettys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"a"
argument_list|,
literal|"field_i"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"b"
argument_list|,
literal|"field_i"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"a"
argument_list|,
literal|"field_i"
argument_list|,
literal|"20"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"b"
argument_list|,
literal|"field_i"
argument_list|,
literal|"11"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"40"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"50"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"60"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|Map
name|params
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"numWorkers"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"sql"
argument_list|,
literal|"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from mytable where text='XXXX' group by str_s order by sum(field_i) asc limit 2"
argument_list|)
expr_stmt|;
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
comment|//Only two results because of the limit.
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|Tuple
name|tuple
init|=
literal|null
decl_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(field_i)"
argument_list|)
operator|==
literal|19
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(field_i)"
argument_list|)
operator|==
literal|8
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(field_i)"
argument_list|)
operator|==
literal|11
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(field_i)"
argument_list|)
operator|==
literal|9.5D
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(field_i)"
argument_list|)
operator|==
literal|27
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(field_i)"
argument_list|)
operator|==
literal|7
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(field_i)"
argument_list|)
operator|==
literal|20
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(field_i)"
argument_list|)
operator|==
literal|13.5D
operator|)
assert|;
name|params
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"numWorkers"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"sql"
argument_list|,
literal|"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from mytable where text='XXXX' group by str_s order by str_s desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
comment|//The sort by and order by match and no limit is applied. All the Tuples should be returned in
comment|//this scenario.
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(field_i)"
argument_list|)
operator|==
literal|180
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(field_i)"
argument_list|)
operator|==
literal|30
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(field_i)"
argument_list|)
operator|==
literal|60
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(field_i)"
argument_list|)
operator|==
literal|45
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(field_i)"
argument_list|)
operator|==
literal|19
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(field_i)"
argument_list|)
operator|==
literal|8
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(field_i)"
argument_list|)
operator|==
literal|11
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(field_i)"
argument_list|)
operator|==
literal|9.5D
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(field_i)"
argument_list|)
operator|==
literal|27
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(field_i)"
argument_list|)
operator|==
literal|7
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(field_i)"
argument_list|)
operator|==
literal|20
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(field_i)"
argument_list|)
operator|==
literal|13.5D
operator|)
assert|;
name|params
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"numWorkers"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"sql"
argument_list|,
literal|"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from mytable where text='XXXX' group by str_s having sum(field_i) = 19"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
comment|//Only two results because of the limit.
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(field_i)"
argument_list|)
operator|==
literal|19
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(field_i)"
argument_list|)
operator|==
literal|8
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(field_i)"
argument_list|)
operator|==
literal|11
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(field_i)"
argument_list|)
operator|==
literal|9.5D
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(field_i)"
argument_list|)
operator|==
literal|19
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(field_i)"
argument_list|)
operator|==
literal|8
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(field_i)"
argument_list|)
operator|==
literal|11
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(field_i)"
argument_list|)
operator|==
literal|9.5D
operator|)
assert|;
name|params
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"numWorkers"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"sql"
argument_list|,
literal|"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from mytable where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 8))"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
comment|//Only two results because of the limit.
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(field_i)"
argument_list|)
operator|==
literal|19
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(field_i)"
argument_list|)
operator|==
literal|8
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(field_i)"
argument_list|)
operator|==
literal|11
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(field_i)"
argument_list|)
operator|==
literal|9.5D
operator|)
assert|;
name|params
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"numWorkers"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"sql"
argument_list|,
literal|"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from mytable where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 100))"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
assert|;
block|}
finally|finally
block|{
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testTimeSeriesGrouping
specifier|private
name|void
name|testTimeSeriesGrouping
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|CloudJettyRunner
name|jetty
init|=
name|this
operator|.
name|cloudJettys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2015"
argument_list|,
literal|"month_i"
argument_list|,
literal|"11"
argument_list|,
literal|"day_i"
argument_list|,
literal|"7"
argument_list|,
literal|"item_i"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2015"
argument_list|,
literal|"month_i"
argument_list|,
literal|"11"
argument_list|,
literal|"day_i"
argument_list|,
literal|"7"
argument_list|,
literal|"item_i"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2015"
argument_list|,
literal|"month_i"
argument_list|,
literal|"11"
argument_list|,
literal|"day_i"
argument_list|,
literal|"8"
argument_list|,
literal|"item_i"
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2015"
argument_list|,
literal|"month_i"
argument_list|,
literal|"11"
argument_list|,
literal|"day_i"
argument_list|,
literal|"8"
argument_list|,
literal|"item_i"
argument_list|,
literal|"12"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2015"
argument_list|,
literal|"month_i"
argument_list|,
literal|"10"
argument_list|,
literal|"day_i"
argument_list|,
literal|"1"
argument_list|,
literal|"item_i"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2015"
argument_list|,
literal|"month_i"
argument_list|,
literal|"10"
argument_list|,
literal|"day_i"
argument_list|,
literal|"3"
argument_list|,
literal|"item_i"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2014"
argument_list|,
literal|"month_i"
argument_list|,
literal|"4"
argument_list|,
literal|"day_i"
argument_list|,
literal|"4"
argument_list|,
literal|"item_i"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2014"
argument_list|,
literal|"month_i"
argument_list|,
literal|"4"
argument_list|,
literal|"day_i"
argument_list|,
literal|"2"
argument_list|,
literal|"item_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|Map
name|params
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"sql"
argument_list|,
literal|"select year_i, sum(item_i) from mytable group by year_i order by year_i desc"
argument_list|)
expr_stmt|;
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
comment|//Only two results because of the limit.
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|Tuple
name|tuple
init|=
literal|null
decl_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(item_i)"
argument_list|)
operator|==
literal|66
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2014
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(item_i)"
argument_list|)
operator|==
literal|7
operator|)
assert|;
name|params
operator|.
name|put
argument_list|(
literal|"sql"
argument_list|,
literal|"select year_i, month_i, sum(item_i) from mytable group by year_i, month_i order by year_i desc, month_i desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
comment|//Only two results because of the limit.
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|tuple
operator|=
literal|null
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|11
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(item_i)"
argument_list|)
operator|==
literal|57
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|10
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(item_i)"
argument_list|)
operator|==
literal|9
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2014
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(item_i)"
argument_list|)
operator|==
literal|7
operator|)
assert|;
name|params
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"sql"
argument_list|,
literal|"select year_i, month_i, day_i, sum(item_i) from mytable group by year_i, month_i, day_i order by year_i desc, month_i desc, day_i desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
comment|//Only two results because of the limit.
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|)
assert|;
name|tuple
operator|=
literal|null
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|11
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"day_i"
argument_list|)
operator|==
literal|8
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(item_i)"
argument_list|)
operator|==
literal|42
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|11
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"day_i"
argument_list|)
operator|==
literal|7
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(item_i)"
argument_list|)
operator|==
literal|15
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|10
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"day_i"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(item_i)"
argument_list|)
operator|==
literal|5
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|10
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"day_i"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(item_i)"
argument_list|)
operator|==
literal|4
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2014
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"day_i"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(item_i)"
argument_list|)
operator|==
literal|6
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2014
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"day_i"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(item_i)"
argument_list|)
operator|==
literal|1
operator|)
assert|;
block|}
finally|finally
block|{
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testParallelTimeSeriesGrouping
specifier|private
name|void
name|testParallelTimeSeriesGrouping
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|CloudJettyRunner
name|jetty
init|=
name|this
operator|.
name|cloudJettys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2015"
argument_list|,
literal|"month_i"
argument_list|,
literal|"11"
argument_list|,
literal|"day_i"
argument_list|,
literal|"7"
argument_list|,
literal|"item_i"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2015"
argument_list|,
literal|"month_i"
argument_list|,
literal|"11"
argument_list|,
literal|"day_i"
argument_list|,
literal|"7"
argument_list|,
literal|"item_i"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2015"
argument_list|,
literal|"month_i"
argument_list|,
literal|"11"
argument_list|,
literal|"day_i"
argument_list|,
literal|"8"
argument_list|,
literal|"item_i"
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2015"
argument_list|,
literal|"month_i"
argument_list|,
literal|"11"
argument_list|,
literal|"day_i"
argument_list|,
literal|"8"
argument_list|,
literal|"item_i"
argument_list|,
literal|"12"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2015"
argument_list|,
literal|"month_i"
argument_list|,
literal|"10"
argument_list|,
literal|"day_i"
argument_list|,
literal|"1"
argument_list|,
literal|"item_i"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2015"
argument_list|,
literal|"month_i"
argument_list|,
literal|"10"
argument_list|,
literal|"day_i"
argument_list|,
literal|"3"
argument_list|,
literal|"item_i"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2014"
argument_list|,
literal|"month_i"
argument_list|,
literal|"4"
argument_list|,
literal|"day_i"
argument_list|,
literal|"4"
argument_list|,
literal|"item_i"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2014"
argument_list|,
literal|"month_i"
argument_list|,
literal|"4"
argument_list|,
literal|"day_i"
argument_list|,
literal|"2"
argument_list|,
literal|"item_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|Map
name|params
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"numWorkers"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"sql"
argument_list|,
literal|"select year_i, sum(item_i) from mytable group by year_i order by year_i desc"
argument_list|)
expr_stmt|;
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
comment|//Only two results because of the limit.
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|Tuple
name|tuple
init|=
literal|null
decl_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(item_i)"
argument_list|)
operator|==
literal|66
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2014
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(item_i)"
argument_list|)
operator|==
literal|7
operator|)
assert|;
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"numWorkers"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"sql"
argument_list|,
literal|"select year_i, month_i, sum(item_i) from mytable group by year_i, month_i order by year_i desc, month_i desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
comment|//Only two results because of the limit.
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|tuple
operator|=
literal|null
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|11
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(item_i)"
argument_list|)
operator|==
literal|57
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|10
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(item_i)"
argument_list|)
operator|==
literal|9
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2014
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(item_i)"
argument_list|)
operator|==
literal|7
operator|)
assert|;
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"numWorkers"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"sql"
argument_list|,
literal|"select year_i, month_i, day_i, sum(item_i) from mytable group by year_i, month_i, day_i order by year_i desc, month_i desc, day_i desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
comment|//Only two results because of the limit.
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|)
assert|;
name|tuple
operator|=
literal|null
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|11
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"day_i"
argument_list|)
operator|==
literal|8
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(item_i)"
argument_list|)
operator|==
literal|42
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|11
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"day_i"
argument_list|)
operator|==
literal|7
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(item_i)"
argument_list|)
operator|==
literal|15
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|10
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"day_i"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(item_i)"
argument_list|)
operator|==
literal|5
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|10
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"day_i"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(item_i)"
argument_list|)
operator|==
literal|4
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2014
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"day_i"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(item_i)"
argument_list|)
operator|==
literal|6
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2014
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"day_i"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(item_i)"
argument_list|)
operator|==
literal|1
operator|)
assert|;
block|}
finally|finally
block|{
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getTuples
specifier|protected
name|List
argument_list|<
name|Tuple
argument_list|>
name|getTuples
parameter_list|(
name|TupleStream
name|tupleStream
parameter_list|)
throws|throws
name|IOException
block|{
name|tupleStream
operator|.
name|open
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|Tuple
name|t
init|=
name|tupleStream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|EOF
condition|)
block|{
break|break;
block|}
else|else
block|{
name|tuples
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
name|tupleStream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|tuples
return|;
block|}
DECL|method|getTuple
specifier|protected
name|Tuple
name|getTuple
parameter_list|(
name|TupleStream
name|tupleStream
parameter_list|)
throws|throws
name|IOException
block|{
name|tupleStream
operator|.
name|open
argument_list|()
expr_stmt|;
name|Tuple
name|t
init|=
name|tupleStream
operator|.
name|read
argument_list|()
decl_stmt|;
name|tupleStream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
end_class
end_unit
