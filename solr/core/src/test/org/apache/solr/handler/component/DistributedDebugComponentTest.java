begin_unit
begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrJettyTestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ShardParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|DistributedDebugComponentTest
specifier|public
class|class
name|DistributedDebugComponentTest
extends|extends
name|SolrJettyTestBase
block|{
DECL|field|collection1
specifier|private
specifier|static
name|SolrClient
name|collection1
decl_stmt|;
DECL|field|collection2
specifier|private
specifier|static
name|SolrClient
name|collection2
decl_stmt|;
DECL|field|shard1
specifier|private
specifier|static
name|String
name|shard1
decl_stmt|;
DECL|field|shard2
specifier|private
specifier|static
name|String
name|shard2
decl_stmt|;
DECL|field|solrHome
specifier|private
specifier|static
name|File
name|solrHome
decl_stmt|;
DECL|method|createSolrHome
specifier|private
specifier|static
name|File
name|createSolrHome
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|workDir
init|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|setupJettyTestHome
argument_list|(
name|workDir
argument_list|,
literal|"collection1"
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"collection1"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"collection2"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|workDir
return|;
block|}
annotation|@
name|BeforeClass
DECL|method|createThings
specifier|public
specifier|static
name|void
name|createThings
parameter_list|()
throws|throws
name|Exception
block|{
name|solrHome
operator|=
name|createSolrHome
argument_list|()
expr_stmt|;
name|createJetty
argument_list|(
name|solrHome
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|url
init|=
name|jetty
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|collection1
operator|=
operator|new
name|HttpSolrClient
argument_list|(
name|url
operator|+
literal|"/collection1"
argument_list|)
expr_stmt|;
name|collection2
operator|=
operator|new
name|HttpSolrClient
argument_list|(
name|url
operator|+
literal|"/collection2"
argument_list|)
expr_stmt|;
name|String
name|urlCollection1
init|=
name|jetty
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
literal|"collection1"
decl_stmt|;
name|String
name|urlCollection2
init|=
name|jetty
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
literal|"collection2"
decl_stmt|;
name|shard1
operator|=
name|urlCollection1
operator|.
name|replaceAll
argument_list|(
literal|"https?://"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|shard2
operator|=
name|urlCollection2
operator|.
name|replaceAll
argument_list|(
literal|"https?://"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|//create second core
try|try
init|(
name|HttpSolrClient
name|nodeClient
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|url
argument_list|)
init|)
block|{
name|CoreAdminRequest
operator|.
name|Create
name|req
init|=
operator|new
name|CoreAdminRequest
operator|.
name|Create
argument_list|()
decl_stmt|;
name|req
operator|.
name|setCoreName
argument_list|(
literal|"collection2"
argument_list|)
expr_stmt|;
name|req
operator|.
name|setConfigSet
argument_list|(
literal|"collection1"
argument_list|)
expr_stmt|;
name|nodeClient
operator|.
name|request
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|setField
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setField
argument_list|(
literal|"text"
argument_list|,
literal|"batman"
argument_list|)
expr_stmt|;
name|collection1
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|collection1
operator|.
name|commit
argument_list|()
expr_stmt|;
name|doc
operator|.
name|setField
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setField
argument_list|(
literal|"text"
argument_list|,
literal|"superman"
argument_list|)
expr_stmt|;
name|collection2
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|collection2
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|destroyThings
specifier|public
specifier|static
name|void
name|destroyThings
parameter_list|()
throws|throws
name|Exception
block|{
name|collection1
operator|.
name|close
argument_list|()
expr_stmt|;
name|collection2
operator|.
name|close
argument_list|()
expr_stmt|;
name|collection1
operator|=
literal|null
expr_stmt|;
name|collection2
operator|=
literal|null
expr_stmt|;
name|jetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|jetty
operator|=
literal|null
expr_stmt|;
name|resetExceptionIgnores
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testSimpleSearch
specifier|public
name|void
name|testSimpleSearch
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"debug"
argument_list|,
literal|"track"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"distrib"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFields
argument_list|(
literal|"id"
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"shards"
argument_list|,
name|shard1
operator|+
literal|","
operator|+
name|shard2
argument_list|)
expr_stmt|;
name|QueryResponse
name|response
init|=
name|collection1
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|track
init|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|response
operator|.
name|getDebugMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"track"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|track
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|track
operator|.
name|get
argument_list|(
literal|"rid"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|track
operator|.
name|get
argument_list|(
literal|"EXECUTE_QUERY"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
operator|(
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|track
operator|.
name|get
argument_list|(
literal|"EXECUTE_QUERY"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
name|shard1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
operator|(
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|track
operator|.
name|get
argument_list|(
literal|"EXECUTE_QUERY"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
name|shard2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
operator|(
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|track
operator|.
name|get
argument_list|(
literal|"GET_FIELDS"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
name|shard1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
operator|(
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|track
operator|.
name|get
argument_list|(
literal|"GET_FIELDS"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
name|shard2
argument_list|)
argument_list|)
expr_stmt|;
name|assertElementsPresent
argument_list|(
call|(
name|NamedList
argument_list|<
name|String
argument_list|>
call|)
argument_list|(
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|track
operator|.
name|get
argument_list|(
literal|"EXECUTE_QUERY"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|shard1
argument_list|)
argument_list|,
literal|"QTime"
argument_list|,
literal|"ElapsedTime"
argument_list|,
literal|"RequestPurpose"
argument_list|,
literal|"NumFound"
argument_list|,
literal|"Response"
argument_list|)
expr_stmt|;
name|assertElementsPresent
argument_list|(
call|(
name|NamedList
argument_list|<
name|String
argument_list|>
call|)
argument_list|(
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|track
operator|.
name|get
argument_list|(
literal|"EXECUTE_QUERY"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|shard2
argument_list|)
argument_list|,
literal|"QTime"
argument_list|,
literal|"ElapsedTime"
argument_list|,
literal|"RequestPurpose"
argument_list|,
literal|"NumFound"
argument_list|,
literal|"Response"
argument_list|)
expr_stmt|;
name|assertElementsPresent
argument_list|(
call|(
name|NamedList
argument_list|<
name|String
argument_list|>
call|)
argument_list|(
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|track
operator|.
name|get
argument_list|(
literal|"GET_FIELDS"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|shard1
argument_list|)
argument_list|,
literal|"QTime"
argument_list|,
literal|"ElapsedTime"
argument_list|,
literal|"RequestPurpose"
argument_list|,
literal|"NumFound"
argument_list|,
literal|"Response"
argument_list|)
expr_stmt|;
name|assertElementsPresent
argument_list|(
call|(
name|NamedList
argument_list|<
name|String
argument_list|>
call|)
argument_list|(
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|track
operator|.
name|get
argument_list|(
literal|"GET_FIELDS"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|shard2
argument_list|)
argument_list|,
literal|"QTime"
argument_list|,
literal|"ElapsedTime"
argument_list|,
literal|"RequestPurpose"
argument_list|,
literal|"NumFound"
argument_list|,
literal|"Response"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"omitHeader"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|response
operator|=
name|collection1
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"QTime is not included in the response when omitHeader is set to true"
argument_list|,
operator|(
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|response
operator|.
name|getDebugMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"track"
argument_list|)
operator|)
operator|.
name|findRecursive
argument_list|(
literal|"EXECUTE_QUERY"
argument_list|,
name|shard1
argument_list|,
literal|"QTime"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"QTime is not included in the response when omitHeader is set to true"
argument_list|,
operator|(
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|response
operator|.
name|getDebugMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"track"
argument_list|)
operator|)
operator|.
name|findRecursive
argument_list|(
literal|"GET_FIELDS"
argument_list|,
name|shard2
argument_list|,
literal|"QTime"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|setQuery
argument_list|(
literal|"id:1"
argument_list|)
expr_stmt|;
name|response
operator|=
name|collection1
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|track
operator|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|response
operator|.
name|getDebugMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"track"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
operator|(
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|track
operator|.
name|get
argument_list|(
literal|"EXECUTE_QUERY"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
name|shard1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
operator|(
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|track
operator|.
name|get
argument_list|(
literal|"EXECUTE_QUERY"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
name|shard2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
operator|(
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|track
operator|.
name|get
argument_list|(
literal|"GET_FIELDS"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
name|shard1
argument_list|)
argument_list|)
expr_stmt|;
comment|// This test is invalid, as GET_FIELDS should not be executed in shard 2
name|assertNull
argument_list|(
operator|(
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|track
operator|.
name|get
argument_list|(
literal|"GET_FIELDS"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
name|shard2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|NUM_ITERS
init|=
name|atLeast
argument_list|(
literal|50
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_ITERS
condition|;
name|i
operator|++
control|)
block|{
name|SolrClient
name|client
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|collection1
else|:
name|collection2
decl_stmt|;
name|SolrQuery
name|q
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|q
operator|.
name|set
argument_list|(
literal|"distrib"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setFields
argument_list|(
literal|"id"
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|boolean
name|shard1Results
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|boolean
name|shard2Results
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|String
name|qs
init|=
literal|"_query_with_no_results_"
decl_stmt|;
if|if
condition|(
name|shard1Results
condition|)
block|{
name|qs
operator|+=
literal|" OR batman"
expr_stmt|;
block|}
if|if
condition|(
name|shard2Results
condition|)
block|{
name|qs
operator|+=
literal|" OR superman"
expr_stmt|;
block|}
name|q
operator|.
name|setQuery
argument_list|(
name|qs
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|shards
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|shard1
argument_list|,
name|shard2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|shards
operator|.
name|remove
argument_list|(
name|shard1
argument_list|)
expr_stmt|;
name|shard1Results
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|shards
operator|.
name|remove
argument_list|(
name|shard2
argument_list|)
expr_stmt|;
name|shard2Results
operator|=
literal|false
expr_stmt|;
block|}
name|q
operator|.
name|set
argument_list|(
literal|"shards"
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|shards
argument_list|,
literal|","
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|debug
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|boolean
name|all
init|=
literal|false
decl_stmt|;
specifier|final
name|boolean
name|timing
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|query
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|results
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|track
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|timing
condition|)
block|{
name|debug
operator|.
name|add
argument_list|(
literal|"timing"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|query
condition|)
block|{
name|debug
operator|.
name|add
argument_list|(
literal|"query"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|results
condition|)
block|{
name|debug
operator|.
name|add
argument_list|(
literal|"results"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|track
condition|)
block|{
name|debug
operator|.
name|add
argument_list|(
literal|"track"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|debug
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|debug
operator|.
name|add
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|all
operator|=
literal|true
expr_stmt|;
block|}
name|q
operator|.
name|set
argument_list|(
literal|"debug"
argument_list|,
operator|(
name|String
index|[]
operator|)
name|debug
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|debug
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|QueryResponse
name|r
init|=
name|client
operator|.
name|query
argument_list|(
name|q
argument_list|)
decl_stmt|;
try|try
block|{
name|assertDebug
argument_list|(
name|r
argument_list|,
name|all
operator|||
name|track
argument_list|,
literal|"track"
argument_list|)
expr_stmt|;
name|assertDebug
argument_list|(
name|r
argument_list|,
name|all
operator|||
name|query
argument_list|,
literal|"rawquerystring"
argument_list|)
expr_stmt|;
name|assertDebug
argument_list|(
name|r
argument_list|,
name|all
operator|||
name|query
argument_list|,
literal|"querystring"
argument_list|)
expr_stmt|;
name|assertDebug
argument_list|(
name|r
argument_list|,
name|all
operator|||
name|query
argument_list|,
literal|"parsedquery"
argument_list|)
expr_stmt|;
name|assertDebug
argument_list|(
name|r
argument_list|,
name|all
operator|||
name|query
argument_list|,
literal|"parsedquery_toString"
argument_list|)
expr_stmt|;
name|assertDebug
argument_list|(
name|r
argument_list|,
name|all
operator|||
name|query
argument_list|,
literal|"QParser"
argument_list|)
expr_stmt|;
name|assertDebug
argument_list|(
name|r
argument_list|,
name|all
operator|||
name|results
argument_list|,
literal|"explain"
argument_list|)
expr_stmt|;
name|assertDebug
argument_list|(
name|r
argument_list|,
name|all
operator|||
name|timing
argument_list|,
literal|"timing"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|q
operator|.
name|toString
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Asserts that the specified debug result key does or does not exist in the     * response based on the expected boolean.    */
DECL|method|assertDebug
specifier|private
name|void
name|assertDebug
parameter_list|(
name|QueryResponse
name|response
parameter_list|,
name|boolean
name|expected
parameter_list|,
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|expected
condition|)
block|{
name|assertInDebug
argument_list|(
name|response
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotInDebug
argument_list|(
name|response
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Asserts that the specified debug result key does exist in the response and is non-null    */
DECL|method|assertInDebug
specifier|private
name|void
name|assertInDebug
parameter_list|(
name|QueryResponse
name|response
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"debug map is null"
argument_list|,
name|response
operator|.
name|getDebugMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"debug map has null for : "
operator|+
name|key
argument_list|,
name|response
operator|.
name|getDebugMap
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Asserts that the specified debug result key does NOT exist in the response    */
DECL|method|assertNotInDebug
specifier|private
name|void
name|assertNotInDebug
parameter_list|(
name|QueryResponse
name|response
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"debug map is null"
argument_list|,
name|response
operator|.
name|getDebugMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"debug map contains: "
operator|+
name|key
argument_list|,
name|response
operator|.
name|getDebugMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDebugSections
specifier|public
name|void
name|testDebugSections
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setQuery
argument_list|(
literal|"text:_query_with_no_results_"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"distrib"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFields
argument_list|(
literal|"id"
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"shards"
argument_list|,
name|shard1
operator|+
literal|","
operator|+
name|shard2
argument_list|)
expr_stmt|;
name|verifyDebugSections
argument_list|(
name|query
argument_list|,
name|collection1
argument_list|)
expr_stmt|;
name|query
operator|.
name|setQuery
argument_list|(
literal|"id:1 OR text:_query_with_no_results_ OR id:[0 TO 300]"
argument_list|)
expr_stmt|;
name|verifyDebugSections
argument_list|(
name|query
argument_list|,
name|collection1
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyDebugSections
specifier|private
name|void
name|verifyDebugSections
parameter_list|(
name|SolrQuery
name|query
parameter_list|,
name|SolrClient
name|client
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|query
operator|.
name|set
argument_list|(
literal|"debugQuery"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|query
operator|.
name|remove
argument_list|(
literal|"debug"
argument_list|)
expr_stmt|;
name|QueryResponse
name|response
init|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|response
operator|.
name|getDebugMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertInDebug
argument_list|(
name|response
argument_list|,
literal|"track"
argument_list|)
expr_stmt|;
name|assertInDebug
argument_list|(
name|response
argument_list|,
literal|"rawquerystring"
argument_list|)
expr_stmt|;
name|assertInDebug
argument_list|(
name|response
argument_list|,
literal|"querystring"
argument_list|)
expr_stmt|;
name|assertInDebug
argument_list|(
name|response
argument_list|,
literal|"parsedquery"
argument_list|)
expr_stmt|;
name|assertInDebug
argument_list|(
name|response
argument_list|,
literal|"parsedquery_toString"
argument_list|)
expr_stmt|;
name|assertInDebug
argument_list|(
name|response
argument_list|,
literal|"QParser"
argument_list|)
expr_stmt|;
name|assertInDebug
argument_list|(
name|response
argument_list|,
literal|"explain"
argument_list|)
expr_stmt|;
name|assertInDebug
argument_list|(
name|response
argument_list|,
literal|"timing"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"debug"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|query
operator|.
name|remove
argument_list|(
literal|"debugQuery"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|response
operator|.
name|getDebugMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertInDebug
argument_list|(
name|response
argument_list|,
literal|"track"
argument_list|)
expr_stmt|;
name|assertInDebug
argument_list|(
name|response
argument_list|,
literal|"rawquerystring"
argument_list|)
expr_stmt|;
name|assertInDebug
argument_list|(
name|response
argument_list|,
literal|"querystring"
argument_list|)
expr_stmt|;
name|assertInDebug
argument_list|(
name|response
argument_list|,
literal|"parsedquery"
argument_list|)
expr_stmt|;
name|assertInDebug
argument_list|(
name|response
argument_list|,
literal|"parsedquery_toString"
argument_list|)
expr_stmt|;
name|assertInDebug
argument_list|(
name|response
argument_list|,
literal|"QParser"
argument_list|)
expr_stmt|;
name|assertInDebug
argument_list|(
name|response
argument_list|,
literal|"explain"
argument_list|)
expr_stmt|;
name|assertInDebug
argument_list|(
name|response
argument_list|,
literal|"timing"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"debug"
argument_list|,
literal|"track"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|response
operator|.
name|getDebugMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertInDebug
argument_list|(
name|response
argument_list|,
literal|"track"
argument_list|)
expr_stmt|;
name|assertNotInDebug
argument_list|(
name|response
argument_list|,
literal|"rawquerystring"
argument_list|)
expr_stmt|;
name|assertNotInDebug
argument_list|(
name|response
argument_list|,
literal|"querystring"
argument_list|)
expr_stmt|;
name|assertNotInDebug
argument_list|(
name|response
argument_list|,
literal|"parsedquery"
argument_list|)
expr_stmt|;
name|assertNotInDebug
argument_list|(
name|response
argument_list|,
literal|"parsedquery_toString"
argument_list|)
expr_stmt|;
name|assertNotInDebug
argument_list|(
name|response
argument_list|,
literal|"QParser"
argument_list|)
expr_stmt|;
name|assertNotInDebug
argument_list|(
name|response
argument_list|,
literal|"explain"
argument_list|)
expr_stmt|;
name|assertNotInDebug
argument_list|(
name|response
argument_list|,
literal|"timing"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"debug"
argument_list|,
literal|"query"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|response
operator|.
name|getDebugMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotInDebug
argument_list|(
name|response
argument_list|,
literal|"track"
argument_list|)
expr_stmt|;
name|assertInDebug
argument_list|(
name|response
argument_list|,
literal|"rawquerystring"
argument_list|)
expr_stmt|;
name|assertInDebug
argument_list|(
name|response
argument_list|,
literal|"querystring"
argument_list|)
expr_stmt|;
name|assertInDebug
argument_list|(
name|response
argument_list|,
literal|"parsedquery"
argument_list|)
expr_stmt|;
name|assertInDebug
argument_list|(
name|response
argument_list|,
literal|"parsedquery_toString"
argument_list|)
expr_stmt|;
name|assertInDebug
argument_list|(
name|response
argument_list|,
literal|"QParser"
argument_list|)
expr_stmt|;
name|assertNotInDebug
argument_list|(
name|response
argument_list|,
literal|"explain"
argument_list|)
expr_stmt|;
name|assertNotInDebug
argument_list|(
name|response
argument_list|,
literal|"timing"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"debug"
argument_list|,
literal|"results"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|response
operator|.
name|getDebugMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotInDebug
argument_list|(
name|response
argument_list|,
literal|"track"
argument_list|)
expr_stmt|;
name|assertNotInDebug
argument_list|(
name|response
argument_list|,
literal|"rawquerystring"
argument_list|)
expr_stmt|;
name|assertNotInDebug
argument_list|(
name|response
argument_list|,
literal|"querystring"
argument_list|)
expr_stmt|;
name|assertNotInDebug
argument_list|(
name|response
argument_list|,
literal|"parsedquery"
argument_list|)
expr_stmt|;
name|assertNotInDebug
argument_list|(
name|response
argument_list|,
literal|"parsedquery_toString"
argument_list|)
expr_stmt|;
name|assertNotInDebug
argument_list|(
name|response
argument_list|,
literal|"QParser"
argument_list|)
expr_stmt|;
name|assertInDebug
argument_list|(
name|response
argument_list|,
literal|"explain"
argument_list|)
expr_stmt|;
name|assertNotInDebug
argument_list|(
name|response
argument_list|,
literal|"timing"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"debug"
argument_list|,
literal|"timing"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|response
operator|.
name|getDebugMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotInDebug
argument_list|(
name|response
argument_list|,
literal|"track"
argument_list|)
expr_stmt|;
name|assertNotInDebug
argument_list|(
name|response
argument_list|,
literal|"rawquerystring"
argument_list|)
expr_stmt|;
name|assertNotInDebug
argument_list|(
name|response
argument_list|,
literal|"querystring"
argument_list|)
expr_stmt|;
name|assertNotInDebug
argument_list|(
name|response
argument_list|,
literal|"parsedquery"
argument_list|)
expr_stmt|;
name|assertNotInDebug
argument_list|(
name|response
argument_list|,
literal|"parsedquery_toString"
argument_list|)
expr_stmt|;
name|assertNotInDebug
argument_list|(
name|response
argument_list|,
literal|"QParser"
argument_list|)
expr_stmt|;
name|assertNotInDebug
argument_list|(
name|response
argument_list|,
literal|"explain"
argument_list|)
expr_stmt|;
name|assertInDebug
argument_list|(
name|response
argument_list|,
literal|"timing"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"debug"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|response
operator|.
name|getDebugMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCompareWithNonDistributedRequest
specifier|public
name|void
name|testCompareWithNonDistributedRequest
parameter_list|()
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setQuery
argument_list|(
literal|"id:1 OR id:2"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFilterQueries
argument_list|(
literal|"id:[0 TO 10]"
argument_list|,
literal|"id:[0 TO 5]"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setRows
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|query
operator|.
name|setSort
argument_list|(
literal|"id"
argument_list|,
name|SolrQuery
operator|.
name|ORDER
operator|.
name|asc
argument_list|)
expr_stmt|;
comment|// thus only return id:1 since rows 1
name|query
operator|.
name|set
argument_list|(
literal|"debug"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"distrib"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFields
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// can affect rb.onePassDistributedQuery
name|query
operator|.
name|addField
argument_list|(
literal|"text"
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|set
argument_list|(
name|ShardParams
operator|.
name|DISTRIB_SINGLE_PASS
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"shards"
argument_list|,
name|shard1
operator|+
literal|","
operator|+
name|shard2
argument_list|)
expr_stmt|;
name|QueryResponse
name|distribResponse
init|=
name|collection1
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
comment|// same query but not distributed
name|query
operator|.
name|set
argument_list|(
literal|"distrib"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|query
operator|.
name|remove
argument_list|(
literal|"shards"
argument_list|)
expr_stmt|;
name|QueryResponse
name|nonDistribResponse
init|=
name|collection1
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|distribResponse
operator|.
name|getDebugMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"track"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|nonDistribResponse
operator|.
name|getDebugMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"track"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|distribResponse
operator|.
name|getDebugMap
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|nonDistribResponse
operator|.
name|getDebugMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSectionEquals
argument_list|(
name|distribResponse
argument_list|,
name|nonDistribResponse
argument_list|,
literal|"explain"
argument_list|)
expr_stmt|;
name|assertSectionEquals
argument_list|(
name|distribResponse
argument_list|,
name|nonDistribResponse
argument_list|,
literal|"rawquerystring"
argument_list|)
expr_stmt|;
name|assertSectionEquals
argument_list|(
name|distribResponse
argument_list|,
name|nonDistribResponse
argument_list|,
literal|"querystring"
argument_list|)
expr_stmt|;
name|assertSectionEquals
argument_list|(
name|distribResponse
argument_list|,
name|nonDistribResponse
argument_list|,
literal|"parsedquery"
argument_list|)
expr_stmt|;
name|assertSectionEquals
argument_list|(
name|distribResponse
argument_list|,
name|nonDistribResponse
argument_list|,
literal|"parsedquery_toString"
argument_list|)
expr_stmt|;
name|assertSectionEquals
argument_list|(
name|distribResponse
argument_list|,
name|nonDistribResponse
argument_list|,
literal|"QParser"
argument_list|)
expr_stmt|;
name|assertSectionEquals
argument_list|(
name|distribResponse
argument_list|,
name|nonDistribResponse
argument_list|,
literal|"filter_queries"
argument_list|)
expr_stmt|;
name|assertSectionEquals
argument_list|(
name|distribResponse
argument_list|,
name|nonDistribResponse
argument_list|,
literal|"parsed_filter_queries"
argument_list|)
expr_stmt|;
comment|// timing should have the same sections:
name|assertSameKeys
argument_list|(
operator|(
name|NamedList
argument_list|<
name|?
argument_list|>
operator|)
name|nonDistribResponse
operator|.
name|getDebugMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"timing"
argument_list|)
argument_list|,
operator|(
name|NamedList
argument_list|<
name|?
argument_list|>
operator|)
name|distribResponse
operator|.
name|getDebugMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"timing"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTolerantSearch
specifier|public
name|void
name|testTolerantSearch
parameter_list|()
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|String
name|badShard
init|=
literal|"[ff01::0083]:3334"
decl_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"debug"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"distrib"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFields
argument_list|(
literal|"id"
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"shards"
argument_list|,
name|shard1
operator|+
literal|","
operator|+
name|shard2
operator|+
literal|","
operator|+
name|badShard
argument_list|)
expr_stmt|;
try|try
block|{
name|ignoreException
argument_list|(
literal|"Server refused connection"
argument_list|)
expr_stmt|;
comment|// verify that the request would fail if shards.tolerant=false
name|collection1
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expecting exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
comment|//expected
block|}
name|query
operator|.
name|set
argument_list|(
name|ShardParams
operator|.
name|SHARDS_TOLERANT
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|QueryResponse
name|response
init|=
name|collection1
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|(
name|Boolean
operator|)
name|response
operator|.
name|getResponseHeader
argument_list|()
operator|.
name|get
argument_list|(
name|SolrQueryResponse
operator|.
name|RESPONSE_HEADER_PARTIAL_RESULTS_KEY
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|NamedList
argument_list|<
name|String
argument_list|>
name|badShardTrack
init|=
call|(
name|NamedList
argument_list|<
name|String
argument_list|>
call|)
argument_list|(
call|(
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|String
argument_list|>
argument_list|>
call|)
argument_list|(
operator|(
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
operator|)
name|response
operator|.
name|getDebugMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"track"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"EXECUTE_QUERY"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|badShard
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected response size for shard"
argument_list|,
literal|1
argument_list|,
name|badShardTrack
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|exception
init|=
name|badShardTrack
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected key 'Exception' not found"
argument_list|,
literal|"Exception"
argument_list|,
name|exception
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Exception message should not be null"
argument_list|,
name|exception
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|unIgnoreException
argument_list|(
literal|"Server refused connection"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Compares the same section on the two query responses    */
DECL|method|assertSectionEquals
specifier|private
name|void
name|assertSectionEquals
parameter_list|(
name|QueryResponse
name|distrib
parameter_list|,
name|QueryResponse
name|nonDistrib
parameter_list|,
name|String
name|section
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|section
operator|+
literal|" debug should be equal"
argument_list|,
name|distrib
operator|.
name|getDebugMap
argument_list|()
operator|.
name|get
argument_list|(
name|section
argument_list|)
argument_list|,
name|nonDistrib
operator|.
name|getDebugMap
argument_list|()
operator|.
name|get
argument_list|(
name|section
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|assertSameKeys
specifier|private
name|void
name|assertSameKeys
parameter_list|(
name|NamedList
name|object
parameter_list|,
name|NamedList
name|object2
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iteratorObj2
init|=
operator|(
operator|(
name|NamedList
operator|)
name|object2
operator|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|object
control|)
block|{
name|assertTrue
argument_list|(
name|iteratorObj2
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry2
init|=
name|iteratorObj2
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry2
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|NamedList
condition|)
block|{
name|assertTrue
argument_list|(
name|entry2
operator|.
name|getValue
argument_list|()
operator|instanceof
name|NamedList
argument_list|)
expr_stmt|;
name|assertSameKeys
argument_list|(
operator|(
name|NamedList
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
operator|(
name|NamedList
operator|)
name|entry2
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertFalse
argument_list|(
name|iteratorObj2
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertElementsPresent
specifier|private
name|void
name|assertElementsPresent
parameter_list|(
name|NamedList
argument_list|<
name|String
argument_list|>
name|namedList
parameter_list|,
name|String
modifier|...
name|elements
parameter_list|)
block|{
for|for
control|(
name|String
name|element
range|:
name|elements
control|)
block|{
name|String
name|value
init|=
name|namedList
operator|.
name|get
argument_list|(
name|element
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Expected element '"
operator|+
name|element
operator|+
literal|"' but was not found"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected element '"
operator|+
name|element
operator|+
literal|"' but was empty"
argument_list|,
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
