begin_unit
begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|valuesource
operator|.
name|QueryValueSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|MapSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|StatsParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Base64
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|StatsField
operator|.
name|Stat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|StatsField
operator|.
name|HllOptions
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|LocalSolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|AbstractSolrTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math3
operator|.
name|util
operator|.
name|Combinations
import|;
end_import
begin_import
import|import
name|com
operator|.
name|tdunning
operator|.
name|math
operator|.
name|stats
operator|.
name|AVLTreeDigest
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Hashing
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|HashFunction
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|hll
operator|.
name|HLL
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_comment
comment|/**  * Statistics Component Test  */
end_comment
begin_class
DECL|class|StatsComponentTest
specifier|public
class|class
name|StatsComponentTest
extends|extends
name|AbstractSolrTestCase
block|{
DECL|field|XPRE
specifier|final
specifier|static
name|String
name|XPRE
init|=
literal|"/response/lst[@name='stats']/"
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema11.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|lrf
operator|=
name|h
operator|.
name|getRequestFactory
argument_list|(
literal|"standard"
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
DECL|method|testStats
specifier|public
name|void
name|testStats
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|f
range|:
operator|new
name|String
index|[]
block|{
literal|"stats_i"
block|,
literal|"stats_l"
block|,
literal|"stats_f"
block|,
literal|"stats_d"
block|,
literal|"stats_ti"
block|,
literal|"stats_tl"
block|,
literal|"stats_tf"
block|,
literal|"stats_td"
block|,
literal|"stats_ti_dv"
block|,
literal|"stats_tl_dv"
block|,
literal|"stats_tf_dv"
block|,
literal|"stats_td_dv"
block|,
literal|"stats_ti_ni_dv"
block|,
literal|"stats_tl_ni_dv"
block|,
literal|"stats_tf_ni_dv"
block|,
literal|"stats_td_ni_dv"
block|}
control|)
block|{
comment|// all of our checks should work with all of these params
comment|// ie: with or w/o these excluded filters, results should be the same.
name|SolrParams
index|[]
name|baseParamsSet
init|=
operator|new
name|SolrParams
index|[]
block|{
comment|// NOTE: doTestFieldStatisticsResult needs the full list of possible tags to exclude
name|params
argument_list|(
literal|"stats.field"
argument_list|,
name|f
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|)
block|,
name|params
argument_list|(
literal|"stats.field"
argument_list|,
literal|"{!ex=fq1,fq2}"
operator|+
name|f
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=fq1}-id:[0 TO 2]"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=fq2}-id:[2 TO 1000]"
argument_list|)
block|,
name|params
argument_list|(
literal|"stats.field"
argument_list|,
literal|"{!ex=fq1}"
operator|+
name|f
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=fq1}id:1"
argument_list|)
block|}
decl_stmt|;
name|doTestFieldStatisticsResult
argument_list|(
name|f
argument_list|,
name|baseParamsSet
argument_list|)
expr_stmt|;
name|doTestFieldStatisticsMissingResult
argument_list|(
name|f
argument_list|,
name|baseParamsSet
argument_list|)
expr_stmt|;
name|doTestFacetStatisticsResult
argument_list|(
name|f
argument_list|,
name|baseParamsSet
argument_list|)
expr_stmt|;
name|doTestFacetStatisticsMissingResult
argument_list|(
name|f
argument_list|,
name|baseParamsSet
argument_list|)
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|f
range|:
operator|new
name|String
index|[]
block|{
literal|"stats_ii"
block|,
literal|"stats_tis"
block|,
literal|"stats_tfs"
block|,
literal|"stats_tls"
block|,
literal|"stats_tds"
block|,
comment|// trie fields
literal|"stats_tis_dv"
block|,
literal|"stats_tfs_dv"
block|,
literal|"stats_tls_dv"
block|,
literal|"stats_tds_dv"
block|,
comment|// Doc Values
literal|"stats_tis_ni_dv"
block|,
literal|"stats_tfs_ni_dv"
block|,
literal|"stats_tls_ni_dv"
block|,
literal|"stats_tds_ni_dv"
comment|// Doc Values Not indexed
block|}
control|)
block|{
name|doTestMVFieldStatisticsResult
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doTestFieldStatisticsResult
specifier|public
name|void
name|doTestFieldStatisticsResult
parameter_list|(
name|String
name|f
parameter_list|,
name|SolrParams
index|[]
name|baseParamsSet
parameter_list|)
throws|throws
name|Exception
block|{
comment|// used when doing key overrides in conjunction with the baseParamsSet
comment|//
comment|// even when these aren't included in the request, using them helps us
comment|// test the code path of an exclusion that refers to an fq that doesn't exist
specifier|final
name|String
name|all_possible_ex
init|=
literal|"fq1,fq2"
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|f
argument_list|,
literal|"-10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
name|f
argument_list|,
literal|"-20"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
name|f
argument_list|,
literal|"-30"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
name|f
argument_list|,
literal|"-40"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|fpre
init|=
name|XPRE
operator|+
literal|"lst[@name='stats_fields']/lst[@name='"
operator|+
name|f
operator|+
literal|"']/"
decl_stmt|;
specifier|final
name|String
name|key
init|=
literal|"key_key"
decl_stmt|;
specifier|final
name|String
name|kpre
init|=
name|XPRE
operator|+
literal|"lst[@name='stats_fields']/lst[@name='"
operator|+
name|key
operator|+
literal|"']/"
decl_stmt|;
comment|// status should be the same regardless of baseParams
for|for
control|(
name|SolrParams
name|baseParams
range|:
name|baseParamsSet
control|)
block|{
for|for
control|(
name|String
name|ct
range|:
operator|new
name|String
index|[]
block|{
literal|"stats.calcdistinct"
block|,
literal|"f."
operator|+
name|f
operator|+
literal|".stats.calcdistinct"
block|}
control|)
block|{
name|assertQ
argument_list|(
literal|"test statistics values using: "
operator|+
name|ct
argument_list|,
name|req
argument_list|(
name|baseParams
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
name|ct
argument_list|,
literal|"true"
argument_list|)
argument_list|,
name|fpre
operator|+
literal|"double[@name='min'][.='-40.0']"
argument_list|,
name|fpre
operator|+
literal|"double[@name='max'][.='-10.0']"
argument_list|,
name|fpre
operator|+
literal|"double[@name='sum'][.='-100.0']"
argument_list|,
name|fpre
operator|+
literal|"long[@name='count'][.='4']"
argument_list|,
name|fpre
operator|+
literal|"long[@name='missing'][.='0']"
argument_list|,
name|fpre
operator|+
literal|"long[@name='countDistinct'][.='4']"
argument_list|,
literal|"count("
operator|+
name|fpre
operator|+
literal|"arr[@name='distinctValues']/*)=4"
argument_list|,
name|fpre
operator|+
literal|"double[@name='sumOfSquares'][.='3000.0']"
argument_list|,
name|fpre
operator|+
literal|"double[@name='mean'][.='-25.0']"
argument_list|,
name|fpre
operator|+
literal|"double[@name='stddev'][.='12.909944487358056']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test statistics w/fq using: "
operator|+
name|ct
argument_list|,
name|req
argument_list|(
name|baseParams
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
literal|"-id:4"
argument_list|,
name|ct
argument_list|,
literal|"true"
argument_list|)
argument_list|,
name|fpre
operator|+
literal|"double[@name='min'][.='-30.0']"
argument_list|,
name|fpre
operator|+
literal|"double[@name='max'][.='-10.0']"
argument_list|,
name|fpre
operator|+
literal|"double[@name='sum'][.='-60.0']"
argument_list|,
name|fpre
operator|+
literal|"long[@name='count'][.='3']"
argument_list|,
name|fpre
operator|+
literal|"long[@name='missing'][.='0']"
argument_list|,
name|fpre
operator|+
literal|"long[@name='countDistinct'][.='3']"
argument_list|,
literal|"count("
operator|+
name|fpre
operator|+
literal|"arr[@name='distinctValues']/*)=3"
argument_list|,
name|fpre
operator|+
literal|"double[@name='sumOfSquares'][.='1400.0']"
argument_list|,
name|fpre
operator|+
literal|"double[@name='mean'][.='-20.0']"
argument_list|,
name|fpre
operator|+
literal|"double[@name='stddev'][.='10.0']"
argument_list|)
expr_stmt|;
comment|// now do both in a single query
name|assertQ
argument_list|(
literal|"test statistics w& w/fq via key override using: "
operator|+
name|ct
argument_list|,
name|req
argument_list|(
name|baseParams
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
name|ct
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=key_ex_tag}-id:4"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key="
operator|+
name|key
operator|+
literal|" ex=key_ex_tag,"
operator|+
name|all_possible_ex
operator|+
literal|"}"
operator|+
name|f
argument_list|)
comment|// field name key, fq is applied
argument_list|,
name|fpre
operator|+
literal|"double[@name='min'][.='-30.0']"
argument_list|,
name|fpre
operator|+
literal|"double[@name='max'][.='-10.0']"
argument_list|,
name|fpre
operator|+
literal|"double[@name='sum'][.='-60.0']"
argument_list|,
name|fpre
operator|+
literal|"long[@name='count'][.='3']"
argument_list|,
name|fpre
operator|+
literal|"long[@name='missing'][.='0']"
argument_list|,
name|fpre
operator|+
literal|"long[@name='countDistinct'][.='3']"
argument_list|,
literal|"count("
operator|+
name|fpre
operator|+
literal|"arr[@name='distinctValues']/*)=3"
argument_list|,
name|fpre
operator|+
literal|"double[@name='sumOfSquares'][.='1400.0']"
argument_list|,
name|fpre
operator|+
literal|"double[@name='mean'][.='-20.0']"
argument_list|,
name|fpre
operator|+
literal|"double[@name='stddev'][.='10.0']"
comment|// overridden key, fq is excluded
argument_list|,
name|kpre
operator|+
literal|"double[@name='min'][.='-40.0']"
argument_list|,
name|kpre
operator|+
literal|"double[@name='max'][.='-10.0']"
argument_list|,
name|kpre
operator|+
literal|"double[@name='sum'][.='-100.0']"
argument_list|,
name|kpre
operator|+
literal|"long[@name='count'][.='4']"
argument_list|,
name|kpre
operator|+
literal|"long[@name='missing'][.='0']"
argument_list|,
name|kpre
operator|+
literal|"long[@name='countDistinct'][.='4']"
argument_list|,
literal|"count("
operator|+
name|kpre
operator|+
literal|"arr[@name='distinctValues']/*)=4"
argument_list|,
name|kpre
operator|+
literal|"double[@name='sumOfSquares'][.='3000.0']"
argument_list|,
name|kpre
operator|+
literal|"double[@name='mean'][.='-25.0']"
argument_list|,
name|kpre
operator|+
literal|"double[@name='stddev'][.='12.909944487358056']"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// we should be able to compute exact same stats for a field even
comment|// when we specify it using the "field()" function, or use other
comment|// identify equivilent functions
for|for
control|(
name|String
name|param
range|:
operator|new
name|String
index|[]
block|{
comment|// bare
literal|"{!key="
operator|+
name|key
operator|+
literal|" ex=key_ex_tag}"
operator|+
name|f
block|,
literal|"{!key="
operator|+
name|key
operator|+
literal|" ex=key_ex_tag v="
operator|+
name|f
operator|+
literal|"}"
block|,
comment|// field func
literal|"{!lucene key="
operator|+
name|key
operator|+
literal|" ex=key_ex_tag}_val_:\"field("
operator|+
name|f
operator|+
literal|")\""
block|,
literal|"{!func key="
operator|+
name|key
operator|+
literal|" ex=key_ex_tag}field("
operator|+
name|f
operator|+
literal|")"
block|,
literal|"{!type=func key="
operator|+
name|key
operator|+
literal|" ex=key_ex_tag}field("
operator|+
name|f
operator|+
literal|")"
block|,
literal|"{!type=func key="
operator|+
name|key
operator|+
literal|" ex=key_ex_tag v=field("
operator|+
name|f
operator|+
literal|")}"
block|,
literal|"{!type=func key="
operator|+
name|key
operator|+
literal|" ex=key_ex_tag v='field("
operator|+
name|f
operator|+
literal|")'}"
block|,
comment|// identity math functions
literal|"{!type=func key="
operator|+
name|key
operator|+
literal|" ex=key_ex_tag v='sum(0,"
operator|+
name|f
operator|+
literal|")'}"
block|,
literal|"{!type=func key="
operator|+
name|key
operator|+
literal|" ex=key_ex_tag v='product(1,"
operator|+
name|f
operator|+
literal|")'}"
block|,       }
control|)
block|{
name|assertQ
argument_list|(
literal|"test statistics over field specified as a function: "
operator|+
name|param
argument_list|,
comment|// NOTE: baseParams aren't used, we're looking at the function
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=key_ex_tag}-id:4"
argument_list|,
literal|"stats.field"
argument_list|,
name|param
argument_list|)
argument_list|,
name|kpre
operator|+
literal|"double[@name='min'][.='-40.0']"
argument_list|,
name|kpre
operator|+
literal|"double[@name='max'][.='-10.0']"
argument_list|,
name|kpre
operator|+
literal|"double[@name='sum'][.='-100.0']"
argument_list|,
name|kpre
operator|+
literal|"long[@name='count'][.='4']"
argument_list|,
name|kpre
operator|+
literal|"long[@name='missing'][.='0']"
argument_list|,
name|kpre
operator|+
literal|"long[@name='countDistinct'][.='4']"
argument_list|,
literal|"count("
operator|+
name|kpre
operator|+
literal|"arr[@name='distinctValues']/*)=4"
argument_list|,
name|kpre
operator|+
literal|"double[@name='sumOfSquares'][.='3000.0']"
argument_list|,
name|kpre
operator|+
literal|"double[@name='mean'][.='-25.0']"
argument_list|,
name|kpre
operator|+
literal|"double[@name='stddev'][.='12.909944487358056']"
argument_list|)
expr_stmt|;
block|}
comment|// now get stats over a non-trivial function on our (single) field
name|String
name|func
init|=
literal|"product(2, "
operator|+
name|f
operator|+
literal|")"
decl_stmt|;
name|assertQ
argument_list|(
literal|"test function statistics& key override"
argument_list|,
comment|// NOTE: baseParams aren't used, we're looking at the function
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=key_ex_tag}-id:4"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!func key="
operator|+
name|key
operator|+
literal|" ex=key_ex_tag}"
operator|+
name|func
argument_list|)
argument_list|,
name|kpre
operator|+
literal|"double[@name='min'][.='-80.0']"
argument_list|,
name|kpre
operator|+
literal|"double[@name='max'][.='-20.0']"
argument_list|,
name|kpre
operator|+
literal|"double[@name='sum'][.='-200.0']"
argument_list|,
name|kpre
operator|+
literal|"long[@name='count'][.='4']"
argument_list|,
name|kpre
operator|+
literal|"long[@name='missing'][.='0']"
argument_list|,
name|kpre
operator|+
literal|"long[@name='countDistinct'][.='4']"
argument_list|,
literal|"count("
operator|+
name|kpre
operator|+
literal|"arr[@name='distinctValues']/*)=4"
argument_list|,
name|kpre
operator|+
literal|"double[@name='sumOfSquares'][.='12000.0']"
argument_list|,
name|kpre
operator|+
literal|"double[@name='mean'][.='-50.0']"
argument_list|,
name|kpre
operator|+
literal|"double[@name='stddev'][.='25.81988897471611']"
argument_list|)
expr_stmt|;
comment|// simple cardinality over a numeric field
name|assertQ
argument_list|(
literal|"test function statistics& key override"
argument_list|,
comment|// NOTE: baseParams aren't used, we're looking only at the cardinality
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=key_ex_tag}-id:4"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key="
operator|+
name|key
operator|+
literal|" cardinality=true}"
operator|+
name|f
argument_list|)
argument_list|,
name|kpre
operator|+
literal|"long[@name='cardinality'][.='3']"
argument_list|,
literal|"count("
operator|+
name|kpre
operator|+
literal|"/*)=1"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestMVFieldStatisticsResult
specifier|public
name|void
name|doTestMVFieldStatisticsResult
parameter_list|(
name|String
name|f
parameter_list|)
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|f
argument_list|,
literal|"-10"
argument_list|,
name|f
argument_list|,
literal|"-100"
argument_list|,
literal|"active_s"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
name|f
argument_list|,
literal|"-20"
argument_list|,
name|f
argument_list|,
literal|"200"
argument_list|,
literal|"active_s"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
name|f
argument_list|,
literal|"-30"
argument_list|,
name|f
argument_list|,
literal|"-1"
argument_list|,
literal|"active_s"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
name|f
argument_list|,
literal|"-40"
argument_list|,
name|f
argument_list|,
literal|"10"
argument_list|,
literal|"active_s"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"active_s"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"active_s"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"active_s"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// with or w/o these excluded filters, results should be the same
for|for
control|(
name|SolrParams
name|baseParams
range|:
operator|new
name|SolrParams
index|[]
block|{
name|params
argument_list|(
literal|"stats.field"
argument_list|,
name|f
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|)
block|,
name|params
argument_list|(
literal|"stats.field"
argument_list|,
literal|"{!ex=fq1}"
operator|+
name|f
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=fq1}id:1"
argument_list|)
block|,
name|params
argument_list|(
literal|"stats.field"
argument_list|,
literal|"{!ex=fq1,fq2}"
operator|+
name|f
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=fq1}-id:[0 TO 2]"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=fq2}-id:[2 TO 1000]"
argument_list|)
block|}
control|)
block|{
name|assertQ
argument_list|(
literal|"test statistics values"
argument_list|,
name|req
argument_list|(
name|baseParams
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"//double[@name='min'][.='-100.0']"
argument_list|,
literal|"//double[@name='max'][.='200.0']"
argument_list|,
literal|"//double[@name='sum'][.='9.0']"
argument_list|,
literal|"//long[@name='count'][.='8']"
argument_list|,
literal|"//long[@name='missing'][.='3']"
argument_list|,
literal|"//long[@name='countDistinct'][.='8']"
argument_list|,
literal|"count(//arr[@name='distinctValues']/*)=8"
argument_list|,
literal|"//double[@name='sumOfSquares'][.='53101.0']"
argument_list|,
literal|"//double[@name='mean'][.='1.125']"
argument_list|,
literal|"//double[@name='stddev'][.='87.08852228787508']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test statistics values w/fq"
argument_list|,
name|req
argument_list|(
name|baseParams
argument_list|,
literal|"fq"
argument_list|,
literal|"-id:1"
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"//double[@name='min'][.='-40.0']"
argument_list|,
literal|"//double[@name='max'][.='200.0']"
argument_list|,
literal|"//double[@name='sum'][.='119.0']"
argument_list|,
literal|"//long[@name='count'][.='6']"
argument_list|,
literal|"//long[@name='missing'][.='3']"
argument_list|,
literal|"//long[@name='countDistinct'][.='6']"
argument_list|,
literal|"count(//arr[@name='distinctValues']/*)=6"
argument_list|,
literal|"//double[@name='sumOfSquares'][.='43001.0']"
argument_list|,
literal|"//double[@name='mean'][.='19.833333333333332']"
argument_list|,
literal|"//double[@name='stddev'][.='90.15634568163611']"
argument_list|)
expr_stmt|;
comment|// TODO: why are there 3 identical requests below?
name|assertQ
argument_list|(
literal|"test statistics values"
argument_list|,
name|req
argument_list|(
name|baseParams
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.facet"
argument_list|,
literal|"active_s"
argument_list|)
argument_list|,
literal|"//double[@name='min'][.='-100.0']"
argument_list|,
literal|"//double[@name='max'][.='200.0']"
argument_list|,
literal|"//double[@name='sum'][.='9.0']"
argument_list|,
literal|"//long[@name='count'][.='8']"
argument_list|,
literal|"//long[@name='missing'][.='3']"
argument_list|,
literal|"//long[@name='countDistinct'][.='8']"
argument_list|,
literal|"count(//lst[@name='"
operator|+
name|f
operator|+
literal|"']/arr[@name='distinctValues']/*)=8"
argument_list|,
literal|"//double[@name='sumOfSquares'][.='53101.0']"
argument_list|,
literal|"//double[@name='mean'][.='1.125']"
argument_list|,
literal|"//double[@name='stddev'][.='87.08852228787508']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test value for active_s=true"
argument_list|,
name|req
argument_list|(
name|baseParams
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.facet"
argument_list|,
literal|"active_s"
argument_list|)
argument_list|,
literal|"//lst[@name='true']/double[@name='min'][.='-100.0']"
argument_list|,
literal|"//lst[@name='true']/double[@name='max'][.='200.0']"
argument_list|,
literal|"//lst[@name='true']/double[@name='sum'][.='70.0']"
argument_list|,
literal|"//lst[@name='true']/long[@name='count'][.='4']"
argument_list|,
literal|"//lst[@name='true']/long[@name='missing'][.='1']"
argument_list|,
literal|"//lst[@name='true']//long[@name='countDistinct'][.='4']"
argument_list|,
literal|"count(//lst[@name='true']/arr[@name='distinctValues']/*)=4"
argument_list|,
literal|"//lst[@name='true']/double[@name='sumOfSquares'][.='50500.0']"
argument_list|,
literal|"//lst[@name='true']/double[@name='mean'][.='17.5']"
argument_list|,
literal|"//lst[@name='true']/double[@name='stddev'][.='128.16005617976296']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test value for active_s=false"
argument_list|,
name|req
argument_list|(
name|baseParams
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.facet"
argument_list|,
literal|"active_s"
argument_list|)
argument_list|,
literal|"//lst[@name='false']/double[@name='min'][.='-40.0']"
argument_list|,
literal|"//lst[@name='false']/double[@name='max'][.='10.0']"
argument_list|,
literal|"//lst[@name='false']/double[@name='sum'][.='-61.0']"
argument_list|,
literal|"//lst[@name='false']/long[@name='count'][.='4']"
argument_list|,
literal|"//lst[@name='false']/long[@name='missing'][.='2']"
argument_list|,
literal|"//lst[@name='true']//long[@name='countDistinct'][.='4']"
argument_list|,
literal|"count(//lst[@name='true']/arr[@name='distinctValues']/*)=4"
argument_list|,
literal|"//lst[@name='false']/double[@name='sumOfSquares'][.='2601.0']"
argument_list|,
literal|"//lst[@name='false']/double[@name='mean'][.='-15.25']"
argument_list|,
literal|"//lst[@name='false']/double[@name='stddev'][.='23.59908190304586']"
argument_list|)
expr_stmt|;
block|}
name|assertQ
argument_list|(
literal|"cardinality"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!cardinality=true}"
operator|+
name|f
argument_list|)
argument_list|,
literal|"//long[@name='cardinality'][.='8']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFieldStatisticsResultsStringField
specifier|public
name|void
name|testFieldStatisticsResultsStringField
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"active_s"
argument_list|,
literal|"string1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"active_s"
argument_list|,
literal|"string2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"active_s"
argument_list|,
literal|"string3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|StatsParams
operator|.
name|STATS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|StatsParams
operator|.
name|STATS_FIELD
argument_list|,
literal|"active_s"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"f.active_s.stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"indent"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|req
init|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
operator|new
name|MapSolrParams
argument_list|(
name|args
argument_list|)
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
literal|"test string statistics values"
argument_list|,
name|req
argument_list|,
literal|"//str[@name='min'][.='string1']"
argument_list|,
literal|"//str[@name='max'][.='string3']"
argument_list|,
literal|"//long[@name='count'][.='3']"
argument_list|,
literal|"//long[@name='missing'][.='1']"
argument_list|,
literal|"//long[@name='countDistinct'][.='3']"
argument_list|,
literal|"count(//arr[@name='distinctValues']/str)=3"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test string cardinality"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!cardinality=true}active_s"
argument_list|)
argument_list|,
literal|"//long[@name='cardinality'][.='3']"
argument_list|)
expr_stmt|;
comment|// stats over a string function
name|assertQ
argument_list|(
literal|"strdist func stats"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!func}strdist('string22',active_s,edit)"
argument_list|)
argument_list|,
literal|"//double[@name='min'][.='0.75']"
argument_list|,
literal|"//double[@name='max'][.='0.875']"
argument_list|,
literal|"//double[@name='sum'][.='2.375']"
argument_list|,
literal|"//long[@name='count'][.='3']"
argument_list|,
literal|"//long[@name='missing'][.='1']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFieldStatisticsResultsDateField
specifier|public
name|void
name|testFieldStatisticsResultsDateField
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|DateFormat
name|dateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|dateFormat
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|date1
init|=
name|dateFormat
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
literal|123456789
argument_list|)
argument_list|)
operator|+
literal|"Z"
decl_stmt|;
name|String
name|date2
init|=
name|dateFormat
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
literal|987654321
argument_list|)
argument_list|)
operator|+
literal|"Z"
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"active_dt"
argument_list|,
name|date1
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"active_dt"
argument_list|,
name|date2
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|StatsParams
operator|.
name|STATS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|StatsParams
operator|.
name|STATS_FIELD
argument_list|,
literal|"active_dt"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"f.active_dt.stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"indent"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|req
init|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
operator|new
name|MapSolrParams
argument_list|(
name|args
argument_list|)
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
literal|"test date statistics values"
argument_list|,
name|req
argument_list|,
literal|"//long[@name='count'][.='2']"
argument_list|,
literal|"//long[@name='missing'][.='1']"
argument_list|,
literal|"//date[@name='min'][.='1970-01-02T10:17:36Z']"
argument_list|,
literal|"//date[@name='max'][.='1970-01-12T10:20:54Z']"
argument_list|,
literal|"//long[@name='countDistinct'][.='2']"
argument_list|,
literal|"count(//arr[@name='distinctValues']/date)=2"
comment|//  "//date[@name='sum'][.='1970-01-13T20:38:30Z']",  // sometimes 29.999Z
comment|//  "//date[@name='mean'][.='1970-01-07T10:19:15Z']"  // sometiems 14.999Z
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"cardinality"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!cardinality=true}active_dt"
argument_list|)
argument_list|,
literal|"//lst[@name='active_dt']/long[@name='cardinality'][.='2']"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestFieldStatisticsMissingResult
specifier|public
name|void
name|doTestFieldStatisticsMissingResult
parameter_list|(
name|String
name|f
parameter_list|,
name|SolrParams
index|[]
name|baseParamsSet
parameter_list|)
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|f
argument_list|,
literal|"-10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
name|f
argument_list|,
literal|"-20"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
name|f
argument_list|,
literal|"-40"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|fpre
init|=
name|XPRE
operator|+
literal|"lst[@name='stats_fields']/lst[@name='"
operator|+
name|f
operator|+
literal|"']/"
decl_stmt|;
specifier|final
name|String
name|key
init|=
literal|"key_key"
decl_stmt|;
specifier|final
name|String
name|kpre
init|=
name|XPRE
operator|+
literal|"lst[@name='stats_fields']/lst[@name='"
operator|+
name|key
operator|+
literal|"']/"
decl_stmt|;
comment|// status should be the same regardless of baseParams
for|for
control|(
name|SolrParams
name|baseParams
range|:
name|baseParamsSet
control|)
block|{
name|SolrQueryRequest
name|request
init|=
name|req
argument_list|(
name|baseParams
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
literal|"test statistics values"
argument_list|,
name|request
argument_list|,
literal|"//double[@name='min'][.='-40.0']"
argument_list|,
literal|"//double[@name='max'][.='-10.0']"
argument_list|,
literal|"//double[@name='sum'][.='-70.0']"
argument_list|,
literal|"//long[@name='count'][.='3']"
argument_list|,
literal|"//long[@name='missing'][.='1']"
argument_list|,
literal|"//long[@name='countDistinct'][.='3']"
argument_list|,
literal|"count(//arr[@name='distinctValues']/*)=3"
argument_list|,
literal|"//double[@name='sumOfSquares'][.='2100.0']"
argument_list|,
literal|"//double[@name='mean'][.='-23.333333333333332']"
argument_list|,
literal|"//double[@name='stddev'][.='15.275252316519467']"
argument_list|)
expr_stmt|;
block|}
comment|// we should be able to compute exact same stats for a field even
comment|// when we specify it using the "field()" function, or use other
comment|// identify equivilent functions
for|for
control|(
name|String
name|param
range|:
operator|new
name|String
index|[]
block|{
comment|// bare
literal|"{!key="
operator|+
name|key
operator|+
literal|" ex=key_ex_tag}"
operator|+
name|f
block|,
literal|"{!key="
operator|+
name|key
operator|+
literal|" ex=key_ex_tag v="
operator|+
name|f
operator|+
literal|"}"
block|,
comment|// field func
literal|"{!lucene key="
operator|+
name|key
operator|+
literal|" ex=key_ex_tag}_val_:\"field("
operator|+
name|f
operator|+
literal|")\""
block|,
literal|"{!func key="
operator|+
name|key
operator|+
literal|" ex=key_ex_tag}field("
operator|+
name|f
operator|+
literal|")"
block|,
literal|"{!type=func key="
operator|+
name|key
operator|+
literal|" ex=key_ex_tag}field("
operator|+
name|f
operator|+
literal|")"
block|,
literal|"{!type=func key="
operator|+
name|key
operator|+
literal|" ex=key_ex_tag v=field("
operator|+
name|f
operator|+
literal|")}"
block|,
literal|"{!type=func key="
operator|+
name|key
operator|+
literal|" ex=key_ex_tag v='field("
operator|+
name|f
operator|+
literal|")'}"
block|,
comment|// identity math functions
literal|"{!type=func key="
operator|+
name|key
operator|+
literal|" ex=key_ex_tag v='sum(0,"
operator|+
name|f
operator|+
literal|")'}"
block|,
literal|"{!type=func key="
operator|+
name|key
operator|+
literal|" ex=key_ex_tag v='product(1,"
operator|+
name|f
operator|+
literal|")'}"
block|,       }
control|)
block|{
name|assertQ
argument_list|(
literal|"test statistics over field specified as a function: "
operator|+
name|param
argument_list|,
comment|// NOTE: baseParams aren't used, we're looking at the function
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=key_ex_tag}-id:4"
argument_list|,
literal|"stats.field"
argument_list|,
name|param
argument_list|)
argument_list|,
name|kpre
operator|+
literal|"double[@name='min'][.='-40.0']"
argument_list|,
name|kpre
operator|+
literal|"double[@name='max'][.='-10.0']"
argument_list|,
name|kpre
operator|+
literal|"double[@name='sum'][.='-70.0']"
argument_list|,
name|kpre
operator|+
literal|"long[@name='count'][.='3']"
argument_list|,
name|kpre
operator|+
literal|"long[@name='missing'][.='1']"
argument_list|,
name|kpre
operator|+
literal|"long[@name='countDistinct'][.='3']"
argument_list|,
literal|"count("
operator|+
name|kpre
operator|+
literal|"arr[@name='distinctValues']/*)=3"
argument_list|,
name|kpre
operator|+
literal|"double[@name='sumOfSquares'][.='2100.0']"
argument_list|,
name|kpre
operator|+
literal|"double[@name='mean'][.='-23.333333333333332']"
argument_list|,
name|kpre
operator|+
literal|"double[@name='stddev'][.='15.275252316519467']"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doTestFacetStatisticsResult
specifier|public
name|void
name|doTestFacetStatisticsResult
parameter_list|(
name|String
name|f
parameter_list|,
name|SolrParams
index|[]
name|baseParamsSet
parameter_list|)
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|f
argument_list|,
literal|"10"
argument_list|,
literal|"active_s"
argument_list|,
literal|"true"
argument_list|,
literal|"other_s"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
name|f
argument_list|,
literal|"20"
argument_list|,
literal|"active_s"
argument_list|,
literal|"true"
argument_list|,
literal|"other_s"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
name|f
argument_list|,
literal|"30"
argument_list|,
literal|"active_s"
argument_list|,
literal|"false"
argument_list|,
literal|"other_s"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
name|f
argument_list|,
literal|"40"
argument_list|,
literal|"active_s"
argument_list|,
literal|"false"
argument_list|,
literal|"other_s"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|pre
init|=
literal|"//lst[@name='stats_fields']/lst[@name='"
operator|+
name|f
operator|+
literal|"']/lst[@name='facets']/lst[@name='active_s']"
decl_stmt|;
comment|// status should be the same regardless of baseParams
for|for
control|(
name|SolrParams
name|baseParams
range|:
name|baseParamsSet
control|)
block|{
name|assertQ
argument_list|(
literal|"test value for active_s=true"
argument_list|,
name|req
argument_list|(
name|baseParams
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.facet"
argument_list|,
literal|"active_s"
argument_list|,
literal|"stats.facet"
argument_list|,
literal|"other_s"
argument_list|)
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|")=1]"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='true']/double[@name='min'][.='10.0']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='true']/double[@name='max'][.='20.0']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='true']/double[@name='sum'][.='30.0']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='true']/long[@name='count'][.='2']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='true']/long[@name='missing'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='true']/long[@name='countDistinct'][.='2']"
argument_list|,
literal|"count("
operator|+
name|pre
operator|+
literal|"/lst[@name='true']/arr[@name='distinctValues']/*)=2"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='true']/double[@name='sumOfSquares'][.='500.0']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='true']/double[@name='mean'][.='15.0']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='true']/double[@name='stddev'][.='7.0710678118654755']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test value for active_s=false"
argument_list|,
name|req
argument_list|(
name|baseParams
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.facet"
argument_list|,
literal|"active_s"
argument_list|)
argument_list|,
name|pre
operator|+
literal|"/lst[@name='false']/double[@name='min'][.='30.0']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='false']/double[@name='max'][.='40.0']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='false']/double[@name='sum'][.='70.0']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='false']/long[@name='count'][.='2']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='false']/long[@name='missing'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='true']/long[@name='countDistinct'][.='2']"
argument_list|,
literal|"count("
operator|+
name|pre
operator|+
literal|"/lst[@name='true']/arr[@name='distinctValues']/*)=2"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='false']/double[@name='sumOfSquares'][.='2500.0']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='false']/double[@name='mean'][.='35.0']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='false']/double[@name='stddev'][.='7.0710678118654755']"
argument_list|)
expr_stmt|;
block|}
comment|// we should be able to compute exact same stats& stats.facet for a field even
comment|// when we specify it using the "field()" function, or use other
comment|// identify equivilent functions
for|for
control|(
name|String
name|param
range|:
operator|new
name|String
index|[]
block|{
comment|// bare
literal|"{!key="
operator|+
name|f
operator|+
literal|" ex=key_ex_tag}"
operator|+
name|f
block|,
literal|"{!key="
operator|+
name|f
operator|+
literal|" ex=key_ex_tag v="
operator|+
name|f
operator|+
literal|"}"
block|,
comment|// field func
literal|"{!lucene key="
operator|+
name|f
operator|+
literal|" ex=key_ex_tag}_val_:\"field("
operator|+
name|f
operator|+
literal|")\""
block|,
literal|"{!func key="
operator|+
name|f
operator|+
literal|" ex=key_ex_tag}field("
operator|+
name|f
operator|+
literal|")"
block|,
literal|"{!type=func key="
operator|+
name|f
operator|+
literal|" ex=key_ex_tag}field("
operator|+
name|f
operator|+
literal|")"
block|,
literal|"{!type=func key="
operator|+
name|f
operator|+
literal|" ex=key_ex_tag v=field("
operator|+
name|f
operator|+
literal|")}"
block|,
literal|"{!type=func key="
operator|+
name|f
operator|+
literal|" ex=key_ex_tag v='field("
operator|+
name|f
operator|+
literal|")'}"
block|,
comment|// identity math functions
literal|"{!type=func key="
operator|+
name|f
operator|+
literal|" ex=key_ex_tag v='sum(0,"
operator|+
name|f
operator|+
literal|")'}"
block|,
literal|"{!type=func key="
operator|+
name|f
operator|+
literal|" ex=key_ex_tag v='product(1,"
operator|+
name|f
operator|+
literal|")'}"
block|,       }
control|)
block|{
name|assertQ
argument_list|(
literal|"test statis& stats.facet over field specified as a function: "
operator|+
name|param
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=key_ex_tag}-id:4"
argument_list|,
literal|"stats.field"
argument_list|,
name|param
argument_list|,
literal|"stats.facet"
argument_list|,
literal|"active_s"
argument_list|,
literal|"stats.facet"
argument_list|,
literal|"other_s"
argument_list|)
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|")=1]"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='true']/double[@name='min'][.='10.0']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='true']/double[@name='max'][.='20.0']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='true']/double[@name='sum'][.='30.0']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='true']/long[@name='count'][.='2']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='true']/long[@name='missing'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='true']/long[@name='countDistinct'][.='2']"
argument_list|,
literal|"count("
operator|+
name|pre
operator|+
literal|"/lst[@name='true']/arr[@name='distinctValues']/*)=2"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='true']/double[@name='sumOfSquares'][.='500.0']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='true']/double[@name='mean'][.='15.0']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='true']/double[@name='stddev'][.='7.0710678118654755']"
comment|//
argument_list|,
name|pre
operator|+
literal|"/lst[@name='false']/double[@name='min'][.='30.0']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='false']/double[@name='max'][.='40.0']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='false']/double[@name='sum'][.='70.0']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='false']/long[@name='count'][.='2']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='false']/long[@name='missing'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='true']/long[@name='countDistinct'][.='2']"
argument_list|,
literal|"count("
operator|+
name|pre
operator|+
literal|"/lst[@name='true']/arr[@name='distinctValues']/*)=2"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='false']/double[@name='sumOfSquares'][.='2500.0']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='false']/double[@name='mean'][.='35.0']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='false']/double[@name='stddev'][.='7.0710678118654755']"
argument_list|)
expr_stmt|;
block|}
name|assertQ
argument_list|(
literal|"stats.facet w/ cardinality"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"-other_s:bar"
argument_list|,
literal|"stats.facet"
argument_list|,
literal|"active_s"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!cardinality=true}"
operator|+
name|f
argument_list|)
argument_list|,
name|pre
operator|+
literal|"/lst[@name='true' ]/long[@name='cardinality'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='false']/long[@name='cardinality'][.='2']"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestFacetStatisticsMissingResult
specifier|public
name|void
name|doTestFacetStatisticsMissingResult
parameter_list|(
name|String
name|f
parameter_list|,
name|SolrParams
index|[]
name|baseParamsSet
parameter_list|)
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|f
argument_list|,
literal|"10"
argument_list|,
literal|"active_s"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
name|f
argument_list|,
literal|"20"
argument_list|,
literal|"active_s"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"active_s"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
name|f
argument_list|,
literal|"40"
argument_list|,
literal|"active_s"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// status should be the same regardless of baseParams
for|for
control|(
name|SolrParams
name|baseParams
range|:
name|baseParamsSet
control|)
block|{
name|assertQ
argument_list|(
literal|"test value for active_s=true"
argument_list|,
name|req
argument_list|(
name|baseParams
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.facet"
argument_list|,
literal|"active_s"
argument_list|)
argument_list|,
literal|"//lst[@name='true']/double[@name='min'][.='10.0']"
argument_list|,
literal|"//lst[@name='true']/double[@name='max'][.='20.0']"
argument_list|,
literal|"//lst[@name='true']/double[@name='sum'][.='30.0']"
argument_list|,
literal|"//lst[@name='true']/long[@name='count'][.='2']"
argument_list|,
literal|"//lst[@name='true']/long[@name='missing'][.='0']"
argument_list|,
literal|"//lst[@name='true']/long[@name='countDistinct'][.='2']"
argument_list|,
literal|"count(//lst[@name='true']/arr[@name='distinctValues']/*)=2"
argument_list|,
literal|"//lst[@name='true']/double[@name='sumOfSquares'][.='500.0']"
argument_list|,
literal|"//lst[@name='true']/double[@name='mean'][.='15.0']"
argument_list|,
literal|"//lst[@name='true']/double[@name='stddev'][.='7.0710678118654755']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test value for active_s=false"
argument_list|,
name|req
argument_list|(
name|baseParams
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats.facet"
argument_list|,
literal|"active_s"
argument_list|,
literal|"stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"//lst[@name='false']/double[@name='min'][.='40.0']"
argument_list|,
literal|"//lst[@name='false']/double[@name='max'][.='40.0']"
argument_list|,
literal|"//lst[@name='false']/double[@name='sum'][.='40.0']"
argument_list|,
literal|"//lst[@name='false']/long[@name='count'][.='1']"
argument_list|,
literal|"//lst[@name='false']/long[@name='missing'][.='1']"
argument_list|,
literal|"//lst[@name='false']/long[@name='countDistinct'][.='1']"
argument_list|,
literal|"count(//lst[@name='false']/arr[@name='distinctValues']/*)=1"
argument_list|,
literal|"//lst[@name='false']/double[@name='sumOfSquares'][.='1600.0']"
argument_list|,
literal|"//lst[@name='false']/double[@name='mean'][.='40.0']"
argument_list|,
literal|"//lst[@name='false']/double[@name='stddev'][.='0.0']"
argument_list|)
expr_stmt|;
block|}
name|assertQ
argument_list|(
literal|"stats.facet w/ cardinality"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.facet"
argument_list|,
literal|"active_s"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!cardinality=true}"
operator|+
name|f
argument_list|)
argument_list|,
literal|"//lst[@name='active_s']/lst[@name='true' ]/long[@name='cardinality'][.='2']"
argument_list|,
literal|"//lst[@name='active_s']/lst[@name='false']/long[@name='cardinality'][.='1']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFieldStatisticsResultsNumericFieldAlwaysMissing
specifier|public
name|void
name|testFieldStatisticsResultsNumericFieldAlwaysMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|StatsParams
operator|.
name|STATS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|StatsParams
operator|.
name|STATS_FIELD
argument_list|,
literal|"active_i"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"indent"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|req
init|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
operator|new
name|MapSolrParams
argument_list|(
name|args
argument_list|)
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
literal|"test string statistics values"
argument_list|,
name|req
argument_list|,
literal|"//lst[@name='active_i']/long[@name='count'][.='0']"
argument_list|,
literal|"//lst[@name='active_i']/long[@name='missing'][.='4']"
argument_list|,
literal|"//lst[@name='active_i']/null[@name='min']"
argument_list|,
literal|"//lst[@name='active_i']/null[@name='max']"
argument_list|,
literal|"//lst[@name='active_i']/double[@name='sum'][.='0.0']"
argument_list|,
literal|"//lst[@name='active_i']/double[@name='sumOfSquares'][.='0.0']"
argument_list|,
literal|"//lst[@name='active_i']/double[@name='stddev'][.='0.0']"
argument_list|,
literal|"//lst[@name='active_i']/double[@name='mean'][.='NaN']"
comment|// if new stats are supported, this will break - update test to assert values for each
argument_list|,
literal|"count(//lst[@name='active_i']/*)=8"
argument_list|)
expr_stmt|;
comment|// NOTE: empty set percentiles covered in testPercentiles()
name|assertQ
argument_list|(
literal|"test cardinality of missing"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!cardinality=true}active_i"
argument_list|)
argument_list|,
literal|"//lst[@name='active_i']/long[@name='cardinality'][.='0']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFieldStatisticsResultsStringFieldAlwaysMissing
specifier|public
name|void
name|testFieldStatisticsResultsStringFieldAlwaysMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|StatsParams
operator|.
name|STATS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|StatsParams
operator|.
name|STATS_FIELD
argument_list|,
literal|"active_s"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"indent"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|req
init|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
operator|new
name|MapSolrParams
argument_list|(
name|args
argument_list|)
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
literal|"test string statistics values"
argument_list|,
name|req
argument_list|,
literal|"//lst[@name='active_s']/long[@name='count'][.='0']"
argument_list|,
literal|"//lst[@name='active_s']/long[@name='missing'][.='4']"
argument_list|,
literal|"//lst[@name='active_s']/null[@name='min']"
argument_list|,
literal|"//lst[@name='active_s']/null[@name='max']"
comment|// if new stats are supported, this will break - update test to assert values for each
argument_list|,
literal|"count(//lst[@name='active_s']/*)=4"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test string statistics values"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!cardinality=true}active_s"
argument_list|)
argument_list|,
literal|"//lst[@name='active_s']/long[@name='cardinality'][.='0']"
argument_list|)
expr_stmt|;
block|}
comment|//SOLR-3160
DECL|method|testFieldStatisticsResultsDateFieldAlwaysMissing
specifier|public
name|void
name|testFieldStatisticsResultsDateFieldAlwaysMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|StatsParams
operator|.
name|STATS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|StatsParams
operator|.
name|STATS_FIELD
argument_list|,
literal|"active_dt"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"indent"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|req
init|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
operator|new
name|MapSolrParams
argument_list|(
name|args
argument_list|)
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
literal|"test string statistics values"
argument_list|,
name|req
argument_list|,
literal|"//lst[@name='active_dt']/long[@name='count'][.='0']"
argument_list|,
literal|"//lst[@name='active_dt']/long[@name='missing'][.='3']"
argument_list|,
literal|"//lst[@name='active_dt']/null[@name='min']"
argument_list|,
literal|"//lst[@name='active_dt']/null[@name='max']"
argument_list|,
literal|"//lst[@name='active_dt']/null[@name='mean']"
argument_list|,
literal|"//lst[@name='active_dt']/date[@name='sum'][.='1970-01-01T00:00:00Z']"
argument_list|,
literal|"//lst[@name='active_dt']/double[@name='sumOfSquares'][.='0.0']"
argument_list|,
literal|"//lst[@name='active_dt']/double[@name='stddev'][.='0.0']"
comment|// if new stats are supported, this will break - update test to assert values for each
argument_list|,
literal|"count(//lst[@name='active_dt']/*)=8"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"cardinality"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!cardinality=true}active_dt"
argument_list|)
argument_list|,
literal|"//lst[@name='active_dt']/long[@name='cardinality'][.='0']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testStatsFacetMultivaluedErrorHandling
specifier|public
name|void
name|testStatsFacetMultivaluedErrorHandling
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|SchemaField
name|foo_ss
init|=
name|core
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
literal|"foo_ss"
argument_list|)
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"active_i"
argument_list|,
literal|"1"
argument_list|,
literal|"foo_ss"
argument_list|,
literal|"aa"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"active_i"
argument_list|,
literal|"1"
argument_list|,
literal|"foo_ss"
argument_list|,
literal|"bb"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"active_i"
argument_list|,
literal|"5"
argument_list|,
literal|"foo_ss"
argument_list|,
literal|"aa"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"schema no longer satisfies test requirements: foo_ss no longer multivalued"
argument_list|,
name|foo_ss
operator|.
name|multiValued
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"schema no longer satisfies test requirements: foo_ss's fieldtype no longer single valued"
argument_list|,
operator|!
name|foo_ss
operator|.
name|getType
argument_list|()
operator|.
name|isMultiValued
argument_list|()
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"no failure trying to get stats facet on foo_ss"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"active_i"
argument_list|,
literal|"stats.facet"
argument_list|,
literal|"foo_ss"
argument_list|)
argument_list|,
literal|400
argument_list|)
expr_stmt|;
block|}
comment|//SOLR-3177
DECL|method|testStatsExcludeFilterQuery
specifier|public
name|void
name|testStatsExcludeFilterQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|StatsParams
operator|.
name|STATS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|StatsParams
operator|.
name|STATS_FIELD
argument_list|,
literal|"{!ex=id}id"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"fq"
argument_list|,
literal|"{!tag=id}id:[2 TO 3]"
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|req
init|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
operator|new
name|MapSolrParams
argument_list|(
name|args
argument_list|)
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
literal|"test exluding filter query"
argument_list|,
name|req
argument_list|,
literal|"//lst[@name='id']/double[@name='min'][.='1.0']"
argument_list|,
literal|"//lst[@name='id']/double[@name='max'][.='4.0']"
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|StatsParams
operator|.
name|STATS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|StatsParams
operator|.
name|STATS_FIELD
argument_list|,
literal|"{!key=id2}id"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"fq"
argument_list|,
literal|"{!tag=id}id:[2 TO 3]"
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
operator|new
name|MapSolrParams
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test rename field"
argument_list|,
name|req
argument_list|,
literal|"//lst[@name='id2']/double[@name='min'][.='2.0']"
argument_list|,
literal|"//lst[@name='id2']/double[@name='max'][.='3.0']"
argument_list|)
expr_stmt|;
block|}
comment|// SOLR-6024
DECL|method|testFieldStatisticsDocValuesAndMultiValued
specifier|public
name|void
name|testFieldStatisticsDocValuesAndMultiValued
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
comment|// precondition for the test
name|SchemaField
name|catDocValues
init|=
name|core
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
literal|"cat_docValues"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"schema no longer satisfies test requirements: cat_docValues no longer multivalued"
argument_list|,
name|catDocValues
operator|.
name|multiValued
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"schema no longer satisfies test requirements: cat_docValues fieldtype no longer single valued"
argument_list|,
operator|!
name|catDocValues
operator|.
name|getType
argument_list|()
operator|.
name|isMultiValued
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"schema no longer satisfies test requirements: cat_docValues no longer has docValues"
argument_list|,
name|catDocValues
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FldType
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"id"
argument_list|,
name|ONE_ONE
argument_list|,
operator|new
name|SVal
argument_list|(
literal|'A'
argument_list|,
literal|'Z'
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"cat_docValues"
argument_list|,
operator|new
name|IRange
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|SVal
argument_list|(
literal|'a'
argument_list|,
literal|'z'
argument_list|,
literal|1
argument_list|,
literal|30
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Doc
name|d1
init|=
name|createDoc
argument_list|(
name|types
argument_list|)
decl_stmt|;
name|d1
operator|.
name|getValues
argument_list|(
literal|"id"
argument_list|)
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|d1
operator|.
name|getValues
argument_list|(
literal|"cat_docValues"
argument_list|)
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|d1
operator|.
name|getValues
argument_list|(
literal|"cat_docValues"
argument_list|)
operator|.
name|set
argument_list|(
literal|1
argument_list|,
literal|"testtw"
argument_list|)
expr_stmt|;
name|updateJ
argument_list|(
name|toJSON
argument_list|(
name|d1
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Doc
name|d2
init|=
name|createDoc
argument_list|(
name|types
argument_list|)
decl_stmt|;
name|d2
operator|.
name|getValues
argument_list|(
literal|"id"
argument_list|)
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|d2
operator|.
name|getValues
argument_list|(
literal|"cat_docValues"
argument_list|)
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|d2
operator|.
name|getValues
argument_list|(
literal|"cat_docValues"
argument_list|)
operator|.
name|set
argument_list|(
literal|1
argument_list|,
literal|"testtt"
argument_list|)
expr_stmt|;
name|updateJ
argument_list|(
name|toJSON
argument_list|(
name|d2
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|StatsParams
operator|.
name|STATS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|StatsParams
operator|.
name|STATS_FIELD
argument_list|,
literal|"cat_docValues"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"indent"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|req
init|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
operator|new
name|MapSolrParams
argument_list|(
name|args
argument_list|)
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
literal|"test min/max on docValues and multiValued"
argument_list|,
name|req
argument_list|,
literal|"//lst[@name='cat_docValues']/str[@name='min'][.='test']"
argument_list|,
literal|"//lst[@name='cat_docValues']/str[@name='max'][.='testtw']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"cardinality"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!cardinality=true}cat_docValues"
argument_list|)
argument_list|,
literal|"//lst[@name='cat_docValues']/long[@name='cardinality'][.='3']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFieldStatisticsDocValuesAndMultiValuedInteger
specifier|public
name|void
name|testFieldStatisticsDocValuesAndMultiValuedInteger
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|String
name|fieldName
init|=
literal|"cat_intDocValues"
decl_stmt|;
comment|// precondition for the test
name|SchemaField
name|catDocValues
init|=
name|core
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"schema no longer satisfies test requirements: cat_docValues no longer multivalued"
argument_list|,
name|catDocValues
operator|.
name|multiValued
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"schema no longer satisfies test requirements: cat_docValues fieldtype no longer single valued"
argument_list|,
operator|!
name|catDocValues
operator|.
name|getType
argument_list|()
operator|.
name|isMultiValued
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"schema no longer satisfies test requirements: cat_docValues no longer has docValues"
argument_list|,
name|catDocValues
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FldType
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"id"
argument_list|,
name|ONE_ONE
argument_list|,
operator|new
name|SVal
argument_list|(
literal|'A'
argument_list|,
literal|'Z'
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
name|fieldName
argument_list|,
name|ONE_ONE
argument_list|,
operator|new
name|IRange
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Doc
name|d1
init|=
name|createDocValuesDocument
argument_list|(
name|types
argument_list|,
name|fieldName
argument_list|,
literal|"1"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|updateJ
argument_list|(
name|toJSON
argument_list|(
name|d1
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Doc
name|d2
init|=
name|createDocValuesDocument
argument_list|(
name|types
argument_list|,
name|fieldName
argument_list|,
literal|"2"
argument_list|,
literal|3
argument_list|,
operator|-
literal|2
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|updateJ
argument_list|(
name|toJSON
argument_list|(
name|d2
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Doc
name|d3
init|=
name|createDocValuesDocument
argument_list|(
name|types
argument_list|,
name|fieldName
argument_list|,
literal|"3"
argument_list|,
literal|16
argument_list|,
operator|-
literal|3
argument_list|,
literal|11
argument_list|)
decl_stmt|;
name|updateJ
argument_list|(
name|toJSON
argument_list|(
name|d3
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|StatsParams
operator|.
name|STATS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|StatsParams
operator|.
name|STATS_FIELD
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|StatsParams
operator|.
name|STATS_CALC_DISTINCT
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"indent"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|req
init|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
operator|new
name|MapSolrParams
argument_list|(
name|args
argument_list|)
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
literal|"test min/max on docValues and multiValued"
argument_list|,
name|req
argument_list|,
literal|"//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/double[@name='min'][.='-3.0']"
argument_list|,
literal|"//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/double[@name='max'][.='16.0']"
argument_list|,
literal|"//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/long[@name='count'][.='12']"
argument_list|,
literal|"//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/long[@name='countDistinct'][.='9']"
argument_list|,
literal|"//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/double[@name='sum'][.='38.0']"
argument_list|,
literal|"//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/double[@name='mean'][.='3.1666666666666665']"
argument_list|,
literal|"//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/double[@name='stddev'][.='5.638074031784151']"
argument_list|,
literal|"//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/double[@name='sumOfSquares'][.='470.0']"
argument_list|,
literal|"//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/long[@name='missing'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"cardinality"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!cardinality=true}"
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/long[@name='cardinality'][.='9']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFieldStatisticsDocValuesAndMultiValuedIntegerFacetStats
specifier|public
name|void
name|testFieldStatisticsDocValuesAndMultiValuedIntegerFacetStats
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|String
name|fieldName
init|=
literal|"cat_intDocValues"
decl_stmt|;
comment|// precondition for the test
name|SchemaField
name|catDocValues
init|=
name|core
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"schema no longer satisfies test requirements: cat_docValues no longer multivalued"
argument_list|,
name|catDocValues
operator|.
name|multiValued
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"schema no longer satisfies test requirements: cat_docValues fieldtype no longer single valued"
argument_list|,
operator|!
name|catDocValues
operator|.
name|getType
argument_list|()
operator|.
name|isMultiValued
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"schema no longer satisfies test requirements: cat_docValues no longer has docValues"
argument_list|,
name|catDocValues
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FldType
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"id"
argument_list|,
name|ONE_ONE
argument_list|,
operator|new
name|SVal
argument_list|(
literal|'A'
argument_list|,
literal|'Z'
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
name|fieldName
argument_list|,
name|ONE_ONE
argument_list|,
operator|new
name|IRange
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Doc
name|d1
init|=
name|createDocValuesDocument
argument_list|(
name|types
argument_list|,
name|fieldName
argument_list|,
literal|"1"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|updateJ
argument_list|(
name|toJSON
argument_list|(
name|d1
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Doc
name|d2
init|=
name|createDocValuesDocument
argument_list|(
name|types
argument_list|,
name|fieldName
argument_list|,
literal|"2"
argument_list|,
literal|3
argument_list|,
operator|-
literal|2
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|updateJ
argument_list|(
name|toJSON
argument_list|(
name|d2
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Doc
name|d3
init|=
name|createDocValuesDocument
argument_list|(
name|types
argument_list|,
name|fieldName
argument_list|,
literal|"3"
argument_list|,
literal|16
argument_list|,
operator|-
literal|3
argument_list|,
literal|11
argument_list|)
decl_stmt|;
name|updateJ
argument_list|(
name|toJSON
argument_list|(
name|d3
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|StatsParams
operator|.
name|STATS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|StatsParams
operator|.
name|STATS_FIELD
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|StatsParams
operator|.
name|STATS_FACET
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|StatsParams
operator|.
name|STATS_CALC_DISTINCT
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"indent"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|req
init|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
operator|new
name|MapSolrParams
argument_list|(
name|args
argument_list|)
argument_list|)
decl_stmt|;
name|assertQEx
argument_list|(
literal|"can not use FieldCache on multivalued field: cat_intDocValues"
argument_list|,
name|req
argument_list|,
literal|400
argument_list|)
expr_stmt|;
block|}
DECL|method|testMiscQueryStats
specifier|public
name|void
name|testMiscQueryStats
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|kpre
init|=
name|XPRE
operator|+
literal|"lst[@name='stats_fields']/lst[@name='k']/"
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2.3"
argument_list|,
literal|"b_f"
argument_list|,
literal|"9.7"
argument_list|,
literal|"foo_t"
argument_list|,
literal|"how now brown cow"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4.5"
argument_list|,
literal|"b_f"
argument_list|,
literal|"8.6"
argument_list|,
literal|"foo_t"
argument_list|,
literal|"cow cow cow cow"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5.6"
argument_list|,
literal|"b_f"
argument_list|,
literal|"7.5"
argument_list|,
literal|"foo_t"
argument_list|,
literal|"red fox"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6.7"
argument_list|,
literal|"b_f"
argument_list|,
literal|"6.3"
argument_list|,
literal|"foo_t"
argument_list|,
literal|"red cow"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"functions over multiple fields"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"foo_t:cow"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!func key=k}product(a_f,b_f)"
argument_list|)
argument_list|,
name|kpre
operator|+
literal|"double[@name='min'][.='22.309999465942383']"
argument_list|,
name|kpre
operator|+
literal|"double[@name='max'][.='42.209999084472656']"
argument_list|,
name|kpre
operator|+
literal|"double[@name='sum'][.='103.21999931335449']"
argument_list|,
name|kpre
operator|+
literal|"long[@name='count'][.='3']"
argument_list|,
name|kpre
operator|+
literal|"long[@name='missing'][.='0']"
argument_list|,
name|kpre
operator|+
literal|"double[@name='sumOfSquares'][.='3777.110157933046']"
argument_list|,
name|kpre
operator|+
literal|"double[@name='mean'][.='34.40666643778483']"
argument_list|,
name|kpre
operator|+
literal|"double[@name='stddev'][.='10.622007151430441']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"functions over a query"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!lucene key=k}foo_t:cow"
argument_list|)
comment|// scores are: 1.0, 0.625, 0.5,& "missing"
argument_list|,
name|kpre
operator|+
literal|"double[@name='min'][.='0.5']"
argument_list|,
name|kpre
operator|+
literal|"double[@name='max'][.='1.0']"
argument_list|,
name|kpre
operator|+
literal|"double[@name='sum'][.='2.125']"
argument_list|,
name|kpre
operator|+
literal|"long[@name='count'][.='3']"
argument_list|,
name|kpre
operator|+
literal|"long[@name='missing'][.='1']"
argument_list|,
name|kpre
operator|+
literal|"double[@name='sumOfSquares'][.='1.640625']"
argument_list|,
name|kpre
operator|+
literal|"double[@name='mean'][.='0.7083333333333334']"
argument_list|,
name|kpre
operator|+
literal|"double[@name='stddev'][.='0.2602082499332666']"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Whitebox test of {@link StatsField} parsing to ensure expected equivilence     * operations hold up    */
DECL|method|testStatsFieldWhitebox
specifier|public
name|void
name|testStatsFieldWhitebox
parameter_list|()
throws|throws
name|Exception
block|{
name|StatsComponent
name|component
init|=
operator|new
name|StatsComponent
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SearchComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|component
argument_list|)
expr_stmt|;
name|SolrParams
name|common
init|=
name|params
argument_list|(
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"nested"
argument_list|,
literal|"foo_t:cow"
argument_list|)
decl_stmt|;
comment|// all of these should produce the same SchemaField based StatsField
for|for
control|(
name|String
name|param
range|:
operator|new
name|String
index|[]
block|{
literal|"foo_i"
block|,
literal|"{!func}field(\"foo_i\")"
block|,
literal|"{!lucene}_val_:\"field(foo_i)\""
block|}
control|)
block|{
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
name|common
argument_list|)
decl_stmt|;
try|try
block|{
name|ResponseBuilder
name|rb
init|=
operator|new
name|ResponseBuilder
argument_list|(
name|req
argument_list|,
operator|new
name|SolrQueryResponse
argument_list|()
argument_list|,
name|components
argument_list|)
decl_stmt|;
name|StatsField
name|sf
init|=
operator|new
name|StatsField
argument_list|(
name|rb
argument_list|,
name|param
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"value source of: "
operator|+
name|param
argument_list|,
name|sf
operator|.
name|getValueSource
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"schema field of: "
operator|+
name|param
argument_list|,
name|sf
operator|.
name|getSchemaField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"field name of: "
operator|+
name|param
argument_list|,
literal|"foo_i"
argument_list|,
name|sf
operator|.
name|getSchemaField
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// all of these should produce the same QueryValueSource based StatsField
for|for
control|(
name|String
name|param
range|:
operator|new
name|String
index|[]
block|{
literal|"{!lucene}foo_t:cow"
block|,
literal|"{!func}query($nested)"
block|,
literal|"{!field f=foo_t}cow"
block|,        }
control|)
block|{
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
name|common
argument_list|)
decl_stmt|;
try|try
block|{
name|ResponseBuilder
name|rb
init|=
operator|new
name|ResponseBuilder
argument_list|(
name|req
argument_list|,
operator|new
name|SolrQueryResponse
argument_list|()
argument_list|,
name|components
argument_list|)
decl_stmt|;
name|StatsField
name|sf
init|=
operator|new
name|StatsField
argument_list|(
name|rb
argument_list|,
name|param
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"schema field of: "
operator|+
name|param
argument_list|,
name|sf
operator|.
name|getSchemaField
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"value source of: "
operator|+
name|param
argument_list|,
name|sf
operator|.
name|getValueSource
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sf
operator|.
name|getValueSource
argument_list|()
operator|.
name|getClass
argument_list|()
operator|+
literal|" is vs type of: "
operator|+
name|param
argument_list|,
name|sf
operator|.
name|getValueSource
argument_list|()
operator|instanceof
name|QueryValueSource
argument_list|)
expr_stmt|;
name|QueryValueSource
name|qvs
init|=
operator|(
name|QueryValueSource
operator|)
name|sf
operator|.
name|getValueSource
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"query of :"
operator|+
name|param
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo_t"
argument_list|,
literal|"cow"
argument_list|)
argument_list|)
argument_list|,
name|qvs
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|testFieldStatisticsDocValuesAndMultiValuedDouble
specifier|public
name|void
name|testFieldStatisticsDocValuesAndMultiValuedDouble
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|String
name|fieldName
init|=
literal|"cat_floatDocValues"
decl_stmt|;
comment|// precondition for the test
name|SchemaField
name|catDocValues
init|=
name|core
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"schema no longer satisfies test requirements: cat_docValues no longer multivalued"
argument_list|,
name|catDocValues
operator|.
name|multiValued
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"schema no longer satisfies test requirements: cat_docValues fieldtype no longer single valued"
argument_list|,
operator|!
name|catDocValues
operator|.
name|getType
argument_list|()
operator|.
name|isMultiValued
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"schema no longer satisfies test requirements: cat_docValues no longer has docValues"
argument_list|,
name|catDocValues
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FldType
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"id"
argument_list|,
name|ONE_ONE
argument_list|,
operator|new
name|SVal
argument_list|(
literal|'A'
argument_list|,
literal|'Z'
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
name|fieldName
argument_list|,
name|ONE_ONE
argument_list|,
operator|new
name|FVal
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Doc
name|d1
init|=
name|createDocValuesDocument
argument_list|(
name|types
argument_list|,
name|fieldName
argument_list|,
literal|"1"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|updateJ
argument_list|(
name|toJSON
argument_list|(
name|d1
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Doc
name|d2
init|=
name|createDocValuesDocument
argument_list|(
name|types
argument_list|,
name|fieldName
argument_list|,
literal|"2"
argument_list|,
literal|3
argument_list|,
operator|-
literal|2
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|updateJ
argument_list|(
name|toJSON
argument_list|(
name|d2
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Doc
name|d3
init|=
name|createDocValuesDocument
argument_list|(
name|types
argument_list|,
name|fieldName
argument_list|,
literal|"3"
argument_list|,
literal|16
argument_list|,
operator|-
literal|3
argument_list|,
literal|11
argument_list|)
decl_stmt|;
name|updateJ
argument_list|(
name|toJSON
argument_list|(
name|d3
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|SolrParams
name|baseParams
init|=
name|params
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
literal|"*:*"
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
name|StatsParams
operator|.
name|STATS
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
name|SolrQueryRequest
name|req1
init|=
name|req
argument_list|(
name|baseParams
argument_list|,
name|StatsParams
operator|.
name|STATS_CALC_DISTINCT
argument_list|,
literal|"true"
argument_list|,
name|StatsParams
operator|.
name|STATS_FIELD
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
name|SolrQueryRequest
name|req2
init|=
name|req
argument_list|(
name|baseParams
argument_list|,
name|StatsParams
operator|.
name|STATS_FIELD
argument_list|,
literal|"{!min=true, max=true, count=true, sum=true, mean=true, stddev=true, sumOfSquares=true, missing=true, calcdistinct=true}"
operator|+
name|fieldName
argument_list|)
decl_stmt|;
name|SolrQueryRequest
name|req3
init|=
name|req
argument_list|(
name|baseParams
argument_list|,
name|StatsParams
operator|.
name|STATS_FIELD
argument_list|,
literal|"{!min=true, max=true, count=true, sum=true, mean=true, stddev=true, sumOfSquares=true, missing=true, countDistinct=true, distinctValues=true}"
operator|+
name|fieldName
argument_list|)
decl_stmt|;
for|for
control|(
name|SolrQueryRequest
name|req
range|:
operator|new
name|SolrQueryRequest
index|[]
block|{
name|req1
block|,
name|req2
block|,
name|req3
block|}
control|)
block|{
name|assertQ
argument_list|(
literal|"test status on docValues and multiValued: "
operator|+
name|req
operator|.
name|toString
argument_list|()
argument_list|,
name|req
argument_list|,
literal|"//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/double[@name='min'][.='-3.0']"
argument_list|,
literal|"//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/double[@name='max'][.='16.0']"
argument_list|,
literal|"//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/long[@name='count'][.='12']"
argument_list|,
literal|"//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/double[@name='sum'][.='38.0']"
argument_list|,
literal|"//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/double[@name='mean'][.='3.1666666666666665']"
argument_list|,
literal|"//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/double[@name='stddev'][.='5.638074031784151']"
argument_list|,
literal|"//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/double[@name='sumOfSquares'][.='470.0']"
argument_list|,
literal|"//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/long[@name='missing'][.='0']"
argument_list|,
literal|"//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/long[@name='countDistinct'][.='9']"
comment|// always comes along with countDistinct
argument_list|,
literal|"count(//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/arr[@name='distinctValues']/float)=9"
comment|// if new default stats are added, this will break - update test to assert values for each
argument_list|,
literal|"count(//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/*)=10"
argument_list|)
expr_stmt|;
block|}
name|assertQ
argument_list|(
literal|"cardinality"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!cardinality=true}"
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/long[@name='cardinality'][.='9']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testEnumFieldTypeStatus
specifier|public
name|void
name|testEnumFieldTypeStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|clearIndex
argument_list|()
expr_stmt|;
name|String
name|fieldName
init|=
literal|"severity"
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|,
name|fieldName
argument_list|,
literal|"Not Available"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|fieldName
argument_list|,
literal|"Not Available"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
name|fieldName
argument_list|,
literal|"Not Available"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
name|fieldName
argument_list|,
literal|"Not Available"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
name|fieldName
argument_list|,
literal|"Not Available"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
name|fieldName
argument_list|,
literal|"Low"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
name|fieldName
argument_list|,
literal|"Low"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
name|fieldName
argument_list|,
literal|"Low"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
name|fieldName
argument_list|,
literal|"Low"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|,
name|fieldName
argument_list|,
literal|"Medium"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|,
name|fieldName
argument_list|,
literal|"Medium"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"11"
argument_list|,
name|fieldName
argument_list|,
literal|"Medium"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"12"
argument_list|,
name|fieldName
argument_list|,
literal|"High"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"13"
argument_list|,
name|fieldName
argument_list|,
literal|"High"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"14"
argument_list|,
name|fieldName
argument_list|,
literal|"Critical"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|20
init|;
name|i
operator|<=
literal|30
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"enum"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
name|fieldName
argument_list|)
argument_list|,
literal|"//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/str[@name='min'][.='Not Available']"
argument_list|,
literal|"//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/str[@name='max'][.='Critical']"
argument_list|,
literal|"//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/long[@name='count'][.='15']"
argument_list|,
literal|"//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/long[@name='missing'][.='11']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"cardinality"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!cardinality=true}"
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/long[@name='cardinality'][.='5']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"enum calcdistinct"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
name|fieldName
argument_list|,
name|StatsParams
operator|.
name|STATS_CALC_DISTINCT
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/str[@name='min'][.='Not Available']"
argument_list|,
literal|"//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/str[@name='max'][.='Critical']"
argument_list|,
literal|"//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/long[@name='count'][.='15']"
argument_list|,
literal|"//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/long[@name='countDistinct'][.='5']"
argument_list|,
literal|"count(//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/arr[@name='distinctValues']/*)=5"
argument_list|,
literal|"//lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/long[@name='missing'][.='11']"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|pre
init|=
literal|"//lst[@name='stats_fields']/lst[@name='"
operator|+
name|fieldName
operator|+
literal|"']/lst[@name='facets']/lst[@name='severity']"
decl_stmt|;
name|assertQ
argument_list|(
literal|"enum + stats.facet"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
name|fieldName
argument_list|,
literal|"stats.facet"
argument_list|,
name|fieldName
argument_list|)
argument_list|,
name|pre
operator|+
literal|"/lst[@name='High']/str[@name='min'][.='High']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='High']/str[@name='max'][.='High']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='High']/long[@name='count'][.='2']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='High']/long[@name='missing'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='Low']/str[@name='min'][.='Low']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='Low']/str[@name='max'][.='Low']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='Low']/long[@name='count'][.='4']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='Low']/long[@name='missing'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='Medium']/str[@name='min'][.='Medium']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='Medium']/str[@name='max'][.='Medium']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='Medium']/long[@name='count'][.='3']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='Medium']/long[@name='missing'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='Not Available']/str[@name='min'][.='Not Available']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='Not Available']/str[@name='max'][.='Not Available']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='Not Available']/long[@name='count'][.='5']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='Not Available']/long[@name='missing'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='Critical']/str[@name='min'][.='Critical']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='Critical']/str[@name='max'][.='Critical']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='Critical']/long[@name='count'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/lst[@name='Critical']/long[@name='missing'][.='0']"
argument_list|)
expr_stmt|;
block|}
DECL|method|createDocValuesDocument
specifier|private
name|Doc
name|createDocValuesDocument
parameter_list|(
name|List
argument_list|<
name|FldType
argument_list|>
name|types
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|String
name|id
parameter_list|,
name|Comparable
modifier|...
name|values
parameter_list|)
throws|throws
name|Exception
block|{
name|Doc
name|doc
init|=
name|createDoc
argument_list|(
name|types
argument_list|)
decl_stmt|;
name|doc
operator|.
name|getValues
argument_list|(
literal|"id"
argument_list|)
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|initMultyValued
argument_list|(
name|doc
operator|.
name|getValues
argument_list|(
name|fieldName
argument_list|)
argument_list|,
name|values
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
DECL|method|initMultyValued
specifier|private
name|List
argument_list|<
name|Comparable
argument_list|>
name|initMultyValued
parameter_list|(
name|List
argument_list|<
name|Comparable
argument_list|>
name|cat_docValues
parameter_list|,
name|Comparable
modifier|...
name|comparables
parameter_list|)
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|cat_docValues
argument_list|,
name|comparables
argument_list|)
expr_stmt|;
return|return
name|cat_docValues
return|;
block|}
comment|/** Convinience struct used in {@link #testIndividualStatLocalParams} */
DECL|class|ExpectedStat
specifier|private
specifier|static
specifier|final
class|class
name|ExpectedStat
block|{
DECL|field|KPRE
specifier|public
specifier|final
specifier|static
name|String
name|KPRE
init|=
name|XPRE
operator|+
literal|"lst[@name='stats_fields']/lst[@name='k']/"
decl_stmt|;
DECL|field|stat
specifier|public
specifier|final
name|Stat
name|stat
decl_stmt|;
DECL|field|input
specifier|public
specifier|final
name|String
name|input
decl_stmt|;
DECL|field|perShardXpaths
specifier|public
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|perShardXpaths
decl_stmt|;
DECL|field|finalXpaths
specifier|public
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|finalXpaths
decl_stmt|;
DECL|field|ALL
specifier|public
specifier|final
specifier|static
name|Map
argument_list|<
name|Stat
argument_list|,
name|ExpectedStat
argument_list|>
name|ALL
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Stat
argument_list|,
name|ExpectedStat
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|ExpectedStat
specifier|private
name|ExpectedStat
parameter_list|(
name|Stat
name|stat
parameter_list|,
name|String
name|input
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|perShardXpaths
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|finalXpaths
parameter_list|)
block|{
name|this
operator|.
name|stat
operator|=
name|stat
expr_stmt|;
name|this
operator|.
name|input
operator|=
name|input
expr_stmt|;
name|this
operator|.
name|perShardXpaths
operator|=
name|perShardXpaths
expr_stmt|;
name|this
operator|.
name|finalXpaths
operator|=
name|finalXpaths
expr_stmt|;
block|}
DECL|method|createSimple
specifier|public
specifier|static
name|void
name|createSimple
parameter_list|(
name|Stat
name|stat
parameter_list|,
name|String
name|input
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|result
parameter_list|)
block|{
name|EnumSet
argument_list|<
name|Stat
argument_list|>
name|deps
init|=
name|stat
operator|.
name|getDistribDeps
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|perShardXpaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|deps
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|xpath
init|=
name|KPRE
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|stat
operator|+
literal|"'][.='"
operator|+
name|result
operator|+
literal|"']"
decl_stmt|;
for|for
control|(
name|Stat
name|dep
range|:
name|deps
control|)
block|{
if|if
condition|(
name|dep
operator|.
name|equals
argument_list|(
name|stat
argument_list|)
condition|)
block|{
comment|// self dependency
name|perShardXpaths
operator|.
name|add
argument_list|(
name|xpath
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
else|else
block|{
name|ExpectedStat
name|expectedDep
init|=
name|ALL
operator|.
name|get
argument_list|(
name|dep
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"can't find dep in ExpectedStat.ALL"
argument_list|,
name|expectedDep
argument_list|)
expr_stmt|;
name|perShardXpaths
operator|.
name|addAll
argument_list|(
name|expectedDep
operator|.
name|perShardXpaths
argument_list|)
expr_stmt|;
block|}
block|}
name|ALL
operator|.
name|put
argument_list|(
name|stat
argument_list|,
operator|new
name|ExpectedStat
argument_list|(
name|stat
argument_list|,
name|input
argument_list|,
name|perShardXpaths
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|xpath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|create
specifier|public
specifier|static
name|void
name|create
parameter_list|(
name|Stat
name|stat
parameter_list|,
name|String
name|input
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|perShardXpaths
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|finalXpaths
parameter_list|)
block|{
name|ALL
operator|.
name|put
argument_list|(
name|stat
argument_list|,
operator|new
name|ExpectedStat
argument_list|(
name|stat
argument_list|,
name|input
argument_list|,
name|perShardXpaths
argument_list|,
name|finalXpaths
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIndividualStatLocalParams
specifier|public
name|void
name|testIndividualStatLocalParams
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|kpre
init|=
name|ExpectedStat
operator|.
name|KPRE
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2.3"
argument_list|,
literal|"b_f"
argument_list|,
literal|"9.7"
argument_list|,
literal|"a_i"
argument_list|,
literal|"9"
argument_list|,
literal|"foo_t"
argument_list|,
literal|"how now brown cow"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|SchemaField
name|field
init|=
name|core
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
literal|"a_i"
argument_list|)
decl_stmt|;
name|HllOptions
name|hllOpts
init|=
name|HllOptions
operator|.
name|parseHllOptions
argument_list|(
name|params
argument_list|(
literal|"cardinality"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|HLL
name|hll
init|=
name|hllOpts
operator|.
name|newHLL
argument_list|()
decl_stmt|;
name|HashFunction
name|hasher
init|=
name|hllOpts
operator|.
name|getHasher
argument_list|()
decl_stmt|;
name|AVLTreeDigest
name|tdigest
init|=
operator|new
name|AVLTreeDigest
argument_list|(
literal|100
argument_list|)
decl_stmt|;
comment|// some quick sanity check assertions...
comment|// trivial check that we only get the exact 2 we ask for
name|assertQ
argument_list|(
literal|"ask for and get only 2 stats"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=k mean=true min=true}a_i"
argument_list|)
argument_list|,
name|kpre
operator|+
literal|"double[@name='mean'][.='9.0']"
argument_list|,
name|kpre
operator|+
literal|"double[@name='min'][.='9.0']"
argument_list|,
literal|"count("
operator|+
name|kpre
operator|+
literal|"*)=2"
argument_list|)
expr_stmt|;
comment|// for stats that are true/false, sanity check false does it's job
name|assertQ
argument_list|(
literal|"min=true& max=false: only min should come back"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=k max=false min=true}a_i"
argument_list|)
argument_list|,
name|kpre
operator|+
literal|"double[@name='min'][.='9.0']"
argument_list|,
literal|"count("
operator|+
name|kpre
operator|+
literal|"*)=1"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"min=false: localparam stat means ignore default set, "
operator|+
literal|"but since only local param is false no stats should be returned"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=k min=false}a_i"
argument_list|)
comment|// section of stats for this field should exist ...
argument_list|,
name|XPRE
operator|+
literal|"lst[@name='stats_fields']/lst[@name='k']"
comment|// ...but be empty
argument_list|,
literal|"count("
operator|+
name|kpre
operator|+
literal|"*)=0"
argument_list|)
expr_stmt|;
name|double
name|sum
init|=
literal|0
decl_stmt|;
name|double
name|sumOfSquares
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|count
init|=
literal|20
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|int
name|a_i
init|=
name|i
operator|%
literal|10
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"a_f"
argument_list|,
literal|"2.3"
argument_list|,
literal|"b_f"
argument_list|,
literal|"9.7"
argument_list|,
literal|"a_i"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|a_i
argument_list|)
argument_list|,
literal|"foo_t"
argument_list|,
literal|"how now brown cow"
argument_list|)
argument_list|)
expr_stmt|;
name|tdigest
operator|.
name|add
argument_list|(
name|a_i
argument_list|)
expr_stmt|;
name|hll
operator|.
name|addRaw
argument_list|(
name|hasher
operator|.
name|hashInt
argument_list|(
name|a_i
argument_list|)
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|sum
operator|+=
name|a_i
expr_stmt|;
name|sumOfSquares
operator|+=
operator|(
name|a_i
operator|)
operator|*
operator|(
name|a_i
operator|)
expr_stmt|;
block|}
name|double
name|stddev
init|=
name|Math
operator|.
name|sqrt
argument_list|(
operator|(
operator|(
name|count
operator|*
name|sumOfSquares
operator|)
operator|-
operator|(
name|sum
operator|*
name|sum
operator|)
operator|)
operator|/
operator|(
literal|20
operator|*
operator|(
name|count
operator|-
literal|1.0D
operator|)
operator|)
argument_list|)
decl_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|ByteBuffer
name|tdigestBuf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|tdigest
operator|.
name|smallByteSize
argument_list|()
argument_list|)
decl_stmt|;
name|tdigest
operator|.
name|asSmallBytes
argument_list|(
name|tdigestBuf
argument_list|)
expr_stmt|;
name|byte
index|[]
name|hllBytes
init|=
name|hll
operator|.
name|toBytes
argument_list|()
decl_stmt|;
name|EnumSet
argument_list|<
name|Stat
argument_list|>
name|allStats
init|=
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Stat
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ExpectedStat
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|ExpectedStat
argument_list|>
argument_list|(
name|allStats
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|ExpectedStat
operator|.
name|createSimple
argument_list|(
name|Stat
operator|.
name|min
argument_list|,
literal|"true"
argument_list|,
literal|"double"
argument_list|,
literal|"0.0"
argument_list|)
expr_stmt|;
name|ExpectedStat
operator|.
name|createSimple
argument_list|(
name|Stat
operator|.
name|max
argument_list|,
literal|"true"
argument_list|,
literal|"double"
argument_list|,
literal|"9.0"
argument_list|)
expr_stmt|;
name|ExpectedStat
operator|.
name|createSimple
argument_list|(
name|Stat
operator|.
name|missing
argument_list|,
literal|"true"
argument_list|,
literal|"long"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|ExpectedStat
operator|.
name|createSimple
argument_list|(
name|Stat
operator|.
name|sum
argument_list|,
literal|"true"
argument_list|,
literal|"double"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|sum
argument_list|)
argument_list|)
expr_stmt|;
name|ExpectedStat
operator|.
name|createSimple
argument_list|(
name|Stat
operator|.
name|count
argument_list|,
literal|"true"
argument_list|,
literal|"long"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|count
argument_list|)
argument_list|)
expr_stmt|;
name|ExpectedStat
operator|.
name|createSimple
argument_list|(
name|Stat
operator|.
name|mean
argument_list|,
literal|"true"
argument_list|,
literal|"double"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|sum
operator|/
name|count
argument_list|)
argument_list|)
expr_stmt|;
name|ExpectedStat
operator|.
name|createSimple
argument_list|(
name|Stat
operator|.
name|sumOfSquares
argument_list|,
literal|"true"
argument_list|,
literal|"double"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|sumOfSquares
argument_list|)
argument_list|)
expr_stmt|;
name|ExpectedStat
operator|.
name|createSimple
argument_list|(
name|Stat
operator|.
name|stddev
argument_list|,
literal|"true"
argument_list|,
literal|"double"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|stddev
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|distinctValsXpath
init|=
literal|"count("
operator|+
name|kpre
operator|+
literal|"arr[@name='distinctValues']/*)=10"
decl_stmt|;
name|ExpectedStat
operator|.
name|create
argument_list|(
name|Stat
operator|.
name|distinctValues
argument_list|,
literal|"true"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|distinctValsXpath
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|distinctValsXpath
argument_list|)
argument_list|)
expr_stmt|;
name|ExpectedStat
operator|.
name|createSimple
argument_list|(
name|Stat
operator|.
name|countDistinct
argument_list|,
literal|"true"
argument_list|,
literal|"long"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|percentileShardXpath
init|=
name|kpre
operator|+
literal|"str[@name='percentiles'][.='"
operator|+
name|Base64
operator|.
name|byteArrayToBase64
argument_list|(
name|tdigestBuf
operator|.
name|array
argument_list|()
argument_list|,
literal|0
argument_list|,
name|tdigestBuf
operator|.
name|array
argument_list|()
operator|.
name|length
argument_list|)
operator|+
literal|"']"
decl_stmt|;
specifier|final
name|String
name|p90
init|=
literal|""
operator|+
name|tdigest
operator|.
name|quantile
argument_list|(
literal|0.90D
argument_list|)
decl_stmt|;
specifier|final
name|String
name|p99
init|=
literal|""
operator|+
name|tdigest
operator|.
name|quantile
argument_list|(
literal|0.99D
argument_list|)
decl_stmt|;
name|ExpectedStat
operator|.
name|create
argument_list|(
name|Stat
operator|.
name|percentiles
argument_list|,
literal|"'90, 99'"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|percentileShardXpath
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"count("
operator|+
name|kpre
operator|+
literal|"lst[@name='percentiles']/*)=2"
argument_list|,
name|kpre
operator|+
literal|"lst[@name='percentiles']/double[@name='90.0'][.="
operator|+
name|p90
operator|+
literal|"]"
argument_list|,
name|kpre
operator|+
literal|"lst[@name='percentiles']/double[@name='99.0'][.="
operator|+
name|p99
operator|+
literal|"]"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|cardinalityShardXpath
init|=
name|kpre
operator|+
literal|"str[@name='cardinality'][.='"
operator|+
name|Base64
operator|.
name|byteArrayToBase64
argument_list|(
name|hllBytes
argument_list|,
literal|0
argument_list|,
name|hllBytes
operator|.
name|length
argument_list|)
operator|+
literal|"']"
decl_stmt|;
specifier|final
name|String
name|cardinalityXpath
init|=
name|kpre
operator|+
literal|"long[@name='cardinality'][.='10']"
decl_stmt|;
name|ExpectedStat
operator|.
name|create
argument_list|(
name|Stat
operator|.
name|cardinality
argument_list|,
literal|"true"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|cardinalityShardXpath
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|cardinalityXpath
argument_list|)
argument_list|)
expr_stmt|;
comment|// canary in the coal mine
name|assertEquals
argument_list|(
literal|"num of ExpectedStat doesn't match all known stats; "
operator|+
literal|"enum was updated w/o updating test?"
argument_list|,
name|ExpectedStat
operator|.
name|ALL
operator|.
name|size
argument_list|()
argument_list|,
name|allStats
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// whitebox test: explicitly ask for isShard=true with each individual stat
for|for
control|(
name|ExpectedStat
name|expect
range|:
name|ExpectedStat
operator|.
name|ALL
operator|.
name|values
argument_list|()
control|)
block|{
name|Stat
name|stat
init|=
name|expect
operator|.
name|stat
decl_stmt|;
name|StringBuilder
name|exclude
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|testXpaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|5
operator|+
name|expect
operator|.
name|perShardXpaths
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|testXpaths
operator|.
name|addAll
argument_list|(
name|expect
operator|.
name|perShardXpaths
argument_list|)
expr_stmt|;
name|int
name|numKeysExpected
init|=
literal|0
decl_stmt|;
name|EnumSet
argument_list|<
name|Stat
argument_list|>
name|distribDeps
init|=
name|stat
operator|.
name|getDistribDeps
argument_list|()
decl_stmt|;
for|for
control|(
name|Stat
name|perShardDep
range|:
name|distribDeps
control|)
block|{
name|numKeysExpected
operator|++
expr_stmt|;
comment|// even if we go out of our way to exclude the dependent stats,
comment|// the shard should return them since they are a dependency for the requested stat
if|if
condition|(
operator|!
name|stat
operator|.
name|equals
argument_list|(
name|perShardDep
argument_list|)
condition|)
block|{
comment|// NOTE: this only works because all the cases where there are distribDeps
comment|// beyond a self dependency are simple true/false options
name|exclude
operator|.
name|append
argument_list|(
name|perShardDep
operator|+
literal|"=false "
argument_list|)
expr_stmt|;
block|}
block|}
comment|// we don't want to find anything we aren't expecting
name|testXpaths
operator|.
name|add
argument_list|(
literal|"count("
operator|+
name|kpre
operator|+
literal|"*)="
operator|+
name|numKeysExpected
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"ask for only "
operator|+
name|stat
operator|+
literal|", with isShard=true, and expect only deps: "
operator|+
name|distribDeps
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"isShard"
argument_list|,
literal|"true"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=k "
operator|+
name|exclude
operator|+
name|stat
operator|+
literal|"="
operator|+
name|expect
operator|.
name|input
operator|+
literal|"}a_i"
argument_list|)
argument_list|,
name|testXpaths
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|testXpaths
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// test all the possible combinations (of all possible sizes) of stats params
for|for
control|(
name|int
name|numParams
init|=
literal|1
init|;
name|numParams
operator|<=
name|allStats
operator|.
name|size
argument_list|()
condition|;
name|numParams
operator|++
control|)
block|{
for|for
control|(
name|EnumSet
argument_list|<
name|Stat
argument_list|>
name|set
range|:
operator|new
name|StatSetCombinations
argument_list|(
name|numParams
argument_list|,
name|allStats
argument_list|)
control|)
block|{
comment|// EnumSets use natural ordering, we want to randomize the order of the params
name|List
argument_list|<
name|Stat
argument_list|>
name|combo
init|=
operator|new
name|ArrayList
argument_list|<
name|Stat
argument_list|>
argument_list|(
name|set
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|combo
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|StringBuilder
name|paras
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"{!key=k "
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|testXpaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|numParams
operator|+
literal|5
argument_list|)
decl_stmt|;
name|int
name|numKeysExpected
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Stat
name|stat
range|:
name|combo
control|)
block|{
name|ExpectedStat
name|expect
init|=
name|ExpectedStat
operator|.
name|ALL
operator|.
name|get
argument_list|(
name|stat
argument_list|)
decl_stmt|;
name|paras
operator|.
name|append
argument_list|(
name|stat
operator|+
literal|"="
operator|+
name|expect
operator|.
name|input
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|numKeysExpected
operator|++
expr_stmt|;
name|testXpaths
operator|.
name|addAll
argument_list|(
name|expect
operator|.
name|finalXpaths
argument_list|)
expr_stmt|;
block|}
name|paras
operator|.
name|append
argument_list|(
literal|"}a_i"
argument_list|)
expr_stmt|;
comment|// we don't want to find anything we aren't expecting
name|testXpaths
operator|.
name|add
argument_list|(
literal|"count("
operator|+
name|kpre
operator|+
literal|"*)="
operator|+
name|numKeysExpected
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"ask for and get only: "
operator|+
name|combo
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
name|paras
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|testXpaths
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|testXpaths
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Test for Solr-6349
DECL|method|testCalcDistinctStats
specifier|public
name|void
name|testCalcDistinctStats
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|kpre
init|=
name|XPRE
operator|+
literal|"lst[@name='stats_fields']/lst[@name='k']/"
decl_stmt|;
specifier|final
name|String
name|min
init|=
literal|"count("
operator|+
name|kpre
operator|+
literal|"/double[@name='min'])"
decl_stmt|;
specifier|final
name|String
name|countDistinct
init|=
literal|"count("
operator|+
name|kpre
operator|+
literal|"/long[@name='countDistinct'])"
decl_stmt|;
specifier|final
name|String
name|distinctValues
init|=
literal|"count("
operator|+
name|kpre
operator|+
literal|"/arr[@name='distinctValues'])"
decl_stmt|;
specifier|final
name|int
name|count
init|=
literal|20
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"a_f"
argument_list|,
literal|"2.3"
argument_list|,
literal|"b_f"
argument_list|,
literal|"9.7"
argument_list|,
literal|"a_i"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|%
literal|10
argument_list|)
argument_list|,
literal|"foo_t"
argument_list|,
literal|"how now brown cow"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|baseParams
init|=
operator|new
name|String
index|[]
block|{
literal|"q"
block|,
literal|"*:*"
block|,
literal|"stats"
block|,
literal|"true"
block|,
literal|"indent"
block|,
literal|"true"
block|}
decl_stmt|;
for|for
control|(
name|SolrParams
name|p
range|:
operator|new
name|SolrParams
index|[]
block|{
name|params
argument_list|(
literal|"stats.field"
argument_list|,
literal|"{!key=k}a_i"
argument_list|)
block|,
name|params
argument_list|(
name|StatsParams
operator|.
name|STATS_CALC_DISTINCT
argument_list|,
literal|"false"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=k}a_i"
argument_list|)
block|,
name|params
argument_list|(
literal|"f.a_i."
operator|+
name|StatsParams
operator|.
name|STATS_CALC_DISTINCT
argument_list|,
literal|"false"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=k}a_i"
argument_list|)
block|,
name|params
argument_list|(
name|StatsParams
operator|.
name|STATS_CALC_DISTINCT
argument_list|,
literal|"true"
argument_list|,
literal|"f.a_i."
operator|+
name|StatsParams
operator|.
name|STATS_CALC_DISTINCT
argument_list|,
literal|"false"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=k}a_i"
argument_list|)
block|,
name|params
argument_list|(
literal|"stats.field"
argument_list|,
literal|"{!key=k min='true'}a_i"
argument_list|)
block|,
name|params
argument_list|(
name|StatsParams
operator|.
name|STATS_CALC_DISTINCT
argument_list|,
literal|"true"
argument_list|,
literal|"f.a_i."
operator|+
name|StatsParams
operator|.
name|STATS_CALC_DISTINCT
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=k min='true' calcdistinct='false'}a_i"
argument_list|)
block|,       }
control|)
block|{
name|assertQ
argument_list|(
literal|"min is either default or explicitly requested; "
operator|+
literal|"countDistinct& distinctValues either default or explicitly prevented"
argument_list|,
name|req
argument_list|(
name|p
argument_list|,
name|baseParams
argument_list|)
argument_list|,
name|min
operator|+
literal|"=1"
argument_list|,
name|countDistinct
operator|+
literal|"=0"
argument_list|,
name|distinctValues
operator|+
literal|"=0"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SolrParams
name|p
range|:
operator|new
name|SolrParams
index|[]
block|{
name|params
argument_list|(
literal|"stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=k}a_i"
argument_list|)
block|,
name|params
argument_list|(
literal|"f.a_i."
operator|+
name|StatsParams
operator|.
name|STATS_CALC_DISTINCT
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=k}a_i"
argument_list|)
block|,
name|params
argument_list|(
literal|"stats.calcdistinct"
argument_list|,
literal|"false"
argument_list|,
literal|"f.a_i."
operator|+
name|StatsParams
operator|.
name|STATS_CALC_DISTINCT
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=k}a_i"
argument_list|)
block|,
name|params
argument_list|(
literal|"stats.calcdistinct"
argument_list|,
literal|"false "
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=k min=true calcdistinct=true}a_i"
argument_list|)
block|,
name|params
argument_list|(
literal|"f.a_i."
operator|+
name|StatsParams
operator|.
name|STATS_CALC_DISTINCT
argument_list|,
literal|"false"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=k min=true calcdistinct=true}a_i"
argument_list|)
block|,
name|params
argument_list|(
literal|"stats.calcdistinct"
argument_list|,
literal|"false "
argument_list|,
literal|"f.a_i."
operator|+
name|StatsParams
operator|.
name|STATS_CALC_DISTINCT
argument_list|,
literal|"false"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=k min=true calcdistinct=true}a_i"
argument_list|)
block|,       }
control|)
block|{
name|assertQ
argument_list|(
literal|"min is either default or explicitly requested; "
operator|+
literal|"countDistinct& distinctValues explicitly requested"
argument_list|,
name|req
argument_list|(
name|p
argument_list|,
name|baseParams
argument_list|)
argument_list|,
name|min
operator|+
literal|"=1"
argument_list|,
name|countDistinct
operator|+
literal|"=1"
argument_list|,
name|distinctValues
operator|+
literal|"=1"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SolrParams
name|p
range|:
operator|new
name|SolrParams
index|[]
block|{
name|params
argument_list|(
literal|"stats.field"
argument_list|,
literal|"{!key=k calcdistinct=true}a_i"
argument_list|)
block|,
name|params
argument_list|(
literal|"stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=k min='false'}a_i"
argument_list|)
block|,
name|params
argument_list|(
literal|"stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=k max='true' min='false'}a_i"
argument_list|)
block|,
name|params
argument_list|(
literal|"stats.calcdistinct"
argument_list|,
literal|"false"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=k calcdistinct=true}a_i"
argument_list|)
block|,
name|params
argument_list|(
literal|"f.a_i."
operator|+
name|StatsParams
operator|.
name|STATS_CALC_DISTINCT
argument_list|,
literal|"false"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=k calcdistinct=true}a_i"
argument_list|)
block|,
name|params
argument_list|(
literal|"stats.calcdistinct"
argument_list|,
literal|"false"
argument_list|,
literal|"f.a_i."
operator|+
name|StatsParams
operator|.
name|STATS_CALC_DISTINCT
argument_list|,
literal|"false"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=k calcdistinct=true}a_i"
argument_list|)
block|,
name|params
argument_list|(
literal|"stats.calcdistinct"
argument_list|,
literal|"false"
argument_list|,
literal|"f.a_i."
operator|+
name|StatsParams
operator|.
name|STATS_CALC_DISTINCT
argument_list|,
literal|"false"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=k min='false' calcdistinct=true}a_i"
argument_list|)
block|,       }
control|)
block|{
name|assertQ
argument_list|(
literal|"min is explicitly excluded; "
operator|+
literal|"countDistinct& distinctValues explicitly requested"
argument_list|,
name|req
argument_list|(
name|p
argument_list|,
name|baseParams
argument_list|)
argument_list|,
name|min
operator|+
literal|"=0"
argument_list|,
name|countDistinct
operator|+
literal|"=1"
argument_list|,
name|distinctValues
operator|+
literal|"=1"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SolrParams
name|p
range|:
operator|new
name|SolrParams
index|[]
block|{
name|params
argument_list|(
name|StatsParams
operator|.
name|STATS_CALC_DISTINCT
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=k min=true}a_i"
argument_list|)
block|,
name|params
argument_list|(
literal|"f.a_i.stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=k min=true}a_i"
argument_list|)
block|,
name|params
argument_list|(
name|StatsParams
operator|.
name|STATS_CALC_DISTINCT
argument_list|,
literal|"false"
argument_list|,
literal|"f.a_i.stats.calcdistinct"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=k min=true}a_i"
argument_list|)
block|,
name|params
argument_list|(
literal|"f.a_i.stats.calcdistinct"
argument_list|,
literal|"false"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=k min=true calcdistinct=true}a_i"
argument_list|)
block|,
name|params
argument_list|(
name|StatsParams
operator|.
name|STATS_CALC_DISTINCT
argument_list|,
literal|"false"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=k min=true calcdistinct=true}a_i"
argument_list|)
block|,
name|params
argument_list|(
name|StatsParams
operator|.
name|STATS_CALC_DISTINCT
argument_list|,
literal|"false"
argument_list|,
literal|"f.a_i.stats.calcdistinct"
argument_list|,
literal|"false"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=k min=true calcdistinct=true}a_i"
argument_list|)
block|,       }
control|)
block|{
name|assertQ
argument_list|(
literal|"min is explicitly requested; "
operator|+
literal|"countDistinct& distinctValues explicitly requested"
argument_list|,
name|req
argument_list|(
name|p
argument_list|,
name|baseParams
argument_list|)
argument_list|,
name|min
operator|+
literal|"=1"
argument_list|,
name|countDistinct
operator|+
literal|"=1"
argument_list|,
name|distinctValues
operator|+
literal|"=1"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Helper used in {@link #testCardinality} */
DECL|method|cardinalityXpath
specifier|public
specifier|static
name|String
name|cardinalityXpath
parameter_list|(
name|String
name|key
parameter_list|,
name|int
name|cardinality
parameter_list|)
block|{
return|return
name|XPRE
operator|+
literal|"lst[@name='stats_fields']/lst[@name='"
operator|+
name|key
operator|+
literal|"']/long[@name='cardinality'][.='"
operator|+
name|cardinality
operator|+
literal|"']"
return|;
block|}
comment|/** @see #testHllOptions */
DECL|method|testCardinality
specifier|public
name|void
name|testCardinality
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
comment|// insure we have the same hasher a_l would use
name|HashFunction
name|hasher
init|=
name|HllOptions
operator|.
name|parseHllOptions
argument_list|(
name|params
argument_list|(
literal|"cardinality"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
name|core
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
literal|"a_l"
argument_list|)
argument_list|)
operator|.
name|getHasher
argument_list|()
decl_stmt|;
name|String
index|[]
name|baseParams
init|=
operator|new
name|String
index|[]
block|{
literal|"q"
block|,
literal|"*:*"
block|,
literal|"stats"
block|,
literal|"true"
block|,
literal|"indent"
block|,
literal|"true"
block|,
literal|"rows"
block|,
literal|"0"
block|}
decl_stmt|;
name|assertQ
argument_list|(
literal|"empty cardinalities"
argument_list|,
name|req
argument_list|(
name|params
argument_list|(
literal|"stats.field"
argument_list|,
literal|"{!key=a cardinality=true}a_l"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=pa cardinality=true}prehashed_a_l"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=b cardinality=true}b_l"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=c cardinality=true}c_l"
argument_list|)
argument_list|,
name|baseParams
argument_list|)
argument_list|,
name|cardinalityXpath
argument_list|(
literal|"a"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|cardinalityXpath
argument_list|(
literal|"pa"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|cardinalityXpath
argument_list|(
literal|"b"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|cardinalityXpath
argument_list|(
literal|"c"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
comment|// add trivial docs to test basic cardinality
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
comment|// add the same values multiple times (diff docs)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|5
condition|;
name|j
operator|++
control|)
block|{
operator|++
name|id
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|id
argument_list|,
literal|"a_l"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
literal|"prehashed_a_l"
argument_list|,
literal|""
operator|+
name|hasher
operator|.
name|hashLong
argument_list|(
operator|(
name|long
operator|)
name|i
argument_list|)
operator|.
name|asLong
argument_list|()
argument_list|,
literal|"b_l"
argument_list|,
literal|""
operator|+
operator|(
name|i
operator|%
literal|7
operator|)
argument_list|,
literal|"c_l"
argument_list|,
literal|""
operator|+
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"various cardinalities"
argument_list|,
name|req
argument_list|(
name|params
argument_list|(
literal|"stats.field"
argument_list|,
literal|"{!key=a cardinality=true}a_l"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=pa hllPreHashed=true cardinality=true}prehashed_a_l"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=b cardinality=true}b_l"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=c cardinality=true}c_l"
argument_list|)
argument_list|,
name|baseParams
argument_list|)
argument_list|,
name|cardinalityXpath
argument_list|(
literal|"a"
argument_list|,
literal|100
argument_list|)
argument_list|,
name|cardinalityXpath
argument_list|(
literal|"pa"
argument_list|,
literal|100
argument_list|)
argument_list|,
name|cardinalityXpath
argument_list|(
literal|"b"
argument_list|,
literal|7
argument_list|)
argument_list|,
name|cardinalityXpath
argument_list|(
literal|"c"
argument_list|,
literal|500
argument_list|)
argument_list|)
expr_stmt|;
comment|// various ways of explicitly saying "don't bother to compute cardinality"
for|for
control|(
name|SolrParams
name|p
range|:
operator|new
name|SolrParams
index|[]
block|{
name|params
argument_list|(
literal|"stats.field"
argument_list|,
literal|"{!key=a min=true cardinality=false}a_l"
argument_list|)
block|,
name|params
argument_list|(
literal|"stats.field"
argument_list|,
literal|"{!key=a min=true cardinality=$doit}a_l"
argument_list|,
literal|"doit"
argument_list|,
literal|"false"
argument_list|)
block|,
name|params
argument_list|(
literal|"stats.field"
argument_list|,
literal|"{!key=a min=true cardinality=$doit}a_l"
argument_list|)
block|,
comment|// missing doit param
comment|// other tunning options shouldn't change things
name|params
argument_list|(
literal|"stats.field"
argument_list|,
literal|"{!key=a min=true hllPreHashed=true cardinality=false}a_l"
argument_list|)
block|,
name|params
argument_list|(
literal|"stats.field"
argument_list|,
literal|"{!key=a min=true hllRegwidth=4 cardinality=$doit}a_l"
argument_list|,
literal|"doit"
argument_list|,
literal|"false"
argument_list|)
block|,
name|params
argument_list|(
literal|"stats.field"
argument_list|,
literal|"{!key=a min=true hllLog2m=18 cardinality=$doit}a_l"
argument_list|)
block|,
comment|// missing doit param
block|}
control|)
block|{
name|assertQ
argument_list|(
literal|"min w/cardinality explicitly disabled"
argument_list|,
name|req
argument_list|(
name|p
argument_list|,
name|baseParams
argument_list|)
argument_list|,
literal|"count(//lst[@name='stats_fields']/lst[@name='a']/double[@name='min'])=1"
argument_list|,
literal|"count(//lst[@name='stats_fields']/lst[@name='a']/long[@name='cardinality'])=0"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * whitebox test that HLL Option parsing does the right thing    * @see #testCardinality     * @see #testHllOptionsErrors    */
DECL|method|testHllOptions
specifier|public
name|void
name|testHllOptions
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|SchemaField
name|field_l
init|=
name|core
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field_l"
argument_list|)
decl_stmt|;
name|SchemaField
name|field_d
init|=
name|core
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field_d"
argument_list|)
decl_stmt|;
name|SchemaField
name|field_dt
init|=
name|core
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field_dt"
argument_list|)
decl_stmt|;
name|SchemaField
name|field_s
init|=
name|core
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field_s"
argument_list|)
decl_stmt|;
name|SchemaField
name|field_i
init|=
name|core
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field_i"
argument_list|)
decl_stmt|;
name|SchemaField
name|field_f
init|=
name|core
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
literal|"field_f"
argument_list|)
decl_stmt|;
name|SchemaField
name|field_severity
init|=
name|core
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
literal|"severity"
argument_list|)
decl_stmt|;
comment|// simple cases that shouldn't use HLL
name|assertNull
argument_list|(
name|HllOptions
operator|.
name|parseHllOptions
argument_list|(
name|params
argument_list|()
argument_list|,
name|field_l
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|HllOptions
operator|.
name|parseHllOptions
argument_list|(
name|params
argument_list|(
literal|"cardinality"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
name|field_l
argument_list|)
argument_list|)
expr_stmt|;
comment|// sanity check, future proof againts the HLL library changing stuff on us
name|assertEquals
argument_list|(
literal|"HLL Changed definition min for log2m, "
operator|+
literal|"need to note in upgrade instructions and maybe adjust accuracy hueristic"
argument_list|,
literal|4
argument_list|,
name|HLL
operator|.
name|MINIMUM_LOG2M_PARAM
argument_list|)
expr_stmt|;
comment|// NOTE: https://github.com/aggregateknowledge/java-hll/issues/14
name|assertEquals
argument_list|(
literal|"HLL Changed definition max for log2m, "
operator|+
literal|"need to note in upgrade instructions and maybe adjust accuracy hueristic"
argument_list|,
literal|30
argument_list|,
name|HLL
operator|.
name|MAXIMUM_LOG2M_PARAM
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"HLL Changed definition min for regwidth, "
operator|+
literal|"need to note in upgrade instructions and probably adjust hueristic"
argument_list|,
literal|1
argument_list|,
name|HLL
operator|.
name|MINIMUM_REGWIDTH_PARAM
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"HLL Changed definition max for regwidth, "
operator|+
literal|"need to note in upgrade instructions and probably adjust hueristic"
argument_list|,
literal|8
argument_list|,
name|HLL
operator|.
name|MAXIMUM_REGWIDTH_PARAM
argument_list|)
expr_stmt|;
comment|// all of these should produce equivilent HLLOptions (Long, Double, or String using defaults)
name|SolrParams
index|[]
name|longDefaultParams
init|=
operator|new
name|SolrParams
index|[]
block|{
comment|// basic usage
name|params
argument_list|(
literal|"cardinality"
argument_list|,
literal|"true"
argument_list|)
block|,
name|params
argument_list|(
literal|"cardinality"
argument_list|,
literal|"0.33"
argument_list|)
block|,
comment|// expert level options
name|params
argument_list|(
literal|"cardinality"
argument_list|,
literal|"true"
argument_list|,
literal|"hllLog2m"
argument_list|,
literal|"13"
argument_list|)
block|,
name|params
argument_list|(
literal|"cardinality"
argument_list|,
literal|"true"
argument_list|,
literal|"hllRegwidth"
argument_list|,
literal|"6"
argument_list|)
block|,
name|params
argument_list|(
literal|"cardinality"
argument_list|,
literal|"true"
argument_list|,
literal|"hllPreHash"
argument_list|,
literal|"false"
argument_list|)
block|,
name|params
argument_list|(
literal|"cardinality"
argument_list|,
literal|"true"
argument_list|,
literal|"hllLog2m"
argument_list|,
literal|"13"
argument_list|,
literal|"hllRegwidth"
argument_list|,
literal|"6"
argument_list|,
literal|"hllPreHash"
argument_list|,
literal|"false"
argument_list|)
block|,
comment|// explicit hllLog2M should override numeric arg
name|params
argument_list|(
literal|"cardinality"
argument_list|,
literal|"1.0"
argument_list|,
literal|"hllLog2m"
argument_list|,
literal|"13"
argument_list|,
literal|"hllRegwidth"
argument_list|,
literal|"6"
argument_list|)
block|,
name|params
argument_list|(
literal|"cardinality"
argument_list|,
literal|"0.0"
argument_list|,
literal|"hllLog2m"
argument_list|,
literal|"13"
argument_list|,
literal|"hllRegwidth"
argument_list|,
literal|"6"
argument_list|,
literal|"hllPreHash"
argument_list|,
literal|"false"
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|SchemaField
name|field
range|:
operator|new
name|SchemaField
index|[]
block|{
name|field_l
block|,
name|field_d
block|,
name|field_dt
block|,
name|field_s
block|}
control|)
block|{
specifier|final
name|String
name|f
init|=
name|field
operator|.
name|getName
argument_list|()
decl_stmt|;
for|for
control|(
name|SolrParams
name|p
range|:
name|longDefaultParams
control|)
block|{
name|HllOptions
name|opts
init|=
name|HllOptions
operator|.
name|parseHllOptions
argument_list|(
name|p
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|f
operator|+
literal|" long defaults: "
operator|+
name|p
argument_list|,
literal|13
argument_list|,
name|opts
operator|.
name|getLog2m
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|+
literal|" long defaults: "
operator|+
name|p
argument_list|,
literal|6
argument_list|,
name|opts
operator|.
name|getRegwidth
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|f
operator|+
literal|" long defaults: "
operator|+
name|p
argument_list|,
name|opts
operator|.
name|getHasher
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// non defaults: lower/upper accuracy bounds should give min/max log2m& adjusted regwidth
name|HllOptions
name|optsMin
init|=
name|HllOptions
operator|.
name|parseHllOptions
argument_list|(
name|params
argument_list|(
literal|"cardinality"
argument_list|,
literal|"0"
argument_list|)
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|f
operator|+
literal|" min log2m"
argument_list|,
name|HLL
operator|.
name|MINIMUM_LOG2M_PARAM
argument_list|,
name|optsMin
operator|.
name|getLog2m
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|+
literal|" min regwidth"
argument_list|,
literal|5
argument_list|,
name|optsMin
operator|.
name|getRegwidth
argument_list|()
argument_list|)
expr_stmt|;
comment|// lowest hueristic for 64bit
name|HllOptions
name|optsMax
init|=
name|HllOptions
operator|.
name|parseHllOptions
argument_list|(
name|params
argument_list|(
literal|"cardinality"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|f
operator|+
literal|" max log2m"
argument_list|,
name|HLL
operator|.
name|MAXIMUM_LOG2M_PARAM
argument_list|,
name|optsMax
operator|.
name|getLog2m
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|+
literal|" max regwidth"
argument_list|,
name|HLL
operator|.
name|MAXIMUM_REGWIDTH_PARAM
argument_list|,
name|optsMax
operator|.
name|getRegwidth
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// all of these should produce equivilent HLLOptions (Int, Float, or ValueSource using defaults)
name|SolrParams
index|[]
name|intDefaultParams
init|=
operator|new
name|SolrParams
index|[]
block|{
comment|// basic usage
name|params
argument_list|(
literal|"cardinality"
argument_list|,
literal|"true"
argument_list|)
block|,
name|params
argument_list|(
literal|"cardinality"
argument_list|,
literal|"0.33"
argument_list|)
block|,
comment|// expert level options
name|params
argument_list|(
literal|"cardinality"
argument_list|,
literal|"true"
argument_list|,
literal|"hllLog2m"
argument_list|,
literal|"13"
argument_list|)
block|,
name|params
argument_list|(
literal|"cardinality"
argument_list|,
literal|"true"
argument_list|,
literal|"hllRegwidth"
argument_list|,
literal|"5"
argument_list|)
block|,
name|params
argument_list|(
literal|"cardinality"
argument_list|,
literal|"true"
argument_list|,
literal|"hllPreHash"
argument_list|,
literal|"false"
argument_list|)
block|,
name|params
argument_list|(
literal|"cardinality"
argument_list|,
literal|"true"
argument_list|,
literal|"hllLog2m"
argument_list|,
literal|"13"
argument_list|,
literal|"hllRegwidth"
argument_list|,
literal|"5"
argument_list|,
literal|"hllPreHash"
argument_list|,
literal|"false"
argument_list|)
block|,
comment|// explicit hllLog2M& hllRegwidth should override hueristic float arg
name|params
argument_list|(
literal|"cardinality"
argument_list|,
literal|"1.0"
argument_list|,
literal|"hllLog2m"
argument_list|,
literal|"13"
argument_list|,
literal|"hllRegwidth"
argument_list|,
literal|"5"
argument_list|)
block|,
name|params
argument_list|(
literal|"cardinality"
argument_list|,
literal|"0.0"
argument_list|,
literal|"hllLog2m"
argument_list|,
literal|"13"
argument_list|,
literal|"hllRegwidth"
argument_list|,
literal|"5"
argument_list|,
literal|"hllPreHash"
argument_list|,
literal|"false"
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|SchemaField
name|field
range|:
operator|new
name|SchemaField
index|[]
block|{
name|field_i
block|,
name|field_f
block|,
name|field_severity
block|,
literal|null
block|}
control|)
block|{
specifier|final
name|String
name|f
init|=
literal|null
operator|==
name|field
condition|?
literal|"(func)"
else|:
name|field
operator|.
name|getName
argument_list|()
decl_stmt|;
for|for
control|(
name|SolrParams
name|p
range|:
name|intDefaultParams
control|)
block|{
name|HllOptions
name|opts
init|=
name|HllOptions
operator|.
name|parseHllOptions
argument_list|(
name|p
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|f
operator|+
literal|" int defaults: "
operator|+
name|p
argument_list|,
literal|13
argument_list|,
name|opts
operator|.
name|getLog2m
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|+
literal|" int defaults: "
operator|+
name|p
argument_list|,
literal|5
argument_list|,
name|opts
operator|.
name|getRegwidth
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|f
operator|+
literal|" int defaults: "
operator|+
name|p
argument_list|,
name|opts
operator|.
name|getHasher
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// non defaults: lower/upper accuracy bounds should give min/max log2m& adjusted regwidth
name|HllOptions
name|optsMin
init|=
name|HllOptions
operator|.
name|parseHllOptions
argument_list|(
name|params
argument_list|(
literal|"cardinality"
argument_list|,
literal|"0"
argument_list|)
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|f
operator|+
literal|" min log2m"
argument_list|,
name|HLL
operator|.
name|MINIMUM_LOG2M_PARAM
argument_list|,
name|optsMin
operator|.
name|getLog2m
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|+
literal|" min regwidth"
argument_list|,
literal|4
argument_list|,
name|optsMin
operator|.
name|getRegwidth
argument_list|()
argument_list|)
expr_stmt|;
comment|// lowest hueristic for 32bit
name|HllOptions
name|optsMax
init|=
name|HllOptions
operator|.
name|parseHllOptions
argument_list|(
name|params
argument_list|(
literal|"cardinality"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|f
operator|+
literal|" max log2m"
argument_list|,
name|HLL
operator|.
name|MAXIMUM_LOG2M_PARAM
argument_list|,
name|optsMax
operator|.
name|getLog2m
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|+
literal|" max regwidth"
argument_list|,
name|HLL
operator|.
name|MAXIMUM_REGWIDTH_PARAM
argument_list|,
name|optsMax
operator|.
name|getRegwidth
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// basic pre-hashed arg check specifically for long fields
name|assertNotNull
argument_list|(
name|HllOptions
operator|.
name|parseHllOptions
argument_list|(
name|params
argument_list|(
literal|"cardinality"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
name|field_l
argument_list|)
operator|.
name|getHasher
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|HllOptions
operator|.
name|parseHllOptions
argument_list|(
name|params
argument_list|(
literal|"cardinality"
argument_list|,
literal|"true"
argument_list|,
literal|"hllPreHashed"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
name|field_l
argument_list|)
operator|.
name|getHasher
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|HllOptions
operator|.
name|parseHllOptions
argument_list|(
name|params
argument_list|(
literal|"cardinality"
argument_list|,
literal|"true"
argument_list|,
literal|"hllPreHashed"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
name|field_l
argument_list|)
operator|.
name|getHasher
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test user input errors (split into it's own test to isolate ignored exceptions    * @see #testCardinality     * @see #testHllOptions    */
DECL|method|testHllOptionsErrors
specifier|public
name|void
name|testHllOptionsErrors
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|baseParams
init|=
operator|new
name|String
index|[]
block|{
literal|"q"
block|,
literal|"*:*"
block|,
literal|"stats"
block|,
literal|"true"
block|,
literal|"indent"
block|,
literal|"true"
block|,
literal|"rows"
block|,
literal|"0"
block|}
decl_stmt|;
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|SchemaField
name|foo_s
init|=
name|core
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
literal|"foo_s"
argument_list|)
decl_stmt|;
name|SchemaField
name|foo_i
init|=
name|core
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
literal|"foo_i"
argument_list|)
decl_stmt|;
name|ignoreException
argument_list|(
literal|"hllPreHashed"
argument_list|)
expr_stmt|;
for|for
control|(
name|SchemaField
name|field
range|:
operator|new
name|SchemaField
index|[]
block|{
name|foo_s
block|,
name|foo_i
block|}
control|)
block|{
comment|// whitebox - field
try|try
block|{
name|HllOptions
operator|.
name|parseHllOptions
argument_list|(
name|params
argument_list|(
literal|"cardinality"
argument_list|,
literal|"true"
argument_list|,
literal|"hllPreHashed"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"hllPreHashed should have failed for "
operator|+
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"MSG: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"hllPreHashed is only supported with Long"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// blackbox - field
name|assertQEx
argument_list|(
literal|"hllPreHashed "
operator|+
name|field
operator|.
name|getName
argument_list|()
argument_list|,
literal|"hllPreHashed is only supported with Long"
argument_list|,
name|req
argument_list|(
name|params
argument_list|(
literal|"stats.field"
argument_list|,
literal|"{!cardinality=true hllPreHashed=true}"
operator|+
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|baseParams
argument_list|)
argument_list|,
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
comment|// whitebox - function
try|try
block|{
name|HllOptions
operator|.
name|parseHllOptions
argument_list|(
name|params
argument_list|(
literal|"cardinality"
argument_list|,
literal|"true"
argument_list|,
literal|"hllPreHashed"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"hllPreHashed should have failed for function"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"MSG: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"hllPreHashed is only supported with Long"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// blackbox - function
name|assertQEx
argument_list|(
literal|"hllPreHashed function"
argument_list|,
literal|"hllPreHashed is only supported with Long"
argument_list|,
name|req
argument_list|(
name|params
argument_list|(
literal|"stats.field"
argument_list|,
literal|"{!func cardinality=true hllPreHashed=true}sum(foo_i,foo_l)"
argument_list|)
argument_list|,
name|baseParams
argument_list|)
argument_list|,
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
name|ignoreException
argument_list|(
literal|"accuracy"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|invalid
range|:
operator|new
name|String
index|[]
block|{
literal|"-1"
block|,
literal|"1.1"
block|,
literal|"100"
block|}
control|)
block|{
comment|// whitebox
try|try
block|{
name|Object
name|trash
init|=
name|HllOptions
operator|.
name|parseHllOptions
argument_list|(
name|params
argument_list|(
literal|"cardinality"
argument_list|,
name|invalid
argument_list|)
argument_list|,
name|foo_s
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Should have failed: "
operator|+
name|invalid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"MSG: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"number between 0 and 1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// blackbox
name|assertQEx
argument_list|(
literal|"cardinality="
operator|+
name|invalid
argument_list|,
literal|"number between 0 and 1"
argument_list|,
name|req
argument_list|(
name|params
argument_list|(
literal|"stats.field"
argument_list|,
literal|"{!cardinality="
operator|+
name|invalid
operator|+
literal|"}foo_s"
argument_list|)
argument_list|,
name|baseParams
argument_list|)
argument_list|,
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
name|ignoreException
argument_list|(
literal|"hllLog2m must be"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|invalid
range|:
operator|new
name|int
index|[]
block|{
name|HLL
operator|.
name|MINIMUM_LOG2M_PARAM
operator|-
literal|1
block|,
name|HLL
operator|.
name|MAXIMUM_LOG2M_PARAM
operator|+
literal|11
block|}
control|)
block|{
comment|// whitebox
try|try
block|{
name|Object
name|trash
init|=
name|HllOptions
operator|.
name|parseHllOptions
argument_list|(
name|params
argument_list|(
literal|"cardinality"
argument_list|,
literal|"true"
argument_list|,
literal|"hllLog2m"
argument_list|,
literal|""
operator|+
name|invalid
argument_list|)
argument_list|,
name|foo_s
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Should have failed: "
operator|+
name|invalid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"MSG: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"hllLog2m must be"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// blackbox
name|assertQEx
argument_list|(
literal|"hllLog2m="
operator|+
name|invalid
argument_list|,
literal|"hllLog2m must be"
argument_list|,
name|req
argument_list|(
name|params
argument_list|(
literal|"stats.field"
argument_list|,
literal|"{!cardinality=true hllLog2m="
operator|+
name|invalid
operator|+
literal|"}foo_s"
argument_list|)
argument_list|,
name|baseParams
argument_list|)
argument_list|,
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
name|ignoreException
argument_list|(
literal|"hllRegwidth must be"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|invalid
range|:
operator|new
name|int
index|[]
block|{
name|HLL
operator|.
name|MINIMUM_REGWIDTH_PARAM
operator|-
literal|1
block|,
name|HLL
operator|.
name|MAXIMUM_REGWIDTH_PARAM
operator|+
literal|1
block|}
control|)
block|{
comment|// whitebox
try|try
block|{
name|Object
name|trash
init|=
name|HllOptions
operator|.
name|parseHllOptions
argument_list|(
name|params
argument_list|(
literal|"cardinality"
argument_list|,
literal|"true"
argument_list|,
literal|"hllRegwidth"
argument_list|,
literal|""
operator|+
name|invalid
argument_list|)
argument_list|,
name|foo_s
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Should have failed: "
operator|+
name|invalid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"MSG: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"hllRegwidth must be"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// blackbox
name|assertQEx
argument_list|(
literal|"hllRegwidth="
operator|+
name|invalid
argument_list|,
literal|"hllRegwidth must be"
argument_list|,
name|req
argument_list|(
name|params
argument_list|(
literal|"stats.field"
argument_list|,
literal|"{!cardinality=true hllRegwidth="
operator|+
name|invalid
operator|+
literal|"}foo_s"
argument_list|)
argument_list|,
name|baseParams
argument_list|)
argument_list|,
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
block|}
comment|// simple percentiles test
DECL|method|testPercentiles
specifier|public
name|void
name|testPercentiles
parameter_list|()
throws|throws
name|Exception
block|{
comment|// NOTE: deliberately not in numeric order
name|String
name|percentiles
init|=
literal|"10.0,99.9,1.0,2.0,20.0,30.0,40.0,50.0,60.0,70.0,80.0,98.0,99.0"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|percentilesList
init|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|percentiles
argument_list|,
literal|','
argument_list|)
decl_stmt|;
comment|// test empty case
name|SolrQueryRequest
name|query
init|=
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!percentiles='"
operator|+
name|percentiles
operator|+
literal|"'}stat_f"
argument_list|)
decl_stmt|;
try|try
block|{
name|SolrQueryResponse
name|rsp
init|=
name|h
operator|.
name|queryAndResponse
argument_list|(
literal|null
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Double
argument_list|>
name|pout
init|=
name|extractPercentils
argument_list|(
name|rsp
argument_list|,
literal|"stat_f"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|percentilesList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// ensure exact order, but all values should be null (empty result set)
name|assertEquals
argument_list|(
name|percentilesList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|pout
operator|.
name|getName
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|pout
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|query
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|int
name|id
init|=
literal|0
decl_stmt|;
comment|// add trivial docs to test basic percentiles
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
comment|// add the same values multiple times (diff docs)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|5
condition|;
name|j
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
operator|++
name|id
operator|+
literal|""
argument_list|,
literal|"stat_f"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!percentiles='"
operator|+
name|percentiles
operator|+
literal|"'}stat_f"
argument_list|)
expr_stmt|;
try|try
block|{
name|SolrQueryResponse
name|rsp
init|=
name|h
operator|.
name|queryAndResponse
argument_list|(
literal|null
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Double
argument_list|>
name|pout
init|=
name|extractPercentils
argument_list|(
name|rsp
argument_list|,
literal|"stat_f"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|percentilesList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|p
init|=
name|percentilesList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|p
argument_list|,
name|pout
operator|.
name|getName
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|p
argument_list|)
argument_list|,
name|pout
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
argument_list|,
literal|1.0D
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|query
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// test request for no percentiles
name|query
operator|=
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!percentiles=''}stat_f"
argument_list|)
expr_stmt|;
try|try
block|{
name|SolrQueryResponse
name|rsp
init|=
name|h
operator|.
name|queryAndResponse
argument_list|(
literal|null
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Double
argument_list|>
name|pout
init|=
name|extractPercentils
argument_list|(
name|rsp
argument_list|,
literal|"stat_f"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|pout
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|query
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// non-numeric types don't support percentiles
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
operator|++
name|id
operator|+
literal|""
argument_list|,
literal|"stat_dt"
argument_list|,
literal|"1999-05-03T04:55:01Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
operator|++
name|id
operator|+
literal|""
argument_list|,
literal|"stat_s"
argument_list|,
literal|"cow"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!percentiles='"
operator|+
name|percentiles
operator|+
literal|"'}stat_dt"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!percentiles='"
operator|+
name|percentiles
operator|+
literal|"'}stat_s"
argument_list|)
expr_stmt|;
try|try
block|{
name|SolrQueryResponse
name|rsp
init|=
name|h
operator|.
name|queryAndResponse
argument_list|(
literal|null
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|extractPercentils
argument_list|(
name|rsp
argument_list|,
literal|"stat_dt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|extractPercentils
argument_list|(
name|rsp
argument_list|,
literal|"stat_s"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|query
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|extractPercentils
specifier|private
name|NamedList
argument_list|<
name|Double
argument_list|>
name|extractPercentils
parameter_list|(
name|SolrQueryResponse
name|rsp
parameter_list|,
name|String
name|key
parameter_list|)
block|{
return|return
operator|(
operator|(
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|Double
argument_list|>
argument_list|>
argument_list|>
argument_list|>
operator|)
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|"stats"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"stats_fields"
argument_list|)
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|get
argument_list|(
literal|"percentiles"
argument_list|)
return|;
block|}
comment|/**     * given a comboSize and an EnumSet of Stats, generates iterators that produce every possible    * enum combination of that size     */
DECL|class|StatSetCombinations
specifier|public
specifier|static
specifier|final
class|class
name|StatSetCombinations
implements|implements
name|Iterable
argument_list|<
name|EnumSet
argument_list|<
name|Stat
argument_list|>
argument_list|>
block|{
comment|// we need an array so we can do fixed index offset lookups
DECL|field|all
specifier|private
specifier|final
name|Stat
index|[]
name|all
decl_stmt|;
DECL|field|intCombos
specifier|private
specifier|final
name|Combinations
name|intCombos
decl_stmt|;
DECL|method|StatSetCombinations
specifier|public
name|StatSetCombinations
parameter_list|(
name|int
name|comboSize
parameter_list|,
name|EnumSet
argument_list|<
name|Stat
argument_list|>
name|universe
parameter_list|)
block|{
comment|// NOTE: should not need to sort, EnumSet uses natural ordering
name|all
operator|=
name|universe
operator|.
name|toArray
argument_list|(
operator|new
name|Stat
index|[
name|universe
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|intCombos
operator|=
operator|new
name|Combinations
argument_list|(
name|all
operator|.
name|length
argument_list|,
name|comboSize
argument_list|)
expr_stmt|;
block|}
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|EnumSet
argument_list|<
name|Stat
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|EnumSet
argument_list|<
name|Stat
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|int
index|[]
argument_list|>
name|wrapped
init|=
name|intCombos
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|wrapped
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|wrapped
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
name|EnumSet
argument_list|<
name|Stat
argument_list|>
name|next
parameter_list|()
block|{
name|EnumSet
argument_list|<
name|Stat
argument_list|>
name|result
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Stat
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
index|[]
name|indexes
init|=
name|wrapped
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|all
index|[
name|indexes
index|[
name|i
index|]
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
return|;
block|}
block|}
block|}
end_class
end_unit
