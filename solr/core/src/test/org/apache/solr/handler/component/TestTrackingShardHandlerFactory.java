begin_unit
begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|BaseDistributedSearchTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractFullDistribZkTestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|SolrDispatchFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/**  * Test for {@link org.apache.solr.handler.component.TrackingShardHandlerFactory}  * See SOLR-7147 for more information  */
end_comment
begin_class
annotation|@
name|SolrTestCaseJ4
operator|.
name|SuppressSSL
DECL|class|TestTrackingShardHandlerFactory
specifier|public
class|class
name|TestTrackingShardHandlerFactory
extends|extends
name|AbstractFullDistribZkTestBase
block|{
DECL|method|TestTrackingShardHandlerFactory
specifier|public
name|TestTrackingShardHandlerFactory
parameter_list|()
block|{
name|schemaString
operator|=
literal|"schema15.xml"
expr_stmt|;
comment|// we need a string id
block|}
annotation|@
name|Override
DECL|method|getSolrXml
specifier|protected
name|String
name|getSolrXml
parameter_list|()
block|{
return|return
literal|"solr-trackingshardhandler.xml"
return|;
block|}
annotation|@
name|Test
annotation|@
name|BaseDistributedSearchTestCase
operator|.
name|ShardsFixed
argument_list|(
name|num
operator|=
literal|2
argument_list|)
DECL|method|testRequestTracking
specifier|public
name|void
name|testRequestTracking
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|collectionName
init|=
literal|"testTwoPhase"
decl_stmt|;
name|List
argument_list|<
name|JettySolrRunner
argument_list|>
name|runners
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|jettys
argument_list|)
decl_stmt|;
name|runners
operator|.
name|add
argument_list|(
name|controlJetty
argument_list|)
expr_stmt|;
name|TrackingShardHandlerFactory
operator|.
name|RequestTrackingQueue
name|trackingQueue
init|=
operator|new
name|TrackingShardHandlerFactory
operator|.
name|RequestTrackingQueue
argument_list|()
decl_stmt|;
name|TrackingShardHandlerFactory
operator|.
name|setTrackingQueue
argument_list|(
name|runners
argument_list|,
name|trackingQueue
argument_list|)
expr_stmt|;
for|for
control|(
name|JettySolrRunner
name|runner
range|:
name|runners
control|)
block|{
name|CoreContainer
name|container
init|=
operator|(
operator|(
name|SolrDispatchFilter
operator|)
name|runner
operator|.
name|getDispatchFilter
argument_list|()
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getCores
argument_list|()
decl_stmt|;
name|ShardHandlerFactory
name|factory
init|=
name|container
operator|.
name|getShardHandlerFactory
argument_list|()
decl_stmt|;
assert|assert
name|factory
operator|instanceof
name|TrackingShardHandlerFactory
assert|;
name|TrackingShardHandlerFactory
name|trackingShardHandlerFactory
init|=
operator|(
name|TrackingShardHandlerFactory
operator|)
name|factory
decl_stmt|;
name|assertSame
argument_list|(
name|trackingQueue
argument_list|,
name|trackingShardHandlerFactory
operator|.
name|getTrackingQueue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|waitForRecoveriesToFinish
argument_list|(
name|collectionName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TrackingShardHandlerFactory
operator|.
name|ShardRequestAndParams
argument_list|>
name|coreAdminRequests
init|=
name|trackingQueue
operator|.
name|getCoreAdminRequests
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|coreAdminRequests
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of core admin requests were found"
argument_list|,
literal|2
argument_list|,
name|coreAdminRequests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|CloudSolrClient
name|client
init|=
name|cloudClient
decl_stmt|;
name|client
operator|.
name|setDefaultCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
comment|/*         hash of b is 95de7e03 high bits=2 shard=shard1         hash of e is 656c4367 high bits=1 shard=shard2          */
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
operator|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|?
literal|"b!"
else|:
literal|"e!"
operator|)
operator|+
name|i
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"a_i"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"a_t"
argument_list|,
literal|"text_"
operator|+
name|i
argument_list|)
expr_stmt|;
name|client
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|TrackingShardHandlerFactory
operator|.
name|ShardRequestAndParams
name|getTopIdsRequest
init|=
name|trackingQueue
operator|.
name|getShardRequestByPurpose
argument_list|(
name|client
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
name|collectionName
argument_list|,
literal|"shard1"
argument_list|,
name|ShardRequest
operator|.
name|PURPOSE_GET_TOP_IDS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|getTopIdsRequest
argument_list|)
expr_stmt|;
name|getTopIdsRequest
operator|=
name|trackingQueue
operator|.
name|getShardRequestByPurpose
argument_list|(
name|client
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
name|collectionName
argument_list|,
literal|"shard2"
argument_list|,
name|ShardRequest
operator|.
name|PURPOSE_GET_TOP_IDS
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|getTopIdsRequest
argument_list|)
expr_stmt|;
name|TrackingShardHandlerFactory
operator|.
name|ShardRequestAndParams
name|getFieldsRequest
init|=
name|trackingQueue
operator|.
name|getShardRequestByPurpose
argument_list|(
name|client
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
name|collectionName
argument_list|,
literal|"shard1"
argument_list|,
name|ShardRequest
operator|.
name|PURPOSE_GET_FIELDS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|getFieldsRequest
argument_list|)
expr_stmt|;
name|getFieldsRequest
operator|=
name|trackingQueue
operator|.
name|getShardRequestByPurpose
argument_list|(
name|client
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
name|collectionName
argument_list|,
literal|"shard2"
argument_list|,
name|ShardRequest
operator|.
name|PURPOSE_GET_FIELDS
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|getFieldsRequest
argument_list|)
expr_stmt|;
name|int
name|numRequests
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|TrackingShardHandlerFactory
operator|.
name|ShardRequestAndParams
argument_list|>
argument_list|>
name|allRequests
init|=
name|trackingQueue
operator|.
name|getAllRequests
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|TrackingShardHandlerFactory
operator|.
name|ShardRequestAndParams
argument_list|>
argument_list|>
name|entry
range|:
name|allRequests
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|numRequests
operator|+=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
comment|// 4 shard requests + 2 core admin requests (invoked by create collection API)
name|assertEquals
argument_list|(
literal|"Total number of requests do not match expected"
argument_list|,
literal|6
argument_list|,
name|numRequests
argument_list|)
expr_stmt|;
comment|// reset
name|TrackingShardHandlerFactory
operator|.
name|setTrackingQueue
argument_list|(
name|runners
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|JettySolrRunner
name|runner
range|:
name|runners
control|)
block|{
name|CoreContainer
name|container
init|=
operator|(
operator|(
name|SolrDispatchFilter
operator|)
name|runner
operator|.
name|getDispatchFilter
argument_list|()
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getCores
argument_list|()
decl_stmt|;
name|ShardHandlerFactory
name|factory
init|=
name|container
operator|.
name|getShardHandlerFactory
argument_list|()
decl_stmt|;
assert|assert
name|factory
operator|instanceof
name|TrackingShardHandlerFactory
assert|;
name|TrackingShardHandlerFactory
name|trackingShardHandlerFactory
init|=
operator|(
name|TrackingShardHandlerFactory
operator|)
name|factory
decl_stmt|;
name|assertFalse
argument_list|(
name|trackingShardHandlerFactory
operator|.
name|isTracking
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// make another request and verify
name|client
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|numRequests
operator|=
literal|0
expr_stmt|;
name|allRequests
operator|=
name|trackingQueue
operator|.
name|getAllRequests
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|TrackingShardHandlerFactory
operator|.
name|ShardRequestAndParams
argument_list|>
argument_list|>
name|entry
range|:
name|allRequests
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|numRequests
operator|+=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
comment|// should still be 6
name|assertEquals
argument_list|(
literal|"Total number of shard requests do not match expected"
argument_list|,
literal|6
argument_list|,
name|numRequests
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
