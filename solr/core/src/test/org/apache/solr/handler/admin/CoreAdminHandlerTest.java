begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.admin
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|CoreAdminHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpressionException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import
begin_class
DECL|class|CoreAdminHandlerTest
specifier|public
class|class
name|CoreAdminHandlerTest
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCoreAdminHandler
specifier|public
name|void
name|testCoreAdminHandler
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|File
name|workDir
init|=
operator|new
name|File
argument_list|(
name|TEMP_DIR
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|workDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|workDir
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Failed to mkdirs workDir"
argument_list|,
name|workDir
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|CoreContainer
name|cores
init|=
name|h
operator|.
name|getCoreContainer
argument_list|()
decl_stmt|;
name|cores
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// we'll do this explicitly as needed
specifier|final
name|CoreAdminHandler
name|admin
init|=
operator|new
name|CoreAdminHandler
argument_list|(
name|cores
argument_list|)
decl_stmt|;
name|String
name|instDir
init|=
literal|null
decl_stmt|;
block|{
name|SolrCore
name|template
init|=
literal|null
decl_stmt|;
try|try
block|{
name|template
operator|=
name|cores
operator|.
name|getCore
argument_list|(
literal|"collection1"
argument_list|)
expr_stmt|;
name|instDir
operator|=
name|template
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getInstanceDir
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|template
condition|)
name|template
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|final
name|File
name|instDirFile
init|=
operator|new
name|File
argument_list|(
name|instDir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"instDir doesn't exist: "
operator|+
name|instDir
argument_list|,
name|instDirFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|File
name|instPropFile
init|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"instProp"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|copyDirectory
argument_list|(
name|instDirFile
argument_list|,
name|instPropFile
argument_list|)
expr_stmt|;
comment|// create a new core (using CoreAdminHandler) w/ properties
name|SolrQueryResponse
name|resp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
name|admin
operator|.
name|handleRequestBody
argument_list|(
name|req
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminParams
operator|.
name|CoreAdminAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|,
name|CoreAdminParams
operator|.
name|INSTANCE_DIR
argument_list|,
name|instPropFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
literal|"props"
argument_list|,
name|CoreAdminParams
operator|.
name|PROPERTY_PREFIX
operator|+
literal|"hoss"
argument_list|,
literal|"man"
argument_list|,
name|CoreAdminParams
operator|.
name|PROPERTY_PREFIX
operator|+
literal|"foo"
argument_list|,
literal|"baz"
argument_list|)
argument_list|,
name|resp
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Exception on create"
argument_list|,
name|resp
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify props are in persisted file
specifier|final
name|File
name|xml
init|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"persist-solr.xml"
argument_list|)
decl_stmt|;
name|cores
operator|.
name|persistFile
argument_list|(
name|xml
argument_list|)
expr_stmt|;
name|assertXmlFile
argument_list|(
name|xml
argument_list|,
literal|"/solr/cores/core[@name='props']/property[@name='hoss' and @value='man']"
argument_list|,
literal|"/solr/cores/core[@name='props']/property[@name='foo' and @value='baz']"
argument_list|)
expr_stmt|;
comment|// attempt to create a bogus core and confirm failure
try|try
block|{
name|resp
operator|=
operator|new
name|SolrQueryResponse
argument_list|()
expr_stmt|;
name|admin
operator|.
name|handleRequestBody
argument_list|(
name|req
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminParams
operator|.
name|CoreAdminAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|,
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
literal|"bogus_dir_core"
argument_list|,
name|CoreAdminParams
operator|.
name|INSTANCE_DIR
argument_list|,
literal|"dir_does_not_exist_127896"
argument_list|)
argument_list|,
name|resp
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"bogus collection created ok"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
comment|// :NOOP:
comment|// :TODO: CoreAdminHandler's exception messages are terrible, otherwise we could assert something useful here
block|}
comment|// check specifically for status of the failed core name
name|resp
operator|=
operator|new
name|SolrQueryResponse
argument_list|()
expr_stmt|;
name|admin
operator|.
name|handleRequestBody
argument_list|(
name|req
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminParams
operator|.
name|CoreAdminAction
operator|.
name|STATUS
operator|.
name|toString
argument_list|()
argument_list|,
name|CoreAdminParams
operator|.
name|CORE
argument_list|,
literal|"bogus_dir_core"
argument_list|)
argument_list|,
name|resp
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
name|failures
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
operator|)
name|resp
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|"initFailures"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"core failures is null"
argument_list|,
name|failures
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|status
init|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|resp
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|"status"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"core status is null"
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of core failures"
argument_list|,
literal|1
argument_list|,
name|failures
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Exception
name|fail
init|=
name|failures
operator|.
name|get
argument_list|(
literal|"bogus_dir_core"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"null failure for test core"
argument_list|,
name|fail
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"init failure doesn't mention problem: "
operator|+
name|fail
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|0
operator|<
name|fail
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"dir_does_not_exist"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bogus_dir_core status isn't empty"
argument_list|,
literal|0
argument_list|,
operator|(
operator|(
name|NamedList
operator|)
name|status
operator|.
name|get
argument_list|(
literal|"bogus_dir_core"
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// :TODO: because of SOLR-3665 we can't ask for status from all cores
block|}
block|}
end_class
end_unit
