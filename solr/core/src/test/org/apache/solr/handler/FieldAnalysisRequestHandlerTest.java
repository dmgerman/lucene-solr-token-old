begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|KeywordTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|WhitespaceTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|AnalysisParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|FieldAnalysisRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|LocalSolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_comment
comment|/**  * A test for {@link FieldAnalysisRequestHandler}.  *  *  * @since solr 1.4  */
end_comment
begin_class
DECL|class|FieldAnalysisRequestHandlerTest
specifier|public
class|class
name|FieldAnalysisRequestHandlerTest
extends|extends
name|AnalysisRequestHandlerTestBase
block|{
DECL|field|handler
specifier|private
name|FieldAnalysisRequestHandler
name|handler
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|handler
operator|=
operator|new
name|FieldAnalysisRequestHandler
argument_list|()
expr_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}    */
annotation|@
name|Test
DECL|method|testResolveAnalysisRequest
specifier|public
name|void
name|testResolveAnalysisRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|AnalysisParams
operator|.
name|FIELD_NAME
argument_list|,
literal|"text,nametext"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|AnalysisParams
operator|.
name|FIELD_TYPE
argument_list|,
literal|"whitetok,keywordtok"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|AnalysisParams
operator|.
name|FIELD_VALUE
argument_list|,
literal|"the quick red fox jumped over the lazy brown dogs"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
literal|"fox brown"
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|req
init|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|FieldAnalysisRequest
name|request
init|=
name|handler
operator|.
name|resolveAnalysisRequest
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|request
operator|.
name|getFieldNames
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting 2 field names"
argument_list|,
literal|2
argument_list|,
name|fieldNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text"
argument_list|,
name|fieldNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nametext"
argument_list|,
name|fieldNames
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldTypes
init|=
name|request
operator|.
name|getFieldTypes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting 2 field types"
argument_list|,
literal|2
argument_list|,
name|fieldTypes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"whitetok"
argument_list|,
name|fieldTypes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"keywordtok"
argument_list|,
name|fieldTypes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"the quick red fox jumped over the lazy brown dogs"
argument_list|,
name|request
operator|.
name|getFieldValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fox brown"
argument_list|,
name|request
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|request
operator|.
name|isShowMatch
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// testing overide of query value using analysis.query param
name|params
operator|.
name|add
argument_list|(
name|AnalysisParams
operator|.
name|QUERY
argument_list|,
literal|"quick lazy"
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|request
operator|=
name|handler
operator|.
name|resolveAnalysisRequest
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"quick lazy"
argument_list|,
name|request
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// testing analysis.showmatch param
name|params
operator|.
name|add
argument_list|(
name|AnalysisParams
operator|.
name|SHOW_MATCH
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|request
operator|=
name|handler
operator|.
name|resolveAnalysisRequest
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|request
operator|.
name|isShowMatch
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|AnalysisParams
operator|.
name|SHOW_MATCH
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|request
operator|=
name|handler
operator|.
name|resolveAnalysisRequest
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|request
operator|.
name|isShowMatch
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// testing absence of query value
name|params
operator|.
name|remove
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|)
expr_stmt|;
name|params
operator|.
name|remove
argument_list|(
name|AnalysisParams
operator|.
name|QUERY
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|request
operator|=
name|handler
operator|.
name|resolveAnalysisRequest
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|request
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests the {@link FieldAnalysisRequestHandler#handleAnalysisRequest(org.apache.solr.client.solrj.request.FieldAnalysisRequest,    * org.apache.solr.schema.IndexSchema)}    */
annotation|@
name|Test
DECL|method|testHandleAnalysisRequest
specifier|public
name|void
name|testHandleAnalysisRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|FieldAnalysisRequest
name|request
init|=
operator|new
name|FieldAnalysisRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|addFieldName
argument_list|(
literal|"whitetok"
argument_list|)
expr_stmt|;
name|request
operator|.
name|addFieldName
argument_list|(
literal|"keywordtok"
argument_list|)
expr_stmt|;
name|request
operator|.
name|addFieldType
argument_list|(
literal|"text"
argument_list|)
expr_stmt|;
name|request
operator|.
name|addFieldType
argument_list|(
literal|"nametext"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setFieldValue
argument_list|(
literal|"the quick red fox jumped over the lazy brown dogs"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setQuery
argument_list|(
literal|"fox brown"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setShowMatch
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|NamedList
argument_list|>
name|result
init|=
name|handler
operator|.
name|handleAnalysisRequest
argument_list|(
name|request
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSchema
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"result is null and it shouldn't be"
argument_list|,
name|result
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|NamedList
argument_list|>
name|fieldTypes
init|=
name|result
operator|.
name|get
argument_list|(
literal|"field_types"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"field_types should never be null"
argument_list|,
name|fieldTypes
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|NamedList
argument_list|>
name|textType
init|=
name|fieldTypes
operator|.
name|get
argument_list|(
literal|"text"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"expecting result for field type 'text'"
argument_list|,
name|textType
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|>
argument_list|>
name|indexPart
init|=
name|textType
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"expecting an index token analysis for field type 'text'"
argument_list|,
name|indexPart
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NamedList
argument_list|>
name|tokenList
init|=
name|indexPart
operator|.
name|get
argument_list|(
literal|"org.apache.lucene.analysis.standard.StandardTokenizer"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Expcting StandardTokenizer analysis breakdown"
argument_list|,
name|tokenList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tokenList
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"the"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"quick"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|4
argument_list|,
literal|9
argument_list|,
literal|2
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"red"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|10
argument_list|,
literal|13
argument_list|,
literal|3
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"fox"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|14
argument_list|,
literal|17
argument_list|,
literal|4
argument_list|,
operator|new
name|int
index|[]
block|{
literal|4
block|}
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"jumped"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|18
argument_list|,
literal|24
argument_list|,
literal|5
argument_list|,
operator|new
name|int
index|[]
block|{
literal|5
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"over"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|25
argument_list|,
literal|29
argument_list|,
literal|6
argument_list|,
operator|new
name|int
index|[]
block|{
literal|6
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"the"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|30
argument_list|,
literal|33
argument_list|,
literal|7
argument_list|,
operator|new
name|int
index|[]
block|{
literal|7
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"lazy"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|34
argument_list|,
literal|38
argument_list|,
literal|8
argument_list|,
operator|new
name|int
index|[]
block|{
literal|8
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|8
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"brown"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|39
argument_list|,
literal|44
argument_list|,
literal|9
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|}
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|9
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"dogs"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|45
argument_list|,
literal|49
argument_list|,
literal|10
argument_list|,
operator|new
name|int
index|[]
block|{
literal|10
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|tokenList
operator|=
name|indexPart
operator|.
name|get
argument_list|(
literal|"org.apache.lucene.analysis.standard.StandardFilter"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expcting StandardFilter analysis breakdown"
argument_list|,
name|tokenList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tokenList
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"the"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"quick"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|4
argument_list|,
literal|9
argument_list|,
literal|2
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|2
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"red"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|10
argument_list|,
literal|13
argument_list|,
literal|3
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|3
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"fox"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|14
argument_list|,
literal|17
argument_list|,
literal|4
argument_list|,
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|4
block|}
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"jumped"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|18
argument_list|,
literal|24
argument_list|,
literal|5
argument_list|,
operator|new
name|int
index|[]
block|{
literal|5
block|,
literal|5
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"over"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|25
argument_list|,
literal|29
argument_list|,
literal|6
argument_list|,
operator|new
name|int
index|[]
block|{
literal|6
block|,
literal|6
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"the"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|30
argument_list|,
literal|33
argument_list|,
literal|7
argument_list|,
operator|new
name|int
index|[]
block|{
literal|7
block|,
literal|7
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"lazy"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|34
argument_list|,
literal|38
argument_list|,
literal|8
argument_list|,
operator|new
name|int
index|[]
block|{
literal|8
block|,
literal|8
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|8
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"brown"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|39
argument_list|,
literal|44
argument_list|,
literal|9
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|,
literal|9
block|}
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|9
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"dogs"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|45
argument_list|,
literal|49
argument_list|,
literal|10
argument_list|,
operator|new
name|int
index|[]
block|{
literal|10
block|,
literal|10
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|tokenList
operator|=
name|indexPart
operator|.
name|get
argument_list|(
literal|"org.apache.lucene.analysis.core.LowerCaseFilter"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expcting LowerCaseFilter analysis breakdown"
argument_list|,
name|tokenList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tokenList
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"the"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"quick"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|4
argument_list|,
literal|9
argument_list|,
literal|2
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"red"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|10
argument_list|,
literal|13
argument_list|,
literal|3
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"fox"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|14
argument_list|,
literal|17
argument_list|,
literal|4
argument_list|,
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"jumped"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|18
argument_list|,
literal|24
argument_list|,
literal|5
argument_list|,
operator|new
name|int
index|[]
block|{
literal|5
block|,
literal|5
block|,
literal|5
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"over"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|25
argument_list|,
literal|29
argument_list|,
literal|6
argument_list|,
operator|new
name|int
index|[]
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"the"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|30
argument_list|,
literal|33
argument_list|,
literal|7
argument_list|,
operator|new
name|int
index|[]
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"lazy"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|34
argument_list|,
literal|38
argument_list|,
literal|8
argument_list|,
operator|new
name|int
index|[]
block|{
literal|8
block|,
literal|8
block|,
literal|8
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|8
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"brown"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|39
argument_list|,
literal|44
argument_list|,
literal|9
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|}
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|9
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"dogs"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|45
argument_list|,
literal|49
argument_list|,
literal|10
argument_list|,
operator|new
name|int
index|[]
block|{
literal|10
block|,
literal|10
block|,
literal|10
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|tokenList
operator|=
name|indexPart
operator|.
name|get
argument_list|(
literal|"org.apache.lucene.analysis.core.StopFilter"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expcting StopFilter analysis breakdown"
argument_list|,
name|tokenList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tokenList
operator|.
name|size
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"quick"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|4
argument_list|,
literal|9
argument_list|,
literal|1
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|1
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"red"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|10
argument_list|,
literal|13
argument_list|,
literal|2
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|2
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"fox"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|14
argument_list|,
literal|17
argument_list|,
literal|3
argument_list|,
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|3
block|}
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"jumped"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|18
argument_list|,
literal|24
argument_list|,
literal|4
argument_list|,
operator|new
name|int
index|[]
block|{
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|4
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"over"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|25
argument_list|,
literal|29
argument_list|,
literal|5
argument_list|,
operator|new
name|int
index|[]
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|5
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"lazy"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|34
argument_list|,
literal|38
argument_list|,
literal|6
argument_list|,
operator|new
name|int
index|[]
block|{
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|6
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"brown"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|39
argument_list|,
literal|44
argument_list|,
literal|7
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|7
block|}
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"dogs"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|45
argument_list|,
literal|49
argument_list|,
literal|8
argument_list|,
operator|new
name|int
index|[]
block|{
literal|10
block|,
literal|10
block|,
literal|10
block|,
literal|8
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|tokenList
operator|=
name|indexPart
operator|.
name|get
argument_list|(
literal|"org.apache.lucene.analysis.en.PorterStemFilter"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expcting PorterStemFilter analysis breakdown"
argument_list|,
name|tokenList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tokenList
operator|.
name|size
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"quick"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|4
argument_list|,
literal|9
argument_list|,
literal|1
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"red"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|10
argument_list|,
literal|13
argument_list|,
literal|2
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|2
block|,
literal|2
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"fox"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|14
argument_list|,
literal|17
argument_list|,
literal|3
argument_list|,
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|3
block|,
literal|3
block|}
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"jump"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|18
argument_list|,
literal|24
argument_list|,
literal|4
argument_list|,
operator|new
name|int
index|[]
block|{
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|4
block|,
literal|4
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"over"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|25
argument_list|,
literal|29
argument_list|,
literal|5
argument_list|,
operator|new
name|int
index|[]
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|5
block|,
literal|5
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"lazi"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|34
argument_list|,
literal|38
argument_list|,
literal|6
argument_list|,
operator|new
name|int
index|[]
block|{
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|6
block|,
literal|6
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"brown"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|39
argument_list|,
literal|44
argument_list|,
literal|7
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|7
block|,
literal|7
block|}
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"dog"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|45
argument_list|,
literal|49
argument_list|,
literal|8
argument_list|,
operator|new
name|int
index|[]
block|{
literal|10
block|,
literal|10
block|,
literal|10
block|,
literal|8
block|,
literal|8
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|>
argument_list|>
name|queryPart
init|=
name|textType
operator|.
name|get
argument_list|(
literal|"query"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"expecting a query token analysis for field type 'text'"
argument_list|,
name|queryPart
argument_list|)
expr_stmt|;
name|tokenList
operator|=
name|queryPart
operator|.
name|get
argument_list|(
literal|"org.apache.lucene.analysis.standard.StandardTokenizer"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expecting StandardTokenizer analysis breakdown"
argument_list|,
name|tokenList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting StandardTokenizer to produce 2 tokens from '"
operator|+
name|request
operator|.
name|getQuery
argument_list|()
operator|+
literal|"'"
argument_list|,
literal|2
argument_list|,
name|tokenList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"fox"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"brown"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|4
argument_list|,
literal|9
argument_list|,
literal|2
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|tokenList
operator|=
name|queryPart
operator|.
name|get
argument_list|(
literal|"org.apache.lucene.analysis.standard.StandardFilter"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expcting StandardFilter analysis breakdown"
argument_list|,
name|tokenList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tokenList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"fox"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"brown"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|4
argument_list|,
literal|9
argument_list|,
literal|2
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|2
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|tokenList
operator|=
name|queryPart
operator|.
name|get
argument_list|(
literal|"org.apache.lucene.analysis.core.LowerCaseFilter"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expcting LowerCaseFilter analysis breakdown"
argument_list|,
name|tokenList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tokenList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"fox"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"brown"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|4
argument_list|,
literal|9
argument_list|,
literal|2
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|tokenList
operator|=
name|queryPart
operator|.
name|get
argument_list|(
literal|"org.apache.lucene.analysis.core.StopFilter"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expcting StopFilter analysis breakdown"
argument_list|,
name|tokenList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tokenList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"fox"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"brown"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|4
argument_list|,
literal|9
argument_list|,
literal|2
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|tokenList
operator|=
name|queryPart
operator|.
name|get
argument_list|(
literal|"org.apache.lucene.analysis.en.PorterStemFilter"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expcting PorterStemFilter analysis breakdown"
argument_list|,
name|tokenList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tokenList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"fox"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"brown"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|4
argument_list|,
literal|9
argument_list|,
literal|2
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|NamedList
argument_list|>
name|nameTextType
init|=
name|fieldTypes
operator|.
name|get
argument_list|(
literal|"nametext"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"expecting result for field type 'nametext'"
argument_list|,
name|nameTextType
argument_list|)
expr_stmt|;
name|indexPart
operator|=
name|nameTextType
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"expecting an index token analysis for field type 'nametext'"
argument_list|,
name|indexPart
argument_list|)
expr_stmt|;
name|tokenList
operator|=
name|indexPart
operator|.
name|get
argument_list|(
literal|"org.apache.lucene.analysis.core.WhitespaceTokenizer"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expcting WhitespaceTokenizer analysis breakdown"
argument_list|,
name|tokenList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|tokenList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"the"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"quick"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|4
argument_list|,
literal|9
argument_list|,
literal|2
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"red"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|10
argument_list|,
literal|13
argument_list|,
literal|3
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"fox"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|14
argument_list|,
literal|17
argument_list|,
literal|4
argument_list|,
operator|new
name|int
index|[]
block|{
literal|4
block|}
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"jumped"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|18
argument_list|,
literal|24
argument_list|,
literal|5
argument_list|,
operator|new
name|int
index|[]
block|{
literal|5
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"over"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|25
argument_list|,
literal|29
argument_list|,
literal|6
argument_list|,
operator|new
name|int
index|[]
block|{
literal|6
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"the"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|30
argument_list|,
literal|33
argument_list|,
literal|7
argument_list|,
operator|new
name|int
index|[]
block|{
literal|7
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"lazy"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|34
argument_list|,
literal|38
argument_list|,
literal|8
argument_list|,
operator|new
name|int
index|[]
block|{
literal|8
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|8
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"brown"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|39
argument_list|,
literal|44
argument_list|,
literal|9
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|}
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|9
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"dogs"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|45
argument_list|,
literal|49
argument_list|,
literal|10
argument_list|,
operator|new
name|int
index|[]
block|{
literal|10
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|queryPart
operator|=
name|nameTextType
operator|.
name|get
argument_list|(
literal|"query"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"expecting a query token analysis for field type 'nametext'"
argument_list|,
name|queryPart
argument_list|)
expr_stmt|;
name|tokenList
operator|=
name|queryPart
operator|.
name|get
argument_list|(
name|WhitespaceTokenizer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"fox"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"brown"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|4
argument_list|,
literal|9
argument_list|,
literal|2
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|NamedList
argument_list|>
name|fieldNames
init|=
name|result
operator|.
name|get
argument_list|(
literal|"field_names"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"field_nameds should never be null"
argument_list|,
name|fieldNames
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|NamedList
argument_list|>
name|whitetok
init|=
name|fieldNames
operator|.
name|get
argument_list|(
literal|"whitetok"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"expecting result for field 'whitetok'"
argument_list|,
name|whitetok
argument_list|)
expr_stmt|;
name|indexPart
operator|=
name|whitetok
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"expecting an index token analysis for field 'whitetok'"
argument_list|,
name|indexPart
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expecting only MockTokenizer to be applied"
argument_list|,
literal|1
argument_list|,
name|indexPart
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tokenList
operator|=
name|indexPart
operator|.
name|get
argument_list|(
name|MockTokenizer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"expecting only MockTokenizer to be applied"
argument_list|,
name|tokenList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expecting MockTokenizer to produce 10 tokens"
argument_list|,
literal|10
argument_list|,
name|tokenList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"the"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"quick"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|4
argument_list|,
literal|9
argument_list|,
literal|2
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"red"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|10
argument_list|,
literal|13
argument_list|,
literal|3
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"fox"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|14
argument_list|,
literal|17
argument_list|,
literal|4
argument_list|,
operator|new
name|int
index|[]
block|{
literal|4
block|}
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"jumped"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|18
argument_list|,
literal|24
argument_list|,
literal|5
argument_list|,
operator|new
name|int
index|[]
block|{
literal|5
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"over"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|25
argument_list|,
literal|29
argument_list|,
literal|6
argument_list|,
operator|new
name|int
index|[]
block|{
literal|6
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"the"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|30
argument_list|,
literal|33
argument_list|,
literal|7
argument_list|,
operator|new
name|int
index|[]
block|{
literal|7
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"lazy"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|34
argument_list|,
literal|38
argument_list|,
literal|8
argument_list|,
operator|new
name|int
index|[]
block|{
literal|8
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|8
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"brown"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|39
argument_list|,
literal|44
argument_list|,
literal|9
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|}
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|9
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"dogs"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|45
argument_list|,
literal|49
argument_list|,
literal|10
argument_list|,
operator|new
name|int
index|[]
block|{
literal|10
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|queryPart
operator|=
name|whitetok
operator|.
name|get
argument_list|(
literal|"query"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"expecting a query token analysis for field 'whitetok'"
argument_list|,
name|queryPart
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expecting only MockTokenizer to be applied"
argument_list|,
literal|1
argument_list|,
name|queryPart
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tokenList
operator|=
name|queryPart
operator|.
name|get
argument_list|(
name|MockTokenizer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"expecting only MockTokenizer to be applied"
argument_list|,
name|tokenList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expecting MockTokenizer to produce 2 tokens"
argument_list|,
literal|2
argument_list|,
name|tokenList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"fox"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"brown"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|4
argument_list|,
literal|9
argument_list|,
literal|2
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|NamedList
argument_list|>
name|keywordtok
init|=
name|fieldNames
operator|.
name|get
argument_list|(
literal|"keywordtok"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"expecting result for field 'keywordtok'"
argument_list|,
name|keywordtok
argument_list|)
expr_stmt|;
name|indexPart
operator|=
name|keywordtok
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"expecting an index token analysis for field 'keywordtok'"
argument_list|,
name|indexPart
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expecting only MockTokenizer to be applied"
argument_list|,
literal|1
argument_list|,
name|indexPart
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tokenList
operator|=
name|indexPart
operator|.
name|get
argument_list|(
name|MockTokenizer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"expecting only MockTokenizer to be applied"
argument_list|,
name|tokenList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expecting MockTokenizer to produce 1 token"
argument_list|,
literal|1
argument_list|,
name|tokenList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"the quick red fox jumped over the lazy brown dogs"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|0
argument_list|,
literal|49
argument_list|,
literal|1
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|queryPart
operator|=
name|keywordtok
operator|.
name|get
argument_list|(
literal|"query"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"expecting a query token analysis for field 'keywordtok'"
argument_list|,
name|queryPart
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expecting only MockTokenizer to be applied"
argument_list|,
literal|1
argument_list|,
name|queryPart
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tokenList
operator|=
name|queryPart
operator|.
name|get
argument_list|(
name|MockTokenizer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"expecting only MockTokenizer to be applied"
argument_list|,
name|tokenList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expecting MockTokenizer to produce 1 token"
argument_list|,
literal|1
argument_list|,
name|tokenList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"fox brown"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|,
literal|1
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCharFilterAnalysis
specifier|public
name|void
name|testCharFilterAnalysis
parameter_list|()
throws|throws
name|Exception
block|{
name|FieldAnalysisRequest
name|request
init|=
operator|new
name|FieldAnalysisRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|addFieldType
argument_list|(
literal|"charfilthtmlmap"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setFieldValue
argument_list|(
literal|"<html><body>whÃ¡tÃ«vÃªr</body></html>"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setShowMatch
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|NamedList
argument_list|>
name|result
init|=
name|handler
operator|.
name|handleAnalysisRequest
argument_list|(
name|request
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSchema
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"result is null and it shouldn't be"
argument_list|,
name|result
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|NamedList
argument_list|>
name|fieldTypes
init|=
name|result
operator|.
name|get
argument_list|(
literal|"field_types"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"field_types should never be null"
argument_list|,
name|fieldTypes
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|NamedList
argument_list|>
name|textType
init|=
name|fieldTypes
operator|.
name|get
argument_list|(
literal|"charfilthtmlmap"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"expecting result for field type 'charfilthtmlmap'"
argument_list|,
name|textType
argument_list|)
expr_stmt|;
name|NamedList
name|indexPart
init|=
name|textType
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"expecting an index token analysis for field type 'charfilthtmlmap'"
argument_list|,
name|indexPart
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"  whÃ¡tÃ«vÃªr  "
argument_list|,
name|indexPart
operator|.
name|get
argument_list|(
literal|"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"  whatever  "
argument_list|,
name|indexPart
operator|.
name|get
argument_list|(
literal|"org.apache.lucene.analysis.charfilter.MappingCharFilter"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NamedList
argument_list|>
name|tokenList
init|=
operator|(
name|List
argument_list|<
name|NamedList
argument_list|>
operator|)
name|indexPart
operator|.
name|get
argument_list|(
name|MockTokenizer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Expecting MockTokenizer analysis breakdown"
argument_list|,
name|tokenList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tokenList
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"whatever"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|12
argument_list|,
literal|20
argument_list|,
literal|1
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPositionHistoryWithWDF
specifier|public
name|void
name|testPositionHistoryWithWDF
parameter_list|()
throws|throws
name|Exception
block|{
name|FieldAnalysisRequest
name|request
init|=
operator|new
name|FieldAnalysisRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|addFieldType
argument_list|(
literal|"skutype1"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setFieldValue
argument_list|(
literal|"hi, 3456-12 a Test"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setShowMatch
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|NamedList
argument_list|>
name|result
init|=
name|handler
operator|.
name|handleAnalysisRequest
argument_list|(
name|request
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSchema
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"result is null and it shouldn't be"
argument_list|,
name|result
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|NamedList
argument_list|>
name|fieldTypes
init|=
name|result
operator|.
name|get
argument_list|(
literal|"field_types"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"field_types should never be null"
argument_list|,
name|fieldTypes
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|NamedList
argument_list|>
name|textType
init|=
name|fieldTypes
operator|.
name|get
argument_list|(
literal|"skutype1"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"expecting result for field type 'skutype1'"
argument_list|,
name|textType
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|>
argument_list|>
name|indexPart
init|=
name|textType
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"expecting an index token analysis for field type 'skutype1'"
argument_list|,
name|indexPart
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NamedList
argument_list|>
name|tokenList
init|=
name|indexPart
operator|.
name|get
argument_list|(
name|MockTokenizer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Expcting MockTokenizer analysis breakdown"
argument_list|,
name|tokenList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|tokenList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"hi,"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"3456-12"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|4
argument_list|,
literal|11
argument_list|,
literal|2
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|,
literal|3
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"Test"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|14
argument_list|,
literal|18
argument_list|,
literal|4
argument_list|,
operator|new
name|int
index|[]
block|{
literal|4
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|tokenList
operator|=
name|indexPart
operator|.
name|get
argument_list|(
literal|"org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expcting WordDelimiterFilter analysis breakdown"
argument_list|,
name|tokenList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|tokenList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"hi"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"3456"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|4
argument_list|,
literal|8
argument_list|,
literal|2
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|2
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"12"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|9
argument_list|,
literal|11
argument_list|,
literal|3
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"345612"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|4
argument_list|,
literal|11
argument_list|,
literal|3
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|,
literal|4
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|4
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"Test"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|14
argument_list|,
literal|18
argument_list|,
literal|5
argument_list|,
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|5
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|tokenList
operator|=
name|indexPart
operator|.
name|get
argument_list|(
literal|"org.apache.lucene.analysis.core.LowerCaseFilter"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expcting LowerCaseFilter analysis breakdown"
argument_list|,
name|tokenList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|tokenList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"hi"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"3456"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|4
argument_list|,
literal|8
argument_list|,
literal|2
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"12"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|9
argument_list|,
literal|11
argument_list|,
literal|3
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|,
literal|3
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"345612"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|4
argument_list|,
literal|11
argument_list|,
literal|3
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|,
literal|3
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|,
literal|4
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|4
block|,
literal|4
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|14
argument_list|,
literal|18
argument_list|,
literal|5
argument_list|,
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|5
block|,
literal|5
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
