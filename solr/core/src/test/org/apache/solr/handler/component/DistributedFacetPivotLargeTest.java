begin_unit
begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|BaseDistributedSearchTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|FieldStatsInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|PivotField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|RangeFacet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|DistributedFacetPivotLargeTest
specifier|public
class|class
name|DistributedFacetPivotLargeTest
extends|extends
name|BaseDistributedSearchTestCase
block|{
DECL|field|SPECIAL
specifier|public
specifier|static
specifier|final
name|String
name|SPECIAL
init|=
literal|""
decl_stmt|;
annotation|@
name|Test
annotation|@
name|ShardsFixed
argument_list|(
name|num
operator|=
literal|4
argument_list|)
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|stress
operator|=
literal|0
expr_stmt|;
name|handle
operator|.
name|clear
argument_list|()
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"QTime"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"timestamp"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"maxScore"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|setupDistributedPivotFacetDocuments
argument_list|()
expr_stmt|;
name|QueryResponse
name|rsp
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|PivotField
argument_list|>
name|pivots
init|=
literal|null
decl_stmt|;
name|PivotField
name|firstInt
init|=
literal|null
decl_stmt|;
name|PivotField
name|firstBool
init|=
literal|null
decl_stmt|;
name|PivotField
name|firstDate
init|=
literal|null
decl_stmt|;
name|PivotField
name|firstPlace
init|=
literal|null
decl_stmt|;
name|PivotField
name|firstCompany
init|=
literal|null
decl_stmt|;
comment|// basic check w/ limit& default sort (count)
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"place_s,company_t"
argument_list|,
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|"12"
argument_list|)
expr_stmt|;
name|pivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"place_s,company_t"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstPlace
operator|=
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"place_s"
argument_list|,
literal|"cardiff"
argument_list|,
literal|257
argument_list|,
name|firstPlace
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"company_t"
argument_list|,
literal|"bbc"
argument_list|,
literal|101
argument_list|,
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Microsoft will come back wrong if refinement was not done correctly
name|assertPivot
argument_list|(
literal|"company_t"
argument_list|,
literal|"microsoft"
argument_list|,
literal|56
argument_list|,
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// trivial mincount=0 check
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"does_not_exist_s:foo"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"company_t"
argument_list|,
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|"10"
argument_list|,
name|FacetParams
operator|.
name|FACET_PIVOT_MINCOUNT
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|pivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"company_t"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PivotField
name|p
range|:
name|pivots
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// sanity check limit=0 w/ mincount=0& missing=true
comment|//
comment|// SOLR-6328: doesn't work for single node, so can't work for distrib either (yet)
comment|//
comment|// PivotFacetField's init of needRefinementAtThisLevel as needing potential change
comment|//
comment|// rsp = query( "q", "*:*",
comment|//              "rows", "0",
comment|//              "facet","true",
comment|//              "f.company_t.facet.limit", "10",
comment|//              "facet.pivot","special_s,bogus_s,company_t",
comment|//              "facet.missing", "true",
comment|//              FacetParams.FACET_LIMIT, "0",
comment|//              FacetParams.FACET_PIVOT_MINCOUNT,"0");
comment|// pivots = rsp.getFacetPivot().get("special_s,bogus_s,company_t");
comment|// assertEquals(1, pivots.size()); // only the missing
comment|// assertPivot("special_s", null, docNumber - 5, pivots.get(0)); // 5 docs w/special_s
comment|// assertEquals(pivots.toString(), 1, pivots.get(0).getPivot());
comment|// assertPivot("bogus_s", null, docNumber, pivots.get(0).getPivot().get(0));
comment|// // TODO: some asserts on company results
comment|// basic check w/ default sort, limit,& mincount==0
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"place_s,company_t"
argument_list|,
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|"50"
argument_list|,
name|FacetParams
operator|.
name|FACET_PIVOT_MINCOUNT
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|pivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"place_s,company_t"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|50
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstPlace
operator|=
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"place_s"
argument_list|,
literal|"cardiff"
argument_list|,
literal|257
argument_list|,
name|firstPlace
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"company_t"
argument_list|,
literal|"bbc"
argument_list|,
literal|101
argument_list|,
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Microsoft will come back wrong if refinement was not done correctly
name|assertPivot
argument_list|(
literal|"company_t"
argument_list|,
literal|"microsoft"
argument_list|,
literal|56
argument_list|,
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// sort=index + offset + limit w/ some variables
for|for
control|(
name|SolrParams
name|variableParams
range|:
operator|new
name|SolrParams
index|[]
block|{
comment|// bother variations should kwrk just as well
comment|// defauts
name|params
argument_list|()
block|,
comment|// force refinement
name|params
argument_list|(
name|FacetParams
operator|.
name|FACET_OVERREQUEST_RATIO
argument_list|,
literal|"1"
argument_list|,
name|FacetParams
operator|.
name|FACET_OVERREQUEST_COUNT
argument_list|,
literal|"0"
argument_list|)
block|}
control|)
block|{
name|SolrParams
name|p
init|=
name|SolrParams
operator|.
name|wrapDefaults
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|,
literal|"f.place_s.facet.limit"
argument_list|,
literal|"20"
argument_list|,
literal|"f.place_s.facet.offset"
argument_list|,
literal|"40"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"place_s,company_t"
argument_list|)
argument_list|,
name|variableParams
argument_list|)
decl_stmt|;
try|try
block|{
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|pivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"place_s,company_t"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// limit
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|PivotField
name|place
init|=
name|pivots
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|place
operator|.
name|toString
argument_list|()
argument_list|,
name|place
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"placeholder"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|place
operator|.
name|getPivot
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"company_t"
argument_list|,
literal|"bbc"
argument_list|,
literal|6
argument_list|,
name|place
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"company_t"
argument_list|,
literal|"microsoft"
argument_list|,
literal|6
argument_list|,
name|place
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"company_t"
argument_list|,
literal|"polecat"
argument_list|,
literal|6
argument_list|,
name|place
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertPivot
argument_list|(
literal|"place_s"
argument_list|,
literal|"cardiff"
argument_list|,
literal|257
argument_list|,
name|pivots
operator|.
name|get
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"place_s"
argument_list|,
literal|"krakaw"
argument_list|,
literal|1
argument_list|,
name|pivots
operator|.
name|get
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"place_s"
argument_list|,
literal|"medical staffing network holdings, inc."
argument_list|,
literal|51
argument_list|,
name|pivots
operator|.
name|get
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|13
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|PivotField
name|place
init|=
name|pivots
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|place
operator|.
name|toString
argument_list|()
argument_list|,
name|place
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"placeholder"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|place
operator|.
name|getPivot
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PivotField
name|company
init|=
name|place
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|company
operator|.
name|toString
argument_list|()
argument_list|,
name|company
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"compholder"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|company
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
name|company
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|ae
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|ae
operator|.
name|getMessage
argument_list|()
operator|+
literal|"<== "
operator|+
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|ae
argument_list|)
throw|;
block|}
block|}
comment|// sort=index + mincount=0
comment|//
comment|// SOLR-6329: facet.pivot.mincount=0 doesn't work well with distrib
comment|//
comment|// broken honda
comment|//
comment|// This is tricky, here's what i think is happening....
comment|// - "company:honda" only exists on twoShard, and only w/ "place:cardiff"
comment|// - twoShard has no other places in its docs
comment|// - twoShard can't return any other places to w/ honda as a count=0 sub-value
comment|// - if we refined all other companies places, would twoShard return honda==0 ?
comment|//   ... but there's no refinement since mincount==0
comment|// - would it even matter
comment|//
comment|// should we remove the refinement short circut?
comment|//
comment|// rsp = query( params( "q", "*:*",
comment|//                      "rows", "0",
comment|//                      "facet","true",
comment|//                      "facet.sort","index",
comment|//                      "f.place_s.facet.limit", "20",
comment|//                      "f.place_s.facet.offset", "40",
comment|//                      FacetParams.FACET_PIVOT_MINCOUNT,"0",
comment|//                      "facet.pivot", "place_s,company_t") );
comment|// // TODO: more asserts
comment|//
comment|//
comment|// really trivial demonstration of the above problem
comment|//
comment|// rsp = query( params( "q", "*:*",
comment|//                      "rows", "0",
comment|//                      "facet","true",
comment|//                      FacetParams.FACET_PIVOT_MINCOUNT,"0",
comment|//                      "facet.pivot", "top_s,sub_s") );
comment|// basic check w/ limit& index sort
for|for
control|(
name|SolrParams
name|facetParams
range|:
comment|// results should be the same regardless of whether local params are used
operator|new
name|SolrParams
index|[]
block|{
comment|// Broken: SOLR-6193
comment|// params("facet.pivot","{!facet.limit=4 facet.sort=index}place_s,company_t"),
comment|// params("facet.pivot","{!facet.sort=index}place_s,company_t",
comment|//        FacetParams.FACET_LIMIT, "4"),
name|params
argument_list|(
literal|"facet.pivot"
argument_list|,
literal|"place_s,company_t"
argument_list|,
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|"4"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|)
block|}
control|)
block|{
name|SolrParams
name|p
init|=
name|SolrParams
operator|.
name|wrapDefaults
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
name|facetParams
argument_list|)
decl_stmt|;
try|try
block|{
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|pivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"place_s,company_t"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstPlace
operator|=
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"place_s"
argument_list|,
literal|"0placeholder"
argument_list|,
literal|6
argument_list|,
name|firstPlace
argument_list|)
expr_stmt|;
name|firstCompany
operator|=
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"company_t"
argument_list|,
literal|"bbc"
argument_list|,
literal|6
argument_list|,
name|firstCompany
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|ae
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|ae
operator|.
name|getMessage
argument_list|()
operator|+
literal|"<== "
operator|+
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|ae
argument_list|)
throw|;
block|}
block|}
comment|// Pivot Faceting (combined wtih Field Faceting)
for|for
control|(
name|SolrParams
name|facetParams
range|:
comment|// with and w/o an excluded fq
comment|// (either way, facet results should be the same)
operator|new
name|SolrParams
index|[]
block|{
name|params
argument_list|(
literal|"facet.pivot"
argument_list|,
literal|"place_s,company_t"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"place_s"
argument_list|)
block|,
name|params
argument_list|(
literal|"facet.pivot"
argument_list|,
literal|"{!ex=ok}place_s,company_t"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!ex=ok}place_s"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=ok}place_s:cardiff"
argument_list|)
block|,
name|params
argument_list|(
literal|"facet.pivot"
argument_list|,
literal|"{!ex=pl,co}place_s,company_t"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=pl}place_s:cardiff"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=co}company_t:bbc"
argument_list|)
block|}
control|)
block|{
comment|// default order (count)
name|rsp
operator|=
name|query
argument_list|(
name|SolrParams
operator|.
name|wrapDefaults
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|"4"
argument_list|)
argument_list|,
name|facetParams
argument_list|)
argument_list|)
expr_stmt|;
name|pivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"place_s,company_t"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstPlace
operator|=
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"place_s"
argument_list|,
literal|"cardiff"
argument_list|,
literal|257
argument_list|,
name|firstPlace
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstCompany
operator|=
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"company_t"
argument_list|,
literal|"bbc"
argument_list|,
literal|101
argument_list|,
name|firstCompany
argument_list|)
expr_stmt|;
comment|// Index Order
name|rsp
operator|=
name|query
argument_list|(
name|SolrParams
operator|.
name|wrapDefaults
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|"4"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|)
argument_list|,
name|facetParams
argument_list|)
argument_list|)
expr_stmt|;
name|pivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"place_s,company_t"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstPlace
operator|=
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"place_s"
argument_list|,
literal|"0placeholder"
argument_list|,
literal|6
argument_list|,
name|firstPlace
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// num vals in data< limit==3
name|firstCompany
operator|=
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"company_t"
argument_list|,
literal|"bbc"
argument_list|,
literal|6
argument_list|,
name|firstCompany
argument_list|)
expr_stmt|;
comment|// Field level limits
name|rsp
operator|=
name|query
argument_list|(
name|SolrParams
operator|.
name|wrapDefaults
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"f.place_s.facet.limit"
argument_list|,
literal|"2"
argument_list|,
literal|"f.company_t.facet.limit"
argument_list|,
literal|"4"
argument_list|)
argument_list|,
name|facetParams
argument_list|)
argument_list|)
expr_stmt|;
name|pivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"place_s,company_t"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstPlace
operator|=
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"place_s"
argument_list|,
literal|"cardiff"
argument_list|,
literal|257
argument_list|,
name|firstPlace
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstCompany
operator|=
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"company_t"
argument_list|,
literal|"bbc"
argument_list|,
literal|101
argument_list|,
name|firstCompany
argument_list|)
expr_stmt|;
block|}
comment|// Pivot Faceting Count w/fq (not excluded)
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"fq"
argument_list|,
literal|"place_s:cardiff"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"place_s,company_t"
argument_list|,
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|pivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"place_s,company_t"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstPlace
operator|=
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"place_s"
argument_list|,
literal|"cardiff"
argument_list|,
literal|257
argument_list|,
name|firstPlace
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstCompany
operator|=
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"company_t"
argument_list|,
literal|"bbc"
argument_list|,
literal|101
argument_list|,
name|firstCompany
argument_list|)
expr_stmt|;
comment|// Same Pivot - one with exclusion and one w/o
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=ff}pay_i:[2000 TO *]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"{!key=filt}place_s,company_t"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"{!key=nofilt ex=ff}place_s,company_t"
argument_list|,
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|pivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"filt"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstPlace
operator|=
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"place_s"
argument_list|,
literal|"cardiff"
argument_list|,
literal|105
argument_list|,
name|firstPlace
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"company_t"
argument_list|,
literal|"bbc"
argument_list|,
literal|101
argument_list|,
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"company_t"
argument_list|,
literal|"microsoft"
argument_list|,
literal|54
argument_list|,
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|//
name|pivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"nofilt"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstPlace
operator|=
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"place_s"
argument_list|,
literal|"cardiff"
argument_list|,
literal|257
argument_list|,
name|firstPlace
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"company_t"
argument_list|,
literal|"bbc"
argument_list|,
literal|101
argument_list|,
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"company_t"
argument_list|,
literal|"microsoft"
argument_list|,
literal|56
argument_list|,
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Same Pivot - one in default (count) order and one in index order
comment|//
comment|// Broken: SOLR-6193 - the facet.sort localparam isn't being picked up correctly
comment|//
comment|// rsp = query( "q", "*:*",
comment|//              "rows", "0",
comment|//              "facet","true",
comment|//              "fq","pay_i:[2000 TO *]",
comment|//              "facet.pivot","{!key=sc}place_s,company_t",
comment|//              "facet.pivot","{!key=si facet.sort=index}place_s,company_t",
comment|//              FacetParams.FACET_LIMIT, "4");
comment|// pivots = rsp.getFacetPivot().get("sc");
comment|// assertEquals(4, pivots.size());
comment|// firstPlace = pivots.get(0);
comment|// assertPivot("place_s", "cardiff", 105, firstPlace);
comment|// assertEquals(4, firstPlace.getPivot().size());
comment|// assertPivot("company_t", "bbc", 101, firstPlace.getPivot().get(0));
comment|// assertPivot("company_t", "microsoft", 54, firstPlace.getPivot().get(1));
comment|// //
comment|// pivots = rsp.getFacetPivot().get("si");
comment|// assertEquals(4, pivots.size());
comment|// firstPlace = pivots.get(0);
comment|// assertPivot("place_s", "0placeholder", 6, firstPlace);
comment|// assertEquals(3, firstPlace.getPivot().size()); // only 3 in the data< facet.limit
comment|// assertPivot("company_t", "bbc", 6, firstPlace.getPivot().get(0));
comment|// assertPivot("company_t", "microsoft", 6, firstPlace.getPivot().get(1));
comment|// Field level limits and small offset
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"place_s,company_t"
argument_list|,
literal|"f.place_s.facet.limit"
argument_list|,
literal|"2"
argument_list|,
literal|"f.company_t.facet.limit"
argument_list|,
literal|"4"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|pivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"place_s,company_t"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstPlace
operator|=
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"place_s"
argument_list|,
literal|"medical staffing network holdings, inc."
argument_list|,
literal|51
argument_list|,
name|firstPlace
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// num vals in data< limit==4
name|firstCompany
operator|=
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"company_t"
argument_list|,
literal|"bbc"
argument_list|,
literal|50
argument_list|,
name|firstCompany
argument_list|)
expr_stmt|;
comment|// Field level offsets and limit
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=pl}place_s:cardiff"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"{!ex=pl}place_s,company_t"
argument_list|,
literal|"f.place_s.facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"f.company_t.facet.offset"
argument_list|,
literal|"2"
argument_list|,
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|pivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"place_s,company_t"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstPlace
operator|=
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"place_s"
argument_list|,
literal|"medical staffing network holdings, inc."
argument_list|,
literal|51
argument_list|,
name|firstPlace
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// num vals in data< limit==4
name|firstCompany
operator|=
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"company_t"
argument_list|,
literal|"polecat"
argument_list|,
literal|50
argument_list|,
name|firstCompany
argument_list|)
expr_stmt|;
comment|// datetime
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"hiredate_dt,place_s,company_t"
argument_list|,
literal|"f.hiredate_dt.facet.limit"
argument_list|,
literal|"2"
argument_list|,
literal|"f.hiredate_dt.facet.offset"
argument_list|,
literal|"1"
argument_list|,
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|pivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"hiredate_dt,place_s,company_t"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstDate
operator|=
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// 2012-09-01T12:30:00Z
name|assertPivot
argument_list|(
literal|"hiredate_dt"
argument_list|,
operator|new
name|Date
argument_list|(
literal|1346502600000L
argument_list|)
argument_list|,
literal|200
argument_list|,
name|firstDate
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|firstDate
operator|.
name|getPivot
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// num vals in data< limit==4
name|firstPlace
operator|=
name|firstDate
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"place_s"
argument_list|,
literal|"cardiff"
argument_list|,
literal|200
argument_list|,
name|firstPlace
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstCompany
operator|=
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"company_t"
argument_list|,
literal|"bbc"
argument_list|,
literal|50
argument_list|,
name|firstCompany
argument_list|)
expr_stmt|;
comment|// int
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"pay_i,place_s,company_t"
argument_list|,
literal|"f.pay_i.facet.limit"
argument_list|,
literal|"2"
argument_list|,
literal|"f.pay_i.facet.offset"
argument_list|,
literal|"1"
argument_list|,
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|pivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"pay_i,place_s,company_t"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstInt
operator|=
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"pay_i"
argument_list|,
literal|2000
argument_list|,
literal|50
argument_list|,
name|firstInt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|firstInt
operator|.
name|getPivot
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstPlace
operator|=
name|firstInt
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"place_s"
argument_list|,
literal|"0placeholder"
argument_list|,
literal|1
argument_list|,
name|firstPlace
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstCompany
operator|=
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"company_t"
argument_list|,
literal|"bbc"
argument_list|,
literal|1
argument_list|,
name|firstCompany
argument_list|)
expr_stmt|;
comment|// boolean
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"real_b,place_s,company_t"
argument_list|,
literal|"f.real_b.facet.missing"
argument_list|,
literal|"true"
argument_list|,
literal|"f.real_b.facet.limit"
argument_list|,
literal|"2"
argument_list|,
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|pivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"real_b,place_s,company_t"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstBool
operator|=
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"real_b"
argument_list|,
literal|false
argument_list|,
literal|300
argument_list|,
name|firstBool
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|firstBool
operator|.
name|getPivot
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstPlace
operator|=
name|firstBool
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"place_s"
argument_list|,
literal|"0placeholder"
argument_list|,
literal|6
argument_list|,
name|firstPlace
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstCompany
operator|=
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"company_t"
argument_list|,
literal|"bbc"
argument_list|,
literal|6
argument_list|,
name|firstCompany
argument_list|)
expr_stmt|;
comment|// bogus fields
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"doesntexist_t,neitherdoi_i"
argument_list|,
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|pivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"doesntexist_t,neitherdoi_i"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// bogus fields with facet.missing
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"doesntexist_t,neitherdoi_i"
argument_list|,
literal|"facet.missing"
argument_list|,
literal|"true"
argument_list|,
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|pivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"doesntexist_t,neitherdoi_i"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"doesntexist_t"
argument_list|,
literal|null
argument_list|,
name|docNumber
argument_list|,
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPivot
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"neitherdoi_i"
argument_list|,
literal|null
argument_list|,
name|docNumber
argument_list|,
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Negative facet limit
for|for
control|(
name|SolrParams
name|facetParams
range|:
comment|// results should be the same regardless of whether facet.limit is global,
comment|// a local param, or specified as a per-field override for both fields
operator|new
name|SolrParams
index|[]
block|{
name|params
argument_list|(
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|"-1"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"place_s,company_t"
argument_list|)
block|,
comment|// Broken: SOLR-6193
comment|// params("facet.pivot","{!facet.limit=-1}place_s,company_t"),
name|params
argument_list|(
literal|"f.place_s.facet.limit"
argument_list|,
literal|"-1"
argument_list|,
literal|"f.company_t.facet.limit"
argument_list|,
literal|"-1"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"place_s,company_t"
argument_list|)
block|}
control|)
block|{
name|SolrParams
name|p
init|=
name|SolrParams
operator|.
name|wrapDefaults
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|)
argument_list|,
name|facetParams
argument_list|)
decl_stmt|;
try|try
block|{
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|pivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"place_s,company_t"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|103
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstPlace
operator|=
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"place_s"
argument_list|,
literal|"cardiff"
argument_list|,
literal|257
argument_list|,
name|firstPlace
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|54
argument_list|,
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstCompany
operator|=
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"company_t"
argument_list|,
literal|"bbc"
argument_list|,
literal|101
argument_list|,
name|firstCompany
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|ae
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|ae
operator|.
name|getMessage
argument_list|()
operator|+
literal|"<== "
operator|+
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|ae
argument_list|)
throw|;
block|}
block|}
comment|// Negative per-field facet limit (outer)
for|for
control|(
name|SolrParams
name|facetParams
range|:
comment|// results should be the same regardless of whether per-field facet.limit is
comment|// a global or a local param
operator|new
name|SolrParams
index|[]
block|{
comment|// Broken: SOLR-6193
comment|// params( "facet.pivot","{!f.id.facet.limit=-1}place_s,id" ),
name|params
argument_list|(
literal|"facet.pivot"
argument_list|,
literal|"place_s,id"
argument_list|,
literal|"f.id.facet.limit"
argument_list|,
literal|"-1"
argument_list|)
block|}
control|)
block|{
name|SolrParams
name|p
init|=
name|SolrParams
operator|.
name|wrapDefaults
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|)
argument_list|,
name|facetParams
argument_list|)
decl_stmt|;
try|try
block|{
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|pivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"place_s,id"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// default
name|firstPlace
operator|=
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"place_s"
argument_list|,
literal|"cardiff"
argument_list|,
literal|257
argument_list|,
name|firstPlace
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|257
argument_list|,
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|ae
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|ae
operator|.
name|getMessage
argument_list|()
operator|+
literal|"<== "
operator|+
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|ae
argument_list|)
throw|;
block|}
block|}
comment|// Negative per-field facet limit (inner)
for|for
control|(
name|SolrParams
name|facetParams
range|:
comment|// results should be the same regardless of whether per-field facet.limit is
comment|// a global or a local param
operator|new
name|SolrParams
index|[]
block|{
comment|// Broken: SOLR-6193
comment|// params( "facet.pivot","{!f.place_s.facet.limit=-1}place_s,id" ),
name|params
argument_list|(
literal|"facet.pivot"
argument_list|,
literal|"place_s,id"
argument_list|,
literal|"f.place_s.facet.limit"
argument_list|,
literal|"-1"
argument_list|)
block|}
control|)
block|{
name|SolrParams
name|p
init|=
name|SolrParams
operator|.
name|wrapDefaults
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|)
argument_list|,
name|facetParams
argument_list|)
decl_stmt|;
try|try
block|{
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|pivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"place_s,id"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|103
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstPlace
operator|=
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"place_s"
argument_list|,
literal|"cardiff"
argument_list|,
literal|257
argument_list|,
name|firstPlace
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// default
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|ae
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|ae
operator|.
name|getMessage
argument_list|()
operator|+
literal|"<== "
operator|+
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|ae
argument_list|)
throw|;
block|}
block|}
comment|// Mincount + facet.pivot 2 different ways (swap field order)
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"place_s,company_t"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"company_t,place_s"
argument_list|,
name|FacetParams
operator|.
name|FACET_PIVOT_MINCOUNT
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|pivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"place_s,company_t"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|52
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstPlace
operator|=
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"place_s"
argument_list|,
literal|"cardiff"
argument_list|,
literal|257
argument_list|,
name|firstPlace
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstCompany
operator|=
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"company_t"
argument_list|,
literal|"bbc"
argument_list|,
literal|101
argument_list|,
name|firstCompany
argument_list|)
expr_stmt|;
comment|//
name|pivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"company_t,place_s"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstCompany
operator|=
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"company_t"
argument_list|,
literal|"bbc"
argument_list|,
literal|451
argument_list|,
name|firstCompany
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|52
argument_list|,
name|firstCompany
operator|.
name|getPivot
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstPlace
operator|=
name|firstCompany
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"place_s"
argument_list|,
literal|"cardiff"
argument_list|,
literal|101
argument_list|,
name|firstPlace
argument_list|)
expr_stmt|;
comment|// refine on SPECIAL empty string
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
literal|"-place_s:0placeholder"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|,
name|FacetParams
operator|.
name|FACET_OVERREQUEST_RATIO
argument_list|,
literal|"0"
argument_list|,
comment|// force refinement
name|FacetParams
operator|.
name|FACET_OVERREQUEST_COUNT
argument_list|,
literal|"1"
argument_list|,
comment|// force refinement
literal|"facet.pivot"
argument_list|,
literal|"special_s,company_t"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|docNumber
operator|-
literal|6
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// all docs but 0place
name|pivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"special_s,company_t"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstPlace
operator|=
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"special_s"
argument_list|,
name|SPECIAL
argument_list|,
literal|3
argument_list|,
name|firstPlace
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstCompany
operator|=
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"company_t"
argument_list|,
literal|"microsoft"
argument_list|,
literal|2
argument_list|,
name|firstCompany
argument_list|)
expr_stmt|;
comment|// TODO test "company_t,special_s" as well
comment|// refine on SPECIAL empty string& facet.missing
comment|// Also proves refinement on non-top elements occurs and allows them to get into the top
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
literal|"-place_s:0placeholder"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.missing"
argument_list|,
literal|"true"
argument_list|,
name|FacetParams
operator|.
name|FACET_OVERREQUEST_RATIO
argument_list|,
literal|"0"
argument_list|,
comment|// force refinement
name|FacetParams
operator|.
name|FACET_OVERREQUEST_COUNT
argument_list|,
literal|"2"
argument_list|,
comment|// force refinement
literal|"facet.pivot"
argument_list|,
literal|"special_s,company_t"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|docNumber
operator|-
literal|6
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// all docs but 0place
name|pivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"special_s,company_t"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstPlace
operator|=
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"special_s"
argument_list|,
name|SPECIAL
argument_list|,
literal|3
argument_list|,
name|firstPlace
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|firstCompany
operator|=
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"company_t"
argument_list|,
literal|"microsoft"
argument_list|,
literal|2
argument_list|,
name|firstCompany
argument_list|)
expr_stmt|;
comment|// last is "missing" val
name|assertPivot
argument_list|(
literal|"special_s"
argument_list|,
literal|null
argument_list|,
name|docNumber
operator|-
literal|6
operator|-
literal|3
operator|-
literal|2
argument_list|,
name|pivots
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// -0place -SPECIAL -xxx
comment|// forced refinement on facet.missing
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"f.bogus_x_s.facet.missing"
argument_list|,
literal|"true"
argument_list|,
literal|"f.bogus_y_s.facet.missing"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"bogus_x_s,place_s,bogus_y_s,company_t"
argument_list|,
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|"12"
argument_list|)
expr_stmt|;
name|pivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"bogus_x_s,place_s,bogus_y_s,company_t"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// just the missing value for bogus_x_s
name|assertPivot
argument_list|(
literal|"bogus_x_s"
argument_list|,
literal|null
argument_list|,
name|docNumber
argument_list|,
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|pivots
operator|=
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPivot
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// places
name|firstPlace
operator|=
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"place_s"
argument_list|,
literal|"cardiff"
argument_list|,
literal|257
argument_list|,
name|firstPlace
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// just the missing value for bogus_y_s
name|assertPivot
argument_list|(
literal|"bogus_y_s"
argument_list|,
literal|null
argument_list|,
literal|257
argument_list|,
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"company_t"
argument_list|,
literal|"bbc"
argument_list|,
literal|101
argument_list|,
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Microsoft will come back wrong if refinement was not done correctly
name|assertPivot
argument_list|(
literal|"company_t"
argument_list|,
literal|"microsoft"
argument_list|,
literal|56
argument_list|,
name|firstPlace
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Overrequesting a lot
name|this
operator|.
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"place_s,company_t"
argument_list|,
name|FacetParams
operator|.
name|FACET_OVERREQUEST_RATIO
argument_list|,
literal|"10"
argument_list|,
name|FacetParams
operator|.
name|FACET_OVERREQUEST_COUNT
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
comment|// Overrequesting off
name|this
operator|.
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"place_s,company_t"
argument_list|,
name|FacetParams
operator|.
name|FACET_OVERREQUEST_RATIO
argument_list|,
literal|"0"
argument_list|,
name|FacetParams
operator|.
name|FACET_OVERREQUEST_COUNT
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|doTestDeepPivotStats
argument_list|()
expr_stmt|;
name|doTestPivotRanges
argument_list|()
expr_stmt|;
block|}
DECL|method|doTestDeepPivotStats
specifier|private
name|void
name|doTestDeepPivotStats
parameter_list|()
throws|throws
name|Exception
block|{
name|QueryResponse
name|rsp
init|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"{!stats=s1}place_s,company_t"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=avg_price tag=s1}pay_i"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PivotField
argument_list|>
name|pivots
init|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"place_s,company_t"
argument_list|)
decl_stmt|;
name|PivotField
name|cardiffPivotField
init|=
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"cardiff"
argument_list|,
name|cardiffPivotField
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|257
argument_list|,
name|cardiffPivotField
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|FieldStatsInfo
name|cardiffStatsInfo
init|=
name|cardiffPivotField
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|"avg_price"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"avg_price"
argument_list|,
name|cardiffStatsInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|cardiffStatsInfo
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8742.0
argument_list|,
name|cardiffStatsInfo
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|257
argument_list|,
operator|(
name|long
operator|)
name|cardiffStatsInfo
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
name|long
operator|)
name|cardiffStatsInfo
operator|.
name|getMissing
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|347554.0
argument_list|,
name|cardiffStatsInfo
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8.20968772E8
argument_list|,
name|cardiffStatsInfo
operator|.
name|getSumOfSquares
argument_list|()
argument_list|,
literal|0.1E
operator|-
literal|7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1352.35019455253
argument_list|,
operator|(
name|double
operator|)
name|cardiffStatsInfo
operator|.
name|getMean
argument_list|()
argument_list|,
literal|0.1E
operator|-
literal|7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1170.86048165857
argument_list|,
name|cardiffStatsInfo
operator|.
name|getStddev
argument_list|()
argument_list|,
literal|0.1E
operator|-
literal|7
argument_list|)
expr_stmt|;
name|PivotField
name|bbcCardifftPivotField
init|=
name|cardiffPivotField
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"bbc"
argument_list|,
name|bbcCardifftPivotField
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|101
argument_list|,
name|bbcCardifftPivotField
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|FieldStatsInfo
name|bbcCardifftPivotFieldStatsInfo
init|=
name|bbcCardifftPivotField
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|"avg_price"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2400.0
argument_list|,
name|bbcCardifftPivotFieldStatsInfo
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8742.0
argument_list|,
name|bbcCardifftPivotFieldStatsInfo
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|101
argument_list|,
operator|(
name|long
operator|)
name|bbcCardifftPivotFieldStatsInfo
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
name|long
operator|)
name|bbcCardifftPivotFieldStatsInfo
operator|.
name|getMissing
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|248742.0
argument_list|,
name|bbcCardifftPivotFieldStatsInfo
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6.52422564E8
argument_list|,
name|bbcCardifftPivotFieldStatsInfo
operator|.
name|getSumOfSquares
argument_list|()
argument_list|,
literal|0.1E
operator|-
literal|7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2462.792079208
argument_list|,
operator|(
name|double
operator|)
name|bbcCardifftPivotFieldStatsInfo
operator|.
name|getMean
argument_list|()
argument_list|,
literal|0.1E
operator|-
literal|7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|631.0525860312
argument_list|,
name|bbcCardifftPivotFieldStatsInfo
operator|.
name|getStddev
argument_list|()
argument_list|,
literal|0.1E
operator|-
literal|7
argument_list|)
expr_stmt|;
name|PivotField
name|placeholder0PivotField
init|=
name|pivots
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"0placeholder"
argument_list|,
name|placeholder0PivotField
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|placeholder0PivotField
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|FieldStatsInfo
name|placeholder0PivotFieldStatsInfo
init|=
name|placeholder0PivotField
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|"avg_price"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"avg_price"
argument_list|,
name|placeholder0PivotFieldStatsInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2000.0
argument_list|,
name|placeholder0PivotFieldStatsInfo
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6400.0
argument_list|,
name|placeholder0PivotFieldStatsInfo
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
operator|(
name|long
operator|)
name|placeholder0PivotFieldStatsInfo
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
name|long
operator|)
name|placeholder0PivotFieldStatsInfo
operator|.
name|getMissing
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|22700.0
argument_list|,
name|placeholder0PivotFieldStatsInfo
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0105E8
argument_list|,
name|placeholder0PivotFieldStatsInfo
operator|.
name|getSumOfSquares
argument_list|()
argument_list|,
literal|0.1E
operator|-
literal|7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3783.333333333
argument_list|,
operator|(
name|double
operator|)
name|placeholder0PivotFieldStatsInfo
operator|.
name|getMean
argument_list|()
argument_list|,
literal|0.1E
operator|-
literal|7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1741.742422595
argument_list|,
name|placeholder0PivotFieldStatsInfo
operator|.
name|getStddev
argument_list|()
argument_list|,
literal|0.1E
operator|-
literal|7
argument_list|)
expr_stmt|;
name|PivotField
name|microsoftPlaceholder0PivotField
init|=
name|placeholder0PivotField
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"microsoft"
argument_list|,
name|microsoftPlaceholder0PivotField
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|microsoftPlaceholder0PivotField
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|FieldStatsInfo
name|microsoftPlaceholder0PivotFieldStatsInfo
init|=
name|microsoftPlaceholder0PivotField
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|"avg_price"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"avg_price"
argument_list|,
name|microsoftPlaceholder0PivotFieldStatsInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2000.0
argument_list|,
name|microsoftPlaceholder0PivotFieldStatsInfo
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6400.0
argument_list|,
name|microsoftPlaceholder0PivotFieldStatsInfo
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
operator|(
name|long
operator|)
name|microsoftPlaceholder0PivotFieldStatsInfo
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
name|long
operator|)
name|microsoftPlaceholder0PivotFieldStatsInfo
operator|.
name|getMissing
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|22700.0
argument_list|,
name|microsoftPlaceholder0PivotFieldStatsInfo
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0105E8
argument_list|,
name|microsoftPlaceholder0PivotFieldStatsInfo
operator|.
name|getSumOfSquares
argument_list|()
argument_list|,
literal|0.1E
operator|-
literal|7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3783.333333333
argument_list|,
operator|(
name|double
operator|)
name|microsoftPlaceholder0PivotFieldStatsInfo
operator|.
name|getMean
argument_list|()
argument_list|,
literal|0.1E
operator|-
literal|7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1741.742422595
argument_list|,
name|microsoftPlaceholder0PivotFieldStatsInfo
operator|.
name|getStddev
argument_list|()
argument_list|,
literal|0.1E
operator|-
literal|7
argument_list|)
expr_stmt|;
block|}
comment|/**    * spot checks some pivot values and the ranges hanging on them    */
DECL|method|doTestPivotRanges
specifier|private
name|void
name|doTestPivotRanges
parameter_list|()
throws|throws
name|Exception
block|{
comment|// note: 'p0' is only a top level range, not included in per-pivot ranges
for|for
control|(
name|SolrParams
name|p
range|:
operator|new
name|SolrParams
index|[]
block|{
comment|// results should be identical for all of these
name|params
argument_list|(
literal|"facet.range"
argument_list|,
literal|"{!key=p0 facet.range.gap=500}pay_i"
argument_list|,
literal|"facet.range"
argument_list|,
literal|"{!key=p1 tag=t1 facet.range.gap=100}pay_i"
argument_list|,
literal|"facet.range"
argument_list|,
literal|"{!key=p2 tag=t1 facet.range.gap=200}pay_i"
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"1000"
argument_list|)
block|,
name|params
argument_list|(
literal|"facet.range"
argument_list|,
literal|"{!key=p0 facet.range.gap=500}pay_i"
argument_list|,
literal|"facet.range"
argument_list|,
literal|"{!key=p1 tag=t1 facet.range.gap=100}pay_i"
argument_list|,
literal|"facet.range"
argument_list|,
literal|"{!key=p2 tag=t1 facet.range.gap=200}pay_i"
argument_list|,
literal|"f.pay_i.facet.range.start"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"1000"
argument_list|)
block|,
name|params
argument_list|(
literal|"facet.range"
argument_list|,
literal|"{!key=p0 facet.range.gap=500 facet.range.start=0}pay_i"
argument_list|,
literal|"facet.range"
argument_list|,
literal|"{!key=p1 tag=t1 facet.range.gap=100 facet.range.start=0}pay_i"
argument_list|,
literal|"facet.range"
argument_list|,
literal|"{!key=p2 tag=t1 facet.range.gap=200 facet.range.start=0}pay_i"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"1000"
argument_list|)
block|}
control|)
block|{
name|QueryResponse
name|rsp
init|=
name|query
argument_list|(
name|SolrParams
operator|.
name|wrapDefaults
argument_list|(
name|p
argument_list|,
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"{!range=t1}place_s,company_t"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PivotField
argument_list|>
name|pivots
init|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"place_s,company_t"
argument_list|)
decl_stmt|;
name|PivotField
name|pf
init|=
literal|null
decl_stmt|;
comment|// changes as we spot check
name|List
argument_list|<
name|RangeFacet
operator|.
name|Count
argument_list|>
name|rfc
init|=
literal|null
decl_stmt|;
comment|// changes as we spot check
comment|// 1st sanity check top level ranges
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rsp
operator|.
name|getFacetRanges
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertRange
argument_list|(
literal|"p0"
argument_list|,
literal|0
argument_list|,
literal|500
argument_list|,
literal|1000
argument_list|,
literal|2
argument_list|,
name|rsp
operator|.
name|getFacetRanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertRange
argument_list|(
literal|"p1"
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
literal|1000
argument_list|,
literal|10
argument_list|,
name|rsp
operator|.
name|getFacetRanges
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertRange
argument_list|(
literal|"p2"
argument_list|,
literal|0
argument_list|,
literal|200
argument_list|,
literal|1000
argument_list|,
literal|5
argument_list|,
name|rsp
operator|.
name|getFacetRanges
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// check pivots...
comment|// first top level pivot value
name|pf
operator|=
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"place_s"
argument_list|,
literal|"cardiff"
argument_list|,
literal|257
argument_list|,
name|pf
argument_list|)
expr_stmt|;
name|assertRange
argument_list|(
literal|"p1"
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
literal|1000
argument_list|,
literal|10
argument_list|,
name|pf
operator|.
name|getFacetRanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertRange
argument_list|(
literal|"p2"
argument_list|,
literal|0
argument_list|,
literal|200
argument_list|,
literal|1000
argument_list|,
literal|5
argument_list|,
name|pf
operator|.
name|getFacetRanges
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|rfc
operator|=
name|pf
operator|.
name|getFacetRanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCounts
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"200"
argument_list|,
name|rfc
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|rfc
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"300"
argument_list|,
name|rfc
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|rfc
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|rfc
operator|=
name|pf
operator|.
name|getFacetRanges
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCounts
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"200"
argument_list|,
name|rfc
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|29
argument_list|,
name|rfc
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// drill down one level of the pivot
name|pf
operator|=
name|pf
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"company_t"
argument_list|,
literal|"bbc"
argument_list|,
literal|101
argument_list|,
name|pf
argument_list|)
expr_stmt|;
name|assertRange
argument_list|(
literal|"p1"
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
literal|1000
argument_list|,
literal|10
argument_list|,
name|pf
operator|.
name|getFacetRanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertRange
argument_list|(
literal|"p2"
argument_list|,
literal|0
argument_list|,
literal|200
argument_list|,
literal|1000
argument_list|,
literal|5
argument_list|,
name|pf
operator|.
name|getFacetRanges
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|rfc
operator|=
name|pf
operator|.
name|getFacetRanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCounts
argument_list|()
expr_stmt|;
for|for
control|(
name|RangeFacet
operator|.
name|Count
name|c
range|:
name|rfc
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// no docs in our ranges for this pivot drill down
block|}
comment|// pop back up and spot check a different top level pivot value
name|pf
operator|=
name|pivots
operator|.
name|get
argument_list|(
literal|53
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"place_s"
argument_list|,
literal|"placeholder0"
argument_list|,
literal|1
argument_list|,
name|pf
argument_list|)
expr_stmt|;
name|assertRange
argument_list|(
literal|"p1"
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
literal|1000
argument_list|,
literal|10
argument_list|,
name|pf
operator|.
name|getFacetRanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertRange
argument_list|(
literal|"p2"
argument_list|,
literal|0
argument_list|,
literal|200
argument_list|,
literal|1000
argument_list|,
literal|5
argument_list|,
name|pf
operator|.
name|getFacetRanges
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|rfc
operator|=
name|pf
operator|.
name|getFacetRanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCounts
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|rfc
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rfc
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"100"
argument_list|,
name|rfc
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rfc
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// drill down one level of the pivot
name|pf
operator|=
name|pf
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertPivot
argument_list|(
literal|"company_t"
argument_list|,
literal|"compholder0"
argument_list|,
literal|1
argument_list|,
name|pf
argument_list|)
expr_stmt|;
name|assertRange
argument_list|(
literal|"p1"
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
literal|1000
argument_list|,
literal|10
argument_list|,
name|pf
operator|.
name|getFacetRanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertRange
argument_list|(
literal|"p2"
argument_list|,
literal|0
argument_list|,
literal|200
argument_list|,
literal|1000
argument_list|,
literal|5
argument_list|,
name|pf
operator|.
name|getFacetRanges
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|rfc
operator|=
name|pf
operator|.
name|getFacetRanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCounts
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|rfc
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rfc
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"100"
argument_list|,
name|rfc
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rfc
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * asserts that the actual PivotField matches the expected criteria    */
DECL|method|assertPivot
specifier|private
name|void
name|assertPivot
parameter_list|(
name|String
name|field
parameter_list|,
name|Object
name|value
parameter_list|,
name|int
name|count
parameter_list|,
comment|// int numKids,
name|PivotField
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"FIELD: "
operator|+
name|actual
operator|.
name|toString
argument_list|()
argument_list|,
name|field
argument_list|,
name|actual
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"VALUE: "
operator|+
name|actual
operator|.
name|toString
argument_list|()
argument_list|,
name|value
argument_list|,
name|actual
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"COUNT: "
operator|+
name|actual
operator|.
name|toString
argument_list|()
argument_list|,
name|count
argument_list|,
name|actual
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: add arg&& assert on number of kids
comment|//assertEquals("#KIDS: " + actual.toString(), numKids, actual.getPivot().size());
block|}
comment|/**    * asserts that the actual RangeFacet matches the expected criteria    */
DECL|method|assertRange
specifier|private
name|void
name|assertRange
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|start
parameter_list|,
name|Object
name|gap
parameter_list|,
name|Object
name|end
parameter_list|,
name|int
name|numCount
parameter_list|,
name|RangeFacet
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"NAME: "
operator|+
name|actual
operator|.
name|toString
argument_list|()
argument_list|,
name|name
argument_list|,
name|actual
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"START: "
operator|+
name|actual
operator|.
name|toString
argument_list|()
argument_list|,
name|start
argument_list|,
name|actual
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"GAP: "
operator|+
name|actual
operator|.
name|toString
argument_list|()
argument_list|,
name|gap
argument_list|,
name|actual
operator|.
name|getGap
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"END: "
operator|+
name|actual
operator|.
name|toString
argument_list|()
argument_list|,
name|end
argument_list|,
name|actual
operator|.
name|getEnd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"#COUNT: "
operator|+
name|actual
operator|.
name|toString
argument_list|()
argument_list|,
name|numCount
argument_list|,
name|actual
operator|.
name|getCounts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setupDistributedPivotFacetDocuments
specifier|private
name|void
name|setupDistributedPivotFacetDocuments
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Clear docs
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
specifier|final
name|int
name|maxDocs
init|=
literal|50
decl_stmt|;
specifier|final
name|SolrClient
name|zeroShard
init|=
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|SolrClient
name|oneShard
init|=
name|clients
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|SolrClient
name|twoShard
init|=
name|clients
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|SolrClient
name|threeShard
init|=
name|clients
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|// edge case: never gets any matching docs
for|for
control|(
name|Integer
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDocs
condition|;
name|i
operator|++
control|)
block|{
comment|//50 entries
name|addPivotDoc
argument_list|(
name|zeroShard
argument_list|,
literal|"id"
argument_list|,
name|getDocNum
argument_list|()
argument_list|,
literal|"place_s"
argument_list|,
literal|"cardiff"
argument_list|,
literal|"company_t"
argument_list|,
literal|"microsoft polecat bbc"
argument_list|,
literal|"pay_i"
argument_list|,
literal|2400
argument_list|,
literal|"hiredate_dt"
argument_list|,
literal|"2012-07-01T12:30:00Z"
argument_list|,
literal|"real_b"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|addPivotDoc
argument_list|(
name|zeroShard
argument_list|,
literal|"id"
argument_list|,
name|getDocNum
argument_list|()
argument_list|,
literal|"place_s"
argument_list|,
literal|"medical staffing network holdings, inc."
argument_list|,
literal|"company_t"
argument_list|,
literal|"microsoft polecat bbc"
argument_list|,
literal|"pay_i"
argument_list|,
literal|2400
argument_list|,
literal|"hiredate_dt"
argument_list|,
literal|"2012-07-01T12:30:00Z"
argument_list|)
expr_stmt|;
name|addPivotDoc
argument_list|(
name|oneShard
argument_list|,
literal|"id"
argument_list|,
name|getDocNum
argument_list|()
argument_list|,
literal|"place_s"
argument_list|,
literal|"placeholder"
operator|+
name|i
argument_list|,
literal|"company_t"
argument_list|,
literal|"compHolder"
operator|+
name|i
argument_list|,
literal|"pay_i"
argument_list|,
literal|24
operator|*
name|i
argument_list|,
literal|"hiredate_dt"
argument_list|,
literal|"2012-08-01T12:30:00Z"
argument_list|)
expr_stmt|;
name|addPivotDoc
argument_list|(
name|twoShard
argument_list|,
literal|"id"
argument_list|,
name|getDocNum
argument_list|()
argument_list|,
literal|"place_s"
argument_list|,
literal|"cardiff"
argument_list|,
literal|"company_t"
argument_list|,
literal|"bbc honda"
argument_list|,
literal|"pay_i"
argument_list|,
literal|2400
argument_list|,
literal|"hiredate_dt"
argument_list|,
literal|"2012-09-01T12:30:00Z"
argument_list|,
literal|"real_b"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|addPivotDoc
argument_list|(
name|twoShard
argument_list|,
literal|"id"
argument_list|,
name|getDocNum
argument_list|()
argument_list|,
literal|"place_s"
argument_list|,
literal|"cardiff"
argument_list|,
literal|"company_t"
argument_list|,
literal|"compHolder"
operator|+
name|i
argument_list|,
literal|"pay_i"
argument_list|,
literal|22
operator|*
name|i
argument_list|,
literal|"hiredate_dt"
argument_list|,
literal|"2012-09-01T12:30:00Z"
argument_list|,
literal|"real_b"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|addPivotDoc
argument_list|(
name|twoShard
argument_list|,
literal|"id"
argument_list|,
name|getDocNum
argument_list|()
argument_list|,
literal|"place_s"
argument_list|,
literal|"cardiff"
argument_list|,
literal|"company_t"
argument_list|,
literal|"compHolder"
operator|+
name|i
argument_list|,
literal|"pay_i"
argument_list|,
literal|21
operator|*
name|i
argument_list|,
literal|"hiredate_dt"
argument_list|,
literal|"2012-09-01T12:30:00Z"
argument_list|,
literal|"real_b"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|addPivotDoc
argument_list|(
name|twoShard
argument_list|,
literal|"id"
argument_list|,
name|getDocNum
argument_list|()
argument_list|,
literal|"place_s"
argument_list|,
literal|"cardiff"
argument_list|,
literal|"company_t"
argument_list|,
literal|"compHolder"
operator|+
name|i
argument_list|,
literal|"pay_i"
argument_list|,
literal|20
operator|*
name|i
argument_list|,
literal|"hiredate_dt"
argument_list|,
literal|"2012-09-01T12:30:00Z"
argument_list|,
literal|"real_b"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|//For the filler content
comment|//Fifty places with 6 results each
name|addPivotDoc
argument_list|(
name|oneShard
argument_list|,
literal|"id"
argument_list|,
name|getDocNum
argument_list|()
argument_list|,
literal|"place_s"
argument_list|,
name|i
operator|+
literal|"placeholder"
argument_list|,
literal|"company_t"
argument_list|,
literal|"microsoft polecat bbc"
argument_list|,
literal|"pay_i"
argument_list|,
literal|2400
argument_list|,
literal|"hiredate_dt"
argument_list|,
literal|"2012-10-01T12:30:00Z"
argument_list|,
literal|"real_b"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|addPivotDoc
argument_list|(
name|oneShard
argument_list|,
literal|"id"
argument_list|,
name|getDocNum
argument_list|()
argument_list|,
literal|"place_s"
argument_list|,
name|i
operator|+
literal|"placeholder"
argument_list|,
literal|"company_t"
argument_list|,
literal|"microsoft polecat bbc"
argument_list|,
literal|"pay_i"
argument_list|,
literal|3100
argument_list|,
literal|"hiredate_dt"
argument_list|,
literal|"2012-10-01T12:30:00Z"
argument_list|,
literal|"real_b"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|addPivotDoc
argument_list|(
name|oneShard
argument_list|,
literal|"id"
argument_list|,
name|getDocNum
argument_list|()
argument_list|,
literal|"place_s"
argument_list|,
name|i
operator|+
literal|"placeholder"
argument_list|,
literal|"company_t"
argument_list|,
literal|"microsoft polecat bbc"
argument_list|,
literal|"pay_i"
argument_list|,
literal|3400
argument_list|,
literal|"hiredate_dt"
argument_list|,
literal|"2012-10-01T12:30:00Z"
argument_list|,
literal|"real_b"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|addPivotDoc
argument_list|(
name|oneShard
argument_list|,
literal|"id"
argument_list|,
name|getDocNum
argument_list|()
argument_list|,
literal|"place_s"
argument_list|,
name|i
operator|+
literal|"placeholder"
argument_list|,
literal|"company_t"
argument_list|,
literal|"microsoft polecat bbc"
argument_list|,
literal|"pay_i"
argument_list|,
literal|5400
argument_list|,
literal|"hiredate_dt"
argument_list|,
literal|"2012-10-01T12:30:00Z"
argument_list|,
literal|"real_b"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|addPivotDoc
argument_list|(
name|oneShard
argument_list|,
literal|"id"
argument_list|,
name|getDocNum
argument_list|()
argument_list|,
literal|"place_s"
argument_list|,
name|i
operator|+
literal|"placeholder"
argument_list|,
literal|"company_t"
argument_list|,
literal|"microsoft polecat bbc"
argument_list|,
literal|"pay_i"
argument_list|,
literal|6400
argument_list|,
literal|"hiredate_dt"
argument_list|,
literal|"2012-10-01T12:30:00Z"
argument_list|,
literal|"real_b"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|addPivotDoc
argument_list|(
name|oneShard
argument_list|,
literal|"id"
argument_list|,
name|getDocNum
argument_list|()
argument_list|,
literal|"place_s"
argument_list|,
name|i
operator|+
literal|"placeholder"
argument_list|,
literal|"company_t"
argument_list|,
literal|"microsoft polecat bbc"
argument_list|,
literal|"pay_i"
argument_list|,
literal|2000
argument_list|,
literal|"hiredate_dt"
argument_list|,
literal|"2012-10-01T12:30:00Z"
argument_list|,
literal|"real_b"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
name|addPivotDoc
argument_list|(
name|oneShard
argument_list|,
literal|"id"
argument_list|,
name|getDocNum
argument_list|()
argument_list|,
literal|"place_s"
argument_list|,
literal|"cardiff"
argument_list|,
literal|"company_t"
argument_list|,
literal|"microsoft"
argument_list|,
literal|"pay_i"
argument_list|,
literal|4367
argument_list|,
literal|"hiredate_dt"
argument_list|,
literal|"2012-11-01T12:30:00Z"
argument_list|)
expr_stmt|;
name|addPivotDoc
argument_list|(
name|oneShard
argument_list|,
literal|"id"
argument_list|,
name|getDocNum
argument_list|()
argument_list|,
literal|"place_s"
argument_list|,
literal|"cardiff"
argument_list|,
literal|"company_t"
argument_list|,
literal|"microsoft bbc"
argument_list|,
literal|"pay_i"
argument_list|,
literal|8742
argument_list|,
literal|"hiredate_dt"
argument_list|,
literal|"2012-11-01T12:30:00Z"
argument_list|)
expr_stmt|;
name|addPivotDoc
argument_list|(
name|oneShard
argument_list|,
literal|"id"
argument_list|,
name|getDocNum
argument_list|()
argument_list|,
literal|"place_s"
argument_list|,
literal|"cardiff"
argument_list|,
literal|"company_t"
argument_list|,
literal|"microsoft polecat"
argument_list|,
literal|"pay_i"
argument_list|,
literal|5824
argument_list|,
literal|"hiredate_dt"
argument_list|,
literal|"2012-11-01T12:30:00Z"
argument_list|)
expr_stmt|;
name|addPivotDoc
argument_list|(
name|oneShard
argument_list|,
literal|"id"
argument_list|,
name|getDocNum
argument_list|()
argument_list|,
literal|"place_s"
argument_list|,
literal|"cardiff"
argument_list|,
literal|"company_t"
argument_list|,
literal|"microsoft "
argument_list|,
literal|"pay_i"
argument_list|,
literal|6539
argument_list|,
literal|"hiredate_dt"
argument_list|,
literal|"2012-11-01T12:30:00Z"
argument_list|)
expr_stmt|;
name|addPivotDoc
argument_list|(
name|oneShard
argument_list|,
literal|"id"
argument_list|,
name|getDocNum
argument_list|()
argument_list|,
literal|"place_s"
argument_list|,
literal|"medical staffing network holdings, inc."
argument_list|,
literal|"company_t"
argument_list|,
literal|"microsoft "
argument_list|,
literal|"pay_i"
argument_list|,
literal|6539
argument_list|,
literal|"hiredate_dt"
argument_list|,
literal|"2012-11-01T12:30:00Z"
argument_list|,
literal|"special_s"
argument_list|,
literal|"xxx"
argument_list|)
expr_stmt|;
name|addPivotDoc
argument_list|(
name|oneShard
argument_list|,
literal|"id"
argument_list|,
name|getDocNum
argument_list|()
argument_list|,
literal|"place_s"
argument_list|,
literal|"cardiff"
argument_list|,
literal|"company_t"
argument_list|,
literal|"polecat"
argument_list|,
literal|"pay_i"
argument_list|,
literal|4352
argument_list|,
literal|"hiredate_dt"
argument_list|,
literal|"2012-1-01T12:30:00Z"
argument_list|,
literal|"special_s"
argument_list|,
literal|"xxx"
argument_list|)
expr_stmt|;
name|addPivotDoc
argument_list|(
name|oneShard
argument_list|,
literal|"id"
argument_list|,
name|getDocNum
argument_list|()
argument_list|,
literal|"place_s"
argument_list|,
literal|"krakaw"
argument_list|,
literal|"company_t"
argument_list|,
literal|"polecat"
argument_list|,
literal|"pay_i"
argument_list|,
literal|4352
argument_list|,
literal|"hiredate_dt"
argument_list|,
literal|"2012-11-01T12:30:00Z"
argument_list|,
literal|"special_s"
argument_list|,
name|SPECIAL
argument_list|)
expr_stmt|;
name|addPivotDoc
argument_list|(
name|twoShard
argument_list|,
literal|"id"
argument_list|,
name|getDocNum
argument_list|()
argument_list|,
literal|"place_s"
argument_list|,
literal|"cardiff"
argument_list|,
literal|"company_t"
argument_list|,
literal|"microsoft"
argument_list|,
literal|"pay_i"
argument_list|,
literal|12
argument_list|,
literal|"hiredate_dt"
argument_list|,
literal|"2012-11-01T12:30:00Z"
argument_list|,
literal|"special_s"
argument_list|,
name|SPECIAL
argument_list|)
expr_stmt|;
name|addPivotDoc
argument_list|(
name|twoShard
argument_list|,
literal|"id"
argument_list|,
name|getDocNum
argument_list|()
argument_list|,
literal|"place_s"
argument_list|,
literal|"cardiff"
argument_list|,
literal|"company_t"
argument_list|,
literal|"microsoft"
argument_list|,
literal|"pay_i"
argument_list|,
literal|543
argument_list|,
literal|"hiredate_dt"
argument_list|,
literal|"2012-11-01T12:30:00Z"
argument_list|,
literal|"special_s"
argument_list|,
name|SPECIAL
argument_list|)
expr_stmt|;
comment|// two really trivial documents, unrelated to the rest of the tests,
comment|// for the purpose of demoing the porblem with mincount=0
name|addPivotDoc
argument_list|(
name|oneShard
argument_list|,
literal|"id"
argument_list|,
name|getDocNum
argument_list|()
argument_list|,
literal|"top_s"
argument_list|,
literal|"aaa"
argument_list|,
literal|"sub_s"
argument_list|,
literal|"bbb"
argument_list|)
expr_stmt|;
name|addPivotDoc
argument_list|(
name|twoShard
argument_list|,
literal|"id"
argument_list|,
name|getDocNum
argument_list|()
argument_list|,
literal|"top_s"
argument_list|,
literal|"xxx"
argument_list|,
literal|"sub_s"
argument_list|,
literal|"yyy"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"shard #3 should never have any docs"
argument_list|,
literal|0
argument_list|,
name|threeShard
operator|.
name|query
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Builds up a SolrInputDocument using the specified fields, then adds it to the     * specified client as well as the control client     * @see #indexDoc(org.apache.solr.client.solrj.SolrClient,SolrParams,SolrInputDocument...)    * @see #sdoc    */
DECL|method|addPivotDoc
specifier|private
name|void
name|addPivotDoc
parameter_list|(
name|SolrClient
name|client
parameter_list|,
name|Object
modifier|...
name|fields
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|indexDoc
argument_list|(
name|client
argument_list|,
name|params
argument_list|()
argument_list|,
name|sdoc
argument_list|(
name|fields
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|docNumber
specifier|private
name|int
name|docNumber
init|=
literal|0
decl_stmt|;
DECL|method|getDocNum
specifier|public
name|int
name|getDocNum
parameter_list|()
block|{
name|docNumber
operator|++
expr_stmt|;
return|return
name|docNumber
return|;
block|}
block|}
end_class
end_unit
