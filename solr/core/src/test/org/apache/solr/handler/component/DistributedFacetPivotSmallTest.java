begin_unit
begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|BaseDistributedSearchTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|FieldStatsInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|PivotField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
import|;
end_import
begin_class
DECL|class|DistributedFacetPivotSmallTest
specifier|public
class|class
name|DistributedFacetPivotSmallTest
extends|extends
name|BaseDistributedSearchTestCase
block|{
DECL|method|DistributedFacetPivotSmallTest
specifier|public
name|DistributedFacetPivotSmallTest
parameter_list|()
block|{
name|this
operator|.
name|fixShardCount
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|shardCount
operator|=
literal|4
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doTest
specifier|public
name|void
name|doTest
parameter_list|()
throws|throws
name|Exception
block|{
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// NOTE: we use the literal (4 character) string "null" as a company name
comment|// to help ensure there isn't any bugs where the literal string is treated as if it
comment|// were a true NULL value.
name|index
argument_list|(
name|id
argument_list|,
literal|19
argument_list|,
literal|"place_t"
argument_list|,
literal|"cardiff dublin"
argument_list|,
literal|"company_t"
argument_list|,
literal|"microsoft polecat"
argument_list|,
literal|"price_ti"
argument_list|,
literal|"15"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
literal|20
argument_list|,
literal|"place_t"
argument_list|,
literal|"dublin"
argument_list|,
literal|"company_t"
argument_list|,
literal|"polecat microsoft null"
argument_list|,
literal|"price_ti"
argument_list|,
literal|"19"
argument_list|,
comment|// this is the only doc to have solo_* fields, therefore only 1 shard has them
comment|// TODO: add enum field - blocked by SOLR-6682
literal|"solo_i"
argument_list|,
literal|42
argument_list|,
literal|"solo_s"
argument_list|,
literal|"lonely"
argument_list|,
literal|"solo_dt"
argument_list|,
literal|"1976-03-06T01:23:45Z"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
literal|21
argument_list|,
literal|"place_t"
argument_list|,
literal|"london la dublin"
argument_list|,
literal|"company_t"
argument_list|,
literal|"microsoft fujitsu null polecat"
argument_list|,
literal|"price_ti"
argument_list|,
literal|"29"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
literal|22
argument_list|,
literal|"place_t"
argument_list|,
literal|"krakow london cardiff"
argument_list|,
literal|"company_t"
argument_list|,
literal|"polecat null bbc"
argument_list|,
literal|"price_ti"
argument_list|,
literal|"39"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
literal|23
argument_list|,
literal|"place_t"
argument_list|,
literal|"london"
argument_list|,
literal|"company_t"
argument_list|,
literal|""
argument_list|,
literal|"price_ti"
argument_list|,
literal|"29"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
literal|24
argument_list|,
literal|"place_t"
argument_list|,
literal|"la"
argument_list|,
literal|"company_t"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
literal|25
argument_list|,
literal|"company_t"
argument_list|,
literal|"microsoft polecat null fujitsu null bbc"
argument_list|,
literal|"price_ti"
argument_list|,
literal|"59"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
literal|26
argument_list|,
literal|"place_t"
argument_list|,
literal|"krakow"
argument_list|,
literal|"company_t"
argument_list|,
literal|"null"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
literal|27
argument_list|,
literal|"place_t"
argument_list|,
literal|"krakow cardiff dublin london la"
argument_list|,
literal|"company_t"
argument_list|,
literal|"null microsoft polecat bbc fujitsu"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
literal|28
argument_list|,
literal|"place_t"
argument_list|,
literal|"cork"
argument_list|,
literal|"company_t"
argument_list|,
literal|"fujitsu rte"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|handle
operator|.
name|clear
argument_list|()
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"QTime"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"timestamp"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"maxScore"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
specifier|final
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|setDistributedParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"facet"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"facet.pivot"
argument_list|,
literal|"place_t,company_t"
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|queryServer
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PivotField
argument_list|>
name|expectedPlacePivots
init|=
operator|new
name|UnorderedEqualityArrayList
argument_list|<
name|PivotField
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PivotField
argument_list|>
name|expectedCardiffPivots
init|=
operator|new
name|UnorderedEqualityArrayList
argument_list|<
name|PivotField
argument_list|>
argument_list|()
decl_stmt|;
name|expectedCardiffPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"microsoft"
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedCardiffPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"null"
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedCardiffPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"bbc"
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedCardiffPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"polecat"
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedCardiffPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"fujitsu"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PivotField
argument_list|>
name|expectedDublinPivots
init|=
operator|new
name|UnorderedEqualityArrayList
argument_list|<
name|PivotField
argument_list|>
argument_list|()
decl_stmt|;
name|expectedDublinPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"polecat"
argument_list|,
literal|4
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedDublinPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"microsoft"
argument_list|,
literal|4
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedDublinPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"null"
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedDublinPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"fujitsu"
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedDublinPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"bbc"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PivotField
argument_list|>
name|expectedLondonPivots
init|=
operator|new
name|UnorderedEqualityArrayList
argument_list|<
name|PivotField
argument_list|>
argument_list|()
decl_stmt|;
name|expectedLondonPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"polecat"
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedLondonPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"microsoft"
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedLondonPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"fujitsu"
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedLondonPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"null"
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedLondonPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"bbc"
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PivotField
argument_list|>
name|expectedLAPivots
init|=
operator|new
name|UnorderedEqualityArrayList
argument_list|<
name|PivotField
argument_list|>
argument_list|()
decl_stmt|;
name|expectedLAPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"microsoft"
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedLAPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"fujitsu"
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedLAPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"null"
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedLAPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"bbc"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedLAPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"polecat"
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PivotField
argument_list|>
name|expectedKrakowPivots
init|=
operator|new
name|UnorderedEqualityArrayList
argument_list|<
name|PivotField
argument_list|>
argument_list|()
decl_stmt|;
name|expectedKrakowPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"polecat"
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedKrakowPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"bbc"
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedKrakowPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"null"
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedKrakowPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"fujitsu"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedKrakowPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"microsoft"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PivotField
argument_list|>
name|expectedCorkPivots
init|=
operator|new
name|UnorderedEqualityArrayList
argument_list|<
name|PivotField
argument_list|>
argument_list|()
decl_stmt|;
name|expectedCorkPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"fujitsu"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedCorkPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"rte"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedPlacePivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"place_t"
argument_list|,
literal|"dublin"
argument_list|,
literal|4
argument_list|,
name|expectedDublinPivots
argument_list|)
argument_list|)
expr_stmt|;
name|expectedPlacePivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"place_t"
argument_list|,
literal|"cardiff"
argument_list|,
literal|3
argument_list|,
name|expectedCardiffPivots
argument_list|)
argument_list|)
expr_stmt|;
name|expectedPlacePivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"place_t"
argument_list|,
literal|"london"
argument_list|,
literal|4
argument_list|,
name|expectedLondonPivots
argument_list|)
argument_list|)
expr_stmt|;
name|expectedPlacePivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"place_t"
argument_list|,
literal|"la"
argument_list|,
literal|3
argument_list|,
name|expectedLAPivots
argument_list|)
argument_list|)
expr_stmt|;
name|expectedPlacePivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"place_t"
argument_list|,
literal|"krakow"
argument_list|,
literal|3
argument_list|,
name|expectedKrakowPivots
argument_list|)
argument_list|)
expr_stmt|;
name|expectedPlacePivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"place_t"
argument_list|,
literal|"cork"
argument_list|,
literal|1
argument_list|,
name|expectedCorkPivots
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PivotField
argument_list|>
name|placePivots
init|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"place_t,company_t"
argument_list|)
decl_stmt|;
comment|// Useful to check for errors, orders lists and does toString() equality
comment|// check
name|testOrderedPivotsStringEquality
argument_list|(
name|expectedPlacePivots
argument_list|,
name|placePivots
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedPlacePivots
argument_list|,
name|placePivots
argument_list|)
expr_stmt|;
comment|// Test sorting by count
name|params
operator|.
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT
argument_list|,
name|FacetParams
operator|.
name|FACET_SORT_COUNT
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|queryServer
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|placePivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"place_t,company_t"
argument_list|)
expr_stmt|;
name|testCountSorting
argument_list|(
name|placePivots
argument_list|)
expr_stmt|;
comment|// Test limit
name|params
operator|.
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|queryServer
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|expectedPlacePivots
operator|=
operator|new
name|UnorderedEqualityArrayList
argument_list|<
name|PivotField
argument_list|>
argument_list|()
expr_stmt|;
name|expectedDublinPivots
operator|=
operator|new
name|UnorderedEqualityArrayList
argument_list|<
name|PivotField
argument_list|>
argument_list|()
expr_stmt|;
name|expectedDublinPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"polecat"
argument_list|,
literal|4
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedDublinPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"microsoft"
argument_list|,
literal|4
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedLondonPivots
operator|=
operator|new
name|UnorderedEqualityArrayList
argument_list|<
name|PivotField
argument_list|>
argument_list|()
expr_stmt|;
name|expectedLondonPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"null"
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedLondonPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"polecat"
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedPlacePivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"place_t"
argument_list|,
literal|"dublin"
argument_list|,
literal|4
argument_list|,
name|expectedDublinPivots
argument_list|)
argument_list|)
expr_stmt|;
name|expectedPlacePivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"place_t"
argument_list|,
literal|"london"
argument_list|,
literal|4
argument_list|,
name|expectedLondonPivots
argument_list|)
argument_list|)
expr_stmt|;
name|placePivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"place_t,company_t"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedPlacePivots
argument_list|,
name|placePivots
argument_list|)
expr_stmt|;
comment|// Test individual facet.limit values
name|params
operator|.
name|remove
argument_list|(
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"f.place_t."
operator|+
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"f.company_t."
operator|+
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|queryServer
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|expectedPlacePivots
operator|=
operator|new
name|UnorderedEqualityArrayList
argument_list|<
name|PivotField
argument_list|>
argument_list|()
expr_stmt|;
name|expectedDublinPivots
operator|=
operator|new
name|UnorderedEqualityArrayList
argument_list|<
name|PivotField
argument_list|>
argument_list|()
expr_stmt|;
name|expectedDublinPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"microsoft"
argument_list|,
literal|4
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedDublinPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"polecat"
argument_list|,
literal|4
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedDublinPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"null"
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedDublinPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"fujitsu"
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedLondonPivots
operator|=
operator|new
name|UnorderedEqualityArrayList
argument_list|<
name|PivotField
argument_list|>
argument_list|()
expr_stmt|;
name|expectedLondonPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"null"
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedLondonPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"polecat"
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedLondonPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"bbc"
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedLondonPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"fujitsu"
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedCardiffPivots
operator|=
operator|new
name|UnorderedEqualityArrayList
argument_list|<
name|PivotField
argument_list|>
argument_list|()
expr_stmt|;
name|expectedCardiffPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"polecat"
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedKrakowPivots
operator|=
operator|new
name|UnorderedEqualityArrayList
argument_list|<
name|PivotField
argument_list|>
argument_list|()
expr_stmt|;
name|expectedKrakowPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"null"
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedLAPivots
operator|=
operator|new
name|UnorderedEqualityArrayList
argument_list|<
name|PivotField
argument_list|>
argument_list|()
expr_stmt|;
name|expectedLAPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"fujitsu"
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedCorkPivots
operator|=
operator|new
name|UnorderedEqualityArrayList
argument_list|<
name|PivotField
argument_list|>
argument_list|()
expr_stmt|;
name|expectedCorkPivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"company_t"
argument_list|,
literal|"fujitsu"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectedPlacePivots
operator|.
name|add
argument_list|(
operator|new
name|ComparablePivotField
argument_list|(
literal|"place_t"
argument_list|,
literal|"dublin"
argument_list|,
literal|4
argument_list|,
name|expectedDublinPivots
argument_list|)
argument_list|)
expr_stmt|;
name|placePivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"place_t,company_t"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedPlacePivots
argument_list|,
name|placePivots
argument_list|)
expr_stmt|;
name|params
operator|.
name|remove
argument_list|(
literal|"f.company_t."
operator|+
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|)
expr_stmt|;
name|params
operator|.
name|remove
argument_list|(
literal|"f.place_t."
operator|+
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Test facet.missing=true with diff sorts
name|index
argument_list|(
literal|"id"
argument_list|,
literal|777
argument_list|)
expr_stmt|;
comment|// NOTE: id=25 has no place as well
name|commit
argument_list|()
expr_stmt|;
name|SolrParams
name|missingA
init|=
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"place_t,company_t"
argument_list|,
comment|// default facet.sort
name|FacetParams
operator|.
name|FACET_MISSING
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
name|SolrParams
name|missingB
init|=
name|SolrParams
operator|.
name|wrapDefaults
argument_list|(
name|missingA
argument_list|,
name|params
argument_list|(
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|"4"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|SolrParams
name|p
range|:
operator|new
name|SolrParams
index|[]
block|{
name|missingA
block|,
name|missingB
block|}
control|)
block|{
comment|// in either case, the last pivot option should be the same
name|rsp
operator|=
name|query
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|placePivots
operator|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"place_t,company_t"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"not enough values for pivot: "
operator|+
name|p
operator|+
literal|" => "
operator|+
name|placePivots
argument_list|,
literal|1
operator|<
name|placePivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PivotField
name|missing
init|=
name|placePivots
operator|.
name|get
argument_list|(
name|placePivots
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"not the missing place value: "
operator|+
name|p
argument_list|,
name|missing
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong missing place count: "
operator|+
name|p
argument_list|,
literal|2
argument_list|,
name|missing
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"not enough sub-pivots for missing place: "
operator|+
name|p
operator|+
literal|" => "
operator|+
name|missing
operator|.
name|getPivot
argument_list|()
argument_list|,
literal|1
operator|<
name|missing
operator|.
name|getPivot
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|missing
operator|=
name|missing
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
name|missing
operator|.
name|getPivot
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"not the missing company value: "
operator|+
name|p
argument_list|,
name|missing
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong missing company count: "
operator|+
name|p
argument_list|,
literal|1
argument_list|,
name|missing
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"company shouldn't have sub-pivots: "
operator|+
name|p
argument_list|,
name|missing
operator|.
name|getPivot
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// sort=index + mincount + limit
for|for
control|(
name|SolrParams
name|variableParams
range|:
operator|new
name|SolrParams
index|[]
block|{
comment|// we should get the same results regardless of overrequest
name|params
argument_list|(
literal|"facet.overrequest.count"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.overrequest.ratio"
argument_list|,
literal|"0"
argument_list|)
block|,
name|params
argument_list|()
block|}
control|)
block|{
name|SolrParams
name|p
init|=
name|SolrParams
operator|.
name|wrapDefaults
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"company_t"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|,
literal|"facet.pivot.mincount"
argument_list|,
literal|"4"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"4"
argument_list|)
argument_list|,
name|variableParams
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|PivotField
argument_list|>
name|pivots
init|=
name|query
argument_list|(
name|p
argument_list|)
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"company_t"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fujitsu"
argument_list|,
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"microsoft"
argument_list|,
name|pivots
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|pivots
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"null"
argument_list|,
name|pivots
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|pivots
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"polecat"
argument_list|,
name|pivots
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|pivots
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|ae
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|ae
operator|.
name|getMessage
argument_list|()
operator|+
literal|"<== "
operator|+
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|ae
argument_list|)
throw|;
block|}
block|}
comment|// sort=index + mincount + limit + offset
for|for
control|(
name|SolrParams
name|variableParams
range|:
operator|new
name|SolrParams
index|[]
block|{
comment|// we should get the same results regardless of overrequest
name|params
argument_list|(
literal|"facet.overrequest.count"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.overrequest.ratio"
argument_list|,
literal|"0"
argument_list|)
block|,
name|params
argument_list|()
block|}
control|)
block|{
name|SolrParams
name|p
init|=
name|SolrParams
operator|.
name|wrapDefaults
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"company_t"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|,
literal|"facet.pivot.mincount"
argument_list|,
literal|"4"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"4"
argument_list|)
argument_list|,
name|variableParams
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|PivotField
argument_list|>
name|pivots
init|=
name|query
argument_list|(
name|p
argument_list|)
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"company_t"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// asked for 4, but not enough meet the mincount
name|assertEquals
argument_list|(
literal|"microsoft"
argument_list|,
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"null"
argument_list|,
name|pivots
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|pivots
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"polecat"
argument_list|,
name|pivots
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|pivots
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|ae
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|ae
operator|.
name|getMessage
argument_list|()
operator|+
literal|"<== "
operator|+
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|ae
argument_list|)
throw|;
block|}
block|}
comment|// sort=index + mincount + limit + offset (more permutations)
for|for
control|(
name|SolrParams
name|variableParams
range|:
operator|new
name|SolrParams
index|[]
block|{
comment|// all of these combinations should result in the same first value
name|params
argument_list|(
literal|"facet.pivot.mincount"
argument_list|,
literal|"4"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"2"
argument_list|)
block|,
name|params
argument_list|(
literal|"facet.pivot.mincount"
argument_list|,
literal|"5"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|)
block|,
name|params
argument_list|(
literal|"facet.pivot.mincount"
argument_list|,
literal|"6"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|)
block|}
control|)
block|{
name|SolrParams
name|p
init|=
name|SolrParams
operator|.
name|wrapDefaults
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|,
literal|"facet.overrequest.ratio"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"company_t"
argument_list|)
argument_list|,
name|variableParams
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|PivotField
argument_list|>
name|pivots
init|=
name|query
argument_list|(
name|p
argument_list|)
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"company_t"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pivots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pivots
operator|.
name|toString
argument_list|()
argument_list|,
literal|"null"
argument_list|,
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pivots
operator|.
name|toString
argument_list|()
argument_list|,
literal|6
argument_list|,
name|pivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|ae
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|ae
operator|.
name|getMessage
argument_list|()
operator|+
literal|"<== "
operator|+
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|ae
argument_list|)
throw|;
block|}
block|}
name|doTestDeepPivotStats
argument_list|()
expr_stmt|;
name|doTestPivotStatsFromOneShard
argument_list|()
expr_stmt|;
block|}
DECL|method|doTestDeepPivotStats
specifier|private
name|void
name|doTestDeepPivotStats
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrParams
name|params
init|=
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"{!stats=s1}place_t,company_t"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!key=avg_price tag=s1}price_ti"
argument_list|)
decl_stmt|;
name|QueryResponse
name|rsp
init|=
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PivotField
argument_list|>
name|placePivots
init|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"place_t,company_t"
argument_list|)
decl_stmt|;
name|PivotField
name|dublinPivotField
init|=
name|placePivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"dublin"
argument_list|,
name|dublinPivotField
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|dublinPivotField
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|PivotField
name|microsoftPivotField
init|=
name|dublinPivotField
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"microsoft"
argument_list|,
name|microsoftPivotField
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|microsoftPivotField
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|FieldStatsInfo
name|dublinMicrosoftStatsInfo
init|=
name|microsoftPivotField
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|"avg_price"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|15.0
argument_list|,
name|dublinMicrosoftStatsInfo
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|29.0
argument_list|,
name|dublinMicrosoftStatsInfo
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
name|long
operator|)
name|dublinMicrosoftStatsInfo
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|long
operator|)
name|dublinMicrosoftStatsInfo
operator|.
name|getMissing
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|63.0
argument_list|,
name|dublinMicrosoftStatsInfo
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1427.0
argument_list|,
name|dublinMicrosoftStatsInfo
operator|.
name|getSumOfSquares
argument_list|()
argument_list|,
literal|0.1E
operator|-
literal|7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|21.0
argument_list|,
operator|(
name|double
operator|)
name|dublinMicrosoftStatsInfo
operator|.
name|getMean
argument_list|()
argument_list|,
literal|0.1E
operator|-
literal|7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7.211102550927978
argument_list|,
name|dublinMicrosoftStatsInfo
operator|.
name|getStddev
argument_list|()
argument_list|,
literal|0.1E
operator|-
literal|7
argument_list|)
expr_stmt|;
name|PivotField
name|cardiffPivotField
init|=
name|placePivots
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"cardiff"
argument_list|,
name|cardiffPivotField
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cardiffPivotField
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|PivotField
name|polecatPivotField
init|=
name|cardiffPivotField
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"polecat"
argument_list|,
name|polecatPivotField
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|polecatPivotField
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|FieldStatsInfo
name|cardiffPolecatStatsInfo
init|=
name|polecatPivotField
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|"avg_price"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|15.0
argument_list|,
name|cardiffPolecatStatsInfo
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|39.0
argument_list|,
name|cardiffPolecatStatsInfo
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|long
operator|)
name|cardiffPolecatStatsInfo
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|long
operator|)
name|cardiffPolecatStatsInfo
operator|.
name|getMissing
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|54.0
argument_list|,
name|cardiffPolecatStatsInfo
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1746.0
argument_list|,
name|cardiffPolecatStatsInfo
operator|.
name|getSumOfSquares
argument_list|()
argument_list|,
literal|0.1E
operator|-
literal|7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|27.0
argument_list|,
operator|(
name|double
operator|)
name|cardiffPolecatStatsInfo
operator|.
name|getMean
argument_list|()
argument_list|,
literal|0.1E
operator|-
literal|7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|16.97056274847714
argument_list|,
name|cardiffPolecatStatsInfo
operator|.
name|getStddev
argument_list|()
argument_list|,
literal|0.1E
operator|-
literal|7
argument_list|)
expr_stmt|;
name|PivotField
name|krakowPivotField
init|=
name|placePivots
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"krakow"
argument_list|,
name|krakowPivotField
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|krakowPivotField
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|PivotField
name|fujitsuPivotField
init|=
name|krakowPivotField
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"fujitsu"
argument_list|,
name|fujitsuPivotField
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fujitsuPivotField
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|FieldStatsInfo
name|krakowFujitsuStatsInfo
init|=
name|fujitsuPivotField
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|"avg_price"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|krakowFujitsuStatsInfo
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|krakowFujitsuStatsInfo
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
name|long
operator|)
name|krakowFujitsuStatsInfo
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|long
operator|)
name|krakowFujitsuStatsInfo
operator|.
name|getMissing
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|krakowFujitsuStatsInfo
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|krakowFujitsuStatsInfo
operator|.
name|getSumOfSquares
argument_list|()
argument_list|,
literal|0.1E
operator|-
literal|7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|NaN
argument_list|,
operator|(
name|double
operator|)
name|krakowFujitsuStatsInfo
operator|.
name|getMean
argument_list|()
argument_list|,
literal|0.1E
operator|-
literal|7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|krakowFujitsuStatsInfo
operator|.
name|getStddev
argument_list|()
argument_list|,
literal|0.1E
operator|-
literal|7
argument_list|)
expr_stmt|;
block|}
comment|// Useful to check for errors, orders lists and does toString() equality check
DECL|method|testOrderedPivotsStringEquality
specifier|private
name|void
name|testOrderedPivotsStringEquality
parameter_list|(
name|List
argument_list|<
name|PivotField
argument_list|>
name|expectedPlacePivots
parameter_list|,
name|List
argument_list|<
name|PivotField
argument_list|>
name|placePivots
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|expectedPlacePivots
argument_list|,
operator|new
name|PivotFieldComparator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PivotField
name|expectedPivot
range|:
name|expectedPlacePivots
control|)
block|{
if|if
condition|(
name|expectedPivot
operator|.
name|getPivot
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|expectedPivot
operator|.
name|getPivot
argument_list|()
argument_list|,
operator|new
name|PivotFieldComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|placePivots
argument_list|,
operator|new
name|PivotFieldComparator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PivotField
name|pivot
range|:
name|placePivots
control|)
block|{
if|if
condition|(
name|pivot
operator|.
name|getPivot
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|pivot
operator|.
name|getPivot
argument_list|()
argument_list|,
operator|new
name|PivotFieldComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|expectedPlacePivots
operator|.
name|toString
argument_list|()
argument_list|,
name|placePivots
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * sanity check the stat values nested under a pivot when at least one shard    * has nothing but missing values for the stat    */
DECL|method|doTestPivotStatsFromOneShard
specifier|private
name|void
name|doTestPivotStatsFromOneShard
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrParams
name|params
init|=
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"{!stats=s1}place_t,company_t"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!tag=s1}solo_i"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!tag=s1}solo_s"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!tag=s1}solo_dt"
argument_list|)
decl_stmt|;
name|QueryResponse
name|rsp
init|=
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PivotField
argument_list|>
name|placePivots
init|=
name|rsp
operator|.
name|getFacetPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|"place_t,company_t"
argument_list|)
decl_stmt|;
name|PivotField
name|placePivot
init|=
name|placePivots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"dublin"
argument_list|,
name|placePivot
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|placePivot
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|PivotField
name|companyPivot
init|=
name|placePivot
operator|.
name|getPivot
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"null"
argument_list|,
name|companyPivot
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|companyPivot
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PivotField
name|pf
range|:
operator|new
name|PivotField
index|[]
block|{
name|placePivot
block|,
name|companyPivot
block|}
control|)
block|{
name|assertThereCanBeOnlyOne
argument_list|(
name|pf
argument_list|,
name|pf
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|"solo_s"
argument_list|)
argument_list|,
literal|"lonely"
argument_list|)
expr_stmt|;
name|assertThereCanBeOnlyOne
argument_list|(
name|pf
argument_list|,
name|pf
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|"solo_i"
argument_list|)
argument_list|,
literal|42.0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pf
operator|.
name|getField
argument_list|()
operator|+
literal|":"
operator|+
name|pf
operator|.
name|getValue
argument_list|()
operator|+
literal|": int mean"
argument_list|,
literal|42.0D
argument_list|,
name|pf
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|"solo_i"
argument_list|)
operator|.
name|getMean
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|expected
init|=
operator|new
name|Date
argument_list|(
literal|194923425000L
argument_list|)
decl_stmt|;
comment|// 1976-03-06T01:23:45Z
name|assertThereCanBeOnlyOne
argument_list|(
name|pf
argument_list|,
name|pf
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|"solo_dt"
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pf
operator|.
name|getField
argument_list|()
operator|+
literal|":"
operator|+
name|pf
operator|.
name|getValue
argument_list|()
operator|+
literal|": date mean"
argument_list|,
name|expected
argument_list|,
name|pf
operator|.
name|getFieldStatsInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|"solo_dt"
argument_list|)
operator|.
name|getMean
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: add enum field asserts - blocked by SOLR-6682
block|}
block|}
DECL|method|testCountSorting
specifier|private
name|void
name|testCountSorting
parameter_list|(
name|List
argument_list|<
name|PivotField
argument_list|>
name|pivots
parameter_list|)
block|{
name|Integer
name|lastCount
init|=
literal|null
decl_stmt|;
for|for
control|(
name|PivotField
name|pivot
range|:
name|pivots
control|)
block|{
if|if
condition|(
name|lastCount
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|pivot
operator|.
name|getCount
argument_list|()
operator|<=
name|lastCount
argument_list|)
expr_stmt|;
block|}
name|lastCount
operator|=
name|pivot
operator|.
name|getCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|pivot
operator|.
name|getPivot
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|testCountSorting
argument_list|(
name|pivot
operator|.
name|getPivot
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * given a PivotField, a FieldStatsInfo, and a value; asserts that:    *<ul>    *<li>stat count == 1</li>    *<li>stat missing == pivot count - 1</li>    *<li>stat min == stat max == value</li>    *</ul>    */
DECL|method|assertThereCanBeOnlyOne
specifier|private
name|void
name|assertThereCanBeOnlyOne
parameter_list|(
name|PivotField
name|pf
parameter_list|,
name|FieldStatsInfo
name|stats
parameter_list|,
name|Object
name|val
parameter_list|)
block|{
name|String
name|msg
init|=
name|pf
operator|.
name|getField
argument_list|()
operator|+
literal|":"
operator|+
name|pf
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|+
literal|" stats count"
argument_list|,
literal|1L
argument_list|,
operator|(
name|long
operator|)
name|stats
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|+
literal|" stats missing"
argument_list|,
name|pf
operator|.
name|getCount
argument_list|()
operator|-
literal|1L
argument_list|,
operator|(
name|long
operator|)
name|stats
operator|.
name|getMissing
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|+
literal|" stats min"
argument_list|,
name|val
argument_list|,
name|stats
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|+
literal|" stats max"
argument_list|,
name|val
argument_list|,
name|stats
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|ComparablePivotField
specifier|public
specifier|static
class|class
name|ComparablePivotField
extends|extends
name|PivotField
block|{
DECL|method|ComparablePivotField
specifier|public
name|ComparablePivotField
parameter_list|(
name|String
name|f
parameter_list|,
name|Object
name|v
parameter_list|,
name|int
name|count
parameter_list|,
name|List
argument_list|<
name|PivotField
argument_list|>
name|pivot
parameter_list|)
block|{
name|super
argument_list|(
name|f
argument_list|,
name|v
argument_list|,
name|count
argument_list|,
name|pivot
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|PivotField
operator|.
name|class
argument_list|)
condition|)
return|return
literal|false
return|;
name|PivotField
name|other
init|=
operator|(
name|PivotField
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|getCount
argument_list|()
operator|!=
name|other
operator|.
name|getCount
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getField
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|getField
argument_list|()
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|getField
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getField
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getPivot
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|getPivot
argument_list|()
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|getPivot
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getPivot
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
DECL|class|UnorderedEqualityArrayList
specifier|public
specifier|static
class|class
name|UnorderedEqualityArrayList
parameter_list|<
name|T
parameter_list|>
extends|extends
name|ArrayList
argument_list|<
name|T
argument_list|>
block|{
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|boolean
name|equal
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|ArrayList
condition|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|otherList
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|size
argument_list|()
operator|==
name|otherList
operator|.
name|size
argument_list|()
condition|)
block|{
name|equal
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Object
name|objectInOtherList
range|:
name|otherList
control|)
block|{
if|if
condition|(
operator|!
name|contains
argument_list|(
name|objectInOtherList
argument_list|)
condition|)
block|{
name|equal
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|equal
return|;
block|}
DECL|method|indexOf
specifier|public
name|int
name|indexOf
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
block|}
DECL|class|PivotFieldComparator
specifier|public
class|class
name|PivotFieldComparator
implements|implements
name|Comparator
argument_list|<
name|PivotField
argument_list|>
block|{
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|PivotField
name|o1
parameter_list|,
name|PivotField
name|o2
parameter_list|)
block|{
name|Integer
name|compare
init|=
operator|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|o2
operator|.
name|getCount
argument_list|()
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|o1
operator|.
name|getCount
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|compare
operator|==
literal|0
condition|)
block|{
name|compare
operator|=
operator|(
operator|(
name|String
operator|)
name|o2
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
operator|(
name|String
operator|)
name|o1
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|compare
return|;
block|}
block|}
block|}
end_class
end_unit
