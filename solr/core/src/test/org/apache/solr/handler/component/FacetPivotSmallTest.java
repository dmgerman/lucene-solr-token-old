begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_comment
comment|/**  * Single node testing of pivot facets  */
end_comment
begin_class
DECL|class|FacetPivotSmallTest
specifier|public
class|class
name|FacetPivotSmallTest
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema11.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|lrf
operator|=
name|h
operator|.
name|getRequestFactory
argument_list|(
literal|"standard"
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
comment|/**    * we don't support comma's in the "stats" local param ... yet: SOLR-6663      */
DECL|method|testStatsTagHasComma
specifier|public
name|void
name|testStatsTagHasComma
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// behavior should be same either way
name|index
argument_list|()
expr_stmt|;
block|}
name|assertQEx
argument_list|(
literal|"Can't use multiple tags in stats local param until SOLR-6663 is decided"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!tag=foo}price_ti"
argument_list|,
literal|"stats.field"
argument_list|,
literal|"{!tag=bar}id"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"{!stats=foo,bar}place_t,company_t"
argument_list|)
argument_list|,
literal|400
argument_list|)
expr_stmt|;
block|}
comment|/**    * if bogus stats are requested, the pivots should still work    */
DECL|method|testBogusStatsTag
specifier|public
name|void
name|testBogusStatsTag
parameter_list|()
throws|throws
name|Exception
block|{
name|index
argument_list|()
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"{!stats=bogus}place_t,company_t"
argument_list|)
comment|// check we still get pivots...
argument_list|,
literal|"//arr[@name='place_t,company_t']/lst[str[@name='value'][.='dublin']]"
comment|// .. but sanity check we don't have any stats
argument_list|,
literal|"count(//arr[@name='place_t,company_t']/lst[str[@name='value'][.='dublin']]/lst[@name='stats'])=0"
argument_list|)
expr_stmt|;
block|}
DECL|method|testPivotFacetUnsorted
specifier|public
name|void
name|testPivotFacetUnsorted
parameter_list|()
throws|throws
name|Exception
block|{
name|index
argument_list|()
expr_stmt|;
specifier|final
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"facet"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"facet.pivot"
argument_list|,
literal|"place_t,company_t"
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
name|params
argument_list|)
decl_stmt|;
specifier|final
name|String
name|facetPivotPrefix
init|=
literal|"//lst[@name='facet_counts']/lst[@name='facet_pivot']/arr[@name='place_t,company_t']/lst"
decl_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|,
name|facetPivotPrefix
operator|+
literal|"/str[@name='field'][.='place_t']"
argument_list|,
comment|// dublin
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[1]/str[@name='value'][.='microsoft']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[1]/int[@name='count'][.=4]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[2]/str[@name='value'][.='polecat']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[2]/int[@name='count'][.=4]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[3]/str[@name='value'][.='null']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[3]/int[@name='count'][.=3]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[4]/str[@name='value'][.='fujitsu']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[4]/int[@name='count'][.=2]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[5]/str[@name='value'][.='bbc']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[5]/int[@name='count'][.=1]"
argument_list|,
comment|// london
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='london']]/arr[@name='pivot']/lst[1]/str[@name='value'][.='null']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='london']]/arr[@name='pivot']/lst[1]/int[@name='count'][.=3]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='london']]/arr[@name='pivot']/lst[2]/str[@name='value'][.='polecat']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='london']]/arr[@name='pivot']/lst[2]/int[@name='count'][.=3]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='london']]/arr[@name='pivot']/lst[3]/str[@name='value'][.='bbc']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='london']]/arr[@name='pivot']/lst[3]/int[@name='count'][.=2]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='london']]/arr[@name='pivot']/lst[4]/str[@name='value'][.='fujitsu']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='london']]/arr[@name='pivot']/lst[4]/int[@name='count'][.=2]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='london']]/arr[@name='pivot']/lst[5]/str[@name='value'][.='microsoft']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='london']]/arr[@name='pivot']/lst[5]/int[@name='count'][.=2]"
argument_list|,
comment|// cardiff
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='cardiff']]/arr[@name='pivot']/lst[1]/str[@name='value'][.='polecat']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='cardiff']]/arr[@name='pivot']/lst[1]/int[@name='count'][.=3]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='cardiff']]/arr[@name='pivot']/lst[2]/str[@name='value'][.='bbc']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='cardiff']]/arr[@name='pivot']/lst[2]/int[@name='count'][.=2]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='cardiff']]/arr[@name='pivot']/lst[3]/str[@name='value'][.='microsoft']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='cardiff']]/arr[@name='pivot']/lst[3]/int[@name='count'][.=2]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='cardiff']]/arr[@name='pivot']/lst[4]/str[@name='value'][.='null']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='cardiff']]/arr[@name='pivot']/lst[4]/int[@name='count'][.=2]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='cardiff']]/arr[@name='pivot']/lst[5]/str[@name='value'][.='fujitsu']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='cardiff']]/arr[@name='pivot']/lst[5]/int[@name='count'][.=1]"
argument_list|,
comment|// krakow
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='krakow']]/arr[@name='pivot']/lst[1]/str[@name='value'][.='null']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='krakow']]/arr[@name='pivot']/lst[1]/int[@name='count'][.=3]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='krakow']]/arr[@name='pivot']/lst[2]/str[@name='value'][.='bbc']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='krakow']]/arr[@name='pivot']/lst[2]/int[@name='count'][.=2]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='krakow']]/arr[@name='pivot']/lst[3]/str[@name='value'][.='polecat']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='krakow']]/arr[@name='pivot']/lst[3]/int[@name='count'][.=2]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='krakow']]/arr[@name='pivot']/lst[4]/str[@name='value'][.='fujitsu']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='krakow']]/arr[@name='pivot']/lst[4]/int[@name='count'][.=1]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='krakow']]/arr[@name='pivot']/lst[5]/str[@name='value'][.='microsoft']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='krakow']]/arr[@name='pivot']/lst[5]/int[@name='count'][.=1]"
argument_list|,
comment|// la
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='la']]/arr[@name='pivot']/lst[1]/str[@name='value'][.='fujitsu']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='la']]/arr[@name='pivot']/lst[1]/int[@name='count'][.=2]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='la']]/arr[@name='pivot']/lst[2]/str[@name='value'][.='microsoft']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='la']]/arr[@name='pivot']/lst[2]/int[@name='count'][.=2]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='la']]/arr[@name='pivot']/lst[3]/str[@name='value'][.='null']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='la']]/arr[@name='pivot']/lst[3]/int[@name='count'][.=2]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='la']]/arr[@name='pivot']/lst[4]/str[@name='value'][.='polecat']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='la']]/arr[@name='pivot']/lst[4]/int[@name='count'][.=2]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='la']]/arr[@name='pivot']/lst[5]/str[@name='value'][.='bbc']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='la']]/arr[@name='pivot']/lst[5]/int[@name='count'][.=1]"
argument_list|,
comment|// cork
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='cork']]/arr[@name='pivot']/lst[1]/str[@name='value'][.='fujitsu']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='cork']]/arr[@name='pivot']/lst[1]/int[@name='count'][.=1]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='cork']]/arr[@name='pivot']/lst[2]/str[@name='value'][.='rte']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='cork']]/arr[@name='pivot']/lst[2]/int[@name='count'][.=1]"
argument_list|)
expr_stmt|;
block|}
DECL|method|testPivotFacetStatsUnsortedTagged
specifier|public
name|void
name|testPivotFacetStatsUnsortedTagged
parameter_list|()
throws|throws
name|Exception
block|{
name|index
argument_list|()
expr_stmt|;
specifier|final
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"facet"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"facet.pivot"
argument_list|,
literal|"{!stats=s1}place_t,company_t"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"stats"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"stats.field"
argument_list|,
literal|"{!key=avg_price tag=s1}price_ti"
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
name|params
argument_list|)
decl_stmt|;
specifier|final
name|String
name|statsPrefix
init|=
literal|"//lst[@name='facet_counts']/lst[@name='facet_pivot']/arr[@name='place_t,company_t']/lst"
decl_stmt|;
name|String
name|dublinMicrosoftStats
init|=
name|statsPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[str[@name='value'][.='microsoft']]/lst[@name='stats']/lst[@name='stats_fields']/lst[@name='avg_price']"
decl_stmt|;
name|String
name|cardiffPolecatStats
init|=
name|statsPrefix
operator|+
literal|"[str[@name='value'][.='cardiff']]/arr[@name='pivot']/lst[str[@name='value'][.='polecat']]/lst[@name='stats']/lst[@name='stats_fields']/lst[@name='avg_price']"
decl_stmt|;
name|String
name|krakowFujitsuStats
init|=
name|statsPrefix
operator|+
literal|"[str[@name='value'][.='krakow']]/arr[@name='pivot']/lst[str[@name='value'][.='fujitsu']]/lst[@name='stats']/lst[@name='stats_fields']/lst[@name='avg_price']"
decl_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|,
name|dublinMicrosoftStats
operator|+
literal|"/double[@name='min'][.=15.0]"
argument_list|,
name|dublinMicrosoftStats
operator|+
literal|"/double[@name='max'][.=29.0]"
argument_list|,
name|dublinMicrosoftStats
operator|+
literal|"/long[@name='count'][.=3]"
argument_list|,
name|dublinMicrosoftStats
operator|+
literal|"/long[@name='missing'][.=1]"
argument_list|,
name|dublinMicrosoftStats
operator|+
literal|"/double[@name='sum'][.=63.0]"
argument_list|,
name|dublinMicrosoftStats
operator|+
literal|"/double[@name='sumOfSquares'][.=1427.0]"
argument_list|,
name|dublinMicrosoftStats
operator|+
literal|"/double[@name='mean'][.=21.0]"
argument_list|,
name|dublinMicrosoftStats
operator|+
literal|"/double[@name='stddev'][.=7.211102550927978]"
argument_list|,
comment|// if new stats are supported, this will break - update test to assert values for each
literal|"count("
operator|+
name|dublinMicrosoftStats
operator|+
literal|"/*)=8"
argument_list|,
name|cardiffPolecatStats
operator|+
literal|"/double[@name='min'][.=15.0]"
argument_list|,
name|cardiffPolecatStats
operator|+
literal|"/double[@name='max'][.=39.0]"
argument_list|,
name|cardiffPolecatStats
operator|+
literal|"/long[@name='count'][.=2]"
argument_list|,
name|cardiffPolecatStats
operator|+
literal|"/long[@name='missing'][.=1]"
argument_list|,
name|cardiffPolecatStats
operator|+
literal|"/double[@name='sum'][.=54.0]"
argument_list|,
name|cardiffPolecatStats
operator|+
literal|"/double[@name='sumOfSquares'][.=1746.0]"
argument_list|,
name|cardiffPolecatStats
operator|+
literal|"/double[@name='mean'][.=27.0]"
argument_list|,
name|cardiffPolecatStats
operator|+
literal|"/double[@name='stddev'][.=16.97056274847714]"
argument_list|,
comment|// if new stats are supported, this will break - update test to assert values for each
literal|"count("
operator|+
name|cardiffPolecatStats
operator|+
literal|"/*)=8"
argument_list|,
name|krakowFujitsuStats
operator|+
literal|"/null[@name='min']"
argument_list|,
name|krakowFujitsuStats
operator|+
literal|"/null[@name='max']"
argument_list|,
name|krakowFujitsuStats
operator|+
literal|"/long[@name='count'][.=0]"
argument_list|,
name|krakowFujitsuStats
operator|+
literal|"/long[@name='missing'][.=1]"
argument_list|,
name|krakowFujitsuStats
operator|+
literal|"/double[@name='sum'][.=0.0]"
argument_list|,
name|krakowFujitsuStats
operator|+
literal|"/double[@name='sumOfSquares'][.=0.0]"
argument_list|,
name|krakowFujitsuStats
operator|+
literal|"/double[@name='mean'][.='NaN']"
argument_list|,
name|krakowFujitsuStats
operator|+
literal|"/double[@name='stddev'][.=0.0]"
argument_list|,
comment|// if new stats are supported, this will break - update test to assert values for each
literal|"count("
operator|+
name|krakowFujitsuStats
operator|+
literal|"/*)=8"
argument_list|)
expr_stmt|;
block|}
DECL|method|testPivotFacetSortedCount
specifier|public
name|void
name|testPivotFacetSortedCount
parameter_list|()
throws|throws
name|Exception
block|{
name|index
argument_list|()
expr_stmt|;
specifier|final
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"facet"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"facet.pivot"
argument_list|,
literal|"place_t,company_t"
argument_list|)
expr_stmt|;
comment|// Test sorting by count
comment|//TODO clarify why facet count active by default
comment|// The default is count if facet.limit is greater than 0, index otherwise, but facet.limit was not defined
name|params
operator|.
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT
argument_list|,
name|FacetParams
operator|.
name|FACET_SORT_COUNT
argument_list|)
expr_stmt|;
specifier|final
name|String
name|facetPivotPrefix
init|=
literal|"//lst[@name='facet_counts']/lst[@name='facet_pivot']/arr[@name='place_t,company_t']/lst"
decl_stmt|;
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|,
name|facetPivotPrefix
operator|+
literal|"/str[@name='field'][.='place_t']"
argument_list|,
comment|// dublin
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[1]/str[@name='value'][.='microsoft']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[1]/int[@name='count'][.=4]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[2]/str[@name='value'][.='polecat']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[2]/int[@name='count'][.=4]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[3]/str[@name='value'][.='null']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[3]/int[@name='count'][.=3]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[4]/str[@name='value'][.='fujitsu']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[4]/int[@name='count'][.=2]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[5]/str[@name='value'][.='bbc']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[5]/int[@name='count'][.=1]"
argument_list|,
comment|// london
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='london']]/arr[@name='pivot']/lst[1]/str[@name='value'][.='null']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='london']]/arr[@name='pivot']/lst[1]/int[@name='count'][.=3]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='london']]/arr[@name='pivot']/lst[2]/str[@name='value'][.='polecat']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='london']]/arr[@name='pivot']/lst[2]/int[@name='count'][.=3]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='london']]/arr[@name='pivot']/lst[3]/str[@name='value'][.='bbc']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='london']]/arr[@name='pivot']/lst[3]/int[@name='count'][.=2]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='london']]/arr[@name='pivot']/lst[4]/str[@name='value'][.='fujitsu']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='london']]/arr[@name='pivot']/lst[4]/int[@name='count'][.=2]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='london']]/arr[@name='pivot']/lst[5]/str[@name='value'][.='microsoft']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='london']]/arr[@name='pivot']/lst[5]/int[@name='count'][.=2]"
argument_list|,
comment|// cardiff
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='cardiff']]/arr[@name='pivot']/lst[1]/str[@name='value'][.='polecat']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='cardiff']]/arr[@name='pivot']/lst[1]/int[@name='count'][.=3]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='cardiff']]/arr[@name='pivot']/lst[2]/str[@name='value'][.='bbc']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='cardiff']]/arr[@name='pivot']/lst[2]/int[@name='count'][.=2]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='cardiff']]/arr[@name='pivot']/lst[3]/str[@name='value'][.='microsoft']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='cardiff']]/arr[@name='pivot']/lst[3]/int[@name='count'][.=2]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='cardiff']]/arr[@name='pivot']/lst[4]/str[@name='value'][.='null']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='cardiff']]/arr[@name='pivot']/lst[4]/int[@name='count'][.=2]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='cardiff']]/arr[@name='pivot']/lst[5]/str[@name='value'][.='fujitsu']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='cardiff']]/arr[@name='pivot']/lst[5]/int[@name='count'][.=1]"
argument_list|,
comment|// krakow
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='krakow']]/arr[@name='pivot']/lst[1]/str[@name='value'][.='null']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='krakow']]/arr[@name='pivot']/lst[1]/int[@name='count'][.=3]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='krakow']]/arr[@name='pivot']/lst[2]/str[@name='value'][.='bbc']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='krakow']]/arr[@name='pivot']/lst[2]/int[@name='count'][.=2]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='krakow']]/arr[@name='pivot']/lst[3]/str[@name='value'][.='polecat']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='krakow']]/arr[@name='pivot']/lst[3]/int[@name='count'][.=2]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='krakow']]/arr[@name='pivot']/lst[4]/str[@name='value'][.='fujitsu']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='krakow']]/arr[@name='pivot']/lst[4]/int[@name='count'][.=1]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='krakow']]/arr[@name='pivot']/lst[5]/str[@name='value'][.='microsoft']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='krakow']]/arr[@name='pivot']/lst[5]/int[@name='count'][.=1]"
argument_list|,
comment|// la
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='la']]/arr[@name='pivot']/lst[1]/str[@name='value'][.='fujitsu']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='la']]/arr[@name='pivot']/lst[1]/int[@name='count'][.=2]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='la']]/arr[@name='pivot']/lst[2]/str[@name='value'][.='microsoft']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='la']]/arr[@name='pivot']/lst[2]/int[@name='count'][.=2]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='la']]/arr[@name='pivot']/lst[3]/str[@name='value'][.='null']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='la']]/arr[@name='pivot']/lst[3]/int[@name='count'][.=2]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='la']]/arr[@name='pivot']/lst[4]/str[@name='value'][.='polecat']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='la']]/arr[@name='pivot']/lst[4]/int[@name='count'][.=2]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='la']]/arr[@name='pivot']/lst[5]/str[@name='value'][.='bbc']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='la']]/arr[@name='pivot']/lst[5]/int[@name='count'][.=1]"
argument_list|,
comment|// cork
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='cork']]/arr[@name='pivot']/lst[1]/str[@name='value'][.='fujitsu']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='cork']]/arr[@name='pivot']/lst[1]/int[@name='count'][.=1]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='cork']]/arr[@name='pivot']/lst[2]/str[@name='value'][.='rte']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='cork']]/arr[@name='pivot']/lst[2]/int[@name='count'][.=1]"
argument_list|)
expr_stmt|;
block|}
DECL|method|testPivotFacetLimit
specifier|public
name|void
name|testPivotFacetLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|index
argument_list|()
expr_stmt|;
specifier|final
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"facet"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"facet.pivot"
argument_list|,
literal|"place_t,company_t"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT
argument_list|,
name|FacetParams
operator|.
name|FACET_SORT_COUNT
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|String
name|facetPivotPrefix
init|=
literal|"//lst[@name='facet_counts']/lst[@name='facet_pivot']/arr[@name='place_t,company_t']/lst"
decl_stmt|;
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|,
name|facetPivotPrefix
operator|+
literal|"/str[@name='field'][.='place_t']"
argument_list|,
comment|// dublin
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[1]/str[@name='value'][.='microsoft']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[1]/int[@name='count'][.=4]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[2]/str[@name='value'][.='polecat']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[2]/int[@name='count'][.=4]"
argument_list|,
comment|// london
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='london']]/arr[@name='pivot']/lst[1]/str[@name='value'][.='null']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='london']]/arr[@name='pivot']/lst[1]/int[@name='count'][.=3]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='london']]/arr[@name='pivot']/lst[2]/str[@name='value'][.='polecat']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='london']]/arr[@name='pivot']/lst[2]/int[@name='count'][.=3]"
argument_list|)
expr_stmt|;
block|}
DECL|method|testPivotIndividualFacetLimit
specifier|public
name|void
name|testPivotIndividualFacetLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|index
argument_list|()
expr_stmt|;
specifier|final
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"facet"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"facet.pivot"
argument_list|,
literal|"place_t,company_t"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT
argument_list|,
name|FacetParams
operator|.
name|FACET_SORT_COUNT
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"f.place_t."
operator|+
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"f.company_t."
operator|+
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|4
argument_list|)
expr_stmt|;
specifier|final
name|String
name|facetPivotPrefix
init|=
literal|"//lst[@name='facet_counts']/lst[@name='facet_pivot']/arr[@name='place_t,company_t']/lst"
decl_stmt|;
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|,
name|facetPivotPrefix
operator|+
literal|"/str[@name='field'][.='place_t']"
argument_list|,
comment|// dublin
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[1]/str[@name='value'][.='microsoft']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[1]/int[@name='count'][.=4]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[2]/str[@name='value'][.='polecat']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[2]/int[@name='count'][.=4]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[3]/str[@name='value'][.='null']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[3]/int[@name='count'][.=3]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[4]/str[@name='value'][.='fujitsu']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[str[@name='value'][.='dublin']]/arr[@name='pivot']/lst[4]/int[@name='count'][.=2]"
argument_list|)
expr_stmt|;
block|}
DECL|method|testPivotFacetMissing
specifier|public
name|void
name|testPivotFacetMissing
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test facet.missing=true with diff sorts
name|index
argument_list|()
expr_stmt|;
name|indexMissing
argument_list|()
expr_stmt|;
name|SolrParams
name|missingA
init|=
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"place_t,company_t"
argument_list|,
comment|// default facet.sort
name|FacetParams
operator|.
name|FACET_MISSING
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|facetPivotPrefix
init|=
literal|"//lst[@name='facet_counts']/lst[@name='facet_pivot']/arr[@name='place_t,company_t']/lst"
decl_stmt|;
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
name|missingA
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|,
name|facetPivotPrefix
operator|+
literal|"/arr[@name='pivot'][count(.)> 0]"
argument_list|,
comment|// not enough values for pivot
name|facetPivotPrefix
operator|+
literal|"[7]/null[@name='value'][.='']"
argument_list|,
comment|// not the missing place value
name|facetPivotPrefix
operator|+
literal|"[7]/int[@name='count'][.=2]"
argument_list|,
comment|// wrong missing place count
name|facetPivotPrefix
operator|+
literal|"[7]/arr[@name='pivot'][count(.)> 0]"
argument_list|,
comment|// not enough sub-pivots for missing place
name|facetPivotPrefix
operator|+
literal|"[7]/arr[@name='pivot']/lst[6]/null[@name='value'][.='']"
argument_list|,
comment|// not the missing company value
name|facetPivotPrefix
operator|+
literal|"[7]/arr[@name='pivot']/lst[6]/int[@name='count'][.=1]"
argument_list|,
comment|// wrong missing company count
name|facetPivotPrefix
operator|+
literal|"[7]/arr[@name='pivot']/lst[6][not(arr[@name='pivot'])]"
comment|// company shouldn't have sub-pivots
argument_list|)
expr_stmt|;
name|SolrParams
name|missingB
init|=
name|SolrParams
operator|.
name|wrapDefaults
argument_list|(
name|missingA
argument_list|,
name|params
argument_list|(
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|"4"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|)
argument_list|)
decl_stmt|;
name|req
operator|=
name|req
argument_list|(
name|missingB
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|,
name|facetPivotPrefix
operator|+
literal|"/arr[@name='pivot'][count(.)> 0]"
argument_list|,
comment|// not enough values for pivot
name|facetPivotPrefix
operator|+
literal|"[5]/null[@name='value'][.='']"
argument_list|,
comment|// not the missing place value
name|facetPivotPrefix
operator|+
literal|"[5]/int[@name='count'][.=2]"
argument_list|,
comment|// wrong missing place count
name|facetPivotPrefix
operator|+
literal|"[5]/arr[@name='pivot'][count(.)> 0]"
argument_list|,
comment|// not enough sub-pivots for missing place
name|facetPivotPrefix
operator|+
literal|"[5]/arr[@name='pivot']/lst[5]/null[@name='value'][.='']"
argument_list|,
comment|// not the missing company value
name|facetPivotPrefix
operator|+
literal|"[5]/arr[@name='pivot']/lst[5]/int[@name='count'][.=1]"
argument_list|,
comment|// wrong missing company count
name|facetPivotPrefix
operator|+
literal|"[5]/arr[@name='pivot']/lst[5][not(arr[@name='pivot'])]"
comment|// company shouldn't have sub-pivots
argument_list|)
expr_stmt|;
block|}
DECL|method|testPivotFacetIndexSortMincountAndLimit
specifier|public
name|void
name|testPivotFacetIndexSortMincountAndLimit
parameter_list|()
throws|throws
name|Exception
block|{
comment|// sort=index + mincount + limit
name|index
argument_list|()
expr_stmt|;
name|indexMissing
argument_list|()
expr_stmt|;
for|for
control|(
name|SolrParams
name|variableParams
range|:
operator|new
name|SolrParams
index|[]
block|{
comment|// we should get the same results regardless of overrequest
name|params
argument_list|()
block|,
name|params
argument_list|()
block|}
control|)
block|{
name|SolrParams
name|p
init|=
name|SolrParams
operator|.
name|wrapDefaults
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"company_t"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|,
literal|"facet.pivot.mincount"
argument_list|,
literal|"4"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"4"
argument_list|)
argument_list|,
name|variableParams
argument_list|)
decl_stmt|;
specifier|final
name|String
name|facetPivotPrefix
init|=
literal|"//lst[@name='facet_counts']/lst[@name='facet_pivot']/arr[@name='company_t']"
decl_stmt|;
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[count(./lst) = 4]"
argument_list|,
comment|// not enough values for pivot
name|facetPivotPrefix
operator|+
literal|"/lst[1]/str[@name='value'][.='fujitsu']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"/lst[1]/int[@name='count'][.=4]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"/lst[2]/str[@name='value'][.='microsoft']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"/lst[2]/int[@name='count'][.=5]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"/lst[3]/str[@name='value'][.='null']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"/lst[3]/int[@name='count'][.=6]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"/lst[4]/str[@name='value'][.='polecat']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"/lst[4]/int[@name='count'][.=6]"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPivotFacetIndexSortMincountLimitAndOffset
specifier|public
name|void
name|testPivotFacetIndexSortMincountLimitAndOffset
parameter_list|()
throws|throws
name|Exception
block|{
comment|// sort=index + mincount + limit + offset
name|index
argument_list|()
expr_stmt|;
name|indexMissing
argument_list|()
expr_stmt|;
for|for
control|(
name|SolrParams
name|variableParams
range|:
operator|new
name|SolrParams
index|[]
block|{
comment|// we should get the same results regardless of overrequest
name|params
argument_list|()
block|,
name|params
argument_list|()
block|}
control|)
block|{
name|SolrParams
name|p
init|=
name|SolrParams
operator|.
name|wrapDefaults
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"company_t"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|,
literal|"facet.pivot.mincount"
argument_list|,
literal|"4"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"4"
argument_list|)
argument_list|,
name|variableParams
argument_list|)
decl_stmt|;
specifier|final
name|String
name|facetPivotPrefix
init|=
literal|"//lst[@name='facet_counts']/lst[@name='facet_pivot']/arr[@name='company_t']"
decl_stmt|;
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[count(./lst) = 3]"
argument_list|,
comment|// asked for 4, but not enough meet the mincount
name|facetPivotPrefix
operator|+
literal|"/lst[1]/str[@name='value'][.='microsoft']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"/lst[1]/int[@name='count'][.=5]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"/lst[2]/str[@name='value'][.='null']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"/lst[2]/int[@name='count'][.=6]"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"/lst[3]/str[@name='value'][.='polecat']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"/lst[3]/int[@name='count'][.=6]"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPivotFacetIndexSortMincountLimitAndOffsetPermutations
specifier|public
name|void
name|testPivotFacetIndexSortMincountLimitAndOffsetPermutations
parameter_list|()
throws|throws
name|Exception
block|{
comment|// sort=index + mincount + limit + offset (more permutations)
name|index
argument_list|()
expr_stmt|;
name|indexMissing
argument_list|()
expr_stmt|;
for|for
control|(
name|SolrParams
name|variableParams
range|:
operator|new
name|SolrParams
index|[]
block|{
comment|// all of these combinations should result in the same first value
name|params
argument_list|(
literal|"facet.pivot.mincount"
argument_list|,
literal|"4"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"2"
argument_list|)
block|,
name|params
argument_list|(
literal|"facet.pivot.mincount"
argument_list|,
literal|"5"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|)
block|,
name|params
argument_list|(
literal|"facet.pivot.mincount"
argument_list|,
literal|"6"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|)
block|}
control|)
block|{
name|SolrParams
name|p
init|=
name|SolrParams
operator|.
name|wrapDefaults
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|,
literal|"facet.overrequest.ratio"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.pivot"
argument_list|,
literal|"company_t"
argument_list|)
argument_list|,
name|variableParams
argument_list|)
decl_stmt|;
specifier|final
name|String
name|facetPivotPrefix
init|=
literal|"//lst[@name='facet_counts']/lst[@name='facet_pivot']/arr[@name='company_t']"
decl_stmt|;
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|,
name|facetPivotPrefix
operator|+
literal|"[count(./lst) = 1]"
argument_list|,
comment|// asked for 4, but not enough meet the mincount
name|facetPivotPrefix
operator|+
literal|"/lst[1]/str[@name='value'][.='null']"
argument_list|,
name|facetPivotPrefix
operator|+
literal|"/lst[1]/int[@name='count'][.=6]"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|indexMissing
specifier|private
name|void
name|indexMissing
parameter_list|()
block|{
name|String
index|[]
name|missingDoc
init|=
block|{
literal|"id"
block|,
literal|"777"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|missingDoc
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|index
specifier|private
name|void
name|index
parameter_list|()
block|{
comment|// NOTE: we use the literal (4 character) string "null" as a company name
comment|// to help ensure there isn't any bugs where the literal string is treated as if it
comment|// were a true NULL value.
name|String
index|[]
name|doc
init|=
block|{
literal|"id"
block|,
literal|"19"
block|,
literal|"place_t"
block|,
literal|"cardiff dublin"
block|,
literal|"company_t"
block|,
literal|"microsoft polecat"
block|,
literal|"price_ti"
block|,
literal|"15"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc1
init|=
block|{
literal|"id"
block|,
literal|"20"
block|,
literal|"place_t"
block|,
literal|"dublin"
block|,
literal|"company_t"
block|,
literal|"polecat microsoft null"
block|,
literal|"price_ti"
block|,
literal|"19"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc1
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc2
init|=
block|{
literal|"id"
block|,
literal|"21"
block|,
literal|"place_t"
block|,
literal|"london la dublin"
block|,
literal|"company_t"
block|,
literal|"microsoft fujitsu null polecat"
block|,
literal|"price_ti"
block|,
literal|"29"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc2
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc3
init|=
block|{
literal|"id"
block|,
literal|"22"
block|,
literal|"place_t"
block|,
literal|"krakow london cardiff"
block|,
literal|"company_t"
block|,
literal|"polecat null bbc"
block|,
literal|"price_ti"
block|,
literal|"39"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc3
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc4
init|=
block|{
literal|"id"
block|,
literal|"23"
block|,
literal|"place_t"
block|,
literal|"london"
block|,
literal|"company_t"
block|,
literal|""
block|,
literal|"price_ti"
block|,
literal|"29"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc4
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc5
init|=
block|{
literal|"id"
block|,
literal|"24"
block|,
literal|"place_t"
block|,
literal|"la"
block|,
literal|"company_t"
block|,
literal|""
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc5
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc6
init|=
block|{
literal|"id"
block|,
literal|"25"
block|,
literal|"company_t"
block|,
literal|"microsoft polecat null fujitsu null bbc"
block|,
literal|"price_ti"
block|,
literal|"59"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc6
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc7
init|=
block|{
literal|"id"
block|,
literal|"26"
block|,
literal|"place_t"
block|,
literal|"krakow"
block|,
literal|"company_t"
block|,
literal|"null"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc7
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc8
init|=
block|{
literal|"id"
block|,
literal|"27"
block|,
literal|"place_t"
block|,
literal|"krakow cardiff dublin london la"
block|,
literal|"company_t"
block|,
literal|"null microsoft polecat bbc fujitsu"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc8
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|doc9
init|=
block|{
literal|"id"
block|,
literal|"28"
block|,
literal|"place_t"
block|,
literal|"cork"
block|,
literal|"company_t"
block|,
literal|"fujitsu rte"
block|}
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc9
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
