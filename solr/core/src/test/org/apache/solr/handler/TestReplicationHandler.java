begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|SimpleFSDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|BaseDistributedSearchTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
operator|.
name|SuppressSSL
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|UpdateResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CachingDirectoryFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|StandardDirectoryFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|SolrDispatchFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|AbstractSolrTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/**  * Test for ReplicationHandler  *  *  * @since 1.4  */
end_comment
begin_class
annotation|@
name|Slow
annotation|@
name|SuppressSSL
comment|// Currently unknown why SSL does not work with this test
DECL|class|TestReplicationHandler
specifier|public
class|class
name|TestReplicationHandler
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|CONF_DIR
specifier|private
specifier|static
specifier|final
name|String
name|CONF_DIR
init|=
literal|"solr"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"collection1"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"conf"
operator|+
name|File
operator|.
name|separator
decl_stmt|;
DECL|field|masterJetty
DECL|field|slaveJetty
DECL|field|repeaterJetty
name|JettySolrRunner
name|masterJetty
decl_stmt|,
name|slaveJetty
decl_stmt|,
name|repeaterJetty
decl_stmt|;
DECL|field|masterClient
DECL|field|slaveClient
DECL|field|repeaterClient
name|SolrServer
name|masterClient
decl_stmt|,
name|slaveClient
decl_stmt|,
name|repeaterClient
decl_stmt|;
DECL|field|master
DECL|field|slave
DECL|field|repeater
name|SolrInstance
name|master
init|=
literal|null
decl_stmt|,
name|slave
init|=
literal|null
decl_stmt|,
name|repeater
init|=
literal|null
decl_stmt|;
DECL|field|context
specifier|static
name|String
name|context
init|=
literal|"/solr"
decl_stmt|;
comment|// number of docs to index... decremented for each test case to tell if we accidentally reuse
comment|// index from previous test method
DECL|field|nDocs
specifier|static
name|int
name|nDocs
init|=
literal|500
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
block|{    }
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|//    System.setProperty("solr.directoryFactory", "solr.StandardDirectoryFactory");
comment|// For manual testing only
comment|// useFactory(null); // force an FS factory.
name|master
operator|=
operator|new
name|SolrInstance
argument_list|(
name|createTempDir
argument_list|(
literal|"solr-instance"
argument_list|)
argument_list|,
literal|"master"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|master
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|masterJetty
operator|=
name|createJetty
argument_list|(
name|master
argument_list|)
expr_stmt|;
name|masterClient
operator|=
name|createNewSolrServer
argument_list|(
name|masterJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|slave
operator|=
operator|new
name|SolrInstance
argument_list|(
name|createTempDir
argument_list|(
literal|"solr-instance"
argument_list|)
argument_list|,
literal|"slave"
argument_list|,
name|masterJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|slave
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|slaveJetty
operator|=
name|createJetty
argument_list|(
name|slave
argument_list|)
expr_stmt|;
name|slaveClient
operator|=
name|createNewSolrServer
argument_list|(
name|slaveJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|clearIndexWithReplication
specifier|public
name|void
name|clearIndexWithReplication
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|numFound
argument_list|(
name|query
argument_list|(
literal|"*:*"
argument_list|,
name|masterClient
argument_list|)
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|masterClient
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// wait for replication to sync& verify
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|numFound
argument_list|(
name|rQuery
argument_list|(
literal|0
argument_list|,
literal|"*:*"
argument_list|,
name|slaveClient
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|masterJetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|slaveJetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|master
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|slave
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|masterJetty
operator|=
name|slaveJetty
operator|=
literal|null
expr_stmt|;
name|master
operator|=
name|slave
operator|=
literal|null
expr_stmt|;
name|masterClient
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|slaveClient
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|masterClient
operator|=
name|slaveClient
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|createJetty
specifier|private
specifier|static
name|JettySolrRunner
name|createJetty
parameter_list|(
name|SolrInstance
name|instance
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.data.dir"
argument_list|,
name|instance
operator|.
name|getDataDir
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|SolrTestCaseJ4
operator|.
name|TEST_HOME
argument_list|()
argument_list|,
literal|"solr.xml"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|instance
operator|.
name|getHomeDir
argument_list|()
argument_list|,
literal|"solr.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|JettySolrRunner
name|jetty
init|=
operator|new
name|JettySolrRunner
argument_list|(
name|instance
operator|.
name|getHomeDir
argument_list|()
argument_list|,
literal|"/solr"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|jetty
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|jetty
return|;
block|}
DECL|method|createNewSolrServer
specifier|private
specifier|static
name|SolrServer
name|createNewSolrServer
parameter_list|(
name|int
name|port
parameter_list|)
block|{
try|try
block|{
comment|// setup the server...
name|HttpSolrServer
name|s
init|=
operator|new
name|HttpSolrServer
argument_list|(
name|buildUrl
argument_list|(
name|port
argument_list|)
argument_list|)
decl_stmt|;
name|s
operator|.
name|setConnectionTimeout
argument_list|(
literal|15000
argument_list|)
expr_stmt|;
name|s
operator|.
name|setSoTimeout
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
name|s
operator|.
name|setDefaultMaxConnectionsPerHost
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|s
operator|.
name|setMaxTotalConnections
argument_list|(
literal|100
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|index
name|int
name|index
parameter_list|(
name|SolrServer
name|s
parameter_list|,
name|Object
modifier|...
name|fields
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|doc
operator|.
name|addField
argument_list|(
call|(
name|String
call|)
argument_list|(
name|fields
index|[
name|i
index|]
argument_list|)
argument_list|,
name|fields
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|s
operator|.
name|add
argument_list|(
name|doc
argument_list|)
operator|.
name|getStatus
argument_list|()
return|;
block|}
DECL|method|query
name|NamedList
name|query
parameter_list|(
name|String
name|query
parameter_list|,
name|SolrServer
name|s
parameter_list|)
throws|throws
name|SolrServerException
block|{
name|NamedList
name|res
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"id desc"
argument_list|)
expr_stmt|;
name|QueryResponse
name|qres
init|=
name|s
operator|.
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|res
operator|=
name|qres
operator|.
name|getResponse
argument_list|()
expr_stmt|;
return|return
name|res
return|;
block|}
comment|/** will sleep up to 30 seconds, looking for expectedDocCount */
DECL|method|rQuery
specifier|private
name|NamedList
name|rQuery
parameter_list|(
name|int
name|expectedDocCount
parameter_list|,
name|String
name|query
parameter_list|,
name|SolrServer
name|server
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|timeSlept
init|=
literal|0
decl_stmt|;
name|NamedList
name|res
init|=
name|query
argument_list|(
name|query
argument_list|,
name|server
argument_list|)
decl_stmt|;
while|while
condition|(
name|expectedDocCount
operator|!=
name|numFound
argument_list|(
name|res
argument_list|)
operator|&&
name|timeSlept
operator|<
literal|30000
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Waiting for "
operator|+
name|expectedDocCount
operator|+
literal|" docs"
argument_list|)
expr_stmt|;
name|timeSlept
operator|+=
literal|100
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|res
operator|=
name|query
argument_list|(
name|query
argument_list|,
name|server
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
DECL|method|numFound
specifier|private
name|long
name|numFound
parameter_list|(
name|NamedList
name|res
parameter_list|)
block|{
return|return
operator|(
operator|(
name|SolrDocumentList
operator|)
name|res
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
operator|)
operator|.
name|getNumFound
argument_list|()
return|;
block|}
DECL|method|getDetails
specifier|private
name|NamedList
argument_list|<
name|Object
argument_list|>
name|getDetails
parameter_list|(
name|SolrServer
name|s
parameter_list|)
throws|throws
name|Exception
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"command"
argument_list|,
literal|"details"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"_trace"
argument_list|,
literal|"getDetails"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/replication"
argument_list|)
expr_stmt|;
name|QueryRequest
name|req
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|res
init|=
name|s
operator|.
name|request
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"null response from server"
argument_list|,
name|res
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|NamedList
argument_list|<
name|Object
argument_list|>
name|details
init|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|res
operator|.
name|get
argument_list|(
literal|"details"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"null details"
argument_list|,
name|details
argument_list|)
expr_stmt|;
return|return
name|details
return|;
block|}
DECL|method|getCommits
specifier|private
name|NamedList
argument_list|<
name|Object
argument_list|>
name|getCommits
parameter_list|(
name|SolrServer
name|s
parameter_list|)
throws|throws
name|Exception
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"command"
argument_list|,
literal|"commits"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"_trace"
argument_list|,
literal|"getCommits"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/replication"
argument_list|)
expr_stmt|;
name|QueryRequest
name|req
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|res
init|=
name|s
operator|.
name|request
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"null response from server"
argument_list|,
name|res
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
DECL|method|getIndexVersion
specifier|private
name|NamedList
argument_list|<
name|Object
argument_list|>
name|getIndexVersion
parameter_list|(
name|SolrServer
name|s
parameter_list|)
throws|throws
name|Exception
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"command"
argument_list|,
literal|"indexversion"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"_trace"
argument_list|,
literal|"getIndexVersion"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/replication"
argument_list|)
expr_stmt|;
name|QueryRequest
name|req
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|res
init|=
name|s
operator|.
name|request
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"null response from server"
argument_list|,
name|res
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
DECL|method|reloadCore
specifier|private
name|NamedList
argument_list|<
name|Object
argument_list|>
name|reloadCore
parameter_list|(
name|SolrServer
name|s
parameter_list|,
name|String
name|core
parameter_list|)
throws|throws
name|Exception
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
literal|"reload"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"core"
argument_list|,
name|core
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/admin/cores"
argument_list|)
expr_stmt|;
name|QueryRequest
name|req
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|res
init|=
name|s
operator|.
name|request
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"null response from server"
argument_list|,
name|res
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
annotation|@
name|Test
DECL|method|doTestDetails
specifier|public
name|void
name|doTestDetails
parameter_list|()
throws|throws
name|Exception
block|{
name|clearIndexWithReplication
argument_list|()
expr_stmt|;
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|details
init|=
name|getDetails
argument_list|(
name|masterClient
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"master isMaster?"
argument_list|,
literal|"true"
argument_list|,
name|details
operator|.
name|get
argument_list|(
literal|"isMaster"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"master isSlave?"
argument_list|,
literal|"false"
argument_list|,
name|details
operator|.
name|get
argument_list|(
literal|"isSlave"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"master has master section"
argument_list|,
name|details
operator|.
name|get
argument_list|(
literal|"master"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check details on the slave a couple of times before& after fetching
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|details
init|=
name|getDetails
argument_list|(
name|slaveClient
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"slave isMaster?"
argument_list|,
literal|"false"
argument_list|,
name|details
operator|.
name|get
argument_list|(
literal|"isMaster"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"slave isSlave?"
argument_list|,
literal|"true"
argument_list|,
name|details
operator|.
name|get
argument_list|(
literal|"isSlave"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"slave has slave section"
argument_list|,
name|details
operator|.
name|get
argument_list|(
literal|"slave"
argument_list|)
argument_list|)
expr_stmt|;
comment|// SOLR-2677: assert not false negatives
name|Object
name|timesFailed
init|=
operator|(
operator|(
name|NamedList
operator|)
name|details
operator|.
name|get
argument_list|(
literal|"slave"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
name|SnapPuller
operator|.
name|TIMES_FAILED
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"slave has fetch error count"
argument_list|,
literal|null
argument_list|,
name|timesFailed
argument_list|)
expr_stmt|;
if|if
condition|(
literal|3
operator|!=
name|i
condition|)
block|{
comment|// index& fetch
name|index
argument_list|(
name|masterClient
argument_list|,
literal|"id"
argument_list|,
name|i
argument_list|,
literal|"name"
argument_list|,
literal|"name = "
operator|+
name|i
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|pullFromTo
argument_list|(
name|masterJetty
argument_list|,
name|slaveJetty
argument_list|)
expr_stmt|;
block|}
block|}
name|SolrInstance
name|repeater
init|=
literal|null
decl_stmt|;
name|JettySolrRunner
name|repeaterJetty
init|=
literal|null
decl_stmt|;
name|SolrServer
name|repeaterClient
init|=
literal|null
decl_stmt|;
try|try
block|{
name|repeater
operator|=
operator|new
name|SolrInstance
argument_list|(
name|createTempDir
argument_list|(
literal|"solr-instance"
argument_list|)
argument_list|,
literal|"repeater"
argument_list|,
name|masterJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|repeater
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|repeaterJetty
operator|=
name|createJetty
argument_list|(
name|repeater
argument_list|)
expr_stmt|;
name|repeaterClient
operator|=
name|createNewSolrServer
argument_list|(
name|repeaterJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|details
init|=
name|getDetails
argument_list|(
name|repeaterClient
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"repeater isMaster?"
argument_list|,
literal|"true"
argument_list|,
name|details
operator|.
name|get
argument_list|(
literal|"isMaster"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"repeater isSlave?"
argument_list|,
literal|"true"
argument_list|,
name|details
operator|.
name|get
argument_list|(
literal|"isSlave"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"repeater has master section"
argument_list|,
name|details
operator|.
name|get
argument_list|(
literal|"master"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"repeater has slave section"
argument_list|,
name|details
operator|.
name|get
argument_list|(
literal|"slave"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|repeaterJetty
operator|!=
literal|null
condition|)
name|repeaterJetty
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|/* :NOOP: */
block|}
try|try
block|{
if|if
condition|(
name|repeater
operator|!=
literal|null
condition|)
name|repeater
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|/* :NOOP: */
block|}
if|if
condition|(
name|repeaterClient
operator|!=
literal|null
condition|)
name|repeaterClient
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Verify that things still work if an IW has not been opened (and hence the CommitPoints have not been communicated to the deletion policy)    */
DECL|method|testNoWriter
specifier|public
name|void
name|testNoWriter
parameter_list|()
throws|throws
name|Exception
block|{
name|useFactory
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// force a persistent directory
comment|// read-only setting (no opening from indexwriter)
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.tests.nrtMode"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
try|try
block|{
comment|// stop and start so they see the new directory setting
name|slaveJetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|masterJetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|slaveJetty
operator|.
name|start
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|masterJetty
operator|.
name|start
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|slaveClient
argument_list|,
literal|"id"
argument_list|,
literal|"123456"
argument_list|)
expr_stmt|;
name|slaveClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|slaveJetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|slaveJetty
operator|.
name|start
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.tests.nrtMode"
argument_list|)
expr_stmt|;
comment|// dont mess with other tests
block|}
comment|// Currently we open a writer on-demand.  This is to test that we are correctly testing
comment|// the code path when SolrDeletionPolicy.getLatestCommit() returns null.
comment|// When we are using an ephemeral directory, an IW will always be opened to create the index and hence
comment|// getLatestCommit will always be non-null.
name|CoreContainer
name|cores
init|=
operator|(
operator|(
name|SolrDispatchFilter
operator|)
name|slaveJetty
operator|.
name|getDispatchFilter
argument_list|()
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getCores
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|SolrCore
argument_list|>
name|theCores
init|=
name|cores
operator|.
name|getCores
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|theCores
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SolrCore
name|core
init|=
operator|(
name|SolrCore
operator|)
name|theCores
operator|.
name|toArray
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertNull
argument_list|(
name|core
operator|.
name|getDeletionPolicy
argument_list|()
operator|.
name|getLatestCommit
argument_list|()
argument_list|)
expr_stmt|;
name|pullFromMasterToSlave
argument_list|()
expr_stmt|;
comment|// this will cause SnapPuller to be invoked and we will test when SolrDeletionPolicy.getLatestCommit() returns null
name|resetFactory
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verify that empty commits and/or commits with openSearcher=false     * on the master do not cause subsequent replication problems on the slave     */
DECL|method|testEmptyCommits
specifier|public
name|void
name|testEmptyCommits
parameter_list|()
throws|throws
name|Exception
block|{
name|clearIndexWithReplication
argument_list|()
expr_stmt|;
comment|// add a doc to master and commit
name|index
argument_list|(
name|masterClient
argument_list|,
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"name"
argument_list|,
literal|"empty1"
argument_list|)
expr_stmt|;
name|emptyUpdate
argument_list|(
name|masterClient
argument_list|,
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// force replication
name|pullFromMasterToSlave
argument_list|()
expr_stmt|;
comment|// verify doc is on slave
name|rQuery
argument_list|(
literal|1
argument_list|,
literal|"name:empty1"
argument_list|,
name|slaveClient
argument_list|)
expr_stmt|;
name|assertVersions
argument_list|(
name|masterClient
argument_list|,
name|slaveClient
argument_list|)
expr_stmt|;
comment|// do a completely empty commit on master and force replication
name|emptyUpdate
argument_list|(
name|masterClient
argument_list|,
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|pullFromMasterToSlave
argument_list|()
expr_stmt|;
comment|// add another doc and verify slave gets it
name|index
argument_list|(
name|masterClient
argument_list|,
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"name"
argument_list|,
literal|"empty2"
argument_list|)
expr_stmt|;
name|emptyUpdate
argument_list|(
name|masterClient
argument_list|,
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// force replication
name|pullFromMasterToSlave
argument_list|()
expr_stmt|;
name|rQuery
argument_list|(
literal|1
argument_list|,
literal|"name:empty2"
argument_list|,
name|slaveClient
argument_list|)
expr_stmt|;
name|assertVersions
argument_list|(
name|masterClient
argument_list|,
name|slaveClient
argument_list|)
expr_stmt|;
comment|// add a third doc but don't open a new searcher on master
name|index
argument_list|(
name|masterClient
argument_list|,
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"name"
argument_list|,
literal|"empty3"
argument_list|)
expr_stmt|;
name|emptyUpdate
argument_list|(
name|masterClient
argument_list|,
literal|"commit"
argument_list|,
literal|"true"
argument_list|,
literal|"openSearcher"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|pullFromMasterToSlave
argument_list|()
expr_stmt|;
comment|// verify slave can search the doc, but master doesn't
name|rQuery
argument_list|(
literal|0
argument_list|,
literal|"name:empty3"
argument_list|,
name|masterClient
argument_list|)
expr_stmt|;
name|rQuery
argument_list|(
literal|1
argument_list|,
literal|"name:empty3"
argument_list|,
name|slaveClient
argument_list|)
expr_stmt|;
comment|// final doc with hard commit, slave and master both showing all docs
name|index
argument_list|(
name|masterClient
argument_list|,
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"name"
argument_list|,
literal|"empty4"
argument_list|)
expr_stmt|;
name|emptyUpdate
argument_list|(
name|masterClient
argument_list|,
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|pullFromMasterToSlave
argument_list|()
expr_stmt|;
name|String
name|q
init|=
literal|"name:(empty1 empty2 empty3 empty4)"
decl_stmt|;
name|rQuery
argument_list|(
literal|4
argument_list|,
name|q
argument_list|,
name|masterClient
argument_list|)
expr_stmt|;
name|rQuery
argument_list|(
literal|4
argument_list|,
name|q
argument_list|,
name|slaveClient
argument_list|)
expr_stmt|;
name|assertVersions
argument_list|(
name|masterClient
argument_list|,
name|slaveClient
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|doTestReplicateAfterWrite2Slave
specifier|public
name|void
name|doTestReplicateAfterWrite2Slave
parameter_list|()
throws|throws
name|Exception
block|{
name|clearIndexWithReplication
argument_list|()
expr_stmt|;
name|nDocs
operator|--
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nDocs
condition|;
name|i
operator|++
control|)
block|{
name|index
argument_list|(
name|masterClient
argument_list|,
literal|"id"
argument_list|,
name|i
argument_list|,
literal|"name"
argument_list|,
literal|"name = "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|invokeReplicationCommand
argument_list|(
name|masterJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|,
literal|"disableReplication"
argument_list|)
expr_stmt|;
name|invokeReplicationCommand
argument_list|(
name|slaveJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|,
literal|"disablepoll"
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|nDocs
argument_list|,
name|numFound
argument_list|(
name|rQuery
argument_list|(
name|nDocs
argument_list|,
literal|"*:*"
argument_list|,
name|masterClient
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure that both the index version and index generation on the slave is
comment|// higher than that of the master, just to make the test harder.
name|index
argument_list|(
name|slaveClient
argument_list|,
literal|"id"
argument_list|,
literal|551
argument_list|,
literal|"name"
argument_list|,
literal|"name = "
operator|+
literal|551
argument_list|)
expr_stmt|;
name|slaveClient
operator|.
name|commit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|slaveClient
argument_list|,
literal|"id"
argument_list|,
literal|552
argument_list|,
literal|"name"
argument_list|,
literal|"name = "
operator|+
literal|552
argument_list|)
expr_stmt|;
name|slaveClient
operator|.
name|commit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|slaveClient
argument_list|,
literal|"id"
argument_list|,
literal|553
argument_list|,
literal|"name"
argument_list|,
literal|"name = "
operator|+
literal|553
argument_list|)
expr_stmt|;
name|slaveClient
operator|.
name|commit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|slaveClient
argument_list|,
literal|"id"
argument_list|,
literal|554
argument_list|,
literal|"name"
argument_list|,
literal|"name = "
operator|+
literal|554
argument_list|)
expr_stmt|;
name|slaveClient
operator|.
name|commit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|slaveClient
argument_list|,
literal|"id"
argument_list|,
literal|555
argument_list|,
literal|"name"
argument_list|,
literal|"name = "
operator|+
literal|555
argument_list|)
expr_stmt|;
name|slaveClient
operator|.
name|commit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//this doc is added to slave so it should show an item w/ that result
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numFound
argument_list|(
name|rQuery
argument_list|(
literal|1
argument_list|,
literal|"id:555"
argument_list|,
name|slaveClient
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//Let's fetch the index rather than rely on the polling.
name|invokeReplicationCommand
argument_list|(
name|masterJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|,
literal|"enablereplication"
argument_list|)
expr_stmt|;
name|invokeReplicationCommand
argument_list|(
name|slaveJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|,
literal|"fetchindex"
argument_list|)
expr_stmt|;
comment|/*     //the slave should have done a full copy of the index so the doc with id:555 should not be there in the slave now     slaveQueryRsp = rQuery(0, "id:555", slaveClient);     slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get("response");     assertEquals(0, slaveQueryResult.getNumFound());      // make sure we replicated the correct index from the master     slaveQueryRsp = rQuery(nDocs, "*:*", slaveClient);     slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get("response");     assertEquals(nDocs, slaveQueryResult.getNumFound());          */
block|}
comment|//Simple function to wrap the invocation of replication commands on the various
comment|//jetty servers.
DECL|method|invokeReplicationCommand
specifier|private
name|void
name|invokeReplicationCommand
parameter_list|(
name|int
name|pJettyPort
parameter_list|,
name|String
name|pCommand
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|masterUrl
init|=
name|buildUrl
argument_list|(
name|pJettyPort
argument_list|)
operator|+
literal|"/replication?command="
operator|+
name|pCommand
decl_stmt|;
try|try
block|{
name|URL
name|u
init|=
operator|new
name|URL
argument_list|(
name|masterUrl
argument_list|)
decl_stmt|;
name|InputStream
name|stream
init|=
name|u
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//e.printStackTrace();
block|}
block|}
annotation|@
name|Test
DECL|method|doTestIndexAndConfigReplication
specifier|public
name|void
name|doTestIndexAndConfigReplication
parameter_list|()
throws|throws
name|Exception
block|{
name|clearIndexWithReplication
argument_list|()
expr_stmt|;
name|nDocs
operator|--
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nDocs
condition|;
name|i
operator|++
control|)
name|index
argument_list|(
name|masterClient
argument_list|,
literal|"id"
argument_list|,
name|i
argument_list|,
literal|"name"
argument_list|,
literal|"name = "
operator|+
name|i
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|NamedList
name|masterQueryRsp
init|=
name|rQuery
argument_list|(
name|nDocs
argument_list|,
literal|"*:*"
argument_list|,
name|masterClient
argument_list|)
decl_stmt|;
name|SolrDocumentList
name|masterQueryResult
init|=
operator|(
name|SolrDocumentList
operator|)
name|masterQueryRsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nDocs
argument_list|,
name|numFound
argument_list|(
name|masterQueryRsp
argument_list|)
argument_list|)
expr_stmt|;
comment|//get docs from slave and check if number is equal to master
name|NamedList
name|slaveQueryRsp
init|=
name|rQuery
argument_list|(
name|nDocs
argument_list|,
literal|"*:*"
argument_list|,
name|slaveClient
argument_list|)
decl_stmt|;
name|SolrDocumentList
name|slaveQueryResult
init|=
operator|(
name|SolrDocumentList
operator|)
name|slaveQueryRsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nDocs
argument_list|,
name|numFound
argument_list|(
name|slaveQueryRsp
argument_list|)
argument_list|)
expr_stmt|;
comment|//compare results
name|String
name|cmp
init|=
name|BaseDistributedSearchTestCase
operator|.
name|compare
argument_list|(
name|masterQueryResult
argument_list|,
name|slaveQueryResult
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|assertVersions
argument_list|(
name|masterClient
argument_list|,
name|slaveClient
argument_list|)
expr_stmt|;
comment|//start config files replication test
name|masterClient
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|//change the schema on master
name|master
operator|.
name|copyConfigFile
argument_list|(
name|CONF_DIR
operator|+
literal|"schema-replication2.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
name|masterJetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|masterJetty
operator|=
name|createJetty
argument_list|(
name|master
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|masterClient
operator|=
name|createNewSolrServer
argument_list|(
name|masterJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|slave
operator|.
name|setTestPort
argument_list|(
name|masterJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|slave
operator|.
name|copyConfigFile
argument_list|(
name|slave
operator|.
name|getSolrConfigFile
argument_list|()
argument_list|,
literal|"solrconfig.xml"
argument_list|)
expr_stmt|;
name|slaveJetty
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// setup an xslt dir to force subdir file replication
name|File
name|masterXsltDir
init|=
operator|new
name|File
argument_list|(
name|master
operator|.
name|getConfDir
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"xslt"
argument_list|)
decl_stmt|;
name|File
name|masterXsl
init|=
operator|new
name|File
argument_list|(
name|masterXsltDir
argument_list|,
literal|"dummy.xsl"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"could not make dir "
operator|+
name|masterXsltDir
argument_list|,
name|masterXsltDir
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|masterXsl
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|slaveXsltDir
init|=
operator|new
name|File
argument_list|(
name|slave
operator|.
name|getConfDir
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"xslt"
argument_list|)
decl_stmt|;
name|File
name|slaveXsl
init|=
operator|new
name|File
argument_list|(
name|slaveXsltDir
argument_list|,
literal|"dummy.xsl"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|slaveXsltDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|slaveJetty
operator|=
name|createJetty
argument_list|(
name|slave
argument_list|)
expr_stmt|;
name|slaveClient
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|slaveClient
operator|=
name|createNewSolrServer
argument_list|(
name|slaveJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
comment|//add a doc with new field and commit on master to trigger snappull from slave.
name|index
argument_list|(
name|masterClient
argument_list|,
literal|"id"
argument_list|,
literal|"2000"
argument_list|,
literal|"name"
argument_list|,
literal|"name = "
operator|+
literal|2000
argument_list|,
literal|"newname"
argument_list|,
literal|"newname = "
operator|+
literal|2000
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numFound
argument_list|(
name|rQuery
argument_list|(
literal|1
argument_list|,
literal|"*:*"
argument_list|,
name|masterClient
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertVersions
argument_list|(
name|masterClient
argument_list|,
name|slaveClient
argument_list|)
expr_stmt|;
name|slaveQueryRsp
operator|=
name|rQuery
argument_list|(
literal|1
argument_list|,
literal|"*:*"
argument_list|,
name|slaveClient
argument_list|)
expr_stmt|;
name|SolrDocument
name|d
init|=
operator|(
operator|(
name|SolrDocumentList
operator|)
name|slaveQueryRsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"newname = 2000"
argument_list|,
operator|(
name|String
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"newname"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|slaveXsltDir
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|slaveXsl
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|checkForSingleIndex
argument_list|(
name|masterJetty
argument_list|)
expr_stmt|;
name|checkForSingleIndex
argument_list|(
name|slaveJetty
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|doTestStopPoll
specifier|public
name|void
name|doTestStopPoll
parameter_list|()
throws|throws
name|Exception
block|{
name|clearIndexWithReplication
argument_list|()
expr_stmt|;
comment|// Test:
comment|// setup master/slave.
comment|// stop polling on slave, add a doc to master and verify slave hasn't picked it.
name|nDocs
operator|--
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nDocs
condition|;
name|i
operator|++
control|)
name|index
argument_list|(
name|masterClient
argument_list|,
literal|"id"
argument_list|,
name|i
argument_list|,
literal|"name"
argument_list|,
literal|"name = "
operator|+
name|i
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|NamedList
name|masterQueryRsp
init|=
name|rQuery
argument_list|(
name|nDocs
argument_list|,
literal|"*:*"
argument_list|,
name|masterClient
argument_list|)
decl_stmt|;
name|SolrDocumentList
name|masterQueryResult
init|=
operator|(
name|SolrDocumentList
operator|)
name|masterQueryRsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nDocs
argument_list|,
name|numFound
argument_list|(
name|masterQueryRsp
argument_list|)
argument_list|)
expr_stmt|;
comment|//get docs from slave and check if number is equal to master
name|NamedList
name|slaveQueryRsp
init|=
name|rQuery
argument_list|(
name|nDocs
argument_list|,
literal|"*:*"
argument_list|,
name|slaveClient
argument_list|)
decl_stmt|;
name|SolrDocumentList
name|slaveQueryResult
init|=
operator|(
name|SolrDocumentList
operator|)
name|slaveQueryRsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nDocs
argument_list|,
name|numFound
argument_list|(
name|slaveQueryRsp
argument_list|)
argument_list|)
expr_stmt|;
comment|//compare results
name|String
name|cmp
init|=
name|BaseDistributedSearchTestCase
operator|.
name|compare
argument_list|(
name|masterQueryResult
argument_list|,
name|slaveQueryResult
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
comment|// start stop polling test
name|invokeReplicationCommand
argument_list|(
name|slaveJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|,
literal|"disablepoll"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|masterClient
argument_list|,
literal|"id"
argument_list|,
literal|501
argument_list|,
literal|"name"
argument_list|,
literal|"name = "
operator|+
literal|501
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|//get docs from master and check if number is equal to master
name|assertEquals
argument_list|(
name|nDocs
operator|+
literal|1
argument_list|,
name|numFound
argument_list|(
name|rQuery
argument_list|(
name|nDocs
operator|+
literal|1
argument_list|,
literal|"*:*"
argument_list|,
name|masterClient
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// NOTE: this test is wierd, we want to verify it DOESNT replicate...
comment|// for now, add a sleep for this.., but the logic is wierd.
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
comment|//get docs from slave and check if number is not equal to master; polling is disabled
name|assertEquals
argument_list|(
name|nDocs
argument_list|,
name|numFound
argument_list|(
name|rQuery
argument_list|(
name|nDocs
argument_list|,
literal|"*:*"
argument_list|,
name|slaveClient
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// re-enable replication
name|invokeReplicationCommand
argument_list|(
name|slaveJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|,
literal|"enablepoll"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nDocs
operator|+
literal|1
argument_list|,
name|numFound
argument_list|(
name|rQuery
argument_list|(
name|nDocs
operator|+
literal|1
argument_list|,
literal|"*:*"
argument_list|,
name|slaveClient
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|doTestSnapPullWithMasterUrl
specifier|public
name|void
name|doTestSnapPullWithMasterUrl
parameter_list|()
throws|throws
name|Exception
block|{
comment|//change solrconfig on slave
comment|//this has no entry for pollinginterval
name|slave
operator|.
name|copyConfigFile
argument_list|(
name|CONF_DIR
operator|+
literal|"solrconfig-slave1.xml"
argument_list|,
literal|"solrconfig.xml"
argument_list|)
expr_stmt|;
name|slaveJetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|slaveJetty
operator|=
name|createJetty
argument_list|(
name|slave
argument_list|)
expr_stmt|;
name|slaveClient
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|slaveClient
operator|=
name|createNewSolrServer
argument_list|(
name|slaveJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|slaveClient
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|slaveClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|nDocs
operator|--
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nDocs
condition|;
name|i
operator|++
control|)
name|index
argument_list|(
name|masterClient
argument_list|,
literal|"id"
argument_list|,
name|i
argument_list|,
literal|"name"
argument_list|,
literal|"name = "
operator|+
name|i
argument_list|)
expr_stmt|;
comment|// make sure prepareCommit doesn't mess up commit  (SOLR-3938)
comment|// todo: make SolrJ easier to pass arbitrary params to
comment|// TODO: precommit WILL screw with the rest of this test
name|String
name|masterUrl
init|=
name|buildUrl
argument_list|(
name|masterJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
operator|+
literal|"/update?prepareCommit=true"
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|masterUrl
argument_list|)
decl_stmt|;
comment|//    InputStream stream = url.openStream();
comment|//    try {
comment|//      stream.close();
comment|//    } catch (IOException e) {
comment|//      //e.printStackTrace();
comment|//    }
name|masterClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|NamedList
name|masterQueryRsp
init|=
name|rQuery
argument_list|(
name|nDocs
argument_list|,
literal|"*:*"
argument_list|,
name|masterClient
argument_list|)
decl_stmt|;
name|SolrDocumentList
name|masterQueryResult
init|=
operator|(
name|SolrDocumentList
operator|)
name|masterQueryRsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nDocs
argument_list|,
name|masterQueryResult
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// snappull
name|masterUrl
operator|=
name|buildUrl
argument_list|(
name|slaveJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
operator|+
literal|"/replication?command=fetchindex&masterUrl="
expr_stmt|;
name|masterUrl
operator|+=
name|buildUrl
argument_list|(
name|masterJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
operator|+
literal|"/replication"
expr_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|masterUrl
argument_list|)
expr_stmt|;
name|InputStream
name|stream
init|=
name|url
operator|.
name|openStream
argument_list|()
decl_stmt|;
try|try
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//e.printStackTrace();
block|}
comment|//get docs from slave and check if number is equal to master
name|NamedList
name|slaveQueryRsp
init|=
name|rQuery
argument_list|(
name|nDocs
argument_list|,
literal|"*:*"
argument_list|,
name|slaveClient
argument_list|)
decl_stmt|;
name|SolrDocumentList
name|slaveQueryResult
init|=
operator|(
name|SolrDocumentList
operator|)
name|slaveQueryRsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nDocs
argument_list|,
name|slaveQueryResult
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|//compare results
name|String
name|cmp
init|=
name|BaseDistributedSearchTestCase
operator|.
name|compare
argument_list|(
name|masterQueryResult
argument_list|,
name|slaveQueryResult
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
comment|// snappull from the slave to the master
for|for
control|(
name|int
name|i
init|=
name|nDocs
init|;
name|i
operator|<
name|nDocs
operator|+
literal|3
condition|;
name|i
operator|++
control|)
name|index
argument_list|(
name|slaveClient
argument_list|,
literal|"id"
argument_list|,
name|i
argument_list|,
literal|"name"
argument_list|,
literal|"name = "
operator|+
name|i
argument_list|)
expr_stmt|;
name|slaveClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|pullFromSlaveToMaster
argument_list|()
expr_stmt|;
name|rQuery
argument_list|(
name|nDocs
operator|+
literal|3
argument_list|,
literal|"*:*"
argument_list|,
name|masterClient
argument_list|)
expr_stmt|;
comment|//get docs from slave and check if number is equal to master
name|slaveQueryRsp
operator|=
name|rQuery
argument_list|(
name|nDocs
operator|+
literal|3
argument_list|,
literal|"*:*"
argument_list|,
name|slaveClient
argument_list|)
expr_stmt|;
name|slaveQueryResult
operator|=
operator|(
name|SolrDocumentList
operator|)
name|slaveQueryRsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nDocs
operator|+
literal|3
argument_list|,
name|slaveQueryResult
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|//compare results
name|masterQueryRsp
operator|=
name|rQuery
argument_list|(
name|nDocs
operator|+
literal|3
argument_list|,
literal|"*:*"
argument_list|,
name|masterClient
argument_list|)
expr_stmt|;
name|masterQueryResult
operator|=
operator|(
name|SolrDocumentList
operator|)
name|masterQueryRsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
expr_stmt|;
name|cmp
operator|=
name|BaseDistributedSearchTestCase
operator|.
name|compare
argument_list|(
name|masterQueryResult
argument_list|,
name|slaveQueryResult
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|assertVersions
argument_list|(
name|masterClient
argument_list|,
name|slaveClient
argument_list|)
expr_stmt|;
name|pullFromSlaveToMaster
argument_list|()
expr_stmt|;
comment|//get docs from slave and check if number is equal to master
name|slaveQueryRsp
operator|=
name|rQuery
argument_list|(
name|nDocs
operator|+
literal|3
argument_list|,
literal|"*:*"
argument_list|,
name|slaveClient
argument_list|)
expr_stmt|;
name|slaveQueryResult
operator|=
operator|(
name|SolrDocumentList
operator|)
name|slaveQueryRsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nDocs
operator|+
literal|3
argument_list|,
name|slaveQueryResult
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|//compare results
name|masterQueryRsp
operator|=
name|rQuery
argument_list|(
name|nDocs
operator|+
literal|3
argument_list|,
literal|"*:*"
argument_list|,
name|masterClient
argument_list|)
expr_stmt|;
name|masterQueryResult
operator|=
operator|(
name|SolrDocumentList
operator|)
name|masterQueryRsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
expr_stmt|;
name|cmp
operator|=
name|BaseDistributedSearchTestCase
operator|.
name|compare
argument_list|(
name|masterQueryResult
argument_list|,
name|slaveQueryResult
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|assertVersions
argument_list|(
name|masterClient
argument_list|,
name|slaveClient
argument_list|)
expr_stmt|;
comment|// now force a new index directory
for|for
control|(
name|int
name|i
init|=
name|nDocs
operator|+
literal|3
init|;
name|i
operator|<
name|nDocs
operator|+
literal|7
condition|;
name|i
operator|++
control|)
name|index
argument_list|(
name|masterClient
argument_list|,
literal|"id"
argument_list|,
name|i
argument_list|,
literal|"name"
argument_list|,
literal|"name = "
operator|+
name|i
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|pullFromSlaveToMaster
argument_list|()
expr_stmt|;
name|rQuery
argument_list|(
operator|(
name|int
operator|)
name|slaveQueryResult
operator|.
name|getNumFound
argument_list|()
argument_list|,
literal|"*:*"
argument_list|,
name|masterClient
argument_list|)
expr_stmt|;
comment|//get docs from slave and check if number is equal to master
name|slaveQueryRsp
operator|=
name|rQuery
argument_list|(
name|nDocs
operator|+
literal|3
argument_list|,
literal|"*:*"
argument_list|,
name|slaveClient
argument_list|)
expr_stmt|;
name|slaveQueryResult
operator|=
operator|(
name|SolrDocumentList
operator|)
name|slaveQueryRsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nDocs
operator|+
literal|3
argument_list|,
name|slaveQueryResult
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|//compare results
name|masterQueryRsp
operator|=
name|rQuery
argument_list|(
name|nDocs
operator|+
literal|3
argument_list|,
literal|"*:*"
argument_list|,
name|masterClient
argument_list|)
expr_stmt|;
name|masterQueryResult
operator|=
operator|(
name|SolrDocumentList
operator|)
name|masterQueryRsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
expr_stmt|;
name|cmp
operator|=
name|BaseDistributedSearchTestCase
operator|.
name|compare
argument_list|(
name|masterQueryResult
argument_list|,
name|slaveQueryResult
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|assertVersions
argument_list|(
name|masterClient
argument_list|,
name|slaveClient
argument_list|)
expr_stmt|;
name|pullFromSlaveToMaster
argument_list|()
expr_stmt|;
comment|//get docs from slave and check if number is equal to master
name|slaveQueryRsp
operator|=
name|rQuery
argument_list|(
name|nDocs
operator|+
literal|3
argument_list|,
literal|"*:*"
argument_list|,
name|slaveClient
argument_list|)
expr_stmt|;
name|slaveQueryResult
operator|=
operator|(
name|SolrDocumentList
operator|)
name|slaveQueryRsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nDocs
operator|+
literal|3
argument_list|,
name|slaveQueryResult
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|//compare results
name|masterQueryRsp
operator|=
name|rQuery
argument_list|(
name|nDocs
operator|+
literal|3
argument_list|,
literal|"*:*"
argument_list|,
name|masterClient
argument_list|)
expr_stmt|;
name|masterQueryResult
operator|=
operator|(
name|SolrDocumentList
operator|)
name|masterQueryRsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
expr_stmt|;
name|cmp
operator|=
name|BaseDistributedSearchTestCase
operator|.
name|compare
argument_list|(
name|masterQueryResult
argument_list|,
name|slaveQueryResult
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|assertVersions
argument_list|(
name|masterClient
argument_list|,
name|slaveClient
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|details
init|=
name|getDetails
argument_list|(
name|masterClient
argument_list|)
decl_stmt|;
name|details
operator|=
name|getDetails
argument_list|(
name|slaveClient
argument_list|)
expr_stmt|;
name|checkForSingleIndex
argument_list|(
name|masterJetty
argument_list|)
expr_stmt|;
name|checkForSingleIndex
argument_list|(
name|slaveJetty
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|doTestStressReplication
specifier|public
name|void
name|doTestStressReplication
parameter_list|()
throws|throws
name|Exception
block|{
comment|// change solrconfig on slave
comment|// this has no entry for pollinginterval
comment|// get us a straight standard fs dir rather than mock*dir
name|boolean
name|useStraightStandardDirectory
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|useStraightStandardDirectory
condition|)
block|{
name|useFactory
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|SLAVE_SCHEMA_1
init|=
literal|"schema-replication1.xml"
decl_stmt|;
specifier|final
name|String
name|SLAVE_SCHEMA_2
init|=
literal|"schema-replication2.xml"
decl_stmt|;
name|String
name|slaveSchema
init|=
name|SLAVE_SCHEMA_1
decl_stmt|;
try|try
block|{
name|slave
operator|.
name|copyConfigFile
argument_list|(
name|CONF_DIR
operator|+
literal|"solrconfig-slave1.xml"
argument_list|,
literal|"solrconfig.xml"
argument_list|)
expr_stmt|;
name|slave
operator|.
name|copyConfigFile
argument_list|(
name|CONF_DIR
operator|+
name|slaveSchema
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
name|slaveJetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|slaveJetty
operator|=
name|createJetty
argument_list|(
name|slave
argument_list|)
expr_stmt|;
name|slaveClient
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|slaveClient
operator|=
name|createNewSolrServer
argument_list|(
name|slaveJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|master
operator|.
name|copyConfigFile
argument_list|(
name|CONF_DIR
operator|+
literal|"solrconfig-master3.xml"
argument_list|,
literal|"solrconfig.xml"
argument_list|)
expr_stmt|;
name|masterJetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|masterJetty
operator|=
name|createJetty
argument_list|(
name|master
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|masterClient
operator|=
name|createNewSolrServer
argument_list|(
name|masterJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|slaveClient
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|slaveClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|int
name|maxDocs
init|=
name|TEST_NIGHTLY
condition|?
literal|1000
else|:
literal|200
decl_stmt|;
name|int
name|rounds
init|=
name|TEST_NIGHTLY
condition|?
literal|80
else|:
literal|8
decl_stmt|;
name|int
name|totalDocs
init|=
literal|0
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|rounds
condition|;
name|x
operator|++
control|)
block|{
specifier|final
name|boolean
name|confCoreReload
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|confCoreReload
condition|)
block|{
comment|// toggle the schema file used
name|slaveSchema
operator|=
name|slaveSchema
operator|.
name|equals
argument_list|(
name|SLAVE_SCHEMA_1
argument_list|)
condition|?
name|SLAVE_SCHEMA_2
else|:
name|SLAVE_SCHEMA_1
expr_stmt|;
name|master
operator|.
name|copyConfigFile
argument_list|(
name|CONF_DIR
operator|+
name|slaveSchema
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
block|}
name|int
name|docs
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|maxDocs
argument_list|)
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
condition|;
name|i
operator|++
control|)
block|{
name|index
argument_list|(
name|masterClient
argument_list|,
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"name"
argument_list|,
literal|"name = "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|totalDocs
operator|+=
name|docs
expr_stmt|;
name|masterClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|NamedList
name|masterQueryRsp
init|=
name|rQuery
argument_list|(
name|totalDocs
argument_list|,
literal|"*:*"
argument_list|,
name|masterClient
argument_list|)
decl_stmt|;
name|SolrDocumentList
name|masterQueryResult
init|=
operator|(
name|SolrDocumentList
operator|)
name|masterQueryRsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|totalDocs
argument_list|,
name|masterQueryResult
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// snappull
name|Date
name|slaveCoreStart
init|=
name|watchCoreStartAt
argument_list|(
name|slaveClient
argument_list|,
literal|30
operator|*
literal|1000
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|pullFromMasterToSlave
argument_list|()
expr_stmt|;
if|if
condition|(
name|confCoreReload
condition|)
block|{
name|watchCoreStartAt
argument_list|(
name|slaveClient
argument_list|,
literal|30
operator|*
literal|1000
argument_list|,
name|slaveCoreStart
argument_list|)
expr_stmt|;
block|}
comment|// get docs from slave and check if number is equal to master
name|NamedList
name|slaveQueryRsp
init|=
name|rQuery
argument_list|(
name|totalDocs
argument_list|,
literal|"*:*"
argument_list|,
name|slaveClient
argument_list|)
decl_stmt|;
name|SolrDocumentList
name|slaveQueryResult
init|=
operator|(
name|SolrDocumentList
operator|)
name|slaveQueryRsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|totalDocs
argument_list|,
name|slaveQueryResult
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// compare results
name|String
name|cmp
init|=
name|BaseDistributedSearchTestCase
operator|.
name|compare
argument_list|(
name|masterQueryResult
argument_list|,
name|slaveQueryResult
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|assertVersions
argument_list|(
name|masterClient
argument_list|,
name|slaveClient
argument_list|)
expr_stmt|;
name|checkForSingleIndex
argument_list|(
name|masterJetty
argument_list|)
expr_stmt|;
name|checkForSingleIndex
argument_list|(
name|slaveJetty
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// move the slave ahead
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|index
argument_list|(
name|slaveClient
argument_list|,
literal|"id"
argument_list|,
name|id
operator|++
argument_list|,
literal|"name"
argument_list|,
literal|"name = "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|slaveClient
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|useStraightStandardDirectory
condition|)
block|{
name|resetFactory
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|checkForSingleIndex
specifier|private
name|void
name|checkForSingleIndex
parameter_list|(
name|JettySolrRunner
name|jetty
parameter_list|)
block|{
name|CoreContainer
name|cores
init|=
operator|(
operator|(
name|SolrDispatchFilter
operator|)
name|jetty
operator|.
name|getDispatchFilter
argument_list|()
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getCores
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|SolrCore
argument_list|>
name|theCores
init|=
name|cores
operator|.
name|getCores
argument_list|()
decl_stmt|;
for|for
control|(
name|SolrCore
name|core
range|:
name|theCores
control|)
block|{
name|String
name|ddir
init|=
name|core
operator|.
name|getDataDir
argument_list|()
decl_stmt|;
name|CachingDirectoryFactory
name|dirFactory
init|=
operator|(
name|CachingDirectoryFactory
operator|)
name|core
operator|.
name|getDirectoryFactory
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|dirFactory
init|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|livePaths
init|=
name|dirFactory
operator|.
name|getLivePaths
argument_list|()
decl_stmt|;
comment|// one for data, one for hte index under data
name|assertEquals
argument_list|(
name|livePaths
operator|.
name|toString
argument_list|()
argument_list|,
literal|2
argument_list|,
name|livePaths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// :TODO: assert that one of the paths is a subpath of hte other
block|}
if|if
condition|(
name|dirFactory
operator|instanceof
name|StandardDirectoryFactory
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|File
argument_list|(
name|ddir
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|File
argument_list|(
name|ddir
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
name|indexDirCount
argument_list|(
name|ddir
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|indexDirCount
specifier|private
name|int
name|indexDirCount
parameter_list|(
name|String
name|ddir
parameter_list|)
block|{
name|String
index|[]
name|list
init|=
operator|new
name|File
argument_list|(
name|ddir
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|list
control|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|endsWith
argument_list|(
literal|".properties"
argument_list|)
condition|)
block|{
name|cnt
operator|++
expr_stmt|;
block|}
block|}
return|return
name|cnt
return|;
block|}
DECL|method|pullFromMasterToSlave
specifier|private
name|void
name|pullFromMasterToSlave
parameter_list|()
throws|throws
name|MalformedURLException
throws|,
name|IOException
block|{
name|pullFromTo
argument_list|(
name|masterJetty
argument_list|,
name|slaveJetty
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|doTestRepeater
specifier|public
name|void
name|doTestRepeater
parameter_list|()
throws|throws
name|Exception
block|{
comment|// no polling
name|slave
operator|.
name|copyConfigFile
argument_list|(
name|CONF_DIR
operator|+
literal|"solrconfig-slave1.xml"
argument_list|,
literal|"solrconfig.xml"
argument_list|)
expr_stmt|;
name|slaveJetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|slaveJetty
operator|=
name|createJetty
argument_list|(
name|slave
argument_list|)
expr_stmt|;
name|slaveClient
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|slaveClient
operator|=
name|createNewSolrServer
argument_list|(
name|slaveJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|repeater
operator|=
operator|new
name|SolrInstance
argument_list|(
name|createTempDir
argument_list|(
literal|"solr-instance"
argument_list|)
argument_list|,
literal|"repeater"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|repeater
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|repeater
operator|.
name|copyConfigFile
argument_list|(
name|CONF_DIR
operator|+
literal|"solrconfig-repeater.xml"
argument_list|,
literal|"solrconfig.xml"
argument_list|)
expr_stmt|;
name|repeaterJetty
operator|=
name|createJetty
argument_list|(
name|repeater
argument_list|)
expr_stmt|;
if|if
condition|(
name|repeaterClient
operator|!=
literal|null
condition|)
block|{
name|repeaterClient
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|repeaterClient
operator|=
name|createNewSolrServer
argument_list|(
name|repeaterJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
name|index
argument_list|(
name|masterClient
argument_list|,
literal|"id"
argument_list|,
name|i
argument_list|,
literal|"name"
argument_list|,
literal|"name = "
operator|+
name|i
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|pullFromTo
argument_list|(
name|masterJetty
argument_list|,
name|repeaterJetty
argument_list|)
expr_stmt|;
name|rQuery
argument_list|(
literal|3
argument_list|,
literal|"*:*"
argument_list|,
name|repeaterClient
argument_list|)
expr_stmt|;
name|pullFromTo
argument_list|(
name|repeaterJetty
argument_list|,
name|slaveJetty
argument_list|)
expr_stmt|;
name|rQuery
argument_list|(
literal|3
argument_list|,
literal|"*:*"
argument_list|,
name|slaveClient
argument_list|)
expr_stmt|;
name|assertVersions
argument_list|(
name|masterClient
argument_list|,
name|repeaterClient
argument_list|)
expr_stmt|;
name|assertVersions
argument_list|(
name|repeaterClient
argument_list|,
name|slaveClient
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
name|index
argument_list|(
name|repeaterClient
argument_list|,
literal|"id"
argument_list|,
name|i
argument_list|,
literal|"name"
argument_list|,
literal|"name = "
operator|+
name|i
argument_list|)
expr_stmt|;
name|repeaterClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|pullFromTo
argument_list|(
name|masterJetty
argument_list|,
name|repeaterJetty
argument_list|)
expr_stmt|;
name|rQuery
argument_list|(
literal|3
argument_list|,
literal|"*:*"
argument_list|,
name|repeaterClient
argument_list|)
expr_stmt|;
name|pullFromTo
argument_list|(
name|repeaterJetty
argument_list|,
name|slaveJetty
argument_list|)
expr_stmt|;
name|rQuery
argument_list|(
literal|3
argument_list|,
literal|"*:*"
argument_list|,
name|slaveClient
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|3
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
name|index
argument_list|(
name|masterClient
argument_list|,
literal|"id"
argument_list|,
name|i
argument_list|,
literal|"name"
argument_list|,
literal|"name = "
operator|+
name|i
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|pullFromTo
argument_list|(
name|masterJetty
argument_list|,
name|repeaterJetty
argument_list|)
expr_stmt|;
name|rQuery
argument_list|(
literal|6
argument_list|,
literal|"*:*"
argument_list|,
name|repeaterClient
argument_list|)
expr_stmt|;
name|pullFromTo
argument_list|(
name|repeaterJetty
argument_list|,
name|slaveJetty
argument_list|)
expr_stmt|;
name|rQuery
argument_list|(
literal|6
argument_list|,
literal|"*:*"
argument_list|,
name|slaveClient
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|repeater
operator|!=
literal|null
condition|)
block|{
name|repeaterJetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|repeater
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|repeaterJetty
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
DECL|method|assertVersions
specifier|private
name|void
name|assertVersions
parameter_list|(
name|SolrServer
name|client1
parameter_list|,
name|SolrServer
name|client2
parameter_list|)
throws|throws
name|Exception
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|details
init|=
name|getDetails
argument_list|(
name|client1
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|commits
init|=
operator|(
name|ArrayList
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
operator|)
name|details
operator|.
name|get
argument_list|(
literal|"commits"
argument_list|)
decl_stmt|;
name|Long
name|maxVersionClient1
init|=
name|getVersion
argument_list|(
name|client1
argument_list|)
decl_stmt|;
name|Long
name|maxVersionClient2
init|=
name|getVersion
argument_list|(
name|client2
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxVersionClient1
operator|>
literal|0
operator|&&
name|maxVersionClient2
operator|>
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|maxVersionClient1
argument_list|,
name|maxVersionClient2
argument_list|)
expr_stmt|;
block|}
comment|// check vs /replication?command=indexversion call
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/replication"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"_trace"
argument_list|,
literal|"assertVersions"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"command"
argument_list|,
literal|"indexversion"
argument_list|)
expr_stmt|;
name|QueryRequest
name|req
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|resp
init|=
name|client1
operator|.
name|request
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|Long
name|version
init|=
operator|(
name|Long
operator|)
name|resp
operator|.
name|get
argument_list|(
literal|"indexversion"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|maxVersionClient1
argument_list|,
name|version
argument_list|)
expr_stmt|;
comment|// check vs /replication?command=indexversion call
name|resp
operator|=
name|client2
operator|.
name|request
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|version
operator|=
operator|(
name|Long
operator|)
name|resp
operator|.
name|get
argument_list|(
literal|"indexversion"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maxVersionClient2
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
DECL|method|getVersion
specifier|private
name|Long
name|getVersion
parameter_list|(
name|SolrServer
name|client
parameter_list|)
throws|throws
name|Exception
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|details
decl_stmt|;
name|ArrayList
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|commits
decl_stmt|;
name|details
operator|=
name|getDetails
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|commits
operator|=
operator|(
name|ArrayList
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
operator|)
name|details
operator|.
name|get
argument_list|(
literal|"commits"
argument_list|)
expr_stmt|;
name|Long
name|maxVersionSlave
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|NamedList
argument_list|<
name|Object
argument_list|>
name|commit
range|:
name|commits
control|)
block|{
name|Long
name|version
init|=
operator|(
name|Long
operator|)
name|commit
operator|.
name|get
argument_list|(
literal|"indexVersion"
argument_list|)
decl_stmt|;
name|maxVersionSlave
operator|=
name|Math
operator|.
name|max
argument_list|(
name|version
argument_list|,
name|maxVersionSlave
argument_list|)
expr_stmt|;
block|}
return|return
name|maxVersionSlave
return|;
block|}
DECL|method|pullFromSlaveToMaster
specifier|private
name|void
name|pullFromSlaveToMaster
parameter_list|()
throws|throws
name|MalformedURLException
throws|,
name|IOException
block|{
name|pullFromTo
argument_list|(
name|slaveJetty
argument_list|,
name|masterJetty
argument_list|)
expr_stmt|;
block|}
DECL|method|pullFromTo
specifier|private
name|void
name|pullFromTo
parameter_list|(
name|JettySolrRunner
name|from
parameter_list|,
name|JettySolrRunner
name|to
parameter_list|)
throws|throws
name|MalformedURLException
throws|,
name|IOException
block|{
name|String
name|masterUrl
decl_stmt|;
name|URL
name|url
decl_stmt|;
name|InputStream
name|stream
decl_stmt|;
name|masterUrl
operator|=
name|buildUrl
argument_list|(
name|to
operator|.
name|getLocalPort
argument_list|()
argument_list|)
operator|+
literal|"/replication?wait=true&command=fetchindex&masterUrl="
operator|+
name|buildUrl
argument_list|(
name|from
operator|.
name|getLocalPort
argument_list|()
argument_list|)
operator|+
literal|"/replication"
expr_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|masterUrl
argument_list|)
expr_stmt|;
name|stream
operator|=
name|url
operator|.
name|openStream
argument_list|()
expr_stmt|;
try|try
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// e.printStackTrace();
block|}
block|}
annotation|@
name|Test
DECL|method|doTestReplicateAfterStartup
specifier|public
name|void
name|doTestReplicateAfterStartup
parameter_list|()
throws|throws
name|Exception
block|{
comment|//stop slave
name|slaveJetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|nDocs
operator|--
expr_stmt|;
name|masterClient
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|//change solrconfig having 'replicateAfter startup' option on master
name|master
operator|.
name|copyConfigFile
argument_list|(
name|CONF_DIR
operator|+
literal|"solrconfig-master2.xml"
argument_list|,
literal|"solrconfig.xml"
argument_list|)
expr_stmt|;
name|masterJetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|masterJetty
operator|=
name|createJetty
argument_list|(
name|master
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|masterClient
operator|=
name|createNewSolrServer
argument_list|(
name|masterJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nDocs
condition|;
name|i
operator|++
control|)
name|index
argument_list|(
name|masterClient
argument_list|,
literal|"id"
argument_list|,
name|i
argument_list|,
literal|"name"
argument_list|,
literal|"name = "
operator|+
name|i
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|NamedList
name|masterQueryRsp
init|=
name|rQuery
argument_list|(
name|nDocs
argument_list|,
literal|"*:*"
argument_list|,
name|masterClient
argument_list|)
decl_stmt|;
name|SolrDocumentList
name|masterQueryResult
init|=
operator|(
name|SolrDocumentList
operator|)
name|masterQueryRsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nDocs
argument_list|,
name|masterQueryResult
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|slave
operator|.
name|setTestPort
argument_list|(
name|masterJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|slave
operator|.
name|copyConfigFile
argument_list|(
name|slave
operator|.
name|getSolrConfigFile
argument_list|()
argument_list|,
literal|"solrconfig.xml"
argument_list|)
expr_stmt|;
comment|//start slave
name|slaveJetty
operator|=
name|createJetty
argument_list|(
name|slave
argument_list|)
expr_stmt|;
name|slaveClient
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|slaveClient
operator|=
name|createNewSolrServer
argument_list|(
name|slaveJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
comment|//get docs from slave and check if number is equal to master
name|NamedList
name|slaveQueryRsp
init|=
name|rQuery
argument_list|(
name|nDocs
argument_list|,
literal|"*:*"
argument_list|,
name|slaveClient
argument_list|)
decl_stmt|;
name|SolrDocumentList
name|slaveQueryResult
init|=
operator|(
name|SolrDocumentList
operator|)
name|slaveQueryRsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nDocs
argument_list|,
name|slaveQueryResult
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|//compare results
name|String
name|cmp
init|=
name|BaseDistributedSearchTestCase
operator|.
name|compare
argument_list|(
name|masterQueryResult
argument_list|,
name|slaveQueryResult
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|doTestReplicateAfterStartupWithNoActivity
specifier|public
name|void
name|doTestReplicateAfterStartupWithNoActivity
parameter_list|()
throws|throws
name|Exception
block|{
name|useFactory
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
comment|// stop slave
name|slaveJetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|nDocs
operator|--
expr_stmt|;
name|masterClient
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// change solrconfig having 'replicateAfter startup' option on master
name|master
operator|.
name|copyConfigFile
argument_list|(
name|CONF_DIR
operator|+
literal|"solrconfig-master2.xml"
argument_list|,
literal|"solrconfig.xml"
argument_list|)
expr_stmt|;
name|masterJetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|masterJetty
operator|=
name|createJetty
argument_list|(
name|master
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|masterClient
operator|=
name|createNewSolrServer
argument_list|(
name|masterJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nDocs
condition|;
name|i
operator|++
control|)
name|index
argument_list|(
name|masterClient
argument_list|,
literal|"id"
argument_list|,
name|i
argument_list|,
literal|"name"
argument_list|,
literal|"name = "
operator|+
name|i
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// now we restart to test what happens with no activity before the slave
comment|// tries to
comment|// replicate
name|masterJetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|masterJetty
operator|.
name|start
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// masterClient = createNewSolrServer(masterJetty.getLocalPort());
name|NamedList
name|masterQueryRsp
init|=
name|rQuery
argument_list|(
name|nDocs
argument_list|,
literal|"*:*"
argument_list|,
name|masterClient
argument_list|)
decl_stmt|;
name|SolrDocumentList
name|masterQueryResult
init|=
operator|(
name|SolrDocumentList
operator|)
name|masterQueryRsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nDocs
argument_list|,
name|masterQueryResult
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|slave
operator|.
name|setTestPort
argument_list|(
name|masterJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|slave
operator|.
name|copyConfigFile
argument_list|(
name|slave
operator|.
name|getSolrConfigFile
argument_list|()
argument_list|,
literal|"solrconfig.xml"
argument_list|)
expr_stmt|;
comment|// start slave
name|slaveJetty
operator|=
name|createJetty
argument_list|(
name|slave
argument_list|)
expr_stmt|;
name|slaveClient
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|slaveClient
operator|=
name|createNewSolrServer
argument_list|(
name|slaveJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
comment|// get docs from slave and check if number is equal to master
name|NamedList
name|slaveQueryRsp
init|=
name|rQuery
argument_list|(
name|nDocs
argument_list|,
literal|"*:*"
argument_list|,
name|slaveClient
argument_list|)
decl_stmt|;
name|SolrDocumentList
name|slaveQueryResult
init|=
operator|(
name|SolrDocumentList
operator|)
name|slaveQueryRsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nDocs
argument_list|,
name|slaveQueryResult
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// compare results
name|String
name|cmp
init|=
name|BaseDistributedSearchTestCase
operator|.
name|compare
argument_list|(
name|masterQueryResult
argument_list|,
name|slaveQueryResult
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|resetFactory
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|doTestReplicateAfterCoreReload
specifier|public
name|void
name|doTestReplicateAfterCoreReload
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|docs
init|=
name|TEST_NIGHTLY
condition|?
literal|200000
else|:
literal|0
decl_stmt|;
comment|//stop slave
name|slaveJetty
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|//change solrconfig having 'replicateAfter startup' option on master
name|master
operator|.
name|copyConfigFile
argument_list|(
name|CONF_DIR
operator|+
literal|"solrconfig-master3.xml"
argument_list|,
literal|"solrconfig.xml"
argument_list|)
expr_stmt|;
name|masterJetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|masterJetty
operator|=
name|createJetty
argument_list|(
name|master
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|masterClient
operator|=
name|createNewSolrServer
argument_list|(
name|masterJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
condition|;
name|i
operator|++
control|)
name|index
argument_list|(
name|masterClient
argument_list|,
literal|"id"
argument_list|,
name|i
argument_list|,
literal|"name"
argument_list|,
literal|"name = "
operator|+
name|i
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|NamedList
name|masterQueryRsp
init|=
name|rQuery
argument_list|(
name|docs
argument_list|,
literal|"*:*"
argument_list|,
name|masterClient
argument_list|)
decl_stmt|;
name|SolrDocumentList
name|masterQueryResult
init|=
operator|(
name|SolrDocumentList
operator|)
name|masterQueryRsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|docs
argument_list|,
name|masterQueryResult
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|slave
operator|.
name|setTestPort
argument_list|(
name|masterJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|slave
operator|.
name|copyConfigFile
argument_list|(
name|slave
operator|.
name|getSolrConfigFile
argument_list|()
argument_list|,
literal|"solrconfig.xml"
argument_list|)
expr_stmt|;
comment|//start slave
name|slaveJetty
operator|=
name|createJetty
argument_list|(
name|slave
argument_list|)
expr_stmt|;
name|slaveClient
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|slaveClient
operator|=
name|createNewSolrServer
argument_list|(
name|slaveJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
comment|//get docs from slave and check if number is equal to master
name|NamedList
name|slaveQueryRsp
init|=
name|rQuery
argument_list|(
name|docs
argument_list|,
literal|"*:*"
argument_list|,
name|slaveClient
argument_list|)
decl_stmt|;
name|SolrDocumentList
name|slaveQueryResult
init|=
operator|(
name|SolrDocumentList
operator|)
name|slaveQueryRsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|docs
argument_list|,
name|slaveQueryResult
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|//compare results
name|String
name|cmp
init|=
name|BaseDistributedSearchTestCase
operator|.
name|compare
argument_list|(
name|masterQueryResult
argument_list|,
name|slaveQueryResult
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Object
name|version
init|=
name|getIndexVersion
argument_list|(
name|masterClient
argument_list|)
operator|.
name|get
argument_list|(
literal|"indexversion"
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|commits
init|=
name|getCommits
argument_list|(
name|masterClient
argument_list|)
decl_stmt|;
name|reloadCore
argument_list|(
name|masterClient
argument_list|,
literal|"collection1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|version
argument_list|,
name|getIndexVersion
argument_list|(
name|masterClient
argument_list|)
operator|.
name|get
argument_list|(
literal|"indexversion"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|commits
operator|.
name|get
argument_list|(
literal|"commits"
argument_list|)
argument_list|,
name|getCommits
argument_list|(
name|masterClient
argument_list|)
operator|.
name|get
argument_list|(
literal|"commits"
argument_list|)
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|masterClient
argument_list|,
literal|"id"
argument_list|,
name|docs
operator|+
literal|10
argument_list|,
literal|"name"
argument_list|,
literal|"name = 1"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|masterClient
argument_list|,
literal|"id"
argument_list|,
name|docs
operator|+
literal|20
argument_list|,
literal|"name"
argument_list|,
literal|"name = 2"
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|NamedList
name|resp
init|=
name|rQuery
argument_list|(
name|docs
operator|+
literal|2
argument_list|,
literal|"*:*"
argument_list|,
name|masterClient
argument_list|)
decl_stmt|;
name|masterQueryResult
operator|=
operator|(
name|SolrDocumentList
operator|)
name|resp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|docs
operator|+
literal|2
argument_list|,
name|masterQueryResult
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|//get docs from slave and check if number is equal to master
name|slaveQueryRsp
operator|=
name|rQuery
argument_list|(
name|docs
operator|+
literal|2
argument_list|,
literal|"*:*"
argument_list|,
name|slaveClient
argument_list|)
expr_stmt|;
name|slaveQueryResult
operator|=
operator|(
name|SolrDocumentList
operator|)
name|slaveQueryRsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|docs
operator|+
literal|2
argument_list|,
name|slaveQueryResult
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|doTestIndexAndConfigAliasReplication
specifier|public
name|void
name|doTestIndexAndConfigAliasReplication
parameter_list|()
throws|throws
name|Exception
block|{
name|clearIndexWithReplication
argument_list|()
expr_stmt|;
name|nDocs
operator|--
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nDocs
condition|;
name|i
operator|++
control|)
name|index
argument_list|(
name|masterClient
argument_list|,
literal|"id"
argument_list|,
name|i
argument_list|,
literal|"name"
argument_list|,
literal|"name = "
operator|+
name|i
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|NamedList
name|masterQueryRsp
init|=
name|rQuery
argument_list|(
name|nDocs
argument_list|,
literal|"*:*"
argument_list|,
name|masterClient
argument_list|)
decl_stmt|;
name|SolrDocumentList
name|masterQueryResult
init|=
operator|(
name|SolrDocumentList
operator|)
name|masterQueryRsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nDocs
argument_list|,
name|masterQueryResult
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|//get docs from slave and check if number is equal to master
name|NamedList
name|slaveQueryRsp
init|=
name|rQuery
argument_list|(
name|nDocs
argument_list|,
literal|"*:*"
argument_list|,
name|slaveClient
argument_list|)
decl_stmt|;
name|SolrDocumentList
name|slaveQueryResult
init|=
operator|(
name|SolrDocumentList
operator|)
name|slaveQueryRsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nDocs
argument_list|,
name|slaveQueryResult
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|//compare results
name|String
name|cmp
init|=
name|BaseDistributedSearchTestCase
operator|.
name|compare
argument_list|(
name|masterQueryResult
argument_list|,
name|slaveQueryResult
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
comment|//start config files replication test
comment|//clear master index
name|masterClient
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|rQuery
argument_list|(
literal|0
argument_list|,
literal|"*:*"
argument_list|,
name|masterClient
argument_list|)
expr_stmt|;
comment|// sanity check w/retry
comment|//change solrconfig on master
name|master
operator|.
name|copyConfigFile
argument_list|(
name|CONF_DIR
operator|+
literal|"solrconfig-master1.xml"
argument_list|,
literal|"solrconfig.xml"
argument_list|)
expr_stmt|;
comment|//change schema on master
name|master
operator|.
name|copyConfigFile
argument_list|(
name|CONF_DIR
operator|+
literal|"schema-replication2.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
comment|//keep a copy of the new schema
name|master
operator|.
name|copyConfigFile
argument_list|(
name|CONF_DIR
operator|+
literal|"schema-replication2.xml"
argument_list|,
literal|"schema-replication2.xml"
argument_list|)
expr_stmt|;
name|masterJetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|masterJetty
operator|=
name|createJetty
argument_list|(
name|master
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|masterClient
operator|=
name|createNewSolrServer
argument_list|(
name|masterJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|slave
operator|.
name|setTestPort
argument_list|(
name|masterJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|slave
operator|.
name|copyConfigFile
argument_list|(
name|slave
operator|.
name|getSolrConfigFile
argument_list|()
argument_list|,
literal|"solrconfig.xml"
argument_list|)
expr_stmt|;
name|slaveJetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|slaveJetty
operator|=
name|createJetty
argument_list|(
name|slave
argument_list|)
expr_stmt|;
name|slaveClient
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|slaveClient
operator|=
name|createNewSolrServer
argument_list|(
name|slaveJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|slaveClient
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|slaveClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|rQuery
argument_list|(
literal|0
argument_list|,
literal|"*:*"
argument_list|,
name|slaveClient
argument_list|)
expr_stmt|;
comment|// sanity check w/retry
comment|// record collection1's start time on slave
specifier|final
name|Date
name|slaveStartTime
init|=
name|watchCoreStartAt
argument_list|(
name|slaveClient
argument_list|,
literal|30
operator|*
literal|1000
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|//add a doc with new field and commit on master to trigger snappull from slave.
name|index
argument_list|(
name|masterClient
argument_list|,
literal|"id"
argument_list|,
literal|"2000"
argument_list|,
literal|"name"
argument_list|,
literal|"name = "
operator|+
literal|2000
argument_list|,
literal|"newname"
argument_list|,
literal|"n2000"
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|rQuery
argument_list|(
literal|1
argument_list|,
literal|"newname:n2000"
argument_list|,
name|masterClient
argument_list|)
expr_stmt|;
comment|// sanity check
comment|// wait for slave to reload core by watching updated startTime
name|watchCoreStartAt
argument_list|(
name|slaveClient
argument_list|,
literal|30
operator|*
literal|1000
argument_list|,
name|slaveStartTime
argument_list|)
expr_stmt|;
name|NamedList
name|masterQueryRsp2
init|=
name|rQuery
argument_list|(
literal|1
argument_list|,
literal|"id:2000"
argument_list|,
name|masterClient
argument_list|)
decl_stmt|;
name|SolrDocumentList
name|masterQueryResult2
init|=
operator|(
name|SolrDocumentList
operator|)
name|masterQueryRsp2
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|masterQueryResult2
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|NamedList
name|slaveQueryRsp2
init|=
name|rQuery
argument_list|(
literal|1
argument_list|,
literal|"id:2000"
argument_list|,
name|slaveClient
argument_list|)
decl_stmt|;
name|SolrDocumentList
name|slaveQueryResult2
init|=
operator|(
name|SolrDocumentList
operator|)
name|slaveQueryRsp2
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|slaveQueryResult2
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|slaveClient
argument_list|,
literal|"id"
argument_list|,
literal|"2001"
argument_list|,
literal|"name"
argument_list|,
literal|"name = "
operator|+
literal|2001
argument_list|,
literal|"newname"
argument_list|,
literal|"n2001"
argument_list|)
expr_stmt|;
name|slaveClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|slaveQueryRsp
operator|=
name|rQuery
argument_list|(
literal|1
argument_list|,
literal|"id:2001"
argument_list|,
name|slaveClient
argument_list|)
expr_stmt|;
name|SolrDocument
name|d
init|=
operator|(
operator|(
name|SolrDocumentList
operator|)
name|slaveQueryRsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"n2001"
argument_list|,
operator|(
name|String
operator|)
name|d
operator|.
name|getFieldValue
argument_list|(
literal|"newname"
argument_list|)
argument_list|)
expr_stmt|;
name|checkForSingleIndex
argument_list|(
name|masterJetty
argument_list|)
expr_stmt|;
name|checkForSingleIndex
argument_list|(
name|slaveJetty
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|doTestBackup
specifier|public
name|void
name|doTestBackup
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|configFile
init|=
literal|"solrconfig-master1.xml"
decl_stmt|;
name|boolean
name|addNumberToKeepInRequest
init|=
literal|true
decl_stmt|;
name|String
name|backupKeepParamName
init|=
name|ReplicationHandler
operator|.
name|NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|configFile
operator|=
literal|"solrconfig-master1-keepOneBackup.xml"
expr_stmt|;
name|addNumberToKeepInRequest
operator|=
literal|false
expr_stmt|;
name|backupKeepParamName
operator|=
name|ReplicationHandler
operator|.
name|NUMBER_BACKUPS_TO_KEEP_INIT_PARAM
expr_stmt|;
block|}
name|masterJetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|master
operator|.
name|copyConfigFile
argument_list|(
name|CONF_DIR
operator|+
name|configFile
argument_list|,
literal|"solrconfig.xml"
argument_list|)
expr_stmt|;
name|masterJetty
operator|=
name|createJetty
argument_list|(
name|master
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|masterClient
operator|=
name|createNewSolrServer
argument_list|(
name|masterJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|nDocs
operator|--
expr_stmt|;
name|masterClient
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nDocs
condition|;
name|i
operator|++
control|)
name|index
argument_list|(
name|masterClient
argument_list|,
literal|"id"
argument_list|,
name|i
argument_list|,
literal|"name"
argument_list|,
literal|"name = "
operator|+
name|i
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|commit
argument_list|()
expr_stmt|;
class|class
name|BackupThread
extends|extends
name|Thread
block|{
specifier|volatile
name|String
name|fail
init|=
literal|null
decl_stmt|;
specifier|final
name|boolean
name|addNumberToKeepInRequest
decl_stmt|;
name|String
name|backupKeepParamName
decl_stmt|;
name|String
name|backupName
decl_stmt|;
name|String
name|cmd
decl_stmt|;
name|BackupThread
parameter_list|(
name|boolean
name|addNumberToKeepInRequest
parameter_list|,
name|String
name|backupKeepParamName
parameter_list|,
name|String
name|command
parameter_list|)
block|{
name|this
operator|.
name|addNumberToKeepInRequest
operator|=
name|addNumberToKeepInRequest
expr_stmt|;
name|this
operator|.
name|backupKeepParamName
operator|=
name|backupKeepParamName
expr_stmt|;
name|this
operator|.
name|cmd
operator|=
name|command
expr_stmt|;
block|}
name|BackupThread
parameter_list|(
name|String
name|backupName
parameter_list|,
name|String
name|command
parameter_list|)
block|{
name|this
operator|.
name|backupName
operator|=
name|backupName
expr_stmt|;
name|addNumberToKeepInRequest
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|cmd
operator|=
name|command
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|String
name|masterUrl
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|backupName
operator|!=
literal|null
condition|)
block|{
name|masterUrl
operator|=
name|buildUrl
argument_list|(
name|masterJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
operator|+
literal|"/replication?command="
operator|+
name|cmd
operator|+
literal|"&name="
operator|+
name|backupName
expr_stmt|;
block|}
else|else
block|{
name|masterUrl
operator|=
name|buildUrl
argument_list|(
name|masterJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
operator|+
literal|"/replication?command="
operator|+
name|cmd
operator|+
operator|(
name|addNumberToKeepInRequest
condition|?
literal|"&"
operator|+
name|backupKeepParamName
operator|+
literal|"=1"
else|:
literal|""
operator|)
expr_stmt|;
block|}
name|URL
name|url
decl_stmt|;
name|InputStream
name|stream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|url
operator|=
operator|new
name|URL
argument_list|(
name|masterUrl
argument_list|)
expr_stmt|;
name|stream
operator|=
name|url
operator|.
name|openStream
argument_list|()
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
block|}
empty_stmt|;
class|class
name|CheckDeleteBackupStatus
block|{
name|String
name|response
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|String
name|fail
init|=
literal|null
decl_stmt|;
specifier|public
name|void
name|fetchStatus
parameter_list|()
block|{
name|String
name|masterUrl
init|=
name|buildUrl
argument_list|(
name|masterJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
operator|+
literal|"/replication?command="
operator|+
name|ReplicationHandler
operator|.
name|CMD_DETAILS
decl_stmt|;
name|URL
name|url
decl_stmt|;
name|InputStream
name|stream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|url
operator|=
operator|new
name|URL
argument_list|(
name|masterUrl
argument_list|)
expr_stmt|;
name|stream
operator|=
name|url
operator|.
name|openStream
argument_list|()
expr_stmt|;
name|response
operator|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|stream
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|contains
argument_list|(
literal|"<str name=\"status\">success</str>"
argument_list|)
condition|)
block|{
name|success
operator|=
literal|true
expr_stmt|;
block|}
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
block|}
class|class
name|CheckBackupStatus
block|{
name|String
name|fail
init|=
literal|null
decl_stmt|;
name|String
name|response
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|String
name|backupTimestamp
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|lastBackupTimestamp
decl_stmt|;
specifier|final
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"<str name=\"snapshotCompletedAt\">(.*?)</str>"
argument_list|)
decl_stmt|;
name|CheckBackupStatus
parameter_list|(
name|String
name|lastBackupTimestamp
parameter_list|)
block|{
name|this
operator|.
name|lastBackupTimestamp
operator|=
name|lastBackupTimestamp
expr_stmt|;
block|}
specifier|public
name|void
name|fetchStatus
parameter_list|()
block|{
name|String
name|masterUrl
init|=
name|buildUrl
argument_list|(
name|masterJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
operator|+
literal|"/replication?command="
operator|+
name|ReplicationHandler
operator|.
name|CMD_DETAILS
decl_stmt|;
name|URL
name|url
decl_stmt|;
name|InputStream
name|stream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|url
operator|=
operator|new
name|URL
argument_list|(
name|masterUrl
argument_list|)
expr_stmt|;
name|stream
operator|=
name|url
operator|.
name|openStream
argument_list|()
expr_stmt|;
name|response
operator|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|stream
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|contains
argument_list|(
literal|"<str name=\"status\">success</str>"
argument_list|)
condition|)
block|{
name|Matcher
name|m
init|=
name|p
operator|.
name|matcher
argument_list|(
name|response
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"could not find the completed timestamp in response."
argument_list|)
expr_stmt|;
block|}
name|backupTimestamp
operator|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|backupTimestamp
operator|.
name|equals
argument_list|(
name|lastBackupTimestamp
argument_list|)
condition|)
block|{
name|success
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
block|}
empty_stmt|;
name|File
index|[]
name|snapDir
init|=
operator|new
name|File
index|[
literal|2
index|]
decl_stmt|;
try|try
block|{
name|String
name|firstBackupTimestamp
init|=
literal|null
decl_stmt|;
name|boolean
name|namedBackup
init|=
literal|true
decl_stmt|;
name|String
index|[]
name|backupNames
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|namedBackup
condition|)
block|{
name|backupNames
operator|=
operator|new
name|String
index|[
literal|2
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|BackupThread
name|backupThread
decl_stmt|;
specifier|final
name|String
name|backupName
init|=
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|namedBackup
condition|)
block|{
name|backupThread
operator|=
operator|new
name|BackupThread
argument_list|(
name|addNumberToKeepInRequest
argument_list|,
name|backupKeepParamName
argument_list|,
name|ReplicationHandler
operator|.
name|CMD_BACKUP
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|backupThread
operator|=
operator|new
name|BackupThread
argument_list|(
name|backupName
argument_list|,
name|ReplicationHandler
operator|.
name|CMD_BACKUP
argument_list|)
expr_stmt|;
name|backupNames
index|[
name|i
index|]
operator|=
name|backupName
expr_stmt|;
block|}
name|backupThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|File
name|dataDir
init|=
operator|new
name|File
argument_list|(
name|master
operator|.
name|getDataDir
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|waitCnt
init|=
literal|0
decl_stmt|;
name|CheckBackupStatus
name|checkBackupStatus
init|=
operator|new
name|CheckBackupStatus
argument_list|(
name|firstBackupTimestamp
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|checkBackupStatus
operator|.
name|fetchStatus
argument_list|()
expr_stmt|;
if|if
condition|(
name|checkBackupStatus
operator|.
name|fail
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
name|checkBackupStatus
operator|.
name|fail
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkBackupStatus
operator|.
name|success
condition|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|firstBackupTimestamp
operator|=
name|checkBackupStatus
operator|.
name|backupTimestamp
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|//ensure the next backup will have a different timestamp.
block|}
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
if|if
condition|(
name|waitCnt
operator|==
literal|20
condition|)
block|{
name|fail
argument_list|(
literal|"Backup success not detected:"
operator|+
name|checkBackupStatus
operator|.
name|response
argument_list|)
expr_stmt|;
block|}
name|waitCnt
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|backupThread
operator|.
name|fail
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
name|backupThread
operator|.
name|fail
argument_list|)
expr_stmt|;
block|}
name|File
index|[]
name|files
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|namedBackup
condition|)
block|{
name|files
operator|=
name|dataDir
operator|.
name|listFiles
argument_list|(
operator|new
name|FilenameFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"snapshot"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|files
operator|=
name|dataDir
operator|.
name|listFiles
argument_list|(
operator|new
name|FilenameFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"snapshot."
operator|+
name|backupName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
name|snapDir
index|[
name|i
index|]
operator|=
name|files
index|[
literal|0
index|]
expr_stmt|;
name|Directory
name|dir
init|=
operator|new
name|SimpleFSDirectory
argument_list|(
name|snapDir
index|[
name|i
index|]
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
decl_stmt|;
name|IndexReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|TopDocs
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nDocs
argument_list|,
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|namedBackup
operator|&&
name|snapDir
index|[
literal|0
index|]
operator|.
name|exists
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"The first backup should have been cleaned up because "
operator|+
name|backupKeepParamName
operator|+
literal|" was set to 1."
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
comment|//Test Deletion of named backup
name|BackupThread
name|deleteBackupThread
init|=
operator|new
name|BackupThread
argument_list|(
name|backupNames
index|[
name|i
index|]
argument_list|,
name|ReplicationHandler
operator|.
name|CMD_DELETE_BACKUP
argument_list|)
decl_stmt|;
name|deleteBackupThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|waitCnt
init|=
literal|0
decl_stmt|;
name|CheckDeleteBackupStatus
name|checkDeleteBackupStatus
init|=
operator|new
name|CheckDeleteBackupStatus
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|checkDeleteBackupStatus
operator|.
name|fetchStatus
argument_list|()
expr_stmt|;
if|if
condition|(
name|checkDeleteBackupStatus
operator|.
name|fail
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
name|checkDeleteBackupStatus
operator|.
name|fail
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkDeleteBackupStatus
operator|.
name|success
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
if|if
condition|(
name|waitCnt
operator|==
literal|20
condition|)
block|{
name|fail
argument_list|(
literal|"Delete Backup success not detected:"
operator|+
name|checkDeleteBackupStatus
operator|.
name|response
argument_list|)
expr_stmt|;
block|}
name|waitCnt
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|deleteBackupThread
operator|.
name|fail
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
name|deleteBackupThread
operator|.
name|fail
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
for|for
control|(
name|File
name|dir
range|:
name|snapDir
control|)
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
name|AbstractSolrTestCase
operator|.
name|recurseDelete
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* character copy of file using UTF-8 */
DECL|method|copyFile
specifier|private
specifier|static
name|void
name|copyFile
parameter_list|(
name|File
name|src
parameter_list|,
name|File
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|copyFile
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * character copy of file using UTF-8. If port is non-null, will be substituted any time "TEST_PORT" is found.    */
DECL|method|copyFile
specifier|private
specifier|static
name|void
name|copyFile
parameter_list|(
name|File
name|src
parameter_list|,
name|File
name|dst
parameter_list|,
name|Integer
name|port
parameter_list|,
name|boolean
name|internalCompression
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|src
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|Writer
name|out
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|dst
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|line
init|=
name|in
operator|.
name|readLine
argument_list|()
init|;
literal|null
operator|!=
name|line
condition|;
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
control|)
block|{
if|if
condition|(
literal|null
operator|!=
name|port
condition|)
name|line
operator|=
name|line
operator|.
name|replace
argument_list|(
literal|"TEST_PORT"
argument_list|,
name|port
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|=
name|line
operator|.
name|replace
argument_list|(
literal|"COMPRESSION"
argument_list|,
name|internalCompression
condition|?
literal|"internal"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|emptyUpdate
specifier|private
name|UpdateResponse
name|emptyUpdate
parameter_list|(
name|SolrServer
name|client
parameter_list|,
name|String
modifier|...
name|params
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|UpdateRequest
name|req
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|setParams
argument_list|(
name|params
argument_list|(
name|params
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|req
operator|.
name|process
argument_list|(
name|client
argument_list|)
return|;
block|}
comment|/**    * Polls the SolrCore stats using the specified client until the "startTime"     * time for collection is after the specified "min".  Will loop for     * at most "timeout" milliseconds before throwing an assertion failure.    *     * @param client The SolrServer to poll    * @param timeout the max milliseconds to continue polling for    * @param min the startTime value must exceed this value before the method will return, if null this method will return the first startTime value encountered.    * @return the startTime value of collection    */
DECL|method|watchCoreStartAt
specifier|private
name|Date
name|watchCoreStartAt
parameter_list|(
name|SolrServer
name|client
parameter_list|,
specifier|final
name|long
name|timeout
parameter_list|,
specifier|final
name|Date
name|min
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
throws|,
name|SolrServerException
block|{
specifier|final
name|long
name|sleepInterval
init|=
literal|200
decl_stmt|;
name|long
name|timeSlept
init|=
literal|0
decl_stmt|;
name|SolrParams
name|p
init|=
name|params
argument_list|(
literal|"action"
argument_list|,
literal|"status"
argument_list|,
literal|"core"
argument_list|,
literal|"collection1"
argument_list|)
decl_stmt|;
while|while
condition|(
name|timeSlept
operator|<
name|timeout
condition|)
block|{
name|QueryRequest
name|req
init|=
operator|new
name|QueryRequest
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|req
operator|.
name|setPath
argument_list|(
literal|"/admin/cores"
argument_list|)
expr_stmt|;
try|try
block|{
name|NamedList
name|data
init|=
name|client
operator|.
name|request
argument_list|(
name|req
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|k
range|:
operator|new
name|String
index|[]
block|{
literal|"status"
block|,
literal|"collection1"
block|}
control|)
block|{
name|Object
name|o
init|=
name|data
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"core status rsp missing key: "
operator|+
name|k
argument_list|,
name|o
argument_list|)
expr_stmt|;
name|data
operator|=
operator|(
name|NamedList
operator|)
name|o
expr_stmt|;
block|}
name|Date
name|startTime
init|=
operator|(
name|Date
operator|)
name|data
operator|.
name|get
argument_list|(
literal|"startTime"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"core has null startTime"
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|min
operator|||
name|startTime
operator|.
name|after
argument_list|(
name|min
argument_list|)
condition|)
block|{
return|return
name|startTime
return|;
block|}
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
comment|// workarround for SOLR-4668
if|if
condition|(
literal|500
operator|!=
name|e
operator|.
name|code
argument_list|()
condition|)
block|{
throw|throw
name|e
throw|;
block|}
comment|// else server possibly from the core reload in progress...
block|}
name|timeSlept
operator|+=
name|sleepInterval
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepInterval
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"timed out waiting for collection1 startAt time to exceed: "
operator|+
name|min
argument_list|)
expr_stmt|;
return|return
name|min
return|;
comment|// compilation neccessity
block|}
DECL|method|buildUrl
specifier|private
specifier|static
name|String
name|buildUrl
parameter_list|(
name|int
name|port
parameter_list|)
block|{
return|return
name|buildUrl
argument_list|(
name|port
argument_list|,
name|context
argument_list|)
return|;
block|}
DECL|class|SolrInstance
specifier|private
specifier|static
class|class
name|SolrInstance
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|testPort
specifier|private
name|Integer
name|testPort
decl_stmt|;
DECL|field|homeDir
specifier|private
name|File
name|homeDir
decl_stmt|;
DECL|field|confDir
specifier|private
name|File
name|confDir
decl_stmt|;
DECL|field|dataDir
specifier|private
name|File
name|dataDir
decl_stmt|;
comment|/**      * @param homeDir Base directory to build solr configuration and index in      * @param name used to pick which      *        "solrconfig-${name}.xml" file gets copied      *        to solrconfig.xml in new conf dir.      * @param testPort if not null, used as a replacement for      *        TEST_PORT in the cloned config files.      */
DECL|method|SolrInstance
specifier|public
name|SolrInstance
parameter_list|(
name|File
name|homeDir
parameter_list|,
name|String
name|name
parameter_list|,
name|Integer
name|testPort
parameter_list|)
block|{
name|this
operator|.
name|homeDir
operator|=
name|homeDir
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|testPort
operator|=
name|testPort
expr_stmt|;
block|}
DECL|method|getHomeDir
specifier|public
name|String
name|getHomeDir
parameter_list|()
block|{
return|return
name|homeDir
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getSchemaFile
specifier|public
name|String
name|getSchemaFile
parameter_list|()
block|{
return|return
name|CONF_DIR
operator|+
literal|"schema-replication1.xml"
return|;
block|}
DECL|method|getConfDir
specifier|public
name|String
name|getConfDir
parameter_list|()
block|{
return|return
name|confDir
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getDataDir
specifier|public
name|String
name|getDataDir
parameter_list|()
block|{
return|return
name|dataDir
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
DECL|method|getSolrConfigFile
specifier|public
name|String
name|getSolrConfigFile
parameter_list|()
block|{
return|return
name|CONF_DIR
operator|+
literal|"solrconfig-"
operator|+
name|name
operator|+
literal|".xml"
return|;
block|}
comment|/** If it needs to change */
DECL|method|setTestPort
specifier|public
name|void
name|setTestPort
parameter_list|(
name|Integer
name|testPort
parameter_list|)
block|{
name|this
operator|.
name|testPort
operator|=
name|testPort
expr_stmt|;
block|}
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.test.sys.prop1"
argument_list|,
literal|"propone"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.test.sys.prop2"
argument_list|,
literal|"proptwo"
argument_list|)
expr_stmt|;
name|dataDir
operator|=
operator|new
name|File
argument_list|(
name|homeDir
operator|+
literal|"/collection1"
argument_list|,
literal|"data"
argument_list|)
expr_stmt|;
name|confDir
operator|=
operator|new
name|File
argument_list|(
name|homeDir
operator|+
literal|"/collection1"
argument_list|,
literal|"conf"
argument_list|)
expr_stmt|;
name|homeDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|dataDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|confDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|copyConfigFile
argument_list|(
name|getSolrConfigFile
argument_list|()
argument_list|,
literal|"solrconfig.xml"
argument_list|)
expr_stmt|;
name|copyConfigFile
argument_list|(
name|getSchemaFile
argument_list|()
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
name|copyConfigFile
argument_list|(
name|CONF_DIR
operator|+
literal|"solrconfig.snippet.randomindexconfig.xml"
argument_list|,
literal|"solrconfig.snippet.randomindexconfig.xml"
argument_list|)
expr_stmt|;
block|}
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractSolrTestCase
operator|.
name|recurseDelete
argument_list|(
name|homeDir
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|copyConfigFile
specifier|public
name|void
name|copyConfigFile
parameter_list|(
name|String
name|srcFile
parameter_list|,
name|String
name|destFile
parameter_list|)
throws|throws
name|IOException
block|{
name|copyFile
argument_list|(
name|getFile
argument_list|(
name|srcFile
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|confDir
argument_list|,
name|destFile
argument_list|)
argument_list|,
name|testPort
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
