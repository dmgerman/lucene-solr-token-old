begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|SimpleFSDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrJettyTestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettyConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
annotation|@
name|SolrTestCaseJ4
operator|.
name|SuppressSSL
comment|// Currently unknown why SSL does not work with this test
DECL|class|TestReplicationHandlerBackup
specifier|public
class|class
name|TestReplicationHandlerBackup
extends|extends
name|SolrJettyTestBase
block|{
DECL|field|masterJetty
name|JettySolrRunner
name|masterJetty
decl_stmt|;
DECL|field|master
name|TestReplicationHandler
operator|.
name|SolrInstance
name|master
init|=
literal|null
decl_stmt|;
DECL|field|masterClient
name|SolrClient
name|masterClient
decl_stmt|;
DECL|field|CONF_DIR
specifier|private
specifier|static
specifier|final
name|String
name|CONF_DIR
init|=
literal|"solr"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"collection1"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"conf"
operator|+
name|File
operator|.
name|separator
decl_stmt|;
DECL|field|context
specifier|private
specifier|static
name|String
name|context
init|=
literal|"/solr"
decl_stmt|;
DECL|field|addNumberToKeepInRequest
name|boolean
name|addNumberToKeepInRequest
init|=
literal|true
decl_stmt|;
DECL|field|backupKeepParamName
name|String
name|backupKeepParamName
init|=
name|ReplicationHandler
operator|.
name|NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM
decl_stmt|;
DECL|method|createJetty
specifier|private
specifier|static
name|JettySolrRunner
name|createJetty
parameter_list|(
name|TestReplicationHandler
operator|.
name|SolrInstance
name|instance
parameter_list|)
throws|throws
name|Exception
block|{
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|SolrTestCaseJ4
operator|.
name|TEST_HOME
argument_list|()
argument_list|,
literal|"solr.xml"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|instance
operator|.
name|getHomeDir
argument_list|()
argument_list|,
literal|"solr.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|Properties
name|nodeProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|nodeProperties
operator|.
name|setProperty
argument_list|(
literal|"solr.data.dir"
argument_list|,
name|instance
operator|.
name|getDataDir
argument_list|()
argument_list|)
expr_stmt|;
name|JettyConfig
name|jettyConfig
init|=
name|JettyConfig
operator|.
name|builder
argument_list|()
operator|.
name|setContext
argument_list|(
literal|"/solr"
argument_list|)
operator|.
name|setPort
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|JettySolrRunner
name|jetty
init|=
operator|new
name|JettySolrRunner
argument_list|(
name|instance
operator|.
name|getHomeDir
argument_list|()
argument_list|,
name|nodeProperties
argument_list|,
name|jettyConfig
argument_list|)
decl_stmt|;
name|jetty
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|jetty
return|;
block|}
DECL|method|createNewSolrClient
specifier|private
specifier|static
name|SolrClient
name|createNewSolrClient
parameter_list|(
name|int
name|port
parameter_list|)
block|{
try|try
block|{
comment|// setup the client...
specifier|final
name|String
name|baseUrl
init|=
name|buildUrl
argument_list|(
name|port
argument_list|,
name|context
argument_list|)
operator|+
literal|"/"
operator|+
name|DEFAULT_TEST_CORENAME
decl_stmt|;
name|HttpSolrClient
name|client
init|=
name|getHttpSolrClient
argument_list|(
name|baseUrl
argument_list|)
decl_stmt|;
name|client
operator|.
name|setConnectionTimeout
argument_list|(
literal|15000
argument_list|)
expr_stmt|;
name|client
operator|.
name|setSoTimeout
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
return|return
name|client
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|String
name|configFile
init|=
literal|"solrconfig-master1.xml"
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|configFile
operator|=
literal|"solrconfig-master1-keepOneBackup.xml"
expr_stmt|;
name|addNumberToKeepInRequest
operator|=
literal|false
expr_stmt|;
name|backupKeepParamName
operator|=
name|ReplicationHandler
operator|.
name|NUMBER_BACKUPS_TO_KEEP_INIT_PARAM
expr_stmt|;
block|}
name|master
operator|=
operator|new
name|TestReplicationHandler
operator|.
name|SolrInstance
argument_list|(
name|createTempDir
argument_list|(
literal|"solr-instance"
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|,
literal|"master"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|master
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|master
operator|.
name|copyConfigFile
argument_list|(
name|CONF_DIR
operator|+
name|configFile
argument_list|,
literal|"solrconfig.xml"
argument_list|)
expr_stmt|;
name|masterJetty
operator|=
name|createJetty
argument_list|(
name|master
argument_list|)
expr_stmt|;
name|masterClient
operator|=
name|createNewSolrClient
argument_list|(
name|masterJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|masterClient
operator|.
name|close
argument_list|()
expr_stmt|;
name|masterClient
operator|=
literal|null
expr_stmt|;
name|masterJetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|masterJetty
operator|=
literal|null
expr_stmt|;
name|master
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBackupOnCommit
specifier|public
name|void
name|testBackupOnCommit
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Index
name|int
name|nDocs
init|=
name|indexDocs
argument_list|(
name|masterClient
argument_list|)
decl_stmt|;
comment|//Confirm if completed
name|CheckBackupStatus
name|checkBackupStatus
init|=
operator|new
name|CheckBackupStatus
argument_list|(
operator|(
name|HttpSolrClient
operator|)
name|masterClient
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|checkBackupStatus
operator|.
name|success
condition|)
block|{
name|checkBackupStatus
operator|.
name|fetchStatus
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
comment|//Validate
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|master
operator|.
name|getDataDir
argument_list|()
argument_list|)
argument_list|,
literal|"snapshot*"
argument_list|)
init|)
block|{
name|Path
name|snapDir
init|=
name|stream
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|verify
argument_list|(
name|snapDir
argument_list|,
name|nDocs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verify
specifier|private
name|void
name|verify
parameter_list|(
name|Path
name|backup
parameter_list|,
name|int
name|nDocs
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Directory
name|dir
init|=
operator|new
name|SimpleFSDirectory
argument_list|(
name|backup
argument_list|)
init|;
name|IndexReader
name|reader
operator|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
init|)
block|{
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|TopDocs
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nDocs
argument_list|,
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|indexDocs
specifier|protected
specifier|static
name|int
name|indexDocs
parameter_list|(
name|SolrClient
name|masterClient
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|int
name|nDocs
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|masterClient
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nDocs
condition|;
name|i
operator|++
control|)
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"name"
argument_list|,
literal|"name = "
operator|+
name|i
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|masterClient
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
name|nDocs
return|;
block|}
annotation|@
name|Test
DECL|method|doTestBackup
specifier|public
name|void
name|doTestBackup
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|nDocs
init|=
name|indexDocs
argument_list|(
name|masterClient
argument_list|)
decl_stmt|;
name|Path
index|[]
name|snapDir
init|=
operator|new
name|Path
index|[
literal|5
index|]
decl_stmt|;
comment|//One extra for the backup on commit
comment|//First snapshot location
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|master
operator|.
name|getDataDir
argument_list|()
argument_list|)
argument_list|,
literal|"snapshot*"
argument_list|)
init|)
block|{
name|snapDir
index|[
literal|0
index|]
operator|=
name|stream
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|boolean
name|namedBackup
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|String
name|firstBackupTimestamp
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|backupNames
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|namedBackup
condition|)
block|{
name|backupNames
operator|=
operator|new
name|String
index|[
literal|4
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|backupName
init|=
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|namedBackup
condition|)
block|{
if|if
condition|(
name|addNumberToKeepInRequest
condition|)
block|{
name|runBackupCommand
argument_list|(
name|masterJetty
argument_list|,
name|ReplicationHandler
operator|.
name|CMD_BACKUP
argument_list|,
literal|"&"
operator|+
name|backupKeepParamName
operator|+
literal|"=2"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|runBackupCommand
argument_list|(
name|masterJetty
argument_list|,
name|ReplicationHandler
operator|.
name|CMD_BACKUP
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|runBackupCommand
argument_list|(
name|masterJetty
argument_list|,
name|ReplicationHandler
operator|.
name|CMD_BACKUP
argument_list|,
literal|"&name="
operator|+
name|backupName
argument_list|)
expr_stmt|;
name|backupNames
index|[
name|i
index|]
operator|=
name|backupName
expr_stmt|;
block|}
name|CheckBackupStatus
name|checkBackupStatus
init|=
operator|new
name|CheckBackupStatus
argument_list|(
operator|(
name|HttpSolrClient
operator|)
name|masterClient
argument_list|,
name|firstBackupTimestamp
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|checkBackupStatus
operator|.
name|success
condition|)
block|{
name|checkBackupStatus
operator|.
name|fetchStatus
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|firstBackupTimestamp
operator|=
name|checkBackupStatus
operator|.
name|backupTimestamp
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|namedBackup
condition|)
block|{
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|master
operator|.
name|getDataDir
argument_list|()
argument_list|)
argument_list|,
literal|"snapshot*"
argument_list|)
init|)
block|{
name|snapDir
index|[
name|i
operator|+
literal|1
index|]
operator|=
name|stream
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|master
operator|.
name|getDataDir
argument_list|()
argument_list|)
argument_list|,
literal|"snapshot."
operator|+
name|backupName
argument_list|)
init|)
block|{
name|snapDir
index|[
name|i
operator|+
literal|1
index|]
operator|=
name|stream
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
name|verify
argument_list|(
name|snapDir
index|[
name|i
operator|+
literal|1
index|]
argument_list|,
name|nDocs
argument_list|)
expr_stmt|;
block|}
comment|//Test Deletion of named backup
if|if
condition|(
name|namedBackup
condition|)
block|{
name|testDeleteNamedBackup
argument_list|(
name|backupNames
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//5 backups got created. 4 explicitly and one because a commit was called.
comment|// Only the last two should still exist.
name|int
name|count
init|=
literal|0
decl_stmt|;
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|master
operator|.
name|getDataDir
argument_list|()
argument_list|)
argument_list|,
literal|"snapshot*"
argument_list|)
init|)
block|{
name|Iterator
argument_list|<
name|Path
argument_list|>
name|iter
init|=
name|stream
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
comment|//There will be 2 backups, otherwise 1
if|if
condition|(
name|backupKeepParamName
operator|.
name|equals
argument_list|(
name|ReplicationHandler
operator|.
name|NUMBER_BACKUPS_TO_KEEP_REQUEST_PARAM
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|snapDir
index|[
literal|0
index|]
argument_list|)
operator|||
name|Files
operator|.
name|exists
argument_list|(
name|snapDir
index|[
literal|1
index|]
argument_list|)
operator|||
name|Files
operator|.
name|exists
argument_list|(
name|snapDir
index|[
literal|2
index|]
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Backup should have been cleaned up because "
operator|+
name|backupKeepParamName
operator|+
literal|" was set to 2."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|snapDir
index|[
literal|0
index|]
argument_list|)
operator|||
name|Files
operator|.
name|exists
argument_list|(
name|snapDir
index|[
literal|1
index|]
argument_list|)
operator|||
name|Files
operator|.
name|exists
argument_list|(
name|snapDir
index|[
literal|2
index|]
argument_list|)
operator|||
name|Files
operator|.
name|exists
argument_list|(
name|snapDir
index|[
literal|3
index|]
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Backup should have been cleaned up because "
operator|+
name|backupKeepParamName
operator|+
literal|" was set to 1."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testDeleteNamedBackup
specifier|private
name|void
name|testDeleteNamedBackup
parameter_list|(
name|String
name|backupNames
index|[]
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|String
name|lastTimestamp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|runBackupCommand
argument_list|(
name|masterJetty
argument_list|,
name|ReplicationHandler
operator|.
name|CMD_DELETE_BACKUP
argument_list|,
literal|"&name="
operator|+
name|backupNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|CheckDeleteBackupStatus
name|checkDeleteBackupStatus
init|=
operator|new
name|CheckDeleteBackupStatus
argument_list|(
name|backupNames
index|[
name|i
index|]
argument_list|,
name|lastTimestamp
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|boolean
name|success
init|=
name|checkDeleteBackupStatus
operator|.
name|fetchStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|lastTimestamp
operator|=
name|checkDeleteBackupStatus
operator|.
name|lastTimestamp
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|//make the timestamp change
block|}
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|runBackupCommand
specifier|public
specifier|static
name|void
name|runBackupCommand
parameter_list|(
name|JettySolrRunner
name|masterJetty
parameter_list|,
name|String
name|cmd
parameter_list|,
name|String
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|masterUrl
init|=
name|buildUrl
argument_list|(
name|masterJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|,
name|context
argument_list|)
operator|+
literal|"/"
operator|+
name|DEFAULT_TEST_CORENAME
operator|+
name|ReplicationHandler
operator|.
name|PATH
operator|+
literal|"?command="
operator|+
name|cmd
operator|+
name|params
decl_stmt|;
name|InputStream
name|stream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|masterUrl
argument_list|)
decl_stmt|;
name|stream
operator|=
name|url
operator|.
name|openStream
argument_list|()
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CheckDeleteBackupStatus
specifier|private
class|class
name|CheckDeleteBackupStatus
block|{
DECL|field|response
name|String
name|response
init|=
literal|null
decl_stmt|;
DECL|field|backupName
specifier|private
name|String
name|backupName
decl_stmt|;
DECL|field|p
specifier|final
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"<str name=\"snapshotDeletedAt\">(.*?)</str>"
argument_list|)
decl_stmt|;
DECL|field|lastTimestamp
name|String
name|lastTimestamp
decl_stmt|;
DECL|method|CheckDeleteBackupStatus
specifier|private
name|CheckDeleteBackupStatus
parameter_list|(
name|String
name|backupName
parameter_list|,
name|String
name|lastTimestamp
parameter_list|)
block|{
name|this
operator|.
name|backupName
operator|=
name|backupName
expr_stmt|;
name|this
operator|.
name|lastTimestamp
operator|=
name|lastTimestamp
expr_stmt|;
block|}
DECL|method|fetchStatus
specifier|public
name|boolean
name|fetchStatus
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|masterUrl
init|=
name|buildUrl
argument_list|(
name|masterJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|,
name|context
argument_list|)
operator|+
literal|"/"
operator|+
name|DEFAULT_TEST_CORENAME
operator|+
name|ReplicationHandler
operator|.
name|PATH
operator|+
literal|"?command="
operator|+
name|ReplicationHandler
operator|.
name|CMD_DETAILS
decl_stmt|;
name|URL
name|url
decl_stmt|;
name|InputStream
name|stream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|url
operator|=
operator|new
name|URL
argument_list|(
name|masterUrl
argument_list|)
expr_stmt|;
name|stream
operator|=
name|url
operator|.
name|openStream
argument_list|()
expr_stmt|;
name|response
operator|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|stream
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|contains
argument_list|(
literal|"<str name=\"status\">success</str>"
argument_list|)
condition|)
block|{
name|Matcher
name|m
init|=
name|p
operator|.
name|matcher
argument_list|(
name|response
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
operator|&&
operator|(
name|lastTimestamp
operator|==
literal|null
operator|||
operator|!
name|lastTimestamp
operator|.
name|equals
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|lastTimestamp
operator|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|response
operator|.
name|contains
argument_list|(
literal|"<str name=\"status\">Unable to delete snapshot: "
operator|+
name|backupName
operator|+
literal|"</str>"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class
end_unit
