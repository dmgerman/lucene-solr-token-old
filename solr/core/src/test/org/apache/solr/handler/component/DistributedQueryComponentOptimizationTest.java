begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractFullDistribZkTestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ShardParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_comment
comment|/**  * Test for QueryComponent's distributed querying optimization.  * If the "fl" param is just "id" or just "id,score", all document data to return is already fetched by STAGE_EXECUTE_QUERY.  * The second STAGE_GET_FIELDS query is completely unnecessary.  * Eliminating that 2nd HTTP request can make a big difference in overall performance.  *  * @see QueryComponent  */
end_comment
begin_class
DECL|class|DistributedQueryComponentOptimizationTest
specifier|public
class|class
name|DistributedQueryComponentOptimizationTest
extends|extends
name|AbstractFullDistribZkTestBase
block|{
DECL|method|DistributedQueryComponentOptimizationTest
specifier|public
name|DistributedQueryComponentOptimizationTest
parameter_list|()
block|{
name|stress
operator|=
literal|0
expr_stmt|;
name|schemaString
operator|=
literal|"schema-custom-field.xml"
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSolrXml
specifier|protected
name|String
name|getSolrXml
parameter_list|()
block|{
return|return
literal|"solr-trackingshardhandler.xml"
return|;
block|}
annotation|@
name|Test
annotation|@
name|ShardsFixed
argument_list|(
name|num
operator|=
literal|3
argument_list|)
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|waitForThingsToLevelOut
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
literal|"a"
argument_list|,
literal|"test_sS"
argument_list|,
literal|"21"
argument_list|,
literal|"payload"
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x12
block|,
literal|0x62
block|,
literal|0x15
block|}
argument_list|)
argument_list|,
comment|//  2
comment|// quick check to prove "*" dynamicField hasn't been broken by somebody mucking with schema
literal|"asdfasdf_field_should_match_catchall_dynamic_field_adsfasdf"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"text"
argument_list|,
literal|"b"
argument_list|,
literal|"test_sS"
argument_list|,
literal|"22"
argument_list|,
literal|"payload"
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x25
block|,
literal|0x21
block|,
literal|0x16
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|//  5
name|index
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"text"
argument_list|,
literal|"a"
argument_list|,
literal|"test_sS"
argument_list|,
literal|"23"
argument_list|,
literal|"payload"
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x35
block|,
literal|0x32
block|,
literal|0x58
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|//  8
name|index
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"text"
argument_list|,
literal|"b"
argument_list|,
literal|"test_sS"
argument_list|,
literal|"24"
argument_list|,
literal|"payload"
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x25
block|,
literal|0x21
block|,
literal|0x15
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|//  4
name|index
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"text"
argument_list|,
literal|"a"
argument_list|,
literal|"test_sS"
argument_list|,
literal|"25"
argument_list|,
literal|"payload"
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x35
block|,
literal|0x35
block|,
literal|0x10
block|,
literal|0x00
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|//  9
name|index
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"text"
argument_list|,
literal|"c"
argument_list|,
literal|"test_sS"
argument_list|,
literal|"26"
argument_list|,
literal|"payload"
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x1a
block|,
literal|0x2b
block|,
literal|0x3c
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x03
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|//  3
name|index
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"text"
argument_list|,
literal|"c"
argument_list|,
literal|"test_sS"
argument_list|,
literal|"27"
argument_list|,
literal|"payload"
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x00
block|,
literal|0x3c
block|,
literal|0x73
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|//  1
name|index
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"text"
argument_list|,
literal|"c"
argument_list|,
literal|"test_sS"
argument_list|,
literal|"28"
argument_list|,
literal|"payload"
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x59
block|,
literal|0x2d
block|,
literal|0x4d
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// 11
name|index
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"text"
argument_list|,
literal|"a"
argument_list|,
literal|"test_sS"
argument_list|,
literal|"29"
argument_list|,
literal|"payload"
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x39
block|,
literal|0x79
block|,
literal|0x7a
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// 10
name|index
argument_list|(
name|id
argument_list|,
literal|"10"
argument_list|,
literal|"text"
argument_list|,
literal|"b"
argument_list|,
literal|"test_sS"
argument_list|,
literal|"30"
argument_list|,
literal|"payload"
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x31
block|,
literal|0x39
block|,
literal|0x7c
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|//  6
name|index
argument_list|(
name|id
argument_list|,
literal|"11"
argument_list|,
literal|"text"
argument_list|,
literal|"d"
argument_list|,
literal|"test_sS"
argument_list|,
literal|"31"
argument_list|,
literal|"payload"
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xff
block|,
operator|(
name|byte
operator|)
literal|0xaf
block|,
operator|(
name|byte
operator|)
literal|0x9c
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// 13
name|index
argument_list|(
name|id
argument_list|,
literal|"12"
argument_list|,
literal|"text"
argument_list|,
literal|"d"
argument_list|,
literal|"test_sS"
argument_list|,
literal|"32"
argument_list|,
literal|"payload"
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x34
block|,
operator|(
name|byte
operator|)
literal|0xdd
block|,
literal|0x4d
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|//  7
name|index
argument_list|(
name|id
argument_list|,
literal|"13"
argument_list|,
literal|"text"
argument_list|,
literal|"d"
argument_list|,
literal|"test_sS"
argument_list|,
literal|"33"
argument_list|,
literal|"payload"
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0x80
block|,
literal|0x11
block|,
literal|0x33
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// 12
name|commit
argument_list|()
expr_stmt|;
name|QueryResponse
name|rsp
decl_stmt|;
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,test_sS,score"
argument_list|,
literal|"sort"
argument_list|,
literal|"payload asc"
argument_list|,
literal|"rows"
argument_list|,
literal|"20"
argument_list|)
expr_stmt|;
name|assertFieldValues
argument_list|(
name|rsp
operator|.
name|getResults
argument_list|()
argument_list|,
name|id
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|,
literal|12
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|,
literal|9
argument_list|,
literal|8
argument_list|,
literal|13
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|assertFieldValues
argument_list|(
name|rsp
operator|.
name|getResults
argument_list|()
argument_list|,
literal|"test_sS"
argument_list|,
literal|"27"
argument_list|,
literal|"21"
argument_list|,
literal|"26"
argument_list|,
literal|"24"
argument_list|,
literal|"22"
argument_list|,
literal|"30"
argument_list|,
literal|"32"
argument_list|,
literal|"23"
argument_list|,
literal|"25"
argument_list|,
literal|"29"
argument_list|,
literal|"28"
argument_list|,
literal|"33"
argument_list|,
literal|"31"
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|,
literal|"sort"
argument_list|,
literal|"payload desc"
argument_list|,
literal|"rows"
argument_list|,
literal|"20"
argument_list|)
expr_stmt|;
name|assertFieldValues
argument_list|(
name|rsp
operator|.
name|getResults
argument_list|()
argument_list|,
name|id
argument_list|,
literal|11
argument_list|,
literal|13
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|12
argument_list|,
literal|10
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|,
literal|7
argument_list|)
expr_stmt|;
comment|// works with just fl=id as well
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"sort"
argument_list|,
literal|"payload desc"
argument_list|,
literal|"rows"
argument_list|,
literal|"20"
argument_list|)
expr_stmt|;
name|assertFieldValues
argument_list|(
name|rsp
operator|.
name|getResults
argument_list|()
argument_list|,
name|id
argument_list|,
literal|11
argument_list|,
literal|13
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|12
argument_list|,
literal|10
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|,
literal|"sort"
argument_list|,
literal|"payload asc"
argument_list|,
literal|"rows"
argument_list|,
literal|"20"
argument_list|)
expr_stmt|;
name|assertFieldValues
argument_list|(
name|rsp
operator|.
name|getResults
argument_list|()
argument_list|,
name|id
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|,
literal|12
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|,
literal|9
argument_list|,
literal|8
argument_list|,
literal|13
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,test_sS,score"
argument_list|,
literal|"sort"
argument_list|,
literal|"payload asc"
argument_list|,
literal|"rows"
argument_list|,
literal|"20"
argument_list|,
literal|"distrib.singlePass"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|assertFieldValues
argument_list|(
name|rsp
operator|.
name|getResults
argument_list|()
argument_list|,
name|id
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|,
literal|12
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|,
literal|9
argument_list|,
literal|8
argument_list|,
literal|13
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|assertFieldValues
argument_list|(
name|rsp
operator|.
name|getResults
argument_list|()
argument_list|,
literal|"test_sS"
argument_list|,
literal|"27"
argument_list|,
literal|"21"
argument_list|,
literal|"26"
argument_list|,
literal|"24"
argument_list|,
literal|"22"
argument_list|,
literal|"30"
argument_list|,
literal|"32"
argument_list|,
literal|"23"
argument_list|,
literal|"25"
argument_list|,
literal|"29"
argument_list|,
literal|"28"
argument_list|,
literal|"33"
argument_list|,
literal|"31"
argument_list|)
expr_stmt|;
name|QueryResponse
name|nonDistribRsp
init|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,test_sS,score"
argument_list|,
literal|"sort"
argument_list|,
literal|"payload asc"
argument_list|,
literal|"rows"
argument_list|,
literal|"20"
argument_list|)
decl_stmt|;
name|compareResponses
argument_list|(
name|rsp
argument_list|,
name|nonDistribRsp
argument_list|)
expr_stmt|;
comment|// make sure distrib and distrib.singlePass return the same thing
name|nonDistribRsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"score"
argument_list|,
literal|"sort"
argument_list|,
literal|"payload asc"
argument_list|,
literal|"rows"
argument_list|,
literal|"20"
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"score"
argument_list|,
literal|"sort"
argument_list|,
literal|"payload asc"
argument_list|,
literal|"rows"
argument_list|,
literal|"20"
argument_list|,
literal|"distrib.singlePass"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|compareResponses
argument_list|(
name|rsp
argument_list|,
name|nonDistribRsp
argument_list|)
expr_stmt|;
comment|// make sure distrib and distrib.singlePass return the same thing
comment|// verify that the optimization actually works
name|queryWithAsserts
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"sort"
argument_list|,
literal|"payload desc"
argument_list|,
literal|"rows"
argument_list|,
literal|"20"
argument_list|)
expr_stmt|;
comment|// id only is optimized by default
name|queryWithAsserts
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|,
literal|"sort"
argument_list|,
literal|"payload desc"
argument_list|,
literal|"rows"
argument_list|,
literal|"20"
argument_list|)
expr_stmt|;
comment|// id,score only is optimized by default
name|queryWithAsserts
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"score"
argument_list|,
literal|"sort"
argument_list|,
literal|"payload asc"
argument_list|,
literal|"rows"
argument_list|,
literal|"20"
argument_list|,
literal|"distrib.singlePass"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// SOLR-6545, wild card field list
name|index
argument_list|(
name|id
argument_list|,
literal|"19"
argument_list|,
literal|"text"
argument_list|,
literal|"d"
argument_list|,
literal|"cat_a_sS"
argument_list|,
literal|"1"
argument_list|,
literal|"dynamic"
argument_list|,
literal|"2"
argument_list|,
literal|"payload"
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0x80
block|,
literal|0x11
block|,
literal|0x34
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|nonDistribRsp
operator|=
name|queryWithAsserts
argument_list|(
literal|"q"
argument_list|,
literal|"id:19"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,*a_sS"
argument_list|,
literal|"sort"
argument_list|,
literal|"payload asc"
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|queryWithAsserts
argument_list|(
literal|"q"
argument_list|,
literal|"id:19"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,*a_sS"
argument_list|,
literal|"sort"
argument_list|,
literal|"payload asc"
argument_list|,
literal|"distrib.singlePass"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|assertFieldValues
argument_list|(
name|nonDistribRsp
operator|.
name|getResults
argument_list|()
argument_list|,
literal|"id"
argument_list|,
literal|19
argument_list|)
expr_stmt|;
name|assertFieldValues
argument_list|(
name|rsp
operator|.
name|getResults
argument_list|()
argument_list|,
literal|"id"
argument_list|,
literal|19
argument_list|)
expr_stmt|;
name|nonDistribRsp
operator|=
name|queryWithAsserts
argument_list|(
literal|"q"
argument_list|,
literal|"id:19"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,dynamic,cat*"
argument_list|,
literal|"sort"
argument_list|,
literal|"payload asc"
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|queryWithAsserts
argument_list|(
literal|"q"
argument_list|,
literal|"id:19"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,dynamic,cat*"
argument_list|,
literal|"sort"
argument_list|,
literal|"payload asc"
argument_list|,
literal|"distrib.singlePass"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|assertFieldValues
argument_list|(
name|nonDistribRsp
operator|.
name|getResults
argument_list|()
argument_list|,
literal|"id"
argument_list|,
literal|19
argument_list|)
expr_stmt|;
name|assertFieldValues
argument_list|(
name|rsp
operator|.
name|getResults
argument_list|()
argument_list|,
literal|"id"
argument_list|,
literal|19
argument_list|)
expr_stmt|;
name|queryWithAsserts
argument_list|(
literal|"q"
argument_list|,
literal|"id:19"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,*a_sS"
argument_list|,
literal|"sort"
argument_list|,
literal|"payload asc"
argument_list|,
literal|"distrib.singlePass"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|queryWithAsserts
argument_list|(
literal|"q"
argument_list|,
literal|"id:19"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,dynamic,cat*"
argument_list|,
literal|"sort"
argument_list|,
literal|"payload asc"
argument_list|,
literal|"distrib.singlePass"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// see SOLR-6795, distrib.singlePass=true would return score even when not asked for
name|handle
operator|.
name|clear
argument_list|()
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"timestamp"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"_version_"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
comment|// we don't to compare maxScore because most distributed requests return it anyway (just because they have score already)
name|handle
operator|.
name|put
argument_list|(
literal|"maxScore"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
comment|// this trips the queryWithAsserts function because it uses a custom parser, so just query directly
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"{!func}id"
argument_list|,
name|ShardParams
operator|.
name|DISTRIB_SINGLE_PASS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// fix for a bug where not all fields are returned if using multiple fl parameters, see SOLR-6796
name|queryWithAsserts
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"fl"
argument_list|,
literal|"dynamic"
argument_list|,
literal|"sort"
argument_list|,
literal|"payload desc"
argument_list|,
name|ShardParams
operator|.
name|DISTRIB_SINGLE_PASS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// missing fl with sort
name|queryWithAsserts
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"payload desc"
argument_list|,
name|ShardParams
operator|.
name|DISTRIB_SINGLE_PASS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|queryWithAsserts
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"payload desc"
argument_list|)
expr_stmt|;
comment|// fl=*
name|queryWithAsserts
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"*"
argument_list|,
literal|"sort"
argument_list|,
literal|"payload desc"
argument_list|,
name|ShardParams
operator|.
name|DISTRIB_SINGLE_PASS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|queryWithAsserts
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"*"
argument_list|,
literal|"sort"
argument_list|,
literal|"payload desc"
argument_list|)
expr_stmt|;
comment|// fl=*,score
name|queryWithAsserts
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"sort"
argument_list|,
literal|"payload desc"
argument_list|,
name|ShardParams
operator|.
name|DISTRIB_SINGLE_PASS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|queryWithAsserts
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"sort"
argument_list|,
literal|"payload desc"
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test now asserts that every distrib.singlePass query:    *<ol>    *<li>Makes exactly 'numSlices' number of shard requests</li>    *<li>Makes no GET_FIELDS requests</li>    *<li>Must request the unique key field from shards</li>    *<li>Must request the score if 'fl' has score or sort by score is requested</li>    *<li>Requests all fields that are present in 'fl' param</li>    *</ol>    *<p>    * It also asserts that every regular two phase distribtued search:    *<ol>    *<li>Makes at most 2 * 'numSlices' number of shard requests</li>    *<li>Must request the unique key field from shards</li>    *<li>Must request the score if 'fl' has score or sort by score is requested</li>    *<li>Requests no fields other than id and score in GET_TOP_IDS request</li>    *<li>Requests exactly the fields that are present in 'fl' param in GET_FIELDS request and no others</li>    *</ol>    *<p>    * and also asserts that each query which requests id or score or both behaves exactly like a single pass query    */
DECL|method|queryWithAsserts
specifier|private
name|QueryResponse
name|queryWithAsserts
parameter_list|(
name|Object
modifier|...
name|q
parameter_list|)
throws|throws
name|Exception
block|{
name|TrackingShardHandlerFactory
operator|.
name|RequestTrackingQueue
name|trackingQueue
init|=
operator|new
name|TrackingShardHandlerFactory
operator|.
name|RequestTrackingQueue
argument_list|()
decl_stmt|;
comment|// the jettys doesn't include the control jetty which is exactly what we need here
name|TrackingShardHandlerFactory
operator|.
name|setTrackingQueue
argument_list|(
name|jettys
argument_list|,
name|trackingQueue
argument_list|)
expr_stmt|;
comment|// let's add debug=track to such requests so we can use DebugComponent responses for assertions
name|Object
index|[]
name|qq
init|=
operator|new
name|Object
index|[
name|q
operator|.
name|length
operator|+
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|q
argument_list|,
literal|0
argument_list|,
name|qq
argument_list|,
literal|0
argument_list|,
name|q
operator|.
name|length
argument_list|)
expr_stmt|;
name|qq
index|[
name|qq
operator|.
name|length
operator|-
literal|2
index|]
operator|=
literal|"debug"
expr_stmt|;
name|qq
index|[
name|qq
operator|.
name|length
operator|-
literal|1
index|]
operator|=
literal|"track"
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"debug"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|QueryResponse
name|response
init|=
name|query
argument_list|(
name|qq
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|TrackingShardHandlerFactory
operator|.
name|ShardRequestAndParams
argument_list|>
argument_list|>
name|requests
init|=
name|trackingQueue
operator|.
name|getAllRequests
argument_list|()
decl_stmt|;
name|int
name|numRequests
init|=
name|getNumRequests
argument_list|(
name|requests
argument_list|)
decl_stmt|;
name|boolean
name|distribSinglePass
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|fls
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|sortFields
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|q
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
if|if
condition|(
name|ShardParams
operator|.
name|DISTRIB_SINGLE_PASS
operator|.
name|equals
argument_list|(
name|q
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
operator|&&
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|q
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"distrib.singlePass=true made more requests than number of shards"
argument_list|,
name|numRequests
operator|==
name|sliceCount
argument_list|)
expr_stmt|;
name|distribSinglePass
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|CommonParams
operator|.
name|FL
operator|.
name|equals
argument_list|(
name|q
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|fls
operator|.
name|addAll
argument_list|(
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|q
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|,
literal|','
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|CommonParams
operator|.
name|SORT
operator|.
name|equals
argument_list|(
name|q
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|val
init|=
name|q
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// take care of asc/desc decorators
name|sortFields
operator|.
name|addAll
argument_list|(
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|val
argument_list|,
literal|' '
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|','
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|idScoreFields
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|idScoreFields
operator|.
name|add
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
comment|// id is always requested in GET_TOP_IDS phase
comment|// score is optional, requested only if sorted by score
if|if
condition|(
name|fls
operator|.
name|contains
argument_list|(
literal|"score"
argument_list|)
operator|||
name|sortFields
operator|.
name|contains
argument_list|(
literal|"score"
argument_list|)
condition|)
name|idScoreFields
operator|.
name|add
argument_list|(
literal|"score"
argument_list|)
expr_stmt|;
if|if
condition|(
name|idScoreFields
operator|.
name|containsAll
argument_list|(
name|fls
argument_list|)
operator|&&
operator|!
name|fls
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// if id and/or score are the only fields being requested then we implicitly turn on distribSinglePass=true
name|distribSinglePass
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|distribSinglePass
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|debugMap
init|=
name|response
operator|.
name|getDebugMap
argument_list|()
decl_stmt|;
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|track
init|=
operator|(
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
operator|)
name|debugMap
operator|.
name|get
argument_list|(
literal|"track"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|track
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|track
operator|.
name|get
argument_list|(
literal|"EXECUTE_QUERY"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"A single pass request should not have a GET_FIELDS phase"
argument_list|,
name|track
operator|.
name|get
argument_list|(
literal|"GET_FIELDS"
argument_list|)
argument_list|)
expr_stmt|;
comment|// all fields should be requested in one go but even if 'id' is not requested by user
comment|// it must still be fetched in this phase to merge correctly
name|Set
argument_list|<
name|String
argument_list|>
name|reqAndIdScoreFields
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|fls
argument_list|)
decl_stmt|;
name|reqAndIdScoreFields
operator|.
name|addAll
argument_list|(
name|idScoreFields
argument_list|)
expr_stmt|;
name|assertParamsEquals
argument_list|(
name|trackingQueue
argument_list|,
name|DEFAULT_COLLECTION
argument_list|,
name|SHARD1
argument_list|,
name|CommonParams
operator|.
name|FL
argument_list|,
name|ShardRequest
operator|.
name|PURPOSE_GET_TOP_IDS
argument_list|,
name|reqAndIdScoreFields
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|reqAndIdScoreFields
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertParamsEquals
argument_list|(
name|trackingQueue
argument_list|,
name|DEFAULT_COLLECTION
argument_list|,
name|SHARD2
argument_list|,
name|CommonParams
operator|.
name|FL
argument_list|,
name|ShardRequest
operator|.
name|PURPOSE_GET_TOP_IDS
argument_list|,
name|reqAndIdScoreFields
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|reqAndIdScoreFields
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we are assuming there are facet refinement or distributed idf requests here
name|assertTrue
argument_list|(
literal|"distrib.singlePass=false made more requests than 2 * number of shards."
operator|+
literal|" Actual: "
operator|+
name|numRequests
operator|+
literal|" but expected<= "
operator|+
name|sliceCount
operator|*
literal|2
argument_list|,
name|numRequests
operator|<=
name|sliceCount
operator|*
literal|2
argument_list|)
expr_stmt|;
comment|// only id and/or score should be requested
name|assertParamsEquals
argument_list|(
name|trackingQueue
argument_list|,
name|DEFAULT_COLLECTION
argument_list|,
name|SHARD1
argument_list|,
name|CommonParams
operator|.
name|FL
argument_list|,
name|ShardRequest
operator|.
name|PURPOSE_GET_TOP_IDS
argument_list|,
name|idScoreFields
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|idScoreFields
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertParamsEquals
argument_list|(
name|trackingQueue
argument_list|,
name|DEFAULT_COLLECTION
argument_list|,
name|SHARD2
argument_list|,
name|CommonParams
operator|.
name|FL
argument_list|,
name|ShardRequest
operator|.
name|PURPOSE_GET_TOP_IDS
argument_list|,
name|idScoreFields
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|idScoreFields
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// only originally requested fields must be requested in GET_FIELDS request
name|assertParamsEquals
argument_list|(
name|trackingQueue
argument_list|,
name|DEFAULT_COLLECTION
argument_list|,
name|SHARD1
argument_list|,
name|CommonParams
operator|.
name|FL
argument_list|,
name|ShardRequest
operator|.
name|PURPOSE_GET_FIELDS
argument_list|,
name|fls
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|fls
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertParamsEquals
argument_list|(
name|trackingQueue
argument_list|,
name|DEFAULT_COLLECTION
argument_list|,
name|SHARD2
argument_list|,
name|CommonParams
operator|.
name|FL
argument_list|,
name|ShardRequest
operator|.
name|PURPOSE_GET_FIELDS
argument_list|,
name|fls
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|fls
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
DECL|method|getNumRequests
specifier|private
name|int
name|getNumRequests
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|TrackingShardHandlerFactory
operator|.
name|ShardRequestAndParams
argument_list|>
argument_list|>
name|requests
parameter_list|)
block|{
name|int
name|beforeNumRequests
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|TrackingShardHandlerFactory
operator|.
name|ShardRequestAndParams
argument_list|>
argument_list|>
name|entry
range|:
name|requests
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|beforeNumRequests
operator|+=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|beforeNumRequests
return|;
block|}
DECL|method|assertParamsEquals
specifier|private
name|void
name|assertParamsEquals
parameter_list|(
name|TrackingShardHandlerFactory
operator|.
name|RequestTrackingQueue
name|trackingQueue
parameter_list|,
name|String
name|collection
parameter_list|,
name|String
name|shard
parameter_list|,
name|String
name|paramName
parameter_list|,
name|int
name|purpose
parameter_list|,
name|String
modifier|...
name|values
parameter_list|)
block|{
name|TrackingShardHandlerFactory
operator|.
name|ShardRequestAndParams
name|getByIdRequest
init|=
name|trackingQueue
operator|.
name|getShardRequestByPurpose
argument_list|(
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
name|collection
argument_list|,
name|shard
argument_list|,
name|purpose
argument_list|)
decl_stmt|;
name|assertParamsEquals
argument_list|(
name|getByIdRequest
argument_list|,
name|paramName
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
DECL|method|assertParamsEquals
specifier|private
name|void
name|assertParamsEquals
parameter_list|(
name|TrackingShardHandlerFactory
operator|.
name|ShardRequestAndParams
name|requestAndParams
parameter_list|,
name|String
name|paramName
parameter_list|,
name|String
modifier|...
name|values
parameter_list|)
block|{
if|if
condition|(
name|requestAndParams
operator|==
literal|null
condition|)
return|return;
name|int
name|expectedCount
init|=
name|values
operator|.
name|length
decl_stmt|;
name|String
index|[]
name|params
init|=
name|requestAndParams
operator|.
name|params
operator|.
name|getParams
argument_list|(
name|paramName
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedCount
operator|>
literal|0
operator|&&
operator|(
name|params
operator|==
literal|null
operator|||
name|params
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
block|{
name|fail
argument_list|(
literal|"Expected non-zero number of '"
operator|+
name|paramName
operator|+
literal|"' parameters in request"
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|requestedFields
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|p
range|:
name|params
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|p
argument_list|,
literal|','
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|list
control|)
block|{
comment|// make sure field names aren't duplicated in the parameters
name|assertTrue
argument_list|(
literal|"Field name "
operator|+
name|s
operator|+
literal|" was requested multiple times: params = "
operator|+
name|requestAndParams
operator|.
name|params
argument_list|,
name|requestedFields
operator|.
name|add
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// if a wildcard ALL field is requested then we don't need to match exact number of params
if|if
condition|(
operator|!
name|requestedFields
operator|.
name|contains
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Number of requested fields do not match with expectations"
argument_list|,
name|expectedCount
argument_list|,
name|requestedFields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|field
range|:
name|values
control|)
block|{
if|if
condition|(
operator|!
name|requestedFields
operator|.
name|contains
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Field "
operator|+
name|field
operator|+
literal|" not found in param: "
operator|+
name|paramName
operator|+
literal|" request had "
operator|+
name|paramName
operator|+
literal|"="
operator|+
name|requestedFields
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class
end_unit
