begin_unit
begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreDescriptor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|spelling
operator|.
name|suggest
operator|.
name|SuggesterParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|SuggestComponentTest
specifier|public
class|class
name|SuggestComponentTest
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|rh
specifier|private
specifier|static
specifier|final
name|String
name|rh
init|=
literal|"/suggest"
decl_stmt|;
DECL|field|cc
specifier|private
specifier|static
name|CoreContainer
name|cc
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-suggestercomponent.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|// id, cat, price, weight
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|,
literal|"cat"
argument_list|,
literal|"This is a title"
argument_list|,
literal|"price"
argument_list|,
literal|"5"
argument_list|,
literal|"weight"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"cat"
argument_list|,
literal|"This is another title"
argument_list|,
literal|"price"
argument_list|,
literal|"10"
argument_list|,
literal|"weight"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"cat"
argument_list|,
literal|"Yet another"
argument_list|,
literal|"price"
argument_list|,
literal|"15"
argument_list|,
literal|"weight"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"cat"
argument_list|,
literal|"Yet another title"
argument_list|,
literal|"price"
argument_list|,
literal|"20"
argument_list|,
literal|"weight"
argument_list|,
literal|"20"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"cat"
argument_list|,
literal|"suggestions for suggest"
argument_list|,
literal|"price"
argument_list|,
literal|"25"
argument_list|,
literal|"weight"
argument_list|,
literal|"20"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"cat"
argument_list|,
literal|"Red fox"
argument_list|,
literal|"price"
argument_list|,
literal|"30"
argument_list|,
literal|"weight"
argument_list|,
literal|"20"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"cat"
argument_list|,
literal|"Rad fox"
argument_list|,
literal|"price"
argument_list|,
literal|"35"
argument_list|,
literal|"weight"
argument_list|,
literal|"30"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"cat"
argument_list|,
literal|"example data"
argument_list|,
literal|"price"
argument_list|,
literal|"40"
argument_list|,
literal|"weight"
argument_list|,
literal|"30"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"cat"
argument_list|,
literal|"example inputdata"
argument_list|,
literal|"price"
argument_list|,
literal|"45"
argument_list|,
literal|"weight"
argument_list|,
literal|"30"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|,
literal|"cat"
argument_list|,
literal|"blah in blah"
argument_list|,
literal|"price"
argument_list|,
literal|"50"
argument_list|,
literal|"weight"
argument_list|,
literal|"40"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|,
literal|"cat"
argument_list|,
literal|"another blah in blah"
argument_list|,
literal|"price"
argument_list|,
literal|"55"
argument_list|,
literal|"weight"
argument_list|,
literal|"40"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
operator|(
name|commit
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|waitForWarming
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|delQ
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
operator|(
name|commit
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|waitForWarming
argument_list|()
expr_stmt|;
comment|// rebuild suggesters with empty index
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_BUILD_ALL
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"//str[@name='command'][.='buildAll']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDocumentBased
specifier|public
name|void
name|testDocumentBased
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_DICT
argument_list|,
literal|"suggest_fuzzy_doc_dict"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_BUILD
argument_list|,
literal|"true"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_Q
argument_list|,
literal|"exampel"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_COUNT
argument_list|,
literal|"5"
argument_list|)
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='exampel']/int[@name='numFound'][.='2']"
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[1]/str[@name='term'][.='example inputdata']"
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[1]/long[@name='weight'][.='45']"
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[2]/str[@name='term'][.='example data']"
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[2]/long[@name='weight'][.='40']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_DICT
argument_list|,
literal|"suggest_fuzzy_doc_dict"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_BUILD
argument_list|,
literal|"true"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_Q
argument_list|,
literal|"Rad"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_COUNT
argument_list|,
literal|"5"
argument_list|)
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='Rad']/int[@name='numFound'][.='2']"
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='Rad']/arr[@name='suggestions']/lst[1]/str[@name='term'][.='Rad fox']"
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='Rad']/arr[@name='suggestions']/lst[1]/long[@name='weight'][.='35']"
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='Rad']/arr[@name='suggestions']/lst[2]/str[@name='term'][.='Red fox']"
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='Rad']/arr[@name='suggestions']/lst[2]/long[@name='weight'][.='30']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExpressionBased
specifier|public
name|void
name|testExpressionBased
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_DICT
argument_list|,
literal|"suggest_fuzzy_doc_expr_dict"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_BUILD
argument_list|,
literal|"true"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_Q
argument_list|,
literal|"exampel"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_COUNT
argument_list|,
literal|"5"
argument_list|)
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_expr_dict']/lst[@name='exampel']/int[@name='numFound'][.='2']"
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_expr_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[1]/str[@name='term'][.='example inputdata']"
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_expr_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[1]/long[@name='weight'][.='120']"
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_expr_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[2]/str[@name='term'][.='example data']"
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_expr_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[2]/long[@name='weight'][.='110']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFileBased
specifier|public
name|void
name|testFileBased
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_DICT
argument_list|,
literal|"suggest_fuzzy_file_based"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_BUILD
argument_list|,
literal|"true"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_Q
argument_list|,
literal|"chn"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_COUNT
argument_list|,
literal|"2"
argument_list|)
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='suggest_fuzzy_file_based']/lst[@name='chn']/int[@name='numFound'][.='2']"
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='suggest_fuzzy_file_based']/lst[@name='chn']/arr[@name='suggestions']/lst[1]/str[@name='term'][.='chance']"
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='suggest_fuzzy_file_based']/lst[@name='chn']/arr[@name='suggestions']/lst[1]/long[@name='weight'][.='1']"
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='suggest_fuzzy_file_based']/lst[@name='chn']/arr[@name='suggestions']/lst[2]/str[@name='term'][.='change']"
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='suggest_fuzzy_file_based']/lst[@name='chn']/arr[@name='suggestions']/lst[2]/long[@name='weight'][.='1']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiSuggester
specifier|public
name|void
name|testMultiSuggester
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_DICT
argument_list|,
literal|"suggest_fuzzy_doc_dict"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_DICT
argument_list|,
literal|"suggest_fuzzy_doc_expr_dict"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_BUILD
argument_list|,
literal|"true"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_Q
argument_list|,
literal|"exampel"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_COUNT
argument_list|,
literal|"5"
argument_list|)
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='exampel']/int[@name='numFound'][.='2']"
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[1]/str[@name='term'][.='example inputdata']"
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[1]/long[@name='weight'][.='45']"
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[2]/str[@name='term'][.='example data']"
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[2]/long[@name='weight'][.='40']"
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_expr_dict']/lst[@name='exampel']/int[@name='numFound'][.='2']"
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_expr_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[1]/str[@name='term'][.='example inputdata']"
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_expr_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[1]/long[@name='weight'][.='120']"
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_expr_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[2]/str[@name='term'][.='example data']"
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='suggest_fuzzy_doc_expr_dict']/lst[@name='exampel']/arr[@name='suggestions']/lst[2]/long[@name='weight'][.='110']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBuildAllSuggester
specifier|public
name|void
name|testBuildAllSuggester
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_BUILD_ALL
argument_list|,
literal|"true"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_Q
argument_list|,
literal|"exampel"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_COUNT
argument_list|,
literal|"5"
argument_list|)
argument_list|,
literal|"//str[@name='command'][.='buildAll']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_BUILD_ALL
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"//str[@name='command'][.='buildAll']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReloadAllSuggester
specifier|public
name|void
name|testReloadAllSuggester
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_RELOAD_ALL
argument_list|,
literal|"true"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_Q
argument_list|,
literal|"exampel"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_COUNT
argument_list|,
literal|"5"
argument_list|)
argument_list|,
literal|"//str[@name='command'][.='reloadAll']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_RELOAD_ALL
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"//str[@name='command'][.='reloadAll']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBadSuggesterName
specifier|public
name|void
name|testBadSuggesterName
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|fakeSuggesterName
init|=
literal|"does-not-exist"
decl_stmt|;
name|assertQEx
argument_list|(
literal|"No suggester named "
operator|+
name|fakeSuggesterName
operator|+
literal|" was configured"
argument_list|,
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_DICT
argument_list|,
name|fakeSuggesterName
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_Q
argument_list|,
literal|"exampel"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_COUNT
argument_list|,
literal|"5"
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"'"
operator|+
name|SuggesterParams
operator|.
name|SUGGEST_DICT
operator|+
literal|"' parameter not specified and no default suggester configured"
argument_list|,
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_Q
argument_list|,
literal|"exampel"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_COUNT
argument_list|,
literal|"5"
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultBuildOnStartupNotStoredDict
specifier|public
name|void
name|testDefaultBuildOnStartupNotStoredDict
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|suggester
init|=
literal|"suggest_doc_default_startup_no_store"
decl_stmt|;
comment|// validate that this suggester is not storing the lookup
name|assertEquals
argument_list|(
name|suggester
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getVal
argument_list|(
literal|"//searchComponent[@name='suggest']/lst[8]/str[@name='name']"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getVal
argument_list|(
literal|"//searchComponent[@name='suggest']/lst[8]/str[@name='storeDir']"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// validate that this suggester only builds manually and has not buildOnStartup parameter
name|assertEquals
argument_list|(
literal|"false"
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getVal
argument_list|(
literal|"//searchComponent[@name='suggest']/lst[8]/str[@name='buildOnCommit']"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getVal
argument_list|(
literal|"//searchComponent[@name='suggest']/lst[8]/str[@name='buildOnStartup']"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|reloadCore
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
comment|// Validate that the suggester was built on new/reload core
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_DICT
argument_list|,
name|suggester
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_Q
argument_list|,
literal|"example"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_COUNT
argument_list|,
literal|"5"
argument_list|)
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='"
operator|+
name|suggester
operator|+
literal|"']/lst[@name='example']/int[@name='numFound'][.='2']"
argument_list|)
expr_stmt|;
comment|// add one more doc, should be visible after core reload
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|,
literal|"cat"
argument_list|,
literal|"example data extra "
argument_list|,
literal|"price"
argument_list|,
literal|"40"
argument_list|,
literal|"weight"
argument_list|,
literal|"35"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
operator|(
name|commit
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|waitForWarming
argument_list|()
expr_stmt|;
comment|// buildOnCommit=false, this doc should not be in the suggester yet
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_DICT
argument_list|,
name|suggester
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_Q
argument_list|,
literal|"example"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_COUNT
argument_list|,
literal|"5"
argument_list|)
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='"
operator|+
name|suggester
operator|+
literal|"']/lst[@name='example']/int[@name='numFound'][.='2']"
argument_list|)
expr_stmt|;
name|reloadCore
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_DICT
argument_list|,
name|suggester
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_Q
argument_list|,
literal|"example"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_COUNT
argument_list|,
literal|"5"
argument_list|)
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='"
operator|+
name|suggester
operator|+
literal|"']/lst[@name='example']/int[@name='numFound'][.='3']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultBuildOnStartupStoredDict
specifier|public
name|void
name|testDefaultBuildOnStartupStoredDict
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|suggester
init|=
literal|"suggest_doc_default_startup"
decl_stmt|;
comment|// validate that this suggester is storing the lookup
name|assertEquals
argument_list|(
name|suggester
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getVal
argument_list|(
literal|"//searchComponent[@name='suggest']/lst[7]/str[@name='name']"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|suggester
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getVal
argument_list|(
literal|"//searchComponent[@name='suggest']/lst[7]/str[@name='storeDir']"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// validate that this suggester only builds manually and has not buildOnStartup parameter
name|assertEquals
argument_list|(
literal|"false"
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getVal
argument_list|(
literal|"//searchComponent[@name='suggest']/lst[7]/str[@name='buildOnCommit']"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getVal
argument_list|(
literal|"//searchComponent[@name='suggest']/lst[7]/str[@name='buildOnStartup']"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_DICT
argument_list|,
name|suggester
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_Q
argument_list|,
literal|"example"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_COUNT
argument_list|,
literal|"5"
argument_list|)
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='"
operator|+
name|suggester
operator|+
literal|"']/lst[@name='example']/int[@name='numFound'][.='0']"
argument_list|)
expr_stmt|;
comment|// build the suggester manually
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_DICT
argument_list|,
name|suggester
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_BUILD
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"//str[@name='command'][.='build']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_DICT
argument_list|,
name|suggester
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_Q
argument_list|,
literal|"example"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_COUNT
argument_list|,
literal|"5"
argument_list|)
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='"
operator|+
name|suggester
operator|+
literal|"']/lst[@name='example']/int[@name='numFound'][.='2']"
argument_list|)
expr_stmt|;
name|reloadCore
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
comment|// Validate that the suggester was loaded on new/reload core
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_DICT
argument_list|,
name|suggester
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_Q
argument_list|,
literal|"example"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_COUNT
argument_list|,
literal|"5"
argument_list|)
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='"
operator|+
name|suggester
operator|+
literal|"']/lst[@name='example']/int[@name='numFound'][.='2']"
argument_list|)
expr_stmt|;
comment|// add one more doc, this should not be seen after a core reload (not until the suggester is manually rebuilt)
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|,
literal|"cat"
argument_list|,
literal|"example data extra "
argument_list|,
literal|"price"
argument_list|,
literal|"40"
argument_list|,
literal|"weight"
argument_list|,
literal|"35"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
operator|(
name|commit
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|waitForWarming
argument_list|()
expr_stmt|;
comment|// buildOnCommit=false, this doc should not be in the suggester yet
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_DICT
argument_list|,
name|suggester
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_Q
argument_list|,
literal|"example"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_COUNT
argument_list|,
literal|"5"
argument_list|)
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='"
operator|+
name|suggester
operator|+
literal|"']/lst[@name='example']/int[@name='numFound'][.='2']"
argument_list|)
expr_stmt|;
name|reloadCore
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_DICT
argument_list|,
name|suggester
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_Q
argument_list|,
literal|"example"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_COUNT
argument_list|,
literal|"5"
argument_list|)
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='"
operator|+
name|suggester
operator|+
literal|"']/lst[@name='example']/int[@name='numFound'][.='2']"
argument_list|)
expr_stmt|;
comment|// build the suggester manually
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_DICT
argument_list|,
name|suggester
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_BUILD
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"//str[@name='command'][.='build']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_DICT
argument_list|,
name|suggester
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_Q
argument_list|,
literal|"example"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_COUNT
argument_list|,
literal|"5"
argument_list|)
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='"
operator|+
name|suggester
operator|+
literal|"']/lst[@name='example']/int[@name='numFound'][.='3']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLoadOnStartup
specifier|public
name|void
name|testLoadOnStartup
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|suggester
init|=
literal|"suggest_fuzzy_doc_manal_build"
decl_stmt|;
comment|// validate that this suggester is storing the lookup
name|assertEquals
argument_list|(
name|suggester
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getVal
argument_list|(
literal|"//searchComponent[@name='suggest']/lst[6]/str[@name='name']"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|suggester
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getVal
argument_list|(
literal|"//searchComponent[@name='suggest']/lst[6]/str[@name='storeDir']"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// validate that this suggester only builds manually
name|assertEquals
argument_list|(
literal|"false"
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getVal
argument_list|(
literal|"//searchComponent[@name='suggest']/lst[6]/str[@name='buildOnCommit']"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"false"
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getVal
argument_list|(
literal|"//searchComponent[@name='suggest']/lst[6]/str[@name='buildOnStartup']"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// build the suggester manually
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_DICT
argument_list|,
name|suggester
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_BUILD
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"//str[@name='command'][.='build']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_DICT
argument_list|,
name|suggester
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_Q
argument_list|,
literal|"exampel"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_COUNT
argument_list|,
literal|"5"
argument_list|)
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='"
operator|+
name|suggester
operator|+
literal|"']/lst[@name='exampel']/int[@name='numFound'][.='2']"
argument_list|)
expr_stmt|;
name|reloadCore
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Validate that the suggester was loaded on core reload
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_DICT
argument_list|,
name|suggester
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_Q
argument_list|,
literal|"exampel"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_COUNT
argument_list|,
literal|"5"
argument_list|)
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='"
operator|+
name|suggester
operator|+
literal|"']/lst[@name='exampel']/int[@name='numFound'][.='2']"
argument_list|)
expr_stmt|;
name|reloadCore
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Validate that the suggester was loaded on new core
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_DICT
argument_list|,
name|suggester
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_Q
argument_list|,
literal|"exampel"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_COUNT
argument_list|,
literal|"5"
argument_list|)
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='"
operator|+
name|suggester
operator|+
literal|"']/lst[@name='exampel']/int[@name='numFound'][.='2']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuildOnStartupWithCoreReload
specifier|public
name|void
name|testBuildOnStartupWithCoreReload
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestBuildOnStartup
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuildOnStartupWithNewCores
specifier|public
name|void
name|testBuildOnStartupWithNewCores
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestBuildOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestBuildOnStartup
specifier|private
name|void
name|doTestBuildOnStartup
parameter_list|(
name|boolean
name|createNewCores
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|suggesterFuzzy
init|=
literal|"suggest_fuzzy_doc_dict"
decl_stmt|;
comment|// the test relies on useColdSearcher=false
name|assertFalse
argument_list|(
literal|"Precondition not met for test. useColdSearcher must be false"
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|useColdSearcher
argument_list|)
expr_stmt|;
comment|// validate that this suggester is not storing the lookup and buildOnStartup is not set
name|assertEquals
argument_list|(
name|suggesterFuzzy
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getVal
argument_list|(
literal|"//searchComponent[@name='suggest']/lst[3]/str[@name='name']"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getVal
argument_list|(
literal|"//searchComponent[@name='suggest']/lst[3]/str[@name='storeDir']"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// assert that buildOnStartup=false
name|assertEquals
argument_list|(
literal|"false"
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getVal
argument_list|(
literal|"//searchComponent[@name='suggest']/lst[3]/str[@name='buildOnStartup']"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getVal
argument_list|(
literal|"//searchComponent[@name='suggest']/lst[3]/str[@name='buildOnCommit']"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify that this suggester is built (there was a commit in setUp)
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_DICT
argument_list|,
name|suggesterFuzzy
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_Q
argument_list|,
literal|"exampel"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_COUNT
argument_list|,
literal|"5"
argument_list|)
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='"
operator|+
name|suggesterFuzzy
operator|+
literal|"']/lst[@name='exampel']/int[@name='numFound'][.='2']"
argument_list|)
expr_stmt|;
comment|// reload the core and wait for for the listeners to finish
name|reloadCore
argument_list|(
name|createNewCores
argument_list|)
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
name|SYSPROP_NIGHTLY
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// wait some time here in nightly to make sure there are no race conditions in suggester build
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
comment|// The suggester should be empty
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_DICT
argument_list|,
name|suggesterFuzzy
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_Q
argument_list|,
literal|"exampel"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_COUNT
argument_list|,
literal|"5"
argument_list|)
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='"
operator|+
name|suggesterFuzzy
operator|+
literal|"']/lst[@name='exampel']/int[@name='numFound'][.='0']"
argument_list|)
expr_stmt|;
comment|// build the suggester manually
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_DICT
argument_list|,
name|suggesterFuzzy
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_BUILD
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"//str[@name='command'][.='build']"
argument_list|)
expr_stmt|;
comment|// validate the suggester is built again
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_DICT
argument_list|,
name|suggesterFuzzy
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_Q
argument_list|,
literal|"exampel"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_COUNT
argument_list|,
literal|"5"
argument_list|)
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='"
operator|+
name|suggesterFuzzy
operator|+
literal|"']/lst[@name='exampel']/int[@name='numFound'][.='2']"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|suggestStartup
init|=
literal|"suggest_fuzzy_doc_dict_build_startup"
decl_stmt|;
comment|// repeat the test with "suggest_fuzzy_doc_dict_build_startup", it is exactly the same but with buildOnStartup=true
name|assertEquals
argument_list|(
name|suggestStartup
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getVal
argument_list|(
literal|"//searchComponent[@name='suggest']/lst[5]/str[@name='name']"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getVal
argument_list|(
literal|"//searchComponent[@name='suggest']/lst[5]/str[@name='storeDir']"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getVal
argument_list|(
literal|"//searchComponent[@name='suggest']/lst[5]/str[@name='buildOnStartup']"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"false"
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getVal
argument_list|(
literal|"//searchComponent[@name='suggest']/lst[5]/str[@name='buildOnCommit']"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// reload the core
name|reloadCore
argument_list|(
name|createNewCores
argument_list|)
expr_stmt|;
comment|// verify that this suggester is built (should build on startup)
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_DICT
argument_list|,
name|suggestStartup
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_Q
argument_list|,
literal|"exampel"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_COUNT
argument_list|,
literal|"5"
argument_list|)
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='"
operator|+
name|suggestStartup
operator|+
literal|"']/lst[@name='exampel']/int[@name='numFound'][.='2']"
argument_list|)
expr_stmt|;
comment|// add one more doc, this should not be seen without rebuilding manually or reloading the core (buildOnCommit=false)
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|,
literal|"cat"
argument_list|,
literal|"example data extra "
argument_list|,
literal|"price"
argument_list|,
literal|"40"
argument_list|,
literal|"weight"
argument_list|,
literal|"35"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
operator|(
name|commit
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|waitForWarming
argument_list|()
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_DICT
argument_list|,
name|suggestStartup
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_Q
argument_list|,
literal|"exampel"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_COUNT
argument_list|,
literal|"5"
argument_list|)
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='"
operator|+
name|suggestStartup
operator|+
literal|"']/lst[@name='exampel']/int[@name='numFound'][.='2']"
argument_list|)
expr_stmt|;
comment|// build the suggester manually
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_DICT
argument_list|,
name|suggestStartup
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_BUILD
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"//str[@name='command'][.='build']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
name|rh
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_DICT
argument_list|,
name|suggestStartup
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_Q
argument_list|,
literal|"exampel"
argument_list|,
name|SuggesterParams
operator|.
name|SUGGEST_COUNT
argument_list|,
literal|"5"
argument_list|)
argument_list|,
literal|"//lst[@name='suggest']/lst[@name='"
operator|+
name|suggestStartup
operator|+
literal|"']/lst[@name='exampel']/int[@name='numFound'][.='3']"
argument_list|)
expr_stmt|;
block|}
DECL|method|reloadCore
specifier|private
name|void
name|reloadCore
parameter_list|(
name|boolean
name|createNewCore
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|createNewCore
condition|)
block|{
name|CoreContainer
name|cores
init|=
name|h
operator|.
name|getCoreContainer
argument_list|()
decl_stmt|;
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|String
name|dataDir1
init|=
name|core
operator|.
name|getDataDir
argument_list|()
decl_stmt|;
name|CoreDescriptor
name|cd
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
decl_stmt|;
name|h
operator|.
name|close
argument_list|()
expr_stmt|;
name|createCore
argument_list|()
expr_stmt|;
name|SolrCore
name|createdCore
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|dataDir1
argument_list|,
name|createdCore
operator|.
name|getDataDir
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|createdCore
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|h
operator|.
name|reload
argument_list|()
expr_stmt|;
comment|// On regular reloading, wait until the new searcher is registered
name|waitForWarming
argument_list|()
expr_stmt|;
block|}
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"standard"
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
argument_list|,
literal|"//*[@numFound='11']"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
