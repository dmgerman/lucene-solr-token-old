begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr
package|package
name|org
operator|.
name|apache
operator|.
name|solr
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_comment
comment|/**  * TODO? perhaps use:  *  http://docs.codehaus.org/display/JETTY/ServletTester  * rather then open a real connection?  *  * @since solr 4.0  */
end_comment
begin_class
annotation|@
name|Slow
DECL|class|TestDistributedGrouping
specifier|public
class|class
name|TestDistributedGrouping
extends|extends
name|BaseDistributedSearchTestCase
block|{
DECL|field|t1
name|String
name|t1
init|=
literal|"a_t"
decl_stmt|;
DECL|field|i1dv
name|String
name|i1dv
init|=
literal|"a_idv"
decl_stmt|;
DECL|field|i1
name|String
name|i1
init|=
literal|"a_i1"
decl_stmt|;
DECL|field|s1
name|String
name|s1
init|=
literal|"a_s"
decl_stmt|;
DECL|field|tlong
name|String
name|tlong
init|=
literal|"other_tl1"
decl_stmt|;
DECL|field|tdate_a
name|String
name|tdate_a
init|=
literal|"a_n_tdt"
decl_stmt|;
DECL|field|tdate_b
name|String
name|tdate_b
init|=
literal|"b_n_tdt"
decl_stmt|;
DECL|field|oddField
name|String
name|oddField
init|=
literal|"oddField_s1"
decl_stmt|;
annotation|@
name|Test
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|handle
operator|.
name|clear
argument_list|()
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"timestamp"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"grouped"
argument_list|,
name|UNORDERED
argument_list|)
expr_stmt|;
comment|// distrib grouping doesn't guarantee order of top level group commands
comment|// Test distributed grouping with empty indices
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
name|i1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"kings"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|,
literal|"spellcheck"
argument_list|,
literal|"true"
argument_list|,
literal|"spellcheck.build"
argument_list|,
literal|"true"
argument_list|,
literal|"qt"
argument_list|,
literal|"spellCheckCompRH"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
name|s1
operator|+
literal|":a"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|,
literal|"group.truncate"
argument_list|,
literal|"true"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|1
argument_list|,
name|i1
argument_list|,
literal|100
argument_list|,
name|tlong
argument_list|,
literal|100
argument_list|,
name|i1dv
argument_list|,
literal|100
argument_list|,
name|t1
argument_list|,
literal|"now is the time for all good men"
argument_list|,
name|tdate_a
argument_list|,
literal|"2010-04-20T11:00:00Z"
argument_list|,
name|tdate_b
argument_list|,
literal|"2009-08-20T11:00:00Z"
argument_list|,
literal|"foo_f"
argument_list|,
literal|1.414f
argument_list|,
literal|"foo_b"
argument_list|,
literal|"true"
argument_list|,
literal|"foo_d"
argument_list|,
literal|1.414d
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|2
argument_list|,
name|i1
argument_list|,
literal|50
argument_list|,
name|tlong
argument_list|,
literal|50
argument_list|,
name|i1dv
argument_list|,
literal|50
argument_list|,
name|t1
argument_list|,
literal|"to come to the aid of their country."
argument_list|,
name|tdate_a
argument_list|,
literal|"2010-05-02T11:00:00Z"
argument_list|,
name|tdate_b
argument_list|,
literal|"2009-11-02T11:00:00Z"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|3
argument_list|,
name|i1
argument_list|,
literal|2
argument_list|,
name|tlong
argument_list|,
literal|2
argument_list|,
name|t1
argument_list|,
literal|"how now brown cow"
argument_list|,
name|tdate_a
argument_list|,
literal|"2010-05-03T11:00:00Z"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|4
argument_list|,
name|i1
argument_list|,
operator|-
literal|100
argument_list|,
name|tlong
argument_list|,
literal|101
argument_list|,
name|i1dv
argument_list|,
literal|101
argument_list|,
name|t1
argument_list|,
literal|"the quick fox jumped over the lazy dog"
argument_list|,
name|tdate_a
argument_list|,
literal|"2010-05-03T11:00:00Z"
argument_list|,
name|tdate_b
argument_list|,
literal|"2010-05-03T11:00:00Z"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|5
argument_list|,
name|i1
argument_list|,
literal|500
argument_list|,
name|tlong
argument_list|,
literal|500
argument_list|,
name|i1dv
argument_list|,
literal|500
argument_list|,
name|t1
argument_list|,
literal|"the quick fox jumped way over the lazy dog"
argument_list|,
name|tdate_a
argument_list|,
literal|"2010-05-05T11:00:00Z"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|6
argument_list|,
name|i1
argument_list|,
operator|-
literal|600
argument_list|,
name|tlong
argument_list|,
literal|600
argument_list|,
name|i1dv
argument_list|,
literal|600
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy sat on a wall"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|7
argument_list|,
name|i1
argument_list|,
literal|123
argument_list|,
name|tlong
argument_list|,
literal|123
argument_list|,
name|i1dv
argument_list|,
literal|123
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy had a great fall"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|8
argument_list|,
name|i1
argument_list|,
literal|876
argument_list|,
name|tlong
argument_list|,
literal|876
argument_list|,
name|tdate_b
argument_list|,
literal|"2010-01-05T11:00:00Z"
argument_list|,
name|t1
argument_list|,
literal|"all the kings horses and all the kings men"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|9
argument_list|,
name|i1
argument_list|,
literal|7
argument_list|,
name|tlong
argument_list|,
literal|7
argument_list|,
name|i1dv
argument_list|,
literal|7
argument_list|,
name|t1
argument_list|,
literal|"couldn't put humpty together again"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|10
argument_list|,
name|i1
argument_list|,
literal|4321
argument_list|,
name|tlong
argument_list|,
literal|4321
argument_list|,
name|i1dv
argument_list|,
literal|4321
argument_list|,
name|t1
argument_list|,
literal|"this too shall pass"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|11
argument_list|,
name|i1
argument_list|,
operator|-
literal|987
argument_list|,
name|tlong
argument_list|,
literal|987
argument_list|,
name|i1dv
argument_list|,
literal|2015
argument_list|,
name|t1
argument_list|,
literal|"An eye for eye only ends up making the whole world blind."
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|12
argument_list|,
name|i1
argument_list|,
literal|379
argument_list|,
name|tlong
argument_list|,
literal|379
argument_list|,
name|i1dv
argument_list|,
literal|379
argument_list|,
name|t1
argument_list|,
literal|"Great works are performed, not by strength, but by perseverance."
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|14
argument_list|,
literal|"SubjectTerms_mfacet"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mathematical models"
block|,
literal|"mathematical analysis"
block|}
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|15
argument_list|,
literal|"SubjectTerms_mfacet"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"test 1"
block|,
literal|"test 2"
block|,
literal|"test3"
block|}
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|16
argument_list|,
literal|"SubjectTerms_mfacet"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"test 1"
block|,
literal|"test 2"
block|,
literal|"test3"
block|}
argument_list|)
expr_stmt|;
name|String
index|[]
name|vals
init|=
operator|new
name|String
index|[
literal|100
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|vals
index|[
name|i
index|]
operator|=
literal|"test "
operator|+
name|i
expr_stmt|;
block|}
name|indexr
argument_list|(
name|id
argument_list|,
literal|17
argument_list|,
literal|"SubjectTerms_mfacet"
argument_list|,
name|vals
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|18
argument_list|,
name|i1
argument_list|,
literal|232
argument_list|,
name|tlong
argument_list|,
literal|332
argument_list|,
name|i1dv
argument_list|,
literal|150
argument_list|,
name|t1
argument_list|,
literal|"no eggs on wall, lesson learned"
argument_list|,
name|oddField
argument_list|,
literal|"odd man out"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|19
argument_list|,
name|i1
argument_list|,
literal|232
argument_list|,
name|tlong
argument_list|,
literal|432
argument_list|,
name|i1dv
argument_list|,
literal|300
argument_list|,
name|t1
argument_list|,
literal|"many eggs on wall"
argument_list|,
name|oddField
argument_list|,
literal|"odd man in"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|20
argument_list|,
name|i1
argument_list|,
literal|232
argument_list|,
name|tlong
argument_list|,
literal|532
argument_list|,
name|i1dv
argument_list|,
literal|150
argument_list|,
name|t1
argument_list|,
literal|"some eggs on wall"
argument_list|,
name|oddField
argument_list|,
literal|"odd man between"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|21
argument_list|,
name|i1
argument_list|,
literal|232
argument_list|,
name|tlong
argument_list|,
literal|632
argument_list|,
name|i1dv
argument_list|,
literal|120
argument_list|,
name|t1
argument_list|,
literal|"a few eggs on wall"
argument_list|,
name|oddField
argument_list|,
literal|"odd man under"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|22
argument_list|,
name|i1
argument_list|,
literal|232
argument_list|,
name|tlong
argument_list|,
literal|732
argument_list|,
name|i1dv
argument_list|,
literal|120
argument_list|,
name|t1
argument_list|,
literal|"any eggs on wall"
argument_list|,
name|oddField
argument_list|,
literal|"odd man above"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|23
argument_list|,
name|i1
argument_list|,
literal|233
argument_list|,
name|tlong
argument_list|,
literal|734
argument_list|,
name|i1dv
argument_list|,
literal|120
argument_list|,
name|t1
argument_list|,
literal|"dirty eggs"
argument_list|,
name|oddField
argument_list|,
literal|"odd eggs"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|100
init|;
name|i
operator|<
literal|150
condition|;
name|i
operator|++
control|)
block|{
name|indexr
argument_list|(
name|id
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|int
index|[]
name|values
init|=
operator|new
name|int
index|[]
block|{
literal|9999
block|,
literal|99999
block|,
literal|999999
block|,
literal|9999999
block|}
decl_stmt|;
for|for
control|(
name|int
name|shard
init|=
literal|0
init|;
name|shard
operator|<
name|clients
operator|.
name|size
argument_list|()
condition|;
name|shard
operator|++
control|)
block|{
name|int
name|groupValue
init|=
name|values
index|[
name|shard
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|500
init|;
name|i
operator|<
literal|600
condition|;
name|i
operator|++
control|)
block|{
name|index_specific
argument_list|(
name|shard
argument_list|,
name|i1
argument_list|,
name|groupValue
argument_list|,
name|s1
argument_list|,
literal|"a"
argument_list|,
name|id
argument_list|,
name|i
operator|*
operator|(
name|shard
operator|+
literal|1
operator|)
argument_list|,
name|t1
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|commit
argument_list|()
expr_stmt|;
comment|// test grouping
comment|// The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge
comment|// The shard the result came from matters in the order if both document sortvalues are equal
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc, _docid_ asc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
literal|"{!func}add("
operator|+
name|i1
operator|+
literal|",5) asc, id asc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
name|tlong
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"kings"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|,
literal|"spellcheck"
argument_list|,
literal|"true"
argument_list|,
literal|"spellcheck.build"
argument_list|,
literal|"true"
argument_list|,
literal|"qt"
argument_list|,
literal|"spellCheckCompRH"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|,
literal|"group.sort"
argument_list|,
literal|"id desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.offset"
argument_list|,
literal|5
argument_list|,
literal|"group.limit"
argument_list|,
literal|5
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"offset"
argument_list|,
literal|5
argument_list|,
literal|"rows"
argument_list|,
literal|5
argument_list|,
literal|"group.offset"
argument_list|,
literal|5
argument_list|,
literal|"group.limit"
argument_list|,
literal|5
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"offset"
argument_list|,
literal|5
argument_list|,
literal|"rows"
argument_list|,
literal|5
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|,
literal|"group.format"
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"offset"
argument_list|,
literal|5
argument_list|,
literal|"rows"
argument_list|,
literal|5
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|,
literal|"group.main"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.offset"
argument_list|,
literal|5
argument_list|,
literal|"group.limit"
argument_list|,
literal|5
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|,
literal|"group.format"
argument_list|,
literal|"simple"
argument_list|,
literal|"offset"
argument_list|,
literal|5
argument_list|,
literal|"rows"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.offset"
argument_list|,
literal|5
argument_list|,
literal|"group.limit"
argument_list|,
literal|5
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|,
literal|"group.main"
argument_list|,
literal|"true"
argument_list|,
literal|"offset"
argument_list|,
literal|5
argument_list|,
literal|"rows"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.query"
argument_list|,
name|t1
operator|+
literal|":kings OR "
operator|+
name|t1
operator|+
literal|":eggs"
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.query"
argument_list|,
name|t1
operator|+
literal|":kings OR "
operator|+
name|t1
operator|+
literal|":eggs"
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1dv
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1dv
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|)
expr_stmt|;
comment|// SOLR-4150: what if group.query has no matches,
comment|// or only matches on one shard
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.query"
argument_list|,
name|t1
operator|+
literal|":kings OR "
operator|+
name|t1
operator|+
literal|":eggs"
argument_list|,
literal|"group.query"
argument_list|,
literal|"id:5"
argument_list|,
comment|// single doc, so only one shard will have it
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
name|t1
operator|+
literal|":this_will_never_match"
argument_list|,
name|SKIP
argument_list|)
expr_stmt|;
comment|// :TODO: SOLR-4181
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.query"
argument_list|,
name|t1
operator|+
literal|":kings OR "
operator|+
name|t1
operator|+
literal|":eggs"
argument_list|,
literal|"group.query"
argument_list|,
name|t1
operator|+
literal|":this_will_never_match"
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|)
expr_stmt|;
comment|// SOLR-4164: main query matches nothing, or only matches on one shard
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"bogus_s:nothing"
argument_list|,
comment|// no docs match
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.query"
argument_list|,
name|t1
operator|+
literal|":this_will_never_match"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"group.limit"
argument_list|,
literal|"2"
argument_list|,
literal|"group.format"
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"id:5"
argument_list|,
comment|// one doc matches, so only one shard
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.query"
argument_list|,
name|t1
operator|+
literal|":kings OR "
operator|+
name|t1
operator|+
literal|":eggs"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|)
expr_stmt|;
comment|// SOLR-3109
name|query
argument_list|(
literal|"q"
argument_list|,
name|t1
operator|+
literal|":eggs"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|tlong
operator|+
literal|" asc, id asc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
name|i1
operator|+
literal|":232"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|tlong
operator|+
literal|" asc, id asc"
argument_list|)
expr_stmt|;
comment|// In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
name|s1
operator|+
literal|":a"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|,
literal|"group.ngroups"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
name|s1
operator|+
literal|":a"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|,
literal|"group.truncate"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
name|s1
operator|+
literal|":a"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|,
literal|"group.truncate"
argument_list|,
literal|"true"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|gfacet
range|:
operator|new
name|String
index|[]
block|{
literal|"true"
block|,
literal|"false"
block|}
control|)
block|{
for|for
control|(
name|String
name|flimit
range|:
operator|new
name|String
index|[]
block|{
literal|"-100"
block|,
literal|"-1"
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"10000"
block|}
control|)
block|{
for|for
control|(
name|String
name|foffset
range|:
operator|new
name|String
index|[]
block|{
literal|"0"
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"1000"
block|}
control|)
block|{
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
name|s1
operator|+
literal|":a"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"group.facet"
argument_list|,
name|gfacet
argument_list|,
literal|"facet.limit"
argument_list|,
name|flimit
argument_list|,
literal|"facet.offset"
argument_list|,
name|foffset
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// SOLR-3316
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
name|s1
operator|+
literal|":a"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
name|s1
operator|+
literal|":a"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|,
literal|"group.truncate"
argument_list|,
literal|"true"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
comment|// SOLR-3436
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
name|s1
operator|+
literal|":a"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|,
literal|"group.ngroups"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
name|s1
operator|+
literal|":a"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|,
literal|"group.ngroups"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// SOLR-3960 - include a postfilter
for|for
control|(
name|String
name|facet
range|:
operator|new
name|String
index|[]
block|{
literal|"false"
block|,
literal|"true"
block|}
control|)
block|{
for|for
control|(
name|String
name|fcache
range|:
operator|new
name|String
index|[]
block|{
literal|""
block|,
literal|" cache=false cost=200"
block|}
control|)
block|{
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"fq"
argument_list|,
literal|"{!frange l=50 "
operator|+
name|fcache
operator|+
literal|"}"
operator|+
name|tlong
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet"
argument_list|,
name|facet
argument_list|)
expr_stmt|;
block|}
block|}
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|Object
index|[]
name|q
init|=
block|{
literal|"q"
block|,
literal|"*:*"
block|,
literal|"fq"
block|,
name|s1
operator|+
literal|":a"
block|,
literal|"rows"
block|,
literal|1
block|,
literal|"fl"
block|,
literal|"id,"
operator|+
name|i1
block|,
literal|"group"
block|,
literal|"true"
block|,
literal|"group.field"
block|,
name|i1
block|,
literal|"group.limit"
block|,
literal|10
block|,
literal|"group.ngroups"
block|,
literal|"true"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|q
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|params
operator|.
name|add
argument_list|(
name|q
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|q
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setDistributedParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|int
name|which
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|clients
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|SolrClient
name|client
init|=
name|clients
operator|.
name|get
argument_list|(
name|which
argument_list|)
decl_stmt|;
name|QueryResponse
name|rsp
init|=
name|client
operator|.
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|NamedList
name|nl
init|=
operator|(
name|NamedList
argument_list|<
name|?
argument_list|>
operator|)
name|rsp
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"grouped"
argument_list|)
decl_stmt|;
name|nl
operator|=
operator|(
name|NamedList
argument_list|<
name|?
argument_list|>
operator|)
name|nl
operator|.
name|getVal
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|matches
init|=
operator|(
name|Integer
operator|)
name|nl
operator|.
name|getVal
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|groupCount
init|=
operator|(
name|Integer
operator|)
name|nl
operator|.
name|get
argument_list|(
literal|"ngroups"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|100
operator|*
name|shardsArr
operator|.
name|length
argument_list|,
name|matches
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardsArr
operator|.
name|length
argument_list|,
name|groupCount
argument_list|)
expr_stmt|;
comment|// We validate distributed grouping with scoring as first sort.
comment|// note: this 'q' matches all docs and returns the 'id' as the score, which is unique and so our results should be deterministic.
name|handle
operator|.
name|put
argument_list|(
literal|"maxScore"
argument_list|,
name|SKIP
argument_list|)
expr_stmt|;
comment|// TODO see SOLR-6612
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"{!func}id"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"score,id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"group.sort"
argument_list|,
literal|"score desc"
argument_list|)
expr_stmt|;
comment|// SOLR-2955
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"{!func}id"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"score,id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
literal|"score desc, _docid_ asc, id asc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"{!func}id"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"score,id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// some explicit checks of non default sorting, and sort/group.sort with diff clauses
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"{!func}id"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
name|tlong
operator|+
literal|",id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|tlong
operator|+
literal|" asc, id desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"{!func}id"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
name|tlong
operator|+
literal|",id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|,
literal|"group.sort"
argument_list|,
name|tlong
operator|+
literal|" asc, id desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"{!func}id"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
name|tlong
operator|+
literal|",id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|tlong
operator|+
literal|" asc, id desc"
argument_list|,
literal|"group.sort"
argument_list|,
literal|"id asc"
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"{!func}id"
argument_list|,
literal|"fq"
argument_list|,
name|oddField
operator|+
literal|":[* TO *]"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
name|tlong
operator|+
literal|",id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|tlong
operator|+
literal|" asc"
argument_list|,
literal|"group.sort"
argument_list|,
name|oddField
operator|+
literal|" asc"
argument_list|)
expr_stmt|;
name|nl
operator|=
operator|(
name|NamedList
argument_list|<
name|?
argument_list|>
operator|)
name|rsp
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"grouped"
argument_list|)
expr_stmt|;
name|nl
operator|=
operator|(
name|NamedList
argument_list|<
name|?
argument_list|>
operator|)
name|nl
operator|.
name|get
argument_list|(
name|i1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rsp
operator|.
name|toString
argument_list|()
argument_list|,
literal|6
argument_list|,
name|nl
operator|.
name|get
argument_list|(
literal|"matches"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rsp
operator|.
name|toString
argument_list|()
argument_list|,
literal|2
argument_list|,
operator|(
operator|(
name|List
argument_list|<
name|NamedList
argument_list|<
name|?
argument_list|>
argument_list|>
operator|)
name|nl
operator|.
name|get
argument_list|(
literal|"groups"
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|nl
operator|=
operator|(
operator|(
name|List
argument_list|<
name|NamedList
argument_list|<
name|?
argument_list|>
argument_list|>
operator|)
name|nl
operator|.
name|get
argument_list|(
literal|"groups"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rsp
operator|.
name|toString
argument_list|()
argument_list|,
literal|232
argument_list|,
name|nl
operator|.
name|get
argument_list|(
literal|"groupValue"
argument_list|)
argument_list|)
expr_stmt|;
name|SolrDocumentList
name|docs
init|=
operator|(
name|SolrDocumentList
operator|)
name|nl
operator|.
name|get
argument_list|(
literal|"doclist"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|docs
operator|.
name|toString
argument_list|()
argument_list|,
literal|5
argument_list|,
name|docs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|docs
operator|.
name|toString
argument_list|()
argument_list|,
literal|22
argument_list|,
name|docs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirstValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|docs
operator|.
name|toString
argument_list|()
argument_list|,
literal|21
argument_list|,
name|docs
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getFirstValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Can't validate the response, but can check if no errors occur.
name|simpleQuery
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.query"
argument_list|,
name|t1
operator|+
literal|":kings OR "
operator|+
name|t1
operator|+
literal|":eggs"
argument_list|,
literal|"group.limit"
argument_list|,
literal|10
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc, id asc"
argument_list|,
name|CommonParams
operator|.
name|TIME_ALLOWED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//Debug
name|simpleQuery
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|10
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|i1
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|i1
argument_list|,
literal|"debug"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
DECL|method|simpleQuery
specifier|private
name|void
name|simpleQuery
parameter_list|(
name|Object
modifier|...
name|queryParams
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queryParams
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|params
operator|.
name|add
argument_list|(
name|queryParams
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|queryParams
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|set
argument_list|(
literal|"shards"
argument_list|,
name|shards
argument_list|)
expr_stmt|;
name|queryServer
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
