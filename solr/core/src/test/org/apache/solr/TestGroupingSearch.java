begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr
package|package
name|org
operator|.
name|apache
operator|.
name|solr
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LogDocMergePolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|BinaryResponseParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|GroupParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|BinaryResponseWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|ResultContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|JSONUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|ObjectBuilder
import|;
end_import
begin_class
DECL|class|TestGroupingSearch
specifier|public
class|class
name|TestGroupingSearch
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|FOO_STRING_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|FOO_STRING_FIELD
init|=
literal|"foo_s1"
decl_stmt|;
DECL|field|SMALL_STRING_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|SMALL_STRING_FIELD
init|=
literal|"small_s1"
decl_stmt|;
DECL|field|SMALL_INT_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|SMALL_INT_FIELD
init|=
literal|"small_i"
decl_stmt|;
DECL|field|EMPTY_FACETS
specifier|static
specifier|final
name|String
name|EMPTY_FACETS
init|=
literal|"'facet_dates':{},'facet_ranges':{},'facet_intervals':{},'facet_heatmaps':{}"
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeTests
specifier|public
specifier|static
name|void
name|beforeTests
parameter_list|()
throws|throws
name|Exception
block|{
comment|// force LogDocMergePolicy so that we get a predictable doc order
comment|// when doing unsorted group collection
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.tests.mergePolicy"
argument_list|,
name|LogDocMergePolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"enable.update.log"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
comment|// schema12 doesn't support _version_
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema12.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|cleanIndex
specifier|public
name|void
name|cleanIndex
parameter_list|()
block|{
name|assertU
argument_list|(
name|delQ
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGroupingGroupSortingScore_basic
specifier|public
name|void
name|testGroupingGroupSortingScore_basic
parameter_list|()
block|{
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"name"
argument_list|,
literal|"author1"
argument_list|,
literal|"title"
argument_list|,
literal|"a book title"
argument_list|,
literal|"group_i"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"name"
argument_list|,
literal|"author1"
argument_list|,
literal|"title"
argument_list|,
literal|"the title"
argument_list|,
literal|"group_i"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"name"
argument_list|,
literal|"author2"
argument_list|,
literal|"title"
argument_list|,
literal|"a book title"
argument_list|,
literal|"group_i"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"name"
argument_list|,
literal|"author2"
argument_list|,
literal|"title"
argument_list|,
literal|"title"
argument_list|,
literal|"group_i"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"name"
argument_list|,
literal|"author3"
argument_list|,
literal|"title"
argument_list|,
literal|"the title of a title"
argument_list|,
literal|"group_i"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"title:title"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
literal|"name"
argument_list|)
argument_list|,
literal|"//lst[@name='grouped']/lst[@name='name']"
argument_list|,
literal|"*[count(//arr[@name='groups']/lst) = 3]"
argument_list|,
literal|"//arr[@name='groups']/lst[1]/str[@name='groupValue'][.='author2']"
comment|//        ,"//arr[@name='groups']/lst[1]/int[@name='matches'][.='2']"
argument_list|,
literal|"//arr[@name='groups']/lst[1]/result[@numFound='2']"
argument_list|,
literal|"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']"
argument_list|,
literal|"//arr[@name='groups']/lst[2]/str[@name='groupValue'][.='author1']"
comment|//       ,"//arr[@name='groups']/lst[2]/int[@name='matches'][.='2']"
argument_list|,
literal|"//arr[@name='groups']/lst[2]/result[@numFound='2']"
argument_list|,
literal|"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='2']"
argument_list|,
literal|"//arr[@name='groups']/lst[3]/str[@name='groupValue'][.='author3']"
comment|//        ,"//arr[@name='groups']/lst[3]/int[@name='matches'][.='1']"
argument_list|,
literal|"//arr[@name='groups']/lst[3]/result[@numFound='1']"
argument_list|,
literal|"//arr[@name='groups']/lst[3]/result/doc/*[@name='id'][.='5']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"title:title"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
literal|"group_i"
argument_list|)
argument_list|,
literal|"//lst[@name='grouped']/lst[@name='group_i']"
argument_list|,
literal|"*[count(//arr[@name='groups']/lst) = 2]"
argument_list|,
literal|"//arr[@name='groups']/lst[1]/int[@name='groupValue'][.='2']"
argument_list|,
literal|"//arr[@name='groups']/lst[1]/result[@numFound='2']"
argument_list|,
literal|"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']"
argument_list|,
literal|"//arr[@name='groups']/lst[2]/int[@name='groupValue'][.='1']"
argument_list|,
literal|"//arr[@name='groups']/lst[2]/result[@numFound='3']"
argument_list|,
literal|"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='5']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGroupingGroupSortingScore_withTotalGroupCount
specifier|public
name|void
name|testGroupingGroupSortingScore_withTotalGroupCount
parameter_list|()
block|{
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"name"
argument_list|,
literal|"author1"
argument_list|,
literal|"title"
argument_list|,
literal|"a book title"
argument_list|,
literal|"group_i"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"name"
argument_list|,
literal|"author1"
argument_list|,
literal|"title"
argument_list|,
literal|"the title"
argument_list|,
literal|"group_i"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"name"
argument_list|,
literal|"author2"
argument_list|,
literal|"title"
argument_list|,
literal|"a book title"
argument_list|,
literal|"group_i"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"name"
argument_list|,
literal|"author2"
argument_list|,
literal|"title"
argument_list|,
literal|"title"
argument_list|,
literal|"group_i"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"name"
argument_list|,
literal|"author3"
argument_list|,
literal|"title"
argument_list|,
literal|"the title of a title"
argument_list|,
literal|"group_i"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"title:title"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
literal|"name"
argument_list|,
literal|"group.ngroups"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"//lst[@name='grouped']/lst[@name='name']"
argument_list|,
literal|"//lst[@name='grouped']/lst[@name='name']/int[@name='matches'][.='5']"
argument_list|,
literal|"//lst[@name='grouped']/lst[@name='name']/int[@name='ngroups'][.='3']"
argument_list|,
literal|"*[count(//arr[@name='groups']/lst) = 3]"
argument_list|,
literal|"//arr[@name='groups']/lst[1]/str[@name='groupValue'][.='author2']"
argument_list|,
literal|"//arr[@name='groups']/lst[1]/result[@numFound='2']"
argument_list|,
literal|"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']"
argument_list|,
literal|"//arr[@name='groups']/lst[2]/str[@name='groupValue'][.='author1']"
argument_list|,
literal|"//arr[@name='groups']/lst[2]/result[@numFound='2']"
argument_list|,
literal|"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='2']"
argument_list|,
literal|"//arr[@name='groups']/lst[3]/str[@name='groupValue'][.='author3']"
argument_list|,
literal|"//arr[@name='groups']/lst[3]/result[@numFound='1']"
argument_list|,
literal|"//arr[@name='groups']/lst[3]/result/doc/*[@name='id'][.='5']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"title:title"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
literal|"group_i"
argument_list|,
literal|"group.ngroups"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"//lst[@name='grouped']/lst[@name='group_i']/int[@name='matches'][.='5']"
argument_list|,
literal|"//lst[@name='grouped']/lst[@name='group_i']/int[@name='ngroups'][.='2']"
argument_list|,
literal|"*[count(//arr[@name='groups']/lst) = 2]"
argument_list|,
literal|"//arr[@name='groups']/lst[1]/int[@name='groupValue'][.='2']"
argument_list|,
literal|"//arr[@name='groups']/lst[1]/result[@numFound='2']"
argument_list|,
literal|"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']"
argument_list|,
literal|"//arr[@name='groups']/lst[2]/int[@name='groupValue'][.='1']"
argument_list|,
literal|"//arr[@name='groups']/lst[2]/result[@numFound='3']"
argument_list|,
literal|"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='5']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGroupingGroupSortingScore_basicWithGroupSortEqualToSort
specifier|public
name|void
name|testGroupingGroupSortingScore_basicWithGroupSortEqualToSort
parameter_list|()
block|{
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"name"
argument_list|,
literal|"author1"
argument_list|,
literal|"title"
argument_list|,
literal|"a book title"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"name"
argument_list|,
literal|"author1"
argument_list|,
literal|"title"
argument_list|,
literal|"the title"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"name"
argument_list|,
literal|"author2"
argument_list|,
literal|"title"
argument_list|,
literal|"a book title"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"name"
argument_list|,
literal|"author2"
argument_list|,
literal|"title"
argument_list|,
literal|"title"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"name"
argument_list|,
literal|"author3"
argument_list|,
literal|"title"
argument_list|,
literal|"the title of a title"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"title:title"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
literal|"name"
argument_list|,
literal|"sort"
argument_list|,
literal|"score desc"
argument_list|,
literal|"group.sort"
argument_list|,
literal|"score desc"
argument_list|)
argument_list|,
literal|"//arr[@name='groups']/lst[1]/str[@name='groupValue'][.='author2']"
comment|//        ,"//arr[@name='groups']/lst[1]/int[@name='matches'][.='2']"
argument_list|,
literal|"//arr[@name='groups']/lst[1]/result[@numFound='2']"
argument_list|,
literal|"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='4']"
argument_list|,
literal|"//arr[@name='groups']/lst[2]/str[@name='groupValue'][.='author1']"
comment|//        ,"//arr[@name='groups']/lst[2]/int[@name='matches'][.='2']"
argument_list|,
literal|"//arr[@name='groups']/lst[2]/result[@numFound='2']"
argument_list|,
literal|"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='2']"
argument_list|,
literal|"//arr[@name='groups']/lst[3]/str[@name='groupValue'][.='author3']"
comment|//        ,"//arr[@name='groups']/lst[3]/int[@name='matches'][.='1']"
argument_list|,
literal|"//arr[@name='groups']/lst[3]/result[@numFound='1']"
argument_list|,
literal|"//arr[@name='groups']/lst[3]/result/doc/*[@name='id'][.='5']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGroupingGroupSortingWeight
specifier|public
name|void
name|testGroupingGroupSortingWeight
parameter_list|()
block|{
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"name"
argument_list|,
literal|"author1"
argument_list|,
literal|"weight"
argument_list|,
literal|"12.1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"name"
argument_list|,
literal|"author1"
argument_list|,
literal|"weight"
argument_list|,
literal|"2.1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"name"
argument_list|,
literal|"author2"
argument_list|,
literal|"weight"
argument_list|,
literal|"0.1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"name"
argument_list|,
literal|"author2"
argument_list|,
literal|"weight"
argument_list|,
literal|"0.11"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
literal|"name"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|,
literal|"group.sort"
argument_list|,
literal|"weight desc"
argument_list|)
argument_list|,
literal|"*[count(//arr[@name='groups']/lst) = 2]"
argument_list|,
literal|"//arr[@name='groups']/lst[1]/str[@name='groupValue'][.='author1']"
comment|//        ,"//arr[@name='groups']/lst[1]/int[@name='matches'][.='2']"
argument_list|,
literal|"//arr[@name='groups']/lst[1]/result[@numFound='2']"
argument_list|,
literal|"//arr[@name='groups']/lst[1]/result/doc/*[@name='id'][.='1']"
argument_list|,
literal|"//arr[@name='groups']/lst[2]/str[@name='groupValue'][.='author2']"
comment|//        ,"//arr[@name='groups']/lst[2]/int[@name='matches'][.='2']"
argument_list|,
literal|"//arr[@name='groups']/lst[2]/result[@numFound='2']"
argument_list|,
literal|"//arr[@name='groups']/lst[2]/result/doc/*[@name='id'][.='4']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGroupingSimpleFormatArrayIndexOutOfBoundsException
specifier|public
name|void
name|testGroupingSimpleFormatArrayIndexOutOfBoundsException
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"start"
argument_list|,
literal|"1"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
literal|"id"
argument_list|,
literal|"group.main"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"/response=={'numFound':3,'start':1,'docs':[{'id':'2'},{'id':'3'}]}"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"start"
argument_list|,
literal|"1"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
literal|"id"
argument_list|,
literal|"group.main"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"/response=={'numFound':3,'start':1,'docs':[{'id':'2'}]}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGroupingSimpleFormatStartBiggerThanRows
specifier|public
name|void
name|testGroupingSimpleFormatStartBiggerThanRows
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"start"
argument_list|,
literal|"2"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
literal|"id"
argument_list|,
literal|"group.main"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"/response=={'numFound':5,'start':2,'docs':[{'id':'3'}]}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGroupingSimpleFormatArrayIndexOutOfBoundsExceptionWithJavaBin
specifier|public
name|void
name|testGroupingSimpleFormatArrayIndexOutOfBoundsExceptionWithJavaBin
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"nullfirst"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"nullfirst"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"nullfirst"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"nullfirst"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"nullfirst"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"nullfirst"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|request
init|=
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
literal|"nullfirst"
argument_list|,
literal|"group.main"
argument_list|,
literal|"true"
argument_list|,
literal|"wt"
argument_list|,
literal|"javabin"
argument_list|,
literal|"start"
argument_list|,
literal|"4"
argument_list|,
literal|"rows"
argument_list|,
literal|"10"
argument_list|)
decl_stmt|;
name|SolrQueryResponse
name|response
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|SolrRequestInfo
operator|.
name|setRequestInfo
argument_list|(
operator|new
name|SolrRequestInfo
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|handlerName
init|=
name|request
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|)
decl_stmt|;
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|execute
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getRequestHandler
argument_list|(
name|handlerName
argument_list|)
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|BinaryResponseWriter
name|responseWriter
init|=
operator|new
name|BinaryResponseWriter
argument_list|()
decl_stmt|;
name|responseWriter
operator|.
name|write
argument_list|(
name|out
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|request
operator|.
name|close
argument_list|()
expr_stmt|;
name|SolrRequestInfo
operator|.
name|clearRequestInfo
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|6
argument_list|,
operator|(
operator|(
name|ResultContext
operator|)
name|response
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
operator|)
operator|.
name|docs
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|BinaryResponseParser
argument_list|()
operator|.
name|processResponse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGroupingWithTimeAllowed
specifier|public
name|void
name|testGroupingWithTimeAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// Just checking if no errors occur
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.query"
argument_list|,
literal|"id:1"
argument_list|,
literal|"group.query"
argument_list|,
literal|"id:2"
argument_list|,
literal|"timeAllowed"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGroupingSortByFunction
specifier|public
name|void
name|testGroupingSortByFunction
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"value1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"value2_i"
argument_list|,
literal|"1"
argument_list|,
literal|"store"
argument_list|,
literal|"45.18014,-93.87742"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"value1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"value2_i"
argument_list|,
literal|"2"
argument_list|,
literal|"store"
argument_list|,
literal|"45.18014,-93.87743"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"value1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"value2_i"
argument_list|,
literal|"3"
argument_list|,
literal|"store"
argument_list|,
literal|"45.18014,-93.87744"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"value1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"value2_i"
argument_list|,
literal|"4"
argument_list|,
literal|"store"
argument_list|,
literal|"45.18014,-93.87745"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"value1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"value2_i"
argument_list|,
literal|"5"
argument_list|,
literal|"store"
argument_list|,
literal|"45.18014,-93.87746"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"sum(value1_i, value2_i) desc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
literal|"id"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"/grouped=={'id':{'matches':5,'groups':[{'groupValue':'5','doclist':{'numFound':1,'start':0,'docs':[{'id':'5'}]}}]}}"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"geodist(45.18014,-93.87742,store) asc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
literal|"id"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"/grouped=={'id':{'matches':5,'groups':[{'groupValue':'1','doclist':{'numFound':1,'start':0,'docs':[{'id':'1'}]}}]}}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGroupingGroupedBasedFaceting
specifier|public
name|void
name|testGroupingGroupedBasedFaceting
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"value1_s1"
argument_list|,
literal|"1"
argument_list|,
literal|"value2_i"
argument_list|,
literal|"1"
argument_list|,
literal|"value3_s1"
argument_list|,
literal|"a"
argument_list|,
literal|"value4_i"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"value1_s1"
argument_list|,
literal|"1"
argument_list|,
literal|"value2_i"
argument_list|,
literal|"2"
argument_list|,
literal|"value3_s1"
argument_list|,
literal|"a"
argument_list|,
literal|"value4_i"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"value1_s1"
argument_list|,
literal|"2"
argument_list|,
literal|"value2_i"
argument_list|,
literal|"3"
argument_list|,
literal|"value3_s1"
argument_list|,
literal|"b"
argument_list|,
literal|"value4_i"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"value1_s1"
argument_list|,
literal|"1"
argument_list|,
literal|"value2_i"
argument_list|,
literal|"4"
argument_list|,
literal|"value3_s1"
argument_list|,
literal|"a"
argument_list|,
literal|"value4_i"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"value1_s1"
argument_list|,
literal|"2"
argument_list|,
literal|"value2_i"
argument_list|,
literal|"5"
argument_list|,
literal|"value3_s1"
argument_list|,
literal|"b"
argument_list|,
literal|"value4_i"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// Facet counts based on documents
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"value2_i asc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
literal|"value1_s1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"value3_s1"
argument_list|,
literal|"group.truncate"
argument_list|,
literal|"false"
argument_list|)
decl_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|,
literal|"/grouped=={'value1_s1':{'matches':5,'groups':[{'groupValue':'1','doclist':{'numFound':3,'start':0,'docs':[{'id':'1'}]}}]}}"
argument_list|,
literal|"/facet_counts=={'facet_queries':{},'facet_fields':{'value3_s1':['a',3,'b',2]},"
operator|+
name|EMPTY_FACETS
operator|+
literal|"}"
argument_list|)
expr_stmt|;
comment|// Facet counts based on groups
name|req
operator|=
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"value2_i asc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
literal|"value1_s1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"value3_s1"
argument_list|,
literal|"group.truncate"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|,
literal|"/grouped=={'value1_s1':{'matches':5,'groups':[{'groupValue':'1','doclist':{'numFound':3,'start':0,'docs':[{'id':'1'}]}}]}}"
argument_list|,
literal|"/facet_counts=={'facet_queries':{},'facet_fields':{'value3_s1':['a',1,'b',1]},"
operator|+
name|EMPTY_FACETS
operator|+
literal|"}"
argument_list|)
expr_stmt|;
comment|// Facet counts based on groups and with group.func. This should trigger FunctionAllGroupHeadsCollector
name|req
operator|=
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"value2_i asc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.func"
argument_list|,
literal|"strdist(1,value1_s1,edit)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"value3_s1"
argument_list|,
literal|"group.truncate"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|,
literal|"/grouped=={'strdist(1,value1_s1,edit)':{'matches':5,'groups':[{'groupValue':1.0,'doclist':{'numFound':3,'start':0,'docs':[{'id':'1'}]}}]}}"
argument_list|,
literal|"/facet_counts=={'facet_queries':{},'facet_fields':{'value3_s1':['a',1,'b',1]},"
operator|+
name|EMPTY_FACETS
operator|+
literal|"}"
argument_list|)
expr_stmt|;
comment|// Facet counts based on groups without sort on an int field.
name|req
operator|=
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
literal|"value4_i"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"value3_s1"
argument_list|,
literal|"group.truncate"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|,
literal|"/grouped=={'value4_i':{'matches':5,'groups':[{'groupValue':1,'doclist':{'numFound':3,'start':0,'docs':[{'id':'1'}]}}]}}"
argument_list|,
literal|"/facet_counts=={'facet_queries':{},'facet_fields':{'value3_s1':['a',1,'b',1]},"
operator|+
name|EMPTY_FACETS
operator|+
literal|"}"
argument_list|)
expr_stmt|;
comment|// Multi select facets AND group.truncate=true
name|req
operator|=
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
literal|"value4_i"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!ex=v}value3_s1"
argument_list|,
literal|"group.truncate"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=v}value3_s1:b"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|,
literal|"/grouped=={'value4_i':{'matches':2,'groups':[{'groupValue':2,'doclist':{'numFound':2,'start':0,'docs':[{'id':'3'}]}}]}}"
argument_list|,
literal|"/facet_counts=={'facet_queries':{},'facet_fields':{'value3_s1':['a',1,'b',1]},"
operator|+
name|EMPTY_FACETS
operator|+
literal|"}"
argument_list|)
expr_stmt|;
comment|// Multi select facets AND group.truncate=false
name|req
operator|=
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
literal|"value4_i"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!ex=v}value3_s1"
argument_list|,
literal|"group.truncate"
argument_list|,
literal|"false"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=v}value3_s1:b"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|,
literal|"/grouped=={'value4_i':{'matches':2,'groups':[{'groupValue':2,'doclist':{'numFound':2,'start':0,'docs':[{'id':'3'}]}}]}}"
argument_list|,
literal|"/facet_counts=={'facet_queries':{},'facet_fields':{'value3_s1':['a',3,'b',2]},"
operator|+
name|EMPTY_FACETS
operator|+
literal|"}"
argument_list|)
expr_stmt|;
comment|// Multi select facets AND group.truncate=true
name|req
operator|=
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.func"
argument_list|,
literal|"sub(value4_i,1)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!ex=v}value3_s1"
argument_list|,
literal|"group.truncate"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=v}value3_s1:b"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|,
literal|"/grouped=={'sub(value4_i,1)':{'matches':2,'groups':[{'groupValue':1.0,'doclist':{'numFound':2,'start':0,'docs':[{'id':'3'}]}}]}}"
argument_list|,
literal|"/facet_counts=={'facet_queries':{},'facet_fields':{'value3_s1':['a',1,'b',1]},"
operator|+
name|EMPTY_FACETS
operator|+
literal|"}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGroupingGroupedBasedFacetingWithTaggedFilter
specifier|public
name|void
name|testGroupingGroupedBasedFacetingWithTaggedFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"cat_sI"
argument_list|,
literal|"a"
argument_list|,
literal|"bday"
argument_list|,
literal|"2012-11-20T00:00:00Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"cat_sI"
argument_list|,
literal|"b"
argument_list|,
literal|"bday"
argument_list|,
literal|"2012-11-21T00:00:00Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"cat_sI"
argument_list|,
literal|"a"
argument_list|,
literal|"bday"
argument_list|,
literal|"2012-11-20T00:00:00Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"cat_sI"
argument_list|,
literal|"b"
argument_list|,
literal|"bday"
argument_list|,
literal|"2013-01-15T00:00:00Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"cat_sI"
argument_list|,
literal|"a"
argument_list|,
literal|"bday"
argument_list|,
literal|"2013-01-14T00:00:00Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// Facet counts based on groups
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
literal|"cat_sI"
argument_list|,
literal|"sort"
argument_list|,
literal|"cat_sI asc"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=chk}bday:[2012-12-18T00:00:00Z TO 2013-01-17T23:59:59Z]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"group.truncate"
argument_list|,
literal|"true"
argument_list|,
literal|"group.sort"
argument_list|,
literal|"bday desc"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"{!ex=chk key=LW1}bday:[2013-01-11T00:00:00Z TO 2013-01-17T23:59:59Z]"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"{!ex=chk key=LM1}bday:[2012-12-18T00:00:00Z TO 2013-01-17T23:59:59Z]"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"{!ex=chk key=LM3}bday:[2012-10-18T00:00:00Z TO 2013-01-17T23:59:59Z]"
argument_list|)
decl_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|,
literal|"/grouped=={'cat_sI':{'matches':2,'groups':[{'groupValue':'a','doclist':{'numFound':1,'start':0,'docs':[{'id':'5'}]}}]}}"
argument_list|,
literal|"/facet_counts=={'facet_queries':{'LW1':2,'LM1':2,'LM3':2},'facet_fields':{},"
operator|+
name|EMPTY_FACETS
operator|+
literal|"}"
argument_list|)
expr_stmt|;
block|}
DECL|field|f
specifier|static
name|String
name|f
init|=
literal|"foo_i"
decl_stmt|;
DECL|field|f2
specifier|static
name|String
name|f2
init|=
literal|"foo2_i"
decl_stmt|;
DECL|method|createIndex
specifier|public
specifier|static
name|void
name|createIndex
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|f
argument_list|,
literal|"5"
argument_list|,
name|f2
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
name|f
argument_list|,
literal|"4"
argument_list|,
name|f2
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
name|f
argument_list|,
literal|"3"
argument_list|,
name|f2
argument_list|,
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
name|f
argument_list|,
literal|"2"
argument_list|,
name|f2
argument_list|,
literal|"6"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
name|f
argument_list|,
literal|"1"
argument_list|,
name|f2
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
name|f
argument_list|,
literal|"3"
argument_list|,
name|f2
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
name|f
argument_list|,
literal|"2"
argument_list|,
name|f2
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
name|f
argument_list|,
literal|"1"
argument_list|,
name|f2
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|,
name|f
argument_list|,
literal|"2"
argument_list|,
name|f2
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|,
name|f
argument_list|,
literal|"1"
argument_list|,
name|f2
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGroupAPI
specifier|public
name|void
name|testGroupAPI
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|()
expr_stmt|;
name|String
name|filt
init|=
name|f
operator|+
literal|":[* TO *]"
decl_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|f2
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|f
argument_list|)
argument_list|,
literal|"/response/lst[@name='grouped']/lst[@name='"
operator|+
name|f
operator|+
literal|"']/arr[@name='groups']"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|f2
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|f
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"/responseHeader/status==0"
comment|// exact match
argument_list|,
literal|"/responseHeader=={'_SKIP_':'QTime', 'status':0}"
comment|// partial match by skipping some elements
argument_list|,
literal|"/responseHeader=={'_MATCH_':'status', 'status':0}"
comment|// partial match by only including some elements
argument_list|,
literal|"/grouped=={'"
operator|+
name|f
operator|+
literal|"':{'matches':10,'groups':[\n"
operator|+
literal|"{'groupValue':1,'doclist':{'numFound':3,'start':0,'docs':[{'id':'8'}]}},"
operator|+
literal|"{'groupValue':3,'doclist':{'numFound':2,'start':0,'docs':[{'id':'3'}]}},"
operator|+
literal|"{'groupValue':2,'doclist':{'numFound':3,'start':0,'docs':[{'id':'4'}]}},"
operator|+
literal|"{'groupValue':5,'doclist':{'numFound':1,'start':0,'docs':[{'id':'1'}]}},"
operator|+
literal|"{'groupValue':4,'doclist':{'numFound':1,'start':0,'docs':[{'id':'2'}]}}"
operator|+
literal|"]}}"
argument_list|)
expr_stmt|;
comment|// test that filtering cuts down the result set
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|f2
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|f
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"fq"
argument_list|,
name|f
operator|+
literal|":2"
argument_list|)
argument_list|,
literal|"/grouped=={'"
operator|+
name|f
operator|+
literal|"':{'matches':3,'groups':["
operator|+
literal|"{'groupValue':2,'doclist':{'numFound':3,'start':0,'docs':[{'id':'4'}]}}"
operator|+
literal|"]}}"
argument_list|)
expr_stmt|;
comment|// test limiting the number of groups returned
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|f2
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|f
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"rows"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
literal|"/grouped=={'"
operator|+
name|f
operator|+
literal|"':{'matches':10,'groups':["
operator|+
literal|"{'groupValue':1,'doclist':{'numFound':3,'start':0,'docs':[{'id':'8'}]}},"
operator|+
literal|"{'groupValue':3,'doclist':{'numFound':2,'start':0,'docs':[{'id':'3'}]}}"
operator|+
literal|"]}}"
argument_list|)
expr_stmt|;
comment|// test offset into group list
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|f2
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|f
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"start"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"/grouped=={'"
operator|+
name|f
operator|+
literal|"':{'matches':10,'groups':["
operator|+
literal|"{'groupValue':3,'doclist':{'numFound':2,'start':0,'docs':[{'id':'3'}]}}"
operator|+
literal|"]}}"
argument_list|)
expr_stmt|;
comment|// test big offset into group list
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|f2
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|f
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"start"
argument_list|,
literal|"100"
argument_list|)
argument_list|,
literal|"/grouped=={'"
operator|+
name|f
operator|+
literal|"':{'matches':10,'groups':["
operator|+
literal|"]}}"
argument_list|)
expr_stmt|;
comment|// test increasing the docs per group returned
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|f2
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|f
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"rows"
argument_list|,
literal|"2"
argument_list|,
literal|"group.limit"
argument_list|,
literal|"3"
argument_list|)
argument_list|,
literal|"/grouped=={'"
operator|+
name|f
operator|+
literal|"':{'matches':10,'groups':["
operator|+
literal|"{'groupValue':1,'doclist':{'numFound':3,'start':0,'docs':[{'id':'8'},{'id':'10'},{'id':'5'}]}},"
operator|+
literal|"{'groupValue':3,'doclist':{'numFound':2,'start':0,'docs':[{'id':'3'},{'id':'6'}]}}"
operator|+
literal|"]}}"
argument_list|)
expr_stmt|;
comment|// test offset into each group
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|f2
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|f
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"rows"
argument_list|,
literal|"2"
argument_list|,
literal|"group.limit"
argument_list|,
literal|"3"
argument_list|,
literal|"group.offset"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"/grouped=={'"
operator|+
name|f
operator|+
literal|"':{'matches':10,'groups':["
operator|+
literal|"{'groupValue':1,'doclist':{'numFound':3,'start':1,'docs':[{'id':'10'},{'id':'5'}]}},"
operator|+
literal|"{'groupValue':3,'doclist':{'numFound':2,'start':1,'docs':[{'id':'6'}]}}"
operator|+
literal|"]}}"
argument_list|)
expr_stmt|;
comment|// test big offset into each group
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|f2
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|f
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"rows"
argument_list|,
literal|"2"
argument_list|,
literal|"group.limit"
argument_list|,
literal|"3"
argument_list|,
literal|"group.offset"
argument_list|,
literal|"10"
argument_list|)
argument_list|,
literal|"/grouped=={'"
operator|+
name|f
operator|+
literal|"':{'matches':10,'groups':["
operator|+
literal|"{'groupValue':1,'doclist':{'numFound':3,'start':10,'docs':[]}},"
operator|+
literal|"{'groupValue':3,'doclist':{'numFound':2,'start':10,'docs':[]}}"
operator|+
literal|"]}}"
argument_list|)
expr_stmt|;
comment|// test adding in scores
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|f2
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|f
argument_list|,
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|,
literal|"rows"
argument_list|,
literal|"2"
argument_list|,
literal|"group.limit"
argument_list|,
literal|"2"
argument_list|,
literal|"indent"
argument_list|,
literal|"off"
argument_list|)
argument_list|,
literal|"/grouped/"
operator|+
name|f
operator|+
literal|"/groups=="
operator|+
literal|"["
operator|+
literal|"{'groupValue':1,'doclist':{'numFound':3,'start':0,'maxScore':10.0,'docs':[{'id':'8','score':10.0},{'id':'10','score':3.0}]}},"
operator|+
literal|"{'groupValue':3,'doclist':{'numFound':2,'start':0,'maxScore':7.0,'docs':[{'id':'3','score':7.0},{'id':'6','score':2.0}]}}"
operator|+
literal|"]"
argument_list|)
expr_stmt|;
comment|// test function (functions are currently all float - this may change)
name|String
name|func
init|=
literal|"add("
operator|+
name|f
operator|+
literal|","
operator|+
name|f
operator|+
literal|")"
decl_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|f2
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.func"
argument_list|,
name|func
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"rows"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
literal|"/grouped=={'"
operator|+
name|func
operator|+
literal|"':{'matches':10,'groups':["
operator|+
literal|"{'groupValue':2.0,'doclist':{'numFound':3,'start':0,'docs':[{'id':'8'}]}},"
operator|+
literal|"{'groupValue':6.0,'doclist':{'numFound':2,'start':0,'docs':[{'id':'3'}]}}"
operator|+
literal|"]}}"
argument_list|)
expr_stmt|;
comment|// test that faceting works with grouping
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|f2
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|f
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|)
argument_list|,
literal|"/grouped/"
operator|+
name|f
operator|+
literal|"/matches==10"
argument_list|,
literal|"/facet_counts/facet_fields/"
operator|+
name|f
operator|+
literal|"==['1',3, '2',3, '3',2, '4',1, '5',1]"
argument_list|)
expr_stmt|;
comment|// test that grouping works with highlighting
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|f2
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|f
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|f
argument_list|)
argument_list|,
literal|"/grouped/"
operator|+
name|f
operator|+
literal|"/matches==10"
argument_list|,
literal|"/highlighting=={'_ORDERED_':'', '8':{},'3':{},'4':{},'1':{},'2':{}}"
argument_list|)
expr_stmt|;
comment|// test that grouping works with debugging
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|f2
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|f
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"debugQuery"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"/grouped/"
operator|+
name|f
operator|+
literal|"/matches==10"
argument_list|,
literal|"/debug/explain/8=="
argument_list|,
literal|"/debug/explain/2=="
argument_list|)
expr_stmt|;
comment|///////////////////////// group.query
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|f2
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.query"
argument_list|,
literal|"id:[2 TO 5]"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"group.limit"
argument_list|,
literal|"3"
argument_list|)
argument_list|,
literal|"/grouped=={'id:[2 TO 5]':{'matches':10,"
operator|+
literal|"'doclist':{'numFound':4,'start':0,'docs':[{'id':'3'},{'id':'4'},{'id':'2'}]}}}"
argument_list|)
expr_stmt|;
comment|// group.query that matches nothing
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|f2
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.query"
argument_list|,
literal|"id:[2 TO 5]"
argument_list|,
literal|"group.query"
argument_list|,
literal|"id:1000"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"group.limit"
argument_list|,
literal|"3"
argument_list|)
argument_list|,
literal|"/grouped/id:[2 TO 5]=={'matches':10,'doclist':{'numFound':4,'start':0,'docs':[{'id':'3'},{'id':'4'},{'id':'2'}]}}"
argument_list|,
literal|"/grouped/id:1000=={'matches':10,'doclist':{'numFound':0,'start':0,'docs':[]}}"
argument_list|)
expr_stmt|;
comment|// group.query and offset
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|f2
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.query"
argument_list|,
literal|"id:[2 TO 5]"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"group.limit"
argument_list|,
literal|"3"
argument_list|,
literal|"group.offset"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
literal|"/grouped=={'id:[2 TO 5]':{'matches':10,"
operator|+
literal|"'doclist':{'numFound':4,'start':2,'docs':[{'id':'2'},{'id':'5'}]}}}"
argument_list|)
expr_stmt|;
comment|// group.query and big offset
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|f2
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.query"
argument_list|,
literal|"id:[2 TO 5]"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"group.limit"
argument_list|,
literal|"3"
argument_list|,
literal|"group.offset"
argument_list|,
literal|"10"
argument_list|)
argument_list|,
literal|"/grouped=={'id:[2 TO 5]':{'matches':10,"
operator|+
literal|"'doclist':{'numFound':4,'start':10,'docs':[]}}}"
argument_list|)
expr_stmt|;
comment|///////////////////////// group.query as main result
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|f2
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.query"
argument_list|,
literal|"id:[2 TO 5]"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"rows"
argument_list|,
literal|"3"
argument_list|,
literal|"group.main"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"/response=={'numFound':4,'start':0,'docs':[{'id':'3'},{'id':'4'},{'id':'2'}]}"
argument_list|)
expr_stmt|;
comment|// group.query and offset
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|f2
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.query"
argument_list|,
literal|"id:[2 TO 5]"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"rows"
argument_list|,
literal|"3"
argument_list|,
literal|"start"
argument_list|,
literal|"2"
argument_list|,
literal|"group.main"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"/response=={'numFound':4,'start':2,'docs':[{'id':'2'},{'id':'5'}]}"
argument_list|)
expr_stmt|;
comment|// group.query and big offset
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|f2
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.query"
argument_list|,
literal|"id:[2 TO 5]"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"rows"
argument_list|,
literal|"3"
argument_list|,
literal|"start"
argument_list|,
literal|"10"
argument_list|,
literal|"group.main"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"/response=={'numFound':4,'start':10,'docs':[]}"
argument_list|)
expr_stmt|;
comment|// multiple at once
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|f2
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.query"
argument_list|,
literal|"id:[2 TO 5]"
argument_list|,
literal|"group.query"
argument_list|,
literal|"id:[5 TO 5]"
argument_list|,
literal|"group.field"
argument_list|,
name|f
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"group.limit"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
literal|"/grouped/id:[2 TO 5]=={'matches':10,'doclist':{'numFound':4,'start':0,'docs':[{'id':'3'},{'id':'4'}]}}"
argument_list|,
literal|"/grouped/id:[5 TO 5]=={'matches':10,'doclist':{'numFound':1,'start':0,'docs':[{'id':'5'}]}}"
argument_list|,
literal|"/grouped/"
operator|+
name|f
operator|+
literal|"=={'matches':10,'groups':[{'groupValue':1,'doclist':{'numFound':3,'start':0,'docs':[{'id':'8'},{'id':'10'}]}}]}"
argument_list|)
expr_stmt|;
comment|///////////////////////// group.field as main result
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|f2
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|f
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"group.main"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"/response=={'numFound':10,'start':0,'docs':[{'id':'8'},{'id':'3'},{'id':'4'},{'id':'1'},{'id':'2'}]}"
argument_list|)
expr_stmt|;
comment|// test that rows limits #docs
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|f2
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|f
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"rows"
argument_list|,
literal|"3"
argument_list|,
literal|"group.main"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"/response=={'numFound':10,'start':0,'docs':[{'id':'8'},{'id':'3'},{'id':'4'}]}"
argument_list|)
expr_stmt|;
comment|// small  offset
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|f2
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|f
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"rows"
argument_list|,
literal|"2"
argument_list|,
literal|"start"
argument_list|,
literal|"1"
argument_list|,
literal|"group.main"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"/response=={'numFound':10,'start':1,'docs':[{'id':'3'},{'id':'4'}]}"
argument_list|)
expr_stmt|;
comment|// large offset
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|f2
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|f
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"rows"
argument_list|,
literal|"2"
argument_list|,
literal|"start"
argument_list|,
literal|"20"
argument_list|,
literal|"group.main"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"/response=={'numFound':10,'start':20,'docs':[]}"
argument_list|)
expr_stmt|;
comment|// group.limit>1
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|f2
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|f
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"rows"
argument_list|,
literal|"3"
argument_list|,
literal|"group.limit"
argument_list|,
literal|"2"
argument_list|,
literal|"group.main"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"/response=={'numFound':10,'start':0,'docs':[{'id':'8'},{'id':'10'},{'id':'3'}]}"
argument_list|)
expr_stmt|;
comment|// group.limit>1 with start>0
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|f2
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|f
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"rows"
argument_list|,
literal|"3"
argument_list|,
literal|"start"
argument_list|,
literal|"1"
argument_list|,
literal|"group.limit"
argument_list|,
literal|"2"
argument_list|,
literal|"group.main"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"/response=={'numFound':10,'start':1,'docs':[{'id':'10'},{'id':'3'},{'id':'6'}]}"
argument_list|)
expr_stmt|;
comment|///////////////////////// group.format == simple
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|f2
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|f
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"rows"
argument_list|,
literal|"3"
argument_list|,
literal|"start"
argument_list|,
literal|"1"
argument_list|,
literal|"group.limit"
argument_list|,
literal|"2"
argument_list|,
literal|"group.format"
argument_list|,
literal|"simple"
argument_list|)
argument_list|,
literal|"/grouped/foo_i=={'matches':10,'doclist':"
operator|+
literal|"{'numFound':10,'start':1,'docs':[{'id':'10'},{'id':'3'},{'id':'6'}]}}"
argument_list|)
expr_stmt|;
comment|//////////////////////// grouping where main query matches nothing
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"bogus_s:nothing"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.field"
argument_list|,
name|f
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"group.limit"
argument_list|,
literal|"2"
argument_list|,
literal|"group.format"
argument_list|,
literal|"simple"
argument_list|)
argument_list|,
literal|"/grouped/foo_i=={'matches':0,'doclist':{'numFound':0,'start':0,'docs':[]}}"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"bogus_s:nothing"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.query"
argument_list|,
literal|"id:[2 TO 5]"
argument_list|,
literal|"group.query"
argument_list|,
literal|"id:[5 TO 5]"
argument_list|,
literal|"group.field"
argument_list|,
name|f
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"group.limit"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
literal|"/grouped/id:[2 TO 5]=={'matches':0,'doclist':{'numFound':0,'start':0,'docs':[]}}"
argument_list|,
literal|"/grouped/id:[5 TO 5]=={'matches':0,'doclist':{'numFound':0,'start':0,'docs':[]}}"
argument_list|,
literal|"/grouped/"
operator|+
name|f
operator|+
literal|"=={'matches':0,'groups':[]}"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
name|filt
argument_list|,
literal|"q"
argument_list|,
literal|"bogus_s:nothing"
argument_list|,
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"group.query"
argument_list|,
literal|"id:[2 TO 5]"
argument_list|,
literal|"group.query"
argument_list|,
literal|"id:1000"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"group.limit"
argument_list|,
literal|"3"
argument_list|)
argument_list|,
literal|"/grouped/id:[2 TO 5]=={'matches':0,'doclist':{'numFound':0,'start':0,'docs':[]}}"
argument_list|,
literal|"/grouped/id:1000=={'matches':0,'doclist':{'numFound':0,'start':0,'docs':[]}}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRandomGrouping
specifier|public
name|void
name|testRandomGrouping
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      updateJ("{\"add\":{\"doc\":{\"id\":\"77\"}}}", params("commit","true"));      assertJQ(req("q","id:77"), "/response/numFound==1");       Doc doc = createDocObj(types);      updateJ(toJSON(doc), params("commit","true"));       assertJQ(req("q","id:"+doc.id), "/response/numFound==1");     **/
name|int
name|indexIter
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
comment|// make>0 to enable test
name|int
name|queryIter
init|=
name|atLeast
argument_list|(
literal|50
argument_list|)
decl_stmt|;
while|while
condition|(
operator|--
name|indexIter
operator|>=
literal|0
condition|)
block|{
name|int
name|indexSize
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|25
operator|*
name|RANDOM_MULTIPLIER
argument_list|)
decl_stmt|;
comment|//indexSize=2;
name|List
argument_list|<
name|FldType
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"id"
argument_list|,
name|ONE_ONE
argument_list|,
operator|new
name|SVal
argument_list|(
literal|'A'
argument_list|,
literal|'Z'
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"score_f"
argument_list|,
name|ONE_ONE
argument_list|,
operator|new
name|FVal
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// field used to score
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"foo_i"
argument_list|,
name|ZERO_ONE
argument_list|,
operator|new
name|IRange
argument_list|(
literal|0
argument_list|,
name|indexSize
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
name|FOO_STRING_FIELD
argument_list|,
name|ONE_ONE
argument_list|,
operator|new
name|SVal
argument_list|(
literal|'a'
argument_list|,
literal|'z'
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
name|SMALL_STRING_FIELD
argument_list|,
name|ZERO_ONE
argument_list|,
operator|new
name|SVal
argument_list|(
literal|'a'
argument_list|,
call|(
name|char
call|)
argument_list|(
literal|'c'
operator|+
name|indexSize
operator|/
literal|10
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
name|SMALL_INT_FIELD
argument_list|,
name|ZERO_ONE
argument_list|,
operator|new
name|IRange
argument_list|(
literal|0
argument_list|,
literal|5
operator|+
name|indexSize
operator|/
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|Comparable
argument_list|,
name|Doc
argument_list|>
name|model
init|=
name|indexDocs
argument_list|(
name|types
argument_list|,
literal|null
argument_list|,
name|indexSize
argument_list|)
decl_stmt|;
comment|//System.out.println("############### model=" + model);
comment|// test with specific docs
if|if
condition|(
literal|false
condition|)
block|{
name|clearIndex
argument_list|()
expr_stmt|;
name|model
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Doc
name|d1
init|=
name|createDoc
argument_list|(
name|types
argument_list|)
decl_stmt|;
name|d1
operator|.
name|getValues
argument_list|(
name|SMALL_STRING_FIELD
argument_list|)
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|d1
operator|.
name|getValues
argument_list|(
name|SMALL_INT_FIELD
argument_list|)
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|d1
operator|.
name|order
operator|=
literal|0
expr_stmt|;
name|updateJ
argument_list|(
name|toJSON
argument_list|(
name|d1
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|put
argument_list|(
name|d1
operator|.
name|id
argument_list|,
name|d1
argument_list|)
expr_stmt|;
name|d1
operator|=
name|createDoc
argument_list|(
name|types
argument_list|)
expr_stmt|;
name|d1
operator|.
name|getValues
argument_list|(
name|SMALL_STRING_FIELD
argument_list|)
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|d1
operator|.
name|getValues
argument_list|(
name|SMALL_INT_FIELD
argument_list|)
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|d1
operator|.
name|order
operator|=
literal|1
expr_stmt|;
name|updateJ
argument_list|(
name|toJSON
argument_list|(
name|d1
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"commit"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|put
argument_list|(
name|d1
operator|.
name|id
argument_list|,
name|d1
argument_list|)
expr_stmt|;
name|d1
operator|=
name|createDoc
argument_list|(
name|types
argument_list|)
expr_stmt|;
name|d1
operator|.
name|getValues
argument_list|(
name|SMALL_STRING_FIELD
argument_list|)
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|d1
operator|.
name|getValues
argument_list|(
name|SMALL_INT_FIELD
argument_list|)
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|d1
operator|.
name|order
operator|=
literal|2
expr_stmt|;
name|updateJ
argument_list|(
name|toJSON
argument_list|(
name|d1
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"commit"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|put
argument_list|(
name|d1
operator|.
name|id
argument_list|,
name|d1
argument_list|)
expr_stmt|;
name|d1
operator|=
name|createDoc
argument_list|(
name|types
argument_list|)
expr_stmt|;
name|d1
operator|.
name|getValues
argument_list|(
name|SMALL_STRING_FIELD
argument_list|)
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|d1
operator|.
name|getValues
argument_list|(
name|SMALL_INT_FIELD
argument_list|)
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|d1
operator|.
name|order
operator|=
literal|3
expr_stmt|;
name|updateJ
argument_list|(
name|toJSON
argument_list|(
name|d1
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"commit"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|put
argument_list|(
name|d1
operator|.
name|id
argument_list|,
name|d1
argument_list|)
expr_stmt|;
name|d1
operator|=
name|createDoc
argument_list|(
name|types
argument_list|)
expr_stmt|;
name|d1
operator|.
name|getValues
argument_list|(
name|SMALL_STRING_FIELD
argument_list|)
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|d1
operator|.
name|getValues
argument_list|(
name|SMALL_INT_FIELD
argument_list|)
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|d1
operator|.
name|order
operator|=
literal|4
expr_stmt|;
name|updateJ
argument_list|(
name|toJSON
argument_list|(
name|d1
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|put
argument_list|(
name|d1
operator|.
name|id
argument_list|,
name|d1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|qiter
init|=
literal|0
init|;
name|qiter
operator|<
name|queryIter
condition|;
name|qiter
operator|++
control|)
block|{
name|String
name|groupField
init|=
name|types
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|types
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
operator|.
name|fname
decl_stmt|;
name|int
name|rows
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|?
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|model
operator|.
name|size
argument_list|()
operator|+
literal|2
argument_list|)
else|:
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|11
argument_list|)
operator|-
literal|1
decl_stmt|;
name|int
name|start
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|0
condition|?
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|model
operator|.
name|size
argument_list|()
operator|+
literal|2
argument_list|)
else|:
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
comment|// pick a small start normally for better coverage
name|int
name|group_limit
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|?
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|model
operator|.
name|size
argument_list|()
operator|+
literal|2
argument_list|)
else|:
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|11
argument_list|)
operator|-
literal|1
decl_stmt|;
name|int
name|group_offset
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|?
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|model
operator|.
name|size
argument_list|()
operator|+
literal|2
argument_list|)
else|:
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
comment|// pick a small start normally for better coverage
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|String
index|[]
name|stringSortA
init|=
operator|new
name|String
index|[
literal|1
index|]
decl_stmt|;
name|Comparator
argument_list|<
name|Doc
argument_list|>
name|sortComparator
init|=
name|createSort
argument_list|(
name|schema
argument_list|,
name|types
argument_list|,
name|stringSortA
argument_list|)
decl_stmt|;
name|String
name|sortStr
init|=
name|stringSortA
index|[
literal|0
index|]
decl_stmt|;
name|Comparator
argument_list|<
name|Doc
argument_list|>
name|groupComparator
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|sortComparator
else|:
name|createSort
argument_list|(
name|schema
argument_list|,
name|types
argument_list|,
name|stringSortA
argument_list|)
decl_stmt|;
name|String
name|groupSortStr
init|=
name|stringSortA
index|[
literal|0
index|]
decl_stmt|;
comment|// since groupSortStr defaults to sortStr, we need to normalize null to "score desc" if
comment|// sortStr != null.
if|if
condition|(
name|groupSortStr
operator|==
literal|null
operator|&&
name|groupSortStr
operator|!=
name|sortStr
condition|)
block|{
name|groupSortStr
operator|=
literal|"score desc"
expr_stmt|;
block|}
comment|// Test specific case
if|if
condition|(
literal|false
condition|)
block|{
name|groupField
operator|=
name|SMALL_INT_FIELD
expr_stmt|;
name|sortComparator
operator|=
name|createComparator
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|createComparator
argument_list|(
name|SMALL_STRING_FIELD
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sortStr
operator|=
name|SMALL_STRING_FIELD
operator|+
literal|" asc"
expr_stmt|;
name|groupComparator
operator|=
name|createComparator
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|createComparator
argument_list|(
name|SMALL_STRING_FIELD
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|groupSortStr
operator|=
name|SMALL_STRING_FIELD
operator|+
literal|" asc"
expr_stmt|;
name|rows
operator|=
literal|1
expr_stmt|;
name|start
operator|=
literal|0
expr_stmt|;
name|group_offset
operator|=
literal|1
expr_stmt|;
name|group_limit
operator|=
literal|1
expr_stmt|;
block|}
name|Map
argument_list|<
name|Comparable
argument_list|,
name|Grp
argument_list|>
name|groups
init|=
name|groupBy
argument_list|(
name|model
operator|.
name|values
argument_list|()
argument_list|,
name|groupField
argument_list|)
decl_stmt|;
comment|// first sort the docs in each group
for|for
control|(
name|Grp
name|grp
range|:
name|groups
operator|.
name|values
argument_list|()
control|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|grp
operator|.
name|docs
argument_list|,
name|groupComparator
argument_list|)
expr_stmt|;
block|}
comment|// now sort the groups
comment|// if sort != group.sort, we need to find the max doc by "sort"
if|if
condition|(
name|groupComparator
operator|!=
name|sortComparator
condition|)
block|{
for|for
control|(
name|Grp
name|grp
range|:
name|groups
operator|.
name|values
argument_list|()
control|)
name|grp
operator|.
name|setMaxDoc
argument_list|(
name|sortComparator
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Grp
argument_list|>
name|sortedGroups
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|groups
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedGroups
argument_list|,
name|groupComparator
operator|==
name|sortComparator
condition|?
name|createFirstDocComparator
argument_list|(
name|sortComparator
argument_list|)
else|:
name|createMaxDocComparator
argument_list|(
name|sortComparator
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|includeNGroups
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|Object
name|modelResponse
init|=
name|buildGroupedResult
argument_list|(
name|schema
argument_list|,
name|sortedGroups
argument_list|,
name|start
argument_list|,
name|rows
argument_list|,
name|group_offset
argument_list|,
name|group_limit
argument_list|,
name|includeNGroups
argument_list|)
decl_stmt|;
name|boolean
name|truncateGroups
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|facetCounts
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|truncateGroups
condition|)
block|{
for|for
control|(
name|Grp
name|grp
range|:
name|sortedGroups
control|)
block|{
name|Doc
name|doc
init|=
name|grp
operator|.
name|docs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|.
name|getValues
argument_list|(
name|FOO_STRING_FIELD
argument_list|)
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|key
init|=
name|doc
operator|.
name|getFirstValue
argument_list|(
name|FOO_STRING_FIELD
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|boolean
name|exists
init|=
name|facetCounts
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|exists
condition|?
name|facetCounts
operator|.
name|get
argument_list|(
name|key
argument_list|)
else|:
literal|0
decl_stmt|;
name|facetCounts
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|++
name|count
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Doc
name|doc
range|:
name|model
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|doc
operator|.
name|getValues
argument_list|(
name|FOO_STRING_FIELD
argument_list|)
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|Comparable
name|field
range|:
name|doc
operator|.
name|getValues
argument_list|(
name|FOO_STRING_FIELD
argument_list|)
control|)
block|{
name|String
name|key
init|=
name|field
operator|.
name|toString
argument_list|()
decl_stmt|;
name|boolean
name|exists
init|=
name|facetCounts
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|exists
condition|?
name|facetCounts
operator|.
name|get
argument_list|(
name|key
argument_list|)
else|:
literal|0
decl_stmt|;
name|facetCounts
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|++
name|count
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|List
argument_list|<
name|Comparable
argument_list|>
name|expectedFacetResponse
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|stringIntegerEntry
range|:
name|facetCounts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|expectedFacetResponse
operator|.
name|add
argument_list|(
name|stringIntegerEntry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|expectedFacetResponse
operator|.
name|add
argument_list|(
name|stringIntegerEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|randomPercentage
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|101
argument_list|)
decl_stmt|;
comment|// TODO: create a random filter too
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
literal|"group"
argument_list|,
literal|"true"
argument_list|,
literal|"wt"
argument_list|,
literal|"json"
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"echoParams"
argument_list|,
literal|"all"
argument_list|,
literal|"q"
argument_list|,
literal|"{!func}score_f"
argument_list|,
literal|"group.field"
argument_list|,
name|groupField
argument_list|,
name|sortStr
operator|==
literal|null
condition|?
literal|"nosort"
else|:
literal|"sort"
argument_list|,
name|sortStr
operator|==
literal|null
condition|?
literal|""
else|:
name|sortStr
argument_list|,
operator|(
name|groupSortStr
operator|==
literal|null
operator|||
name|groupSortStr
operator|==
name|sortStr
operator|)
condition|?
literal|"noGroupsort"
else|:
literal|"group.sort"
argument_list|,
name|groupSortStr
operator|==
literal|null
condition|?
literal|""
else|:
name|groupSortStr
argument_list|,
literal|"rows"
argument_list|,
literal|""
operator|+
name|rows
argument_list|,
literal|"start"
argument_list|,
literal|""
operator|+
name|start
argument_list|,
literal|"group.offset"
argument_list|,
literal|""
operator|+
name|group_offset
argument_list|,
literal|"group.limit"
argument_list|,
literal|""
operator|+
name|group_limit
argument_list|,
name|GroupParams
operator|.
name|GROUP_CACHE_PERCENTAGE
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|randomPercentage
argument_list|)
argument_list|,
name|GroupParams
operator|.
name|GROUP_TOTAL_COUNT
argument_list|,
name|includeNGroups
condition|?
literal|"true"
else|:
literal|"false"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"-1"
argument_list|,
literal|"facet.field"
argument_list|,
name|FOO_STRING_FIELD
argument_list|,
name|GroupParams
operator|.
name|GROUP_TRUNCATE
argument_list|,
name|truncateGroups
condition|?
literal|"true"
else|:
literal|"false"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.method"
argument_list|,
literal|"fcs"
comment|// to avoid FC insanity
argument_list|)
decl_stmt|;
name|String
name|strResponse
init|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|Object
name|realResponse
init|=
name|ObjectBuilder
operator|.
name|fromJSON
argument_list|(
name|strResponse
argument_list|)
decl_stmt|;
name|String
name|err
init|=
name|JSONTestUtil
operator|.
name|matchObj
argument_list|(
literal|"/grouped/"
operator|+
name|groupField
argument_list|,
name|realResponse
argument_list|,
name|modelResponse
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"GROUPING MISMATCH: "
operator|+
name|err
operator|+
literal|"\n\trequest="
operator|+
name|req
operator|+
literal|"\n\tresult="
operator|+
name|strResponse
operator|+
literal|"\n\texpected="
operator|+
name|JSONUtil
operator|.
name|toJSON
argument_list|(
name|modelResponse
argument_list|)
operator|+
literal|"\n\tsorted_model="
operator|+
name|sortedGroups
argument_list|)
expr_stmt|;
comment|// re-execute the request... good for putting a breakpoint here for debugging
name|String
name|rsp
init|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|fail
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
comment|// assert post / pre grouping facets
name|err
operator|=
name|JSONTestUtil
operator|.
name|matchObj
argument_list|(
literal|"/facet_counts/facet_fields/"
operator|+
name|FOO_STRING_FIELD
argument_list|,
name|realResponse
argument_list|,
name|expectedFacetResponse
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"GROUPING MISMATCH: "
operator|+
name|err
operator|+
literal|"\n\trequest="
operator|+
name|req
operator|+
literal|"\n\tresult="
operator|+
name|strResponse
operator|+
literal|"\n\texpected="
operator|+
name|JSONUtil
operator|.
name|toJSON
argument_list|(
name|expectedFacetResponse
argument_list|)
argument_list|)
expr_stmt|;
comment|// re-execute the request... good for putting a breakpoint here for debugging
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
block|}
comment|// end query iter
block|}
comment|// end index iter
block|}
DECL|method|buildGroupedResult
specifier|public
specifier|static
name|Object
name|buildGroupedResult
parameter_list|(
name|IndexSchema
name|schema
parameter_list|,
name|List
argument_list|<
name|Grp
argument_list|>
name|sortedGroups
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|rows
parameter_list|,
name|int
name|group_offset
parameter_list|,
name|int
name|group_limit
parameter_list|,
name|boolean
name|includeNGroups
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|matches
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Grp
name|grp
range|:
name|sortedGroups
control|)
block|{
name|matches
operator|+=
name|grp
operator|.
name|docs
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
literal|"matches"
argument_list|,
name|matches
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeNGroups
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
literal|"ngroups"
argument_list|,
name|sortedGroups
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
name|groupList
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"groups"
argument_list|,
name|groupList
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|sortedGroups
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|rows
operator|!=
operator|-
literal|1
operator|&&
name|groupList
operator|.
name|size
argument_list|()
operator|>=
name|rows
condition|)
break|break;
comment|// directly test rather than calculating, so we can catch any calc errors in the real code
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|group
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|groupList
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|Grp
name|grp
init|=
name|sortedGroups
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|group
operator|.
name|put
argument_list|(
literal|"groupValue"
argument_list|,
name|grp
operator|.
name|groupValue
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|resultSet
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|group
operator|.
name|put
argument_list|(
literal|"doclist"
argument_list|,
name|resultSet
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|put
argument_list|(
literal|"numFound"
argument_list|,
name|grp
operator|.
name|docs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|put
argument_list|(
literal|"start"
argument_list|,
name|group_offset
argument_list|)
expr_stmt|;
name|List
name|docs
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|resultSet
operator|.
name|put
argument_list|(
literal|"docs"
argument_list|,
name|docs
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
name|group_offset
init|;
name|j
operator|<
name|grp
operator|.
name|docs
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|group_limit
operator|!=
operator|-
literal|1
operator|&&
name|docs
operator|.
name|size
argument_list|()
operator|>=
name|group_limit
condition|)
break|break;
name|docs
operator|.
name|add
argument_list|(
name|grp
operator|.
name|docs
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|toObject
argument_list|(
name|schema
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|createMaxDocComparator
specifier|public
specifier|static
name|Comparator
argument_list|<
name|Grp
argument_list|>
name|createMaxDocComparator
parameter_list|(
specifier|final
name|Comparator
argument_list|<
name|Doc
argument_list|>
name|docComparator
parameter_list|)
block|{
return|return
operator|new
name|Comparator
argument_list|<
name|Grp
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Grp
name|o1
parameter_list|,
name|Grp
name|o2
parameter_list|)
block|{
comment|// all groups should have at least one doc
name|Doc
name|d1
init|=
name|o1
operator|.
name|maxDoc
decl_stmt|;
name|Doc
name|d2
init|=
name|o2
operator|.
name|maxDoc
decl_stmt|;
return|return
name|docComparator
operator|.
name|compare
argument_list|(
name|d1
argument_list|,
name|d2
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|createFirstDocComparator
specifier|public
specifier|static
name|Comparator
argument_list|<
name|Grp
argument_list|>
name|createFirstDocComparator
parameter_list|(
specifier|final
name|Comparator
argument_list|<
name|Doc
argument_list|>
name|docComparator
parameter_list|)
block|{
return|return
operator|new
name|Comparator
argument_list|<
name|Grp
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Grp
name|o1
parameter_list|,
name|Grp
name|o2
parameter_list|)
block|{
comment|// all groups should have at least one doc
name|Doc
name|d1
init|=
name|o1
operator|.
name|docs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Doc
name|d2
init|=
name|o2
operator|.
name|docs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|docComparator
operator|.
name|compare
argument_list|(
name|d1
argument_list|,
name|d2
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|groupBy
specifier|public
specifier|static
name|Map
argument_list|<
name|Comparable
argument_list|,
name|Grp
argument_list|>
name|groupBy
parameter_list|(
name|Collection
argument_list|<
name|Doc
argument_list|>
name|docs
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|Map
argument_list|<
name|Comparable
argument_list|,
name|Grp
argument_list|>
name|groups
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Doc
name|doc
range|:
name|docs
control|)
block|{
name|List
argument_list|<
name|Comparable
argument_list|>
name|vals
init|=
name|doc
operator|.
name|getValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|vals
operator|==
literal|null
condition|)
block|{
name|Grp
name|grp
init|=
name|groups
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|grp
operator|==
literal|null
condition|)
block|{
name|grp
operator|=
operator|new
name|Grp
argument_list|()
expr_stmt|;
name|grp
operator|.
name|groupValue
operator|=
literal|null
expr_stmt|;
name|grp
operator|.
name|docs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|groups
operator|.
name|put
argument_list|(
literal|null
argument_list|,
name|grp
argument_list|)
expr_stmt|;
block|}
name|grp
operator|.
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Comparable
name|val
range|:
name|vals
control|)
block|{
name|Grp
name|grp
init|=
name|groups
operator|.
name|get
argument_list|(
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
name|grp
operator|==
literal|null
condition|)
block|{
name|grp
operator|=
operator|new
name|Grp
argument_list|()
expr_stmt|;
name|grp
operator|.
name|groupValue
operator|=
name|val
expr_stmt|;
name|grp
operator|.
name|docs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|groups
operator|.
name|put
argument_list|(
name|grp
operator|.
name|groupValue
argument_list|,
name|grp
argument_list|)
expr_stmt|;
block|}
name|grp
operator|.
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|groups
return|;
block|}
DECL|class|Grp
specifier|public
specifier|static
class|class
name|Grp
block|{
DECL|field|groupValue
specifier|public
name|Comparable
name|groupValue
decl_stmt|;
DECL|field|docs
specifier|public
name|List
argument_list|<
name|Doc
argument_list|>
name|docs
decl_stmt|;
DECL|field|maxDoc
specifier|public
name|Doc
name|maxDoc
decl_stmt|;
comment|// the document highest according to the "sort" param
DECL|method|setMaxDoc
specifier|public
name|void
name|setMaxDoc
parameter_list|(
name|Comparator
argument_list|<
name|Doc
argument_list|>
name|comparator
parameter_list|)
block|{
name|Doc
index|[]
name|arr
init|=
name|docs
operator|.
name|toArray
argument_list|(
operator|new
name|Doc
index|[
name|docs
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|arr
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|maxDoc
operator|=
name|arr
operator|.
name|length
operator|>
literal|0
condition|?
name|arr
index|[
literal|0
index|]
else|:
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"{groupValue="
operator|+
name|groupValue
operator|+
literal|",docs="
operator|+
name|docs
operator|+
literal|"}"
return|;
block|}
block|}
block|}
end_class
end_unit
