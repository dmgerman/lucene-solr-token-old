begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analytics
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analytics
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|SuppressCodecs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
annotation|@
name|SuppressCodecs
argument_list|(
block|{
literal|"Lucene3x"
block|,
literal|"Lucene40"
block|,
literal|"Lucene41"
block|,
literal|"Lucene42"
block|,
literal|"Appending"
block|,
literal|"Asserting"
block|}
argument_list|)
DECL|class|NoFacetTest
specifier|public
class|class
name|NoFacetTest
extends|extends
name|AbstractAnalyticsStatsTest
block|{
DECL|field|fileName
specifier|static
name|String
name|fileName
init|=
literal|"core/src/test-files/analytics/requestFiles/noFacets.txt"
decl_stmt|;
DECL|field|INT
specifier|static
specifier|public
specifier|final
name|int
name|INT
init|=
literal|71
decl_stmt|;
DECL|field|LONG
specifier|static
specifier|public
specifier|final
name|int
name|LONG
init|=
literal|36
decl_stmt|;
DECL|field|FLOAT
specifier|static
specifier|public
specifier|final
name|int
name|FLOAT
init|=
literal|93
decl_stmt|;
DECL|field|DOUBLE
specifier|static
specifier|public
specifier|final
name|int
name|DOUBLE
init|=
literal|49
decl_stmt|;
DECL|field|DATE
specifier|static
specifier|public
specifier|final
name|int
name|DATE
init|=
literal|12
decl_stmt|;
DECL|field|STRING
specifier|static
specifier|public
specifier|final
name|int
name|STRING
init|=
literal|28
decl_stmt|;
DECL|field|NUM_LOOPS
specifier|static
specifier|public
specifier|final
name|int
name|NUM_LOOPS
init|=
literal|100
decl_stmt|;
comment|//INT
DECL|field|intTestStart
specifier|static
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|intTestStart
decl_stmt|;
DECL|field|intMissing
specifier|static
name|long
name|intMissing
init|=
literal|0
decl_stmt|;
comment|//LONG
DECL|field|longTestStart
specifier|static
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|longTestStart
decl_stmt|;
DECL|field|longMissing
specifier|static
name|long
name|longMissing
init|=
literal|0
decl_stmt|;
comment|//FLOAT
DECL|field|floatTestStart
specifier|static
name|ArrayList
argument_list|<
name|Float
argument_list|>
name|floatTestStart
decl_stmt|;
DECL|field|floatMissing
specifier|static
name|long
name|floatMissing
init|=
literal|0
decl_stmt|;
comment|//DOUBLE
DECL|field|doubleTestStart
specifier|static
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|doubleTestStart
decl_stmt|;
DECL|field|doubleMissing
specifier|static
name|long
name|doubleMissing
init|=
literal|0
decl_stmt|;
comment|//DATE
DECL|field|dateTestStart
specifier|static
name|ArrayList
argument_list|<
name|String
argument_list|>
name|dateTestStart
decl_stmt|;
DECL|field|dateMissing
specifier|static
name|long
name|dateMissing
init|=
literal|0
decl_stmt|;
comment|//STR
DECL|field|stringTestStart
specifier|static
name|ArrayList
argument_list|<
name|String
argument_list|>
name|stringTestStart
decl_stmt|;
DECL|field|stringMissing
specifier|static
name|long
name|stringMissing
init|=
literal|0
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-basic.xml"
argument_list|,
literal|"schema-analytics.xml"
argument_list|)
expr_stmt|;
name|h
operator|.
name|update
argument_list|(
literal|"<delete><query>*:*</query></delete>"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"int_id"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"long_ld"
argument_list|,
operator|new
name|Long
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"float_fd"
argument_list|,
operator|new
name|Float
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"double_dd"
argument_list|,
operator|new
name|Double
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"date_dtd"
argument_list|,
literal|"1800-12-31T23:59:59Z"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"string_sd"
argument_list|,
literal|"str0"
argument_list|)
expr_stmt|;
name|intTestStart
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|longTestStart
operator|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|floatTestStart
operator|=
operator|new
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|()
expr_stmt|;
name|doubleTestStart
operator|=
operator|new
name|ArrayList
argument_list|<
name|Double
argument_list|>
argument_list|()
expr_stmt|;
name|dateTestStart
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|stringTestStart
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NUM_LOOPS
condition|;
operator|++
name|j
control|)
block|{
name|int
name|i
init|=
name|j
operator|%
name|INT
decl_stmt|;
name|long
name|l
init|=
name|j
operator|%
name|LONG
decl_stmt|;
name|float
name|f
init|=
name|j
operator|%
name|FLOAT
decl_stmt|;
name|double
name|d
init|=
name|j
operator|%
name|DOUBLE
decl_stmt|;
name|String
name|dt
init|=
operator|(
literal|1800
operator|+
name|j
operator|%
name|DATE
operator|)
operator|+
literal|"-12-31T23:59:59Z"
decl_stmt|;
name|String
name|s
init|=
literal|"str"
operator|+
operator|(
name|j
operator|%
name|STRING
operator|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|"1000"
operator|+
name|j
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
literal|"int_id"
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|""
operator|+
name|i
argument_list|)
expr_stmt|;
name|intTestStart
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
else|else
name|intMissing
operator|++
expr_stmt|;
if|if
condition|(
name|l
operator|!=
literal|0l
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
literal|"long_ld"
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|""
operator|+
name|l
argument_list|)
expr_stmt|;
name|longTestStart
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
else|else
name|longMissing
operator|++
expr_stmt|;
if|if
condition|(
name|f
operator|!=
literal|0.0f
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
literal|"float_fd"
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|""
operator|+
name|f
argument_list|)
expr_stmt|;
name|floatTestStart
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
else|else
name|floatMissing
operator|++
expr_stmt|;
if|if
condition|(
name|d
operator|!=
literal|0.0d
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
literal|"double_dd"
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|""
operator|+
name|d
argument_list|)
expr_stmt|;
name|doubleTestStart
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
else|else
name|doubleMissing
operator|++
expr_stmt|;
if|if
condition|(
operator|(
name|j
operator|%
name|DATE
operator|)
operator|!=
literal|0
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
literal|"date_dtd"
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
name|dt
argument_list|)
expr_stmt|;
name|dateTestStart
operator|.
name|add
argument_list|(
name|dt
argument_list|)
expr_stmt|;
block|}
else|else
name|dateMissing
operator|++
expr_stmt|;
if|if
condition|(
operator|(
name|j
operator|%
name|STRING
operator|)
operator|!=
literal|0
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
literal|"string_sd"
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|stringTestStart
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
else|else
name|stringMissing
operator|++
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|"int_i"
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|""
operator|+
name|i
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|"long_l"
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|""
operator|+
name|l
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|"float_f"
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|""
operator|+
name|f
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|"double_d"
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|""
operator|+
name|d
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|fields
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|usually
argument_list|()
condition|)
block|{
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// to have several segments
block|}
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|//Sort ascending tests
name|setResponse
argument_list|(
name|h
operator|.
name|query
argument_list|(
name|request
argument_list|(
name|fileToStringArr
argument_list|(
name|fileName
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sumTest
specifier|public
name|void
name|sumTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Int
name|Double
name|intResult
init|=
operator|(
name|Double
operator|)
name|getStatResult
argument_list|(
literal|"sr"
argument_list|,
literal|"int_id"
argument_list|,
name|VAL_TYPE
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
name|Double
name|intTest
init|=
operator|(
name|Double
operator|)
name|calculateNumberStat
argument_list|(
name|intTestStart
argument_list|,
literal|"sum"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|intResult
argument_list|,
name|intTest
argument_list|)
expr_stmt|;
comment|//Long
name|Double
name|longResult
init|=
operator|(
name|Double
operator|)
name|getStatResult
argument_list|(
literal|"sr"
argument_list|,
literal|"long_ld"
argument_list|,
name|VAL_TYPE
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
name|Double
name|longTest
init|=
operator|(
name|Double
operator|)
name|calculateNumberStat
argument_list|(
name|longTestStart
argument_list|,
literal|"sum"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|longResult
argument_list|,
name|longTest
argument_list|)
expr_stmt|;
comment|//Float
name|Double
name|floatResult
init|=
operator|(
name|Double
operator|)
name|getStatResult
argument_list|(
literal|"sr"
argument_list|,
literal|"float_fd"
argument_list|,
name|VAL_TYPE
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
name|Double
name|floatTest
init|=
operator|(
name|Double
operator|)
name|calculateNumberStat
argument_list|(
name|floatTestStart
argument_list|,
literal|"sum"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|floatResult
argument_list|,
name|floatTest
argument_list|)
expr_stmt|;
comment|//Double
name|Double
name|doubleResult
init|=
operator|(
name|Double
operator|)
name|getStatResult
argument_list|(
literal|"sr"
argument_list|,
literal|"double_dd"
argument_list|,
name|VAL_TYPE
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
name|Double
name|doubleTest
init|=
operator|(
name|Double
operator|)
name|calculateNumberStat
argument_list|(
name|doubleTestStart
argument_list|,
literal|"sum"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|doubleResult
argument_list|,
name|doubleTest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sumOfSquaresTest
specifier|public
name|void
name|sumOfSquaresTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Int
name|Double
name|intResult
init|=
operator|(
name|Double
operator|)
name|getStatResult
argument_list|(
literal|"sosr"
argument_list|,
literal|"int_id"
argument_list|,
name|VAL_TYPE
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
name|Double
name|intTest
init|=
operator|(
name|Double
operator|)
name|calculateNumberStat
argument_list|(
name|intTestStart
argument_list|,
literal|"sumOfSquares"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|intResult
argument_list|,
name|intTest
argument_list|)
expr_stmt|;
comment|//Long
name|Double
name|longResult
init|=
operator|(
name|Double
operator|)
name|getStatResult
argument_list|(
literal|"sosr"
argument_list|,
literal|"long_ld"
argument_list|,
name|VAL_TYPE
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
name|Double
name|longTest
init|=
operator|(
name|Double
operator|)
name|calculateNumberStat
argument_list|(
name|longTestStart
argument_list|,
literal|"sumOfSquares"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|longResult
argument_list|,
name|longTest
argument_list|)
expr_stmt|;
comment|//Float
name|Double
name|floatResult
init|=
operator|(
name|Double
operator|)
name|getStatResult
argument_list|(
literal|"sosr"
argument_list|,
literal|"float_fd"
argument_list|,
name|VAL_TYPE
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
name|Double
name|floatTest
init|=
operator|(
name|Double
operator|)
name|calculateNumberStat
argument_list|(
name|floatTestStart
argument_list|,
literal|"sumOfSquares"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|floatResult
argument_list|,
name|floatTest
argument_list|)
expr_stmt|;
comment|//Double
name|Double
name|doubleResult
init|=
operator|(
name|Double
operator|)
name|getStatResult
argument_list|(
literal|"sosr"
argument_list|,
literal|"double_dd"
argument_list|,
name|VAL_TYPE
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
name|Double
name|doubleTest
init|=
operator|(
name|Double
operator|)
name|calculateNumberStat
argument_list|(
name|doubleTestStart
argument_list|,
literal|"sumOfSquares"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|doubleResult
argument_list|,
name|doubleTest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|meanTest
specifier|public
name|void
name|meanTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Int
name|Double
name|intResult
init|=
operator|(
name|Double
operator|)
name|getStatResult
argument_list|(
literal|"mr"
argument_list|,
literal|"int_id"
argument_list|,
name|VAL_TYPE
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
name|Double
name|intTest
init|=
operator|(
name|Double
operator|)
name|calculateNumberStat
argument_list|(
name|intTestStart
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|intResult
argument_list|,
name|intTest
argument_list|)
expr_stmt|;
comment|//Long
name|Double
name|longResult
init|=
operator|(
name|Double
operator|)
name|getStatResult
argument_list|(
literal|"mr"
argument_list|,
literal|"long_ld"
argument_list|,
name|VAL_TYPE
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
name|Double
name|longTest
init|=
operator|(
name|Double
operator|)
name|calculateNumberStat
argument_list|(
name|longTestStart
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|longResult
argument_list|,
name|longTest
argument_list|)
expr_stmt|;
comment|//Float
name|Double
name|floatResult
init|=
operator|(
name|Double
operator|)
name|getStatResult
argument_list|(
literal|"mr"
argument_list|,
literal|"float_fd"
argument_list|,
name|VAL_TYPE
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
name|Double
name|floatTest
init|=
operator|(
name|Double
operator|)
name|calculateNumberStat
argument_list|(
name|floatTestStart
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|floatResult
argument_list|,
name|floatTest
argument_list|)
expr_stmt|;
comment|//Double
name|Double
name|doubleResult
init|=
operator|(
name|Double
operator|)
name|getStatResult
argument_list|(
literal|"mr"
argument_list|,
literal|"double_dd"
argument_list|,
name|VAL_TYPE
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
name|Double
name|doubleTest
init|=
operator|(
name|Double
operator|)
name|calculateNumberStat
argument_list|(
name|doubleTestStart
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|doubleResult
argument_list|,
name|doubleTest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|stddevTest
specifier|public
name|void
name|stddevTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Int
name|Double
name|intResult
init|=
operator|(
name|Double
operator|)
name|getStatResult
argument_list|(
literal|"str"
argument_list|,
literal|"int_id"
argument_list|,
name|VAL_TYPE
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
name|Double
name|intTest
init|=
operator|(
name|Double
operator|)
name|calculateNumberStat
argument_list|(
name|intTestStart
argument_list|,
literal|"stddev"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|intResult
operator|-
name|intTest
argument_list|)
operator|<
literal|.00000000001
argument_list|)
expr_stmt|;
comment|//Long
name|Double
name|longResult
init|=
operator|(
name|Double
operator|)
name|getStatResult
argument_list|(
literal|"str"
argument_list|,
literal|"long_ld"
argument_list|,
name|VAL_TYPE
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
name|Double
name|longTest
init|=
operator|(
name|Double
operator|)
name|calculateNumberStat
argument_list|(
name|longTestStart
argument_list|,
literal|"stddev"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|longResult
operator|-
name|longTest
argument_list|)
operator|<
literal|.00000000001
argument_list|)
expr_stmt|;
comment|//Float
name|Double
name|floatResult
init|=
operator|(
name|Double
operator|)
name|getStatResult
argument_list|(
literal|"str"
argument_list|,
literal|"float_fd"
argument_list|,
name|VAL_TYPE
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
name|Double
name|floatTest
init|=
operator|(
name|Double
operator|)
name|calculateNumberStat
argument_list|(
name|floatTestStart
argument_list|,
literal|"stddev"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Oops: (double raws) "
operator|+
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
name|floatResult
argument_list|)
operator|+
literal|" - "
operator|+
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
name|floatTest
argument_list|)
operator|+
literal|"< "
operator|+
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
literal|.00000000001
argument_list|)
operator|+
literal|" Calculated diff "
operator|+
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
name|floatResult
operator|-
name|floatTest
argument_list|)
operator|+
literal|" Let's see what the JVM thinks these bits are. FloatResult:  "
operator|+
name|floatResult
operator|.
name|toString
argument_list|()
operator|+
literal|" floatTest: "
operator|+
name|floatTest
operator|.
name|toString
argument_list|()
operator|+
literal|" Diff "
operator|+
name|Double
operator|.
name|toString
argument_list|(
name|floatResult
operator|-
name|floatTest
argument_list|)
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|floatResult
operator|-
name|floatTest
argument_list|)
operator|<
literal|.00000000001
argument_list|)
expr_stmt|;
comment|//Double
name|Double
name|doubleResult
init|=
operator|(
name|Double
operator|)
name|getStatResult
argument_list|(
literal|"str"
argument_list|,
literal|"double_dd"
argument_list|,
name|VAL_TYPE
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
name|Double
name|doubleTest
init|=
operator|(
name|Double
operator|)
name|calculateNumberStat
argument_list|(
name|doubleTestStart
argument_list|,
literal|"stddev"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|doubleResult
operator|-
name|doubleTest
argument_list|)
operator|<
literal|.00000000001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|medianTest
specifier|public
name|void
name|medianTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Int
name|Double
name|intResult
init|=
operator|(
name|Double
operator|)
name|getStatResult
argument_list|(
literal|"medr"
argument_list|,
literal|"int_id"
argument_list|,
name|VAL_TYPE
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
name|Double
name|intTest
init|=
operator|(
name|Double
operator|)
name|calculateNumberStat
argument_list|(
name|intTestStart
argument_list|,
literal|"median"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|intResult
argument_list|,
name|intTest
argument_list|)
expr_stmt|;
comment|//Long
name|Double
name|longResult
init|=
operator|(
name|Double
operator|)
name|getStatResult
argument_list|(
literal|"medr"
argument_list|,
literal|"long_ld"
argument_list|,
name|VAL_TYPE
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
name|Double
name|longTest
init|=
operator|(
name|Double
operator|)
name|calculateNumberStat
argument_list|(
name|longTestStart
argument_list|,
literal|"median"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|longResult
argument_list|,
name|longTest
argument_list|)
expr_stmt|;
comment|//Float
name|Double
name|floatResult
init|=
operator|(
name|Double
operator|)
name|getStatResult
argument_list|(
literal|"medr"
argument_list|,
literal|"float_fd"
argument_list|,
name|VAL_TYPE
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
name|Double
name|floatTest
init|=
operator|(
name|Double
operator|)
name|calculateNumberStat
argument_list|(
name|floatTestStart
argument_list|,
literal|"median"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|floatResult
argument_list|,
name|floatTest
argument_list|)
expr_stmt|;
comment|//Double
name|Double
name|doubleResult
init|=
operator|(
name|Double
operator|)
name|getStatResult
argument_list|(
literal|"medr"
argument_list|,
literal|"double_dd"
argument_list|,
name|VAL_TYPE
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
name|Double
name|doubleTest
init|=
operator|(
name|Double
operator|)
name|calculateNumberStat
argument_list|(
name|doubleTestStart
argument_list|,
literal|"median"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|doubleResult
argument_list|,
name|doubleTest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|perc20Test
specifier|public
name|void
name|perc20Test
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Int 20
name|Integer
name|intResult
init|=
operator|(
name|Integer
operator|)
name|getStatResult
argument_list|(
literal|"p2r"
argument_list|,
literal|"int_id"
argument_list|,
name|VAL_TYPE
operator|.
name|INTEGER
argument_list|)
decl_stmt|;
name|Integer
name|intTest
init|=
operator|(
name|Integer
operator|)
name|calculateStat
argument_list|(
name|intTestStart
argument_list|,
literal|"perc_20"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|intResult
argument_list|,
name|intTest
argument_list|)
expr_stmt|;
comment|//Long 20
name|Long
name|longResult
init|=
operator|(
name|Long
operator|)
name|getStatResult
argument_list|(
literal|"p2r"
argument_list|,
literal|"long_ld"
argument_list|,
name|VAL_TYPE
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|Long
name|longTest
init|=
operator|(
name|Long
operator|)
name|calculateStat
argument_list|(
name|longTestStart
argument_list|,
literal|"perc_20"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|longResult
argument_list|,
name|longTest
argument_list|)
expr_stmt|;
comment|//Float 20
name|Float
name|floatResult
init|=
operator|(
name|Float
operator|)
name|getStatResult
argument_list|(
literal|"p2r"
argument_list|,
literal|"float_fd"
argument_list|,
name|VAL_TYPE
operator|.
name|FLOAT
argument_list|)
decl_stmt|;
name|Float
name|floatTest
init|=
operator|(
name|Float
operator|)
name|calculateStat
argument_list|(
name|floatTestStart
argument_list|,
literal|"perc_20"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|floatResult
argument_list|,
name|floatTest
argument_list|)
expr_stmt|;
comment|//Double 20
name|Double
name|doubleResult
init|=
operator|(
name|Double
operator|)
name|getStatResult
argument_list|(
literal|"p2r"
argument_list|,
literal|"double_dd"
argument_list|,
name|VAL_TYPE
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
name|Double
name|doubleTest
init|=
operator|(
name|Double
operator|)
name|calculateStat
argument_list|(
name|doubleTestStart
argument_list|,
literal|"perc_20"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|doubleResult
argument_list|,
name|doubleTest
argument_list|)
expr_stmt|;
comment|//Date 20
name|String
name|dateResult
init|=
operator|(
name|String
operator|)
name|getStatResult
argument_list|(
literal|"p2r"
argument_list|,
literal|"date_dtd"
argument_list|,
name|VAL_TYPE
operator|.
name|DATE
argument_list|)
decl_stmt|;
name|String
name|dateTest
init|=
operator|(
name|String
operator|)
name|calculateStat
argument_list|(
name|dateTestStart
argument_list|,
literal|"perc_20"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dateResult
argument_list|,
name|dateTest
argument_list|)
expr_stmt|;
comment|//String 20
name|String
name|stringResult
init|=
operator|(
name|String
operator|)
name|getStatResult
argument_list|(
literal|"p2r"
argument_list|,
literal|"string_sd"
argument_list|,
name|VAL_TYPE
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|String
name|stringTest
init|=
operator|(
name|String
operator|)
name|calculateStat
argument_list|(
name|stringTestStart
argument_list|,
literal|"perc_20"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|stringResult
argument_list|,
name|stringTest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|perc60Test
specifier|public
name|void
name|perc60Test
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Int 60
name|Integer
name|intResult
init|=
operator|(
name|Integer
operator|)
name|getStatResult
argument_list|(
literal|"p6r"
argument_list|,
literal|"int_id"
argument_list|,
name|VAL_TYPE
operator|.
name|INTEGER
argument_list|)
decl_stmt|;
name|Integer
name|intTest
init|=
operator|(
name|Integer
operator|)
name|calculateStat
argument_list|(
name|intTestStart
argument_list|,
literal|"perc_60"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|intResult
argument_list|,
name|intTest
argument_list|)
expr_stmt|;
comment|//Long 60
name|Long
name|longResult
init|=
operator|(
name|Long
operator|)
name|getStatResult
argument_list|(
literal|"p6r"
argument_list|,
literal|"long_ld"
argument_list|,
name|VAL_TYPE
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|Long
name|longTest
init|=
operator|(
name|Long
operator|)
name|calculateStat
argument_list|(
name|longTestStart
argument_list|,
literal|"perc_60"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|longResult
argument_list|,
name|longTest
argument_list|)
expr_stmt|;
comment|//Float 60
name|Float
name|floatResult
init|=
operator|(
name|Float
operator|)
name|getStatResult
argument_list|(
literal|"p6r"
argument_list|,
literal|"float_fd"
argument_list|,
name|VAL_TYPE
operator|.
name|FLOAT
argument_list|)
decl_stmt|;
name|Float
name|floatTest
init|=
operator|(
name|Float
operator|)
name|calculateStat
argument_list|(
name|floatTestStart
argument_list|,
literal|"perc_60"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|floatResult
argument_list|,
name|floatTest
argument_list|)
expr_stmt|;
comment|//Double 60
name|Double
name|doubleResult
init|=
operator|(
name|Double
operator|)
name|getStatResult
argument_list|(
literal|"p6r"
argument_list|,
literal|"double_dd"
argument_list|,
name|VAL_TYPE
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
name|Double
name|doubleTest
init|=
operator|(
name|Double
operator|)
name|calculateStat
argument_list|(
name|doubleTestStart
argument_list|,
literal|"perc_60"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|doubleResult
argument_list|,
name|doubleTest
argument_list|)
expr_stmt|;
comment|//Date 60
name|String
name|dateResult
init|=
operator|(
name|String
operator|)
name|getStatResult
argument_list|(
literal|"p6r"
argument_list|,
literal|"date_dtd"
argument_list|,
name|VAL_TYPE
operator|.
name|DATE
argument_list|)
decl_stmt|;
name|String
name|dateTest
init|=
operator|(
name|String
operator|)
name|calculateStat
argument_list|(
name|dateTestStart
argument_list|,
literal|"perc_60"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dateResult
argument_list|,
name|dateTest
argument_list|)
expr_stmt|;
comment|//String 60
name|String
name|stringResult
init|=
operator|(
name|String
operator|)
name|getStatResult
argument_list|(
literal|"p6r"
argument_list|,
literal|"string_sd"
argument_list|,
name|VAL_TYPE
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|String
name|stringTest
init|=
operator|(
name|String
operator|)
name|calculateStat
argument_list|(
name|stringTestStart
argument_list|,
literal|"perc_60"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|stringResult
argument_list|,
name|stringTest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|minTest
specifier|public
name|void
name|minTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Int
name|Integer
name|intResult
init|=
operator|(
name|Integer
operator|)
name|getStatResult
argument_list|(
literal|"mir"
argument_list|,
literal|"int_id"
argument_list|,
name|VAL_TYPE
operator|.
name|INTEGER
argument_list|)
decl_stmt|;
name|Integer
name|intTest
init|=
operator|(
name|Integer
operator|)
name|calculateStat
argument_list|(
name|intTestStart
argument_list|,
literal|"min"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|intResult
argument_list|,
name|intTest
argument_list|)
expr_stmt|;
comment|//Long
name|Long
name|longResult
init|=
operator|(
name|Long
operator|)
name|getStatResult
argument_list|(
literal|"mir"
argument_list|,
literal|"long_ld"
argument_list|,
name|VAL_TYPE
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|Long
name|longTest
init|=
operator|(
name|Long
operator|)
name|calculateStat
argument_list|(
name|longTestStart
argument_list|,
literal|"min"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|longResult
argument_list|,
name|longTest
argument_list|)
expr_stmt|;
comment|//Float
name|Float
name|floatResult
init|=
operator|(
name|Float
operator|)
name|getStatResult
argument_list|(
literal|"mir"
argument_list|,
literal|"float_fd"
argument_list|,
name|VAL_TYPE
operator|.
name|FLOAT
argument_list|)
decl_stmt|;
name|Float
name|floatTest
init|=
operator|(
name|Float
operator|)
name|calculateStat
argument_list|(
name|floatTestStart
argument_list|,
literal|"min"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|floatResult
argument_list|,
name|floatTest
argument_list|)
expr_stmt|;
comment|//Double
name|Double
name|doubleResult
init|=
operator|(
name|Double
operator|)
name|getStatResult
argument_list|(
literal|"mir"
argument_list|,
literal|"double_dd"
argument_list|,
name|VAL_TYPE
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
name|Double
name|doubleTest
init|=
operator|(
name|Double
operator|)
name|calculateStat
argument_list|(
name|doubleTestStart
argument_list|,
literal|"min"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|doubleResult
argument_list|,
name|doubleTest
argument_list|)
expr_stmt|;
comment|//Date
name|String
name|dateResult
init|=
operator|(
name|String
operator|)
name|getStatResult
argument_list|(
literal|"mir"
argument_list|,
literal|"date_dtd"
argument_list|,
name|VAL_TYPE
operator|.
name|DATE
argument_list|)
decl_stmt|;
name|String
name|dateTest
init|=
operator|(
name|String
operator|)
name|calculateStat
argument_list|(
name|dateTestStart
argument_list|,
literal|"min"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dateResult
argument_list|,
name|dateTest
argument_list|)
expr_stmt|;
comment|//String
name|String
name|stringResult
init|=
operator|(
name|String
operator|)
name|getStatResult
argument_list|(
literal|"mir"
argument_list|,
literal|"string_sd"
argument_list|,
name|VAL_TYPE
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|String
name|stringTest
init|=
operator|(
name|String
operator|)
name|calculateStat
argument_list|(
name|stringTestStart
argument_list|,
literal|"min"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|stringResult
argument_list|,
name|stringTest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|maxTest
specifier|public
name|void
name|maxTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Int
name|Integer
name|intResult
init|=
operator|(
name|Integer
operator|)
name|getStatResult
argument_list|(
literal|"mar"
argument_list|,
literal|"int_id"
argument_list|,
name|VAL_TYPE
operator|.
name|INTEGER
argument_list|)
decl_stmt|;
name|Integer
name|intTest
init|=
operator|(
name|Integer
operator|)
name|calculateStat
argument_list|(
name|intTestStart
argument_list|,
literal|"max"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|intResult
argument_list|,
name|intTest
argument_list|)
expr_stmt|;
comment|//Long
name|Long
name|longResult
init|=
operator|(
name|Long
operator|)
name|getStatResult
argument_list|(
literal|"mar"
argument_list|,
literal|"long_ld"
argument_list|,
name|VAL_TYPE
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|Long
name|longTest
init|=
operator|(
name|Long
operator|)
name|calculateStat
argument_list|(
name|longTestStart
argument_list|,
literal|"max"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|longResult
argument_list|,
name|longTest
argument_list|)
expr_stmt|;
comment|//Float
name|Float
name|floatResult
init|=
operator|(
name|Float
operator|)
name|getStatResult
argument_list|(
literal|"mar"
argument_list|,
literal|"float_fd"
argument_list|,
name|VAL_TYPE
operator|.
name|FLOAT
argument_list|)
decl_stmt|;
name|Float
name|floatTest
init|=
operator|(
name|Float
operator|)
name|calculateStat
argument_list|(
name|floatTestStart
argument_list|,
literal|"max"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|floatResult
argument_list|,
name|floatTest
argument_list|)
expr_stmt|;
comment|//Double
name|Double
name|doubleResult
init|=
operator|(
name|Double
operator|)
name|getStatResult
argument_list|(
literal|"mar"
argument_list|,
literal|"double_dd"
argument_list|,
name|VAL_TYPE
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
name|Double
name|doubleTest
init|=
operator|(
name|Double
operator|)
name|calculateStat
argument_list|(
name|doubleTestStart
argument_list|,
literal|"max"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|doubleResult
argument_list|,
name|doubleTest
argument_list|)
expr_stmt|;
comment|//Date
name|String
name|dateResult
init|=
operator|(
name|String
operator|)
name|getStatResult
argument_list|(
literal|"mar"
argument_list|,
literal|"date_dtd"
argument_list|,
name|VAL_TYPE
operator|.
name|DATE
argument_list|)
decl_stmt|;
name|String
name|dateTest
init|=
operator|(
name|String
operator|)
name|calculateStat
argument_list|(
name|dateTestStart
argument_list|,
literal|"max"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dateResult
argument_list|,
name|dateTest
argument_list|)
expr_stmt|;
comment|//String
name|String
name|stringResult
init|=
operator|(
name|String
operator|)
name|getStatResult
argument_list|(
literal|"mar"
argument_list|,
literal|"string_sd"
argument_list|,
name|VAL_TYPE
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|String
name|stringTest
init|=
operator|(
name|String
operator|)
name|calculateStat
argument_list|(
name|stringTestStart
argument_list|,
literal|"max"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|stringResult
argument_list|,
name|stringTest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|uniqueTest
specifier|public
name|void
name|uniqueTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Int
name|Long
name|intResult
init|=
operator|(
name|Long
operator|)
name|getStatResult
argument_list|(
literal|"ur"
argument_list|,
literal|"int_id"
argument_list|,
name|VAL_TYPE
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|Long
name|intTest
init|=
operator|(
name|Long
operator|)
name|calculateStat
argument_list|(
name|intTestStart
argument_list|,
literal|"unique"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|intResult
argument_list|,
name|intTest
argument_list|)
expr_stmt|;
comment|//Long
name|Long
name|longResult
init|=
operator|(
name|Long
operator|)
name|getStatResult
argument_list|(
literal|"ur"
argument_list|,
literal|"long_ld"
argument_list|,
name|VAL_TYPE
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|Long
name|longTest
init|=
operator|(
name|Long
operator|)
name|calculateStat
argument_list|(
name|longTestStart
argument_list|,
literal|"unique"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|longResult
argument_list|,
name|longTest
argument_list|)
expr_stmt|;
comment|//Float
name|Long
name|floatResult
init|=
operator|(
name|Long
operator|)
name|getStatResult
argument_list|(
literal|"ur"
argument_list|,
literal|"float_fd"
argument_list|,
name|VAL_TYPE
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|Long
name|floatTest
init|=
operator|(
name|Long
operator|)
name|calculateStat
argument_list|(
name|floatTestStart
argument_list|,
literal|"unique"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|floatResult
argument_list|,
name|floatTest
argument_list|)
expr_stmt|;
comment|//Double
name|Long
name|doubleResult
init|=
operator|(
name|Long
operator|)
name|getStatResult
argument_list|(
literal|"ur"
argument_list|,
literal|"double_dd"
argument_list|,
name|VAL_TYPE
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|Long
name|doubleTest
init|=
operator|(
name|Long
operator|)
name|calculateStat
argument_list|(
name|doubleTestStart
argument_list|,
literal|"unique"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|doubleResult
argument_list|,
name|doubleTest
argument_list|)
expr_stmt|;
comment|//Date
name|Long
name|dateResult
init|=
operator|(
name|Long
operator|)
name|getStatResult
argument_list|(
literal|"ur"
argument_list|,
literal|"date_dtd"
argument_list|,
name|VAL_TYPE
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|Long
name|dateTest
init|=
operator|(
name|Long
operator|)
name|calculateStat
argument_list|(
name|dateTestStart
argument_list|,
literal|"unique"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dateResult
argument_list|,
name|dateTest
argument_list|)
expr_stmt|;
comment|//String
name|Long
name|stringResult
init|=
operator|(
name|Long
operator|)
name|getStatResult
argument_list|(
literal|"ur"
argument_list|,
literal|"string_sd"
argument_list|,
name|VAL_TYPE
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|Long
name|stringTest
init|=
operator|(
name|Long
operator|)
name|calculateStat
argument_list|(
name|stringTestStart
argument_list|,
literal|"unique"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|stringResult
argument_list|,
name|stringTest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|countTest
specifier|public
name|void
name|countTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Int
name|Long
name|intResult
init|=
operator|(
name|Long
operator|)
name|getStatResult
argument_list|(
literal|"cr"
argument_list|,
literal|"int_id"
argument_list|,
name|VAL_TYPE
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|Long
name|intTest
init|=
operator|(
name|Long
operator|)
name|calculateStat
argument_list|(
name|intTestStart
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|intResult
argument_list|,
name|intTest
argument_list|)
expr_stmt|;
comment|//Long
name|Long
name|longResult
init|=
operator|(
name|Long
operator|)
name|getStatResult
argument_list|(
literal|"cr"
argument_list|,
literal|"long_ld"
argument_list|,
name|VAL_TYPE
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|Long
name|longTest
init|=
operator|(
name|Long
operator|)
name|calculateStat
argument_list|(
name|longTestStart
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|longResult
argument_list|,
name|longTest
argument_list|)
expr_stmt|;
comment|//Float
name|Long
name|floatResult
init|=
operator|(
name|Long
operator|)
name|getStatResult
argument_list|(
literal|"cr"
argument_list|,
literal|"float_fd"
argument_list|,
name|VAL_TYPE
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|Long
name|floatTest
init|=
operator|(
name|Long
operator|)
name|calculateStat
argument_list|(
name|floatTestStart
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|floatResult
argument_list|,
name|floatTest
argument_list|)
expr_stmt|;
comment|//Double
name|Long
name|doubleResult
init|=
operator|(
name|Long
operator|)
name|getStatResult
argument_list|(
literal|"cr"
argument_list|,
literal|"double_dd"
argument_list|,
name|VAL_TYPE
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|Long
name|doubleTest
init|=
operator|(
name|Long
operator|)
name|calculateStat
argument_list|(
name|doubleTestStart
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|doubleResult
argument_list|,
name|doubleTest
argument_list|)
expr_stmt|;
comment|//Date
name|Long
name|dateResult
init|=
operator|(
name|Long
operator|)
name|getStatResult
argument_list|(
literal|"cr"
argument_list|,
literal|"date_dtd"
argument_list|,
name|VAL_TYPE
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|Long
name|dateTest
init|=
operator|(
name|Long
operator|)
name|calculateStat
argument_list|(
name|dateTestStart
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dateResult
argument_list|,
name|dateTest
argument_list|)
expr_stmt|;
comment|//String
name|Long
name|stringResult
init|=
operator|(
name|Long
operator|)
name|getStatResult
argument_list|(
literal|"cr"
argument_list|,
literal|"string_sd"
argument_list|,
name|VAL_TYPE
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|Long
name|stringTest
init|=
operator|(
name|Long
operator|)
name|calculateStat
argument_list|(
name|stringTestStart
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|stringResult
argument_list|,
name|stringTest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|missingDefaultTest
specifier|public
name|void
name|missingDefaultTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Int
name|long
name|intResult
init|=
operator|(
name|Long
operator|)
name|getStatResult
argument_list|(
literal|"misr"
argument_list|,
literal|"int_id"
argument_list|,
name|VAL_TYPE
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|intMissing
argument_list|,
name|intResult
argument_list|)
expr_stmt|;
comment|//Long
name|long
name|longResult
init|=
operator|(
name|Long
operator|)
name|getStatResult
argument_list|(
literal|"misr"
argument_list|,
literal|"long_ld"
argument_list|,
name|VAL_TYPE
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|longMissing
argument_list|,
name|longResult
argument_list|)
expr_stmt|;
comment|//Float
name|long
name|floatResult
init|=
operator|(
name|Long
operator|)
name|getStatResult
argument_list|(
literal|"misr"
argument_list|,
literal|"float_fd"
argument_list|,
name|VAL_TYPE
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|floatMissing
argument_list|,
name|floatResult
argument_list|)
expr_stmt|;
comment|//Double
name|long
name|doubleResult
init|=
operator|(
name|Long
operator|)
name|getStatResult
argument_list|(
literal|"misr"
argument_list|,
literal|"double_dd"
argument_list|,
name|VAL_TYPE
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|doubleMissing
argument_list|,
name|doubleResult
argument_list|)
expr_stmt|;
comment|//Date
name|long
name|dateResult
init|=
operator|(
name|Long
operator|)
name|getStatResult
argument_list|(
literal|"misr"
argument_list|,
literal|"date_dtd"
argument_list|,
name|VAL_TYPE
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dateMissing
argument_list|,
name|dateResult
argument_list|)
expr_stmt|;
comment|//String
name|long
name|stringResult
init|=
operator|(
name|Long
operator|)
name|getStatResult
argument_list|(
literal|"misr"
argument_list|,
literal|"string_sd"
argument_list|,
name|VAL_TYPE
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|stringMissing
argument_list|,
name|stringResult
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
