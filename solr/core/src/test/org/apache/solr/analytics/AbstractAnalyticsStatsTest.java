begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analytics
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analytics
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Scanner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|SuppressCodecs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analytics
operator|.
name|util
operator|.
name|MedianCalculator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analytics
operator|.
name|util
operator|.
name|PercentileCalculator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ObjectArrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|ExternalPaths
import|;
end_import
begin_class
annotation|@
name|SuppressCodecs
argument_list|(
block|{
literal|"Lucene3x"
block|,
literal|"Lucene40"
block|,
literal|"Lucene41"
block|,
literal|"Lucene42"
block|,
literal|"Appending"
block|,
literal|"Asserting"
block|}
argument_list|)
DECL|class|AbstractAnalyticsStatsTest
specifier|public
class|class
name|AbstractAnalyticsStatsTest
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|BASEPARMS
specifier|protected
specifier|static
specifier|final
name|String
index|[]
name|BASEPARMS
init|=
operator|new
name|String
index|[]
block|{
literal|"q"
block|,
literal|"*:*"
block|,
literal|"indent"
block|,
literal|"true"
block|,
literal|"olap"
block|,
literal|"true"
block|,
literal|"rows"
block|,
literal|"0"
block|}
decl_stmt|;
DECL|field|defaults
specifier|protected
specifier|static
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|defaults
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|getStatResult
specifier|public
name|Object
name|getStatResult
parameter_list|(
name|String
name|response
parameter_list|,
name|String
name|request
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|String
name|cat
init|=
literal|"\n<lst name=\""
operator|+
name|request
operator|+
literal|"\">"
decl_stmt|;
name|String
name|begin
init|=
literal|"<"
operator|+
name|type
operator|+
literal|" name=\""
operator|+
name|name
operator|+
literal|"\">"
decl_stmt|;
name|String
name|end
init|=
literal|"</"
operator|+
name|type
operator|+
literal|">"
decl_stmt|;
name|int
name|beginInt
init|=
name|response
operator|.
name|indexOf
argument_list|(
name|begin
argument_list|,
name|response
operator|.
name|indexOf
argument_list|(
name|cat
argument_list|)
argument_list|)
operator|+
name|begin
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|endInt
init|=
name|response
operator|.
name|indexOf
argument_list|(
name|end
argument_list|,
name|beginInt
argument_list|)
decl_stmt|;
name|String
name|resultStr
init|=
name|response
operator|.
name|substring
argument_list|(
name|beginInt
argument_list|,
name|endInt
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"double"
argument_list|)
condition|)
block|{
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|resultStr
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"int"
argument_list|)
condition|)
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|resultStr
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|resultStr
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"float"
argument_list|)
condition|)
block|{
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|resultStr
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|resultStr
return|;
block|}
block|}
DECL|method|calculateNumberStat
specifier|public
parameter_list|<
name|T
extends|extends
name|Number
operator|&
name|Comparable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|Double
name|calculateNumberStat
parameter_list|(
name|ArrayList
argument_list|<
name|T
argument_list|>
name|list
parameter_list|,
name|String
name|stat
parameter_list|)
block|{
name|Double
name|result
decl_stmt|;
if|if
condition|(
name|stat
operator|.
name|equals
argument_list|(
literal|"median"
argument_list|)
condition|)
block|{
name|result
operator|=
name|MedianCalculator
operator|.
name|getMedian
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stat
operator|.
name|equals
argument_list|(
literal|"mean"
argument_list|)
condition|)
block|{
name|double
name|d
init|=
literal|0
decl_stmt|;
for|for
control|(
name|T
name|element
range|:
name|list
control|)
block|{
name|d
operator|+=
name|element
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
name|result
operator|=
name|Double
operator|.
name|valueOf
argument_list|(
name|d
operator|/
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stat
operator|.
name|equals
argument_list|(
literal|"sum"
argument_list|)
condition|)
block|{
name|double
name|d
init|=
literal|0
decl_stmt|;
for|for
control|(
name|T
name|element
range|:
name|list
control|)
block|{
name|d
operator|+=
name|element
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
name|result
operator|=
name|Double
operator|.
name|valueOf
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stat
operator|.
name|equals
argument_list|(
literal|"sumOfSquares"
argument_list|)
condition|)
block|{
name|double
name|d
init|=
literal|0
decl_stmt|;
for|for
control|(
name|T
name|element
range|:
name|list
control|)
block|{
name|d
operator|+=
name|element
operator|.
name|doubleValue
argument_list|()
operator|*
name|element
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
name|result
operator|=
name|Double
operator|.
name|valueOf
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stat
operator|.
name|equals
argument_list|(
literal|"stddev"
argument_list|)
condition|)
block|{
name|double
name|sum
init|=
literal|0
decl_stmt|;
name|double
name|sumSquares
init|=
literal|0
decl_stmt|;
for|for
control|(
name|T
name|element
range|:
name|list
control|)
block|{
name|sum
operator|+=
name|element
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
name|sumSquares
operator|+=
name|element
operator|.
name|doubleValue
argument_list|()
operator|*
name|element
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
name|result
operator|=
name|Math
operator|.
name|sqrt
argument_list|(
name|sumSquares
operator|/
name|list
operator|.
name|size
argument_list|()
operator|-
name|sum
operator|*
name|sum
operator|/
operator|(
name|list
operator|.
name|size
argument_list|()
operator|*
name|list
operator|.
name|size
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
return|return
name|result
return|;
block|}
DECL|method|calculateStat
specifier|public
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|Object
name|calculateStat
parameter_list|(
name|ArrayList
argument_list|<
name|T
argument_list|>
name|list
parameter_list|,
name|String
name|stat
parameter_list|)
block|{
name|Object
name|result
decl_stmt|;
if|if
condition|(
name|stat
operator|.
name|contains
argument_list|(
literal|"perc_"
argument_list|)
condition|)
block|{
name|double
index|[]
name|perc
init|=
operator|new
name|double
index|[]
block|{
name|Double
operator|.
name|parseDouble
argument_list|(
name|stat
operator|.
name|substring
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|/
literal|100
block|}
decl_stmt|;
name|result
operator|=
name|PercentileCalculator
operator|.
name|getPercentiles
argument_list|(
name|list
argument_list|,
name|perc
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stat
operator|.
name|equals
argument_list|(
literal|"count"
argument_list|)
condition|)
block|{
name|result
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stat
operator|.
name|equals
argument_list|(
literal|"unique"
argument_list|)
condition|)
block|{
name|HashSet
argument_list|<
name|T
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|result
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
operator|(
name|long
operator|)
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stat
operator|.
name|equals
argument_list|(
literal|"max"
argument_list|)
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|result
operator|=
name|list
operator|.
name|get
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stat
operator|.
name|equals
argument_list|(
literal|"min"
argument_list|)
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|result
operator|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|calculateMissing
specifier|public
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|Long
name|calculateMissing
parameter_list|(
name|ArrayList
argument_list|<
name|T
argument_list|>
name|list
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|T
name|def
init|=
operator|(
name|T
operator|)
name|defaults
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|long
name|miss
init|=
literal|0
decl_stmt|;
for|for
control|(
name|T
name|element
range|:
name|list
control|)
block|{
if|if
condition|(
name|element
operator|.
name|compareTo
argument_list|(
name|def
argument_list|)
operator|==
literal|0
condition|)
block|{
name|miss
operator|++
expr_stmt|;
block|}
block|}
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|miss
argument_list|)
return|;
block|}
DECL|method|request
specifier|public
specifier|static
name|SolrQueryRequest
name|request
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
block|{
return|return
name|SolrTestCaseJ4
operator|.
name|req
argument_list|(
name|ObjectArrays
operator|.
name|concat
argument_list|(
name|BASEPARMS
argument_list|,
name|args
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
DECL|method|fileToStringArr
specifier|public
specifier|static
name|String
index|[]
name|fileToStringArr
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|Scanner
name|file
init|=
operator|new
name|Scanner
argument_list|(
operator|new
name|File
argument_list|(
name|ExternalPaths
operator|.
name|SOURCE_HOME
argument_list|,
name|fileName
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|strList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|file
operator|.
name|hasNextLine
argument_list|()
condition|)
block|{
name|String
name|line
init|=
name|file
operator|.
name|nextLine
argument_list|()
decl_stmt|;
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|line
argument_list|)
operator|||
name|line
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
index|[]
name|param
init|=
name|line
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
name|strList
operator|.
name|add
argument_list|(
name|param
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|strList
operator|.
name|add
argument_list|(
name|param
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|strList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
end_class
end_unit
