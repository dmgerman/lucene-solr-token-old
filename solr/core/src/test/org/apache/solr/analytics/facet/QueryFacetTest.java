begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analytics.facet
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analytics
operator|.
name|facet
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|SuppressCodecs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
annotation|@
name|SuppressCodecs
argument_list|(
block|{
literal|"Lucene3x"
block|,
literal|"Lucene40"
block|,
literal|"Lucene41"
block|,
literal|"Lucene42"
block|,
literal|"Appending"
block|,
literal|"Asserting"
block|}
argument_list|)
DECL|class|QueryFacetTest
specifier|public
class|class
name|QueryFacetTest
extends|extends
name|AbstractAnalyticsFacetTest
block|{
DECL|field|fileName
specifier|static
name|String
name|fileName
init|=
literal|"/analytics/requestFiles/queryFacets.txt"
decl_stmt|;
DECL|field|INT
specifier|public
specifier|final
name|int
name|INT
init|=
literal|71
decl_stmt|;
DECL|field|LONG
specifier|public
specifier|final
name|int
name|LONG
init|=
literal|36
decl_stmt|;
DECL|field|FLOAT
specifier|public
specifier|final
name|int
name|FLOAT
init|=
literal|93
decl_stmt|;
DECL|field|DOUBLE
specifier|public
specifier|final
name|int
name|DOUBLE
init|=
literal|49
decl_stmt|;
DECL|field|DATE
specifier|public
specifier|final
name|int
name|DATE
init|=
literal|12
decl_stmt|;
DECL|field|STRING
specifier|public
specifier|final
name|int
name|STRING
init|=
literal|28
decl_stmt|;
DECL|field|NUM_LOOPS
specifier|public
specifier|final
name|int
name|NUM_LOOPS
init|=
literal|100
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-basic.xml"
argument_list|,
literal|"schema-analytics.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|queryTest
specifier|public
name|void
name|queryTest
parameter_list|()
throws|throws
name|Exception
block|{
name|h
operator|.
name|update
argument_list|(
literal|"<delete><query>*:*</query></delete>"
argument_list|)
expr_stmt|;
comment|//INT
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|int1TestStart
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int1TestStart
operator|.
name|add
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|int2TestStart
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int2TestStart
operator|.
name|add
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|//LONG
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|>
name|longTestStart
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|longTestStart
operator|.
name|add
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|longTestStart
operator|.
name|add
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|//FLOAT
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|>
name|floatTestStart
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|floatTestStart
operator|.
name|add
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|floatTestStart
operator|.
name|add
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|floatTestStart
operator|.
name|add
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NUM_LOOPS
condition|;
operator|++
name|j
control|)
block|{
name|int
name|i
init|=
name|j
operator|%
name|INT
decl_stmt|;
name|long
name|l
init|=
name|j
operator|%
name|LONG
decl_stmt|;
name|float
name|f
init|=
name|j
operator|%
name|FLOAT
decl_stmt|;
name|double
name|d
init|=
name|j
operator|%
name|DOUBLE
decl_stmt|;
name|int
name|dt
init|=
name|j
operator|%
name|DATE
decl_stmt|;
name|int
name|s
init|=
name|j
operator|%
name|STRING
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1000"
operator|+
name|j
argument_list|,
literal|"int_id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
literal|"long_ld"
argument_list|,
literal|""
operator|+
name|l
argument_list|,
literal|"float_fd"
argument_list|,
literal|""
operator|+
name|f
argument_list|,
literal|"double_dd"
argument_list|,
literal|""
operator|+
name|d
argument_list|,
literal|"date_dtd"
argument_list|,
operator|(
literal|1800
operator|+
name|dt
operator|)
operator|+
literal|"-12-31T23:59:59.999Z"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"abc"
operator|+
operator|new
name|Integer
argument_list|(
name|s
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|<=
literal|50
condition|)
block|{
name|int1TestStart
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|<=
literal|30
condition|)
block|{
name|int2TestStart
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|new
name|Integer
argument_list|(
name|s
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'1'
condition|)
block|{
name|longTestStart
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|new
name|Integer
argument_list|(
name|s
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'2'
condition|)
block|{
name|longTestStart
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|l
operator|>=
literal|20
condition|)
block|{
name|floatTestStart
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|l
operator|>=
literal|30
condition|)
block|{
name|floatTestStart
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|<=
literal|50
condition|)
block|{
name|floatTestStart
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|usually
argument_list|()
condition|)
block|{
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// to have several segments
block|}
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|//Query ascending tests
name|setResponse
argument_list|(
name|h
operator|.
name|query
argument_list|(
name|request
argument_list|(
name|fileToStringArr
argument_list|(
name|QueryFacetTest
operator|.
name|class
argument_list|,
name|fileName
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//Int One
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|int1
init|=
name|getDoubleList
argument_list|(
literal|"ir"
argument_list|,
literal|"queryFacets"
argument_list|,
literal|"float1"
argument_list|,
literal|"double"
argument_list|,
literal|"sum"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|int1Test
init|=
name|calculateNumberStat
argument_list|(
name|int1TestStart
argument_list|,
literal|"sum"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|int1
argument_list|,
name|int1Test
argument_list|)
expr_stmt|;
comment|//Int Two
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|int2
init|=
name|getIntegerList
argument_list|(
literal|"ir"
argument_list|,
literal|"queryFacets"
argument_list|,
literal|"float2"
argument_list|,
literal|"int"
argument_list|,
literal|"percentile_8"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|int2Test
init|=
operator|(
name|ArrayList
argument_list|<
name|Integer
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|int2TestStart
argument_list|,
literal|"perc_8"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|int2
argument_list|,
name|int2Test
argument_list|)
expr_stmt|;
comment|//Long
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|long1
init|=
name|getDoubleList
argument_list|(
literal|"lr"
argument_list|,
literal|"queryFacets"
argument_list|,
literal|"string"
argument_list|,
literal|"double"
argument_list|,
literal|"median"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|long1Test
init|=
name|calculateNumberStat
argument_list|(
name|longTestStart
argument_list|,
literal|"median"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|long1
argument_list|,
name|long1Test
argument_list|)
expr_stmt|;
comment|//Float
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|float1
init|=
name|getDoubleList
argument_list|(
literal|"fr"
argument_list|,
literal|"queryFacets"
argument_list|,
literal|"lad"
argument_list|,
literal|"double"
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|float1Test
init|=
name|calculateNumberStat
argument_list|(
name|floatTestStart
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|float1
argument_list|,
name|float1Test
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
