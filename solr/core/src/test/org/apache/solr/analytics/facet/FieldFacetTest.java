begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analytics.facet
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analytics
operator|.
name|facet
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|SuppressCodecs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
annotation|@
name|SuppressCodecs
argument_list|(
block|{
literal|"Lucene3x"
block|,
literal|"Lucene40"
block|,
literal|"Lucene41"
block|,
literal|"Lucene42"
block|,
literal|"Appending"
block|,
literal|"Asserting"
block|}
argument_list|)
DECL|class|FieldFacetTest
specifier|public
class|class
name|FieldFacetTest
extends|extends
name|AbstractAnalyticsFacetTest
block|{
DECL|field|fileName
specifier|static
name|String
name|fileName
init|=
literal|"/analytics/requestFiles/fieldFacets.txt"
decl_stmt|;
DECL|field|INT
specifier|public
specifier|static
specifier|final
name|int
name|INT
init|=
literal|71
decl_stmt|;
DECL|field|LONG
specifier|public
specifier|static
specifier|final
name|int
name|LONG
init|=
literal|36
decl_stmt|;
DECL|field|LONGM
specifier|public
specifier|static
specifier|final
name|int
name|LONGM
init|=
literal|50
decl_stmt|;
DECL|field|FLOAT
specifier|public
specifier|static
specifier|final
name|int
name|FLOAT
init|=
literal|73
decl_stmt|;
DECL|field|FLOATM
specifier|public
specifier|static
specifier|final
name|int
name|FLOATM
init|=
literal|84
decl_stmt|;
DECL|field|DOUBLE
specifier|public
specifier|static
specifier|final
name|int
name|DOUBLE
init|=
literal|49
decl_stmt|;
DECL|field|DATE
specifier|public
specifier|static
specifier|final
name|int
name|DATE
init|=
literal|12
decl_stmt|;
DECL|field|DATEM
specifier|public
specifier|static
specifier|final
name|int
name|DATEM
init|=
literal|30
decl_stmt|;
DECL|field|STRING
specifier|public
specifier|static
specifier|final
name|int
name|STRING
init|=
literal|28
decl_stmt|;
DECL|field|STRINGM
specifier|public
specifier|static
specifier|final
name|int
name|STRINGM
init|=
literal|40
decl_stmt|;
DECL|field|NUM_LOOPS
specifier|public
specifier|static
specifier|final
name|int
name|NUM_LOOPS
init|=
literal|100
decl_stmt|;
comment|//INT
DECL|field|intDateTestStart
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|intDateTestStart
decl_stmt|;
DECL|field|intDateTestMissing
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|intDateTestMissing
decl_stmt|;
DECL|field|intStringTestStart
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|intStringTestStart
decl_stmt|;
DECL|field|intStringTestMissing
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|intStringTestMissing
decl_stmt|;
comment|//LONG
DECL|field|longDateTestStart
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|>
name|longDateTestStart
decl_stmt|;
DECL|field|longDateTestMissing
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|longDateTestMissing
decl_stmt|;
DECL|field|longStringTestStart
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|>
name|longStringTestStart
decl_stmt|;
DECL|field|longStringTestMissing
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|longStringTestMissing
decl_stmt|;
comment|//FLOAT
DECL|field|floatDateTestStart
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|>
name|floatDateTestStart
decl_stmt|;
DECL|field|floatDateTestMissing
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|floatDateTestMissing
decl_stmt|;
DECL|field|floatStringTestStart
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|>
name|floatStringTestStart
decl_stmt|;
DECL|field|floatStringTestMissing
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|floatStringTestMissing
decl_stmt|;
comment|//DOUBLE
DECL|field|doubleDateTestStart
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Double
argument_list|>
argument_list|>
name|doubleDateTestStart
decl_stmt|;
DECL|field|doubleDateTestMissing
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|doubleDateTestMissing
decl_stmt|;
DECL|field|doubleStringTestStart
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Double
argument_list|>
argument_list|>
name|doubleStringTestStart
decl_stmt|;
DECL|field|doubleStringTestMissing
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|doubleStringTestMissing
decl_stmt|;
comment|//DATE
DECL|field|dateIntTestStart
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|dateIntTestStart
decl_stmt|;
DECL|field|dateIntTestMissing
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|dateIntTestMissing
decl_stmt|;
DECL|field|dateLongTestStart
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|dateLongTestStart
decl_stmt|;
DECL|field|dateLongTestMissing
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|dateLongTestMissing
decl_stmt|;
comment|//String
DECL|field|stringIntTestStart
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|stringIntTestStart
decl_stmt|;
DECL|field|stringIntTestMissing
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|stringIntTestMissing
decl_stmt|;
DECL|field|stringLongTestStart
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|stringLongTestStart
decl_stmt|;
DECL|field|stringLongTestMissing
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|stringLongTestMissing
decl_stmt|;
comment|//Multi-Valued
DECL|field|multiLongTestStart
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|multiLongTestStart
decl_stmt|;
DECL|field|multiLongTestMissing
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|multiLongTestMissing
decl_stmt|;
DECL|field|multiStringTestStart
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|multiStringTestStart
decl_stmt|;
DECL|field|multiStringTestMissing
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|multiStringTestMissing
decl_stmt|;
DECL|field|multiDateTestStart
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|multiDateTestStart
decl_stmt|;
DECL|field|multiDateTestMissing
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|multiDateTestMissing
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-basic.xml"
argument_list|,
literal|"schema-analytics.xml"
argument_list|)
expr_stmt|;
name|h
operator|.
name|update
argument_list|(
literal|"<delete><query>*:*</query></delete>"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"int"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"long"
argument_list|,
operator|new
name|Long
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"float"
argument_list|,
operator|new
name|Float
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"double"
argument_list|,
operator|new
name|Double
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"date"
argument_list|,
literal|"1800-12-31T23:59:59Z"
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|put
argument_list|(
literal|"string"
argument_list|,
literal|"str0"
argument_list|)
expr_stmt|;
comment|//INT
name|intDateTestStart
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|intDateTestMissing
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|intStringTestStart
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|intStringTestMissing
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
comment|//LONG
name|longDateTestStart
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|longDateTestMissing
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|longStringTestStart
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|longStringTestMissing
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
comment|//FLOAT
name|floatDateTestStart
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|floatDateTestMissing
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|floatStringTestStart
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|floatStringTestMissing
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
comment|//DOUBLE
name|doubleDateTestStart
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|doubleDateTestMissing
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|doubleStringTestStart
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|doubleStringTestMissing
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
comment|//DATE
name|dateIntTestStart
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|dateIntTestMissing
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|dateLongTestStart
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|dateLongTestMissing
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
comment|//String
name|stringIntTestStart
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|stringIntTestMissing
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|stringLongTestStart
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|stringLongTestMissing
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
comment|//Multi-Valued
name|multiLongTestStart
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|multiLongTestMissing
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|multiStringTestStart
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|multiStringTestMissing
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|multiDateTestStart
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|multiDateTestMissing
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NUM_LOOPS
condition|;
operator|++
name|j
control|)
block|{
name|int
name|i
init|=
name|j
operator|%
name|INT
decl_stmt|;
name|long
name|l
init|=
name|j
operator|%
name|LONG
decl_stmt|;
name|long
name|lm
init|=
name|j
operator|%
name|LONGM
decl_stmt|;
name|float
name|f
init|=
name|j
operator|%
name|FLOAT
decl_stmt|;
name|double
name|d
init|=
name|j
operator|%
name|DOUBLE
decl_stmt|;
name|int
name|dt
init|=
name|j
operator|%
name|DATE
decl_stmt|;
name|int
name|dtm
init|=
name|j
operator|%
name|DATEM
decl_stmt|;
name|int
name|s
init|=
name|j
operator|%
name|STRING
decl_stmt|;
name|int
name|sm
init|=
name|j
operator|%
name|STRINGM
decl_stmt|;
if|if
condition|(
name|dt
operator|==
literal|0
operator|&&
name|dtm
operator|==
literal|0
condition|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
name|filter
argument_list|(
literal|"id"
argument_list|,
literal|"1000"
operator|+
name|j
argument_list|,
literal|"int_id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
literal|"long_ld"
argument_list|,
literal|""
operator|+
name|l
argument_list|,
literal|"float_fd"
argument_list|,
literal|""
operator|+
name|f
argument_list|,
literal|"double_dd"
argument_list|,
literal|""
operator|+
name|d
argument_list|,
literal|"date_dtd"
argument_list|,
operator|(
literal|1800
operator|+
name|dt
operator|)
operator|+
literal|"-12-31T23:59:59Z"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"str"
operator|+
name|s
argument_list|,
literal|"long_ldm"
argument_list|,
literal|""
operator|+
name|l
argument_list|,
literal|"long_ldm"
argument_list|,
literal|""
operator|+
name|lm
argument_list|,
literal|"string_sdm"
argument_list|,
literal|"str"
operator|+
name|s
argument_list|,
literal|"string_sdm"
argument_list|,
literal|"str"
operator|+
name|sm
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dt
operator|==
literal|0
condition|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
name|filter
argument_list|(
literal|"id"
argument_list|,
literal|"1000"
operator|+
name|j
argument_list|,
literal|"int_id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
literal|"long_ld"
argument_list|,
literal|""
operator|+
name|l
argument_list|,
literal|"float_fd"
argument_list|,
literal|""
operator|+
name|f
argument_list|,
literal|"double_dd"
argument_list|,
literal|""
operator|+
name|d
argument_list|,
literal|"date_dtd"
argument_list|,
operator|(
literal|1800
operator|+
name|dt
operator|)
operator|+
literal|"-12-31T23:59:59Z"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"str"
operator|+
name|s
argument_list|,
literal|"long_ldm"
argument_list|,
literal|""
operator|+
name|l
argument_list|,
literal|"long_ldm"
argument_list|,
literal|""
operator|+
name|lm
argument_list|,
literal|"string_sdm"
argument_list|,
literal|"str"
operator|+
name|s
argument_list|,
literal|"string_sdm"
argument_list|,
literal|"str"
operator|+
name|sm
argument_list|,
literal|"date_dtdm"
argument_list|,
operator|(
literal|1800
operator|+
name|dtm
operator|)
operator|+
literal|"-12-31T23:59:59Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dtm
operator|==
literal|0
condition|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
name|filter
argument_list|(
literal|"id"
argument_list|,
literal|"1000"
operator|+
name|j
argument_list|,
literal|"int_id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
literal|"long_ld"
argument_list|,
literal|""
operator|+
name|l
argument_list|,
literal|"float_fd"
argument_list|,
literal|""
operator|+
name|f
argument_list|,
literal|"double_dd"
argument_list|,
literal|""
operator|+
name|d
argument_list|,
literal|"date_dtd"
argument_list|,
operator|(
literal|1800
operator|+
name|dt
operator|)
operator|+
literal|"-12-31T23:59:59Z"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"str"
operator|+
name|s
argument_list|,
literal|"long_ldm"
argument_list|,
literal|""
operator|+
name|l
argument_list|,
literal|"long_ldm"
argument_list|,
literal|""
operator|+
name|lm
argument_list|,
literal|"string_sdm"
argument_list|,
literal|"str"
operator|+
name|s
argument_list|,
literal|"string_sdm"
argument_list|,
literal|"str"
operator|+
name|sm
argument_list|,
literal|"date_dtdm"
argument_list|,
operator|(
literal|1800
operator|+
name|dt
operator|)
operator|+
literal|"-12-31T23:59:59Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
name|filter
argument_list|(
literal|"id"
argument_list|,
literal|"1000"
operator|+
name|j
argument_list|,
literal|"int_id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
literal|"long_ld"
argument_list|,
literal|""
operator|+
name|l
argument_list|,
literal|"float_fd"
argument_list|,
literal|""
operator|+
name|f
argument_list|,
literal|"double_dd"
argument_list|,
literal|""
operator|+
name|d
argument_list|,
literal|"date_dtd"
argument_list|,
operator|(
literal|1800
operator|+
name|dt
operator|)
operator|+
literal|"-12-31T23:59:59Z"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"str"
operator|+
name|s
argument_list|,
literal|"long_ldm"
argument_list|,
literal|""
operator|+
name|l
argument_list|,
literal|"long_ldm"
argument_list|,
literal|""
operator|+
name|lm
argument_list|,
literal|"string_sdm"
argument_list|,
literal|"str"
operator|+
name|s
argument_list|,
literal|"string_sdm"
argument_list|,
literal|"str"
operator|+
name|sm
argument_list|,
literal|"date_dtdm"
argument_list|,
operator|(
literal|1800
operator|+
name|dt
operator|)
operator|+
literal|"-12-31T23:59:59Z"
argument_list|,
literal|"date_dtdm"
argument_list|,
operator|(
literal|1800
operator|+
name|dtm
operator|)
operator|+
literal|"-12-31T23:59:59Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dt
operator|!=
literal|0
condition|)
block|{
comment|//Dates
if|if
condition|(
name|j
operator|-
name|DATE
operator|<
literal|0
condition|)
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|list1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|list1
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|intDateTestMissing
operator|.
name|add
argument_list|(
literal|0l
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|intDateTestMissing
operator|.
name|add
argument_list|(
literal|1l
argument_list|)
expr_stmt|;
block|}
name|intDateTestStart
operator|.
name|add
argument_list|(
name|list1
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|list2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|0l
condition|)
block|{
name|list2
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|longDateTestMissing
operator|.
name|add
argument_list|(
literal|0l
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|longDateTestMissing
operator|.
name|add
argument_list|(
literal|1l
argument_list|)
expr_stmt|;
block|}
name|longDateTestStart
operator|.
name|add
argument_list|(
name|list2
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Float
argument_list|>
name|list3
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|!=
literal|0.0f
condition|)
block|{
name|list3
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|floatDateTestMissing
operator|.
name|add
argument_list|(
literal|0l
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|floatDateTestMissing
operator|.
name|add
argument_list|(
literal|1l
argument_list|)
expr_stmt|;
block|}
name|floatDateTestStart
operator|.
name|add
argument_list|(
name|list3
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|list4
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|0.0d
condition|)
block|{
name|list4
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|doubleDateTestMissing
operator|.
name|add
argument_list|(
literal|0l
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doubleDateTestMissing
operator|.
name|add
argument_list|(
literal|1l
argument_list|)
expr_stmt|;
block|}
name|doubleDateTestStart
operator|.
name|add
argument_list|(
name|list4
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|list5
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|list5
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|multiDateTestMissing
operator|.
name|add
argument_list|(
literal|0l
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|multiDateTestMissing
operator|.
name|add
argument_list|(
literal|1l
argument_list|)
expr_stmt|;
block|}
name|multiDateTestStart
operator|.
name|add
argument_list|(
name|list5
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
name|intDateTestStart
operator|.
name|get
argument_list|(
name|dt
operator|-
literal|1
argument_list|)
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
else|else
name|increment
argument_list|(
name|intDateTestMissing
argument_list|,
name|dt
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|l
operator|!=
literal|0l
condition|)
name|longDateTestStart
operator|.
name|get
argument_list|(
name|dt
operator|-
literal|1
argument_list|)
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
else|else
name|increment
argument_list|(
name|longDateTestMissing
argument_list|,
name|dt
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|!=
literal|0.0f
condition|)
name|floatDateTestStart
operator|.
name|get
argument_list|(
name|dt
operator|-
literal|1
argument_list|)
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
else|else
name|increment
argument_list|(
name|floatDateTestMissing
argument_list|,
name|dt
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|!=
literal|0.0d
condition|)
name|doubleDateTestStart
operator|.
name|get
argument_list|(
name|dt
operator|-
literal|1
argument_list|)
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
else|else
name|increment
argument_list|(
name|doubleDateTestMissing
argument_list|,
name|dt
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
name|multiDateTestStart
operator|.
name|get
argument_list|(
name|dt
operator|-
literal|1
argument_list|)
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
else|else
name|increment
argument_list|(
name|multiDateTestMissing
argument_list|,
name|dt
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|j
operator|-
name|DATEM
operator|<
literal|0
operator|&&
name|dtm
operator|!=
name|dt
operator|&&
name|dtm
operator|!=
literal|0
condition|)
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|list1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|list1
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|multiDateTestMissing
operator|.
name|add
argument_list|(
literal|0l
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|multiDateTestMissing
operator|.
name|add
argument_list|(
literal|1l
argument_list|)
expr_stmt|;
block|}
name|multiDateTestStart
operator|.
name|add
argument_list|(
name|list1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dtm
operator|!=
name|dt
operator|&&
name|dtm
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
name|multiDateTestStart
operator|.
name|get
argument_list|(
name|dtm
operator|-
literal|1
argument_list|)
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|!=
literal|0
condition|)
block|{
comment|//Strings
if|if
condition|(
name|j
operator|-
name|STRING
operator|<
literal|0
condition|)
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|list1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|list1
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|intStringTestMissing
operator|.
name|add
argument_list|(
literal|0l
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|intStringTestMissing
operator|.
name|add
argument_list|(
literal|1l
argument_list|)
expr_stmt|;
block|}
name|intStringTestStart
operator|.
name|add
argument_list|(
name|list1
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|list2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|0l
condition|)
block|{
name|list2
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|longStringTestMissing
operator|.
name|add
argument_list|(
literal|0l
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|longStringTestMissing
operator|.
name|add
argument_list|(
literal|1l
argument_list|)
expr_stmt|;
block|}
name|longStringTestStart
operator|.
name|add
argument_list|(
name|list2
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Float
argument_list|>
name|list3
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|!=
literal|0.0f
condition|)
block|{
name|list3
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|floatStringTestMissing
operator|.
name|add
argument_list|(
literal|0l
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|floatStringTestMissing
operator|.
name|add
argument_list|(
literal|1l
argument_list|)
expr_stmt|;
block|}
name|floatStringTestStart
operator|.
name|add
argument_list|(
name|list3
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|list4
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|0.0d
condition|)
block|{
name|list4
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|doubleStringTestMissing
operator|.
name|add
argument_list|(
literal|0l
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doubleStringTestMissing
operator|.
name|add
argument_list|(
literal|1l
argument_list|)
expr_stmt|;
block|}
name|doubleStringTestStart
operator|.
name|add
argument_list|(
name|list4
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|list5
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|list5
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|multiStringTestMissing
operator|.
name|add
argument_list|(
literal|0l
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|multiStringTestMissing
operator|.
name|add
argument_list|(
literal|1l
argument_list|)
expr_stmt|;
block|}
name|multiStringTestStart
operator|.
name|add
argument_list|(
name|list5
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
name|intStringTestStart
operator|.
name|get
argument_list|(
name|s
operator|-
literal|1
argument_list|)
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
else|else
name|increment
argument_list|(
name|intStringTestMissing
argument_list|,
name|s
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|l
operator|!=
literal|0l
condition|)
name|longStringTestStart
operator|.
name|get
argument_list|(
name|s
operator|-
literal|1
argument_list|)
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
else|else
name|increment
argument_list|(
name|longStringTestMissing
argument_list|,
name|s
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|!=
literal|0.0f
condition|)
name|floatStringTestStart
operator|.
name|get
argument_list|(
name|s
operator|-
literal|1
argument_list|)
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
else|else
name|increment
argument_list|(
name|floatStringTestMissing
argument_list|,
name|s
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|!=
literal|0.0d
condition|)
name|doubleStringTestStart
operator|.
name|get
argument_list|(
name|s
operator|-
literal|1
argument_list|)
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
else|else
name|increment
argument_list|(
name|doubleStringTestMissing
argument_list|,
name|s
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
name|multiStringTestStart
operator|.
name|get
argument_list|(
name|s
operator|-
literal|1
argument_list|)
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
else|else
name|increment
argument_list|(
name|multiStringTestMissing
argument_list|,
name|s
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Strings
if|if
condition|(
name|sm
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|j
operator|-
name|STRINGM
operator|<
literal|0
operator|&&
name|sm
operator|!=
name|s
condition|)
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|list1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|list1
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|multiStringTestMissing
operator|.
name|add
argument_list|(
literal|0l
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|multiStringTestMissing
operator|.
name|add
argument_list|(
literal|1l
argument_list|)
expr_stmt|;
block|}
name|multiStringTestStart
operator|.
name|add
argument_list|(
name|list1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sm
operator|!=
name|s
condition|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
name|multiStringTestStart
operator|.
name|get
argument_list|(
name|sm
operator|-
literal|1
argument_list|)
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
else|else
name|increment
argument_list|(
name|multiStringTestMissing
argument_list|,
name|sm
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Int
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|j
operator|-
name|INT
operator|<
literal|0
condition|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|dt
operator|!=
literal|0
condition|)
block|{
name|list1
operator|.
name|add
argument_list|(
operator|(
literal|1800
operator|+
name|dt
operator|)
operator|+
literal|"-12-31T23:59:59Z"
argument_list|)
expr_stmt|;
name|dateIntTestMissing
operator|.
name|add
argument_list|(
literal|0l
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dateIntTestMissing
operator|.
name|add
argument_list|(
literal|1l
argument_list|)
expr_stmt|;
block|}
name|dateIntTestStart
operator|.
name|add
argument_list|(
name|list1
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|0
condition|)
block|{
name|list2
operator|.
name|add
argument_list|(
literal|"str"
operator|+
name|s
argument_list|)
expr_stmt|;
name|stringIntTestMissing
operator|.
name|add
argument_list|(
literal|0l
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stringIntTestMissing
operator|.
name|add
argument_list|(
literal|1l
argument_list|)
expr_stmt|;
block|}
name|stringIntTestStart
operator|.
name|add
argument_list|(
name|list2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|dt
operator|!=
literal|0
condition|)
name|dateIntTestStart
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|.
name|add
argument_list|(
operator|(
literal|1800
operator|+
name|dt
operator|)
operator|+
literal|"-12-31T23:59:59Z"
argument_list|)
expr_stmt|;
else|else
name|increment
argument_list|(
name|dateIntTestMissing
argument_list|,
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|!=
literal|0
condition|)
name|stringIntTestStart
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|.
name|add
argument_list|(
literal|"str"
operator|+
name|s
argument_list|)
expr_stmt|;
else|else
name|increment
argument_list|(
name|stringIntTestMissing
argument_list|,
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Long
if|if
condition|(
name|l
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|j
operator|-
name|LONG
operator|<
literal|0
condition|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|dt
operator|!=
literal|0
condition|)
block|{
name|list1
operator|.
name|add
argument_list|(
operator|(
literal|1800
operator|+
name|dt
operator|)
operator|+
literal|"-12-31T23:59:59Z"
argument_list|)
expr_stmt|;
name|dateLongTestMissing
operator|.
name|add
argument_list|(
literal|0l
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dateLongTestMissing
operator|.
name|add
argument_list|(
literal|1l
argument_list|)
expr_stmt|;
block|}
name|dateLongTestStart
operator|.
name|add
argument_list|(
name|list1
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|0
condition|)
block|{
name|list2
operator|.
name|add
argument_list|(
literal|"str"
operator|+
name|s
argument_list|)
expr_stmt|;
name|stringLongTestMissing
operator|.
name|add
argument_list|(
literal|0l
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stringLongTestMissing
operator|.
name|add
argument_list|(
literal|1l
argument_list|)
expr_stmt|;
block|}
name|stringLongTestStart
operator|.
name|add
argument_list|(
name|list2
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|list3
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|list3
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|multiLongTestMissing
operator|.
name|add
argument_list|(
literal|0l
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|multiLongTestMissing
operator|.
name|add
argument_list|(
literal|1l
argument_list|)
expr_stmt|;
block|}
name|multiLongTestStart
operator|.
name|add
argument_list|(
name|list3
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|dt
operator|!=
literal|0
condition|)
name|dateLongTestStart
operator|.
name|get
argument_list|(
operator|(
name|int
operator|)
name|l
operator|-
literal|1
argument_list|)
operator|.
name|add
argument_list|(
operator|(
literal|1800
operator|+
name|dt
operator|)
operator|+
literal|"-12-31T23:59:59Z"
argument_list|)
expr_stmt|;
else|else
name|increment
argument_list|(
name|dateLongTestMissing
argument_list|,
operator|(
name|int
operator|)
name|l
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|!=
literal|0
condition|)
name|stringLongTestStart
operator|.
name|get
argument_list|(
operator|(
name|int
operator|)
name|l
operator|-
literal|1
argument_list|)
operator|.
name|add
argument_list|(
literal|"str"
operator|+
name|s
argument_list|)
expr_stmt|;
else|else
name|increment
argument_list|(
name|stringLongTestMissing
argument_list|,
operator|(
name|int
operator|)
name|l
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
name|multiLongTestStart
operator|.
name|get
argument_list|(
operator|(
name|int
operator|)
name|l
operator|-
literal|1
argument_list|)
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
else|else
name|increment
argument_list|(
name|multiLongTestMissing
argument_list|,
operator|(
name|int
operator|)
name|l
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Long
if|if
condition|(
name|lm
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|j
operator|-
name|LONGM
operator|<
literal|0
operator|&&
name|lm
operator|!=
name|l
condition|)
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|list1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|list1
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|multiLongTestMissing
operator|.
name|add
argument_list|(
literal|0l
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|multiLongTestMissing
operator|.
name|add
argument_list|(
literal|1l
argument_list|)
expr_stmt|;
block|}
name|multiLongTestStart
operator|.
name|add
argument_list|(
name|list1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lm
operator|!=
name|l
condition|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
name|multiLongTestStart
operator|.
name|get
argument_list|(
operator|(
name|int
operator|)
name|lm
operator|-
literal|1
argument_list|)
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
else|else
name|increment
argument_list|(
name|multiLongTestMissing
argument_list|,
operator|(
name|int
operator|)
name|lm
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|usually
argument_list|()
condition|)
block|{
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// to have several segments
block|}
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|reqFacetParamas
init|=
name|fileToStringArr
argument_list|(
name|FieldFacetTest
operator|.
name|class
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|String
index|[]
name|reqParamas
init|=
operator|new
name|String
index|[
name|reqFacetParamas
operator|.
name|length
operator|+
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|reqFacetParamas
argument_list|,
literal|0
argument_list|,
name|reqParamas
argument_list|,
literal|0
argument_list|,
name|reqFacetParamas
operator|.
name|length
argument_list|)
expr_stmt|;
name|reqParamas
index|[
name|reqFacetParamas
operator|.
name|length
index|]
operator|=
literal|"solr"
expr_stmt|;
name|reqParamas
index|[
name|reqFacetParamas
operator|.
name|length
operator|+
literal|1
index|]
operator|=
literal|"asc"
expr_stmt|;
name|setResponse
argument_list|(
name|h
operator|.
name|query
argument_list|(
name|request
argument_list|(
name|reqFacetParamas
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|sumTest
specifier|public
name|void
name|sumTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Int Date
name|Collection
argument_list|<
name|Double
argument_list|>
name|intDate
init|=
name|getDoubleList
argument_list|(
literal|"sum"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"double"
argument_list|,
literal|"int"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|intDateTest
init|=
name|calculateNumberStat
argument_list|(
name|intDateTestStart
argument_list|,
literal|"sum"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intDate
argument_list|,
name|intDateTest
argument_list|)
expr_stmt|;
comment|//Int String
name|Collection
argument_list|<
name|Double
argument_list|>
name|intString
init|=
name|getDoubleList
argument_list|(
literal|"sum"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"double"
argument_list|,
literal|"int"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|intStringTest
init|=
name|calculateNumberStat
argument_list|(
name|intStringTestStart
argument_list|,
literal|"sum"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intString
argument_list|,
name|intStringTest
argument_list|)
expr_stmt|;
comment|//Long Date
name|Collection
argument_list|<
name|Double
argument_list|>
name|longDate
init|=
name|getDoubleList
argument_list|(
literal|"sum"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"double"
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|longDateTest
init|=
name|calculateNumberStat
argument_list|(
name|longDateTestStart
argument_list|,
literal|"sum"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|longDate
argument_list|,
name|longDateTest
argument_list|)
expr_stmt|;
comment|//Long String
name|Collection
argument_list|<
name|Double
argument_list|>
name|longString
init|=
name|getDoubleList
argument_list|(
literal|"sum"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"double"
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|longStringTest
init|=
name|calculateNumberStat
argument_list|(
name|longStringTestStart
argument_list|,
literal|"sum"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|longString
argument_list|,
name|longStringTest
argument_list|)
expr_stmt|;
comment|//Float Date
name|Collection
argument_list|<
name|Double
argument_list|>
name|floatDate
init|=
name|getDoubleList
argument_list|(
literal|"sum"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"double"
argument_list|,
literal|"float"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|floatDateTest
init|=
name|calculateNumberStat
argument_list|(
name|floatDateTestStart
argument_list|,
literal|"sum"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatDate
argument_list|,
name|floatDateTest
argument_list|)
expr_stmt|;
comment|//Float String
name|Collection
argument_list|<
name|Double
argument_list|>
name|floatString
init|=
name|getDoubleList
argument_list|(
literal|"sum"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"double"
argument_list|,
literal|"float"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|floatStringTest
init|=
name|calculateNumberStat
argument_list|(
name|floatStringTestStart
argument_list|,
literal|"sum"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatString
argument_list|,
name|floatStringTest
argument_list|)
expr_stmt|;
comment|//Double Date
name|Collection
argument_list|<
name|Double
argument_list|>
name|doubleDate
init|=
name|getDoubleList
argument_list|(
literal|"sum"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"double"
argument_list|,
literal|"double"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|doubleDateTest
init|=
name|calculateNumberStat
argument_list|(
name|doubleDateTestStart
argument_list|,
literal|"sum"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|doubleDate
argument_list|,
name|doubleDateTest
argument_list|)
expr_stmt|;
comment|//Double String
name|Collection
argument_list|<
name|Double
argument_list|>
name|doubleString
init|=
name|getDoubleList
argument_list|(
literal|"sum"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"double"
argument_list|,
literal|"double"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|doubleStringTest
init|=
name|calculateNumberStat
argument_list|(
name|doubleStringTestStart
argument_list|,
literal|"sum"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|doubleString
argument_list|,
name|doubleStringTest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|meanTest
specifier|public
name|void
name|meanTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Int Date
name|Collection
argument_list|<
name|Double
argument_list|>
name|intDate
init|=
name|getDoubleList
argument_list|(
literal|"mean"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"double"
argument_list|,
literal|"int"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|intDateTest
init|=
name|calculateNumberStat
argument_list|(
name|intDateTestStart
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intDate
argument_list|,
name|intDateTest
argument_list|)
expr_stmt|;
comment|//Int String
name|Collection
argument_list|<
name|Double
argument_list|>
name|intString
init|=
name|getDoubleList
argument_list|(
literal|"mean"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"double"
argument_list|,
literal|"int"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|intStringTest
init|=
name|calculateNumberStat
argument_list|(
name|intStringTestStart
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intString
argument_list|,
name|intStringTest
argument_list|)
expr_stmt|;
comment|//Long Date
name|Collection
argument_list|<
name|Double
argument_list|>
name|longDate
init|=
name|getDoubleList
argument_list|(
literal|"mean"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"double"
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|longDateTest
init|=
name|calculateNumberStat
argument_list|(
name|longDateTestStart
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|longDate
argument_list|,
name|longDateTest
argument_list|)
expr_stmt|;
comment|//Long String
name|Collection
argument_list|<
name|Double
argument_list|>
name|longString
init|=
name|getDoubleList
argument_list|(
literal|"mean"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"double"
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|longStringTest
init|=
name|calculateNumberStat
argument_list|(
name|longStringTestStart
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|longString
argument_list|,
name|longStringTest
argument_list|)
expr_stmt|;
comment|//Float Date
name|Collection
argument_list|<
name|Double
argument_list|>
name|floatDate
init|=
name|getDoubleList
argument_list|(
literal|"mean"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"double"
argument_list|,
literal|"float"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|floatDateTest
init|=
name|calculateNumberStat
argument_list|(
name|floatDateTestStart
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatDate
argument_list|,
name|floatDateTest
argument_list|)
expr_stmt|;
comment|//Float String
name|Collection
argument_list|<
name|Double
argument_list|>
name|floatString
init|=
name|getDoubleList
argument_list|(
literal|"mean"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"double"
argument_list|,
literal|"float"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|floatStringTest
init|=
name|calculateNumberStat
argument_list|(
name|floatStringTestStart
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatString
argument_list|,
name|floatStringTest
argument_list|)
expr_stmt|;
comment|//Double Date
name|Collection
argument_list|<
name|Double
argument_list|>
name|doubleDate
init|=
name|getDoubleList
argument_list|(
literal|"mean"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"double"
argument_list|,
literal|"double"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|doubleDateTest
init|=
name|calculateNumberStat
argument_list|(
name|doubleDateTestStart
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|doubleDate
argument_list|,
name|doubleDateTest
argument_list|)
expr_stmt|;
comment|//Double String
name|Collection
argument_list|<
name|Double
argument_list|>
name|doubleString
init|=
name|getDoubleList
argument_list|(
literal|"mean"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"double"
argument_list|,
literal|"double"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|doubleStringTest
init|=
name|calculateNumberStat
argument_list|(
name|doubleStringTestStart
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|doubleString
argument_list|,
name|doubleStringTest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|sumOfSquaresFacetAscTest
specifier|public
name|void
name|sumOfSquaresFacetAscTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Int Date
name|Collection
argument_list|<
name|Double
argument_list|>
name|intDate
init|=
name|getDoubleList
argument_list|(
literal|"sumOfSquares"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"double"
argument_list|,
literal|"int"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|intDateTest
init|=
name|calculateNumberStat
argument_list|(
name|intDateTestStart
argument_list|,
literal|"sumOfSquares"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intDate
argument_list|,
name|intDateTest
argument_list|)
expr_stmt|;
comment|//Int String
name|Collection
argument_list|<
name|Double
argument_list|>
name|intString
init|=
name|getDoubleList
argument_list|(
literal|"sumOfSquares"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"double"
argument_list|,
literal|"int"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|intStringTest
init|=
name|calculateNumberStat
argument_list|(
name|intStringTestStart
argument_list|,
literal|"sumOfSquares"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intString
argument_list|,
name|intStringTest
argument_list|)
expr_stmt|;
comment|//Long Date
name|Collection
argument_list|<
name|Double
argument_list|>
name|longDate
init|=
name|getDoubleList
argument_list|(
literal|"sumOfSquares"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"double"
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|longDateTest
init|=
name|calculateNumberStat
argument_list|(
name|longDateTestStart
argument_list|,
literal|"sumOfSquares"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|longDate
argument_list|,
name|longDateTest
argument_list|)
expr_stmt|;
comment|//Long String
name|Collection
argument_list|<
name|Double
argument_list|>
name|longString
init|=
name|getDoubleList
argument_list|(
literal|"sumOfSquares"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"double"
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|longStringTest
init|=
name|calculateNumberStat
argument_list|(
name|longStringTestStart
argument_list|,
literal|"sumOfSquares"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|longString
argument_list|,
name|longStringTest
argument_list|)
expr_stmt|;
comment|//Float Date
name|Collection
argument_list|<
name|Double
argument_list|>
name|floatDate
init|=
name|getDoubleList
argument_list|(
literal|"sumOfSquares"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"double"
argument_list|,
literal|"float"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|floatDateTest
init|=
name|calculateNumberStat
argument_list|(
name|floatDateTestStart
argument_list|,
literal|"sumOfSquares"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatDate
argument_list|,
name|floatDateTest
argument_list|)
expr_stmt|;
comment|//Float String
name|Collection
argument_list|<
name|Double
argument_list|>
name|floatString
init|=
name|getDoubleList
argument_list|(
literal|"sumOfSquares"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"double"
argument_list|,
literal|"float"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|floatStringTest
init|=
name|calculateNumberStat
argument_list|(
name|floatStringTestStart
argument_list|,
literal|"sumOfSquares"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatString
argument_list|,
name|floatStringTest
argument_list|)
expr_stmt|;
comment|//Double Date
name|Collection
argument_list|<
name|Double
argument_list|>
name|doubleDate
init|=
name|getDoubleList
argument_list|(
literal|"sumOfSquares"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"double"
argument_list|,
literal|"double"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|doubleDateTest
init|=
name|calculateNumberStat
argument_list|(
name|doubleDateTestStart
argument_list|,
literal|"sumOfSquares"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|doubleDate
argument_list|,
name|doubleDateTest
argument_list|)
expr_stmt|;
comment|//Double String
name|Collection
argument_list|<
name|Double
argument_list|>
name|doubleString
init|=
name|getDoubleList
argument_list|(
literal|"sumOfSquares"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"double"
argument_list|,
literal|"double"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|doubleStringTest
init|=
name|calculateNumberStat
argument_list|(
name|doubleStringTestStart
argument_list|,
literal|"sumOfSquares"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|doubleString
argument_list|,
name|doubleStringTest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|stddevFacetAscTest
specifier|public
name|void
name|stddevFacetAscTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Int Date
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|intDate
init|=
name|getDoubleList
argument_list|(
literal|"stddev"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"double"
argument_list|,
literal|"int"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|intDateTest
init|=
name|calculateNumberStat
argument_list|(
name|intDateTestStart
argument_list|,
literal|"stddev"
argument_list|)
decl_stmt|;
name|checkStddevs
argument_list|(
name|intDate
argument_list|,
name|intDateTest
argument_list|)
expr_stmt|;
comment|//Int String
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|intString
init|=
name|getDoubleList
argument_list|(
literal|"stddev"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"double"
argument_list|,
literal|"int"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|intStringTest
init|=
name|calculateNumberStat
argument_list|(
name|intStringTestStart
argument_list|,
literal|"stddev"
argument_list|)
decl_stmt|;
name|checkStddevs
argument_list|(
name|intString
argument_list|,
name|intStringTest
argument_list|)
expr_stmt|;
comment|//Long Date
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|longDate
init|=
name|getDoubleList
argument_list|(
literal|"stddev"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"double"
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|longDateTest
init|=
name|calculateNumberStat
argument_list|(
name|longDateTestStart
argument_list|,
literal|"stddev"
argument_list|)
decl_stmt|;
name|checkStddevs
argument_list|(
name|longDate
argument_list|,
name|longDateTest
argument_list|)
expr_stmt|;
comment|//Long String
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|longString
init|=
name|getDoubleList
argument_list|(
literal|"stddev"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"double"
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|longStringTest
init|=
name|calculateNumberStat
argument_list|(
name|longStringTestStart
argument_list|,
literal|"stddev"
argument_list|)
decl_stmt|;
name|checkStddevs
argument_list|(
name|longString
argument_list|,
name|longStringTest
argument_list|)
expr_stmt|;
comment|//Float Date
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|floatDate
init|=
name|getDoubleList
argument_list|(
literal|"stddev"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"double"
argument_list|,
literal|"float"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|floatDateTest
init|=
name|calculateNumberStat
argument_list|(
name|floatDateTestStart
argument_list|,
literal|"stddev"
argument_list|)
decl_stmt|;
name|checkStddevs
argument_list|(
name|floatDate
argument_list|,
name|floatDateTest
argument_list|)
expr_stmt|;
comment|//Float String
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|floatString
init|=
name|getDoubleList
argument_list|(
literal|"stddev"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"double"
argument_list|,
literal|"float"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|floatStringTest
init|=
name|calculateNumberStat
argument_list|(
name|floatStringTestStart
argument_list|,
literal|"stddev"
argument_list|)
decl_stmt|;
name|checkStddevs
argument_list|(
name|floatString
argument_list|,
name|floatStringTest
argument_list|)
expr_stmt|;
comment|//Double Date
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|doubleDate
init|=
name|getDoubleList
argument_list|(
literal|"stddev"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"double"
argument_list|,
literal|"double"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|doubleDateTest
init|=
name|calculateNumberStat
argument_list|(
name|doubleDateTestStart
argument_list|,
literal|"stddev"
argument_list|)
decl_stmt|;
name|checkStddevs
argument_list|(
name|doubleDate
argument_list|,
name|doubleDateTest
argument_list|)
expr_stmt|;
comment|//Double String
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|doubleString
init|=
name|getDoubleList
argument_list|(
literal|"stddev"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"double"
argument_list|,
literal|"double"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|doubleStringTest
init|=
name|calculateNumberStat
argument_list|(
name|doubleStringTestStart
argument_list|,
literal|"stddev"
argument_list|)
decl_stmt|;
name|checkStddevs
argument_list|(
name|doubleString
argument_list|,
name|doubleStringTest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|medianFacetAscTest
specifier|public
name|void
name|medianFacetAscTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Int Date
name|Collection
argument_list|<
name|Double
argument_list|>
name|intDate
init|=
name|getDoubleList
argument_list|(
literal|"median"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"double"
argument_list|,
literal|"int"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|intDateTest
init|=
name|calculateNumberStat
argument_list|(
name|intDateTestStart
argument_list|,
literal|"median"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intDate
argument_list|,
name|intDateTest
argument_list|)
expr_stmt|;
comment|//Int String
name|Collection
argument_list|<
name|Double
argument_list|>
name|intString
init|=
name|getDoubleList
argument_list|(
literal|"median"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"double"
argument_list|,
literal|"int"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|intStringTest
init|=
name|calculateNumberStat
argument_list|(
name|intStringTestStart
argument_list|,
literal|"median"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intString
argument_list|,
name|intStringTest
argument_list|)
expr_stmt|;
comment|//Long Date
name|Collection
argument_list|<
name|Double
argument_list|>
name|longDate
init|=
name|getDoubleList
argument_list|(
literal|"median"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"double"
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|longDateTest
init|=
name|calculateNumberStat
argument_list|(
name|longDateTestStart
argument_list|,
literal|"median"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|longDate
argument_list|,
name|longDateTest
argument_list|)
expr_stmt|;
comment|//Long String
name|Collection
argument_list|<
name|Double
argument_list|>
name|longString
init|=
name|getDoubleList
argument_list|(
literal|"median"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"double"
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|longStringTest
init|=
name|calculateNumberStat
argument_list|(
name|longStringTestStart
argument_list|,
literal|"median"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|longString
argument_list|,
name|longStringTest
argument_list|)
expr_stmt|;
comment|//Float Date
name|Collection
argument_list|<
name|Double
argument_list|>
name|floatDate
init|=
name|getDoubleList
argument_list|(
literal|"median"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"double"
argument_list|,
literal|"float"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|floatDateTest
init|=
name|calculateNumberStat
argument_list|(
name|floatDateTestStart
argument_list|,
literal|"median"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatDate
argument_list|,
name|floatDateTest
argument_list|)
expr_stmt|;
comment|//Float String
name|Collection
argument_list|<
name|Double
argument_list|>
name|floatString
init|=
name|getDoubleList
argument_list|(
literal|"median"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"double"
argument_list|,
literal|"float"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|floatStringTest
init|=
name|calculateNumberStat
argument_list|(
name|floatStringTestStart
argument_list|,
literal|"median"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatString
argument_list|,
name|floatStringTest
argument_list|)
expr_stmt|;
comment|//Double Date
name|Collection
argument_list|<
name|Double
argument_list|>
name|doubleDate
init|=
name|getDoubleList
argument_list|(
literal|"median"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"double"
argument_list|,
literal|"double"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|doubleDateTest
init|=
name|calculateNumberStat
argument_list|(
name|doubleDateTestStart
argument_list|,
literal|"median"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|doubleDate
argument_list|,
name|doubleDateTest
argument_list|)
expr_stmt|;
comment|//Double String
name|Collection
argument_list|<
name|Double
argument_list|>
name|doubleString
init|=
name|getDoubleList
argument_list|(
literal|"median"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"double"
argument_list|,
literal|"double"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|doubleStringTest
init|=
name|calculateNumberStat
argument_list|(
name|doubleStringTestStart
argument_list|,
literal|"median"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|doubleString
argument_list|,
name|doubleStringTest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|perc20Test
specifier|public
name|void
name|perc20Test
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Int Date
name|Collection
argument_list|<
name|Integer
argument_list|>
name|intDate
init|=
name|getIntegerList
argument_list|(
literal|"percentile_20n"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"int"
argument_list|,
literal|"int"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|intDateTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Integer
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|intDateTestStart
argument_list|,
literal|"perc_20"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intDate
argument_list|,
name|intDateTest
argument_list|)
expr_stmt|;
comment|//Int String
name|Collection
argument_list|<
name|Integer
argument_list|>
name|intString
init|=
name|getIntegerList
argument_list|(
literal|"percentile_20n"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"int"
argument_list|,
literal|"int"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|intStringTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Integer
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|intStringTestStart
argument_list|,
literal|"perc_20"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intString
argument_list|,
name|intStringTest
argument_list|)
expr_stmt|;
comment|//Long Date
name|Collection
argument_list|<
name|Long
argument_list|>
name|longDate
init|=
name|getLongList
argument_list|(
literal|"percentile_20n"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"long"
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|longDateTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|longDateTestStart
argument_list|,
literal|"perc_20"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|longDate
argument_list|,
name|longDateTest
argument_list|)
expr_stmt|;
comment|//Long String
name|Collection
argument_list|<
name|Long
argument_list|>
name|longString
init|=
name|getLongList
argument_list|(
literal|"percentile_20n"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"long"
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|longStringTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|longStringTestStart
argument_list|,
literal|"perc_20"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|longString
argument_list|,
name|longStringTest
argument_list|)
expr_stmt|;
comment|//Float Date
name|Collection
argument_list|<
name|Float
argument_list|>
name|floatDate
init|=
name|getFloatList
argument_list|(
literal|"percentile_20n"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"float"
argument_list|,
literal|"float"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Float
argument_list|>
name|floatDateTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Float
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|floatDateTestStart
argument_list|,
literal|"perc_20"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatDate
argument_list|,
name|floatDateTest
argument_list|)
expr_stmt|;
comment|//Float String
name|Collection
argument_list|<
name|Float
argument_list|>
name|floatString
init|=
name|getFloatList
argument_list|(
literal|"percentile_20n"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"float"
argument_list|,
literal|"float"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Float
argument_list|>
name|floatStringTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Float
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|floatStringTestStart
argument_list|,
literal|"perc_20"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatString
argument_list|,
name|floatStringTest
argument_list|)
expr_stmt|;
comment|//Double Date
name|Collection
argument_list|<
name|Double
argument_list|>
name|doubleDate
init|=
name|getDoubleList
argument_list|(
literal|"percentile_20n"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"double"
argument_list|,
literal|"double"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|doubleDateTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Double
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|doubleDateTestStart
argument_list|,
literal|"perc_20"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|doubleDate
argument_list|,
name|doubleDateTest
argument_list|)
expr_stmt|;
comment|//Double String
name|Collection
argument_list|<
name|Double
argument_list|>
name|doubleString
init|=
name|getDoubleList
argument_list|(
literal|"percentile_20n"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"double"
argument_list|,
literal|"double"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|doubleStringTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Double
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|doubleStringTestStart
argument_list|,
literal|"perc_20"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|doubleString
argument_list|,
name|doubleStringTest
argument_list|)
expr_stmt|;
comment|//Date Int
name|Collection
argument_list|<
name|String
argument_list|>
name|dateInt
init|=
name|getStringList
argument_list|(
literal|"percentile_20"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"int_id"
argument_list|,
literal|"date"
argument_list|,
literal|"date"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|dateIntTest
init|=
operator|(
name|ArrayList
argument_list|<
name|String
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|dateIntTestStart
argument_list|,
literal|"perc_20"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|dateInt
argument_list|,
name|dateIntTest
argument_list|)
expr_stmt|;
comment|//Date Long
name|Collection
argument_list|<
name|String
argument_list|>
name|dateString
init|=
name|getStringList
argument_list|(
literal|"percentile_20"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"long_ld"
argument_list|,
literal|"date"
argument_list|,
literal|"date"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|dateLongTest
init|=
operator|(
name|ArrayList
argument_list|<
name|String
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|dateLongTestStart
argument_list|,
literal|"perc_20"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|dateString
argument_list|,
name|dateLongTest
argument_list|)
expr_stmt|;
comment|//String Int
name|Collection
argument_list|<
name|String
argument_list|>
name|stringInt
init|=
name|getStringList
argument_list|(
literal|"percentile_20"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"int_id"
argument_list|,
literal|"str"
argument_list|,
literal|"str"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|stringIntTest
init|=
operator|(
name|ArrayList
argument_list|<
name|String
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|stringIntTestStart
argument_list|,
literal|"perc_20"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|stringInt
argument_list|,
name|stringIntTest
argument_list|)
expr_stmt|;
comment|//String Long
name|Collection
argument_list|<
name|String
argument_list|>
name|stringLong
init|=
name|getStringList
argument_list|(
literal|"percentile_20"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"long_ld"
argument_list|,
literal|"str"
argument_list|,
literal|"str"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|stringLongTest
init|=
operator|(
name|ArrayList
argument_list|<
name|String
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|stringLongTestStart
argument_list|,
literal|"perc_20"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|stringLong
argument_list|,
name|stringLongTest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|perc60Test
specifier|public
name|void
name|perc60Test
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Int Date
name|Collection
argument_list|<
name|Integer
argument_list|>
name|intDate
init|=
name|getIntegerList
argument_list|(
literal|"percentile_60n"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"int"
argument_list|,
literal|"int"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|intDateTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Integer
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|intDateTestStart
argument_list|,
literal|"perc_60"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intDate
argument_list|,
name|intDateTest
argument_list|)
expr_stmt|;
comment|//Int String
name|Collection
argument_list|<
name|Integer
argument_list|>
name|intString
init|=
name|getIntegerList
argument_list|(
literal|"percentile_60n"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"int"
argument_list|,
literal|"int"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|intStringTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Integer
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|intStringTestStart
argument_list|,
literal|"perc_60"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intString
argument_list|,
name|intStringTest
argument_list|)
expr_stmt|;
comment|//Long Date
name|Collection
argument_list|<
name|Long
argument_list|>
name|longDate
init|=
name|getLongList
argument_list|(
literal|"percentile_60n"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"long"
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|longDateTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|longDateTestStart
argument_list|,
literal|"perc_60"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|longDate
argument_list|,
name|longDateTest
argument_list|)
expr_stmt|;
comment|//Long String
name|Collection
argument_list|<
name|Long
argument_list|>
name|longString
init|=
name|getLongList
argument_list|(
literal|"percentile_60n"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"long"
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|longStringTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|longStringTestStart
argument_list|,
literal|"perc_60"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|longString
argument_list|,
name|longStringTest
argument_list|)
expr_stmt|;
comment|//Float Date
name|Collection
argument_list|<
name|Float
argument_list|>
name|floatDate
init|=
name|getFloatList
argument_list|(
literal|"percentile_60n"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"float"
argument_list|,
literal|"float"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Float
argument_list|>
name|floatDateTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Float
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|floatDateTestStart
argument_list|,
literal|"perc_60"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatDate
argument_list|,
name|floatDateTest
argument_list|)
expr_stmt|;
comment|//Float String
name|Collection
argument_list|<
name|Float
argument_list|>
name|floatString
init|=
name|getFloatList
argument_list|(
literal|"percentile_60n"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"float"
argument_list|,
literal|"float"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Float
argument_list|>
name|floatStringTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Float
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|floatStringTestStart
argument_list|,
literal|"perc_60"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatString
argument_list|,
name|floatStringTest
argument_list|)
expr_stmt|;
comment|//Double Date
name|Collection
argument_list|<
name|Double
argument_list|>
name|doubleDate
init|=
name|getDoubleList
argument_list|(
literal|"percentile_60n"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"double"
argument_list|,
literal|"double"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|doubleDateTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Double
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|doubleDateTestStart
argument_list|,
literal|"perc_60"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|doubleDate
argument_list|,
name|doubleDateTest
argument_list|)
expr_stmt|;
comment|//Double String
name|Collection
argument_list|<
name|Double
argument_list|>
name|doubleString
init|=
name|getDoubleList
argument_list|(
literal|"percentile_60n"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"double"
argument_list|,
literal|"double"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|doubleStringTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Double
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|doubleStringTestStart
argument_list|,
literal|"perc_60"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|doubleString
argument_list|,
name|doubleStringTest
argument_list|)
expr_stmt|;
comment|//Date Int
name|Collection
argument_list|<
name|String
argument_list|>
name|dateInt
init|=
name|getStringList
argument_list|(
literal|"percentile_60"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"int_id"
argument_list|,
literal|"date"
argument_list|,
literal|"date"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|dateIntTest
init|=
operator|(
name|ArrayList
argument_list|<
name|String
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|dateIntTestStart
argument_list|,
literal|"perc_60"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|dateInt
argument_list|,
name|dateIntTest
argument_list|)
expr_stmt|;
comment|//Date Long
name|Collection
argument_list|<
name|String
argument_list|>
name|dateString
init|=
name|getStringList
argument_list|(
literal|"percentile_60"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"long_ld"
argument_list|,
literal|"date"
argument_list|,
literal|"date"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|dateLongTest
init|=
operator|(
name|ArrayList
argument_list|<
name|String
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|dateLongTestStart
argument_list|,
literal|"perc_60"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|dateString
argument_list|,
name|dateLongTest
argument_list|)
expr_stmt|;
comment|//String Int
name|Collection
argument_list|<
name|String
argument_list|>
name|stringInt
init|=
name|getStringList
argument_list|(
literal|"percentile_60"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"int_id"
argument_list|,
literal|"str"
argument_list|,
literal|"str"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|stringIntTest
init|=
operator|(
name|ArrayList
argument_list|<
name|String
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|stringIntTestStart
argument_list|,
literal|"perc_60"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|stringInt
argument_list|,
name|stringIntTest
argument_list|)
expr_stmt|;
comment|//String Long
name|Collection
argument_list|<
name|String
argument_list|>
name|stringLong
init|=
name|getStringList
argument_list|(
literal|"percentile_60"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"long_ld"
argument_list|,
literal|"str"
argument_list|,
literal|"str"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|stringLongTest
init|=
operator|(
name|ArrayList
argument_list|<
name|String
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|stringLongTestStart
argument_list|,
literal|"perc_60"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|stringLong
argument_list|,
name|stringLongTest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|minTest
specifier|public
name|void
name|minTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Int Date
name|Collection
argument_list|<
name|Integer
argument_list|>
name|intDate
init|=
name|getIntegerList
argument_list|(
literal|"minn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"int"
argument_list|,
literal|"int"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|intDateTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Integer
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|intDateTestStart
argument_list|,
literal|"min"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intDate
argument_list|,
name|intDateTest
argument_list|)
expr_stmt|;
comment|//Int String
name|Collection
argument_list|<
name|Integer
argument_list|>
name|intString
init|=
name|getIntegerList
argument_list|(
literal|"minn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"int"
argument_list|,
literal|"int"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|intStringTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Integer
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|intStringTestStart
argument_list|,
literal|"min"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intString
argument_list|,
name|intStringTest
argument_list|)
expr_stmt|;
comment|//Long Date
name|Collection
argument_list|<
name|Long
argument_list|>
name|longDate
init|=
name|getLongList
argument_list|(
literal|"minn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"long"
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|longDateTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|longDateTestStart
argument_list|,
literal|"min"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|longDate
argument_list|,
name|longDateTest
argument_list|)
expr_stmt|;
comment|//Long String
name|Collection
argument_list|<
name|Long
argument_list|>
name|longString
init|=
name|getLongList
argument_list|(
literal|"minn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"long"
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|longStringTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|longStringTestStart
argument_list|,
literal|"min"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|longString
argument_list|,
name|longStringTest
argument_list|)
expr_stmt|;
comment|//Float Date
name|Collection
argument_list|<
name|Float
argument_list|>
name|floatDate
init|=
name|getFloatList
argument_list|(
literal|"minn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"float"
argument_list|,
literal|"float"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Float
argument_list|>
name|floatDateTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Float
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|floatDateTestStart
argument_list|,
literal|"min"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatDate
argument_list|,
name|floatDateTest
argument_list|)
expr_stmt|;
comment|//Float String
name|Collection
argument_list|<
name|Float
argument_list|>
name|floatString
init|=
name|getFloatList
argument_list|(
literal|"minn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"float"
argument_list|,
literal|"float"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Float
argument_list|>
name|floatStringTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Float
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|floatStringTestStart
argument_list|,
literal|"min"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatString
argument_list|,
name|floatStringTest
argument_list|)
expr_stmt|;
comment|//Double Date
name|Collection
argument_list|<
name|Double
argument_list|>
name|doubleDate
init|=
name|getDoubleList
argument_list|(
literal|"minn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"double"
argument_list|,
literal|"double"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|doubleDateTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Double
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|doubleDateTestStart
argument_list|,
literal|"min"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|doubleDate
argument_list|,
name|doubleDateTest
argument_list|)
expr_stmt|;
comment|//Double String
name|Collection
argument_list|<
name|Double
argument_list|>
name|doubleString
init|=
name|getDoubleList
argument_list|(
literal|"minn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"double"
argument_list|,
literal|"double"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|doubleStringTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Double
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|doubleStringTestStart
argument_list|,
literal|"min"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|doubleString
argument_list|,
name|doubleStringTest
argument_list|)
expr_stmt|;
comment|//Date Int
name|Collection
argument_list|<
name|String
argument_list|>
name|dateInt
init|=
name|getStringList
argument_list|(
literal|"min"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"int_id"
argument_list|,
literal|"date"
argument_list|,
literal|"date"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|dateIntTest
init|=
operator|(
name|ArrayList
argument_list|<
name|String
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|dateIntTestStart
argument_list|,
literal|"min"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|dateInt
argument_list|,
name|dateIntTest
argument_list|)
expr_stmt|;
comment|//Date Long
name|Collection
argument_list|<
name|String
argument_list|>
name|dateString
init|=
name|getStringList
argument_list|(
literal|"min"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"long_ld"
argument_list|,
literal|"date"
argument_list|,
literal|"date"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|dateLongTest
init|=
operator|(
name|ArrayList
argument_list|<
name|String
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|dateLongTestStart
argument_list|,
literal|"min"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|dateString
argument_list|,
name|dateLongTest
argument_list|)
expr_stmt|;
comment|//String Int
name|Collection
argument_list|<
name|String
argument_list|>
name|stringInt
init|=
name|getStringList
argument_list|(
literal|"min"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"int_id"
argument_list|,
literal|"str"
argument_list|,
literal|"str"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|stringIntTest
init|=
operator|(
name|ArrayList
argument_list|<
name|String
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|stringIntTestStart
argument_list|,
literal|"min"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|stringInt
argument_list|,
name|stringIntTest
argument_list|)
expr_stmt|;
comment|//String Long
name|Collection
argument_list|<
name|String
argument_list|>
name|stringLong
init|=
name|getStringList
argument_list|(
literal|"min"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"long_ld"
argument_list|,
literal|"str"
argument_list|,
literal|"str"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|stringLongTest
init|=
operator|(
name|ArrayList
argument_list|<
name|String
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|stringLongTestStart
argument_list|,
literal|"min"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|stringLong
argument_list|,
name|stringLongTest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|maxTest
specifier|public
name|void
name|maxTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Int Date
name|Collection
argument_list|<
name|Integer
argument_list|>
name|intDate
init|=
name|getIntegerList
argument_list|(
literal|"maxn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"int"
argument_list|,
literal|"int"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|intDateTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Integer
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|intDateTestStart
argument_list|,
literal|"max"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intDate
argument_list|,
name|intDateTest
argument_list|)
expr_stmt|;
comment|//Int String
name|Collection
argument_list|<
name|Integer
argument_list|>
name|intString
init|=
name|getIntegerList
argument_list|(
literal|"maxn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"int"
argument_list|,
literal|"int"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|intStringTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Integer
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|intStringTestStart
argument_list|,
literal|"max"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intString
argument_list|,
name|intStringTest
argument_list|)
expr_stmt|;
comment|//Long Date
name|Collection
argument_list|<
name|Long
argument_list|>
name|longDate
init|=
name|getLongList
argument_list|(
literal|"maxn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"long"
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|longDateTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|longDateTestStart
argument_list|,
literal|"max"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|longDate
argument_list|,
name|longDateTest
argument_list|)
expr_stmt|;
comment|//Long String
name|Collection
argument_list|<
name|Long
argument_list|>
name|longString
init|=
name|getLongList
argument_list|(
literal|"maxn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"long"
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|longStringTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|longStringTestStart
argument_list|,
literal|"max"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|longString
argument_list|,
name|longStringTest
argument_list|)
expr_stmt|;
comment|//Float Date
name|Collection
argument_list|<
name|Float
argument_list|>
name|floatDate
init|=
name|getFloatList
argument_list|(
literal|"maxn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"float"
argument_list|,
literal|"float"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Float
argument_list|>
name|floatDateTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Float
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|floatDateTestStart
argument_list|,
literal|"max"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatDate
argument_list|,
name|floatDateTest
argument_list|)
expr_stmt|;
comment|//Float String
name|Collection
argument_list|<
name|Float
argument_list|>
name|floatString
init|=
name|getFloatList
argument_list|(
literal|"maxn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"float"
argument_list|,
literal|"float"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Float
argument_list|>
name|floatStringTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Float
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|floatStringTestStart
argument_list|,
literal|"max"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatString
argument_list|,
name|floatStringTest
argument_list|)
expr_stmt|;
comment|//Double Date
name|Collection
argument_list|<
name|Double
argument_list|>
name|doubleDate
init|=
name|getDoubleList
argument_list|(
literal|"maxn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"double"
argument_list|,
literal|"double"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|doubleDateTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Double
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|doubleDateTestStart
argument_list|,
literal|"max"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|doubleDate
argument_list|,
name|doubleDateTest
argument_list|)
expr_stmt|;
comment|//Double String
name|Collection
argument_list|<
name|Double
argument_list|>
name|doubleString
init|=
name|getDoubleList
argument_list|(
literal|"maxn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"double"
argument_list|,
literal|"double"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|doubleStringTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Double
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|doubleStringTestStart
argument_list|,
literal|"max"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|doubleString
argument_list|,
name|doubleStringTest
argument_list|)
expr_stmt|;
comment|//String Int
name|Collection
argument_list|<
name|String
argument_list|>
name|stringInt
init|=
name|getStringList
argument_list|(
literal|"max"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"int_id"
argument_list|,
literal|"str"
argument_list|,
literal|"str"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|stringIntTest
init|=
operator|(
name|ArrayList
argument_list|<
name|String
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|stringIntTestStart
argument_list|,
literal|"max"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|stringInt
argument_list|,
name|stringIntTest
argument_list|)
expr_stmt|;
comment|//String Long
name|Collection
argument_list|<
name|String
argument_list|>
name|stringLong
init|=
name|getStringList
argument_list|(
literal|"max"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"long_ld"
argument_list|,
literal|"str"
argument_list|,
literal|"str"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|stringLongTest
init|=
operator|(
name|ArrayList
argument_list|<
name|String
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|stringLongTestStart
argument_list|,
literal|"max"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|stringLong
argument_list|,
name|stringLongTest
argument_list|)
expr_stmt|;
comment|//Date Int
name|Collection
argument_list|<
name|String
argument_list|>
name|dateInt
init|=
name|getStringList
argument_list|(
literal|"max"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"int_id"
argument_list|,
literal|"date"
argument_list|,
literal|"date"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|dateIntTest
init|=
operator|(
name|ArrayList
argument_list|<
name|String
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|dateIntTestStart
argument_list|,
literal|"max"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|dateInt
argument_list|,
name|dateIntTest
argument_list|)
expr_stmt|;
comment|//Date Long
name|Collection
argument_list|<
name|String
argument_list|>
name|dateString
init|=
name|getStringList
argument_list|(
literal|"max"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"long_ld"
argument_list|,
literal|"date"
argument_list|,
literal|"date"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|dateLongTest
init|=
operator|(
name|ArrayList
argument_list|<
name|String
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|dateLongTestStart
argument_list|,
literal|"max"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|dateString
argument_list|,
name|dateLongTest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|uniqueTest
specifier|public
name|void
name|uniqueTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Int Date
name|Collection
argument_list|<
name|Long
argument_list|>
name|intDate
init|=
name|getLongList
argument_list|(
literal|"uniquen"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"long"
argument_list|,
literal|"int"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|intDateTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|intDateTestStart
argument_list|,
literal|"unique"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intDate
argument_list|,
name|intDateTest
argument_list|)
expr_stmt|;
comment|//Int String
name|Collection
argument_list|<
name|Long
argument_list|>
name|intString
init|=
name|getLongList
argument_list|(
literal|"uniquen"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"long"
argument_list|,
literal|"int"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|intStringTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|intStringTestStart
argument_list|,
literal|"unique"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intString
argument_list|,
name|intStringTest
argument_list|)
expr_stmt|;
comment|//Long Date
name|Collection
argument_list|<
name|Long
argument_list|>
name|longDate
init|=
name|getLongList
argument_list|(
literal|"uniquen"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"long"
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|longDateTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|longDateTestStart
argument_list|,
literal|"unique"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|longDate
argument_list|,
name|longDateTest
argument_list|)
expr_stmt|;
comment|//Long String
name|Collection
argument_list|<
name|Long
argument_list|>
name|longString
init|=
name|getLongList
argument_list|(
literal|"uniquen"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"long"
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|longStringTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|longStringTestStart
argument_list|,
literal|"unique"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|longString
argument_list|,
name|longStringTest
argument_list|)
expr_stmt|;
comment|//Float Date
name|Collection
argument_list|<
name|Long
argument_list|>
name|floatDate
init|=
name|getLongList
argument_list|(
literal|"uniquen"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"long"
argument_list|,
literal|"float"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|floatDateTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|floatDateTestStart
argument_list|,
literal|"unique"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatDate
argument_list|,
name|floatDateTest
argument_list|)
expr_stmt|;
comment|//Float String
name|Collection
argument_list|<
name|Long
argument_list|>
name|floatString
init|=
name|getLongList
argument_list|(
literal|"uniquen"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"long"
argument_list|,
literal|"float"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|floatStringTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|floatStringTestStart
argument_list|,
literal|"unique"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatString
argument_list|,
name|floatStringTest
argument_list|)
expr_stmt|;
comment|//Double Date
name|Collection
argument_list|<
name|Long
argument_list|>
name|doubleDate
init|=
name|getLongList
argument_list|(
literal|"uniquen"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"long"
argument_list|,
literal|"double"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|doubleDateTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|doubleDateTestStart
argument_list|,
literal|"unique"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|doubleDate
argument_list|,
name|doubleDateTest
argument_list|)
expr_stmt|;
comment|//Double String
name|Collection
argument_list|<
name|Long
argument_list|>
name|doubleString
init|=
name|getLongList
argument_list|(
literal|"uniquen"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"long"
argument_list|,
literal|"double"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|doubleStringTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|doubleStringTestStart
argument_list|,
literal|"unique"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|doubleString
argument_list|,
name|doubleStringTest
argument_list|)
expr_stmt|;
comment|//Date Int
name|Collection
argument_list|<
name|Long
argument_list|>
name|dateInt
init|=
name|getLongList
argument_list|(
literal|"unique"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"int_id"
argument_list|,
literal|"long"
argument_list|,
literal|"date"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|dateIntTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|dateIntTestStart
argument_list|,
literal|"unique"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|dateInt
argument_list|,
name|dateIntTest
argument_list|)
expr_stmt|;
comment|//Date Long
name|Collection
argument_list|<
name|Long
argument_list|>
name|dateString
init|=
name|getLongList
argument_list|(
literal|"unique"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"long_ld"
argument_list|,
literal|"long"
argument_list|,
literal|"date"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|dateLongTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|dateLongTestStart
argument_list|,
literal|"unique"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|dateString
argument_list|,
name|dateLongTest
argument_list|)
expr_stmt|;
comment|//String Int
name|Collection
argument_list|<
name|Long
argument_list|>
name|stringInt
init|=
name|getLongList
argument_list|(
literal|"unique"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"int_id"
argument_list|,
literal|"long"
argument_list|,
literal|"str"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|stringIntTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|stringIntTestStart
argument_list|,
literal|"unique"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|stringInt
argument_list|,
name|stringIntTest
argument_list|)
expr_stmt|;
comment|//String Long
name|Collection
argument_list|<
name|Long
argument_list|>
name|stringLong
init|=
name|getLongList
argument_list|(
literal|"unique"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"long_ld"
argument_list|,
literal|"long"
argument_list|,
literal|"str"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|stringLongTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|stringLongTestStart
argument_list|,
literal|"unique"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|stringLong
argument_list|,
name|stringLongTest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|countTest
specifier|public
name|void
name|countTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Int Date
name|Collection
argument_list|<
name|Long
argument_list|>
name|intDate
init|=
name|getLongList
argument_list|(
literal|"countn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"long"
argument_list|,
literal|"int"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|intDateTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|intDateTestStart
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intDate
argument_list|,
name|intDateTest
argument_list|)
expr_stmt|;
comment|//Int String
name|Collection
argument_list|<
name|Long
argument_list|>
name|intString
init|=
name|getLongList
argument_list|(
literal|"countn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"long"
argument_list|,
literal|"int"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|intStringTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|intStringTestStart
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intString
argument_list|,
name|intStringTest
argument_list|)
expr_stmt|;
comment|//Long Date
name|Collection
argument_list|<
name|Long
argument_list|>
name|longDate
init|=
name|getLongList
argument_list|(
literal|"countn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"long"
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|longDateTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|longDateTestStart
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|longDate
argument_list|,
name|longDateTest
argument_list|)
expr_stmt|;
comment|//Long String
name|Collection
argument_list|<
name|Long
argument_list|>
name|longString
init|=
name|getLongList
argument_list|(
literal|"countn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"long"
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|longStringTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|longStringTestStart
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|longString
argument_list|,
name|longStringTest
argument_list|)
expr_stmt|;
comment|//Float Date
name|Collection
argument_list|<
name|Long
argument_list|>
name|floatDate
init|=
name|getLongList
argument_list|(
literal|"countn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"long"
argument_list|,
literal|"float"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|floatDateTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|floatDateTestStart
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatDate
argument_list|,
name|floatDateTest
argument_list|)
expr_stmt|;
comment|//Float String
name|Collection
argument_list|<
name|Long
argument_list|>
name|floatString
init|=
name|getLongList
argument_list|(
literal|"countn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"long"
argument_list|,
literal|"float"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|floatStringTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|floatStringTestStart
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatString
argument_list|,
name|floatStringTest
argument_list|)
expr_stmt|;
comment|//Double Date
name|Collection
argument_list|<
name|Long
argument_list|>
name|doubleDate
init|=
name|getLongList
argument_list|(
literal|"countn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"long"
argument_list|,
literal|"double"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|doubleDateTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|doubleDateTestStart
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|doubleDate
argument_list|,
name|doubleDateTest
argument_list|)
expr_stmt|;
comment|//Double String
name|Collection
argument_list|<
name|Long
argument_list|>
name|doubleString
init|=
name|getLongList
argument_list|(
literal|"countn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"long"
argument_list|,
literal|"double"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|doubleStringTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|doubleStringTestStart
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|doubleString
argument_list|,
name|doubleStringTest
argument_list|)
expr_stmt|;
comment|//Date Int
name|Collection
argument_list|<
name|Long
argument_list|>
name|dateInt
init|=
name|getLongList
argument_list|(
literal|"count"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"int_id"
argument_list|,
literal|"long"
argument_list|,
literal|"date"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|dateIntTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|dateIntTestStart
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|dateIntTest
argument_list|,
name|dateInt
argument_list|)
expr_stmt|;
comment|//Date Long
name|Collection
argument_list|<
name|Long
argument_list|>
name|dateLong
init|=
name|getLongList
argument_list|(
literal|"count"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"long_ld"
argument_list|,
literal|"long"
argument_list|,
literal|"date"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|dateLongTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|dateLongTestStart
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|dateLong
argument_list|,
name|dateLongTest
argument_list|)
expr_stmt|;
comment|//String Int
name|Collection
argument_list|<
name|Long
argument_list|>
name|stringInt
init|=
name|getLongList
argument_list|(
literal|"count"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"int_id"
argument_list|,
literal|"long"
argument_list|,
literal|"str"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|stringIntTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|stringIntTestStart
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|stringInt
argument_list|,
name|stringIntTest
argument_list|)
expr_stmt|;
comment|//String Long
name|Collection
argument_list|<
name|Long
argument_list|>
name|stringLong
init|=
name|getLongList
argument_list|(
literal|"count"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"long_ld"
argument_list|,
literal|"long"
argument_list|,
literal|"str"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|stringLongTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|stringLongTestStart
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|stringLong
argument_list|,
name|stringLongTest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|missingTest
specifier|public
name|void
name|missingTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Int Date
name|Collection
argument_list|<
name|Long
argument_list|>
name|intDate
init|=
name|getLongList
argument_list|(
literal|"missingn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"long"
argument_list|,
literal|"int"
argument_list|)
decl_stmt|;
name|setLatestType
argument_list|(
literal|"int"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intDateTestMissing
argument_list|,
name|intDate
argument_list|)
expr_stmt|;
comment|//Int String
name|Collection
argument_list|<
name|Long
argument_list|>
name|intString
init|=
name|getLongList
argument_list|(
literal|"missingn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"long"
argument_list|,
literal|"int"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intStringTestMissing
argument_list|,
name|intString
argument_list|)
expr_stmt|;
comment|//Long Date
name|Collection
argument_list|<
name|Long
argument_list|>
name|longDate
init|=
name|getLongList
argument_list|(
literal|"missingn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"long"
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
name|setLatestType
argument_list|(
literal|"long"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|longDateTestMissing
argument_list|,
name|longDate
argument_list|)
expr_stmt|;
comment|//Long String
name|Collection
argument_list|<
name|Long
argument_list|>
name|longString
init|=
name|getLongList
argument_list|(
literal|"missingn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"long"
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|longStringTestMissing
argument_list|,
name|longString
argument_list|)
expr_stmt|;
comment|//Float Date
name|Collection
argument_list|<
name|Long
argument_list|>
name|floatDate
init|=
name|getLongList
argument_list|(
literal|"missingn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"long"
argument_list|,
literal|"float"
argument_list|)
decl_stmt|;
name|setLatestType
argument_list|(
literal|"float"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatDateTestMissing
argument_list|,
name|floatDate
argument_list|)
expr_stmt|;
comment|//Float String
name|Collection
argument_list|<
name|Long
argument_list|>
name|floatString
init|=
name|getLongList
argument_list|(
literal|"missingn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"long"
argument_list|,
literal|"float"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatStringTestMissing
argument_list|,
name|floatString
argument_list|)
expr_stmt|;
comment|//Double Date
name|Collection
argument_list|<
name|Long
argument_list|>
name|doubleDate
init|=
name|getLongList
argument_list|(
literal|"missingn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"long"
argument_list|,
literal|"double"
argument_list|)
decl_stmt|;
name|setLatestType
argument_list|(
literal|"double"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|doubleDateTestMissing
argument_list|,
name|doubleDate
argument_list|)
expr_stmt|;
comment|//Double String
name|Collection
argument_list|<
name|Long
argument_list|>
name|doubleString
init|=
name|getLongList
argument_list|(
literal|"missingn"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"long"
argument_list|,
literal|"double"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|doubleStringTestMissing
argument_list|,
name|doubleString
argument_list|)
expr_stmt|;
comment|//Date Int
name|Collection
argument_list|<
name|Long
argument_list|>
name|dateInt
init|=
name|getLongList
argument_list|(
literal|"missing"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"int_id"
argument_list|,
literal|"long"
argument_list|,
literal|"date"
argument_list|)
decl_stmt|;
name|setLatestType
argument_list|(
literal|"date"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|dateIntTestMissing
argument_list|,
name|dateInt
argument_list|)
expr_stmt|;
comment|//Date Long
name|Collection
argument_list|<
name|Long
argument_list|>
name|dateLong
init|=
name|getLongList
argument_list|(
literal|"missing"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"long_ld"
argument_list|,
literal|"long"
argument_list|,
literal|"date"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|dateLongTestMissing
argument_list|,
name|dateLong
argument_list|)
expr_stmt|;
comment|//String Int
name|Collection
argument_list|<
name|Long
argument_list|>
name|stringInt
init|=
name|getLongList
argument_list|(
literal|"missing"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"int_id"
argument_list|,
literal|"long"
argument_list|,
literal|"str"
argument_list|)
decl_stmt|;
name|setLatestType
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|stringIntTestMissing
argument_list|,
name|stringInt
argument_list|)
expr_stmt|;
comment|//String Long
name|Collection
argument_list|<
name|Long
argument_list|>
name|stringLong
init|=
name|getLongList
argument_list|(
literal|"missing"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"long_ld"
argument_list|,
literal|"long"
argument_list|,
literal|"str"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|stringLongTestMissing
argument_list|,
name|stringLong
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|multiValueTest
specifier|public
name|void
name|multiValueTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Long
name|Collection
argument_list|<
name|Double
argument_list|>
name|lon
init|=
name|getDoubleList
argument_list|(
literal|"multivalued"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"long_ldm"
argument_list|,
literal|"double"
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|longTest
init|=
name|calculateNumberStat
argument_list|(
name|multiLongTestStart
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|lon
argument_list|,
name|longTest
argument_list|)
expr_stmt|;
comment|//Date
name|Collection
argument_list|<
name|Double
argument_list|>
name|date
init|=
name|getDoubleList
argument_list|(
literal|"multivalued"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtdm"
argument_list|,
literal|"double"
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|dateTest
init|=
name|calculateNumberStat
argument_list|(
name|multiDateTestStart
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|date
argument_list|,
name|dateTest
argument_list|)
expr_stmt|;
comment|//String
name|Collection
argument_list|<
name|Double
argument_list|>
name|string
init|=
name|getDoubleList
argument_list|(
literal|"multivalued"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sdm"
argument_list|,
literal|"double"
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|stringTest
init|=
name|calculateNumberStat
argument_list|(
name|multiStringTestStart
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|string
argument_list|,
name|stringTest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|missingFacetTest
specifier|public
name|void
name|missingFacetTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|//int MultiDate
name|String
name|xPath
init|=
literal|"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='date_dtdm']/lst[@name='(MISSING)']"
decl_stmt|;
name|assertNotNull
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|getNode
argument_list|(
name|xPath
argument_list|)
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|string
init|=
name|getDoubleList
argument_list|(
literal|"missingf"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtdm"
argument_list|,
literal|"double"
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|string
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|stringTest
init|=
name|calculateNumberStat
argument_list|(
name|multiDateTestStart
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|string
argument_list|,
name|stringTest
argument_list|)
expr_stmt|;
comment|//Int String
name|xPath
operator|=
literal|"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='string_sd']/lst[@name='(MISSING)']"
expr_stmt|;
name|assertNotNull
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|getNode
argument_list|(
name|xPath
argument_list|)
argument_list|)
expr_stmt|;
name|xPath
operator|=
literal|"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='string_sd']/lst[@name='str0']"
expr_stmt|;
name|assertNull
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|getNode
argument_list|(
name|xPath
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|intString
init|=
name|getDoubleList
argument_list|(
literal|"missingf"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"double"
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|intString
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|intStringTest
init|=
name|calculateNumberStat
argument_list|(
name|intStringTestStart
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intString
argument_list|,
name|intStringTest
argument_list|)
expr_stmt|;
comment|//Int Date
name|Collection
argument_list|<
name|Double
argument_list|>
name|intDate
init|=
name|getDoubleList
argument_list|(
literal|"missingf"
argument_list|,
literal|"fieldFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"double"
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Double
argument_list|>
argument_list|>
name|intDateMissingTestStart
init|=
operator|(
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Double
argument_list|>
argument_list|>
operator|)
name|intDateTestStart
operator|.
name|clone
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|intDateTest
init|=
name|calculateNumberStat
argument_list|(
name|intDateMissingTestStart
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intDate
argument_list|,
name|intDateTest
argument_list|)
expr_stmt|;
block|}
DECL|method|checkStddevs
specifier|private
name|void
name|checkStddevs
parameter_list|(
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|list1
parameter_list|,
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|list2
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|list1
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|list2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list1
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|Math
operator|.
name|abs
argument_list|(
name|list1
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|-
name|list2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|<
literal|.00000000001
operator|)
operator|==
literal|false
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|list1
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|list2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
literal|0.00000000001
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|assertEquals
specifier|public
specifier|static
name|void
name|assertEquals
parameter_list|(
name|String
name|mes
parameter_list|,
name|Object
name|actual
parameter_list|,
name|Object
name|expected
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
operator|(
name|List
argument_list|<
name|Comparable
argument_list|>
operator|)
name|actual
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
operator|(
name|List
argument_list|<
name|Comparable
argument_list|>
operator|)
name|expected
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mes
argument_list|,
name|actual
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
