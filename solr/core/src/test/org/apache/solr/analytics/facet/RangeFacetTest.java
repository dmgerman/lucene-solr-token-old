begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analytics.facet
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analytics
operator|.
name|facet
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|SuppressCodecs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
annotation|@
name|SuppressCodecs
argument_list|(
block|{
literal|"Lucene3x"
block|,
literal|"Lucene40"
block|,
literal|"Lucene41"
block|,
literal|"Lucene42"
block|,
literal|"Appending"
block|,
literal|"Asserting"
block|}
argument_list|)
DECL|class|RangeFacetTest
specifier|public
class|class
name|RangeFacetTest
extends|extends
name|AbstractAnalyticsFacetTest
block|{
DECL|field|fileName
specifier|static
name|String
name|fileName
init|=
literal|"/analytics/requestFiles/rangeFacets.txt"
decl_stmt|;
DECL|field|INT
specifier|public
specifier|static
specifier|final
name|int
name|INT
init|=
literal|71
decl_stmt|;
DECL|field|LONG
specifier|public
specifier|static
specifier|final
name|int
name|LONG
init|=
literal|36
decl_stmt|;
DECL|field|FLOAT
specifier|public
specifier|static
specifier|final
name|int
name|FLOAT
init|=
literal|93
decl_stmt|;
DECL|field|DOUBLE
specifier|public
specifier|static
specifier|final
name|int
name|DOUBLE
init|=
literal|48
decl_stmt|;
DECL|field|DATE
specifier|public
specifier|static
specifier|final
name|int
name|DATE
init|=
literal|52
decl_stmt|;
DECL|field|STRING
specifier|public
specifier|static
specifier|final
name|int
name|STRING
init|=
literal|28
decl_stmt|;
DECL|field|NUM_LOOPS
specifier|public
specifier|static
specifier|final
name|int
name|NUM_LOOPS
init|=
literal|100
decl_stmt|;
comment|//INT
DECL|field|intLongTestStart
specifier|static
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|intLongTestStart
decl_stmt|;
DECL|field|intDoubleTestStart
specifier|static
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|intDoubleTestStart
decl_stmt|;
DECL|field|intDateTestStart
specifier|static
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|intDateTestStart
decl_stmt|;
comment|//FLOAT
DECL|field|floatLongTestStart
specifier|static
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|>
name|floatLongTestStart
decl_stmt|;
DECL|field|floatDoubleTestStart
specifier|static
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|>
name|floatDoubleTestStart
decl_stmt|;
DECL|field|floatDateTestStart
specifier|static
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|>
name|floatDateTestStart
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-basic.xml"
argument_list|,
literal|"schema-analytics.xml"
argument_list|)
expr_stmt|;
name|h
operator|.
name|update
argument_list|(
literal|"<delete><query>*:*</query></delete>"
argument_list|)
expr_stmt|;
comment|//INT
name|intLongTestStart
operator|=
operator|new
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|intDoubleTestStart
operator|=
operator|new
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|intDateTestStart
operator|=
operator|new
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
comment|//FLOAT
name|floatLongTestStart
operator|=
operator|new
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|floatDoubleTestStart
operator|=
operator|new
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|floatDateTestStart
operator|=
operator|new
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NUM_LOOPS
condition|;
operator|++
name|j
control|)
block|{
name|int
name|i
init|=
name|j
operator|%
name|INT
decl_stmt|;
name|long
name|l
init|=
name|j
operator|%
name|LONG
decl_stmt|;
name|float
name|f
init|=
name|j
operator|%
name|FLOAT
decl_stmt|;
name|double
name|d
init|=
name|j
operator|%
name|DOUBLE
decl_stmt|;
name|int
name|dt
init|=
name|j
operator|%
name|DATE
decl_stmt|;
name|int
name|s
init|=
name|j
operator|%
name|STRING
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1000"
operator|+
name|j
argument_list|,
literal|"int_id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
literal|"long_ld"
argument_list|,
literal|""
operator|+
name|l
argument_list|,
literal|"float_fd"
argument_list|,
literal|""
operator|+
name|f
argument_list|,
literal|"double_dd"
argument_list|,
literal|""
operator|+
name|d
argument_list|,
literal|"date_dtd"
argument_list|,
operator|(
literal|1000
operator|+
name|dt
operator|)
operator|+
literal|"-01-01T23:59:59Z"
argument_list|,
literal|"string_sd"
argument_list|,
literal|"abc"
operator|+
name|s
argument_list|)
argument_list|)
expr_stmt|;
comment|//Longs
if|if
condition|(
name|j
operator|-
name|LONG
operator|<
literal|0
condition|)
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|list1
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|list1
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|intLongTestStart
operator|.
name|add
argument_list|(
name|list1
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Float
argument_list|>
name|list2
init|=
operator|new
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|()
decl_stmt|;
name|list2
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|floatLongTestStart
operator|.
name|add
argument_list|(
name|list2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|intLongTestStart
operator|.
name|get
argument_list|(
operator|(
name|int
operator|)
name|l
argument_list|)
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|floatLongTestStart
operator|.
name|get
argument_list|(
operator|(
name|int
operator|)
name|l
argument_list|)
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
comment|//Doubles
if|if
condition|(
name|j
operator|-
name|DOUBLE
operator|<
literal|0
condition|)
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|list1
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|list1
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|intDoubleTestStart
operator|.
name|add
argument_list|(
name|list1
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Float
argument_list|>
name|list2
init|=
operator|new
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|()
decl_stmt|;
name|list2
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|floatDoubleTestStart
operator|.
name|add
argument_list|(
name|list2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|intDoubleTestStart
operator|.
name|get
argument_list|(
operator|(
name|int
operator|)
name|d
argument_list|)
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|floatDoubleTestStart
operator|.
name|get
argument_list|(
operator|(
name|int
operator|)
name|d
argument_list|)
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
comment|//Dates
if|if
condition|(
name|j
operator|-
name|DATE
operator|<
literal|0
condition|)
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|list1
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|list1
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|intDateTestStart
operator|.
name|add
argument_list|(
name|list1
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Float
argument_list|>
name|list2
init|=
operator|new
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|()
decl_stmt|;
name|list2
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|floatDateTestStart
operator|.
name|add
argument_list|(
name|list2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|intDateTestStart
operator|.
name|get
argument_list|(
name|dt
argument_list|)
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|floatDateTestStart
operator|.
name|get
argument_list|(
name|dt
argument_list|)
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|usually
argument_list|()
condition|)
block|{
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// to have several segments
block|}
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|setResponse
argument_list|(
name|h
operator|.
name|query
argument_list|(
name|request
argument_list|(
name|fileToStringArr
argument_list|(
name|RangeFacetTest
operator|.
name|class
argument_list|,
name|fileName
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|rangeTest
specifier|public
name|void
name|rangeTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Int Long
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|intLong
init|=
name|getLongList
argument_list|(
literal|"ri"
argument_list|,
literal|"rangeFacets"
argument_list|,
literal|"long_ld"
argument_list|,
literal|"long"
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|intLongTest
init|=
name|calculateStat
argument_list|(
name|transformLists
argument_list|(
name|intLongTestStart
argument_list|,
literal|5
argument_list|,
literal|30
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intLong
argument_list|,
name|intLongTest
argument_list|)
expr_stmt|;
comment|//Int Double
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|intDouble
init|=
name|getDoubleList
argument_list|(
literal|"ri"
argument_list|,
literal|"rangeFacets"
argument_list|,
literal|"double_dd"
argument_list|,
literal|"double"
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|intDoubleTest
init|=
name|calculateNumberStat
argument_list|(
name|transformLists
argument_list|(
name|intDoubleTestStart
argument_list|,
literal|3
argument_list|,
literal|39
argument_list|,
literal|7
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intDouble
argument_list|,
name|intDoubleTest
argument_list|)
expr_stmt|;
comment|//Int Date
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|intDate
init|=
name|getLongList
argument_list|(
literal|"ri"
argument_list|,
literal|"rangeFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"long"
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|intDateTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|transformLists
argument_list|(
name|intDateTestStart
argument_list|,
literal|7
argument_list|,
literal|44
argument_list|,
literal|7
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intDate
argument_list|,
name|intDateTest
argument_list|)
expr_stmt|;
comment|//Float Long
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|floatLong
init|=
name|getDoubleList
argument_list|(
literal|"rf"
argument_list|,
literal|"rangeFacets"
argument_list|,
literal|"long_ld"
argument_list|,
literal|"double"
argument_list|,
literal|"median"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|floatLongTest
init|=
name|calculateNumberStat
argument_list|(
name|transformLists
argument_list|(
name|floatLongTestStart
argument_list|,
literal|0
argument_list|,
literal|29
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|"median"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatLong
argument_list|,
name|floatLongTest
argument_list|)
expr_stmt|;
comment|//Float Double
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|floatDouble
init|=
name|getLongList
argument_list|(
literal|"rf"
argument_list|,
literal|"rangeFacets"
argument_list|,
literal|"double_dd"
argument_list|,
literal|"long"
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|floatDoubleTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|transformLists
argument_list|(
name|floatDoubleTestStart
argument_list|,
literal|4
argument_list|,
literal|47
argument_list|,
literal|11
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatDouble
argument_list|,
name|floatDoubleTest
argument_list|)
expr_stmt|;
comment|//Float Date
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|floatDate
init|=
name|getDoubleList
argument_list|(
literal|"rf"
argument_list|,
literal|"rangeFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"double"
argument_list|,
literal|"sumOfSquares"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|floatDateTest
init|=
name|calculateNumberStat
argument_list|(
name|transformLists
argument_list|(
name|floatDateTestStart
argument_list|,
literal|4
argument_list|,
literal|46
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|"sumOfSquares"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatDate
argument_list|,
name|floatDateTest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|hardendRangeTest
specifier|public
name|void
name|hardendRangeTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Int Long
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|intLong
init|=
name|getDoubleList
argument_list|(
literal|"hi"
argument_list|,
literal|"rangeFacets"
argument_list|,
literal|"long_ld"
argument_list|,
literal|"double"
argument_list|,
literal|"sum"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|intLongTest
init|=
name|calculateNumberStat
argument_list|(
name|transformLists
argument_list|(
name|intLongTestStart
argument_list|,
literal|5
argument_list|,
literal|30
argument_list|,
literal|5
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|"sum"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intLong
argument_list|,
name|intLongTest
argument_list|)
expr_stmt|;
comment|//Int Double
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|intDouble
init|=
name|getDoubleList
argument_list|(
literal|"hi"
argument_list|,
literal|"rangeFacets"
argument_list|,
literal|"double_dd"
argument_list|,
literal|"double"
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|intDoubleTest
init|=
name|calculateNumberStat
argument_list|(
name|transformLists
argument_list|(
name|intDoubleTestStart
argument_list|,
literal|3
argument_list|,
literal|39
argument_list|,
literal|7
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intDouble
argument_list|,
name|intDoubleTest
argument_list|)
expr_stmt|;
comment|//Int Date
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|intDate
init|=
name|getLongList
argument_list|(
literal|"hi"
argument_list|,
literal|"rangeFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"long"
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|intDateTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|transformLists
argument_list|(
name|intDateTestStart
argument_list|,
literal|7
argument_list|,
literal|44
argument_list|,
literal|7
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intDate
argument_list|,
name|intDateTest
argument_list|)
expr_stmt|;
comment|//Float Long
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|floatLong
init|=
name|getDoubleList
argument_list|(
literal|"hf"
argument_list|,
literal|"rangeFacets"
argument_list|,
literal|"long_ld"
argument_list|,
literal|"double"
argument_list|,
literal|"median"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|floatLongTest
init|=
name|calculateNumberStat
argument_list|(
name|transformLists
argument_list|(
name|floatLongTestStart
argument_list|,
literal|0
argument_list|,
literal|29
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|"median"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatLong
argument_list|,
name|floatLongTest
argument_list|)
expr_stmt|;
comment|//Float Double
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|floatDouble
init|=
name|getLongList
argument_list|(
literal|"hf"
argument_list|,
literal|"rangeFacets"
argument_list|,
literal|"double_dd"
argument_list|,
literal|"long"
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|floatDoubleTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|transformLists
argument_list|(
name|floatDoubleTestStart
argument_list|,
literal|4
argument_list|,
literal|47
argument_list|,
literal|11
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatDouble
argument_list|,
name|floatDoubleTest
argument_list|)
expr_stmt|;
comment|//Float Date
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|floatDate
init|=
name|getDoubleList
argument_list|(
literal|"hf"
argument_list|,
literal|"rangeFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"double"
argument_list|,
literal|"sumOfSquares"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|floatDateTest
init|=
name|calculateNumberStat
argument_list|(
name|transformLists
argument_list|(
name|floatDateTestStart
argument_list|,
literal|4
argument_list|,
literal|46
argument_list|,
literal|5
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|"sumOfSquares"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatDate
argument_list|,
name|floatDateTest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|multiGapTest
specifier|public
name|void
name|multiGapTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Int Long
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|intLong
init|=
name|getDoubleList
argument_list|(
literal|"mi"
argument_list|,
literal|"rangeFacets"
argument_list|,
literal|"long_ld"
argument_list|,
literal|"double"
argument_list|,
literal|"sum"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|intLongTest
init|=
name|calculateNumberStat
argument_list|(
name|transformLists
argument_list|(
name|intLongTestStart
argument_list|,
literal|5
argument_list|,
literal|30
argument_list|,
literal|"4,2,6,3"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|"sum"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intLong
argument_list|,
name|intLongTest
argument_list|)
expr_stmt|;
comment|//Int Double
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|intDouble
init|=
name|getDoubleList
argument_list|(
literal|"mi"
argument_list|,
literal|"rangeFacets"
argument_list|,
literal|"double_dd"
argument_list|,
literal|"double"
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|intDoubleTest
init|=
name|calculateNumberStat
argument_list|(
name|transformLists
argument_list|(
name|intDoubleTestStart
argument_list|,
literal|3
argument_list|,
literal|39
argument_list|,
literal|"3,1,7"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|"mean"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intDouble
argument_list|,
name|intDoubleTest
argument_list|)
expr_stmt|;
comment|//Int Date
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|intDate
init|=
name|getLongList
argument_list|(
literal|"mi"
argument_list|,
literal|"rangeFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"long"
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|intDateTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|transformLists
argument_list|(
name|intDateTestStart
argument_list|,
literal|7
argument_list|,
literal|44
argument_list|,
literal|"2,7"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|intDate
argument_list|,
name|intDateTest
argument_list|)
expr_stmt|;
comment|//Float Long
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|floatLong
init|=
name|getDoubleList
argument_list|(
literal|"mf"
argument_list|,
literal|"rangeFacets"
argument_list|,
literal|"long_ld"
argument_list|,
literal|"double"
argument_list|,
literal|"median"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|floatLongTest
init|=
name|calculateNumberStat
argument_list|(
name|transformLists
argument_list|(
name|floatLongTestStart
argument_list|,
literal|0
argument_list|,
literal|29
argument_list|,
literal|"1,4"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|"median"
argument_list|)
decl_stmt|;
empty_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatLong
argument_list|,
name|floatLongTest
argument_list|)
expr_stmt|;
comment|//Float Double
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|floatDouble
init|=
name|getLongList
argument_list|(
literal|"mf"
argument_list|,
literal|"rangeFacets"
argument_list|,
literal|"double_dd"
argument_list|,
literal|"long"
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|floatDoubleTest
init|=
operator|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
operator|)
name|calculateStat
argument_list|(
name|transformLists
argument_list|(
name|floatDoubleTestStart
argument_list|,
literal|4
argument_list|,
literal|47
argument_list|,
literal|"2,3,11"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatDouble
argument_list|,
name|floatDoubleTest
argument_list|)
expr_stmt|;
comment|//Float Date
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|floatDate
init|=
name|getDoubleList
argument_list|(
literal|"mf"
argument_list|,
literal|"rangeFacets"
argument_list|,
literal|"date_dtd"
argument_list|,
literal|"double"
argument_list|,
literal|"sumOfSquares"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|floatDateTest
init|=
name|calculateNumberStat
argument_list|(
name|transformLists
argument_list|(
name|floatDateTestStart
argument_list|,
literal|4
argument_list|,
literal|46
argument_list|,
literal|"4,5"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|"sumOfSquares"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getRawResponse
argument_list|()
argument_list|,
name|floatDate
argument_list|,
name|floatDateTest
argument_list|)
expr_stmt|;
block|}
DECL|method|transformLists
specifier|private
parameter_list|<
name|T
parameter_list|>
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|>
name|transformLists
parameter_list|(
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|>
name|listsStart
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|int
name|gap
parameter_list|,
name|boolean
name|hardend
parameter_list|,
name|boolean
name|incLow
parameter_list|,
name|boolean
name|incUp
parameter_list|,
name|boolean
name|incEdge
parameter_list|,
name|boolean
name|incOut
parameter_list|)
block|{
name|int
name|off
init|=
operator|(
name|end
operator|-
name|start
operator|)
operator|%
name|gap
decl_stmt|;
if|if
condition|(
operator|!
name|hardend
operator|&&
name|off
operator|>
literal|0
condition|)
block|{
name|end
operator|+=
name|gap
operator|-
name|off
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|>
name|lists
init|=
operator|new
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|T
argument_list|>
name|between
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|incLow
operator|&&
name|incUp
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
operator|&&
name|i
operator|<
name|listsStart
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
name|gap
control|)
block|{
name|ArrayList
argument_list|<
name|T
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|<=
name|i
operator|+
name|gap
operator|&&
name|j
operator|<=
name|end
operator|&&
name|j
operator|<
name|listsStart
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|list
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lists
operator|.
name|add
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|listsStart
operator|.
name|size
argument_list|()
operator|&&
name|i
operator|<=
name|end
condition|;
name|i
operator|++
control|)
block|{
name|between
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|incLow
operator|&&
operator|!
name|incUp
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
operator|&&
name|i
operator|<
name|listsStart
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
name|gap
control|)
block|{
name|ArrayList
argument_list|<
name|T
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|<
name|i
operator|+
name|gap
operator|&&
name|j
operator|<
name|end
operator|&&
name|j
operator|<
name|listsStart
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|list
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lists
operator|.
name|add
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|listsStart
operator|.
name|size
argument_list|()
operator|&&
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|between
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|incLow
operator|&&
name|incUp
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
operator|&&
name|i
operator|<
name|listsStart
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
name|gap
control|)
block|{
name|ArrayList
argument_list|<
name|T
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<=
name|i
operator|+
name|gap
operator|&&
name|j
operator|<=
name|end
operator|&&
name|j
operator|<
name|listsStart
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|list
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lists
operator|.
name|add
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|start
operator|+
literal|1
init|;
name|i
operator|<
name|listsStart
operator|.
name|size
argument_list|()
operator|&&
name|i
operator|<=
name|end
condition|;
name|i
operator|++
control|)
block|{
name|between
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
operator|&&
name|i
operator|<
name|listsStart
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
name|gap
control|)
block|{
name|ArrayList
argument_list|<
name|T
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|i
operator|+
name|gap
operator|&&
name|j
operator|<
name|end
operator|&&
name|j
operator|<
name|listsStart
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|list
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lists
operator|.
name|add
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|start
operator|+
literal|1
init|;
name|i
operator|<
name|listsStart
operator|.
name|size
argument_list|()
operator|&&
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|between
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|incEdge
operator|&&
operator|!
name|incLow
operator|&&
name|start
operator|>=
literal|0
condition|)
block|{
name|lists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
name|between
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incEdge
operator|&&
operator|!
name|incUp
operator|&&
name|end
operator|<
name|listsStart
operator|.
name|size
argument_list|()
condition|)
block|{
name|lists
operator|.
name|get
argument_list|(
name|lists
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|end
argument_list|)
argument_list|)
expr_stmt|;
name|between
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|end
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|T
argument_list|>
name|before
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|T
argument_list|>
name|after
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|incOut
operator|||
operator|!
operator|(
name|incLow
operator|||
name|incEdge
operator|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|start
condition|;
name|i
operator|++
control|)
block|{
name|before
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|start
condition|;
name|i
operator|++
control|)
block|{
name|before
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|incOut
operator|||
operator|!
operator|(
name|incUp
operator|||
name|incEdge
operator|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|end
init|;
name|i
operator|<
name|listsStart
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|after
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
name|end
operator|+
literal|1
init|;
name|i
operator|<
name|listsStart
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|after
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|before
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|lists
operator|.
name|add
argument_list|(
name|before
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|after
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|lists
operator|.
name|add
argument_list|(
name|after
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|between
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|lists
operator|.
name|add
argument_list|(
name|between
argument_list|)
expr_stmt|;
block|}
return|return
name|lists
return|;
block|}
DECL|method|transformLists
specifier|private
parameter_list|<
name|T
parameter_list|>
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|>
name|transformLists
parameter_list|(
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|>
name|listsStart
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|String
name|gapString
parameter_list|,
name|boolean
name|hardend
parameter_list|,
name|boolean
name|incLow
parameter_list|,
name|boolean
name|incUp
parameter_list|,
name|boolean
name|incEdge
parameter_list|,
name|boolean
name|incOut
parameter_list|)
block|{
name|String
index|[]
name|stringGaps
init|=
name|gapString
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|int
index|[]
name|gaps
init|=
operator|new
name|int
index|[
name|stringGaps
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|gaps
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|gaps
index|[
name|i
index|]
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|stringGaps
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|int
name|bigGap
init|=
literal|0
decl_stmt|;
name|int
name|last
init|=
name|gaps
index|[
name|gaps
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|gaps
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|bigGap
operator|+=
name|gaps
index|[
name|i
index|]
expr_stmt|;
block|}
name|int
name|off
init|=
operator|(
name|end
operator|-
name|start
operator|-
name|bigGap
operator|)
operator|%
name|last
decl_stmt|;
if|if
condition|(
operator|!
name|hardend
operator|&&
name|off
operator|>
literal|0
condition|)
block|{
name|end
operator|+=
name|last
operator|-
name|off
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|>
name|lists
init|=
operator|new
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|T
argument_list|>
name|between
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|gap
init|=
literal|0
decl_stmt|;
name|int
name|gapCounter
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|incLow
operator|&&
name|incUp
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
operator|&&
name|i
operator|<
name|listsStart
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
name|gap
control|)
block|{
if|if
condition|(
name|gapCounter
operator|<
name|gaps
operator|.
name|length
condition|)
block|{
name|gap
operator|=
name|gaps
index|[
name|gapCounter
operator|++
index|]
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|T
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|<=
name|i
operator|+
name|gap
operator|&&
name|j
operator|<=
name|end
operator|&&
name|j
operator|<
name|listsStart
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|list
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lists
operator|.
name|add
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|listsStart
operator|.
name|size
argument_list|()
operator|&&
name|i
operator|<=
name|end
condition|;
name|i
operator|++
control|)
block|{
name|between
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|incLow
operator|&&
operator|!
name|incUp
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
operator|&&
name|i
operator|<
name|listsStart
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
name|gap
control|)
block|{
if|if
condition|(
name|gapCounter
operator|<
name|gaps
operator|.
name|length
condition|)
block|{
name|gap
operator|=
name|gaps
index|[
name|gapCounter
operator|++
index|]
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|T
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|<
name|i
operator|+
name|gap
operator|&&
name|j
operator|<
name|end
operator|&&
name|j
operator|<
name|listsStart
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|list
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lists
operator|.
name|add
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|listsStart
operator|.
name|size
argument_list|()
operator|&&
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|between
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|incLow
operator|&&
name|incUp
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
operator|&&
name|i
operator|<
name|listsStart
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
name|gap
control|)
block|{
if|if
condition|(
name|gapCounter
operator|<
name|gaps
operator|.
name|length
condition|)
block|{
name|gap
operator|=
name|gaps
index|[
name|gapCounter
operator|++
index|]
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|T
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<=
name|i
operator|+
name|gap
operator|&&
name|j
operator|<=
name|end
operator|&&
name|j
operator|<
name|listsStart
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|list
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lists
operator|.
name|add
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|start
operator|+
literal|1
init|;
name|i
operator|<
name|listsStart
operator|.
name|size
argument_list|()
operator|&&
name|i
operator|<=
name|end
condition|;
name|i
operator|++
control|)
block|{
name|between
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
operator|&&
name|i
operator|<
name|listsStart
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
name|gap
control|)
block|{
if|if
condition|(
name|gapCounter
operator|<
name|gaps
operator|.
name|length
condition|)
block|{
name|gap
operator|=
name|gaps
index|[
name|gapCounter
operator|++
index|]
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|T
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|i
operator|+
name|gap
operator|&&
name|j
operator|<
name|end
operator|&&
name|j
operator|<
name|listsStart
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|list
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lists
operator|.
name|add
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|start
operator|+
literal|1
init|;
name|i
operator|<
name|listsStart
operator|.
name|size
argument_list|()
operator|&&
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|between
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|incEdge
operator|&&
operator|!
name|incLow
operator|&&
name|start
operator|>=
literal|0
condition|)
block|{
name|lists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
name|between
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incEdge
operator|&&
operator|!
name|incUp
operator|&&
name|end
operator|<
name|listsStart
operator|.
name|size
argument_list|()
condition|)
block|{
name|lists
operator|.
name|get
argument_list|(
name|lists
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|end
argument_list|)
argument_list|)
expr_stmt|;
name|between
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|end
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|T
argument_list|>
name|before
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|T
argument_list|>
name|after
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|incOut
operator|||
operator|!
operator|(
name|incLow
operator|||
name|incEdge
operator|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|start
condition|;
name|i
operator|++
control|)
block|{
name|before
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|start
condition|;
name|i
operator|++
control|)
block|{
name|before
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|incOut
operator|||
operator|!
operator|(
name|incUp
operator|||
name|incEdge
operator|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|end
init|;
name|i
operator|<
name|listsStart
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|after
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
name|end
operator|+
literal|1
init|;
name|i
operator|<
name|listsStart
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|after
operator|.
name|addAll
argument_list|(
name|listsStart
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|before
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|lists
operator|.
name|add
argument_list|(
name|before
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|after
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|lists
operator|.
name|add
argument_list|(
name|after
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|between
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|lists
operator|.
name|add
argument_list|(
name|between
argument_list|)
expr_stmt|;
block|}
return|return
name|lists
return|;
block|}
block|}
end_class
end_unit
