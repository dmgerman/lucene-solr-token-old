begin_unit
begin_package
DECL|package|org.apache.solr.security
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|CommandOperation
import|;
end_import
begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import
begin_class
DECL|class|TestSha256AuthenticationProvider
specifier|public
class|class
name|TestSha256AuthenticationProvider
extends|extends
name|SolrTestCaseJ4
block|{
DECL|method|testAuthenticate
specifier|public
name|void
name|testAuthenticate
parameter_list|()
block|{
name|Sha256AuthenticationProvider
name|zkAuthenticationProvider
init|=
operator|new
name|Sha256AuthenticationProvider
argument_list|()
decl_stmt|;
name|zkAuthenticationProvider
operator|.
name|init
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|pwd
init|=
literal|"My#$Password"
decl_stmt|;
name|String
name|user
init|=
literal|"noble"
decl_stmt|;
name|Map
name|latestConf
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
name|singletonMap
argument_list|(
name|user
argument_list|,
name|pwd
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
name|zkAuthenticationProvider
operator|.
name|edit
argument_list|(
name|latestConf
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|CommandOperation
argument_list|(
literal|"set-user"
argument_list|,
name|params
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|zkAuthenticationProvider
operator|=
operator|new
name|Sha256AuthenticationProvider
argument_list|()
expr_stmt|;
name|zkAuthenticationProvider
operator|.
name|init
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zkAuthenticationProvider
operator|.
name|authenticate
argument_list|(
name|user
argument_list|,
name|pwd
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|zkAuthenticationProvider
operator|.
name|authenticate
argument_list|(
name|user
argument_list|,
literal|"WrongPassword"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|zkAuthenticationProvider
operator|.
name|authenticate
argument_list|(
literal|"unknownuser"
argument_list|,
literal|"WrongPassword"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBasicAuthCommands
specifier|public
name|void
name|testBasicAuthCommands
parameter_list|()
block|{
name|BasicAuthPlugin
name|basicAuthPlugin
init|=
operator|new
name|BasicAuthPlugin
argument_list|()
decl_stmt|;
name|basicAuthPlugin
operator|.
name|init
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|Map
name|latestConf
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|CommandOperation
name|blockUnknown
init|=
operator|new
name|CommandOperation
argument_list|(
literal|"set-property"
argument_list|,
name|singletonMap
argument_list|(
literal|"blockUnknown"
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|basicAuthPlugin
operator|.
name|edit
argument_list|(
name|latestConf
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|blockUnknown
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|latestConf
operator|.
name|get
argument_list|(
literal|"blockUnknown"
argument_list|)
argument_list|)
expr_stmt|;
name|basicAuthPlugin
operator|.
name|init
argument_list|(
name|latestConf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|basicAuthPlugin
operator|.
name|getBlockUnknown
argument_list|()
argument_list|)
expr_stmt|;
name|blockUnknown
operator|=
operator|new
name|CommandOperation
argument_list|(
literal|"set-property"
argument_list|,
name|singletonMap
argument_list|(
literal|"blockUnknown"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|basicAuthPlugin
operator|.
name|edit
argument_list|(
name|latestConf
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|blockUnknown
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|latestConf
operator|.
name|get
argument_list|(
literal|"blockUnknown"
argument_list|)
argument_list|)
expr_stmt|;
name|basicAuthPlugin
operator|.
name|init
argument_list|(
name|latestConf
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|basicAuthPlugin
operator|.
name|getBlockUnknown
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
