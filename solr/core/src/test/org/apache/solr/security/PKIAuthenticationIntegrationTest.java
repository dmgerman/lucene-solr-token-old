begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.security
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
package|;
end_package
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractFullDistribZkTestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
operator|.
name|makeMap
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
operator|.
name|TestAuthorizationFramework
operator|.
name|verifySecurityStatus
import|;
end_import
begin_class
annotation|@
name|SolrTestCaseJ4
operator|.
name|SuppressSSL
DECL|class|PKIAuthenticationIntegrationTest
specifier|public
class|class
name|PKIAuthenticationIntegrationTest
extends|extends
name|AbstractFullDistribZkTestBase
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|TIMEOUT
specifier|static
specifier|final
name|int
name|TIMEOUT
init|=
literal|10000
decl_stmt|;
annotation|@
name|Test
DECL|method|testPkiAuth
specifier|public
name|void
name|testPkiAuth
parameter_list|()
throws|throws
name|Exception
block|{
name|waitForThingsToLevelOut
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|Utils
operator|.
name|toJSON
argument_list|(
name|makeMap
argument_list|(
literal|"authorization"
argument_list|,
name|singletonMap
argument_list|(
literal|"class"
argument_list|,
name|MockAuthorizationPlugin
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|"authentication"
argument_list|,
name|singletonMap
argument_list|(
literal|"class"
argument_list|,
name|MockAuthenticationPlugin
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|ZkStateReader
name|zkStateReader
init|=
operator|new
name|ZkStateReader
argument_list|(
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|TIMEOUT
argument_list|,
name|TIMEOUT
argument_list|)
init|)
block|{
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|setData
argument_list|(
name|ZkStateReader
operator|.
name|SOLR_SECURITY_CONF_PATH
argument_list|,
name|bytes
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|jettys
control|)
block|{
name|String
name|baseUrl
init|=
name|jetty
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|verifySecurityStatus
argument_list|(
name|cloudClient
operator|.
name|getLbClient
argument_list|()
operator|.
name|getHttpClient
argument_list|()
argument_list|,
name|baseUrl
operator|+
literal|"/admin/authorization"
argument_list|,
literal|"authorization/class"
argument_list|,
name|MockAuthorizationPlugin
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|verifySecurityStatus
argument_list|(
name|cloudClient
operator|.
name|getLbClient
argument_list|()
operator|.
name|getHttpClient
argument_list|()
argument_list|,
name|baseUrl
operator|+
literal|"/admin/authentication"
argument_list|,
literal|"authentication.enabled"
argument_list|,
literal|"true"
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Starting test"
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"__user"
argument_list|,
literal|"solr"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"__pwd"
argument_list|,
literal|"SolrRocks"
argument_list|)
expr_stmt|;
comment|// This should work fine.
specifier|final
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|MockAuthorizationPlugin
operator|.
name|predicate
operator|=
operator|new
name|Predicate
argument_list|<
name|AuthorizationContext
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|test
parameter_list|(
name|AuthorizationContext
name|context
parameter_list|)
block|{
if|if
condition|(
literal|"/select"
operator|.
name|equals
argument_list|(
name|context
operator|.
name|getResource
argument_list|()
argument_list|)
condition|)
block|{
name|Principal
name|principal
init|=
name|context
operator|.
name|getUserPrincipal
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"principalIs : {}"
argument_list|,
name|principal
argument_list|)
expr_stmt|;
if|if
condition|(
name|principal
operator|!=
literal|null
operator|&&
name|principal
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"solr"
argument_list|)
condition|)
block|{
name|count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
expr_stmt|;
name|MockAuthenticationPlugin
operator|.
name|predicate
operator|=
operator|new
name|Predicate
argument_list|<
name|ServletRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|test
parameter_list|(
name|ServletRequest
name|servletRequest
parameter_list|)
block|{
name|String
name|s
init|=
operator|(
operator|(
name|HttpServletRequest
operator|)
name|servletRequest
operator|)
operator|.
name|getQueryString
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
operator|&&
name|s
operator|.
name|contains
argument_list|(
literal|"__user=solr"
argument_list|)
operator|&&
name|s
operator|.
name|contains
argument_list|(
literal|"__pwd=SolrRocks"
argument_list|)
condition|)
block|{
name|servletRequest
operator|.
name|setAttribute
argument_list|(
name|Principal
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"solr"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
expr_stmt|;
name|QueryRequest
name|query
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|query
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"all nodes must get the user solr , no:of nodes got solr : "
operator|+
name|count
operator|.
name|get
argument_list|()
argument_list|,
name|count
operator|.
name|get
argument_list|()
operator|>
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|distribTearDown
specifier|public
name|void
name|distribTearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|distribTearDown
argument_list|()
expr_stmt|;
name|MockAuthenticationPlugin
operator|.
name|predicate
operator|=
literal|null
expr_stmt|;
name|MockAuthorizationPlugin
operator|.
name|predicate
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class
end_unit
