begin_unit
begin_package
DECL|package|org.apache.solr.common.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkClientConnectionStrategy
operator|.
name|ZkUpdate
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  *   * All Solr ZooKeeper interactions should go through this class rather than  * ZooKeeper. This class handles synchronous connects and reconnections.  *  */
end_comment
begin_class
DECL|class|SolrZkClient
specifier|public
class|class
name|SolrZkClient
block|{
DECL|field|NEWL
specifier|static
specifier|final
name|String
name|NEWL
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_CLIENT_CONNECT_TIMEOUT
specifier|static
specifier|final
name|int
name|DEFAULT_CLIENT_CONNECT_TIMEOUT
init|=
literal|30000
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SolrZkClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|connManager
specifier|private
name|ConnectionManager
name|connManager
decl_stmt|;
DECL|field|keeper
specifier|private
specifier|volatile
name|SolrZooKeeper
name|keeper
decl_stmt|;
comment|/**    * @param zkServerAddress    * @param zkClientTimeout    * @throws InterruptedException    * @throws TimeoutException    * @throws IOException    */
DECL|method|SolrZkClient
specifier|public
name|SolrZkClient
parameter_list|(
name|String
name|zkServerAddress
parameter_list|,
name|int
name|zkClientTimeout
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
throws|,
name|IOException
block|{
name|this
argument_list|(
name|zkServerAddress
argument_list|,
name|zkClientTimeout
argument_list|,
operator|new
name|DefaultConnectionStrategy
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|SolrZkClient
specifier|public
name|SolrZkClient
parameter_list|(
name|String
name|zkServerAddress
parameter_list|,
name|int
name|zkClientTimeout
parameter_list|,
name|int
name|zkClientConnectTimeout
parameter_list|,
name|OnReconnect
name|onReonnect
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
throws|,
name|IOException
block|{
name|this
argument_list|(
name|zkServerAddress
argument_list|,
name|zkClientTimeout
argument_list|,
operator|new
name|DefaultConnectionStrategy
argument_list|()
argument_list|,
name|onReonnect
argument_list|,
name|zkClientConnectTimeout
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param zkServerAddress    * @param zkClientTimeout    * @param strat    * @param onReconnect    * @param clientConnectTimeout    * @throws InterruptedException    * @throws TimeoutException    * @throws IOException    */
DECL|method|SolrZkClient
specifier|public
name|SolrZkClient
parameter_list|(
name|String
name|zkServerAddress
parameter_list|,
name|int
name|zkClientTimeout
parameter_list|,
name|ZkClientConnectionStrategy
name|strat
parameter_list|,
specifier|final
name|OnReconnect
name|onReconnect
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
throws|,
name|IOException
block|{
name|this
argument_list|(
name|zkServerAddress
argument_list|,
name|zkClientTimeout
argument_list|,
name|strat
argument_list|,
name|onReconnect
argument_list|,
name|DEFAULT_CLIENT_CONNECT_TIMEOUT
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param zkServerAddress    * @param zkClientTimeout    * @param strat    * @param onReconnect    * @param clientConnectTimeout    * @throws InterruptedException    * @throws TimeoutException    * @throws IOException    */
DECL|method|SolrZkClient
specifier|public
name|SolrZkClient
parameter_list|(
name|String
name|zkServerAddress
parameter_list|,
name|int
name|zkClientTimeout
parameter_list|,
name|ZkClientConnectionStrategy
name|strat
parameter_list|,
specifier|final
name|OnReconnect
name|onReconnect
parameter_list|,
name|int
name|clientConnectTimeout
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
throws|,
name|IOException
block|{
name|connManager
operator|=
operator|new
name|ConnectionManager
argument_list|(
literal|"ZooKeeperConnection Watcher:"
operator|+
name|zkServerAddress
argument_list|,
name|this
argument_list|,
name|zkServerAddress
argument_list|,
name|zkClientTimeout
argument_list|,
name|strat
argument_list|,
name|onReconnect
argument_list|)
expr_stmt|;
name|strat
operator|.
name|connect
argument_list|(
name|zkServerAddress
argument_list|,
name|zkClientTimeout
argument_list|,
name|connManager
argument_list|,
operator|new
name|ZkUpdate
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|SolrZooKeeper
name|zooKeeper
parameter_list|)
block|{
name|SolrZooKeeper
name|oldKeeper
init|=
name|keeper
decl_stmt|;
name|keeper
operator|=
name|zooKeeper
expr_stmt|;
if|if
condition|(
name|oldKeeper
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|oldKeeper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|connManager
operator|.
name|waitForConnected
argument_list|(
name|clientConnectTimeout
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return true if client is connected    */
DECL|method|isConnected
specifier|public
name|boolean
name|isConnected
parameter_list|()
block|{
return|return
name|keeper
operator|!=
literal|null
operator|&&
name|keeper
operator|.
name|getState
argument_list|()
operator|==
name|ZooKeeper
operator|.
name|States
operator|.
name|CONNECTED
return|;
block|}
comment|/**    * @param path    * @param version    * @throws InterruptedException    * @throws KeeperException    */
DECL|method|delete
specifier|public
name|void
name|delete
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
name|int
name|version
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
name|keeper
operator|.
name|delete
argument_list|(
name|path
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return the stat of the node of the given path. Return null if no such a    * node exists.    *<p>    * If the watch is non-null and the call is successful (no exception is thrown),    * a watch will be left on the node with the given path. The watch will be    * triggered by a successful operation that creates/delete the node or sets    * the data on the node.    *    * @param path the node path    * @param watcher explicit watcher    * @return the stat of the node of the given path; return null if no such a    *         node exists.    * @throws KeeperException If the server signals an error    * @throws InterruptedException If the server transaction is interrupted.    * @throws IllegalArgumentException if an invalid path is specified    */
DECL|method|exists
specifier|public
name|Stat
name|exists
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
name|Watcher
name|watcher
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
name|keeper
operator|.
name|exists
argument_list|(
name|path
argument_list|,
name|watcher
argument_list|)
return|;
block|}
comment|/**    * @param path    * @return    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|exists
specifier|public
name|boolean
name|exists
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
name|keeper
operator|.
name|exists
argument_list|(
name|path
argument_list|,
literal|null
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**    * @param path    * @param data    * @param acl    * @param createMode    * @return    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|create
specifier|public
name|String
name|create
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
name|byte
name|data
index|[]
parameter_list|,
name|List
argument_list|<
name|ACL
argument_list|>
name|acl
parameter_list|,
name|CreateMode
name|createMode
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
name|keeper
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|acl
argument_list|,
name|createMode
argument_list|)
return|;
block|}
comment|/**    * @param path    * @param watcher    * @return    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|getChildren
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getChildren
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
name|Watcher
name|watcher
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
name|keeper
operator|.
name|getChildren
argument_list|(
name|path
argument_list|,
name|watcher
argument_list|)
return|;
block|}
comment|/**    * @param path    * @param watcher    * @param stat    * @return    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|getData
specifier|public
name|byte
index|[]
name|getData
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
name|Watcher
name|watcher
parameter_list|,
name|Stat
name|stat
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
name|keeper
operator|.
name|getData
argument_list|(
name|path
argument_list|,
name|watcher
argument_list|,
name|stat
argument_list|)
return|;
block|}
comment|/**    * @param path    * @param data    * @param version    * @return    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|setData
specifier|public
name|Stat
name|setData
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
name|byte
name|data
index|[]
parameter_list|,
name|int
name|version
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
name|keeper
operator|.
name|setData
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|version
argument_list|)
return|;
block|}
comment|/**    *     * @param path    * @param data    * @param watcher    * @return    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|create
specifier|public
name|String
name|create
parameter_list|(
name|String
name|path
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|CreateMode
name|createMode
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|zkPath
init|=
name|keeper
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|ZooDefs
operator|.
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|createMode
argument_list|)
decl_stmt|;
return|return
name|zkPath
return|;
block|}
comment|/**    * Creates the path in ZooKeeper, creating each node as necessary.    *     * e.g. If<code>path=/solr/group/node</code> and none of the nodes, solr,    * group, node exist, each will be created.    *     * @param path    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|makePath
specifier|public
name|void
name|makePath
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|makePath
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
DECL|method|makePath
specifier|public
name|void
name|makePath
parameter_list|(
name|String
name|path
parameter_list|,
name|CreateMode
name|createMode
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|makePath
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
name|createMode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates the path in ZooKeeper, creating each node as necessary.    *     * @param path    * @param data to set on the last zkNode    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|makePath
specifier|public
name|void
name|makePath
parameter_list|(
name|String
name|path
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|makePath
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates the path in ZooKeeper, creating each node as necessary.    *     * e.g. If<code>path=/solr/group/node</code> and none of the nodes, solr,    * group, node exist, each will be created.    *     * @param path    * @param data to set on the last zkNode    * @param createMode    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|makePath
specifier|public
name|void
name|makePath
parameter_list|(
name|String
name|path
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|CreateMode
name|createMode
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|makePath
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|createMode
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates the path in ZooKeeper, creating each node as necessary.    *     * e.g. If<code>path=/solr/group/node</code> and none of the nodes, solr,    * group, node exist, each will be created.    *     * @param path    * @param data to set on the last zkNode    * @param createMode    * @param watcher    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|makePath
specifier|public
name|void
name|makePath
parameter_list|(
name|String
name|path
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|CreateMode
name|createMode
parameter_list|,
name|Watcher
name|watcher
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|makePath
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|createMode
argument_list|,
name|watcher
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates the path in ZooKeeper, creating each node as necessary.    *     * e.g. If<code>path=/solr/group/node</code> and none of the nodes, solr,    * group, node exist, each will be created.    *     * @param path    * @param data to set on the last zkNode    * @param createMode    * @param watcher    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|makePath
specifier|public
name|void
name|makePath
parameter_list|(
name|String
name|path
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|CreateMode
name|createMode
parameter_list|,
name|Watcher
name|watcher
parameter_list|,
name|boolean
name|failOnExists
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"makePath: "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|path
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|paths
init|=
name|path
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|StringBuilder
name|sbPath
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|bytes
init|=
literal|null
decl_stmt|;
name|String
name|pathPiece
init|=
name|paths
index|[
name|i
index|]
decl_stmt|;
name|sbPath
operator|.
name|append
argument_list|(
literal|"/"
operator|+
name|pathPiece
argument_list|)
expr_stmt|;
name|String
name|currentPath
init|=
name|sbPath
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Object
name|exists
init|=
name|exists
argument_list|(
name|currentPath
argument_list|,
name|watcher
argument_list|)
decl_stmt|;
if|if
condition|(
name|exists
operator|==
literal|null
operator|||
operator|(
operator|(
name|i
operator|==
name|paths
operator|.
name|length
operator|-
literal|1
operator|)
operator|&&
name|failOnExists
operator|)
condition|)
block|{
name|CreateMode
name|mode
init|=
name|CreateMode
operator|.
name|PERSISTENT
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|paths
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|mode
operator|=
name|createMode
expr_stmt|;
name|bytes
operator|=
name|data
expr_stmt|;
block|}
name|keeper
operator|.
name|create
argument_list|(
name|currentPath
argument_list|,
name|bytes
argument_list|,
name|ZooDefs
operator|.
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|mode
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|paths
operator|.
name|length
operator|-
literal|1
condition|)
block|{
comment|// set new watch
name|exists
argument_list|(
name|currentPath
argument_list|,
name|watcher
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|i
operator|==
name|paths
operator|.
name|length
operator|-
literal|1
condition|)
block|{
comment|// TODO: version ? for now, don't worry about race
name|setData
argument_list|(
name|currentPath
argument_list|,
name|data
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// set new watch
name|exists
argument_list|(
name|currentPath
argument_list|,
name|watcher
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @param zkPath    * @param createMode    * @param watcher    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|makePath
specifier|public
name|void
name|makePath
parameter_list|(
name|String
name|zkPath
parameter_list|,
name|CreateMode
name|createMode
parameter_list|,
name|Watcher
name|watcher
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|makePath
argument_list|(
name|zkPath
argument_list|,
literal|null
argument_list|,
name|createMode
argument_list|,
name|watcher
argument_list|)
expr_stmt|;
block|}
comment|/**    * Write data to ZooKeeper.    *     * @param path    * @param data    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|setData
specifier|public
name|void
name|setData
parameter_list|(
name|String
name|path
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|makePath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Object
name|exists
init|=
name|exists
argument_list|(
name|path
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|exists
operator|!=
literal|null
condition|)
block|{
name|setData
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|create
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|ZooDefs
operator|.
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Write file to ZooKeeper - default system encoding used.    *     * @param path path to upload file to e.g. /solr/conf/solrconfig.xml    * @param file path to file to be uploaded    * @throws IOException    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|setData
specifier|public
name|void
name|setData
parameter_list|(
name|String
name|path
parameter_list|,
name|File
name|file
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Write to ZooKeepeer "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" to "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
name|String
name|data
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|setData
argument_list|(
name|path
argument_list|,
name|data
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Fills string with printout of current ZooKeeper layout.    *     * @param path    * @param indent    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|printLayout
specifier|public
name|void
name|printLayout
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|indent
parameter_list|,
name|StringBuilder
name|string
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|byte
index|[]
name|data
init|=
name|getData
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|getChildren
argument_list|(
name|path
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StringBuilder
name|dent
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indent
condition|;
name|i
operator|++
control|)
block|{
name|dent
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|string
operator|.
name|append
argument_list|(
name|dent
operator|+
name|path
operator|+
literal|" ("
operator|+
name|children
operator|.
name|size
argument_list|()
operator|+
literal|")"
operator|+
name|NEWL
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|String
name|dataString
init|=
operator|new
name|String
argument_list|(
name|data
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|endsWith
argument_list|(
literal|".txt"
argument_list|)
operator|&&
operator|!
name|path
operator|.
name|endsWith
argument_list|(
literal|".xml"
argument_list|)
condition|)
block|{
name|string
operator|.
name|append
argument_list|(
name|dent
operator|+
literal|"DATA:\n"
operator|+
name|dent
operator|+
literal|"    "
operator|+
name|dataString
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
literal|"\n"
operator|+
name|dent
operator|+
literal|"    "
argument_list|)
operator|+
name|NEWL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|string
operator|.
name|append
argument_list|(
name|dent
operator|+
literal|"DATA: ...supressed..."
operator|+
name|NEWL
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
comment|// can't happen - UTF-8
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
operator|!
name|child
operator|.
name|equals
argument_list|(
literal|"quota"
argument_list|)
condition|)
block|{
name|printLayout
argument_list|(
name|path
operator|+
operator|(
name|path
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|?
literal|""
else|:
literal|"/"
operator|)
operator|+
name|child
argument_list|,
name|indent
operator|+
literal|1
argument_list|,
name|string
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Prints current ZooKeeper layout to stdout.    *     * @throws KeeperException    * @throws InterruptedException    */
DECL|method|printLayoutToStdOut
specifier|public
name|void
name|printLayoutToStdOut
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|printLayout
argument_list|(
literal|"/"
argument_list|,
literal|0
argument_list|,
name|sb
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * @throws InterruptedException    */
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|keeper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Allows package private classes to update volatile ZooKeeper.    *     * @param keeper    * @throws InterruptedException     */
DECL|method|updateKeeper
name|void
name|updateKeeper
parameter_list|(
name|SolrZooKeeper
name|keeper
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|SolrZooKeeper
name|oldKeeper
init|=
name|this
operator|.
name|keeper
decl_stmt|;
name|this
operator|.
name|keeper
operator|=
name|keeper
expr_stmt|;
if|if
condition|(
name|oldKeeper
operator|!=
literal|null
condition|)
block|{
name|oldKeeper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getSolrZooKeeper
specifier|public
name|SolrZooKeeper
name|getSolrZooKeeper
parameter_list|()
block|{
return|return
name|keeper
return|;
block|}
block|}
end_class
end_unit
