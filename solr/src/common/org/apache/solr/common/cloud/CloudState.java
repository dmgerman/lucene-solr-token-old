begin_unit
begin_package
DECL|package|org.apache.solr.common.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|// immutable
end_comment
begin_class
DECL|class|CloudState
specifier|public
class|class
name|CloudState
block|{
DECL|field|log
specifier|protected
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CloudState
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|collectionStates
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
name|collectionStates
decl_stmt|;
DECL|field|liveNodes
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|liveNodes
decl_stmt|;
DECL|method|CloudState
specifier|public
name|CloudState
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|liveNodes
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
name|collectionStates
parameter_list|)
block|{
name|this
operator|.
name|liveNodes
operator|=
name|liveNodes
expr_stmt|;
name|this
operator|.
name|collectionStates
operator|=
name|collectionStates
expr_stmt|;
block|}
DECL|method|getSlices
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|getSlices
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|collectionState
init|=
name|collectionStates
operator|.
name|get
argument_list|(
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
name|collectionState
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|collectionState
argument_list|)
return|;
block|}
DECL|method|getCollections
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getCollections
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|collectionStates
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getCollectionStates
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
name|getCollectionStates
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|collectionStates
argument_list|)
return|;
block|}
DECL|method|getLiveNodes
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getLiveNodes
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|liveNodes
argument_list|)
return|;
block|}
DECL|method|liveNodesContain
specifier|public
name|boolean
name|liveNodesContain
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|liveNodes
operator|.
name|contains
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|buildCloudState
specifier|public
specifier|static
name|CloudState
name|buildCloudState
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|CloudState
name|oldCloudState
parameter_list|,
name|boolean
name|onlyLiveNodes
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
name|collectionStates
decl_stmt|;
if|if
condition|(
operator|!
name|onlyLiveNodes
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|collections
init|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|collectionStates
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|collection
range|:
name|collections
control|)
block|{
name|String
name|shardIdPaths
init|=
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|collection
operator|+
name|ZkStateReader
operator|.
name|SHARDS_ZKNODE
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|shardIdNames
decl_stmt|;
try|try
block|{
name|shardIdNames
operator|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|shardIdPaths
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
comment|// node is not valid currently
continue|continue;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|shardIdZkPath
range|:
name|shardIdNames
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ZkNodeProps
argument_list|>
name|shardsMap
init|=
name|readShards
argument_list|(
name|zkClient
argument_list|,
name|shardIdPaths
operator|+
literal|"/"
operator|+
name|shardIdZkPath
argument_list|)
decl_stmt|;
name|Slice
name|slice
init|=
operator|new
name|Slice
argument_list|(
name|shardIdZkPath
argument_list|,
name|shardsMap
argument_list|)
decl_stmt|;
name|slices
operator|.
name|put
argument_list|(
name|shardIdZkPath
argument_list|,
name|slice
argument_list|)
expr_stmt|;
block|}
name|collectionStates
operator|.
name|put
argument_list|(
name|collection
argument_list|,
name|slices
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|collectionStates
operator|=
name|oldCloudState
operator|.
name|getCollectionStates
argument_list|()
expr_stmt|;
block|}
name|CloudState
name|cloudInfo
init|=
operator|new
name|CloudState
argument_list|(
name|getLiveNodes
argument_list|(
name|zkClient
argument_list|)
argument_list|,
name|collectionStates
argument_list|)
decl_stmt|;
return|return
name|cloudInfo
return|;
block|}
comment|/**    * @param zkClient    * @param shardsZkPath    * @return    * @throws KeeperException    * @throws InterruptedException    * @throws IOException    */
DECL|method|readShards
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|ZkNodeProps
argument_list|>
name|readShards
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|String
name|shardsZkPath
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ZkNodeProps
argument_list|>
name|shardNameToProps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ZkNodeProps
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|zkClient
operator|.
name|exists
argument_list|(
name|shardsZkPath
argument_list|,
literal|null
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot find zk shards node that should exist:"
operator|+
name|shardsZkPath
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|shardZkPaths
init|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|shardsZkPath
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|shardPath
range|:
name|shardZkPaths
control|)
block|{
name|byte
index|[]
name|data
init|=
name|zkClient
operator|.
name|getData
argument_list|(
name|shardsZkPath
operator|+
literal|"/"
operator|+
name|shardPath
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ZkNodeProps
name|props
init|=
operator|new
name|ZkNodeProps
argument_list|()
decl_stmt|;
name|props
operator|.
name|load
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|shardNameToProps
operator|.
name|put
argument_list|(
name|shardPath
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|shardNameToProps
argument_list|)
return|;
block|}
DECL|method|getLiveNodes
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getLiveNodes
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|liveNodes
init|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|ZkStateReader
operator|.
name|LIVE_NODES_ZKNODE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|liveNodesSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|liveNodes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|liveNodesSet
operator|.
name|addAll
argument_list|(
name|liveNodes
argument_list|)
expr_stmt|;
return|return
name|liveNodesSet
return|;
block|}
block|}
end_class
end_unit
