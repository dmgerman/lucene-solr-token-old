begin_unit
begin_package
DECL|package|org.apache.solr.common.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * TODO: improve backoff retry impl  */
end_comment
begin_class
DECL|class|DefaultConnectionStrategy
specifier|public
class|class
name|DefaultConnectionStrategy
extends|extends
name|ZkClientConnectionStrategy
block|{
DECL|field|log
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultConnectionStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|executor
specifier|private
name|ScheduledExecutorService
name|executor
decl_stmt|;
annotation|@
name|Override
DECL|method|connect
specifier|public
name|void
name|connect
parameter_list|(
name|String
name|serverAddress
parameter_list|,
name|int
name|timeout
parameter_list|,
name|Watcher
name|watcher
parameter_list|,
name|ZkUpdate
name|updater
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|updater
operator|.
name|update
argument_list|(
operator|new
name|SolrZooKeeper
argument_list|(
name|serverAddress
argument_list|,
name|timeout
argument_list|,
name|watcher
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reconnect
specifier|public
name|void
name|reconnect
parameter_list|(
specifier|final
name|String
name|serverAddress
parameter_list|,
specifier|final
name|int
name|zkClientTimeout
parameter_list|,
specifier|final
name|Watcher
name|watcher
parameter_list|,
specifier|final
name|ZkUpdate
name|updater
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Starting reconnect to ZooKeeper attempts ..."
argument_list|)
expr_stmt|;
name|executor
operator|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|executor
operator|.
name|schedule
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|private
name|int
name|delay
init|=
literal|1000
decl_stmt|;
specifier|public
name|void
name|run
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Attempting the connect..."
argument_list|)
expr_stmt|;
name|boolean
name|connected
init|=
literal|false
decl_stmt|;
try|try
block|{
name|updater
operator|.
name|update
argument_list|(
operator|new
name|SolrZooKeeper
argument_list|(
name|serverAddress
argument_list|,
name|zkClientTimeout
argument_list|,
name|watcher
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Reconnected to ZooKeeper"
argument_list|)
expr_stmt|;
name|connected
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Reconnect to ZooKeeper failed"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|connected
condition|)
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|delay
operator|<
literal|240000
condition|)
block|{
name|delay
operator|=
name|delay
operator|*
literal|2
expr_stmt|;
block|}
name|executor
operator|.
name|schedule
argument_list|(
name|this
argument_list|,
name|delay
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
