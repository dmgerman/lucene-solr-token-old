begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.response
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/**  * A response that is returned by processing the {@link org.apache.solr.client.solrj.request.FieldAnalysisRequest}.  * Holds a map of {@link Analysis} objects per field name as well as a map of {@link Analysis} objects per field type.  *  *  * @since solr 1.4  */
end_comment
begin_class
DECL|class|FieldAnalysisResponse
specifier|public
class|class
name|FieldAnalysisResponse
extends|extends
name|AnalysisResponseBase
block|{
DECL|field|analysisByFieldTypeName
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Analysis
argument_list|>
name|analysisByFieldTypeName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Analysis
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|analysisByFieldName
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Analysis
argument_list|>
name|analysisByFieldName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Analysis
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|setResponse
specifier|public
name|void
name|setResponse
parameter_list|(
name|NamedList
argument_list|<
name|Object
argument_list|>
name|response
parameter_list|)
block|{
name|super
operator|.
name|setResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|analysisNL
init|=
operator|(
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
argument_list|>
argument_list|>
argument_list|>
operator|)
name|response
operator|.
name|get
argument_list|(
literal|"analysis"
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|entry
range|:
name|analysisNL
operator|.
name|get
argument_list|(
literal|"field_types"
argument_list|)
control|)
block|{
name|analysisByFieldTypeName
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|buildAnalysis
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|entry
range|:
name|analysisNL
operator|.
name|get
argument_list|(
literal|"field_names"
argument_list|)
control|)
block|{
name|analysisByFieldName
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|buildAnalysis
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|buildAnalysis
specifier|private
name|Analysis
name|buildAnalysis
parameter_list|(
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|value
parameter_list|)
block|{
name|Analysis
name|analysis
init|=
operator|new
name|Analysis
argument_list|()
decl_stmt|;
name|NamedList
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
name|queryNL
init|=
name|value
operator|.
name|get
argument_list|(
literal|"query"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AnalysisPhase
argument_list|>
name|phases
init|=
operator|(
name|queryNL
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|buildPhases
argument_list|(
name|queryNL
argument_list|)
decl_stmt|;
name|analysis
operator|.
name|setQueryPhases
argument_list|(
name|phases
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
name|indexNL
init|=
name|value
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
decl_stmt|;
name|phases
operator|=
name|buildPhases
argument_list|(
name|indexNL
argument_list|)
expr_stmt|;
name|analysis
operator|.
name|setIndexPhases
argument_list|(
name|phases
argument_list|)
expr_stmt|;
return|return
name|analysis
return|;
block|}
comment|/**    * Returns the number of field type analyses.    *    * @return The number of field type analyses.    */
DECL|method|getFieldTypeAnalysisCount
specifier|public
name|int
name|getFieldTypeAnalysisCount
parameter_list|()
block|{
return|return
name|analysisByFieldTypeName
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Returns the analysis for the given field type or {@code null} if no such analysis exists.    *    * @param fieldTypeName The name of the field type.    *    * @return The analysis for the given field type.    */
DECL|method|getFieldTypeAnalysis
specifier|public
name|Analysis
name|getFieldTypeAnalysis
parameter_list|(
name|String
name|fieldTypeName
parameter_list|)
block|{
return|return
name|analysisByFieldTypeName
operator|.
name|get
argument_list|(
name|fieldTypeName
argument_list|)
return|;
block|}
comment|/**    * Returns all field type analyses with their associated field types.    *    * @return All field type analyses with their associated field types.    */
DECL|method|getAllFieldTypeAnalysis
specifier|public
name|Iterable
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Analysis
argument_list|>
argument_list|>
name|getAllFieldTypeAnalysis
parameter_list|()
block|{
return|return
name|analysisByFieldTypeName
operator|.
name|entrySet
argument_list|()
return|;
block|}
comment|/**    * Returns the number of field name analyses.    *    * @return The number of field name analyses.    */
DECL|method|getFieldNameAnalysisCount
specifier|public
name|int
name|getFieldNameAnalysisCount
parameter_list|()
block|{
return|return
name|analysisByFieldName
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Returns the analysis for the given field name or {@code null} if no such analysis exists.    *    * @param fieldName The field name.    *    * @return The analysis for the given field name.    */
DECL|method|getFieldNameAnalysis
specifier|public
name|Analysis
name|getFieldNameAnalysis
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
return|return
name|analysisByFieldName
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
return|;
block|}
comment|/**    * Returns all field name analysese with their associated field names.    *    * @return all field name analysese with their associated field names.    */
DECL|method|getAllFieldNameAnalysis
specifier|public
name|Iterable
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Analysis
argument_list|>
argument_list|>
name|getAllFieldNameAnalysis
parameter_list|()
block|{
return|return
name|analysisByFieldName
operator|.
name|entrySet
argument_list|()
return|;
block|}
comment|//================================================= Inner Classes ==================================================
comment|/**    * The analysis of a field. Holds a list of all the query time analysis phases (if a query analysis was requested)    * as well as index time phases.    */
DECL|class|Analysis
specifier|public
specifier|static
class|class
name|Analysis
block|{
DECL|field|queryPhases
specifier|private
name|List
argument_list|<
name|AnalysisPhase
argument_list|>
name|queryPhases
decl_stmt|;
DECL|field|indexPhases
specifier|private
name|List
argument_list|<
name|AnalysisPhase
argument_list|>
name|indexPhases
decl_stmt|;
comment|/**      * This class should only be instantiated internally.      */
DECL|method|Analysis
specifier|private
name|Analysis
parameter_list|()
block|{     }
comment|/**      * Returns the number of query time analysis phases in this analysis or       * {@code -1} if query time analysis doesn't exist.      *      * @return Returns the number of query time analysis phases in this       *         analysis or {@code -1} if query time analysis doesn't exist.      */
DECL|method|getQueryPhasesCount
specifier|public
name|int
name|getQueryPhasesCount
parameter_list|()
block|{
return|return
name|queryPhases
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|queryPhases
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Returns the query time analysis phases for this analysis or {@code null}      * if query time analysis doesn't exist.      *       *      * @return The query time analysis phases for this analysis or {@code null}      *         if query time analysis doesn't exist.      *               */
DECL|method|getQueryPhases
specifier|public
name|Iterable
argument_list|<
name|AnalysisPhase
argument_list|>
name|getQueryPhases
parameter_list|()
block|{
return|return
name|queryPhases
return|;
block|}
comment|/**      * Returns the index time analysis phases for this analysis.      *      * @return The index time analysis phases for this analysis.      */
DECL|method|getIndexPhasesCount
specifier|public
name|int
name|getIndexPhasesCount
parameter_list|()
block|{
return|return
name|indexPhases
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Returns the index time analysis phases for this analysis.      *      * @return The index time analysis phases for this analysis.      */
DECL|method|getIndexPhases
specifier|public
name|Iterable
argument_list|<
name|AnalysisPhase
argument_list|>
name|getIndexPhases
parameter_list|()
block|{
return|return
name|indexPhases
return|;
block|}
DECL|method|setQueryPhases
specifier|private
name|void
name|setQueryPhases
parameter_list|(
name|List
argument_list|<
name|AnalysisPhase
argument_list|>
name|queryPhases
parameter_list|)
block|{
name|this
operator|.
name|queryPhases
operator|=
name|queryPhases
expr_stmt|;
block|}
DECL|method|setIndexPhases
specifier|private
name|void
name|setIndexPhases
parameter_list|(
name|List
argument_list|<
name|AnalysisPhase
argument_list|>
name|indexPhases
parameter_list|)
block|{
name|this
operator|.
name|indexPhases
operator|=
name|indexPhases
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
