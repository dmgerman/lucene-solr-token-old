begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|MapSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|LocalSolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|AbstractSolrTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/**  * This is a simple test to make sure the<code>CopyField</code> works.  * It uses its own special schema file.  *  * @since solr 1.4  */
end_comment
begin_class
DECL|class|CopyFieldTest
specifier|public
class|class
name|CopyFieldTest
extends|extends
name|AbstractSolrTestCase
block|{
annotation|@
name|Override
DECL|method|getSchemaFile
specifier|public
name|String
name|getSchemaFile
parameter_list|()
block|{
return|return
literal|"schema-copyfield-test.xml"
return|;
block|}
annotation|@
name|Override
DECL|method|getSolrConfigFile
specifier|public
name|String
name|getSolrConfigFile
parameter_list|()
block|{
return|return
literal|"solrconfig.xml"
return|;
block|}
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCopyFieldSchemaFieldSchemaField
specifier|public
name|void
name|testCopyFieldSchemaFieldSchemaField
parameter_list|()
block|{
try|try
block|{
operator|new
name|CopyField
argument_list|(
operator|new
name|SchemaField
argument_list|(
literal|"source"
argument_list|,
operator|new
name|TextField
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"CopyField failed with null SchemaField argument."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"can't be NULL"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|CopyField
argument_list|(
literal|null
argument_list|,
operator|new
name|SchemaField
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|TextField
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"CopyField failed with null SchemaField argument."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"can't be NULL"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|CopyField
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"CopyField failed with null SchemaField argument."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"can't be NULL"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCopyFieldSchemaFieldSchemaFieldInt
specifier|public
name|void
name|testCopyFieldSchemaFieldSchemaFieldInt
parameter_list|()
block|{
try|try
block|{
operator|new
name|CopyField
argument_list|(
literal|null
argument_list|,
operator|new
name|SchemaField
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|TextField
argument_list|()
argument_list|)
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"CopyField failed with null SchemaField argument."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"can't be NULL"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|CopyField
argument_list|(
operator|new
name|SchemaField
argument_list|(
literal|"source"
argument_list|,
operator|new
name|TextField
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"CopyField failed with null SchemaField argument."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"can't be NULL"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|CopyField
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"CopyField failed with null SchemaField argument."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"can't be NULL"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|CopyField
argument_list|(
operator|new
name|SchemaField
argument_list|(
literal|"source"
argument_list|,
operator|new
name|TextField
argument_list|()
argument_list|)
argument_list|,
operator|new
name|SchemaField
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|TextField
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1000
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"CopyField failed with negative length argument."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"can't have a negative value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|new
name|CopyField
argument_list|(
operator|new
name|SchemaField
argument_list|(
literal|"source"
argument_list|,
operator|new
name|TextField
argument_list|()
argument_list|)
argument_list|,
operator|new
name|SchemaField
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|TextField
argument_list|()
argument_list|)
argument_list|,
name|CopyField
operator|.
name|UNLIMITED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetSource
specifier|public
name|void
name|testGetSource
parameter_list|()
block|{
specifier|final
name|CopyField
name|copyField
init|=
operator|new
name|CopyField
argument_list|(
operator|new
name|SchemaField
argument_list|(
literal|"source"
argument_list|,
operator|new
name|TextField
argument_list|()
argument_list|)
argument_list|,
operator|new
name|SchemaField
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|TextField
argument_list|()
argument_list|)
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"source"
argument_list|,
name|copyField
operator|.
name|getSource
argument_list|()
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetDestination
specifier|public
name|void
name|testGetDestination
parameter_list|()
block|{
specifier|final
name|CopyField
name|copyField
init|=
operator|new
name|CopyField
argument_list|(
operator|new
name|SchemaField
argument_list|(
literal|"source"
argument_list|,
operator|new
name|TextField
argument_list|()
argument_list|)
argument_list|,
operator|new
name|SchemaField
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|TextField
argument_list|()
argument_list|)
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"destination"
argument_list|,
name|copyField
operator|.
name|getDestination
argument_list|()
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetMaxChars
specifier|public
name|void
name|testGetMaxChars
parameter_list|()
block|{
specifier|final
name|CopyField
name|copyField
init|=
operator|new
name|CopyField
argument_list|(
operator|new
name|SchemaField
argument_list|(
literal|"source"
argument_list|,
operator|new
name|TextField
argument_list|()
argument_list|)
argument_list|,
operator|new
name|SchemaField
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|TextField
argument_list|()
argument_list|)
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|copyField
operator|.
name|getMaxChars
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCopyFieldFunctionality
specifier|public
name|void
name|testCopyFieldFunctionality
parameter_list|()
block|{
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|,
literal|"title"
argument_list|,
literal|"test copy field"
argument_list|,
literal|"text_en"
argument_list|,
literal|"this is a simple test of the copy field functionality"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
literal|"text_en:simple"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"indent"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|req
init|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
operator|new
name|MapSolrParams
argument_list|(
name|args
argument_list|)
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
literal|"Make sure they got in"
argument_list|,
name|req
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.='10']"
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
literal|"highlight:simple"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"indent"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
operator|new
name|MapSolrParams
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"dynamic source"
argument_list|,
name|req
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.='10']"
argument_list|,
literal|"//result/doc[1]/arr[@name='highlight']/str[.='this is a simple test of ']"
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
literal|"text_en:functionality"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"indent"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
operator|new
name|MapSolrParams
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Make sure they got in"
argument_list|,
name|req
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
literal|"highlight:functionality"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"indent"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
operator|new
name|MapSolrParams
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"dynamic source"
argument_list|,
name|req
argument_list|,
literal|"//*[@numFound='0']"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
