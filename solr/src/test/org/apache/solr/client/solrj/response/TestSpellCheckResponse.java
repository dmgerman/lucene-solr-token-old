begin_unit
begin_package
DECL|package|org.apache.solr.client.solrj.response
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrExampleTestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CommonsHttpSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SpellingParams
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_comment
comment|/**  * Test for SpellCheckComponent's response in Solrj  *  * @version $Id$  * @since solr 1.3  */
end_comment
begin_class
DECL|class|TestSpellCheckResponse
specifier|public
class|class
name|TestSpellCheckResponse
extends|extends
name|SolrExampleTestBase
block|{
DECL|method|getSchemaFile
annotation|@
name|Override
specifier|public
name|String
name|getSchemaFile
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|getSolrConfigFile
annotation|@
name|Override
specifier|public
name|String
name|getSolrConfigFile
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|field|server
name|SolrServer
name|server
decl_stmt|;
DECL|field|jetty
name|JettySolrRunner
name|jetty
decl_stmt|;
DECL|field|port
name|int
name|port
init|=
literal|0
decl_stmt|;
DECL|field|context
specifier|static
specifier|final
name|String
name|context
init|=
literal|"/example"
decl_stmt|;
DECL|field|field
specifier|static
name|String
name|field
init|=
literal|"name"
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|jetty
operator|=
operator|new
name|JettySolrRunner
argument_list|(
name|context
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jetty
operator|.
name|start
argument_list|()
expr_stmt|;
name|port
operator|=
name|jetty
operator|.
name|getLocalPort
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Assigned Port: "
operator|+
name|port
argument_list|)
expr_stmt|;
name|server
operator|=
name|this
operator|.
name|createNewSolrServer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|jetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
DECL|method|testSpellCheckResponse
specifier|public
name|void
name|testSpellCheckResponse
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|setField
argument_list|(
literal|"id"
argument_list|,
literal|"111"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setField
argument_list|(
name|field
argument_list|,
literal|"Samsung"
argument_list|)
expr_stmt|;
name|server
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|server
operator|.
name|commit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/spell"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"spellcheck"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
name|SpellingParams
operator|.
name|SPELLCHECK_Q
argument_list|,
literal|"samsang"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
name|SpellingParams
operator|.
name|SPELLCHECK_BUILD
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QueryRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|SpellCheckResponse
name|response
init|=
name|request
operator|.
name|process
argument_list|(
name|server
argument_list|)
operator|.
name|getSpellCheckResponse
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"samsung"
argument_list|,
name|response
operator|.
name|getFirstSuggestion
argument_list|(
literal|"samsang"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpellCheckResponse_Extended
specifier|public
name|void
name|testSpellCheckResponse_Extended
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|setField
argument_list|(
literal|"id"
argument_list|,
literal|"111"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setField
argument_list|(
name|field
argument_list|,
literal|"Samsung"
argument_list|)
expr_stmt|;
name|server
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|server
operator|.
name|commit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/spell"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"spellcheck"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
name|SpellingParams
operator|.
name|SPELLCHECK_Q
argument_list|,
literal|"samsang"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
name|SpellingParams
operator|.
name|SPELLCHECK_BUILD
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
name|SpellingParams
operator|.
name|SPELLCHECK_EXTENDED_RESULTS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QueryRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|SpellCheckResponse
name|response
init|=
name|request
operator|.
name|process
argument_list|(
name|server
argument_list|)
operator|.
name|getSpellCheckResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"samsung"
argument_list|,
name|response
operator|.
name|getFirstSuggestion
argument_list|(
literal|"samsang"
argument_list|)
argument_list|)
expr_stmt|;
name|SpellCheckResponse
operator|.
name|Suggestion
name|sug
init|=
name|response
operator|.
name|getSuggestion
argument_list|(
literal|"samsang"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SpellCheckResponse
operator|.
name|Suggestion
argument_list|>
name|sugs
init|=
name|response
operator|.
name|getSuggestions
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|sug
operator|.
name|getAlternatives
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|sug
operator|.
name|getAlternativeFrequencies
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sugs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAlternatives
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|sugs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAlternativeFrequencies
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"samsung"
argument_list|,
name|sug
operator|.
name|getAlternatives
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"samsung"
argument_list|,
name|sugs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAlternatives
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// basic test if fields were filled in
name|assertTrue
argument_list|(
name|sug
operator|.
name|getEndOffset
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sug
operator|.
name|getToken
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sug
operator|.
name|getNumFound
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// assertTrue(sug.getOriginalFrequency()> 0);
comment|// Hmmm... the API for SpellCheckResponse could be nicer:
name|response
operator|.
name|getSuggestions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAlternatives
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|getSolrServer
specifier|protected
name|SolrServer
name|getSolrServer
parameter_list|()
block|{
return|return
name|server
return|;
block|}
DECL|method|createNewSolrServer
specifier|protected
name|SolrServer
name|createNewSolrServer
parameter_list|()
block|{
try|try
block|{
comment|// setup the server...
name|String
name|url
init|=
literal|"http://localhost:"
operator|+
name|port
operator|+
name|context
decl_stmt|;
name|CommonsHttpSolrServer
name|s
init|=
operator|new
name|CommonsHttpSolrServer
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|s
operator|.
name|setConnectionTimeout
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// 1/10th sec
name|s
operator|.
name|setDefaultMaxConnectionsPerHost
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|s
operator|.
name|setMaxTotalConnections
argument_list|(
literal|100
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class
end_unit
