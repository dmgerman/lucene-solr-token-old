begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.request
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|AbstractSolrTestCase
import|;
end_import
begin_class
DECL|class|SimpleFacetsLegacySortTest
specifier|public
class|class
name|SimpleFacetsLegacySortTest
extends|extends
name|AbstractSolrTestCase
block|{
DECL|method|getSchemaFile
specifier|public
name|String
name|getSchemaFile
parameter_list|()
block|{
return|return
literal|"schema.xml"
return|;
block|}
DECL|method|getSolrConfigFile
specifier|public
name|String
name|getSolrConfigFile
parameter_list|()
block|{
return|return
literal|"solrconfig-facet-sort.xml"
return|;
block|}
DECL|method|getCoreName
specifier|public
name|String
name|getCoreName
parameter_list|()
block|{
return|return
literal|"basic"
return|;
block|}
DECL|method|testFacetSortLegacy
specifier|public
name|void
name|testFacetSortLegacy
parameter_list|()
block|{
name|String
name|f
init|=
literal|"t_s1"
decl_stmt|;
name|String
name|pre
init|=
literal|"//lst[@name='"
operator|+
name|f
operator|+
literal|"']"
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|f
argument_list|,
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
name|f
argument_list|,
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
name|f
argument_list|,
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
name|f
argument_list|,
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
name|f
argument_list|,
literal|"D"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
name|f
argument_list|,
literal|"E"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
name|f
argument_list|,
literal|"E"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
name|f
argument_list|,
literal|"E"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|,
name|f
argument_list|,
literal|"F"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|,
name|f
argument_list|,
literal|"G"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"11"
argument_list|,
name|f
argument_list|,
literal|"G"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"12"
argument_list|,
name|f
argument_list|,
literal|"G"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"13"
argument_list|,
name|f
argument_list|,
literal|"G"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"14"
argument_list|,
name|f
argument_list|,
literal|"G"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check for facet.sort=true"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=7]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='G'][.='5']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='E'][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[3][@name='C'][.='2']"
argument_list|,
name|pre
operator|+
literal|"/int[4][@name='A'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[5][@name='B'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[6][@name='D'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[7][@name='F'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check for facet.sort=false"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=7]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='A'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='B'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[3][@name='C'][.='2']"
argument_list|,
name|pre
operator|+
literal|"/int[4][@name='D'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[5][@name='E'][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[6][@name='F'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[7][@name='G'][.='5']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check for solrconfig default (false)"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=7]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='A'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='B'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[3][@name='C'][.='2']"
argument_list|,
name|pre
operator|+
literal|"/int[4][@name='D'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[5][@name='E'][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[6][@name='F'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[7][@name='G'][.='5']"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
