begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|language
operator|.
name|Metaphone
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|WhitespaceTokenizer
import|;
end_import
begin_comment
comment|/**  * @version $Id$  */
end_comment
begin_class
DECL|class|TestPhoneticFilter
specifier|public
class|class
name|TestPhoneticFilter
extends|extends
name|BaseTokenTestCase
block|{
DECL|method|testFactory
specifier|public
name|void
name|testFactory
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|PhoneticFilterFactory
name|ff
init|=
operator|new
name|PhoneticFilterFactory
argument_list|()
decl_stmt|;
try|try
block|{
name|ff
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"missing encoder parameter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{}
name|args
operator|.
name|put
argument_list|(
name|PhoneticFilterFactory
operator|.
name|ENCODER
argument_list|,
literal|"XXX"
argument_list|)
expr_stmt|;
try|try
block|{
name|ff
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"unknown encoder parameter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{}
name|args
operator|.
name|put
argument_list|(
name|PhoneticFilterFactory
operator|.
name|ENCODER
argument_list|,
literal|"Metaphone"
argument_list|)
expr_stmt|;
name|ff
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ff
operator|.
name|encoder
operator|instanceof
name|Metaphone
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ff
operator|.
name|inject
argument_list|)
expr_stmt|;
comment|// default
name|args
operator|.
name|put
argument_list|(
name|PhoneticFilterFactory
operator|.
name|INJECT
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|ff
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ff
operator|.
name|inject
argument_list|)
expr_stmt|;
block|}
DECL|method|testAlgorithms
specifier|public
name|void
name|testAlgorithms
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAlgorithm
argument_list|(
literal|"Metaphone"
argument_list|,
literal|"true"
argument_list|,
literal|"aaa bbb ccc easgasg"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"A"
block|,
literal|"aaa"
block|,
literal|"B"
block|,
literal|"bbb"
block|,
literal|"KKK"
block|,
literal|"ccc"
block|,
literal|"ESKS"
block|,
literal|"easgasg"
block|}
argument_list|)
expr_stmt|;
name|assertAlgorithm
argument_list|(
literal|"Metaphone"
argument_list|,
literal|"false"
argument_list|,
literal|"aaa bbb ccc easgasg"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"A"
block|,
literal|"B"
block|,
literal|"KKK"
block|,
literal|"ESKS"
block|}
argument_list|)
expr_stmt|;
name|assertAlgorithm
argument_list|(
literal|"DoubleMetaphone"
argument_list|,
literal|"true"
argument_list|,
literal|"aaa bbb ccc easgasg"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"A"
block|,
literal|"aaa"
block|,
literal|"PP"
block|,
literal|"bbb"
block|,
literal|"KK"
block|,
literal|"ccc"
block|,
literal|"ASKS"
block|,
literal|"easgasg"
block|}
argument_list|)
expr_stmt|;
name|assertAlgorithm
argument_list|(
literal|"DoubleMetaphone"
argument_list|,
literal|"false"
argument_list|,
literal|"aaa bbb ccc easgasg"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"A"
block|,
literal|"PP"
block|,
literal|"KK"
block|,
literal|"ASKS"
block|}
argument_list|)
expr_stmt|;
name|assertAlgorithm
argument_list|(
literal|"Soundex"
argument_list|,
literal|"true"
argument_list|,
literal|"aaa bbb ccc easgasg"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"A000"
block|,
literal|"aaa"
block|,
literal|"B000"
block|,
literal|"bbb"
block|,
literal|"C000"
block|,
literal|"ccc"
block|,
literal|"E220"
block|,
literal|"easgasg"
block|}
argument_list|)
expr_stmt|;
name|assertAlgorithm
argument_list|(
literal|"Soundex"
argument_list|,
literal|"false"
argument_list|,
literal|"aaa bbb ccc easgasg"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"A000"
block|,
literal|"B000"
block|,
literal|"C000"
block|,
literal|"E220"
block|}
argument_list|)
expr_stmt|;
name|assertAlgorithm
argument_list|(
literal|"RefinedSoundex"
argument_list|,
literal|"true"
argument_list|,
literal|"aaa bbb ccc easgasg"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"A0"
block|,
literal|"aaa"
block|,
literal|"B1"
block|,
literal|"bbb"
block|,
literal|"C3"
block|,
literal|"ccc"
block|,
literal|"E034034"
block|,
literal|"easgasg"
block|}
argument_list|)
expr_stmt|;
name|assertAlgorithm
argument_list|(
literal|"RefinedSoundex"
argument_list|,
literal|"false"
argument_list|,
literal|"aaa bbb ccc easgasg"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"A0"
block|,
literal|"B1"
block|,
literal|"C3"
block|,
literal|"E034034"
block|}
argument_list|)
expr_stmt|;
name|assertAlgorithm
argument_list|(
literal|"Caverphone"
argument_list|,
literal|"true"
argument_list|,
literal|"Darda Karleen Datha Carlene"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"TTA1111111"
block|,
literal|"Darda"
block|,
literal|"KLN1111111"
block|,
literal|"Karleen"
block|,
literal|"TTA1111111"
block|,
literal|"Datha"
block|,
literal|"KLN1111111"
block|,
literal|"Carlene"
block|}
argument_list|)
expr_stmt|;
name|assertAlgorithm
argument_list|(
literal|"Caverphone"
argument_list|,
literal|"false"
argument_list|,
literal|"Darda Karleen Datha Carlene"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"TTA1111111"
block|,
literal|"KLN1111111"
block|,
literal|"TTA1111111"
block|,
literal|"KLN1111111"
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAlgorithm
specifier|static
name|void
name|assertAlgorithm
parameter_list|(
name|String
name|algName
parameter_list|,
name|String
name|inject
parameter_list|,
name|String
name|input
parameter_list|,
name|String
index|[]
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|Tokenizer
name|tokenizer
init|=
operator|new
name|WhitespaceTokenizer
argument_list|(
name|DEFAULT_VERSION
argument_list|,
operator|new
name|StringReader
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"encoder"
argument_list|,
name|algName
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"inject"
argument_list|,
name|inject
argument_list|)
expr_stmt|;
name|PhoneticFilterFactory
name|factory
init|=
operator|new
name|PhoneticFilterFactory
argument_list|()
decl_stmt|;
name|factory
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|TokenStream
name|stream
init|=
name|factory
operator|.
name|create
argument_list|(
name|tokenizer
argument_list|)
decl_stmt|;
name|assertTokenStreamContents
argument_list|(
name|stream
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
