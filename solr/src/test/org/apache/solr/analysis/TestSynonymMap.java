begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|synonym
operator|.
name|SynonymMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_class
DECL|class|TestSynonymMap
specifier|public
class|class
name|TestSynonymMap
extends|extends
name|LuceneTestCase
block|{
DECL|method|testInvalidMappingRules
specifier|public
name|void
name|testInvalidMappingRules
parameter_list|()
throws|throws
name|Exception
block|{
name|SynonymMap
name|synMap
init|=
operator|new
name|SynonymMap
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rules
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|rules
operator|.
name|add
argument_list|(
literal|"a=>b=>c"
argument_list|)
expr_stmt|;
try|try
block|{
name|SynonymFilterFactory
operator|.
name|parseRules
argument_list|(
name|rules
argument_list|,
name|synMap
argument_list|,
literal|"=>"
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"RuntimeException must be thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testReadMappingRules
specifier|public
name|void
name|testReadMappingRules
parameter_list|()
throws|throws
name|Exception
block|{
name|SynonymMap
name|synMap
decl_stmt|;
comment|// (a)->[b]
name|List
argument_list|<
name|String
argument_list|>
name|rules
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|rules
operator|.
name|add
argument_list|(
literal|"a=>b"
argument_list|)
expr_stmt|;
name|synMap
operator|=
operator|new
name|SynonymMap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SynonymFilterFactory
operator|.
name|parseRules
argument_list|(
name|rules
argument_list|,
name|synMap
argument_list|,
literal|"=>"
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|synMap
operator|.
name|submap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
comment|// (a)->[c]
comment|// (b)->[c]
name|rules
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
literal|"a,b=>c"
argument_list|)
expr_stmt|;
name|synMap
operator|=
operator|new
name|SynonymMap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SynonymFilterFactory
operator|.
name|parseRules
argument_list|(
name|rules
argument_list|,
name|synMap
argument_list|,
literal|"=>"
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|synMap
operator|.
name|submap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
comment|// (a)->[b][c]
name|rules
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
literal|"a=>b,c"
argument_list|)
expr_stmt|;
name|synMap
operator|=
operator|new
name|SynonymMap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SynonymFilterFactory
operator|.
name|parseRules
argument_list|(
name|rules
argument_list|,
name|synMap
argument_list|,
literal|"=>"
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|synMap
operator|.
name|submap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
comment|// (a)->(b)->[a2]
comment|//      [a1]
name|rules
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
literal|"a=>a1"
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
literal|"a b=>a2"
argument_list|)
expr_stmt|;
name|synMap
operator|=
operator|new
name|SynonymMap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SynonymFilterFactory
operator|.
name|parseRules
argument_list|(
name|rules
argument_list|,
name|synMap
argument_list|,
literal|"=>"
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|synMap
operator|.
name|submap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"a"
argument_list|,
literal|"a1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getSubSynonymMap
argument_list|(
name|synMap
argument_list|,
literal|"a"
argument_list|)
operator|.
name|submap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|getSubSynonymMap
argument_list|(
name|synMap
argument_list|,
literal|"a"
argument_list|)
argument_list|,
literal|"b"
argument_list|,
literal|"a2"
argument_list|)
expr_stmt|;
comment|// (a)->(b)->[a2]
comment|//      (c)->[a3]
comment|//      [a1]
name|rules
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
literal|"a=>a1"
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
literal|"a b=>a2"
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
literal|"a c=>a3"
argument_list|)
expr_stmt|;
name|synMap
operator|=
operator|new
name|SynonymMap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SynonymFilterFactory
operator|.
name|parseRules
argument_list|(
name|rules
argument_list|,
name|synMap
argument_list|,
literal|"=>"
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|synMap
operator|.
name|submap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"a"
argument_list|,
literal|"a1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getSubSynonymMap
argument_list|(
name|synMap
argument_list|,
literal|"a"
argument_list|)
operator|.
name|submap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|getSubSynonymMap
argument_list|(
name|synMap
argument_list|,
literal|"a"
argument_list|)
argument_list|,
literal|"b"
argument_list|,
literal|"a2"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|getSubSynonymMap
argument_list|(
name|synMap
argument_list|,
literal|"a"
argument_list|)
argument_list|,
literal|"c"
argument_list|,
literal|"a3"
argument_list|)
expr_stmt|;
comment|// (a)->(b)->[a2]
comment|//      [a1]
comment|// (b)->(c)->[b2]
comment|//      [b1]
name|rules
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
literal|"a=>a1"
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
literal|"a b=>a2"
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
literal|"b=>b1"
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
literal|"b c=>b2"
argument_list|)
expr_stmt|;
name|synMap
operator|=
operator|new
name|SynonymMap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SynonymFilterFactory
operator|.
name|parseRules
argument_list|(
name|rules
argument_list|,
name|synMap
argument_list|,
literal|"=>"
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|synMap
operator|.
name|submap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"a"
argument_list|,
literal|"a1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getSubSynonymMap
argument_list|(
name|synMap
argument_list|,
literal|"a"
argument_list|)
operator|.
name|submap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|getSubSynonymMap
argument_list|(
name|synMap
argument_list|,
literal|"a"
argument_list|)
argument_list|,
literal|"b"
argument_list|,
literal|"a2"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"b"
argument_list|,
literal|"b1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getSubSynonymMap
argument_list|(
name|synMap
argument_list|,
literal|"b"
argument_list|)
operator|.
name|submap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|getSubSynonymMap
argument_list|(
name|synMap
argument_list|,
literal|"b"
argument_list|)
argument_list|,
literal|"c"
argument_list|,
literal|"b2"
argument_list|)
expr_stmt|;
block|}
DECL|method|testRead1waySynonymRules
specifier|public
name|void
name|testRead1waySynonymRules
parameter_list|()
throws|throws
name|Exception
block|{
name|SynonymMap
name|synMap
decl_stmt|;
comment|// (a)->[a]
comment|// (b)->[a]
name|List
argument_list|<
name|String
argument_list|>
name|rules
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|rules
operator|.
name|add
argument_list|(
literal|"a,b"
argument_list|)
expr_stmt|;
name|synMap
operator|=
operator|new
name|SynonymMap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SynonymFilterFactory
operator|.
name|parseRules
argument_list|(
name|rules
argument_list|,
name|synMap
argument_list|,
literal|"=>"
argument_list|,
literal|","
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|synMap
operator|.
name|submap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"a"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
comment|// (a)->[a]
comment|// (b)->[a]
comment|// (c)->[a]
name|rules
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
literal|"a,b,c"
argument_list|)
expr_stmt|;
name|synMap
operator|=
operator|new
name|SynonymMap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SynonymFilterFactory
operator|.
name|parseRules
argument_list|(
name|rules
argument_list|,
name|synMap
argument_list|,
literal|"=>"
argument_list|,
literal|","
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|synMap
operator|.
name|submap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"a"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"c"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
comment|// (a)->[a]
comment|// (b1)->(b2)->[a]
name|rules
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
literal|"a,b1 b2"
argument_list|)
expr_stmt|;
name|synMap
operator|=
operator|new
name|SynonymMap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SynonymFilterFactory
operator|.
name|parseRules
argument_list|(
name|rules
argument_list|,
name|synMap
argument_list|,
literal|"=>"
argument_list|,
literal|","
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|synMap
operator|.
name|submap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"a"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getSubSynonymMap
argument_list|(
name|synMap
argument_list|,
literal|"b1"
argument_list|)
operator|.
name|submap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|getSubSynonymMap
argument_list|(
name|synMap
argument_list|,
literal|"b1"
argument_list|)
argument_list|,
literal|"b2"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
comment|// (a1)->(a2)->[a1][a2]
comment|// (b)->[a1][a2]
name|rules
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
literal|"a1 a2,b"
argument_list|)
expr_stmt|;
name|synMap
operator|=
operator|new
name|SynonymMap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SynonymFilterFactory
operator|.
name|parseRules
argument_list|(
name|rules
argument_list|,
name|synMap
argument_list|,
literal|"=>"
argument_list|,
literal|","
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|synMap
operator|.
name|submap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getSubSynonymMap
argument_list|(
name|synMap
argument_list|,
literal|"a1"
argument_list|)
operator|.
name|submap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|getSubSynonymMap
argument_list|(
name|synMap
argument_list|,
literal|"a1"
argument_list|)
argument_list|,
literal|"a2"
argument_list|,
literal|"a1"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|getSubSynonymMap
argument_list|(
name|synMap
argument_list|,
literal|"a1"
argument_list|)
argument_list|,
literal|"a2"
argument_list|,
literal|"a2"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"b"
argument_list|,
literal|"a1"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"b"
argument_list|,
literal|"a2"
argument_list|)
expr_stmt|;
block|}
DECL|method|testRead2waySynonymRules
specifier|public
name|void
name|testRead2waySynonymRules
parameter_list|()
throws|throws
name|Exception
block|{
name|SynonymMap
name|synMap
decl_stmt|;
comment|// (a)->[a][b]
comment|// (b)->[a][b]
name|List
argument_list|<
name|String
argument_list|>
name|rules
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|rules
operator|.
name|add
argument_list|(
literal|"a,b"
argument_list|)
expr_stmt|;
name|synMap
operator|=
operator|new
name|SynonymMap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SynonymFilterFactory
operator|.
name|parseRules
argument_list|(
name|rules
argument_list|,
name|synMap
argument_list|,
literal|"=>"
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|synMap
operator|.
name|submap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"a"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
comment|// (a)->[a][b][c]
comment|// (b)->[a][b][c]
comment|// (c)->[a][b][c]
name|rules
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
literal|"a,b,c"
argument_list|)
expr_stmt|;
name|synMap
operator|=
operator|new
name|SynonymMap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SynonymFilterFactory
operator|.
name|parseRules
argument_list|(
name|rules
argument_list|,
name|synMap
argument_list|,
literal|"=>"
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|synMap
operator|.
name|submap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"a"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"c"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"c"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"c"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
comment|// (a)->[a]
comment|//      [b1][b2]
comment|// (b1)->(b2)->[a]
comment|//             [b1][b2]
name|rules
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
literal|"a,b1 b2"
argument_list|)
expr_stmt|;
name|synMap
operator|=
operator|new
name|SynonymMap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SynonymFilterFactory
operator|.
name|parseRules
argument_list|(
name|rules
argument_list|,
name|synMap
argument_list|,
literal|"=>"
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|synMap
operator|.
name|submap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"a"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"a"
argument_list|,
literal|"b1"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"a"
argument_list|,
literal|"b2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getSubSynonymMap
argument_list|(
name|synMap
argument_list|,
literal|"b1"
argument_list|)
operator|.
name|submap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|getSubSynonymMap
argument_list|(
name|synMap
argument_list|,
literal|"b1"
argument_list|)
argument_list|,
literal|"b2"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|getSubSynonymMap
argument_list|(
name|synMap
argument_list|,
literal|"b1"
argument_list|)
argument_list|,
literal|"b2"
argument_list|,
literal|"b1"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|getSubSynonymMap
argument_list|(
name|synMap
argument_list|,
literal|"b1"
argument_list|)
argument_list|,
literal|"b2"
argument_list|,
literal|"b2"
argument_list|)
expr_stmt|;
comment|// (a1)->(a2)->[a1][a2]
comment|//             [b]
comment|// (b)->[a1][a2]
comment|//      [b]
name|rules
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
literal|"a1 a2,b"
argument_list|)
expr_stmt|;
name|synMap
operator|=
operator|new
name|SynonymMap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SynonymFilterFactory
operator|.
name|parseRules
argument_list|(
name|rules
argument_list|,
name|synMap
argument_list|,
literal|"=>"
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|synMap
operator|.
name|submap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getSubSynonymMap
argument_list|(
name|synMap
argument_list|,
literal|"a1"
argument_list|)
operator|.
name|submap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|getSubSynonymMap
argument_list|(
name|synMap
argument_list|,
literal|"a1"
argument_list|)
argument_list|,
literal|"a2"
argument_list|,
literal|"a1"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|getSubSynonymMap
argument_list|(
name|synMap
argument_list|,
literal|"a1"
argument_list|)
argument_list|,
literal|"a2"
argument_list|,
literal|"a2"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|getSubSynonymMap
argument_list|(
name|synMap
argument_list|,
literal|"a1"
argument_list|)
argument_list|,
literal|"a2"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"b"
argument_list|,
literal|"a1"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"b"
argument_list|,
literal|"a2"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|synMap
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBigramTokenizer
specifier|public
name|void
name|testBigramTokenizer
parameter_list|()
throws|throws
name|Exception
block|{
name|SynonymMap
name|synMap
decl_stmt|;
comment|// prepare bi-gram tokenizer factory
name|BaseTokenizerFactory
name|tf
init|=
operator|new
name|NGramTokenizerFactory
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"minGramSize"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"maxGramSize"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|tf
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
comment|// (ab)->(bc)->(cd)->[ef][fg][gh]
name|List
argument_list|<
name|String
argument_list|>
name|rules
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|rules
operator|.
name|add
argument_list|(
literal|"abcd=>efgh"
argument_list|)
expr_stmt|;
name|synMap
operator|=
operator|new
name|SynonymMap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SynonymFilterFactory
operator|.
name|parseRules
argument_list|(
name|rules
argument_list|,
name|synMap
argument_list|,
literal|"=>"
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|,
name|tf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|synMap
operator|.
name|submap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getSubSynonymMap
argument_list|(
name|synMap
argument_list|,
literal|"ab"
argument_list|)
operator|.
name|submap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getSubSynonymMap
argument_list|(
name|getSubSynonymMap
argument_list|(
name|synMap
argument_list|,
literal|"ab"
argument_list|)
argument_list|,
literal|"bc"
argument_list|)
operator|.
name|submap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|getSubSynonymMap
argument_list|(
name|getSubSynonymMap
argument_list|(
name|synMap
argument_list|,
literal|"ab"
argument_list|)
argument_list|,
literal|"bc"
argument_list|)
argument_list|,
literal|"cd"
argument_list|,
literal|"ef"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|getSubSynonymMap
argument_list|(
name|getSubSynonymMap
argument_list|(
name|synMap
argument_list|,
literal|"ab"
argument_list|)
argument_list|,
literal|"bc"
argument_list|)
argument_list|,
literal|"cd"
argument_list|,
literal|"fg"
argument_list|)
expr_stmt|;
name|assertTokIncludes
argument_list|(
name|getSubSynonymMap
argument_list|(
name|getSubSynonymMap
argument_list|(
name|synMap
argument_list|,
literal|"ab"
argument_list|)
argument_list|,
literal|"bc"
argument_list|)
argument_list|,
literal|"cd"
argument_list|,
literal|"gh"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTokIncludes
specifier|private
name|void
name|assertTokIncludes
parameter_list|(
name|SynonymMap
name|map
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|exp
parameter_list|)
throws|throws
name|Exception
block|{
name|Token
index|[]
name|tokens
init|=
name|map
operator|.
name|submap
operator|.
name|get
argument_list|(
name|src
argument_list|)
operator|.
name|synonyms
decl_stmt|;
name|boolean
name|inc
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Token
name|token
range|:
name|tokens
control|)
block|{
if|if
condition|(
name|exp
operator|.
name|equals
argument_list|(
operator|new
name|String
argument_list|(
name|token
operator|.
name|buffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|token
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
condition|)
name|inc
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|inc
argument_list|)
expr_stmt|;
block|}
DECL|method|getSubSynonymMap
specifier|private
name|SynonymMap
name|getSubSynonymMap
parameter_list|(
name|SynonymMap
name|map
parameter_list|,
name|String
name|src
parameter_list|)
block|{
return|return
name|map
operator|.
name|submap
operator|.
name|get
argument_list|(
name|src
argument_list|)
return|;
block|}
block|}
end_class
end_unit
