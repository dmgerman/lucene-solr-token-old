begin_unit
begin_package
DECL|package|org.apache.solr.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_class
DECL|class|IntUtilsTest
specifier|public
class|class
name|IntUtilsTest
extends|extends
name|LuceneTestCase
block|{
DECL|field|r
name|Random
name|r
init|=
name|newRandom
argument_list|()
decl_stmt|;
DECL|method|testSort
specifier|public
name|void
name|testSort
parameter_list|()
block|{
name|int
name|maxSize
init|=
literal|100
decl_stmt|;
name|int
name|maxVal
init|=
literal|100
decl_stmt|;
name|int
index|[]
name|a
init|=
operator|new
name|int
index|[
name|maxSize
index|]
decl_stmt|;
name|int
index|[]
name|b
init|=
operator|new
name|int
index|[
name|maxSize
index|]
decl_stmt|;
name|PrimUtils
operator|.
name|IntComparator
name|comparator
init|=
operator|new
name|PrimUtils
operator|.
name|IntComparator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
return|return
name|b
operator|-
name|a
return|;
comment|// sort in reverse
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|100
condition|;
name|iter
operator|++
control|)
block|{
name|int
name|start
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|maxSize
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
name|end
init|=
name|start
operator|==
name|maxSize
condition|?
name|maxSize
else|:
name|start
operator|+
name|r
operator|.
name|nextInt
argument_list|(
name|maxSize
operator|-
name|start
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|a
index|[
name|i
index|]
operator|=
name|b
index|[
name|i
index|]
operator|=
name|r
operator|.
name|nextInt
argument_list|(
name|maxVal
argument_list|)
expr_stmt|;
block|}
name|PrimUtils
operator|.
name|sort
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|a
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|b
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|a
index|[
name|i
index|]
argument_list|,
name|b
index|[
name|end
operator|-
operator|(
name|i
operator|-
name|start
operator|+
literal|1
operator|)
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
