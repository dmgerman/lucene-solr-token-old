begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|DocumentAnalysisRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ContentStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ContentStreamBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_comment
comment|/**  * A test for {@link DocumentAnalysisRequestHandler}.  *  *  * @since solr 1.4  */
end_comment
begin_class
DECL|class|DocumentAnalysisRequestHandlerTest
specifier|public
class|class
name|DocumentAnalysisRequestHandlerTest
extends|extends
name|AnalysisRequestHandlerTestBase
block|{
DECL|field|handler
specifier|private
name|DocumentAnalysisRequestHandler
name|handler
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|handler
operator|=
operator|new
name|DocumentAnalysisRequestHandler
argument_list|()
expr_stmt|;
name|handler
operator|.
name|init
argument_list|(
operator|new
name|NamedList
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}    */
annotation|@
name|Test
DECL|method|testResolveAnalysisRequest
specifier|public
name|void
name|testResolveAnalysisRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|docsInput
init|=
literal|"<docs>"
operator|+
literal|"<doc>"
operator|+
literal|"<field name=\"id\">1</field>"
operator|+
literal|"<field name=\"whitetok\">The Whitetok</field>"
operator|+
literal|"<field name=\"text\">The Text</field>"
operator|+
literal|"</doc>"
operator|+
literal|"</docs>"
decl_stmt|;
specifier|final
name|ContentStream
name|cs
init|=
operator|new
name|ContentStreamBase
operator|.
name|StringStream
argument_list|(
name|docsInput
argument_list|)
decl_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"analysis.query"
argument_list|,
literal|"The Query String"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"analysis.showmatch"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|req
init|=
operator|new
name|SolrQueryRequestBase
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
argument_list|,
name|params
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|ContentStream
argument_list|>
name|getContentStreams
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|cs
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|DocumentAnalysisRequest
name|request
init|=
name|handler
operator|.
name|resolveAnalysisRequest
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|request
operator|.
name|isShowMatch
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|request
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The Query String"
argument_list|,
name|request
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SolrInputDocument
argument_list|>
name|documents
init|=
name|request
operator|.
name|getDocuments
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|documents
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|documents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SolrInputDocument
name|document
init|=
name|documents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SolrInputField
name|field
init|=
name|document
operator|.
name|getField
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|field
operator|.
name|getFirstValue
argument_list|()
argument_list|)
expr_stmt|;
name|field
operator|=
name|document
operator|.
name|getField
argument_list|(
literal|"whitetok"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The Whitetok"
argument_list|,
name|field
operator|.
name|getFirstValue
argument_list|()
argument_list|)
expr_stmt|;
name|field
operator|=
name|document
operator|.
name|getField
argument_list|(
literal|"text"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The Text"
argument_list|,
name|field
operator|.
name|getFirstValue
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** A binary-only ContentStream */
DECL|class|ByteStream
specifier|static
class|class
name|ByteStream
extends|extends
name|ContentStreamBase
block|{
DECL|field|bytes
specifier|private
specifier|final
name|byte
index|[]
name|bytes
decl_stmt|;
DECL|method|ByteStream
specifier|public
name|ByteStream
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|String
name|contentType
parameter_list|)
block|{
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
name|this
operator|.
name|contentType
operator|=
name|contentType
expr_stmt|;
name|name
operator|=
literal|null
expr_stmt|;
name|size
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|sourceInfo
operator|=
literal|"rawBytes"
expr_stmt|;
block|}
DECL|method|getStream
specifier|public
name|InputStream
name|getStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getReader
specifier|public
name|Reader
name|getReader
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"This is a byte stream, Readers are not supported."
argument_list|)
throw|;
block|}
block|}
comment|// This test should also test charset detection in UpdateRequestHandler,
comment|// but the DocumentAnalysisRequestHandler is simplier to use/check.
annotation|@
name|Test
DECL|method|testCharsetInDocument
specifier|public
name|void
name|testCharsetInDocument
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|xmlBytes
init|=
operator|(
literal|"<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n"
operator|+
literal|"<docs>\r\n"
operator|+
literal|"<doc>\r\n"
operator|+
literal|"<field name=\"id\">MÃ¼ller</field>\r\n"
operator|+
literal|"</doc>"
operator|+
literal|"</docs>"
operator|)
operator|.
name|getBytes
argument_list|(
literal|"ISO-8859-1"
argument_list|)
decl_stmt|;
comment|// we declare a content stream without charset:
specifier|final
name|ContentStream
name|cs
init|=
operator|new
name|ByteStream
argument_list|(
name|xmlBytes
argument_list|,
literal|"application/xml"
argument_list|)
decl_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|SolrQueryRequest
name|req
init|=
operator|new
name|SolrQueryRequestBase
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
argument_list|,
name|params
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|ContentStream
argument_list|>
name|getContentStreams
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|cs
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|DocumentAnalysisRequest
name|request
init|=
name|handler
operator|.
name|resolveAnalysisRequest
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|request
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|SolrInputDocument
argument_list|>
name|documents
init|=
name|request
operator|.
name|getDocuments
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|documents
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|documents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SolrInputDocument
name|doc
init|=
name|documents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"MÃ¼ller"
argument_list|,
name|doc
operator|.
name|getField
argument_list|(
literal|"id"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// This test should also test charset detection in UpdateRequestHandler,
comment|// but the DocumentAnalysisRequestHandler is simplier to use/check.
annotation|@
name|Test
DECL|method|testCharsetOutsideDocument
specifier|public
name|void
name|testCharsetOutsideDocument
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|xmlBytes
init|=
operator|(
literal|"<docs>\r\n"
operator|+
literal|"<doc>\r\n"
operator|+
literal|"<field name=\"id\">MÃ¼ller</field>\r\n"
operator|+
literal|"</doc>"
operator|+
literal|"</docs>"
operator|)
operator|.
name|getBytes
argument_list|(
literal|"ISO-8859-1"
argument_list|)
decl_stmt|;
comment|// we declare a content stream with charset:
specifier|final
name|ContentStream
name|cs
init|=
operator|new
name|ByteStream
argument_list|(
name|xmlBytes
argument_list|,
literal|"application/xml; charset=ISO-8859-1"
argument_list|)
decl_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|SolrQueryRequest
name|req
init|=
operator|new
name|SolrQueryRequestBase
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
argument_list|,
name|params
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|ContentStream
argument_list|>
name|getContentStreams
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|cs
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|DocumentAnalysisRequest
name|request
init|=
name|handler
operator|.
name|resolveAnalysisRequest
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|request
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|SolrInputDocument
argument_list|>
name|documents
init|=
name|request
operator|.
name|getDocuments
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|documents
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|documents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SolrInputDocument
name|doc
init|=
name|documents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"MÃ¼ller"
argument_list|,
name|doc
operator|.
name|getField
argument_list|(
literal|"id"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the {@link DocumentAnalysisRequestHandler#handleAnalysisRequest(org.apache.solr.client.solrj.request.DocumentAnalysisRequest,    * org.apache.solr.schema.IndexSchema)}    */
annotation|@
name|Test
DECL|method|testHandleAnalysisRequest
specifier|public
name|void
name|testHandleAnalysisRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|document
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|document
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|document
operator|.
name|addField
argument_list|(
literal|"whitetok"
argument_list|,
literal|"Jumping Jack"
argument_list|)
expr_stmt|;
name|document
operator|.
name|addField
argument_list|(
literal|"text"
argument_list|,
literal|"The Fox Jumped Over The Dogs"
argument_list|)
expr_stmt|;
name|DocumentAnalysisRequest
name|request
init|=
operator|new
name|DocumentAnalysisRequest
argument_list|()
operator|.
name|setQuery
argument_list|(
literal|"JUMPING"
argument_list|)
operator|.
name|setShowMatch
argument_list|(
literal|true
argument_list|)
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|result
init|=
name|handler
operator|.
name|handleAnalysisRequest
argument_list|(
name|request
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSchema
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"result is null and it shouldn't be"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
name|documentResult
init|=
operator|(
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
operator|)
name|result
operator|.
name|get
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"An analysis for document with key '1' should be returned"
argument_list|,
name|documentResult
argument_list|)
expr_stmt|;
comment|// the id field
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|idResult
init|=
name|documentResult
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"an analysis for the 'id' field should be returned"
argument_list|,
name|idResult
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|queryResult
decl_stmt|;
name|List
argument_list|<
name|NamedList
argument_list|>
name|tokenList
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|indexResult
decl_stmt|;
name|NamedList
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|>
argument_list|>
name|valueResult
decl_stmt|;
comment|/*** Much of this test seems invalid for a numeric "id" field     NamedList<Object> queryResult = idResult.get("query");     assertEquals("Only the default analyzer should be applied", 1, queryResult.size());     String name = queryResult.getName(0);     assertTrue("Only the default analyzer should be applied", name.matches("org.apache.solr.schema.FieldType\\$DefaultAnalyzer.*"));     List<NamedList> tokenList = (List<NamedList>) queryResult.getVal(0);     assertEquals("Query has only one token", 1, tokenList.size());     assertToken(tokenList.get(0), new TokenInfo("JUMPING", null, "word", 0, 7, 1, "1", null, false));     NamedList<Object> indexResult = idResult.get("index");      assertEquals("The id field has only a single value", 1, indexResult.size());     NamedList<List<NamedList>> valueResult = (NamedList<List<NamedList>>) indexResult.get("1");     assertEquals("Only the default analyzer should be applied", 1, valueResult.size());     name = queryResult.getName(0);     assertTrue("Only the default analyzer should be applied", name.matches("org.apache.solr.schema.FieldType\\$DefaultAnalyzer.*"));     tokenList = valueResult.getVal(0);     assertEquals("The 'id' field value has only one token", 1, tokenList.size());     assertToken(tokenList.get(0), new TokenInfo("1", null, "word", 0, 1, 1, "1", null, false));     ***/
comment|// the name field
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|whitetokResult
init|=
name|documentResult
operator|.
name|get
argument_list|(
literal|"whitetok"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"an analysis for the 'whitetok' field should be returned"
argument_list|,
name|whitetokResult
argument_list|)
expr_stmt|;
name|queryResult
operator|=
name|whitetokResult
operator|.
name|get
argument_list|(
literal|"query"
argument_list|)
expr_stmt|;
name|tokenList
operator|=
operator|(
name|List
argument_list|<
name|NamedList
argument_list|>
operator|)
name|queryResult
operator|.
name|get
argument_list|(
literal|"org.apache.lucene.analysis.core.WhitespaceTokenizer"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expecting the 'WhitespaceTokenizer' to be applied on the query for the 'whitetok' field"
argument_list|,
name|tokenList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Query has only one token"
argument_list|,
literal|1
argument_list|,
name|tokenList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"JUMPING"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|,
literal|"1"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|whitetokResult
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The 'whitetok' field has only a single value"
argument_list|,
literal|1
argument_list|,
name|indexResult
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|valueResult
operator|=
operator|(
name|NamedList
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|>
argument_list|>
operator|)
name|indexResult
operator|.
name|get
argument_list|(
literal|"Jumping Jack"
argument_list|)
expr_stmt|;
name|tokenList
operator|=
name|valueResult
operator|.
name|getVal
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting 2 tokens to be present"
argument_list|,
literal|2
argument_list|,
name|tokenList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"Jumping"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|,
literal|"1"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"Jack"
argument_list|,
literal|null
argument_list|,
literal|"word"
argument_list|,
literal|8
argument_list|,
literal|12
argument_list|,
literal|2
argument_list|,
literal|"2"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// the text field
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|textResult
init|=
name|documentResult
operator|.
name|get
argument_list|(
literal|"text"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"an analysis for the 'text' field should be returned"
argument_list|,
name|textResult
argument_list|)
expr_stmt|;
name|queryResult
operator|=
name|textResult
operator|.
name|get
argument_list|(
literal|"query"
argument_list|)
expr_stmt|;
name|tokenList
operator|=
operator|(
name|List
argument_list|<
name|NamedList
argument_list|>
operator|)
name|queryResult
operator|.
name|get
argument_list|(
literal|"org.apache.lucene.analysis.standard.StandardTokenizer"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expecting the 'StandardTokenizer' to be applied on the query for the 'text' field"
argument_list|,
name|tokenList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Query has only one token"
argument_list|,
literal|1
argument_list|,
name|tokenList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"JUMPING"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|,
literal|"1"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|tokenList
operator|=
operator|(
name|List
argument_list|<
name|NamedList
argument_list|>
operator|)
name|queryResult
operator|.
name|get
argument_list|(
literal|"org.apache.lucene.analysis.standard.StandardFilter"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expecting the 'StandardFilter' to be applied on the query for the 'text' field"
argument_list|,
name|tokenList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Query has only one token"
argument_list|,
literal|1
argument_list|,
name|tokenList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"JUMPING"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|,
literal|"1/1"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|tokenList
operator|=
operator|(
name|List
argument_list|<
name|NamedList
argument_list|>
operator|)
name|queryResult
operator|.
name|get
argument_list|(
literal|"org.apache.lucene.analysis.core.LowerCaseFilter"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expecting the 'LowerCaseFilter' to be applied on the query for the 'text' field"
argument_list|,
name|tokenList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Query has only one token"
argument_list|,
literal|1
argument_list|,
name|tokenList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"jumping"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|,
literal|"1/1/1"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|tokenList
operator|=
operator|(
name|List
argument_list|<
name|NamedList
argument_list|>
operator|)
name|queryResult
operator|.
name|get
argument_list|(
literal|"org.apache.lucene.analysis.core.StopFilter"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expecting the 'StopFilter' to be applied on the query for the 'text' field"
argument_list|,
name|tokenList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Query has only one token"
argument_list|,
literal|1
argument_list|,
name|tokenList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"jumping"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|,
literal|"1/1/1/1"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|tokenList
operator|=
operator|(
name|List
argument_list|<
name|NamedList
argument_list|>
operator|)
name|queryResult
operator|.
name|get
argument_list|(
literal|"org.apache.lucene.analysis.en.PorterStemFilter"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expecting the 'PorterStemFilter' to be applied on the query for the 'text' field"
argument_list|,
name|tokenList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Query has only one token"
argument_list|,
literal|1
argument_list|,
name|tokenList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"jump"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|,
literal|"1/1/1/1/1"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|indexResult
operator|=
name|textResult
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The 'text' field has only a single value"
argument_list|,
literal|1
argument_list|,
name|indexResult
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|valueResult
operator|=
operator|(
name|NamedList
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|>
argument_list|>
operator|)
name|indexResult
operator|.
name|get
argument_list|(
literal|"The Fox Jumped Over The Dogs"
argument_list|)
expr_stmt|;
name|tokenList
operator|=
name|valueResult
operator|.
name|get
argument_list|(
literal|"org.apache.lucene.analysis.standard.StandardTokenizer"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expecting the 'StandardTokenizer' to be applied on the index for the 'text' field"
argument_list|,
name|tokenList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting 6 tokens"
argument_list|,
literal|6
argument_list|,
name|tokenList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"The"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|"1"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"Fox"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|4
argument_list|,
literal|7
argument_list|,
literal|2
argument_list|,
literal|"2"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"Jumped"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|8
argument_list|,
literal|14
argument_list|,
literal|3
argument_list|,
literal|"3"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"Over"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|15
argument_list|,
literal|19
argument_list|,
literal|4
argument_list|,
literal|"4"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"The"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|20
argument_list|,
literal|23
argument_list|,
literal|5
argument_list|,
literal|"5"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"Dogs"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|24
argument_list|,
literal|28
argument_list|,
literal|6
argument_list|,
literal|"6"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|tokenList
operator|=
name|valueResult
operator|.
name|get
argument_list|(
literal|"org.apache.lucene.analysis.standard.StandardFilter"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expecting the 'StandardFilter' to be applied on the index for the 'text' field"
argument_list|,
name|tokenList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting 6 tokens"
argument_list|,
literal|6
argument_list|,
name|tokenList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"The"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|"1/1"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"Fox"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|4
argument_list|,
literal|7
argument_list|,
literal|2
argument_list|,
literal|"2/2"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"Jumped"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|8
argument_list|,
literal|14
argument_list|,
literal|3
argument_list|,
literal|"3/3"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"Over"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|15
argument_list|,
literal|19
argument_list|,
literal|4
argument_list|,
literal|"4/4"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"The"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|20
argument_list|,
literal|23
argument_list|,
literal|5
argument_list|,
literal|"5/5"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"Dogs"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|24
argument_list|,
literal|28
argument_list|,
literal|6
argument_list|,
literal|"6/6"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|tokenList
operator|=
name|valueResult
operator|.
name|get
argument_list|(
literal|"org.apache.lucene.analysis.core.LowerCaseFilter"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expecting the 'LowerCaseFilter' to be applied on the index for the 'text' field"
argument_list|,
name|tokenList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting 6 tokens"
argument_list|,
literal|6
argument_list|,
name|tokenList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"the"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|"1/1/1"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"fox"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|4
argument_list|,
literal|7
argument_list|,
literal|2
argument_list|,
literal|"2/2/2"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"jumped"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|8
argument_list|,
literal|14
argument_list|,
literal|3
argument_list|,
literal|"3/3/3"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"over"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|15
argument_list|,
literal|19
argument_list|,
literal|4
argument_list|,
literal|"4/4/4"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"the"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|20
argument_list|,
literal|23
argument_list|,
literal|5
argument_list|,
literal|"5/5/5"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"dogs"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|24
argument_list|,
literal|28
argument_list|,
literal|6
argument_list|,
literal|"6/6/6"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|tokenList
operator|=
name|valueResult
operator|.
name|get
argument_list|(
literal|"org.apache.lucene.analysis.core.StopFilter"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expecting the 'StopFilter' to be applied on the index for the 'text' field"
argument_list|,
name|tokenList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting 4 tokens after stop word removal"
argument_list|,
literal|4
argument_list|,
name|tokenList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"fox"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|4
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|,
literal|"2/2/2/1"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"jumped"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|8
argument_list|,
literal|14
argument_list|,
literal|2
argument_list|,
literal|"3/3/3/2"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"over"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|15
argument_list|,
literal|19
argument_list|,
literal|3
argument_list|,
literal|"4/4/4/3"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"dogs"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|24
argument_list|,
literal|28
argument_list|,
literal|4
argument_list|,
literal|"6/6/6/4"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|tokenList
operator|=
name|valueResult
operator|.
name|get
argument_list|(
literal|"org.apache.lucene.analysis.en.PorterStemFilter"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expecting the 'PorterStemFilter' to be applied on the index for the 'text' field"
argument_list|,
name|tokenList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting 4 tokens"
argument_list|,
literal|4
argument_list|,
name|tokenList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"fox"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|4
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|,
literal|"2/2/2/1/1"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"jump"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|8
argument_list|,
literal|14
argument_list|,
literal|2
argument_list|,
literal|"3/3/3/2/2"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"over"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|15
argument_list|,
literal|19
argument_list|,
literal|3
argument_list|,
literal|"4/4/4/3/3"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tokenList
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|new
name|TokenInfo
argument_list|(
literal|"dog"
argument_list|,
literal|null
argument_list|,
literal|"<ALPHANUM>"
argument_list|,
literal|24
argument_list|,
literal|28
argument_list|,
literal|4
argument_list|,
literal|"6/6/6/4/4"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
