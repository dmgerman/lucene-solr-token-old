begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|AbstractSolrTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|DOMUtilTest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import
begin_comment
comment|/**  * TestCase  for PluginInfo.  * Extends DOMUtilTest because PluginInfo heavily depends on DOMUtil   * and the convinient {@link #getNode(String, String)} method.  */
end_comment
begin_class
DECL|class|PluginInfoTest
specifier|public
class|class
name|PluginInfoTest
extends|extends
name|DOMUtilTest
block|{
DECL|field|configWithNoChildren
specifier|private
specifier|final
specifier|static
name|String
name|configWithNoChildren
init|=
literal|""
operator|+
literal|"<plugin name=\"aplug\">"
operator|+
literal|"<str name=\"stringer\">aString</str>"
operator|+
literal|"<int name=\"inter\">1</int>"
operator|+
literal|"<bool name=\"booler\">true</bool>"
operator|+
literal|"<float name=\"floater\">1.1f</float>"
operator|+
literal|"<double name=\"doubler\">2.2d</double>"
operator|+
literal|"<long name=\"longer\">2</long>"
operator|+
literal|"<lst name=\"lister\">"
operator|+
literal|"</lst>"
operator|+
literal|"<arr name=\"arrer\">"
operator|+
literal|"<str name=\"stringer\">aString</str>"
operator|+
literal|"</arr>"
operator|+
literal|"</plugin>"
decl_stmt|;
DECL|field|configWith2Children
specifier|private
specifier|final
specifier|static
name|String
name|configWith2Children
init|=
literal|""
operator|+
literal|"<plugin name=\"aplug\">"
operator|+
literal|"<int name=\"inter\">1</int>"
operator|+
literal|"<child name=\"child1\"><int name=\"index\">0</int></child>"
operator|+
literal|"<child name=\"child2\"><int name=\"index\">1</int></child>"
operator|+
literal|"<float name=\"floater\">1.1f</float>"
operator|+
literal|"<double name=\"doubler\">2.2d</double>"
operator|+
literal|"<long name=\"longer\">2</long>"
operator|+
literal|"<lst name=\"lister\">"
operator|+
literal|"</lst>"
operator|+
literal|"<arr name=\"arrer\">"
operator|+
literal|"<str name=\"stringer\">aString</str>"
operator|+
literal|"</arr>"
operator|+
literal|"</plugin>"
decl_stmt|;
comment|// This is in fact a DOMUtil test, but it is here for completeness
annotation|@
name|Test
DECL|method|testNameRequired
specifier|public
name|void
name|testNameRequired
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|nodeWithNoName
init|=
name|getNode
argument_list|(
literal|"<plugin></plugin>"
argument_list|,
literal|"plugin"
argument_list|)
decl_stmt|;
name|AbstractSolrTestCase
operator|.
name|ignoreException
argument_list|(
literal|"missing mandatory attribute"
argument_list|)
expr_stmt|;
try|try
block|{
name|PluginInfo
name|pi
init|=
operator|new
name|PluginInfo
argument_list|(
name|nodeWithNoName
argument_list|,
literal|"Node with No name"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Exception should have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"missing mandatory attribute"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|AbstractSolrTestCase
operator|.
name|resetExceptionIgnores
argument_list|()
expr_stmt|;
block|}
name|Node
name|nodeWithAName
init|=
name|getNode
argument_list|(
literal|"<plugin name=\"myName\" />"
argument_list|,
literal|"plugin"
argument_list|)
decl_stmt|;
name|PluginInfo
name|pi2
init|=
operator|new
name|PluginInfo
argument_list|(
name|nodeWithAName
argument_list|,
literal|"Node with a Name"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pi2
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"myName"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClassRequired
specifier|public
name|void
name|testClassRequired
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|nodeWithNoClass
init|=
name|getNode
argument_list|(
literal|"<plugin></plugin>"
argument_list|,
literal|"plugin"
argument_list|)
decl_stmt|;
name|AbstractSolrTestCase
operator|.
name|ignoreException
argument_list|(
literal|"missing mandatory attribute"
argument_list|)
expr_stmt|;
try|try
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|PluginInfo
name|pi
init|=
operator|new
name|PluginInfo
argument_list|(
name|nodeWithNoClass
argument_list|,
literal|"Node with No Class"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Exception should have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"missing mandatory attribute"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|AbstractSolrTestCase
operator|.
name|resetExceptionIgnores
argument_list|()
expr_stmt|;
block|}
name|Node
name|nodeWithAClass
init|=
name|getNode
argument_list|(
literal|"<plugin class=\"myName\" />"
argument_list|,
literal|"plugin"
argument_list|)
decl_stmt|;
name|PluginInfo
name|pi2
init|=
operator|new
name|PluginInfo
argument_list|(
name|nodeWithAClass
argument_list|,
literal|"Node with a Class"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pi2
operator|.
name|className
operator|.
name|equals
argument_list|(
literal|"myName"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIsEnabled
specifier|public
name|void
name|testIsEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|node
init|=
name|getNode
argument_list|(
literal|"<plugin enable=\"true\" />"
argument_list|,
literal|"plugin"
argument_list|)
decl_stmt|;
name|PluginInfo
name|pi
init|=
operator|new
name|PluginInfo
argument_list|(
name|node
argument_list|,
literal|"enabled"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pi
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|=
name|getNode
argument_list|(
literal|"<plugin enable=\"false\" />"
argument_list|,
literal|"plugin"
argument_list|)
expr_stmt|;
name|pi
operator|=
operator|new
name|PluginInfo
argument_list|(
name|node
argument_list|,
literal|"not enabled"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pi
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIsDefault
specifier|public
name|void
name|testIsDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|node
init|=
name|getNode
argument_list|(
literal|"<plugin default=\"true\" />"
argument_list|,
literal|"plugin"
argument_list|)
decl_stmt|;
name|PluginInfo
name|pi
init|=
operator|new
name|PluginInfo
argument_list|(
name|node
argument_list|,
literal|"default"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pi
operator|.
name|isDefault
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|=
name|getNode
argument_list|(
literal|"<plugin default=\"false\" />"
argument_list|,
literal|"plugin"
argument_list|)
expr_stmt|;
name|pi
operator|=
operator|new
name|PluginInfo
argument_list|(
name|node
argument_list|,
literal|"not default"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pi
operator|.
name|isDefault
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoChildren
specifier|public
name|void
name|testNoChildren
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|node
init|=
name|getNode
argument_list|(
name|configWithNoChildren
argument_list|,
literal|"/plugin"
argument_list|)
decl_stmt|;
name|PluginInfo
name|pi
init|=
operator|new
name|PluginInfo
argument_list|(
name|node
argument_list|,
literal|"from static"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pi
operator|.
name|children
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHasChildren
specifier|public
name|void
name|testHasChildren
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|node
init|=
name|getNode
argument_list|(
name|configWith2Children
argument_list|,
literal|"plugin"
argument_list|)
decl_stmt|;
name|PluginInfo
name|pi
init|=
operator|new
name|PluginInfo
argument_list|(
name|node
argument_list|,
literal|"node with 2 Children"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pi
operator|.
name|children
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChild
specifier|public
name|void
name|testChild
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|node
init|=
name|getNode
argument_list|(
name|configWith2Children
argument_list|,
literal|"plugin"
argument_list|)
decl_stmt|;
name|PluginInfo
name|pi
init|=
operator|new
name|PluginInfo
argument_list|(
name|node
argument_list|,
literal|"with children"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|PluginInfo
name|childInfo
init|=
name|pi
operator|.
name|getChild
argument_list|(
literal|"child"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|childInfo
argument_list|)
expr_stmt|;
name|PluginInfo
name|notExistent
init|=
name|pi
operator|.
name|getChild
argument_list|(
literal|"doesnotExist"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|notExistent
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|childInfo
operator|instanceof
name|PluginInfo
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|Integer
operator|)
name|childInfo
operator|.
name|initArgs
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Node
name|node2
init|=
name|getNode
argument_list|(
name|configWithNoChildren
argument_list|,
literal|"plugin"
argument_list|)
decl_stmt|;
name|PluginInfo
name|pi2
init|=
operator|new
name|PluginInfo
argument_list|(
name|node2
argument_list|,
literal|"with No Children"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|PluginInfo
name|noChild
init|=
name|pi2
operator|.
name|getChild
argument_list|(
literal|"long"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|noChild
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChildren
specifier|public
name|void
name|testChildren
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|node
init|=
name|getNode
argument_list|(
name|configWith2Children
argument_list|,
literal|"plugin"
argument_list|)
decl_stmt|;
name|PluginInfo
name|pi
init|=
operator|new
name|PluginInfo
argument_list|(
name|node
argument_list|,
literal|"with children"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PluginInfo
argument_list|>
name|children
init|=
name|pi
operator|.
name|getChildren
argument_list|(
literal|"child"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|children
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|PluginInfo
name|childInfo
range|:
name|children
control|)
block|{
name|assertNotNull
argument_list|(
name|childInfo
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|childInfo
operator|instanceof
name|PluginInfo
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInitArgsCount
specifier|public
name|void
name|testInitArgsCount
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|node
init|=
name|getNode
argument_list|(
name|configWithNoChildren
argument_list|,
literal|"plugin"
argument_list|)
decl_stmt|;
name|PluginInfo
name|pi
init|=
operator|new
name|PluginInfo
argument_list|(
name|node
argument_list|,
literal|"from static"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pi
operator|.
name|initArgs
operator|.
name|size
argument_list|()
operator|==
name|node
operator|.
name|getChildNodes
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Override
DECL|method|testAddToNamedListPrimitiveTypes
specifier|public
name|void
name|testAddToNamedListPrimitiveTypes
parameter_list|()
throws|throws
name|Exception
block|{
comment|// do nothing here
block|}
block|}
end_class
end_unit
