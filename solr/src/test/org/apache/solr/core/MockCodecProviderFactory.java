begin_unit
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|CodecProvider
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|pulsing
operator|.
name|PulsingCodec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|standard
operator|.
name|StandardCodec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_comment
comment|/**  * CodecProviderFactory for testing, it inits a CP with Standard and Pulsing,  * and also adds any codecs specified by classname in solrconfig.  */
end_comment
begin_class
DECL|class|MockCodecProviderFactory
specifier|public
class|class
name|MockCodecProviderFactory
extends|extends
name|CodecProviderFactory
block|{
DECL|field|defaultCodec
specifier|private
name|String
name|defaultCodec
decl_stmt|;
DECL|field|codecs
specifier|private
name|NamedList
name|codecs
decl_stmt|;
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|defaultCodec
operator|=
operator|(
name|String
operator|)
name|args
operator|.
name|get
argument_list|(
literal|"defaultCodec"
argument_list|)
expr_stmt|;
name|codecs
operator|=
operator|(
name|NamedList
operator|)
name|args
operator|.
name|get
argument_list|(
literal|"codecs"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|create
specifier|public
name|CodecProvider
name|create
parameter_list|()
block|{
name|CodecProvider
name|cp
init|=
operator|new
name|CodecProvider
argument_list|()
decl_stmt|;
name|cp
operator|.
name|register
argument_list|(
operator|new
name|StandardCodec
argument_list|()
argument_list|)
expr_stmt|;
name|cp
operator|.
name|register
argument_list|(
operator|new
name|PulsingCodec
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|codecs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|codec
range|:
name|codecs
operator|.
name|getAll
argument_list|(
literal|"name"
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|cp
operator|.
name|isCodecRegistered
argument_list|(
operator|(
name|String
operator|)
name|codec
argument_list|)
condition|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Codec
argument_list|>
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
operator|(
name|String
operator|)
name|codec
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|Codec
operator|.
name|class
argument_list|)
decl_stmt|;
name|cp
operator|.
name|register
argument_list|(
name|clazz
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|defaultCodec
operator|!=
literal|null
condition|)
block|{
name|cp
operator|.
name|setDefaultFieldCodec
argument_list|(
name|defaultCodec
argument_list|)
expr_stmt|;
block|}
return|return
name|cp
return|;
block|}
block|}
end_class
end_unit
