begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|EventParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import
begin_class
DECL|class|TestQuerySenderListener
specifier|public
class|class
name|TestQuerySenderListener
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-querysender.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRequestHandlerRegistry
specifier|public
name|void
name|testRequestHandlerRegistry
parameter_list|()
block|{
comment|// property values defined in build.xml
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|core
operator|.
name|firstSearcherListeners
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|core
operator|.
name|newSearcherListeners
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSearcherEvents
specifier|public
name|void
name|testSearcherEvents
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|SolrEventListener
name|newSearcherListener
init|=
name|core
operator|.
name|newSearcherListeners
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Not an instance of QuerySenderListener"
argument_list|,
name|newSearcherListener
operator|instanceof
name|QuerySenderListener
argument_list|)
expr_stmt|;
name|QuerySenderListener
name|qsl
init|=
operator|(
name|QuerySenderListener
operator|)
name|newSearcherListener
decl_stmt|;
name|SolrIndexSearcher
name|currentSearcher
init|=
name|core
operator|.
name|getSearcher
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|qsl
operator|.
name|newSearcher
argument_list|(
name|currentSearcher
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//test new Searcher
name|MockQuerySenderListenerReqHandler
name|mock
init|=
operator|(
name|MockQuerySenderListenerReqHandler
operator|)
name|core
operator|.
name|getRequestHandler
argument_list|(
literal|"mock"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Mock is null"
argument_list|,
name|mock
argument_list|)
expr_stmt|;
name|String
name|evt
init|=
name|mock
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|EventParams
operator|.
name|EVENT
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Event is null"
argument_list|,
name|evt
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|evt
operator|+
literal|" is not equal to "
operator|+
name|EventParams
operator|.
name|FIRST_SEARCHER
argument_list|,
name|evt
operator|.
name|equals
argument_list|(
name|EventParams
operator|.
name|FIRST_SEARCHER
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
name|Directory
name|dir
init|=
name|currentSearcher
operator|.
name|getReader
argument_list|()
operator|.
name|directory
argument_list|()
decl_stmt|;
name|SolrIndexSearcher
name|newSearcher
init|=
operator|new
name|SolrIndexSearcher
argument_list|(
name|core
argument_list|,
name|core
operator|.
name|getSchema
argument_list|()
argument_list|,
literal|"testQuerySenderListener"
argument_list|,
name|dir
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|qsl
operator|.
name|newSearcher
argument_list|(
name|newSearcher
argument_list|,
name|currentSearcher
argument_list|)
expr_stmt|;
name|evt
operator|=
name|mock
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|EventParams
operator|.
name|EVENT
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Event is null"
argument_list|,
name|evt
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|evt
operator|+
literal|" is not equal to "
operator|+
name|EventParams
operator|.
name|NEW_SEARCHER
argument_list|,
name|evt
operator|.
name|equals
argument_list|(
name|EventParams
operator|.
name|NEW_SEARCHER
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
