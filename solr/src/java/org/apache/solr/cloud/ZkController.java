begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|CloudState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|OnReconnect
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZooKeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * Handle ZooKeeper interactions.  *   * notes: loads everything on init, creates what's not there - further updates  * are prompted with Watches.  *   * TODO: exceptions during shutdown on attempts to update cloud state  *   */
end_comment
begin_class
DECL|class|ZkController
specifier|public
specifier|final
class|class
name|ZkController
block|{
DECL|field|log
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ZkController
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NEWL
specifier|static
specifier|final
name|String
name|NEWL
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
DECL|field|URL_POST
specifier|private
specifier|final
specifier|static
name|Pattern
name|URL_POST
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"https?://(.*)"
argument_list|)
decl_stmt|;
DECL|field|URL_PREFIX
specifier|private
specifier|final
specifier|static
name|Pattern
name|URL_PREFIX
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(https?://).*"
argument_list|)
decl_stmt|;
comment|// package private for tests
DECL|field|CONFIGS_ZKNODE
specifier|static
specifier|final
name|String
name|CONFIGS_ZKNODE
init|=
literal|"/configs"
decl_stmt|;
DECL|field|COLLECTION_PARAM_PREFIX
specifier|public
specifier|final
specifier|static
name|String
name|COLLECTION_PARAM_PREFIX
init|=
literal|"collection."
decl_stmt|;
DECL|field|CONFIGNAME_PROP
specifier|public
specifier|final
specifier|static
name|String
name|CONFIGNAME_PROP
init|=
literal|"configName"
decl_stmt|;
DECL|field|zkClient
specifier|private
name|SolrZkClient
name|zkClient
decl_stmt|;
DECL|field|zkStateReader
specifier|private
name|ZkStateReader
name|zkStateReader
decl_stmt|;
DECL|field|zkServerAddress
specifier|private
name|String
name|zkServerAddress
decl_stmt|;
DECL|field|localHostPort
specifier|private
name|String
name|localHostPort
decl_stmt|;
DECL|field|localHostContext
specifier|private
name|String
name|localHostContext
decl_stmt|;
DECL|field|localHostName
specifier|private
name|String
name|localHostName
decl_stmt|;
DECL|field|localHost
specifier|private
name|String
name|localHost
decl_stmt|;
DECL|field|hostName
specifier|private
name|String
name|hostName
decl_stmt|;
comment|/**    * @param zkServerAddress ZooKeeper server host address    * @param zkClientTimeout    * @param zkClientConnectTimeout    * @param localHost    * @param locaHostPort    * @param localHostContext    * @throws InterruptedException    * @throws TimeoutException    * @throws IOException    */
DECL|method|ZkController
specifier|public
name|ZkController
parameter_list|(
name|String
name|zkServerAddress
parameter_list|,
name|int
name|zkClientTimeout
parameter_list|,
name|int
name|zkClientConnectTimeout
parameter_list|,
name|String
name|localHost
parameter_list|,
name|String
name|locaHostPort
parameter_list|,
name|String
name|localHostContext
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
throws|,
name|IOException
block|{
name|this
operator|.
name|zkServerAddress
operator|=
name|zkServerAddress
expr_stmt|;
name|this
operator|.
name|localHostPort
operator|=
name|locaHostPort
expr_stmt|;
name|this
operator|.
name|localHostContext
operator|=
name|localHostContext
expr_stmt|;
name|this
operator|.
name|localHost
operator|=
name|localHost
expr_stmt|;
name|zkClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|zkServerAddress
argument_list|,
name|zkClientTimeout
argument_list|,
name|zkClientConnectTimeout
argument_list|,
comment|// on reconnect, reload cloud info
operator|new
name|OnReconnect
argument_list|()
block|{
specifier|public
name|void
name|command
parameter_list|()
block|{
try|try
block|{
name|zkStateReader
operator|.
name|makeCollectionsNodeWatches
argument_list|()
expr_stmt|;
name|zkStateReader
operator|.
name|makeShardsWatches
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|createEphemeralLiveNode
argument_list|()
expr_stmt|;
name|zkStateReader
operator|.
name|updateCloudState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|zkStateReader
operator|=
operator|new
name|ZkStateReader
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
comment|/**    * @param shardId    * @param collection    * @throws IOException    * @throws InterruptedException     * @throws KeeperException     */
DECL|method|addZkShardsNode
specifier|private
name|void
name|addZkShardsNode
parameter_list|(
name|String
name|shardId
parameter_list|,
name|String
name|collection
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|KeeperException
block|{
name|String
name|shardsZkPath
init|=
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|collection
operator|+
name|ZkStateReader
operator|.
name|SHARDS_ZKNODE
operator|+
literal|"/"
operator|+
name|shardId
decl_stmt|;
try|try
block|{
comment|// shards node
if|if
condition|(
operator|!
name|zkClient
operator|.
name|exists
argument_list|(
name|shardsZkPath
argument_list|)
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"creating zk shards node:"
operator|+
name|shardsZkPath
argument_list|)
expr_stmt|;
block|}
comment|// makes shards zkNode if it doesn't exist
name|zkClient
operator|.
name|makePath
argument_list|(
name|shardsZkPath
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// TODO: consider how these notifications are being done
comment|// ping that there is a new shardId
name|zkClient
operator|.
name|setData
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
comment|// its okay if another beats us creating the node
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|!=
name|KeeperException
operator|.
name|Code
operator|.
name|NODEEXISTS
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
comment|/**    * Closes the underlying ZooKeeper client.    */
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|zkClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * @param collection    * @param fileName    * @return    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|configFileExists
specifier|public
name|boolean
name|configFileExists
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|Stat
name|stat
init|=
name|zkClient
operator|.
name|exists
argument_list|(
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|collection
operator|+
literal|"/"
operator|+
name|fileName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|stat
operator|!=
literal|null
return|;
block|}
comment|/**    * @return information about the cluster from ZooKeeper    */
DECL|method|getCloudState
specifier|public
name|CloudState
name|getCloudState
parameter_list|()
block|{
return|return
name|zkStateReader
operator|.
name|getCloudState
argument_list|()
return|;
block|}
comment|/**    * @param zkConfigName    * @param fileName    * @return    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|getConfigFileData
specifier|public
name|byte
index|[]
name|getConfigFileData
parameter_list|(
name|String
name|zkConfigName
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|zkPath
init|=
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|zkConfigName
operator|+
literal|"/"
operator|+
name|fileName
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|zkClient
operator|.
name|getData
argument_list|(
name|zkPath
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Config file contains no data:"
operator|+
name|zkPath
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Config file contains no data:"
operator|+
name|zkPath
argument_list|)
throw|;
block|}
return|return
name|bytes
return|;
block|}
comment|// TODO: consider how this is done
DECL|method|getHostAddress
specifier|private
name|String
name|getHostAddress
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|localHost
operator|==
literal|null
condition|)
block|{
name|localHost
operator|=
literal|"http://"
operator|+
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Matcher
name|m
init|=
name|URL_PREFIX
operator|.
name|matcher
argument_list|(
name|localHost
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|prefix
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|localHost
operator|=
name|prefix
operator|+
name|localHost
expr_stmt|;
block|}
else|else
block|{
name|localHost
operator|=
literal|"http://"
operator|+
name|localHost
expr_stmt|;
block|}
block|}
return|return
name|localHost
return|;
block|}
DECL|method|getHostName
specifier|public
name|String
name|getHostName
parameter_list|()
block|{
return|return
name|hostName
return|;
block|}
DECL|method|getZkClient
specifier|public
name|SolrZkClient
name|getZkClient
parameter_list|()
block|{
return|return
name|zkClient
return|;
block|}
comment|/**    * @return    */
DECL|method|getZkServerAddress
specifier|public
name|String
name|getZkServerAddress
parameter_list|()
block|{
return|return
name|zkServerAddress
return|;
block|}
DECL|method|init
specifier|private
name|void
name|init
parameter_list|()
block|{
try|try
block|{
name|localHostName
operator|=
name|getHostAddress
argument_list|()
expr_stmt|;
name|Matcher
name|m
init|=
name|URL_POST
operator|.
name|matcher
argument_list|(
name|localHostName
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|hostName
operator|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unrecognized host:"
operator|+
name|localHostName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unrecognized host:"
operator|+
name|localHostName
argument_list|)
throw|;
block|}
comment|// makes nodes zkNode
try|try
block|{
name|zkClient
operator|.
name|makePath
argument_list|(
name|ZkStateReader
operator|.
name|LIVE_NODES_ZKNODE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
comment|// its okay if another beats us creating the node
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|!=
name|KeeperException
operator|.
name|Code
operator|.
name|NODEEXISTS
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|createEphemeralLiveNode
argument_list|()
expr_stmt|;
name|setUpCollectionsNode
argument_list|()
expr_stmt|;
name|zkStateReader
operator|.
name|makeCollectionsNodeWatches
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Can't create ZooKeeperController"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createEphemeralLiveNode
specifier|private
name|void
name|createEphemeralLiveNode
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|nodeName
init|=
name|getNodeName
argument_list|()
decl_stmt|;
name|String
name|nodePath
init|=
name|ZkStateReader
operator|.
name|LIVE_NODES_ZKNODE
operator|+
literal|"/"
operator|+
name|nodeName
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Register node as live in ZooKeeper:"
operator|+
name|nodePath
argument_list|)
expr_stmt|;
name|Watcher
name|liveNodeWatcher
init|=
operator|new
name|Watcher
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Updating live nodes:"
operator|+
name|zkClient
argument_list|)
expr_stmt|;
try|try
block|{
name|zkStateReader
operator|.
name|updateLiveNodes
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
comment|// re-make watch
name|String
name|path
init|=
name|event
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
comment|// on shutdown, it appears this can trigger with a null path
name|log
operator|.
name|warn
argument_list|(
literal|"ZooKeeper watch triggered, but Solr cannot talk to ZK"
argument_list|)
expr_stmt|;
return|return;
block|}
name|zkClient
operator|.
name|getChildren
argument_list|(
name|event
operator|.
name|getPath
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|SESSIONEXPIRED
operator|||
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|CONNECTIONLOSS
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"ZooKeeper watch triggered, but Solr cannot talk to ZK"
argument_list|)
expr_stmt|;
return|return;
block|}
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
try|try
block|{
name|boolean
name|nodeDeleted
init|=
literal|true
decl_stmt|;
try|try
block|{
comment|// we attempt a delete in the case of a quick server bounce -
comment|// if there was not a graceful shutdown, the node may exist
comment|// until expiration timeout - so a node won't be created here because
comment|// it exists, but eventually the node will be removed. So delete
comment|// in case it exists and create a new node.
name|zkClient
operator|.
name|delete
argument_list|(
name|nodePath
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
comment|// fine if there is nothing to delete
comment|// TODO: annoying that ZK logs a warning on us
name|nodeDeleted
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|nodeDeleted
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Found a previous node that still exists while trying to register a new live node "
operator|+
name|nodePath
operator|+
literal|" - removing existing node to create another."
argument_list|)
expr_stmt|;
block|}
name|zkClient
operator|.
name|makePath
argument_list|(
name|nodePath
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
comment|// its okay if the node already exists
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|!=
name|KeeperException
operator|.
name|Code
operator|.
name|NODEEXISTS
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|zkClient
operator|.
name|getChildren
argument_list|(
name|ZkStateReader
operator|.
name|LIVE_NODES_ZKNODE
argument_list|,
name|liveNodeWatcher
argument_list|)
expr_stmt|;
try|try
block|{
name|zkStateReader
operator|.
name|updateLiveNodes
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getNodeName
specifier|public
name|String
name|getNodeName
parameter_list|()
block|{
return|return
name|hostName
operator|+
literal|":"
operator|+
name|localHostPort
operator|+
literal|"_"
operator|+
name|localHostContext
return|;
block|}
comment|/**    * @param path    * @return    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|pathExists
specifier|public
name|boolean
name|pathExists
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
name|zkClient
operator|.
name|exists
argument_list|(
name|path
argument_list|)
return|;
block|}
comment|/**    * @param collection    * @return    * @throws KeeperException    * @throws InterruptedException    * @throws IOException     */
DECL|method|readConfigName
specifier|public
name|String
name|readConfigName
parameter_list|(
name|String
name|collection
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|String
name|configName
init|=
literal|null
decl_stmt|;
name|String
name|path
init|=
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|collection
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Load collection config from:"
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|data
init|=
name|zkClient
operator|.
name|getData
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ZkNodeProps
name|props
init|=
operator|new
name|ZkNodeProps
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|load
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|configName
operator|=
name|props
operator|.
name|get
argument_list|(
name|CONFIGNAME_PROP
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configName
operator|!=
literal|null
operator|&&
operator|!
name|zkClient
operator|.
name|exists
argument_list|(
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|configName
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Specified config does not exist in ZooKeeper:"
operator|+
name|configName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Specified config does not exist in ZooKeeper:"
operator|+
name|configName
argument_list|)
throw|;
block|}
return|return
name|configName
return|;
block|}
comment|/**    * Register shard with ZooKeeper.    *     * @param coreName    * @param cloudDesc    * @param forcePropsUpdate update solr.xml core props even if the shard is already registered    * @throws IOException    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|register
specifier|public
name|void
name|register
parameter_list|(
name|String
name|coreName
parameter_list|,
name|CloudDescriptor
name|cloudDesc
parameter_list|,
name|boolean
name|forcePropsUpdate
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|shardUrl
init|=
name|localHostName
operator|+
literal|":"
operator|+
name|localHostPort
operator|+
literal|"/"
operator|+
name|localHostContext
operator|+
literal|"/"
operator|+
name|coreName
decl_stmt|;
name|String
name|collection
init|=
name|cloudDesc
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
name|String
name|shardsZkPath
init|=
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|collection
operator|+
name|ZkStateReader
operator|.
name|SHARDS_ZKNODE
operator|+
literal|"/"
operator|+
name|cloudDesc
operator|.
name|getShardId
argument_list|()
decl_stmt|;
name|boolean
name|shardZkNodeAlreadyExists
init|=
name|zkClient
operator|.
name|exists
argument_list|(
name|shardsZkPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardZkNodeAlreadyExists
operator|&&
operator|!
name|forcePropsUpdate
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Register shard - core:"
operator|+
name|coreName
operator|+
literal|" address:"
operator|+
name|shardUrl
argument_list|)
expr_stmt|;
block|}
name|ZkNodeProps
name|props
init|=
operator|new
name|ZkNodeProps
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|URL_PROP
argument_list|,
name|shardUrl
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME
argument_list|,
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|props
operator|.
name|store
argument_list|()
decl_stmt|;
name|String
name|shardZkNodeName
init|=
name|getNodeName
argument_list|()
operator|+
literal|"_"
operator|+
name|coreName
decl_stmt|;
if|if
condition|(
name|shardZkNodeAlreadyExists
operator|&&
name|forcePropsUpdate
condition|)
block|{
name|zkClient
operator|.
name|setData
argument_list|(
name|shardsZkPath
operator|+
literal|"/"
operator|+
name|shardZkNodeName
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
comment|// tell everyone to update cloud info
name|zkClient
operator|.
name|setData
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addZkShardsNode
argument_list|(
name|cloudDesc
operator|.
name|getShardId
argument_list|()
argument_list|,
name|collection
argument_list|)
expr_stmt|;
try|try
block|{
name|zkClient
operator|.
name|create
argument_list|(
name|shardsZkPath
operator|+
literal|"/"
operator|+
name|shardZkNodeName
argument_list|,
name|bytes
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
comment|// tell everyone to update cloud info
name|zkClient
operator|.
name|setData
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
comment|// its okay if the node already exists
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|!=
name|KeeperException
operator|.
name|Code
operator|.
name|NODEEXISTS
condition|)
block|{
throw|throw
name|e
throw|;
block|}
comment|// for some reason the shard already exists, though it didn't when we
comment|// started registration - just return
return|return;
block|}
block|}
block|}
comment|/**    * @param coreName    * @param cloudDesc    */
DECL|method|unregister
specifier|public
name|void
name|unregister
parameter_list|(
name|String
name|coreName
parameter_list|,
name|CloudDescriptor
name|cloudDesc
parameter_list|)
block|{
comment|// TODO : perhaps mark the core down in zk?
block|}
comment|/**    * @param dir    * @param zkPath    * @throws IOException    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|uploadToZK
specifier|public
name|void
name|uploadToZK
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|zkPath
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|File
index|[]
name|files
init|=
name|dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|zkClient
operator|.
name|setData
argument_list|(
name|zkPath
operator|+
literal|"/"
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|uploadToZK
argument_list|(
name|file
argument_list|,
name|zkPath
operator|+
literal|"/"
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * @param dir    * @param configName    * @throws IOException    * @throws KeeperException    * @throws InterruptedException    */
DECL|method|uploadConfigDir
specifier|public
name|void
name|uploadConfigDir
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|configName
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|uploadToZK
argument_list|(
name|dir
argument_list|,
name|ZkController
operator|.
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|configName
argument_list|)
expr_stmt|;
block|}
comment|// convenience for testing
DECL|method|printLayoutToStdOut
name|void
name|printLayoutToStdOut
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|zkClient
operator|.
name|printLayoutToStdOut
argument_list|()
expr_stmt|;
block|}
DECL|method|setUpCollectionsNode
specifier|private
name|void
name|setUpCollectionsNode
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|zkClient
operator|.
name|exists
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
argument_list|)
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"creating zk collections node:"
operator|+
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
argument_list|)
expr_stmt|;
block|}
comment|// makes collections zkNode if it doesn't exist
name|zkClient
operator|.
name|makePath
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
comment|// its okay if another beats us creating the node
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|!=
name|KeeperException
operator|.
name|Code
operator|.
name|NODEEXISTS
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Restore the interrupted status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createCollectionZkNode
specifier|public
name|void
name|createCollectionZkNode
parameter_list|(
name|CloudDescriptor
name|cd
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|String
name|collection
init|=
name|cd
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Check for collection zkNode:"
operator|+
name|collection
argument_list|)
expr_stmt|;
name|String
name|collectionPath
init|=
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|collection
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|zkClient
operator|.
name|exists
argument_list|(
name|collectionPath
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Creating collection in ZooKeeper:"
operator|+
name|collection
argument_list|)
expr_stmt|;
name|SolrParams
name|params
init|=
name|cd
operator|.
name|getParams
argument_list|()
decl_stmt|;
try|try
block|{
name|ZkNodeProps
name|collectionProps
init|=
operator|new
name|ZkNodeProps
argument_list|()
decl_stmt|;
comment|// TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?
name|String
name|defaultConfigName
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|COLLECTION_PARAM_PREFIX
operator|+
name|CONFIGNAME_PROP
argument_list|,
literal|"configuration1"
argument_list|)
decl_stmt|;
comment|// params passed in - currently only done via core admin (create core commmand).
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iter
init|=
name|params
operator|.
name|getParameterNamesIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|paramName
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|paramName
operator|.
name|startsWith
argument_list|(
name|COLLECTION_PARAM_PREFIX
argument_list|)
condition|)
block|{
name|collectionProps
operator|.
name|put
argument_list|(
name|paramName
operator|.
name|substring
argument_list|(
name|COLLECTION_PARAM_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|params
operator|.
name|get
argument_list|(
name|paramName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if the config name wasn't passed in, use the default
if|if
condition|(
operator|!
name|collectionProps
operator|.
name|containsKey
argument_list|(
name|CONFIGNAME_PROP
argument_list|)
condition|)
name|collectionProps
operator|.
name|put
argument_list|(
name|CONFIGNAME_PROP
argument_list|,
name|defaultConfigName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"bootstrap_confdir"
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// if we are bootstrapping a collection, default the config for
comment|// a new collection to the collection we are bootstrapping
name|log
operator|.
name|info
argument_list|(
literal|"Setting config for collection:"
operator|+
name|collection
operator|+
literal|" to "
operator|+
name|defaultConfigName
argument_list|)
expr_stmt|;
name|Properties
name|sysProps
init|=
name|System
operator|.
name|getProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|sprop
range|:
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
if|if
condition|(
name|sprop
operator|.
name|startsWith
argument_list|(
name|COLLECTION_PARAM_PREFIX
argument_list|)
condition|)
block|{
name|collectionProps
operator|.
name|put
argument_list|(
name|sprop
operator|.
name|substring
argument_list|(
name|COLLECTION_PARAM_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|sysProps
operator|.
name|getProperty
argument_list|(
name|sprop
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if the config name wasn't passed in, use the default
if|if
condition|(
operator|!
name|collectionProps
operator|.
name|containsKey
argument_list|(
name|CONFIGNAME_PROP
argument_list|)
condition|)
name|collectionProps
operator|.
name|put
argument_list|(
name|CONFIGNAME_PROP
argument_list|,
name|defaultConfigName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// check for configName
name|log
operator|.
name|info
argument_list|(
literal|"Looking for collection configName"
argument_list|)
expr_stmt|;
name|int
name|retry
init|=
literal|1
decl_stmt|;
for|for
control|(
init|;
name|retry
operator|<
literal|6
condition|;
name|retry
operator|++
control|)
block|{
if|if
condition|(
name|zkClient
operator|.
name|exists
argument_list|(
name|collectionPath
argument_list|)
condition|)
block|{
name|collectionProps
operator|=
operator|new
name|ZkNodeProps
argument_list|()
expr_stmt|;
name|collectionProps
operator|.
name|load
argument_list|(
name|zkClient
operator|.
name|getData
argument_list|(
name|collectionPath
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|collectionProps
operator|.
name|containsKey
argument_list|(
name|CONFIGNAME_PROP
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Could not find collection configName - pausing for 2 seconds and trying again - try: "
operator|+
name|retry
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|retry
operator|==
literal|6
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not find configName for collection "
operator|+
name|collection
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not find configName for collection "
operator|+
name|collection
argument_list|)
throw|;
block|}
block|}
name|zkClient
operator|.
name|makePath
argument_list|(
name|collectionPath
argument_list|,
name|collectionProps
operator|.
name|store
argument_list|()
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// ping that there is a new collection
name|zkClient
operator|.
name|setData
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
comment|// its okay if the node already exists
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|!=
name|KeeperException
operator|.
name|Code
operator|.
name|NODEEXISTS
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Collection zkNode exists"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
comment|// its okay if another beats us creating the node
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|!=
name|KeeperException
operator|.
name|Code
operator|.
name|NODEEXISTS
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
DECL|method|getZkStateReader
specifier|public
name|ZkStateReader
name|getZkStateReader
parameter_list|()
block|{
return|return
name|zkStateReader
return|;
block|}
block|}
end_class
end_unit
