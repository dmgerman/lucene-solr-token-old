begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_comment
comment|/**  * Directory provider for using lucene RAMDirectory  */
end_comment
begin_class
DECL|class|RAMDirectoryFactory
specifier|public
class|class
name|RAMDirectoryFactory
extends|extends
name|StandardDirectoryFactory
block|{
DECL|field|directories
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|RefCntRamDirectory
argument_list|>
name|directories
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RefCntRamDirectory
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|open
specifier|public
name|Directory
name|open
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|RefCntRamDirectory
name|directory
init|=
name|directories
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|directory
operator|==
literal|null
operator|||
operator|!
name|directory
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|directory
operator|=
operator|(
name|RefCntRamDirectory
operator|)
name|openNew
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|directories
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|directory
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|directory
operator|.
name|incRef
argument_list|()
expr_stmt|;
block|}
return|return
name|directory
return|;
block|}
block|}
comment|/**    * Non-public for unit-test access only. Do not use directly    */
DECL|method|openNew
name|Directory
name|openNew
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Directory
name|directory
decl_stmt|;
name|File
name|dirFile
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|boolean
name|indexExists
init|=
name|dirFile
operator|.
name|canRead
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexExists
condition|)
block|{
name|Directory
name|dir
init|=
name|super
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|directory
operator|=
operator|new
name|RefCntRamDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|directory
operator|=
operator|new
name|RefCntRamDirectory
argument_list|()
expr_stmt|;
block|}
return|return
name|directory
return|;
block|}
block|}
end_class
end_unit
