begin_unit
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|CodecProvider
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|SegmentInfosReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|SegmentInfosWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_comment
comment|/**  * Selects a codec based on a {@link IndexSchema}. This {@link CodecProvider}  * also supports dynamic fields such that not all field codecs need to be known  * in advance  */
end_comment
begin_class
DECL|class|SchemaCodecProvider
specifier|final
class|class
name|SchemaCodecProvider
extends|extends
name|CodecProvider
block|{
DECL|field|schema
specifier|private
specifier|final
name|IndexSchema
name|schema
decl_stmt|;
DECL|field|delegate
specifier|private
specifier|final
name|CodecProvider
name|delegate
decl_stmt|;
DECL|method|SchemaCodecProvider
name|SchemaCodecProvider
parameter_list|(
name|IndexSchema
name|schema
parameter_list|,
name|CodecProvider
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|lookup
specifier|public
name|Codec
name|lookup
parameter_list|(
name|String
name|name
parameter_list|)
block|{
synchronized|synchronized
init|(
name|delegate
init|)
block|{
return|return
name|delegate
operator|.
name|lookup
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getFieldCodec
specifier|public
name|String
name|getFieldCodec
parameter_list|(
name|String
name|name
parameter_list|)
block|{
synchronized|synchronized
init|(
name|delegate
init|)
block|{
if|if
condition|(
operator|!
name|delegate
operator|.
name|hasFieldCodec
argument_list|(
name|name
argument_list|)
condition|)
block|{
specifier|final
name|SchemaField
name|fieldOrNull
init|=
name|schema
operator|.
name|getFieldOrNull
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldOrNull
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no such field "
operator|+
name|name
argument_list|)
throw|;
block|}
name|String
name|codecName
init|=
name|fieldOrNull
operator|.
name|getType
argument_list|()
operator|.
name|getCodec
argument_list|()
decl_stmt|;
if|if
condition|(
name|codecName
operator|==
literal|null
condition|)
block|{
name|codecName
operator|=
name|delegate
operator|.
name|getDefaultFieldCodec
argument_list|()
expr_stmt|;
block|}
name|delegate
operator|.
name|setFieldCodec
argument_list|(
name|name
argument_list|,
name|codecName
argument_list|)
expr_stmt|;
return|return
name|codecName
return|;
block|}
return|return
name|delegate
operator|.
name|getFieldCodec
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|register
specifier|public
name|void
name|register
parameter_list|(
name|Codec
name|codec
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|unregister
specifier|public
name|void
name|unregister
parameter_list|(
name|Codec
name|codec
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getAllExtensions
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getAllExtensions
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getAllExtensions
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getSegmentInfosWriter
specifier|public
name|SegmentInfosWriter
name|getSegmentInfosWriter
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getSegmentInfosWriter
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getSegmentInfosReader
specifier|public
name|SegmentInfosReader
name|getSegmentInfosReader
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getSegmentInfosReader
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setFieldCodec
specifier|public
name|void
name|setFieldCodec
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|codec
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getDefaultFieldCodec
specifier|public
name|String
name|getDefaultFieldCodec
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getDefaultFieldCodec
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isCodecRegistered
specifier|public
name|boolean
name|isCodecRegistered
parameter_list|(
name|String
name|name
parameter_list|)
block|{
synchronized|synchronized
init|(
name|delegate
init|)
block|{
return|return
name|delegate
operator|.
name|isCodecRegistered
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|setDefaultFieldCodec
specifier|public
name|void
name|setDefaultFieldCodec
parameter_list|(
name|String
name|codec
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|hasFieldCodec
specifier|public
name|boolean
name|hasFieldCodec
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
synchronized|synchronized
init|(
name|delegate
init|)
block|{
if|if
condition|(
operator|!
name|delegate
operator|.
name|hasFieldCodec
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
specifier|final
name|SchemaField
name|fieldOrNull
init|=
name|schema
operator|.
name|getFieldOrNull
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldOrNull
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|codecName
init|=
name|fieldOrNull
operator|.
name|getType
argument_list|()
operator|.
name|getCodec
argument_list|()
decl_stmt|;
if|if
condition|(
name|codecName
operator|==
literal|null
condition|)
block|{
name|codecName
operator|=
name|delegate
operator|.
name|getDefaultFieldCodec
argument_list|()
expr_stmt|;
block|}
name|delegate
operator|.
name|setFieldCodec
argument_list|(
name|fieldName
argument_list|,
name|codecName
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SchemaCodecProvider("
operator|+
name|delegate
operator|.
name|toString
argument_list|()
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|listAll
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|listAll
parameter_list|()
block|{
synchronized|synchronized
init|(
name|delegate
init|)
block|{
return|return
name|delegate
operator|.
name|listAll
argument_list|()
return|;
block|}
block|}
block|}
end_class
end_unit
