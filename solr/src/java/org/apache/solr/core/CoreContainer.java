begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPath
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpressionException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|DOMUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|XML
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|CoreAdminHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import
begin_comment
comment|/**  * @version $Id$  * @since solr 1.3  */
end_comment
begin_class
DECL|class|CoreContainer
specifier|public
class|class
name|CoreContainer
block|{
DECL|field|DEFAULT_DEFAULT_CORE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_DEFAULT_CORE_NAME
init|=
literal|"collection1"
decl_stmt|;
DECL|field|log
specifier|protected
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CoreContainer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|cores
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SolrCore
argument_list|>
name|cores
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|SolrCore
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|persistent
specifier|protected
name|boolean
name|persistent
init|=
literal|false
decl_stmt|;
DECL|field|adminPath
specifier|protected
name|String
name|adminPath
init|=
literal|null
decl_stmt|;
DECL|field|managementPath
specifier|protected
name|String
name|managementPath
init|=
literal|null
decl_stmt|;
DECL|field|coreAdminHandler
specifier|protected
name|CoreAdminHandler
name|coreAdminHandler
init|=
literal|null
decl_stmt|;
DECL|field|configFile
specifier|protected
name|File
name|configFile
init|=
literal|null
decl_stmt|;
DECL|field|libDir
specifier|protected
name|String
name|libDir
init|=
literal|null
decl_stmt|;
DECL|field|libLoader
specifier|protected
name|ClassLoader
name|libLoader
init|=
literal|null
decl_stmt|;
DECL|field|loader
specifier|protected
name|SolrResourceLoader
name|loader
init|=
literal|null
decl_stmt|;
DECL|field|containerProperties
specifier|protected
name|Properties
name|containerProperties
decl_stmt|;
DECL|field|indexSchemaCache
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|IndexSchema
argument_list|>
name|indexSchemaCache
decl_stmt|;
DECL|field|adminHandler
specifier|protected
name|String
name|adminHandler
decl_stmt|;
DECL|field|shareSchema
specifier|protected
name|boolean
name|shareSchema
decl_stmt|;
DECL|field|solrHome
specifier|protected
name|String
name|solrHome
decl_stmt|;
DECL|field|solrConfigFilenameOverride
specifier|protected
name|String
name|solrConfigFilenameOverride
decl_stmt|;
DECL|field|defaultCoreName
specifier|private
name|String
name|defaultCoreName
init|=
literal|""
decl_stmt|;
DECL|method|CoreContainer
specifier|public
name|CoreContainer
parameter_list|()
block|{
name|solrHome
operator|=
name|SolrResourceLoader
operator|.
name|locateSolrHome
argument_list|()
expr_stmt|;
block|}
DECL|method|getContainerProperties
specifier|public
name|Properties
name|getContainerProperties
parameter_list|()
block|{
return|return
name|containerProperties
return|;
block|}
comment|// Helper class to initialize the CoreContainer
DECL|class|Initializer
specifier|public
specifier|static
class|class
name|Initializer
block|{
DECL|field|solrConfigFilename
specifier|protected
name|String
name|solrConfigFilename
init|=
literal|null
decl_stmt|;
comment|/**      * @deprecated all cores now abort on configuration error regardless of configuration      */
DECL|method|isAbortOnConfigurationError
specifier|public
name|boolean
name|isAbortOnConfigurationError
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * @exception generates an error if you attempt to set this value to false      * @deprecated all cores now abort on configuration error regardless of configuration      */
DECL|method|setAbortOnConfigurationError
specifier|public
name|void
name|setAbortOnConfigurationError
parameter_list|(
name|boolean
name|abortOnConfigurationError
parameter_list|)
block|{
if|if
condition|(
literal|false
operator|==
name|abortOnConfigurationError
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Setting abortOnConfigurationError==false is no longer supported"
argument_list|)
throw|;
block|}
DECL|method|getSolrConfigFilename
specifier|public
name|String
name|getSolrConfigFilename
parameter_list|()
block|{
return|return
name|solrConfigFilename
return|;
block|}
annotation|@
name|Deprecated
DECL|method|setSolrConfigFilename
specifier|public
name|void
name|setSolrConfigFilename
parameter_list|(
name|String
name|solrConfigFilename
parameter_list|)
block|{
name|this
operator|.
name|solrConfigFilename
operator|=
name|solrConfigFilename
expr_stmt|;
block|}
comment|// core container instantiation
DECL|method|initialize
specifier|public
name|CoreContainer
name|initialize
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParserConfigurationException
throws|,
name|SAXException
block|{
name|CoreContainer
name|cores
init|=
literal|null
decl_stmt|;
name|String
name|solrHome
init|=
name|SolrResourceLoader
operator|.
name|locateSolrHome
argument_list|()
decl_stmt|;
name|File
name|fconf
init|=
operator|new
name|File
argument_list|(
name|solrHome
argument_list|,
name|solrConfigFilename
operator|==
literal|null
condition|?
literal|"solr.xml"
else|:
name|solrConfigFilename
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"looking for solr.xml: "
operator|+
name|fconf
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|cores
operator|=
operator|new
name|CoreContainer
argument_list|()
expr_stmt|;
name|cores
operator|.
name|solrConfigFilenameOverride
operator|=
name|solrConfigFilename
expr_stmt|;
if|if
condition|(
name|fconf
operator|.
name|exists
argument_list|()
condition|)
block|{
name|cores
operator|.
name|load
argument_list|(
name|solrHome
argument_list|,
name|fconf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cores
operator|.
name|load
argument_list|(
name|solrHome
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|DEF_SOLR_XML
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cores
operator|.
name|configFile
operator|=
name|fconf
expr_stmt|;
block|}
name|solrConfigFilename
operator|=
name|cores
operator|.
name|getConfigFile
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
return|return
name|cores
return|;
block|}
block|}
DECL|method|getCoreProps
specifier|private
specifier|static
name|Properties
name|getCoreProps
parameter_list|(
name|String
name|instanceDir
parameter_list|,
name|String
name|file
parameter_list|,
name|Properties
name|defaults
parameter_list|)
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
name|file
operator|=
literal|"conf"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"solrcore.properties"
expr_stmt|;
name|File
name|corePropsFile
init|=
operator|new
name|File
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|corePropsFile
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|corePropsFile
operator|=
operator|new
name|File
argument_list|(
name|instanceDir
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
name|Properties
name|p
init|=
name|defaults
decl_stmt|;
if|if
condition|(
name|corePropsFile
operator|.
name|exists
argument_list|()
operator|&&
name|corePropsFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|p
operator|=
operator|new
name|Properties
argument_list|(
name|defaults
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|corePropsFile
argument_list|)
expr_stmt|;
name|p
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error loading properties "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|p
return|;
block|}
comment|/**    * Initalize CoreContainer directly from the constructor    *     * @param dir    * @param configFile    * @throws ParserConfigurationException    * @throws IOException    * @throws SAXException    */
DECL|method|CoreContainer
specifier|public
name|CoreContainer
parameter_list|(
name|String
name|dir
parameter_list|,
name|File
name|configFile
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|this
operator|.
name|load
argument_list|(
name|dir
argument_list|,
name|configFile
argument_list|)
expr_stmt|;
block|}
comment|/**    * Minimal CoreContainer constructor.     * @param loader the CoreContainer resource loader    */
DECL|method|CoreContainer
specifier|public
name|CoreContainer
parameter_list|(
name|SolrResourceLoader
name|loader
parameter_list|)
block|{
name|this
operator|.
name|loader
operator|=
name|loader
expr_stmt|;
name|this
operator|.
name|solrHome
operator|=
name|loader
operator|.
name|getInstanceDir
argument_list|()
expr_stmt|;
block|}
DECL|method|CoreContainer
specifier|public
name|CoreContainer
parameter_list|(
name|String
name|solrHome
parameter_list|)
block|{
name|this
operator|.
name|solrHome
operator|=
name|solrHome
expr_stmt|;
block|}
comment|//-------------------------------------------------------------------
comment|// Initialization / Cleanup
comment|//-------------------------------------------------------------------
comment|/**    * Load a config file listing the available solr cores.    * @param dir the home directory of all resources.    * @param configFile the configuration file    * @throws javax.xml.parsers.ParserConfigurationException    * @throws java.io.IOException    * @throws org.xml.sax.SAXException    */
DECL|method|load
specifier|public
name|void
name|load
parameter_list|(
name|String
name|dir
parameter_list|,
name|File
name|configFile
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|this
operator|.
name|configFile
operator|=
name|configFile
expr_stmt|;
name|this
operator|.
name|load
argument_list|(
name|dir
argument_list|,
operator|new
name|FileInputStream
argument_list|(
name|configFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Load a config file listing the available solr cores.    *     * @param dir the home directory of all resources.    * @param cfgis the configuration file InputStream    * @throws ParserConfigurationException    * @throws IOException    * @throws SAXException    */
DECL|method|load
specifier|public
name|void
name|load
parameter_list|(
name|String
name|dir
parameter_list|,
name|InputStream
name|cfgis
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|this
operator|.
name|loader
operator|=
operator|new
name|SolrResourceLoader
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|solrHome
operator|=
name|loader
operator|.
name|getInstanceDir
argument_list|()
expr_stmt|;
try|try
block|{
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|(
name|loader
argument_list|,
literal|null
argument_list|,
name|cfgis
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|dcoreName
init|=
name|cfg
operator|.
name|get
argument_list|(
literal|"solr/cores/@defaultCoreName"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|dcoreName
operator|!=
literal|null
condition|)
block|{
name|defaultCoreName
operator|=
name|dcoreName
expr_stmt|;
block|}
name|persistent
operator|=
name|cfg
operator|.
name|getBool
argument_list|(
literal|"solr/@persistent"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|libDir
operator|=
name|cfg
operator|.
name|get
argument_list|(
literal|"solr/@sharedLib"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|adminPath
operator|=
name|cfg
operator|.
name|get
argument_list|(
literal|"solr/cores/@adminPath"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|shareSchema
operator|=
name|cfg
operator|.
name|getBool
argument_list|(
literal|"solr/cores/@shareSchema"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|shareSchema
condition|)
block|{
name|indexSchemaCache
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|IndexSchema
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|adminHandler
operator|=
name|cfg
operator|.
name|get
argument_list|(
literal|"solr/cores/@adminHandler"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|managementPath
operator|=
name|cfg
operator|.
name|get
argument_list|(
literal|"solr/cores/@managementPath"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|libDir
operator|!=
literal|null
condition|)
block|{
name|File
name|f
init|=
name|FileUtils
operator|.
name|resolvePath
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|)
argument_list|,
name|libDir
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"loading shared library: "
operator|+
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|libLoader
operator|=
name|SolrResourceLoader
operator|.
name|createClassLoader
argument_list|(
name|f
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|adminPath
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|adminHandler
operator|==
literal|null
condition|)
block|{
name|coreAdminHandler
operator|=
operator|new
name|CoreAdminHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|coreAdminHandler
operator|=
name|this
operator|.
name|createMultiCoreHandler
argument_list|(
name|adminHandler
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|containerProperties
operator|=
name|readProperties
argument_list|(
name|cfg
argument_list|,
operator|(
operator|(
name|NodeList
operator|)
name|cfg
operator|.
name|evaluate
argument_list|(
literal|"solr"
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
operator|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|SolrConfig
operator|.
name|severeErrors
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|SolrException
operator|.
name|logOnce
argument_list|(
name|log
argument_list|,
literal|null
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|NodeList
name|nodes
init|=
operator|(
name|NodeList
operator|)
name|cfg
operator|.
name|evaluate
argument_list|(
literal|"solr/cores/core"
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
name|boolean
name|defaultCoreFound
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|name
init|=
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|node
argument_list|,
literal|"name"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|defaultCoreName
argument_list|)
condition|)
block|{
if|if
condition|(
name|defaultCoreFound
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Only one 'DEFAULT_CORE' is allowed "
argument_list|)
throw|;
name|defaultCoreFound
operator|=
literal|true
expr_stmt|;
name|name
operator|=
literal|""
expr_stmt|;
block|}
name|CoreDescriptor
name|p
init|=
operator|new
name|CoreDescriptor
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|node
argument_list|,
literal|"instanceDir"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
comment|// deal with optional settings
name|String
name|opt
init|=
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|node
argument_list|,
literal|"config"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|solrConfigFilenameOverride
operator|!=
literal|null
operator|&&
name|name
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|p
operator|.
name|setConfigName
argument_list|(
name|solrConfigFilenameOverride
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|setConfigName
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
name|opt
operator|=
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|node
argument_list|,
literal|"schema"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|setSchemaName
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
name|opt
operator|=
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|node
argument_list|,
literal|"properties"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|setPropertiesName
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
name|opt
operator|=
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|node
argument_list|,
name|CoreAdminParams
operator|.
name|DATA_DIR
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|setDataDir
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|setCoreProperties
argument_list|(
name|readProperties
argument_list|(
name|cfg
argument_list|,
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|SolrCore
name|core
init|=
name|create
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|register
argument_list|(
name|name
argument_list|,
name|core
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|SolrConfig
operator|.
name|severeErrors
operator|.
name|add
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|SolrException
operator|.
name|logOnce
argument_list|(
name|log
argument_list|,
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cfgis
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|cfgis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|xany
parameter_list|)
block|{}
block|}
block|}
block|}
DECL|method|readProperties
specifier|private
name|Properties
name|readProperties
parameter_list|(
name|Config
name|cfg
parameter_list|,
name|Node
name|node
parameter_list|)
throws|throws
name|XPathExpressionException
block|{
name|XPath
name|xpath
init|=
name|cfg
operator|.
name|getXPath
argument_list|()
decl_stmt|;
name|NodeList
name|props
init|=
operator|(
name|NodeList
operator|)
name|xpath
operator|.
name|evaluate
argument_list|(
literal|"property"
argument_list|,
name|node
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|props
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|prop
init|=
name|props
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|prop
argument_list|,
literal|"name"
argument_list|)
argument_list|,
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|prop
argument_list|,
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|properties
return|;
block|}
DECL|field|isShutDown
specifier|private
name|boolean
name|isShutDown
init|=
literal|false
decl_stmt|;
comment|/**    * Stops all cores.    */
DECL|method|shutdown
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
synchronized|synchronized
init|(
name|cores
init|)
block|{
try|try
block|{
for|for
control|(
name|SolrCore
name|core
range|:
name|cores
operator|.
name|values
argument_list|()
control|)
block|{
name|core
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|cores
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|isShutDown
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|finalize
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
if|if
condition|(
operator|!
name|isShutDown
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"CoreContainer was not shutdown prior to finalize(), indicates a bug -- POSSIBLE RESOURCE LEAK!!!"
argument_list|)
expr_stmt|;
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|finalize
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Registers a SolrCore descriptor in the registry using the specified name.    * If returnPrevNotClosed==false, the old core, if different, is closed. if true, it is returned w/o closing the core    *    * @return a previous core having the same name if it existed    */
DECL|method|register
specifier|public
name|SolrCore
name|register
parameter_list|(
name|String
name|name
parameter_list|,
name|SolrCore
name|core
parameter_list|,
name|boolean
name|returnPrevNotClosed
parameter_list|)
block|{
if|if
condition|(
name|core
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can not register a null core."
argument_list|)
throw|;
block|}
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|>=
literal|0
operator|||
name|name
operator|.
name|indexOf
argument_list|(
literal|'\\'
argument_list|)
operator|>=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid core name: "
operator|+
name|name
argument_list|)
throw|;
block|}
name|SolrCore
name|old
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|cores
init|)
block|{
name|old
operator|=
name|cores
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|core
argument_list|)
expr_stmt|;
name|core
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|old
operator|==
literal|null
operator|||
name|old
operator|==
name|core
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"registering core: "
operator|+
name|name
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"replacing core: "
operator|+
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|returnPrevNotClosed
condition|)
block|{
name|old
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|old
return|;
block|}
block|}
comment|/**    * Registers a SolrCore descriptor in the registry using the core's name.    * If returnPrev==false, the old core, if different, is closed.    * @return a previous core having the same name if it existed and returnPrev==true    */
DECL|method|register
specifier|public
name|SolrCore
name|register
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|boolean
name|returnPrev
parameter_list|)
block|{
return|return
name|register
argument_list|(
name|core
operator|.
name|getName
argument_list|()
argument_list|,
name|core
argument_list|,
name|returnPrev
argument_list|)
return|;
block|}
comment|/**    * Creates a new core based on a descriptor but does not register it.    *    * @param dcore a core descriptor    * @return the newly created core    * @throws javax.xml.parsers.ParserConfigurationException    * @throws java.io.IOException    * @throws org.xml.sax.SAXException    */
DECL|method|create
specifier|public
name|SolrCore
name|create
parameter_list|(
name|CoreDescriptor
name|dcore
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
comment|// Make the instanceDir relative to the cores instanceDir if not absolute
name|File
name|idir
init|=
operator|new
name|File
argument_list|(
name|dcore
operator|.
name|getInstanceDir
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|idir
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|idir
operator|=
operator|new
name|File
argument_list|(
name|solrHome
argument_list|,
name|dcore
operator|.
name|getInstanceDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|instanceDir
init|=
name|idir
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// Initialize the solr config
name|SolrResourceLoader
name|solrLoader
init|=
operator|new
name|SolrResourceLoader
argument_list|(
name|instanceDir
argument_list|,
name|libLoader
argument_list|,
name|getCoreProps
argument_list|(
name|instanceDir
argument_list|,
name|dcore
operator|.
name|getPropertiesName
argument_list|()
argument_list|,
name|dcore
operator|.
name|getCoreProperties
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|SolrConfig
name|config
init|=
operator|new
name|SolrConfig
argument_list|(
name|solrLoader
argument_list|,
name|dcore
operator|.
name|getConfigName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|IndexSchema
name|schema
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|indexSchemaCache
operator|!=
literal|null
condition|)
block|{
comment|//schema sharing is enabled. so check if it already is loaded
name|File
name|schemaFile
init|=
operator|new
name|File
argument_list|(
name|dcore
operator|.
name|getSchemaName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|schemaFile
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|schemaFile
operator|=
operator|new
name|File
argument_list|(
name|solrLoader
operator|.
name|getInstanceDir
argument_list|()
operator|+
literal|"conf"
operator|+
name|File
operator|.
name|separator
operator|+
name|dcore
operator|.
name|getSchemaName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|schemaFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|String
name|key
init|=
name|schemaFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|":"
operator|+
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMddhhmmss"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|schemaFile
operator|.
name|lastModified
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|schema
operator|=
name|indexSchemaCache
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|schema
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"creating new schema object for core: "
operator|+
name|dcore
operator|.
name|name
argument_list|)
expr_stmt|;
name|schema
operator|=
operator|new
name|IndexSchema
argument_list|(
name|config
argument_list|,
name|dcore
operator|.
name|getSchemaName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|indexSchemaCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|schema
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"re-using schema object for core: "
operator|+
name|dcore
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|schema
operator|==
literal|null
condition|)
block|{
name|schema
operator|=
operator|new
name|IndexSchema
argument_list|(
name|config
argument_list|,
name|dcore
operator|.
name|getSchemaName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|SolrCore
name|core
init|=
operator|new
name|SolrCore
argument_list|(
name|dcore
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|config
argument_list|,
name|schema
argument_list|,
name|dcore
argument_list|)
decl_stmt|;
return|return
name|core
return|;
block|}
comment|/**    * @return a Collection of registered SolrCores    */
DECL|method|getCores
specifier|public
name|Collection
argument_list|<
name|SolrCore
argument_list|>
name|getCores
parameter_list|()
block|{
name|List
argument_list|<
name|SolrCore
argument_list|>
name|lst
init|=
operator|new
name|ArrayList
argument_list|<
name|SolrCore
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|cores
init|)
block|{
name|lst
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|cores
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|lst
return|;
block|}
comment|/**    * @return a Collection of the names that cores are mapped to    */
DECL|method|getCoreNames
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getCoreNames
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|lst
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|cores
init|)
block|{
name|lst
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|cores
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|lst
return|;
block|}
comment|/** This method is currently experimental.    * @return a Collection of the names that a specific core is mapped to.    */
DECL|method|getCoreNames
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getCoreNames
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|lst
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|cores
init|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SolrCore
argument_list|>
name|entry
range|:
name|cores
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|core
operator|==
name|entry
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|lst
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|lst
return|;
block|}
comment|// ---------------- Core name related methods ---------------
comment|/**    * Recreates a SolrCore.    * While the new core is loading, requests will continue to be dispatched to    * and processed by the old core    *     * @param name the name of the SolrCore to reload    * @throws ParserConfigurationException    * @throws IOException    * @throws SAXException    */
DECL|method|reload
specifier|public
name|void
name|reload
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|name
operator|=
name|checkDefault
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|SolrCore
name|core
decl_stmt|;
synchronized|synchronized
init|(
name|cores
init|)
block|{
name|core
operator|=
name|cores
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|core
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No such core: "
operator|+
name|name
argument_list|)
throw|;
name|SolrCore
name|newCore
init|=
name|create
argument_list|(
name|core
operator|.
name|getCoreDescriptor
argument_list|()
argument_list|)
decl_stmt|;
name|register
argument_list|(
name|name
argument_list|,
name|newCore
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|checkDefault
specifier|private
name|String
name|checkDefault
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|defaultCoreName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
name|name
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
name|name
return|;
block|}
comment|/**    * Swaps two SolrCore descriptors.    * @param n0    * @param n1    */
DECL|method|swap
specifier|public
name|void
name|swap
parameter_list|(
name|String
name|n0
parameter_list|,
name|String
name|n1
parameter_list|)
block|{
if|if
condition|(
name|n0
operator|==
literal|null
operator|||
name|n1
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Can not swap unnamed cores."
argument_list|)
throw|;
block|}
name|n0
operator|=
name|checkDefault
argument_list|(
name|n0
argument_list|)
expr_stmt|;
name|n1
operator|=
name|checkDefault
argument_list|(
name|n1
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|cores
init|)
block|{
name|SolrCore
name|c0
init|=
name|cores
operator|.
name|get
argument_list|(
name|n0
argument_list|)
decl_stmt|;
name|SolrCore
name|c1
init|=
name|cores
operator|.
name|get
argument_list|(
name|n1
argument_list|)
decl_stmt|;
if|if
condition|(
name|c0
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No such core: "
operator|+
name|n0
argument_list|)
throw|;
if|if
condition|(
name|c1
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No such core: "
operator|+
name|n1
argument_list|)
throw|;
name|cores
operator|.
name|put
argument_list|(
name|n0
argument_list|,
name|c1
argument_list|)
expr_stmt|;
name|cores
operator|.
name|put
argument_list|(
name|n1
argument_list|,
name|c0
argument_list|)
expr_stmt|;
name|c0
operator|.
name|setName
argument_list|(
name|n1
argument_list|)
expr_stmt|;
name|c0
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|name
operator|=
name|n1
expr_stmt|;
name|c1
operator|.
name|setName
argument_list|(
name|n0
argument_list|)
expr_stmt|;
name|c1
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|name
operator|=
name|n0
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"swaped: "
operator|+
name|n0
operator|+
literal|" with "
operator|+
name|n1
argument_list|)
expr_stmt|;
block|}
comment|/** Removes and returns registered core w/o decrementing it's reference count */
DECL|method|remove
specifier|public
name|SolrCore
name|remove
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|name
operator|=
name|checkDefault
argument_list|(
name|name
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|cores
init|)
block|{
return|return
name|cores
operator|.
name|remove
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
comment|/** Gets a core by name and increase its refcount.    * @see SolrCore#open()     * @see SolrCore#close()     * @param name the core name    * @return the core if found    */
DECL|method|getCore
specifier|public
name|SolrCore
name|getCore
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|name
operator|=
name|checkDefault
argument_list|(
name|name
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|cores
init|)
block|{
name|SolrCore
name|core
init|=
name|cores
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
name|core
operator|.
name|open
argument_list|()
expr_stmt|;
comment|// increment the ref count while still synchronized
return|return
name|core
return|;
block|}
block|}
comment|// ---------------- Multicore self related methods ---------------
comment|/**     * Creates a CoreAdminHandler for this MultiCore.    * @return a CoreAdminHandler    */
DECL|method|createMultiCoreHandler
specifier|protected
name|CoreAdminHandler
name|createMultiCoreHandler
parameter_list|(
specifier|final
name|String
name|adminHandlerClass
parameter_list|)
block|{
name|SolrResourceLoader
name|loader
init|=
operator|new
name|SolrResourceLoader
argument_list|(
literal|null
argument_list|,
name|libLoader
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Object
name|obj
init|=
name|loader
operator|.
name|newAdminHandlerInstance
argument_list|(
name|CoreContainer
operator|.
name|this
argument_list|,
name|adminHandlerClass
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|CoreAdminHandler
operator|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"adminHandlerClass is not of type "
operator|+
name|CoreAdminHandler
operator|.
name|class
argument_list|)
throw|;
block|}
return|return
operator|(
name|CoreAdminHandler
operator|)
name|obj
return|;
block|}
DECL|method|getMultiCoreHandler
specifier|public
name|CoreAdminHandler
name|getMultiCoreHandler
parameter_list|()
block|{
return|return
name|coreAdminHandler
return|;
block|}
DECL|method|getDefaultCoreName
specifier|public
name|String
name|getDefaultCoreName
parameter_list|()
block|{
return|return
name|defaultCoreName
return|;
block|}
comment|// all of the following properties aren't synchronized
comment|// but this should be OK since they normally won't be changed rapidly
DECL|method|isPersistent
specifier|public
name|boolean
name|isPersistent
parameter_list|()
block|{
return|return
name|persistent
return|;
block|}
DECL|method|setPersistent
specifier|public
name|void
name|setPersistent
parameter_list|(
name|boolean
name|persistent
parameter_list|)
block|{
name|this
operator|.
name|persistent
operator|=
name|persistent
expr_stmt|;
block|}
DECL|method|getAdminPath
specifier|public
name|String
name|getAdminPath
parameter_list|()
block|{
return|return
name|adminPath
return|;
block|}
DECL|method|setAdminPath
specifier|public
name|void
name|setAdminPath
parameter_list|(
name|String
name|adminPath
parameter_list|)
block|{
name|this
operator|.
name|adminPath
operator|=
name|adminPath
expr_stmt|;
block|}
DECL|method|getManagementPath
specifier|public
name|String
name|getManagementPath
parameter_list|()
block|{
return|return
name|managementPath
return|;
block|}
comment|/**    * Sets the alternate path for multicore handling:    * This is used in case there is a registered unnamed core (aka name is "") to    * declare an alternate way of accessing named cores.    * This can also be used in a pseudo single-core environment so admins can prepare    * a new version before swapping.    * @param path    */
DECL|method|setManagementPath
specifier|public
name|void
name|setManagementPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|managementPath
operator|=
name|path
expr_stmt|;
block|}
DECL|method|getConfigFile
specifier|public
name|File
name|getConfigFile
parameter_list|()
block|{
return|return
name|configFile
return|;
block|}
comment|/** Persists the cores config file in cores.xml. */
DECL|method|persist
specifier|public
name|void
name|persist
parameter_list|()
block|{
name|persistFile
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** Persists the cores config file in a user provided file. */
DECL|method|persistFile
specifier|public
name|void
name|persistFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Persisting cores config to "
operator|+
operator|(
name|file
operator|==
literal|null
condition|?
name|configFile
else|:
name|file
operator|)
argument_list|)
expr_stmt|;
name|File
name|tmpFile
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// write in temp first
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
name|file
operator|=
name|tmpFile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"solr"
argument_list|,
literal|".xml"
argument_list|,
name|configFile
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|java
operator|.
name|io
operator|.
name|FileOutputStream
name|out
init|=
operator|new
name|java
operator|.
name|io
operator|.
name|FileOutputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|out
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|persist
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// rename over origin or copy it this fails
if|if
condition|(
name|tmpFile
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|tmpFile
operator|.
name|renameTo
argument_list|(
name|configFile
argument_list|)
condition|)
name|tmpFile
operator|=
literal|null
expr_stmt|;
else|else
name|fileCopy
argument_list|(
name|tmpFile
argument_list|,
name|configFile
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
name|xnf
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|xnf
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|xio
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|xio
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|tmpFile
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|tmpFile
operator|.
name|delete
argument_list|()
condition|)
name|tmpFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** Write the cores configuration through a writer.*/
DECL|method|persist
name|void
name|persist
parameter_list|(
name|Writer
name|w
parameter_list|)
throws|throws
name|IOException
block|{
name|w
operator|.
name|write
argument_list|(
literal|"<?xml version='1.0' encoding='UTF-8'?>"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"<solr"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|libDir
operator|!=
literal|null
condition|)
block|{
name|writeAttribute
argument_list|(
name|w
argument_list|,
literal|"sharedLib"
argument_list|,
name|libDir
argument_list|)
expr_stmt|;
block|}
name|writeAttribute
argument_list|(
name|w
argument_list|,
literal|"persistent"
argument_list|,
name|isPersistent
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|">\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|containerProperties
operator|!=
literal|null
operator|&&
operator|!
name|containerProperties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|writeProperties
argument_list|(
name|w
argument_list|,
name|containerProperties
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|write
argument_list|(
literal|"<cores"
argument_list|)
expr_stmt|;
name|writeAttribute
argument_list|(
name|w
argument_list|,
literal|"adminPath"
argument_list|,
name|adminPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|adminHandler
operator|!=
literal|null
condition|)
name|writeAttribute
argument_list|(
name|w
argument_list|,
literal|"adminHandler"
argument_list|,
name|adminHandler
argument_list|)
expr_stmt|;
if|if
condition|(
name|shareSchema
condition|)
name|writeAttribute
argument_list|(
name|w
argument_list|,
literal|"shareSchema"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|">\n"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|cores
init|)
block|{
for|for
control|(
name|SolrCore
name|solrCore
range|:
name|cores
operator|.
name|values
argument_list|()
control|)
block|{
name|persist
argument_list|(
name|w
argument_list|,
name|solrCore
operator|.
name|getCoreDescriptor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|w
operator|.
name|write
argument_list|(
literal|"</cores>\n"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"</solr>\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|writeAttribute
specifier|private
name|void
name|writeAttribute
parameter_list|(
name|Writer
name|w
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
return|return;
name|w
operator|.
name|write
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"=\""
argument_list|)
expr_stmt|;
name|XML
operator|.
name|escapeAttributeValue
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
comment|/** Writes the cores configuration node for a given core. */
DECL|method|persist
name|void
name|persist
parameter_list|(
name|Writer
name|w
parameter_list|,
name|CoreDescriptor
name|dcore
parameter_list|)
throws|throws
name|IOException
block|{
name|w
operator|.
name|write
argument_list|(
literal|"<core"
argument_list|)
expr_stmt|;
name|writeAttribute
argument_list|(
name|w
argument_list|,
literal|"name"
argument_list|,
name|dcore
operator|.
name|name
argument_list|)
expr_stmt|;
name|writeAttribute
argument_list|(
name|w
argument_list|,
literal|"instanceDir"
argument_list|,
name|dcore
operator|.
name|getInstanceDir
argument_list|()
argument_list|)
expr_stmt|;
comment|//write config (if not default)
name|String
name|opt
init|=
name|dcore
operator|.
name|getConfigName
argument_list|()
decl_stmt|;
if|if
condition|(
name|opt
operator|!=
literal|null
operator|&&
operator|!
name|opt
operator|.
name|equals
argument_list|(
name|dcore
operator|.
name|getDefaultConfigName
argument_list|()
argument_list|)
condition|)
block|{
name|writeAttribute
argument_list|(
name|w
argument_list|,
literal|"config"
argument_list|,
name|opt
argument_list|)
expr_stmt|;
block|}
comment|//write schema (if not default)
name|opt
operator|=
name|dcore
operator|.
name|getSchemaName
argument_list|()
expr_stmt|;
if|if
condition|(
name|opt
operator|!=
literal|null
operator|&&
operator|!
name|opt
operator|.
name|equals
argument_list|(
name|dcore
operator|.
name|getDefaultSchemaName
argument_list|()
argument_list|)
condition|)
block|{
name|writeAttribute
argument_list|(
name|w
argument_list|,
literal|"schema"
argument_list|,
name|opt
argument_list|)
expr_stmt|;
block|}
name|opt
operator|=
name|dcore
operator|.
name|getPropertiesName
argument_list|()
expr_stmt|;
if|if
condition|(
name|opt
operator|!=
literal|null
condition|)
block|{
name|writeAttribute
argument_list|(
name|w
argument_list|,
literal|"properties"
argument_list|,
name|opt
argument_list|)
expr_stmt|;
block|}
name|opt
operator|=
name|dcore
operator|.
name|dataDir
expr_stmt|;
if|if
condition|(
name|opt
operator|!=
literal|null
condition|)
name|writeAttribute
argument_list|(
name|w
argument_list|,
literal|"dataDir"
argument_list|,
name|opt
argument_list|)
expr_stmt|;
if|if
condition|(
name|dcore
operator|.
name|getCoreProperties
argument_list|()
operator|==
literal|null
operator|||
name|dcore
operator|.
name|getCoreProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|w
operator|.
name|write
argument_list|(
literal|"/>\n"
argument_list|)
expr_stmt|;
comment|// core
else|else
block|{
name|w
operator|.
name|write
argument_list|(
literal|">\n"
argument_list|)
expr_stmt|;
name|writeProperties
argument_list|(
name|w
argument_list|,
name|dcore
operator|.
name|getCoreProperties
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"</core>"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeProperties
specifier|private
name|void
name|writeProperties
parameter_list|(
name|Writer
name|w
parameter_list|,
name|Properties
name|props
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|props
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|w
operator|.
name|write
argument_list|(
literal|"<property"
argument_list|)
expr_stmt|;
name|writeAttribute
argument_list|(
name|w
argument_list|,
literal|"name"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|writeAttribute
argument_list|(
name|w
argument_list|,
literal|"value"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"/>\n"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Copies a src file to a dest file:    *  used to circumvent the platform discrepancies regarding renaming files.    */
DECL|method|fileCopy
specifier|public
specifier|static
name|void
name|fileCopy
parameter_list|(
name|File
name|src
parameter_list|,
name|File
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
name|IOException
name|xforward
init|=
literal|null
decl_stmt|;
name|FileInputStream
name|fis
init|=
literal|null
decl_stmt|;
name|FileOutputStream
name|fos
init|=
literal|null
decl_stmt|;
name|FileChannel
name|fcin
init|=
literal|null
decl_stmt|;
name|FileChannel
name|fcout
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fis
operator|=
operator|new
name|FileInputStream
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|fos
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|fcin
operator|=
name|fis
operator|.
name|getChannel
argument_list|()
expr_stmt|;
name|fcout
operator|=
name|fos
operator|.
name|getChannel
argument_list|()
expr_stmt|;
comment|// do the file copy 32Mb at a time
specifier|final
name|int
name|MB32
init|=
literal|32
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
name|long
name|size
init|=
name|fcin
operator|.
name|size
argument_list|()
decl_stmt|;
name|long
name|position
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|position
operator|<
name|size
condition|)
block|{
name|position
operator|+=
name|fcin
operator|.
name|transferTo
argument_list|(
name|position
argument_list|,
name|MB32
argument_list|,
name|fcout
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|xio
parameter_list|)
block|{
name|xforward
operator|=
name|xio
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fis
operator|!=
literal|null
condition|)
try|try
block|{
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
name|fis
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|xio
parameter_list|)
block|{}
if|if
condition|(
name|fos
operator|!=
literal|null
condition|)
try|try
block|{
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|fos
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|xio
parameter_list|)
block|{}
if|if
condition|(
name|fcin
operator|!=
literal|null
operator|&&
name|fcin
operator|.
name|isOpen
argument_list|()
condition|)
try|try
block|{
name|fcin
operator|.
name|close
argument_list|()
expr_stmt|;
name|fcin
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|xio
parameter_list|)
block|{}
if|if
condition|(
name|fcout
operator|!=
literal|null
operator|&&
name|fcout
operator|.
name|isOpen
argument_list|()
condition|)
try|try
block|{
name|fcout
operator|.
name|close
argument_list|()
expr_stmt|;
name|fcout
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|xio
parameter_list|)
block|{}
block|}
if|if
condition|(
name|xforward
operator|!=
literal|null
condition|)
block|{
throw|throw
name|xforward
throw|;
block|}
block|}
DECL|method|getSolrHome
specifier|public
name|String
name|getSolrHome
parameter_list|()
block|{
return|return
name|solrHome
return|;
block|}
DECL|field|DEF_SOLR_XML
specifier|private
specifier|static
specifier|final
name|String
name|DEF_SOLR_XML
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
operator|+
literal|"<solr persistent=\"false\">\n"
operator|+
literal|"<cores adminPath=\"/admin/cores\" defaultCoreName=\""
operator|+
name|DEFAULT_DEFAULT_CORE_NAME
operator|+
literal|"\">\n"
operator|+
literal|"<core name=\""
operator|+
name|DEFAULT_DEFAULT_CORE_NAME
operator|+
literal|"\" instanceDir=\".\" />\n"
operator|+
literal|"</cores>\n"
operator|+
literal|"</solr>"
decl_stmt|;
block|}
end_class
end_unit
