begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import
begin_comment
comment|/**  * A simple class that stores key Strings as char[]'s in a  * hash table. Note that this is not a general purpose  * class.  For example, it cannot remove items from the  * map, nor does it resize its hash table to be smaller,  * etc.  It is designed to be quick to retrieve items  * by char[] keys without the necessity of converting  * to a String first.  */
end_comment
begin_class
DECL|class|CharArrayMap
specifier|public
class|class
name|CharArrayMap
parameter_list|<
name|V
parameter_list|>
extends|extends
name|AbstractMap
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
implements|implements
name|Map
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
implements|,
name|Cloneable
implements|,
name|Serializable
block|{
DECL|field|INIT_SIZE
specifier|private
specifier|final
specifier|static
name|int
name|INIT_SIZE
init|=
literal|2
decl_stmt|;
DECL|field|keys
specifier|private
name|char
index|[]
index|[]
name|keys
decl_stmt|;
DECL|field|values
specifier|private
name|Object
index|[]
name|values
decl_stmt|;
DECL|field|count
specifier|private
name|int
name|count
decl_stmt|;
DECL|field|ignoreCase
specifier|private
specifier|final
name|boolean
name|ignoreCase
decl_stmt|;
comment|/** Create map with enough capacity to hold startSize    *  terms */
DECL|method|CharArrayMap
specifier|public
name|CharArrayMap
parameter_list|(
name|int
name|initialCapacity
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|)
block|{
name|this
operator|.
name|ignoreCase
operator|=
name|ignoreCase
expr_stmt|;
name|int
name|size
init|=
name|INIT_SIZE
decl_stmt|;
comment|// load factor of .75, inverse is 1.25, or x+x/4
name|initialCapacity
operator|=
name|initialCapacity
operator|+
operator|(
name|initialCapacity
operator|>>
literal|2
operator|)
expr_stmt|;
while|while
condition|(
name|size
operator|<=
name|initialCapacity
condition|)
name|size
operator|<<=
literal|1
expr_stmt|;
name|keys
operator|=
operator|new
name|char
index|[
name|size
index|]
index|[]
expr_stmt|;
name|values
operator|=
operator|new
name|Object
index|[
name|size
index|]
expr_stmt|;
block|}
DECL|method|ignoreCase
specifier|public
name|boolean
name|ignoreCase
parameter_list|()
block|{
return|return
name|ignoreCase
return|;
block|}
DECL|method|get
specifier|public
name|V
name|get
parameter_list|(
name|char
index|[]
name|key
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|key
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|get
specifier|public
name|V
name|get
parameter_list|(
name|char
index|[]
name|key
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
return|return
operator|(
name|V
operator|)
name|values
index|[
name|getSlot
argument_list|(
name|key
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
index|]
return|;
block|}
DECL|method|get
specifier|public
name|V
name|get
parameter_list|(
name|CharSequence
name|key
parameter_list|)
block|{
return|return
operator|(
name|V
operator|)
name|values
index|[
name|getSlot
argument_list|(
name|key
argument_list|)
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|V
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
operator|(
name|V
operator|)
name|values
index|[
name|getSlot
argument_list|(
name|key
argument_list|)
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|containsKey
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|s
parameter_list|)
block|{
return|return
name|keys
index|[
name|getSlot
argument_list|(
name|s
argument_list|)
index|]
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|containsValue
specifier|public
name|boolean
name|containsValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
comment|// search for key with a null value
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|keys
index|[
name|i
index|]
operator|!=
literal|null
operator|&&
name|values
index|[
name|i
index|]
operator|==
literal|null
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|val
init|=
name|values
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
operator|&&
name|value
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|getSlot
specifier|private
name|int
name|getSlot
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|instanceof
name|char
index|[]
condition|)
block|{
name|char
index|[]
name|keyc
init|=
operator|(
name|char
index|[]
operator|)
name|key
decl_stmt|;
return|return
name|getSlot
argument_list|(
name|keyc
argument_list|,
literal|0
argument_list|,
name|keyc
operator|.
name|length
argument_list|)
return|;
block|}
return|return
name|getSlot
argument_list|(
operator|(
name|CharSequence
operator|)
name|key
argument_list|)
return|;
block|}
DECL|method|getSlot
specifier|private
name|int
name|getSlot
parameter_list|(
name|char
index|[]
name|key
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|int
name|code
init|=
name|getHashCode
argument_list|(
name|key
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|code
operator|&
operator|(
name|keys
operator|.
name|length
operator|-
literal|1
operator|)
decl_stmt|;
name|char
index|[]
name|key2
init|=
name|keys
index|[
name|pos
index|]
decl_stmt|;
if|if
condition|(
name|key2
operator|!=
literal|null
operator|&&
operator|!
name|equals
argument_list|(
name|key
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
name|key2
argument_list|)
condition|)
block|{
specifier|final
name|int
name|inc
init|=
operator|(
operator|(
name|code
operator|>>
literal|8
operator|)
operator|+
name|code
operator|)
operator||
literal|1
decl_stmt|;
do|do
block|{
name|code
operator|+=
name|inc
expr_stmt|;
name|pos
operator|=
name|code
operator|&
operator|(
name|keys
operator|.
name|length
operator|-
literal|1
operator|)
expr_stmt|;
name|key2
operator|=
name|keys
index|[
name|pos
index|]
expr_stmt|;
block|}
do|while
condition|(
name|key2
operator|!=
literal|null
operator|&&
operator|!
name|equals
argument_list|(
name|key
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
name|key2
argument_list|)
condition|)
do|;
block|}
return|return
name|pos
return|;
block|}
comment|/** Returns true if the String is in the set */
DECL|method|getSlot
specifier|private
name|int
name|getSlot
parameter_list|(
name|CharSequence
name|key
parameter_list|)
block|{
name|int
name|code
init|=
name|getHashCode
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|code
operator|&
operator|(
name|keys
operator|.
name|length
operator|-
literal|1
operator|)
decl_stmt|;
name|char
index|[]
name|key2
init|=
name|keys
index|[
name|pos
index|]
decl_stmt|;
if|if
condition|(
name|key2
operator|!=
literal|null
operator|&&
operator|!
name|equals
argument_list|(
name|key
argument_list|,
name|key2
argument_list|)
condition|)
block|{
specifier|final
name|int
name|inc
init|=
operator|(
operator|(
name|code
operator|>>
literal|8
operator|)
operator|+
name|code
operator|)
operator||
literal|1
decl_stmt|;
do|do
block|{
name|code
operator|+=
name|inc
expr_stmt|;
name|pos
operator|=
name|code
operator|&
operator|(
name|keys
operator|.
name|length
operator|-
literal|1
operator|)
expr_stmt|;
name|key2
operator|=
name|keys
index|[
name|pos
index|]
expr_stmt|;
block|}
do|while
condition|(
name|key2
operator|!=
literal|null
operator|&&
operator|!
name|equals
argument_list|(
name|key
argument_list|,
name|key2
argument_list|)
condition|)
do|;
block|}
return|return
name|pos
return|;
block|}
DECL|method|put
specifier|public
name|V
name|put
parameter_list|(
name|CharSequence
name|key
parameter_list|,
name|V
name|val
parameter_list|)
block|{
return|return
name|put
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|val
argument_list|)
return|;
comment|// could be more efficient
block|}
annotation|@
name|Override
DECL|method|put
specifier|public
name|V
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|V
name|val
parameter_list|)
block|{
return|return
name|put
argument_list|(
name|key
operator|.
name|toCharArray
argument_list|()
argument_list|,
name|val
argument_list|)
return|;
block|}
comment|/** Add this key,val pair to the map.    * The char[] key is directly used, no copy is made.    * If ignoreCase is true for this Map, the key array will be directly modified.    * The user should never modify the key after calling this method.    */
DECL|method|put
specifier|public
name|V
name|put
parameter_list|(
name|char
index|[]
name|key
parameter_list|,
name|Object
name|val
parameter_list|)
block|{
if|if
condition|(
name|ignoreCase
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|key
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|key
index|[
name|i
index|]
operator|=
name|Character
operator|.
name|toLowerCase
argument_list|(
name|key
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|int
name|slot
init|=
name|getSlot
argument_list|(
name|key
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|keys
index|[
name|slot
index|]
operator|==
literal|null
condition|)
name|count
operator|++
expr_stmt|;
name|Object
name|prev
init|=
name|values
index|[
name|slot
index|]
decl_stmt|;
name|keys
index|[
name|slot
index|]
operator|=
name|key
expr_stmt|;
name|values
index|[
name|slot
index|]
operator|=
name|val
expr_stmt|;
if|if
condition|(
name|count
operator|+
operator|(
name|count
operator|>>
literal|2
operator|)
operator|>=
name|keys
operator|.
name|length
condition|)
block|{
name|rehash
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|V
operator|)
name|prev
return|;
block|}
DECL|method|equals
specifier|private
name|boolean
name|equals
parameter_list|(
name|char
index|[]
name|text1
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|,
name|char
index|[]
name|text2
parameter_list|)
block|{
if|if
condition|(
name|len
operator|!=
name|text2
operator|.
name|length
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|ignoreCase
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|Character
operator|.
name|toLowerCase
argument_list|(
name|text1
index|[
name|off
operator|+
name|i
index|]
argument_list|)
operator|!=
name|text2
index|[
name|i
index|]
condition|)
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|text1
index|[
name|off
operator|+
name|i
index|]
operator|!=
name|text2
index|[
name|i
index|]
condition|)
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|equals
specifier|private
name|boolean
name|equals
parameter_list|(
name|CharSequence
name|text1
parameter_list|,
name|char
index|[]
name|text2
parameter_list|)
block|{
name|int
name|len
init|=
name|text1
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|!=
name|text2
operator|.
name|length
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|ignoreCase
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|Character
operator|.
name|toLowerCase
argument_list|(
name|text1
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
operator|!=
name|text2
index|[
name|i
index|]
condition|)
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|text1
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|!=
name|text2
index|[
name|i
index|]
condition|)
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|rehash
specifier|private
name|void
name|rehash
parameter_list|()
block|{
specifier|final
name|int
name|newSize
init|=
literal|2
operator|*
name|keys
operator|.
name|length
decl_stmt|;
name|char
index|[]
index|[]
name|oldEntries
init|=
name|keys
decl_stmt|;
name|Object
index|[]
name|oldValues
init|=
name|values
decl_stmt|;
name|keys
operator|=
operator|new
name|char
index|[
name|newSize
index|]
index|[]
expr_stmt|;
name|values
operator|=
operator|new
name|Object
index|[
name|newSize
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oldEntries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|char
index|[]
name|key
init|=
name|oldEntries
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
comment|// todo: could be faster... no need to compare keys on collision
comment|// since they are unique
name|int
name|newSlot
init|=
name|getSlot
argument_list|(
name|key
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|length
argument_list|)
decl_stmt|;
name|keys
index|[
name|newSlot
index|]
operator|=
name|key
expr_stmt|;
name|values
index|[
name|newSlot
index|]
operator|=
name|oldValues
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
block|}
DECL|method|getHashCode
specifier|private
name|int
name|getHashCode
parameter_list|(
name|char
index|[]
name|text
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|int
name|code
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|ignoreCase
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|code
operator|=
name|code
operator|*
literal|31
operator|+
name|Character
operator|.
name|toLowerCase
argument_list|(
name|text
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|code
operator|=
name|code
operator|*
literal|31
operator|+
name|text
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
return|return
name|code
return|;
block|}
DECL|method|getHashCode
specifier|private
name|int
name|getHashCode
parameter_list|(
name|CharSequence
name|text
parameter_list|)
block|{
name|int
name|code
decl_stmt|;
if|if
condition|(
name|ignoreCase
condition|)
block|{
name|code
operator|=
literal|0
expr_stmt|;
name|int
name|len
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|code
operator|=
name|code
operator|*
literal|31
operator|+
name|Character
operator|.
name|toLowerCase
argument_list|(
name|text
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
literal|false
operator|&&
name|text
operator|instanceof
name|String
condition|)
block|{
name|code
operator|=
name|text
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|code
operator|=
literal|0
expr_stmt|;
name|int
name|len
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|code
operator|=
name|code
operator|*
literal|31
operator|+
name|text
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|code
return|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|count
return|;
block|}
annotation|@
name|Override
DECL|method|isEmpty
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|count
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|count
operator|=
literal|0
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|keys
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|values
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|entrySet
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
return|return
operator|new
name|EntrySet
argument_list|()
return|;
block|}
comment|/** Returns an EntryIterator over this Map. */
DECL|method|iterator
specifier|public
name|EntryIterator
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|EntryIterator
argument_list|()
return|;
block|}
comment|/** public iterator class so efficient methods are exposed to users */
DECL|class|EntryIterator
specifier|public
class|class
name|EntryIterator
implements|implements
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|field|pos
name|int
name|pos
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|lastPos
name|int
name|lastPos
decl_stmt|;
DECL|method|EntryIterator
name|EntryIterator
parameter_list|()
block|{
name|goNext
argument_list|()
expr_stmt|;
block|}
DECL|method|goNext
specifier|private
name|void
name|goNext
parameter_list|()
block|{
name|lastPos
operator|=
name|pos
expr_stmt|;
name|pos
operator|++
expr_stmt|;
while|while
condition|(
name|pos
operator|<
name|keys
operator|.
name|length
operator|&&
name|keys
index|[
name|pos
index|]
operator|==
literal|null
condition|)
name|pos
operator|++
expr_stmt|;
block|}
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|pos
operator|<
name|keys
operator|.
name|length
return|;
block|}
comment|/** gets the next key... do not modify the returned char[] */
DECL|method|nextKey
specifier|public
name|char
index|[]
name|nextKey
parameter_list|()
block|{
name|goNext
argument_list|()
expr_stmt|;
return|return
name|keys
index|[
name|lastPos
index|]
return|;
block|}
comment|/** gets the next key as a newly created String object */
DECL|method|nextKeyString
specifier|public
name|String
name|nextKeyString
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|nextKey
argument_list|()
argument_list|)
return|;
block|}
comment|/** returns the value associated with the last key returned */
DECL|method|currentValue
specifier|public
name|V
name|currentValue
parameter_list|()
block|{
return|return
operator|(
name|V
operator|)
name|values
index|[
name|lastPos
index|]
return|;
block|}
comment|/** sets the value associated with the last key returned */
DECL|method|setValue
specifier|public
name|V
name|setValue
parameter_list|(
name|V
name|value
parameter_list|)
block|{
name|V
name|old
init|=
operator|(
name|V
operator|)
name|values
index|[
name|lastPos
index|]
decl_stmt|;
name|values
index|[
name|lastPos
index|]
operator|=
name|value
expr_stmt|;
return|return
name|old
return|;
block|}
comment|/** Returns an Entry<String,V> object created on the fly...      * use nextCharArray() + currentValie() for better efficiency. */
DECL|method|next
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
name|next
parameter_list|()
block|{
name|goNext
argument_list|()
expr_stmt|;
return|return
operator|new
name|MapEntry
argument_list|(
name|lastPos
argument_list|)
return|;
block|}
DECL|method|remove
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
DECL|class|MapEntry
specifier|private
class|class
name|MapEntry
implements|implements
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
block|{
DECL|field|pos
specifier|final
name|int
name|pos
decl_stmt|;
DECL|method|MapEntry
name|MapEntry
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|this
operator|.
name|pos
operator|=
name|pos
expr_stmt|;
block|}
DECL|method|getCharArr
specifier|public
name|char
index|[]
name|getCharArr
parameter_list|()
block|{
return|return
name|keys
index|[
name|pos
index|]
return|;
block|}
DECL|method|getKey
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|getCharArr
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getValue
specifier|public
name|V
name|getValue
parameter_list|()
block|{
return|return
operator|(
name|V
operator|)
name|values
index|[
name|pos
index|]
return|;
block|}
DECL|method|setValue
specifier|public
name|V
name|setValue
parameter_list|(
name|V
name|value
parameter_list|)
block|{
name|V
name|old
init|=
operator|(
name|V
operator|)
name|values
index|[
name|pos
index|]
decl_stmt|;
name|values
index|[
name|pos
index|]
operator|=
name|value
expr_stmt|;
return|return
name|old
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getKey
argument_list|()
operator|+
literal|'='
operator|+
name|getValue
argument_list|()
return|;
block|}
block|}
DECL|class|EntrySet
specifier|private
class|class
name|EntrySet
extends|extends
name|AbstractSet
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|method|iterator
specifier|public
name|EntryIterator
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|EntryIterator
argument_list|()
return|;
block|}
DECL|method|contains
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|Map
operator|.
name|Entry
operator|)
condition|)
return|return
literal|false
return|;
name|Map
operator|.
name|Entry
name|e
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|o
decl_stmt|;
name|Object
name|key
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
return|return
literal|false
return|;
comment|// we don't support null keys
name|Object
name|val
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Object
name|v
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|v
operator|==
literal|null
condition|?
name|val
operator|==
literal|null
else|:
name|v
operator|.
name|equals
argument_list|(
name|val
argument_list|)
return|;
block|}
DECL|method|remove
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|count
return|;
block|}
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|CharArrayMap
operator|.
name|this
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|CharArrayMap
argument_list|<
name|V
argument_list|>
name|map
init|=
literal|null
decl_stmt|;
try|try
block|{
name|map
operator|=
operator|(
name|CharArrayMap
argument_list|<
name|V
argument_list|>
operator|)
name|super
operator|.
name|clone
argument_list|()
expr_stmt|;
name|map
operator|.
name|keys
operator|=
name|keys
operator|.
name|clone
argument_list|()
expr_stmt|;
name|map
operator|.
name|values
operator|=
name|values
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
comment|// impossible
block|}
return|return
name|map
return|;
block|}
block|}
end_class
end_unit
