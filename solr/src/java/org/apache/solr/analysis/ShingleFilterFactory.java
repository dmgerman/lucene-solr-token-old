begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|shingle
operator|.
name|ShingleFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/** Factory for {@link ShingleFilter} */
end_comment
begin_class
DECL|class|ShingleFilterFactory
specifier|public
class|class
name|ShingleFilterFactory
extends|extends
name|BaseTokenFilterFactory
block|{
DECL|field|minShingleSize
specifier|private
name|int
name|minShingleSize
decl_stmt|;
DECL|field|maxShingleSize
specifier|private
name|int
name|maxShingleSize
decl_stmt|;
DECL|field|outputUnigrams
specifier|private
name|boolean
name|outputUnigrams
decl_stmt|;
DECL|field|outputUnigramsIfNoShingles
specifier|private
name|boolean
name|outputUnigramsIfNoShingles
decl_stmt|;
DECL|field|tokenSeparator
specifier|private
name|String
name|tokenSeparator
decl_stmt|;
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|maxShingleSize
operator|=
name|getInt
argument_list|(
literal|"maxShingleSize"
argument_list|,
name|ShingleFilter
operator|.
name|DEFAULT_MAX_SHINGLE_SIZE
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxShingleSize
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Invalid maxShingleSize ("
operator|+
name|maxShingleSize
operator|+
literal|") - must be at least 2"
argument_list|)
throw|;
block|}
name|minShingleSize
operator|=
name|getInt
argument_list|(
literal|"minShingleSize"
argument_list|,
name|ShingleFilter
operator|.
name|DEFAULT_MIN_SHINGLE_SIZE
argument_list|)
expr_stmt|;
if|if
condition|(
name|minShingleSize
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Invalid minShingleSize ("
operator|+
name|minShingleSize
operator|+
literal|") - must be at least 2"
argument_list|)
throw|;
block|}
if|if
condition|(
name|minShingleSize
operator|>
name|maxShingleSize
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Invalid minShingleSize ("
operator|+
name|minShingleSize
operator|+
literal|") - must be no greater than maxShingleSize ("
operator|+
name|maxShingleSize
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|outputUnigrams
operator|=
name|getBoolean
argument_list|(
literal|"outputUnigrams"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|outputUnigramsIfNoShingles
operator|=
name|getBoolean
argument_list|(
literal|"outputUnigramsIfNoShingles"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tokenSeparator
operator|=
name|args
operator|.
name|containsKey
argument_list|(
literal|"tokenSeparator"
argument_list|)
condition|?
name|args
operator|.
name|get
argument_list|(
literal|"tokenSeparator"
argument_list|)
else|:
name|ShingleFilter
operator|.
name|TOKEN_SEPARATOR
expr_stmt|;
block|}
DECL|method|create
specifier|public
name|ShingleFilter
name|create
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|ShingleFilter
name|r
init|=
operator|new
name|ShingleFilter
argument_list|(
name|input
argument_list|,
name|minShingleSize
argument_list|,
name|maxShingleSize
argument_list|)
decl_stmt|;
name|r
operator|.
name|setOutputUnigrams
argument_list|(
name|outputUnigrams
argument_list|)
expr_stmt|;
name|r
operator|.
name|setOutputUnigramsIfNoShingles
argument_list|(
name|outputUnigramsIfNoShingles
argument_list|)
expr_stmt|;
name|r
operator|.
name|setTokenSeparator
argument_list|(
name|tokenSeparator
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
block|}
end_class
end_unit
