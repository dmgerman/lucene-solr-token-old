begin_unit
begin_comment
comment|/*  * Licensed under the Apache License,   * Version 2.0 (the "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software distributed under the License   * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and limitations under the License.   */
end_comment
begin_package
DECL|package|org.apache.solr.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CharArraySet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_comment
comment|/*  * TODO: Rewrite to use new TokenStream api from lucene 2.9 when BufferedTokenStream uses it.  * TODO: Consider implementing https://issues.apache.org/jira/browse/LUCENE-1688 changes to stop list and  * associated constructors   */
end_comment
begin_comment
comment|/**  * Construct bigrams for frequently occurring terms while indexing. Single terms  * are still indexed too, with bigrams overlaid. This is achieved through the  * use of {@link Token#setPositionIncrement(int)}. Bigrams have a type  * of "gram" Example  *<ul>  *<li>input:"the quick brown fox"</li>  *<li>output:|"the","the-quick"|"brown"|"fox"|</li>  *<li>"the-quick" has a position increment of 0 so it is in the same position  * as "the" "the-quick" has a term.type() of "gram"</li>  *   *</ul>  */
end_comment
begin_comment
comment|/*  * Constructors and makeCommonSet based on similar code in StopFilter  */
end_comment
begin_class
DECL|class|CommonGramsFilter
specifier|public
class|class
name|CommonGramsFilter
extends|extends
name|BufferedTokenStream
block|{
DECL|field|SEPARATOR
specifier|private
specifier|static
specifier|final
name|char
name|SEPARATOR
init|=
literal|'_'
decl_stmt|;
DECL|field|commonWords
specifier|private
specifier|final
name|CharArraySet
name|commonWords
decl_stmt|;
DECL|field|buffer
specifier|private
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|/**    * Construct a token stream filtering the given input using a Set of common    * words to create bigrams. Outputs both unigrams with position increment and    * bigrams with position increment 0 type=gram where one or both of the words    * in a potential bigram are in the set of common words .    *     * @param input TokenStream input in filter chain    * @param commonWords The set of common words.    *     */
DECL|method|CommonGramsFilter
specifier|public
name|CommonGramsFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|,
name|Set
name|commonWords
parameter_list|)
block|{
name|this
argument_list|(
name|input
argument_list|,
name|commonWords
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a token stream filtering the given input using a Set of common    * words to create bigrams, case-sensitive if ignoreCase is false (unless Set    * is CharArraySet). If<code>commonWords</code> is an instance of    * {@link CharArraySet} (true if<code>makeCommonSet()</code> was used to    * construct the set) it will be directly used and<code>ignoreCase</code>    * will be ignored since<code>CharArraySet</code> directly controls case    * sensitivity.    *<p/>    * If<code>commonWords</code> is not an instance of {@link CharArraySet}, a    * new CharArraySet will be constructed and<code>ignoreCase</code> will be    * used to specify the case sensitivity of that set.    *     * @param input TokenStream input in filter chain.    * @param commonWords The set of common words.    * @param ignoreCase -Ignore case when constructing bigrams for common words.    */
DECL|method|CommonGramsFilter
specifier|public
name|CommonGramsFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|,
name|Set
name|commonWords
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
if|if
condition|(
name|commonWords
operator|instanceof
name|CharArraySet
condition|)
block|{
name|this
operator|.
name|commonWords
operator|=
operator|(
name|CharArraySet
operator|)
name|commonWords
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|commonWords
operator|=
operator|new
name|CharArraySet
argument_list|(
name|commonWords
operator|.
name|size
argument_list|()
argument_list|,
name|ignoreCase
argument_list|)
expr_stmt|;
name|this
operator|.
name|commonWords
operator|.
name|addAll
argument_list|(
name|commonWords
argument_list|)
expr_stmt|;
block|}
name|init
argument_list|()
expr_stmt|;
block|}
comment|/**    * Construct a token stream filtering the given input using an Array of common    * words to create bigrams.    *     * @param input Tokenstream in filter chain    * @param commonWords words to be used in constructing bigrams    */
DECL|method|CommonGramsFilter
specifier|public
name|CommonGramsFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|,
name|String
index|[]
name|commonWords
parameter_list|)
block|{
name|this
argument_list|(
name|input
argument_list|,
name|commonWords
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
comment|/**    * Construct a token stream filtering the given input using an Array of common    * words to create bigrams and is case-sensitive if ignoreCase is false.    *     * @param input Tokenstream in filter chain    * @param commonWords words to be used in constructing bigrams    * @param ignoreCase -Ignore case when constructing bigrams for common words.    */
DECL|method|CommonGramsFilter
specifier|public
name|CommonGramsFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|,
name|String
index|[]
name|commonWords
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|this
operator|.
name|commonWords
operator|=
operator|(
name|CharArraySet
operator|)
name|makeCommonSet
argument_list|(
name|commonWords
argument_list|,
name|ignoreCase
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
comment|// Here for future moving to 2.9 api See StopFilter code
DECL|method|init
specifier|public
name|void
name|init
parameter_list|()
block|{
comment|/**      * termAtt = (TermAttribute) addAttribute(TermAttribute.class); posIncrAtt      * =(PositionIncrementAttribute)      * addAttribute(PositionIncrementAttribute.class); typeAdd =(TypeAttribute)      * addAttribute(TypeAttribute.class);      */
block|}
comment|/**    * Build a CharArraySet from an array of common words, appropriate for passing    * into the CommonGramsFilter constructor. This permits this commonWords    * construction to be cached once when an Analyzer is constructed.    *     * @see #makeCommonSet(java.lang.String[], boolean) passing false to    *      ignoreCase    */
DECL|method|makeCommonSet
specifier|public
specifier|static
specifier|final
name|CharArraySet
name|makeCommonSet
parameter_list|(
name|String
index|[]
name|commonWords
parameter_list|)
block|{
return|return
name|makeCommonSet
argument_list|(
name|commonWords
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Build a CharArraySet from an array of common words, appropriate for passing    * into the CommonGramsFilter constructor,case-sensitive if ignoreCase is    * false.    *     * @param commonWords    * @param ignoreCase If true, all words are lower cased first.    * @return a Set containing the words    */
DECL|method|makeCommonSet
specifier|public
specifier|static
specifier|final
name|CharArraySet
name|makeCommonSet
parameter_list|(
name|String
index|[]
name|commonWords
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|)
block|{
name|CharArraySet
name|commonSet
init|=
operator|new
name|CharArraySet
argument_list|(
name|commonWords
operator|.
name|length
argument_list|,
name|ignoreCase
argument_list|)
decl_stmt|;
name|commonSet
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|commonWords
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|commonSet
return|;
block|}
comment|/**    * Inserts bigrams for common words into a token stream. For each input token,    * output the token. If the token and/or the following token are in the list    * of common words also output a bigram with position increment 0 and    * type="gram"    */
comment|/*    * TODO: implement new lucene 2.9 API incrementToken() instead of deprecated    * Token.next() TODO:Consider adding an option to not emit unigram stopwords    * as in CDL XTF BigramStopFilter, CommonGramsQueryFilter would need to be    * changed to work with this. TODO: Consider optimizing for the case of three    * commongrams i.e "man of the year" normally produces 3 bigrams: "man-of",    * "of-the", "the-year" but with proper management of positions we could    * eliminate the middle bigram "of-the"and save a disk seek and a whole set of    * position lookups.    */
DECL|method|process
specifier|public
name|Token
name|process
parameter_list|(
name|Token
name|token
parameter_list|)
throws|throws
name|IOException
block|{
name|Token
name|next
init|=
name|peek
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// if this is the last token just spit it out. Any commongram would have
comment|// been output in the previous call
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
return|return
name|token
return|;
block|}
comment|/**      * if this token or next are common then construct a bigram with type="gram"      * position increment = 0, and put it in the output queue. It will be      * returned when super.next() is called, before this method gets called with      * a new token from the input stream See implementation of next() in      * BufferedTokenStream      */
if|if
condition|(
name|isCommon
argument_list|(
name|token
argument_list|)
operator|||
name|isCommon
argument_list|(
name|next
argument_list|)
condition|)
block|{
name|Token
name|gram
init|=
name|gramToken
argument_list|(
name|token
argument_list|,
name|next
argument_list|)
decl_stmt|;
name|write
argument_list|(
name|gram
argument_list|)
expr_stmt|;
block|}
comment|// we always return the unigram token
return|return
name|token
return|;
block|}
comment|/** True if token is for a common term. */
DECL|method|isCommon
specifier|private
name|boolean
name|isCommon
parameter_list|(
name|Token
name|token
parameter_list|)
block|{
return|return
name|commonWords
operator|!=
literal|null
operator|&&
name|commonWords
operator|.
name|contains
argument_list|(
name|token
operator|.
name|termBuffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|token
operator|.
name|termLength
argument_list|()
argument_list|)
return|;
block|}
comment|/** Construct a compound token. */
DECL|method|gramToken
specifier|private
name|Token
name|gramToken
parameter_list|(
name|Token
name|first
parameter_list|,
name|Token
name|second
parameter_list|)
block|{
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|first
operator|.
name|termText
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|SEPARATOR
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|second
operator|.
name|termText
argument_list|()
argument_list|)
expr_stmt|;
name|Token
name|result
init|=
operator|new
name|Token
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|,
name|first
operator|.
name|startOffset
argument_list|()
argument_list|,
name|second
operator|.
name|endOffset
argument_list|()
argument_list|,
literal|"gram"
argument_list|)
decl_stmt|;
name|result
operator|.
name|setPositionIncrement
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
