begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|ArraysUtils
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * A TokenFilter which filters out Tokens at the same position and Term  * text as the previous token in the stream.  */
end_comment
begin_class
DECL|class|RemoveDuplicatesTokenFilter
specifier|public
class|class
name|RemoveDuplicatesTokenFilter
extends|extends
name|BufferedTokenStream
block|{
DECL|method|RemoveDuplicatesTokenFilter
specifier|public
name|RemoveDuplicatesTokenFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
DECL|method|process
specifier|protected
name|Token
name|process
parameter_list|(
name|Token
name|t
parameter_list|)
throws|throws
name|IOException
block|{
name|Token
name|tok
init|=
name|read
argument_list|()
decl_stmt|;
while|while
condition|(
name|tok
operator|!=
literal|null
operator|&&
name|tok
operator|.
name|getPositionIncrement
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
literal|null
operator|!=
name|t
condition|)
block|{
name|write
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|t
operator|=
literal|null
expr_stmt|;
block|}
name|boolean
name|dup
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Token
name|outTok
range|:
name|output
argument_list|()
control|)
block|{
name|int
name|tokLen
init|=
name|tok
operator|.
name|termLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|outTok
operator|.
name|termLength
argument_list|()
operator|==
name|tokLen
operator|&&
name|ArraysUtils
operator|.
name|equals
argument_list|(
name|outTok
operator|.
name|termBuffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|tok
operator|.
name|termBuffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|tokLen
argument_list|)
condition|)
block|{
name|dup
operator|=
literal|true
expr_stmt|;
comment|//continue;;
block|}
block|}
if|if
condition|(
operator|!
name|dup
condition|)
block|{
name|write
argument_list|(
name|tok
argument_list|)
expr_stmt|;
block|}
name|tok
operator|=
name|read
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|tok
operator|!=
literal|null
condition|)
block|{
name|pushBack
argument_list|(
name|tok
argument_list|)
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
block|}
end_class
end_unit
