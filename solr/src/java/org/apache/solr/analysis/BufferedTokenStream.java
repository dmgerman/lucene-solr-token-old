begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|FlagsAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PayloadAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TypeAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeSource
import|;
end_import
begin_comment
comment|// javadoc @link
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_comment
comment|/**  * Handles input and output buffering of TokenStream  *  *<pre>  * // Example of a class implementing the rule "A" "B" => "Q" "B"  * class MyTokenStream extends BufferedTokenStream {  *   public MyTokenStream(TokenStream input) {super(input);}  *   protected Token process(Token t) throws IOException {  *     if ("A".equals(t.termText())) {  *       Token t2 = read();  *       if (t2!=null&& "B".equals(t2.termText())) t.setTermText("Q");  *       if (t2!=null) pushBack(t2);  *     }  *     return t;  *   }  * }  *  * // Example of a class implementing "A" "B" => "A" "A" "B"  * class MyTokenStream extends BufferedTokenStream {  *   public MyTokenStream(TokenStream input) {super(input);}  *   protected Token process(Token t) throws IOException {  *     if ("A".equals(t.termText())&& "B".equals(peek(1).termText()))  *       write((Token)t.clone());  *     return t;  *   }  * }  *</pre>  *  * NOTE: BufferedTokenStream does not clone() any Tokens. This is instead the   * responsibility of the implementing subclass. In the "A" "B" => "A" "A" "B"  * example above, the subclass must clone the additional "A" it creates.  *   * @deprecated This class does not support custom attributes. Extend TokenFilter instead,  * using {@link AttributeSource#captureState()} and {@link AttributeSource#restoreState()}  * which support all attributes.  */
end_comment
begin_class
annotation|@
name|Deprecated
DECL|class|BufferedTokenStream
specifier|public
specifier|abstract
class|class
name|BufferedTokenStream
extends|extends
name|TokenFilter
block|{
comment|// in the future, might be faster if we implemented as an array based CircularQueue
DECL|field|inQueue
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|Token
argument_list|>
name|inQueue
init|=
operator|new
name|LinkedList
argument_list|<
name|Token
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|outQueue
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|Token
argument_list|>
name|outQueue
init|=
operator|new
name|LinkedList
argument_list|<
name|Token
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|termAtt
specifier|private
specifier|final
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|offsetAtt
specifier|private
specifier|final
name|OffsetAttribute
name|offsetAtt
init|=
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|typeAtt
specifier|private
specifier|final
name|TypeAttribute
name|typeAtt
init|=
name|addAttribute
argument_list|(
name|TypeAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|flagsAtt
specifier|private
specifier|final
name|FlagsAttribute
name|flagsAtt
init|=
name|addAttribute
argument_list|(
name|FlagsAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|payloadAtt
specifier|private
specifier|final
name|PayloadAttribute
name|payloadAtt
init|=
name|addAttribute
argument_list|(
name|PayloadAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|posIncAtt
specifier|private
specifier|final
name|PositionIncrementAttribute
name|posIncAtt
init|=
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|BufferedTokenStream
specifier|public
name|BufferedTokenStream
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
comment|/**    * Process a token.  Subclasses may read more tokens from the input stream,    * write more tokens to the output stream, or simply return the next token    * to be output.  Subclasses may return null if the token is to be dropped.    * If a subclass writes tokens to the output stream and returns a    * non-null Token, the returned Token is considered to be at the head of    * the token output stream.    */
DECL|method|process
specifier|protected
specifier|abstract
name|Token
name|process
parameter_list|(
name|Token
name|t
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|incrementToken
specifier|public
specifier|final
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
operator|!
name|outQueue
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|writeToken
argument_list|(
name|outQueue
operator|.
name|removeFirst
argument_list|()
argument_list|)
return|;
name|Token
name|t
init|=
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|t
condition|)
return|return
literal|false
return|;
name|Token
name|out
init|=
name|process
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|out
condition|)
return|return
name|writeToken
argument_list|(
name|out
argument_list|)
return|;
comment|// loop back to top in case process() put something on the output queue
block|}
block|}
comment|/**    * Read a token from the buffered input stream.      * @return null at EOS    */
DECL|method|read
specifier|protected
name|Token
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|inQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Token
name|t
init|=
name|readToken
argument_list|()
decl_stmt|;
return|return
name|t
return|;
block|}
return|return
name|inQueue
operator|.
name|removeFirst
argument_list|()
return|;
block|}
comment|/**    * Push a token back into the buffered input stream, such that it will    * be returned by a future call to<code>read()</code>    */
DECL|method|pushBack
specifier|protected
name|void
name|pushBack
parameter_list|(
name|Token
name|t
parameter_list|)
block|{
name|inQueue
operator|.
name|addFirst
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
comment|/**    * Peek n tokens ahead in the buffered input stream, without modifying    * the stream.     * @param n Number of tokens into the input stream to peek, 1 based ...    *          0 is invalid    * @return a Token which exists in the input stream, any modifications    *         made to this Token will be "real" if/when the Token is    *<code>read()</code> from the stream.    */
DECL|method|peek
specifier|protected
name|Token
name|peek
parameter_list|(
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|fillCount
init|=
name|n
operator|-
name|inQueue
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fillCount
condition|;
name|i
operator|++
control|)
block|{
name|Token
name|t
init|=
name|readToken
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|t
condition|)
return|return
literal|null
return|;
name|inQueue
operator|.
name|addLast
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
return|return
name|inQueue
operator|.
name|get
argument_list|(
name|n
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/** old api emulation for back compat */
DECL|method|readToken
specifier|private
name|Token
name|readToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|input
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|Token
name|token
init|=
operator|new
name|Token
argument_list|()
decl_stmt|;
name|token
operator|.
name|copyBuffer
argument_list|(
name|termAtt
operator|.
name|buffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|termAtt
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|.
name|setOffset
argument_list|(
name|offsetAtt
operator|.
name|startOffset
argument_list|()
argument_list|,
name|offsetAtt
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|.
name|setType
argument_list|(
name|typeAtt
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|.
name|setFlags
argument_list|(
name|flagsAtt
operator|.
name|getFlags
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|.
name|setPositionIncrement
argument_list|(
name|posIncAtt
operator|.
name|getPositionIncrement
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|.
name|setPayload
argument_list|(
name|payloadAtt
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|token
return|;
block|}
block|}
comment|/** old api emulation for back compat */
DECL|method|writeToken
specifier|private
name|boolean
name|writeToken
parameter_list|(
name|Token
name|token
parameter_list|)
throws|throws
name|IOException
block|{
name|clearAttributes
argument_list|()
expr_stmt|;
name|termAtt
operator|.
name|copyBuffer
argument_list|(
name|token
operator|.
name|buffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|token
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|offsetAtt
operator|.
name|setOffset
argument_list|(
name|token
operator|.
name|startOffset
argument_list|()
argument_list|,
name|token
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|typeAtt
operator|.
name|setType
argument_list|(
name|token
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|flagsAtt
operator|.
name|setFlags
argument_list|(
name|token
operator|.
name|getFlags
argument_list|()
argument_list|)
expr_stmt|;
name|posIncAtt
operator|.
name|setPositionIncrement
argument_list|(
name|token
operator|.
name|getPositionIncrement
argument_list|()
argument_list|)
expr_stmt|;
name|payloadAtt
operator|.
name|setPayload
argument_list|(
name|token
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Write a token to the buffered output stream    */
DECL|method|write
specifier|protected
name|void
name|write
parameter_list|(
name|Token
name|t
parameter_list|)
block|{
name|outQueue
operator|.
name|addLast
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
comment|/**    * Provides direct Iterator access to the buffered output stream.    * Modifying any token in this Iterator will affect the resulting stream.    */
DECL|method|output
specifier|protected
name|Iterable
argument_list|<
name|Token
argument_list|>
name|output
parameter_list|()
block|{
return|return
name|outQueue
return|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|inQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
name|outQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
