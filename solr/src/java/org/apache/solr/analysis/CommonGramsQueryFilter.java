begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CharArraySet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_comment
comment|/**  * Wrap a CommonGramsFilter optimizing phrase queries by only returning single  * words when they are not a member of a bigram.  *   * Example:  *<ul>  *<li>query input to CommonGramsFilter: "the rain in spain falls mainly"  *<li>output of CommomGramsFilter/input to CommonGramsQueryFilter:  * |"the, "the-rain"|"rain" "rain-in"|"in, "in-spain"|"spain"|"falls"|"mainly"  *<li>output of CommonGramsQueryFilter:"the-rain", "rain-in" ,"in-spain",  * "falls", "mainly"  *</ul>  */
end_comment
begin_comment
comment|/*  * TODO: When org.apache.solr.analysis.BufferedTokenStream is changed to use the  * 2.9 lucene TokenStream api, make necessary changes here.  * See:http://hudson.zones  * .apache.org/hudson/job/Lucene-trunk/javadoc//all/org/apache  * /lucene/analysis/TokenStream.html and  * http://svn.apache.org/viewvc/lucene/java  * /trunk/src/java/org/apache/lucene/analysis/package.html?revision=718798  */
end_comment
begin_class
DECL|class|CommonGramsQueryFilter
specifier|public
class|class
name|CommonGramsQueryFilter
extends|extends
name|BufferedTokenStream
block|{
comment|//private CharArraySet commonWords;
DECL|field|prev
specifier|private
name|Token
name|prev
decl_stmt|;
comment|/**    * Constructor    *     * @param input must be a CommonGramsFilter!    *     */
DECL|method|CommonGramsQueryFilter
specifier|public
name|CommonGramsQueryFilter
parameter_list|(
name|CommonGramsFilter
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|prev
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|prev
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
block|}
comment|/**    * Output bigrams whenever possible to optimize queries. Only output unigrams    * when they are not a member of a bigram. Example:    *<ul>    *<li>input: "the rain in spain falls mainly"    *<li>output:"the-rain", "rain-in" ,"in-spain", "falls", "mainly"    */
DECL|method|process
specifier|public
name|Token
name|process
parameter_list|(
name|Token
name|token
parameter_list|)
throws|throws
name|IOException
block|{
name|Token
name|next
init|=
name|peek
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|/*      * Deal with last token (next=null when current token is the last word) Last      * token will be a unigram. If previous token was a bigram, then we already      * output the last token as part of the unigram and should not additionally      * output the unigram.<p> Example: If the end of the input to the      * CommonGramsFilter is "...the plain"<ul><li>current token = "plain"</li>      *<li>next token = null</li><li>previous token = "the-plain" (bigram)</li>      *<li> Since the word "plain" was already output as part of the bigram we      * don't output it.</li></ul> Example: If the end of the input to the      * CommonGramsFilter is "falls mainly"<ul><li>current token =      * "mainly"</li><li>next token = null</li><li>previous token = "falls"      * (unigram)</li><li>Since we haven't yet output the current token, we      * output it</li></ul>      */
comment|// Deal with special case of last token
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|prev
operator|==
literal|null
condition|)
block|{
comment|// This is the first and only token i.e. one word query
return|return
name|token
return|;
block|}
if|if
condition|(
name|prev
operator|!=
literal|null
operator|&&
name|prev
operator|.
name|type
argument_list|()
operator|!=
literal|"gram"
condition|)
block|{
comment|// If previous token was a unigram, output the current token
return|return
name|token
return|;
block|}
else|else
block|{
comment|// If previous token was a bigram, we already output it and this token
comment|// was output as part of the bigram so we are done.
return|return
literal|null
return|;
block|}
block|}
comment|/*      * Possible cases are: |token |next 1|word |gram 2|word |word The      * CommonGramsFilter we are wrapping always outputs the unigram word prior      * to outputting an optional bigram: "the sound of" gets output as |"the",      * "the_sound"|"sound", "sound_of" For case 1 we consume the gram from the      * input stream and output it rather than the current token This means that      * the call to super.next() which reads a token from input and passes it on      * to this process method will always get a token of type word      */
if|if
condition|(
name|next
operator|!=
literal|null
operator|&&
name|next
operator|.
name|type
argument_list|()
operator|==
literal|"gram"
condition|)
block|{
comment|// consume "next" token from list and output it
name|token
operator|=
name|read
argument_list|()
expr_stmt|;
comment|// use this to clone the token because clone requires all these args but
comment|// won't take the token.type
comment|// see
comment|// http://hudson.zones.apache.org/hudson/job/Lucene-trunk/javadoc//all/org/apache/lucene/analysis/Token.html
name|prev
operator|.
name|reinit
argument_list|(
name|token
operator|.
name|termBuffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|token
operator|.
name|termLength
argument_list|()
argument_list|,
name|token
operator|.
name|startOffset
argument_list|()
argument_list|,
name|token
operator|.
name|endOffset
argument_list|()
argument_list|,
name|token
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|.
name|setPositionIncrement
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|token
return|;
block|}
comment|// if the next token is not a bigram, then output the token
comment|// see note above regarding this method of copying token to prev
name|prev
operator|.
name|reinit
argument_list|(
name|token
operator|.
name|termBuffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|token
operator|.
name|termLength
argument_list|()
argument_list|,
name|token
operator|.
name|startOffset
argument_list|()
argument_list|,
name|token
operator|.
name|endOffset
argument_list|()
argument_list|,
name|token
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
name|token
operator|.
name|type
argument_list|()
operator|==
literal|"word"
assert|;
return|return
name|token
return|;
block|}
block|}
end_class
end_unit
