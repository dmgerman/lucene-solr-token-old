begin_unit
begin_package
DECL|package|org.apache.solr.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
operator|.
name|WordDelimiterFilter
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * A BreakIterator-like API for iterating over subwords in text, according to WordDelimiterFilter rules.  */
end_comment
begin_class
DECL|class|WordDelimiterIterator
specifier|final
class|class
name|WordDelimiterIterator
block|{
comment|/** Indicates the end of iteration */
DECL|field|DONE
specifier|public
specifier|static
specifier|final
name|int
name|DONE
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|DEFAULT_WORD_DELIM_TABLE
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|DEFAULT_WORD_DELIM_TABLE
decl_stmt|;
DECL|field|text
name|char
name|text
index|[]
decl_stmt|;
DECL|field|length
name|int
name|length
decl_stmt|;
comment|/** start position of text, excluding leading delimiters */
DECL|field|startBounds
name|int
name|startBounds
decl_stmt|;
comment|/** end position of text, excluding trailing delimiters */
DECL|field|endBounds
name|int
name|endBounds
decl_stmt|;
comment|/** Beginning of subword */
DECL|field|current
name|int
name|current
decl_stmt|;
comment|/** End of subword */
DECL|field|end
name|int
name|end
decl_stmt|;
comment|/* does this string end with a possessive such as 's */
DECL|field|hasFinalPossessive
specifier|private
name|boolean
name|hasFinalPossessive
init|=
literal|false
decl_stmt|;
comment|/**    * If false, causes case changes to be ignored (subwords will only be generated    * given SUBWORD_DELIM tokens). (Defaults to true)    */
DECL|field|splitOnCaseChange
specifier|final
name|boolean
name|splitOnCaseChange
decl_stmt|;
comment|/**    * If false, causes numeric changes to be ignored (subwords will only be generated    * given SUBWORD_DELIM tokens). (Defaults to true)    */
DECL|field|splitOnNumerics
specifier|final
name|boolean
name|splitOnNumerics
decl_stmt|;
comment|/**    * If true, causes trailing "'s" to be removed for each subword. (Defaults to true)    *<p/>    * "O'Neil's" => "O", "Neil"    */
DECL|field|stemEnglishPossessive
specifier|final
name|boolean
name|stemEnglishPossessive
decl_stmt|;
DECL|field|charTypeTable
specifier|private
specifier|final
name|byte
index|[]
name|charTypeTable
decl_stmt|;
comment|/** if true, need to skip over a possessive found in the last call to next() */
DECL|field|skipPossessive
specifier|private
name|boolean
name|skipPossessive
init|=
literal|false
decl_stmt|;
comment|// TODO: should there be a WORD_DELIM category for chars that only separate words (no catenation of subwords will be
comment|// done if separated by these chars?) "," would be an obvious candidate...
static|static
block|{
name|byte
index|[]
name|tab
init|=
operator|new
name|byte
index|[
literal|256
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|code
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|isLowerCase
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|code
operator||=
name|LOWER
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Character
operator|.
name|isUpperCase
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|code
operator||=
name|UPPER
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Character
operator|.
name|isDigit
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|code
operator||=
name|DIGIT
expr_stmt|;
block|}
if|if
condition|(
name|code
operator|==
literal|0
condition|)
block|{
name|code
operator|=
name|SUBWORD_DELIM
expr_stmt|;
block|}
name|tab
index|[
name|i
index|]
operator|=
name|code
expr_stmt|;
block|}
name|DEFAULT_WORD_DELIM_TABLE
operator|=
name|tab
expr_stmt|;
block|}
comment|/**    * Create a new WordDelimiterIterator operating with the supplied rules.    *     * @param charTypeTable table containing character types    * @param splitOnCaseChange if true, causes "PowerShot" to be two tokens; ("Power-Shot" remains two parts regards)    * @param splitOnNumerics if true, causes "j2se" to be three tokens; "j" "2" "se"    * @param stemEnglishPossessive if true, causes trailing "'s" to be removed for each subword: "O'Neil's" => "O", "Neil"    */
DECL|method|WordDelimiterIterator
name|WordDelimiterIterator
parameter_list|(
name|byte
index|[]
name|charTypeTable
parameter_list|,
name|boolean
name|splitOnCaseChange
parameter_list|,
name|boolean
name|splitOnNumerics
parameter_list|,
name|boolean
name|stemEnglishPossessive
parameter_list|)
block|{
name|this
operator|.
name|charTypeTable
operator|=
name|charTypeTable
expr_stmt|;
name|this
operator|.
name|splitOnCaseChange
operator|=
name|splitOnCaseChange
expr_stmt|;
name|this
operator|.
name|splitOnNumerics
operator|=
name|splitOnNumerics
expr_stmt|;
name|this
operator|.
name|stemEnglishPossessive
operator|=
name|stemEnglishPossessive
expr_stmt|;
block|}
comment|/**    * Advance to the next subword in the string.    *    * @return index of the next subword, or {@link #DONE} if all subwords have been returned    */
DECL|method|next
name|int
name|next
parameter_list|()
block|{
name|current
operator|=
name|end
expr_stmt|;
if|if
condition|(
name|current
operator|==
name|DONE
condition|)
block|{
return|return
name|DONE
return|;
block|}
if|if
condition|(
name|skipPossessive
condition|)
block|{
name|current
operator|+=
literal|2
expr_stmt|;
name|skipPossessive
operator|=
literal|false
expr_stmt|;
block|}
name|int
name|lastType
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|current
operator|<
name|endBounds
operator|&&
operator|(
name|isSubwordDelim
argument_list|(
name|lastType
operator|=
name|charType
argument_list|(
name|text
index|[
name|current
index|]
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|current
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|current
operator|>=
name|endBounds
condition|)
block|{
return|return
name|end
operator|=
name|DONE
return|;
block|}
for|for
control|(
name|end
operator|=
name|current
operator|+
literal|1
init|;
name|end
operator|<
name|endBounds
condition|;
name|end
operator|++
control|)
block|{
name|int
name|type
init|=
name|charType
argument_list|(
name|text
index|[
name|end
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|isBreak
argument_list|(
name|lastType
argument_list|,
name|type
argument_list|)
condition|)
block|{
break|break;
block|}
name|lastType
operator|=
name|type
expr_stmt|;
block|}
if|if
condition|(
name|end
operator|<
name|endBounds
operator|-
literal|1
operator|&&
name|endsWithPossessive
argument_list|(
name|end
operator|+
literal|2
argument_list|)
condition|)
block|{
name|skipPossessive
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|end
return|;
block|}
comment|/**    * Return the type of the current subword.    * This currently uses the type of the first character in the subword.    *    * @return type of the current word    */
DECL|method|type
name|int
name|type
parameter_list|()
block|{
if|if
condition|(
name|end
operator|==
name|DONE
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|type
init|=
name|charType
argument_list|(
name|text
index|[
name|current
index|]
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
comment|// return ALPHA word type for both lower and upper
case|case
name|LOWER
case|:
case|case
name|UPPER
case|:
return|return
name|ALPHA
return|;
default|default:
return|return
name|type
return|;
block|}
block|}
comment|/**    * Reset the text to a new value, and reset all state    *    * @param text New text    * @param length length of the text    */
DECL|method|setText
name|void
name|setText
parameter_list|(
name|char
name|text
index|[]
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|this
operator|.
name|endBounds
operator|=
name|length
expr_stmt|;
name|current
operator|=
name|startBounds
operator|=
name|end
operator|=
literal|0
expr_stmt|;
name|skipPossessive
operator|=
name|hasFinalPossessive
operator|=
literal|false
expr_stmt|;
name|setBounds
argument_list|()
expr_stmt|;
block|}
comment|// ================================================= Helper Methods ================================================
comment|/**    * Determines whether the transition from lastType to type indicates a break    *    * @param lastType Last subword type    * @param type Current subword type    * @return {@code true} if the transition indicates a break, {@code false} otherwise    */
DECL|method|isBreak
specifier|private
name|boolean
name|isBreak
parameter_list|(
name|int
name|lastType
parameter_list|,
name|int
name|type
parameter_list|)
block|{
if|if
condition|(
operator|(
name|type
operator|&
name|lastType
operator|)
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|splitOnCaseChange
operator|&&
name|isAlpha
argument_list|(
name|lastType
argument_list|)
operator|&&
name|isAlpha
argument_list|(
name|type
argument_list|)
condition|)
block|{
comment|// ALPHA->ALPHA: always ignore if case isn't considered.
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|isUpper
argument_list|(
name|lastType
argument_list|)
operator|&&
name|isAlpha
argument_list|(
name|type
argument_list|)
condition|)
block|{
comment|// UPPER->letter: Don't split
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|splitOnNumerics
operator|&&
operator|(
operator|(
name|isAlpha
argument_list|(
name|lastType
argument_list|)
operator|&&
name|isDigit
argument_list|(
name|type
argument_list|)
operator|)
operator|||
operator|(
name|isDigit
argument_list|(
name|lastType
argument_list|)
operator|&&
name|isAlpha
argument_list|(
name|type
argument_list|)
operator|)
operator|)
condition|)
block|{
comment|// ALPHA->NUMERIC, NUMERIC->ALPHA :Don't split
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Determines if the current word contains only one subword.  Note, it could be potentially surrounded by delimiters    *    * @return {@code true} if the current word contains only one subword, {@code false} otherwise    */
DECL|method|isSingleWord
name|boolean
name|isSingleWord
parameter_list|()
block|{
if|if
condition|(
name|hasFinalPossessive
condition|)
block|{
return|return
name|current
operator|==
name|startBounds
operator|&&
name|end
operator|==
name|endBounds
operator|-
literal|2
return|;
block|}
else|else
block|{
return|return
name|current
operator|==
name|startBounds
operator|&&
name|end
operator|==
name|endBounds
return|;
block|}
block|}
comment|/**    * Set the internal word bounds (remove leading and trailing delimiters). Note, if a possessive is found, don't remove    * it yet, simply note it.    */
DECL|method|setBounds
specifier|private
name|void
name|setBounds
parameter_list|()
block|{
while|while
condition|(
name|startBounds
operator|<
name|length
operator|&&
operator|(
name|isSubwordDelim
argument_list|(
name|charType
argument_list|(
name|text
index|[
name|startBounds
index|]
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|startBounds
operator|++
expr_stmt|;
block|}
while|while
condition|(
name|endBounds
operator|>
name|startBounds
operator|&&
operator|(
name|isSubwordDelim
argument_list|(
name|charType
argument_list|(
name|text
index|[
name|endBounds
operator|-
literal|1
index|]
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|endBounds
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|endsWithPossessive
argument_list|(
name|endBounds
argument_list|)
condition|)
block|{
name|hasFinalPossessive
operator|=
literal|true
expr_stmt|;
block|}
name|current
operator|=
name|startBounds
expr_stmt|;
block|}
comment|/**    * Determines if the text at the given position indicates an English possessive which should be removed    *    * @param pos Position in the text to check if it indicates an English possessive    * @return {@code true} if the text at the position indicates an English posessive, {@code false} otherwise    */
DECL|method|endsWithPossessive
specifier|private
name|boolean
name|endsWithPossessive
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
operator|(
name|stemEnglishPossessive
operator|&&
name|pos
operator|>
literal|2
operator|&&
name|text
index|[
name|pos
operator|-
literal|2
index|]
operator|==
literal|'\''
operator|&&
operator|(
name|text
index|[
name|pos
operator|-
literal|1
index|]
operator|==
literal|'s'
operator|||
name|text
index|[
name|pos
operator|-
literal|1
index|]
operator|==
literal|'S'
operator|)
operator|&&
name|isAlpha
argument_list|(
name|charType
argument_list|(
name|text
index|[
name|pos
operator|-
literal|3
index|]
argument_list|)
argument_list|)
operator|&&
operator|(
name|pos
operator|==
name|endBounds
operator|||
name|isSubwordDelim
argument_list|(
name|charType
argument_list|(
name|text
index|[
name|pos
index|]
argument_list|)
argument_list|)
operator|)
operator|)
return|;
block|}
comment|/**    * Determines the type of the given character    *    * @param ch Character whose type is to be determined    * @return Type of the character    */
DECL|method|charType
specifier|private
name|int
name|charType
parameter_list|(
name|int
name|ch
parameter_list|)
block|{
if|if
condition|(
name|ch
operator|<
name|charTypeTable
operator|.
name|length
condition|)
block|{
return|return
name|charTypeTable
index|[
name|ch
index|]
return|;
block|}
switch|switch
condition|(
name|Character
operator|.
name|getType
argument_list|(
name|ch
argument_list|)
condition|)
block|{
case|case
name|Character
operator|.
name|UPPERCASE_LETTER
case|:
return|return
name|UPPER
return|;
case|case
name|Character
operator|.
name|LOWERCASE_LETTER
case|:
return|return
name|LOWER
return|;
case|case
name|Character
operator|.
name|TITLECASE_LETTER
case|:
case|case
name|Character
operator|.
name|MODIFIER_LETTER
case|:
case|case
name|Character
operator|.
name|OTHER_LETTER
case|:
case|case
name|Character
operator|.
name|NON_SPACING_MARK
case|:
case|case
name|Character
operator|.
name|ENCLOSING_MARK
case|:
comment|// depends what it encloses?
case|case
name|Character
operator|.
name|COMBINING_SPACING_MARK
case|:
return|return
name|ALPHA
return|;
case|case
name|Character
operator|.
name|DECIMAL_DIGIT_NUMBER
case|:
case|case
name|Character
operator|.
name|LETTER_NUMBER
case|:
case|case
name|Character
operator|.
name|OTHER_NUMBER
case|:
return|return
name|DIGIT
return|;
comment|// case Character.SPACE_SEPARATOR:
comment|// case Character.LINE_SEPARATOR:
comment|// case Character.PARAGRAPH_SEPARATOR:
comment|// case Character.CONTROL:
comment|// case Character.FORMAT:
comment|// case Character.PRIVATE_USE:
case|case
name|Character
operator|.
name|SURROGATE
case|:
comment|// prevent splitting
return|return
name|ALPHA
operator||
name|DIGIT
return|;
comment|// case Character.DASH_PUNCTUATION:
comment|// case Character.START_PUNCTUATION:
comment|// case Character.END_PUNCTUATION:
comment|// case Character.CONNECTOR_PUNCTUATION:
comment|// case Character.OTHER_PUNCTUATION:
comment|// case Character.MATH_SYMBOL:
comment|// case Character.CURRENCY_SYMBOL:
comment|// case Character.MODIFIER_SYMBOL:
comment|// case Character.OTHER_SYMBOL:
comment|// case Character.INITIAL_QUOTE_PUNCTUATION:
comment|// case Character.FINAL_QUOTE_PUNCTUATION:
default|default:
return|return
name|SUBWORD_DELIM
return|;
block|}
block|}
block|}
end_class
end_unit
