begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.request
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|RequiredSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
operator|.
name|FacetDateOther
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|BoundedTreeSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DateMathParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ResponseBuilder
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_comment
comment|/**  * A class that generates simple Facet information for a request.  *  * More advanced facet implementations may compose or subclass this class   * to leverage any of it's functionality.  */
end_comment
begin_class
DECL|class|SimpleFacets
specifier|public
class|class
name|SimpleFacets
block|{
comment|/** The main set of documents all facet counts should be relative to */
DECL|field|docs
specifier|protected
name|DocSet
name|docs
decl_stmt|;
comment|/** Configuration params behavior should be driven by */
DECL|field|params
specifier|protected
name|SolrParams
name|params
decl_stmt|;
comment|/** Searcher to use for all calculations */
DECL|field|searcher
specifier|protected
name|SolrIndexSearcher
name|searcher
decl_stmt|;
DECL|field|req
specifier|protected
name|SolrQueryRequest
name|req
decl_stmt|;
DECL|field|rb
specifier|protected
name|ResponseBuilder
name|rb
decl_stmt|;
comment|// per-facet values
DECL|field|localParams
name|SolrParams
name|localParams
decl_stmt|;
comment|// localParams on this particular facet command
DECL|field|facetValue
name|String
name|facetValue
decl_stmt|;
comment|// the field to or query to facet on (minus local params)
DECL|field|base
name|DocSet
name|base
decl_stmt|;
comment|// the base docset for this particular facet
DECL|field|key
name|String
name|key
decl_stmt|;
comment|// what name should the results be stored under
DECL|field|threads
name|int
name|threads
decl_stmt|;
DECL|method|SimpleFacets
specifier|public
name|SimpleFacets
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|DocSet
name|docs
parameter_list|,
name|SolrParams
name|params
parameter_list|)
block|{
name|this
argument_list|(
name|req
argument_list|,
name|docs
argument_list|,
name|params
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|SimpleFacets
specifier|public
name|SimpleFacets
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|DocSet
name|docs
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|ResponseBuilder
name|rb
parameter_list|)
block|{
name|this
operator|.
name|req
operator|=
name|req
expr_stmt|;
name|this
operator|.
name|searcher
operator|=
name|req
operator|.
name|getSearcher
argument_list|()
expr_stmt|;
name|this
operator|.
name|base
operator|=
name|this
operator|.
name|docs
operator|=
name|docs
expr_stmt|;
name|this
operator|.
name|params
operator|=
name|params
expr_stmt|;
name|this
operator|.
name|rb
operator|=
name|rb
expr_stmt|;
block|}
DECL|method|parseParams
name|void
name|parseParams
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|param
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|localParams
operator|=
name|QueryParsing
operator|.
name|getLocalParams
argument_list|(
name|param
argument_list|,
name|req
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
name|base
operator|=
name|docs
expr_stmt|;
name|facetValue
operator|=
name|param
expr_stmt|;
name|key
operator|=
name|param
expr_stmt|;
name|threads
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|localParams
operator|==
literal|null
condition|)
return|return;
comment|// remove local params unless it's a query
if|if
condition|(
name|type
operator|!=
name|FacetParams
operator|.
name|FACET_QUERY
condition|)
block|{
name|facetValue
operator|=
name|localParams
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|VALUE
argument_list|)
expr_stmt|;
block|}
comment|// reset set the default key now that localParams have been removed
name|key
operator|=
name|facetValue
expr_stmt|;
comment|// allow explicit set of the key
name|key
operator|=
name|localParams
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|OUTPUT_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|String
name|threadStr
init|=
name|localParams
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|THREADS
argument_list|)
decl_stmt|;
if|if
condition|(
name|threadStr
operator|!=
literal|null
condition|)
block|{
name|threads
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|threadStr
argument_list|)
expr_stmt|;
block|}
comment|// figure out if we need a new base DocSet
name|String
name|excludeStr
init|=
name|localParams
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|EXCLUDE
argument_list|)
decl_stmt|;
if|if
condition|(
name|excludeStr
operator|==
literal|null
condition|)
return|return;
name|Map
name|tagMap
init|=
operator|(
name|Map
operator|)
name|req
operator|.
name|getContext
argument_list|()
operator|.
name|get
argument_list|(
literal|"tags"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tagMap
operator|!=
literal|null
operator|&&
name|rb
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|excludeTagList
init|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|excludeStr
argument_list|,
literal|','
argument_list|)
decl_stmt|;
name|IdentityHashMap
argument_list|<
name|Query
argument_list|,
name|Boolean
argument_list|>
name|excludeSet
init|=
operator|new
name|IdentityHashMap
argument_list|<
name|Query
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|excludeTag
range|:
name|excludeTagList
control|)
block|{
name|Object
name|olst
init|=
name|tagMap
operator|.
name|get
argument_list|(
name|excludeTag
argument_list|)
decl_stmt|;
comment|// tagMap has entries of List<String,List<QParser>>, but subject to change in the future
if|if
condition|(
operator|!
operator|(
name|olst
operator|instanceof
name|Collection
operator|)
condition|)
continue|continue;
for|for
control|(
name|Object
name|o
range|:
operator|(
name|Collection
operator|)
name|olst
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|QParser
operator|)
condition|)
continue|continue;
name|QParser
name|qp
init|=
operator|(
name|QParser
operator|)
name|o
decl_stmt|;
name|excludeSet
operator|.
name|put
argument_list|(
name|qp
operator|.
name|getQuery
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|excludeSet
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|List
argument_list|<
name|Query
argument_list|>
name|qlist
init|=
operator|new
name|ArrayList
argument_list|<
name|Query
argument_list|>
argument_list|()
decl_stmt|;
comment|// add the base query
name|qlist
operator|.
name|add
argument_list|(
name|rb
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
comment|// add the filters
for|for
control|(
name|Query
name|q
range|:
name|rb
operator|.
name|getFilters
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|excludeSet
operator|.
name|containsKey
argument_list|(
name|q
argument_list|)
condition|)
block|{
name|qlist
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
comment|// get the new base docset for this facet
name|base
operator|=
name|searcher
operator|.
name|getDocSet
argument_list|(
name|qlist
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Looks at various Params to determing if any simple Facet Constraint count    * computations are desired.    *    * @see #getFacetQueryCounts    * @see #getFacetFieldCounts    * @see #getFacetDateCounts    * @see FacetParams#FACET    * @return a NamedList of Facet Count info or null    */
DECL|method|getFacetCounts
specifier|public
name|NamedList
name|getFacetCounts
parameter_list|()
block|{
comment|// if someone called this method, benefit of the doubt: assume true
if|if
condition|(
operator|!
name|params
operator|.
name|getBool
argument_list|(
name|FacetParams
operator|.
name|FACET
argument_list|,
literal|true
argument_list|)
condition|)
return|return
literal|null
return|;
name|NamedList
name|res
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
try|try
block|{
name|res
operator|.
name|add
argument_list|(
literal|"facet_queries"
argument_list|,
name|getFacetQueryCounts
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|.
name|add
argument_list|(
literal|"facet_fields"
argument_list|,
name|getFacetFieldCounts
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|.
name|add
argument_list|(
literal|"facet_dates"
argument_list|,
name|getFacetDateCounts
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|logOnce
argument_list|(
name|SolrCore
operator|.
name|log
argument_list|,
literal|"Exception during facet counts"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|res
operator|.
name|add
argument_list|(
literal|"exception"
argument_list|,
name|SolrException
operator|.
name|toStr
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
comment|/**    * Returns a list of facet counts for each of the facet queries     * specified in the params    *    * @see FacetParams#FACET_QUERY    */
DECL|method|getFacetQueryCounts
specifier|public
name|NamedList
name|getFacetQueryCounts
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|NamedList
name|res
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
comment|/* Ignore CommonParams.DF - could have init param facet.query assuming      * the schema default with query param DF intented to only affect Q.      * If user doesn't want schema default for facet.query, they should be      * explicit.      */
comment|// SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);
name|String
index|[]
name|facetQs
init|=
name|params
operator|.
name|getParams
argument_list|(
name|FacetParams
operator|.
name|FACET_QUERY
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|facetQs
operator|&&
literal|0
operator|!=
name|facetQs
operator|.
name|length
condition|)
block|{
for|for
control|(
name|String
name|q
range|:
name|facetQs
control|)
block|{
name|parseParams
argument_list|(
name|FacetParams
operator|.
name|FACET_QUERY
argument_list|,
name|q
argument_list|)
expr_stmt|;
comment|// TODO: slight optimization would prevent double-parsing of any localParams
name|Query
name|qobj
init|=
name|QParser
operator|.
name|getParser
argument_list|(
name|q
argument_list|,
literal|null
argument_list|,
name|req
argument_list|)
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|res
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|searcher
operator|.
name|numDocs
argument_list|(
name|qobj
argument_list|,
name|base
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
DECL|method|getTermCounts
specifier|public
name|NamedList
name|getTermCounts
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|offset
init|=
name|params
operator|.
name|getFieldInt
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_OFFSET
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|limit
init|=
name|params
operator|.
name|getFieldInt
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
name|limit
operator|==
literal|0
condition|)
return|return
operator|new
name|NamedList
argument_list|()
return|;
name|Integer
name|mincount
init|=
name|params
operator|.
name|getFieldInt
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_MINCOUNT
argument_list|)
decl_stmt|;
if|if
condition|(
name|mincount
operator|==
literal|null
condition|)
block|{
name|Boolean
name|zeros
init|=
name|params
operator|.
name|getFieldBool
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_ZEROS
argument_list|)
decl_stmt|;
comment|// mincount = (zeros!=null&& zeros) ? 0 : 1;
name|mincount
operator|=
operator|(
name|zeros
operator|!=
literal|null
operator|&&
operator|!
name|zeros
operator|)
condition|?
literal|1
else|:
literal|0
expr_stmt|;
comment|// current default is to include zeros.
block|}
name|boolean
name|missing
init|=
name|params
operator|.
name|getFieldBool
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_MISSING
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// default to sorting if there is a limit.
name|String
name|sort
init|=
name|params
operator|.
name|getFieldParam
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_SORT
argument_list|,
name|limit
operator|>
literal|0
condition|?
name|FacetParams
operator|.
name|FACET_SORT_COUNT
else|:
name|FacetParams
operator|.
name|FACET_SORT_INDEX
argument_list|)
decl_stmt|;
name|String
name|prefix
init|=
name|params
operator|.
name|getFieldParam
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_PREFIX
argument_list|)
decl_stmt|;
name|NamedList
name|counts
decl_stmt|;
name|SchemaField
name|sf
init|=
name|searcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|FieldType
name|ft
init|=
name|sf
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|// determine what type of faceting method to use
name|String
name|method
init|=
name|params
operator|.
name|getFieldParam
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_METHOD
argument_list|)
decl_stmt|;
name|boolean
name|enumMethod
init|=
name|FacetParams
operator|.
name|FACET_METHOD_enum
operator|.
name|equals
argument_list|(
name|method
argument_list|)
decl_stmt|;
comment|// TODO: default to per-segment or not?
name|boolean
name|per_segment
init|=
name|FacetParams
operator|.
name|FACET_METHOD_fcs
operator|.
name|equals
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|==
literal|null
operator|&&
name|ft
operator|instanceof
name|BoolField
condition|)
block|{
comment|// Always use filters for booleans... we know the number of values is very small.
name|enumMethod
operator|=
literal|true
expr_stmt|;
block|}
name|boolean
name|multiToken
init|=
name|sf
operator|.
name|multiValued
argument_list|()
operator|||
name|ft
operator|.
name|multiValuedFieldCache
argument_list|()
decl_stmt|;
if|if
condition|(
name|TrieField
operator|.
name|getMainValuePrefix
argument_list|(
name|ft
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// A TrieField with multiple parts indexed per value... currently only
comment|// UnInvertedField can handle this case, so force it's use.
name|enumMethod
operator|=
literal|false
expr_stmt|;
name|multiToken
operator|=
literal|true
expr_stmt|;
block|}
comment|// unless the enum method is explicitly specified, use a counting method.
if|if
condition|(
name|enumMethod
condition|)
block|{
name|counts
operator|=
name|getFacetTermEnumCounts
argument_list|(
name|searcher
argument_list|,
name|base
argument_list|,
name|field
argument_list|,
name|offset
argument_list|,
name|limit
argument_list|,
name|mincount
argument_list|,
name|missing
argument_list|,
name|sort
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|multiToken
condition|)
block|{
name|UnInvertedField
name|uif
init|=
name|UnInvertedField
operator|.
name|getUnInvertedField
argument_list|(
name|field
argument_list|,
name|searcher
argument_list|)
decl_stmt|;
name|counts
operator|=
name|uif
operator|.
name|getCounts
argument_list|(
name|searcher
argument_list|,
name|base
argument_list|,
name|offset
argument_list|,
name|limit
argument_list|,
name|mincount
argument_list|,
name|missing
argument_list|,
name|sort
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: future logic could use filters instead of the fieldcache if
comment|// the number of terms in the field is small enough.
if|if
condition|(
name|per_segment
condition|)
block|{
name|PerSegmentSingleValuedFaceting
name|ps
init|=
operator|new
name|PerSegmentSingleValuedFaceting
argument_list|(
name|searcher
argument_list|,
name|base
argument_list|,
name|field
argument_list|,
name|offset
argument_list|,
name|limit
argument_list|,
name|mincount
argument_list|,
name|missing
argument_list|,
name|sort
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
name|Executor
name|executor
init|=
name|threads
operator|==
literal|0
condition|?
name|directExecutor
else|:
name|facetExecutor
decl_stmt|;
name|ps
operator|.
name|setNumThreads
argument_list|(
name|threads
argument_list|)
expr_stmt|;
name|counts
operator|=
name|ps
operator|.
name|getFacetCounts
argument_list|(
name|facetExecutor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|counts
operator|=
name|getFieldCacheCounts
argument_list|(
name|searcher
argument_list|,
name|base
argument_list|,
name|field
argument_list|,
name|offset
argument_list|,
name|limit
argument_list|,
name|mincount
argument_list|,
name|missing
argument_list|,
name|sort
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|counts
return|;
block|}
DECL|field|directExecutor
specifier|static
specifier|final
name|Executor
name|directExecutor
init|=
operator|new
name|Executor
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|r
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|field|facetExecutor
specifier|static
specifier|final
name|Executor
name|facetExecutor
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
comment|// terminate idle threads after 10 sec
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
comment|// directly hand off tasks
argument_list|)
decl_stmt|;
comment|/**    * Returns a list of value constraints and the associated facet counts     * for each facet field specified in the params.    *    * @see FacetParams#FACET_FIELD    * @see #getFieldMissingCount    * @see #getFacetTermEnumCounts    */
DECL|method|getFacetFieldCounts
specifier|public
name|NamedList
name|getFacetFieldCounts
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|NamedList
name|res
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
name|String
index|[]
name|facetFs
init|=
name|params
operator|.
name|getParams
argument_list|(
name|FacetParams
operator|.
name|FACET_FIELD
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|facetFs
condition|)
block|{
for|for
control|(
name|String
name|f
range|:
name|facetFs
control|)
block|{
name|parseParams
argument_list|(
name|FacetParams
operator|.
name|FACET_FIELD
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|String
name|termList
init|=
name|localParams
operator|==
literal|null
condition|?
literal|null
else|:
name|localParams
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|TERMS
argument_list|)
decl_stmt|;
if|if
condition|(
name|termList
operator|!=
literal|null
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|getListedTermCounts
argument_list|(
name|facetValue
argument_list|,
name|termList
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|res
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|getTermCounts
argument_list|(
name|facetValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|res
return|;
block|}
DECL|method|getListedTermCounts
specifier|private
name|NamedList
name|getListedTermCounts
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termList
parameter_list|)
throws|throws
name|IOException
block|{
name|FieldType
name|ft
init|=
name|searcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getFieldType
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|terms
init|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|termList
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|NamedList
name|res
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|Term
name|t
init|=
operator|new
name|Term
argument_list|(
name|field
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|term
range|:
name|terms
control|)
block|{
name|String
name|internal
init|=
name|ft
operator|.
name|toInternal
argument_list|(
name|term
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|searcher
operator|.
name|numDocs
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|t
operator|.
name|createTerm
argument_list|(
name|internal
argument_list|)
argument_list|)
argument_list|,
name|base
argument_list|)
decl_stmt|;
name|res
operator|.
name|add
argument_list|(
name|term
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
comment|/**    * Returns a count of the documents in the set which do not have any     * terms for for the specified field.    *    * @see FacetParams#FACET_MISSING    */
DECL|method|getFieldMissingCount
specifier|public
specifier|static
name|int
name|getFieldMissingCount
parameter_list|(
name|SolrIndexSearcher
name|searcher
parameter_list|,
name|DocSet
name|docs
parameter_list|,
name|String
name|fieldName
parameter_list|)
throws|throws
name|IOException
block|{
name|DocSet
name|hasVal
init|=
name|searcher
operator|.
name|getDocSet
argument_list|(
operator|new
name|TermRangeQuery
argument_list|(
name|fieldName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|docs
operator|.
name|andNotSize
argument_list|(
name|hasVal
argument_list|)
return|;
block|}
comment|// first element of the fieldcache is null, so we need this comparator.
DECL|field|nullStrComparator
specifier|private
specifier|static
specifier|final
name|Comparator
name|nullStrComparator
init|=
operator|new
name|Comparator
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|==
literal|null
condition|)
return|return
operator|(
name|o2
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
operator|-
literal|1
return|;
elseif|else
if|if
condition|(
name|o2
operator|==
literal|null
condition|)
return|return
literal|1
return|;
return|return
operator|(
operator|(
name|String
operator|)
name|o1
operator|)
operator|.
name|compareTo
argument_list|(
operator|(
name|String
operator|)
name|o2
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Use the Lucene FieldCache to get counts for each unique field value in<code>docs</code>.    * The field must have at most one indexed token per document.    */
DECL|method|getFieldCacheCounts
specifier|public
specifier|static
name|NamedList
name|getFieldCacheCounts
parameter_list|(
name|SolrIndexSearcher
name|searcher
parameter_list|,
name|DocSet
name|docs
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|limit
parameter_list|,
name|int
name|mincount
parameter_list|,
name|boolean
name|missing
parameter_list|,
name|String
name|sort
parameter_list|,
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: If the number of terms is high compared to docs.size(), and zeros==false,
comment|//  we should use an alternate strategy to avoid
comment|//  1) creating another huge int[] for the counts
comment|//  2) looping over that huge int[] looking for the rare non-zeros.
comment|//
comment|// Yet another variation: if docs.size() is small and termvectors are stored,
comment|// then use them instead of the FieldCache.
comment|//
comment|// TODO: this function is too big and could use some refactoring, but
comment|// we also need a facet cache, and refactoring of SimpleFacets instead of
comment|// trying to pass all the various params around.
name|FieldType
name|ft
init|=
name|searcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getFieldType
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|NamedList
name|res
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|FieldCache
operator|.
name|StringIndex
name|si
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getStringIndex
argument_list|(
name|searcher
operator|.
name|getReader
argument_list|()
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|terms
init|=
name|si
operator|.
name|lookup
decl_stmt|;
specifier|final
name|int
index|[]
name|termNum
init|=
name|si
operator|.
name|order
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
operator|&&
name|prefix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|prefix
operator|=
literal|null
expr_stmt|;
name|int
name|startTermIndex
decl_stmt|,
name|endTermIndex
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
name|startTermIndex
operator|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|terms
argument_list|,
name|prefix
argument_list|,
name|nullStrComparator
argument_list|)
expr_stmt|;
if|if
condition|(
name|startTermIndex
operator|<
literal|0
condition|)
name|startTermIndex
operator|=
operator|-
name|startTermIndex
operator|-
literal|1
expr_stmt|;
comment|// find the end term.  \uffff isn't a legal unicode char, but only compareTo
comment|// is used, so it should be fine, and is guaranteed to be bigger than legal chars.
name|endTermIndex
operator|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|terms
argument_list|,
name|prefix
operator|+
literal|"\uffff\uffff\uffff\uffff"
argument_list|,
name|nullStrComparator
argument_list|)
expr_stmt|;
name|endTermIndex
operator|=
operator|-
name|endTermIndex
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|startTermIndex
operator|=
literal|1
expr_stmt|;
name|endTermIndex
operator|=
name|terms
operator|.
name|length
expr_stmt|;
block|}
specifier|final
name|int
name|nTerms
init|=
name|endTermIndex
operator|-
name|startTermIndex
decl_stmt|;
if|if
condition|(
name|nTerms
operator|>
literal|0
operator|&&
name|docs
operator|.
name|size
argument_list|()
operator|>=
name|mincount
condition|)
block|{
comment|// count collection array only needs to be as big as the number of terms we are
comment|// going to collect counts for.
specifier|final
name|int
index|[]
name|counts
init|=
operator|new
name|int
index|[
name|nTerms
index|]
decl_stmt|;
name|DocIterator
name|iter
init|=
name|docs
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|term
init|=
name|termNum
index|[
name|iter
operator|.
name|nextDoc
argument_list|()
index|]
decl_stmt|;
name|int
name|arrIdx
init|=
name|term
operator|-
name|startTermIndex
decl_stmt|;
if|if
condition|(
name|arrIdx
operator|>=
literal|0
operator|&&
name|arrIdx
operator|<
name|nTerms
condition|)
name|counts
index|[
name|arrIdx
index|]
operator|++
expr_stmt|;
block|}
comment|// IDEA: we could also maintain a count of "other"... everything that fell outside
comment|// of the top 'N'
name|int
name|off
init|=
name|offset
decl_stmt|;
name|int
name|lim
init|=
name|limit
operator|>=
literal|0
condition|?
name|limit
else|:
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|sort
operator|.
name|equals
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT_COUNT
argument_list|)
operator|||
name|sort
operator|.
name|equals
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT_COUNT_LEGACY
argument_list|)
condition|)
block|{
name|int
name|maxsize
init|=
name|limit
operator|>
literal|0
condition|?
name|offset
operator|+
name|limit
else|:
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|1
decl_stmt|;
name|maxsize
operator|=
name|Math
operator|.
name|min
argument_list|(
name|maxsize
argument_list|,
name|nTerms
argument_list|)
expr_stmt|;
specifier|final
name|BoundedTreeSet
argument_list|<
name|CountPair
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|queue
init|=
operator|new
name|BoundedTreeSet
argument_list|<
name|CountPair
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|(
name|maxsize
argument_list|)
decl_stmt|;
name|int
name|min
init|=
name|mincount
operator|-
literal|1
decl_stmt|;
comment|// the smallest value in the top 'N' values
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nTerms
condition|;
name|i
operator|++
control|)
block|{
name|int
name|c
init|=
name|counts
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|c
operator|>
name|min
condition|)
block|{
comment|// NOTE: we use c>min rather than c>=min as an optimization because we are going in
comment|// index order, so we already know that the keys are ordered.  This can be very
comment|// important if a lot of the counts are repeated (like zero counts would be).
name|queue
operator|.
name|add
argument_list|(
operator|new
name|CountPair
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|terms
index|[
name|startTermIndex
operator|+
name|i
index|]
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|queue
operator|.
name|size
argument_list|()
operator|>=
name|maxsize
condition|)
name|min
operator|=
name|queue
operator|.
name|last
argument_list|()
operator|.
name|val
expr_stmt|;
block|}
block|}
comment|// now select the right page from the results
for|for
control|(
name|CountPair
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|p
range|:
name|queue
control|)
block|{
if|if
condition|(
operator|--
name|off
operator|>=
literal|0
condition|)
continue|continue;
if|if
condition|(
operator|--
name|lim
operator|<
literal|0
condition|)
break|break;
name|res
operator|.
name|add
argument_list|(
name|ft
operator|.
name|indexedToReadable
argument_list|(
name|p
operator|.
name|key
argument_list|)
argument_list|,
name|p
operator|.
name|val
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// add results in index order
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|mincount
operator|<=
literal|0
condition|)
block|{
comment|// if mincount<=0, then we won't discard any terms and we know exactly
comment|// where to start.
name|i
operator|=
name|off
expr_stmt|;
name|off
operator|=
literal|0
expr_stmt|;
block|}
for|for
control|(
init|;
name|i
operator|<
name|nTerms
condition|;
name|i
operator|++
control|)
block|{
name|int
name|c
init|=
name|counts
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|c
operator|<
name|mincount
operator|||
operator|--
name|off
operator|>=
literal|0
condition|)
continue|continue;
if|if
condition|(
operator|--
name|lim
operator|<
literal|0
condition|)
break|break;
name|res
operator|.
name|add
argument_list|(
name|ft
operator|.
name|indexedToReadable
argument_list|(
name|terms
index|[
name|startTermIndex
operator|+
name|i
index|]
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|missing
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
literal|null
argument_list|,
name|getFieldMissingCount
argument_list|(
name|searcher
argument_list|,
name|docs
argument_list|,
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
comment|/**    * Returns a list of terms in the specified field along with the     * corresponding count of documents in the set that match that constraint.    * This method uses the FilterCache to get the intersection count between<code>docs</code>    * and the DocSet for each term in the filter.    *    * @see FacetParams#FACET_LIMIT    * @see FacetParams#FACET_ZEROS    * @see FacetParams#FACET_MISSING    */
DECL|method|getFacetTermEnumCounts
specifier|public
name|NamedList
name|getFacetTermEnumCounts
parameter_list|(
name|SolrIndexSearcher
name|searcher
parameter_list|,
name|DocSet
name|docs
parameter_list|,
name|String
name|field
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|limit
parameter_list|,
name|int
name|mincount
parameter_list|,
name|boolean
name|missing
parameter_list|,
name|String
name|sort
parameter_list|,
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
comment|/* :TODO: potential optimization...     * cache the Terms with the highest docFreq and try them first     * don't enum if we get our max from them     */
comment|// Minimum term docFreq in order to use the filterCache for that term.
name|int
name|minDfFilterCache
init|=
name|params
operator|.
name|getFieldInt
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_ENUM_CACHE_MINDF
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|IndexSchema
name|schema
init|=
name|searcher
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|IndexReader
name|r
init|=
name|searcher
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|FieldType
name|ft
init|=
name|schema
operator|.
name|getFieldType
argument_list|(
name|field
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxsize
init|=
name|limit
operator|>=
literal|0
condition|?
name|offset
operator|+
name|limit
else|:
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|1
decl_stmt|;
specifier|final
name|BoundedTreeSet
argument_list|<
name|CountPair
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|queue
init|=
operator|(
name|sort
operator|.
name|equals
argument_list|(
literal|"count"
argument_list|)
operator|||
name|sort
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
operator|)
condition|?
operator|new
name|BoundedTreeSet
argument_list|<
name|CountPair
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|(
name|maxsize
argument_list|)
else|:
literal|null
decl_stmt|;
specifier|final
name|NamedList
name|res
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|int
name|min
init|=
name|mincount
operator|-
literal|1
decl_stmt|;
comment|// the smallest value in the top 'N' values
name|int
name|off
init|=
name|offset
decl_stmt|;
name|int
name|lim
init|=
name|limit
operator|>=
literal|0
condition|?
name|limit
else|:
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|String
name|startTerm
init|=
name|prefix
operator|==
literal|null
condition|?
literal|""
else|:
name|ft
operator|.
name|toInternal
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
name|TermEnum
name|te
init|=
name|r
operator|.
name|terms
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|startTerm
argument_list|)
argument_list|)
decl_stmt|;
name|TermDocs
name|td
init|=
name|r
operator|.
name|termDocs
argument_list|()
decl_stmt|;
if|if
condition|(
name|docs
operator|.
name|size
argument_list|()
operator|>=
name|mincount
condition|)
block|{
do|do
block|{
name|Term
name|t
init|=
name|te
operator|.
name|term
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|t
operator|||
operator|!
name|t
operator|.
name|field
argument_list|()
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
break|break;
if|if
condition|(
name|prefix
operator|!=
literal|null
operator|&&
operator|!
name|t
operator|.
name|text
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
break|break;
name|int
name|df
init|=
name|te
operator|.
name|docFreq
argument_list|()
decl_stmt|;
comment|// If we are sorting, we can use df>min (rather than>=) since we
comment|// are going in index order.  For certain term distributions this can
comment|// make a large difference (for example, many terms with df=1).
if|if
condition|(
name|df
operator|>
literal|0
operator|&&
name|df
operator|>
name|min
condition|)
block|{
name|int
name|c
decl_stmt|;
if|if
condition|(
name|df
operator|>=
name|minDfFilterCache
condition|)
block|{
comment|// use the filter cache
name|c
operator|=
name|searcher
operator|.
name|numDocs
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|t
argument_list|)
argument_list|,
name|docs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// iterate over TermDocs to calculate the intersection
name|td
operator|.
name|seek
argument_list|(
name|te
argument_list|)
expr_stmt|;
name|c
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|td
operator|.
name|next
argument_list|()
condition|)
block|{
if|if
condition|(
name|docs
operator|.
name|exists
argument_list|(
name|td
operator|.
name|doc
argument_list|()
argument_list|)
condition|)
name|c
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sort
operator|.
name|equals
argument_list|(
literal|"count"
argument_list|)
operator|||
name|sort
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
if|if
condition|(
name|c
operator|>
name|min
condition|)
block|{
name|queue
operator|.
name|add
argument_list|(
operator|new
name|CountPair
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|t
operator|.
name|text
argument_list|()
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|queue
operator|.
name|size
argument_list|()
operator|>=
name|maxsize
condition|)
name|min
operator|=
name|queue
operator|.
name|last
argument_list|()
operator|.
name|val
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|c
operator|>=
name|mincount
operator|&&
operator|--
name|off
operator|<
literal|0
condition|)
block|{
if|if
condition|(
operator|--
name|lim
operator|<
literal|0
condition|)
break|break;
name|res
operator|.
name|add
argument_list|(
name|ft
operator|.
name|indexedToReadable
argument_list|(
name|t
operator|.
name|text
argument_list|()
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
do|while
condition|(
name|te
operator|.
name|next
argument_list|()
condition|)
do|;
block|}
if|if
condition|(
name|sort
operator|.
name|equals
argument_list|(
literal|"count"
argument_list|)
operator|||
name|sort
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
for|for
control|(
name|CountPair
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|p
range|:
name|queue
control|)
block|{
if|if
condition|(
operator|--
name|off
operator|>=
literal|0
condition|)
continue|continue;
if|if
condition|(
operator|--
name|lim
operator|<
literal|0
condition|)
break|break;
name|res
operator|.
name|add
argument_list|(
name|ft
operator|.
name|indexedToReadable
argument_list|(
name|p
operator|.
name|key
argument_list|)
argument_list|,
name|p
operator|.
name|val
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|missing
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
literal|null
argument_list|,
name|getFieldMissingCount
argument_list|(
name|searcher
argument_list|,
name|docs
argument_list|,
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|te
operator|.
name|close
argument_list|()
expr_stmt|;
name|td
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|res
return|;
block|}
comment|/**    * Returns a list of value constraints and the associated facet counts     * for each facet date field, range, and interval specified in the    * SolrParams    *    * @see FacetParams#FACET_DATE    */
DECL|method|getFacetDateCounts
specifier|public
name|NamedList
name|getFacetDateCounts
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParseException
block|{
specifier|final
name|SolrParams
name|required
init|=
operator|new
name|RequiredSolrParams
argument_list|(
name|params
argument_list|)
decl_stmt|;
specifier|final
name|NamedList
name|resOuter
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|fields
init|=
name|params
operator|.
name|getParams
argument_list|(
name|FacetParams
operator|.
name|FACET_DATE
argument_list|)
decl_stmt|;
specifier|final
name|Date
name|NOW
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|fields
operator|||
literal|0
operator|==
name|fields
operator|.
name|length
condition|)
return|return
name|resOuter
return|;
specifier|final
name|IndexSchema
name|schema
init|=
name|searcher
operator|.
name|getSchema
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|fields
control|)
block|{
name|parseParams
argument_list|(
name|FacetParams
operator|.
name|FACET_DATE
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|f
operator|=
name|facetValue
expr_stmt|;
specifier|final
name|NamedList
name|resInner
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
name|resOuter
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|resInner
argument_list|)
expr_stmt|;
specifier|final
name|SchemaField
name|sf
init|=
name|schema
operator|.
name|getField
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|sf
operator|.
name|getType
argument_list|()
operator|instanceof
name|DateField
operator|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Can not date facet on a field which is not a DateField: "
operator|+
name|f
argument_list|)
throw|;
block|}
specifier|final
name|DateField
name|ft
init|=
operator|(
name|DateField
operator|)
name|sf
operator|.
name|getType
argument_list|()
decl_stmt|;
specifier|final
name|String
name|startS
init|=
name|required
operator|.
name|getFieldParam
argument_list|(
name|f
argument_list|,
name|FacetParams
operator|.
name|FACET_DATE_START
argument_list|)
decl_stmt|;
specifier|final
name|Date
name|start
decl_stmt|;
try|try
block|{
name|start
operator|=
name|ft
operator|.
name|parseMath
argument_list|(
name|NOW
argument_list|,
name|startS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"date facet 'start' is not a valid Date string: "
operator|+
name|startS
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|String
name|endS
init|=
name|required
operator|.
name|getFieldParam
argument_list|(
name|f
argument_list|,
name|FacetParams
operator|.
name|FACET_DATE_END
argument_list|)
decl_stmt|;
name|Date
name|end
decl_stmt|;
comment|// not final, hardend may change this
try|try
block|{
name|end
operator|=
name|ft
operator|.
name|parseMath
argument_list|(
name|NOW
argument_list|,
name|endS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"date facet 'end' is not a valid Date string: "
operator|+
name|endS
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|end
operator|.
name|before
argument_list|(
name|start
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"date facet 'end' comes before 'start': "
operator|+
name|endS
operator|+
literal|"< "
operator|+
name|startS
argument_list|)
throw|;
block|}
specifier|final
name|String
name|gap
init|=
name|required
operator|.
name|getFieldParam
argument_list|(
name|f
argument_list|,
name|FacetParams
operator|.
name|FACET_DATE_GAP
argument_list|)
decl_stmt|;
specifier|final
name|DateMathParser
name|dmp
init|=
operator|new
name|DateMathParser
argument_list|(
name|ft
operator|.
name|UTC
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|dmp
operator|.
name|setNow
argument_list|(
name|NOW
argument_list|)
expr_stmt|;
name|int
name|minCount
init|=
name|params
operator|.
name|getFieldInt
argument_list|(
name|f
argument_list|,
name|FacetParams
operator|.
name|FACET_MINCOUNT
argument_list|,
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|Date
name|low
init|=
name|start
decl_stmt|;
while|while
condition|(
name|low
operator|.
name|before
argument_list|(
name|end
argument_list|)
condition|)
block|{
name|dmp
operator|.
name|setNow
argument_list|(
name|low
argument_list|)
expr_stmt|;
name|String
name|label
init|=
name|ft
operator|.
name|toExternal
argument_list|(
name|low
argument_list|)
decl_stmt|;
name|Date
name|high
init|=
name|dmp
operator|.
name|parseMath
argument_list|(
name|gap
argument_list|)
decl_stmt|;
if|if
condition|(
name|end
operator|.
name|before
argument_list|(
name|high
argument_list|)
condition|)
block|{
if|if
condition|(
name|params
operator|.
name|getFieldBool
argument_list|(
name|f
argument_list|,
name|FacetParams
operator|.
name|FACET_DATE_HARD_END
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|high
operator|=
name|end
expr_stmt|;
block|}
else|else
block|{
name|end
operator|=
name|high
expr_stmt|;
block|}
block|}
if|if
condition|(
name|high
operator|.
name|before
argument_list|(
name|low
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"date facet infinite loop (is gap negative?)"
argument_list|)
throw|;
block|}
name|int
name|count
init|=
name|rangeCount
argument_list|(
name|sf
argument_list|,
name|low
argument_list|,
name|high
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|>=
name|minCount
condition|)
block|{
name|resInner
operator|.
name|add
argument_list|(
name|label
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
name|low
operator|=
name|high
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|text
operator|.
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"date facet 'gap' is not a valid Date Math string: "
operator|+
name|gap
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// explicitly return the gap and end so all the counts are meaningful
name|resInner
operator|.
name|add
argument_list|(
literal|"gap"
argument_list|,
name|gap
argument_list|)
expr_stmt|;
name|resInner
operator|.
name|add
argument_list|(
literal|"end"
argument_list|,
name|end
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|othersP
init|=
name|params
operator|.
name|getFieldParams
argument_list|(
name|f
argument_list|,
name|FacetParams
operator|.
name|FACET_DATE_OTHER
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|othersP
operator|&&
literal|0
operator|<
name|othersP
operator|.
name|length
condition|)
block|{
name|Set
argument_list|<
name|FacetDateOther
argument_list|>
name|others
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|FacetDateOther
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|o
range|:
name|othersP
control|)
block|{
name|others
operator|.
name|add
argument_list|(
name|FacetDateOther
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// no matter what other values are listed, we don't do
comment|// anything if "none" is specified.
if|if
condition|(
operator|!
name|others
operator|.
name|contains
argument_list|(
name|FacetDateOther
operator|.
name|NONE
argument_list|)
condition|)
block|{
name|boolean
name|all
init|=
name|others
operator|.
name|contains
argument_list|(
name|FacetDateOther
operator|.
name|ALL
argument_list|)
decl_stmt|;
if|if
condition|(
name|all
operator|||
name|others
operator|.
name|contains
argument_list|(
name|FacetDateOther
operator|.
name|BEFORE
argument_list|)
condition|)
block|{
name|resInner
operator|.
name|add
argument_list|(
name|FacetDateOther
operator|.
name|BEFORE
operator|.
name|toString
argument_list|()
argument_list|,
name|rangeCount
argument_list|(
name|sf
argument_list|,
literal|null
argument_list|,
name|start
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|all
operator|||
name|others
operator|.
name|contains
argument_list|(
name|FacetDateOther
operator|.
name|AFTER
argument_list|)
condition|)
block|{
name|resInner
operator|.
name|add
argument_list|(
name|FacetDateOther
operator|.
name|AFTER
operator|.
name|toString
argument_list|()
argument_list|,
name|rangeCount
argument_list|(
name|sf
argument_list|,
name|end
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|all
operator|||
name|others
operator|.
name|contains
argument_list|(
name|FacetDateOther
operator|.
name|BETWEEN
argument_list|)
condition|)
block|{
name|resInner
operator|.
name|add
argument_list|(
name|FacetDateOther
operator|.
name|BETWEEN
operator|.
name|toString
argument_list|()
argument_list|,
name|rangeCount
argument_list|(
name|sf
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|resOuter
return|;
block|}
comment|/**    * Macro for getting the numDocs of range over docs    * @see SolrIndexSearcher#numDocs    * @see TermRangeQuery    */
DECL|method|rangeCount
specifier|protected
name|int
name|rangeCount
parameter_list|(
name|SchemaField
name|sf
parameter_list|,
name|String
name|low
parameter_list|,
name|String
name|high
parameter_list|,
name|boolean
name|iLow
parameter_list|,
name|boolean
name|iHigh
parameter_list|)
throws|throws
name|IOException
block|{
name|Query
name|rangeQ
init|=
name|sf
operator|.
name|getType
argument_list|()
operator|.
name|getRangeQuery
argument_list|(
literal|null
argument_list|,
name|sf
argument_list|,
name|low
argument_list|,
name|high
argument_list|,
name|iLow
argument_list|,
name|iHigh
argument_list|)
decl_stmt|;
return|return
name|searcher
operator|.
name|numDocs
argument_list|(
name|rangeQ
argument_list|,
name|base
argument_list|)
return|;
block|}
DECL|method|rangeCount
specifier|protected
name|int
name|rangeCount
parameter_list|(
name|SchemaField
name|sf
parameter_list|,
name|Date
name|low
parameter_list|,
name|Date
name|high
parameter_list|,
name|boolean
name|iLow
parameter_list|,
name|boolean
name|iHigh
parameter_list|)
throws|throws
name|IOException
block|{
name|Query
name|rangeQ
init|=
operator|(
call|(
name|DateField
call|)
argument_list|(
name|sf
operator|.
name|getType
argument_list|()
argument_list|)
operator|)
operator|.
name|getRangeQuery
argument_list|(
literal|null
argument_list|,
name|sf
argument_list|,
name|low
argument_list|,
name|high
argument_list|,
name|iLow
argument_list|,
name|iHigh
argument_list|)
decl_stmt|;
return|return
name|searcher
operator|.
name|numDocs
argument_list|(
name|rangeQ
argument_list|,
name|base
argument_list|)
return|;
block|}
comment|/**    * A simple key=>val pair whose natural order is such that     *<b>higher</b> vals come before lower vals.    * In case of tie vals, then<b>lower</b> keys come before higher keys.    */
DECL|class|CountPair
specifier|public
specifier|static
class|class
name|CountPair
parameter_list|<
name|K
extends|extends
name|Comparable
parameter_list|<
name|?
super|super
name|K
parameter_list|>
parameter_list|,
name|V
extends|extends
name|Comparable
parameter_list|<
name|?
super|super
name|V
parameter_list|>
parameter_list|>
implements|implements
name|Comparable
argument_list|<
name|CountPair
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|method|CountPair
specifier|public
name|CountPair
parameter_list|(
name|K
name|k
parameter_list|,
name|V
name|v
parameter_list|)
block|{
name|key
operator|=
name|k
expr_stmt|;
name|val
operator|=
name|v
expr_stmt|;
block|}
DECL|field|key
specifier|public
name|K
name|key
decl_stmt|;
DECL|field|val
specifier|public
name|V
name|val
decl_stmt|;
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|key
operator|.
name|hashCode
argument_list|()
operator|^
name|val
operator|.
name|hashCode
argument_list|()
return|;
block|}
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
operator|(
name|o
operator|instanceof
name|CountPair
operator|)
operator|&&
operator|(
literal|0
operator|==
name|this
operator|.
name|compareTo
argument_list|(
operator|(
name|CountPair
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|o
argument_list|)
operator|)
return|;
block|}
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|CountPair
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|o
parameter_list|)
block|{
name|int
name|vc
init|=
name|o
operator|.
name|val
operator|.
name|compareTo
argument_list|(
name|val
argument_list|)
decl_stmt|;
return|return
operator|(
literal|0
operator|!=
name|vc
condition|?
name|vc
else|:
name|key
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|key
argument_list|)
operator|)
return|;
block|}
block|}
block|}
end_class
end_unit
