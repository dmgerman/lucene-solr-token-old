begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
package|;
end_package
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_comment
comment|/**  * This class is<b>NOT</b> recommended for new users and should be  * considered<b>UNSUPPORTED</b>.  *<p>  * In Solr 1.2,<tt>DateField</tt> did not enforce  * the canonical representation of the ISO 8601 format when parsing  * incoming data, and did not generation the canonical format when  * generating dates from "Date Math" strings (particularly as  * it pertains to milliseconds ending in trailing zeros) -- As a result  * equivalent dates could not always be compared properly.  *</p>  *<p>  * This class is provided as possible alternative for people who depend on  * the "broken" behavior of DateField in Solr 1.2  * (specificly: accepting any input that ends in a 'Z', and  * formating DateMath expressions using 3 decimals of milliseconds) while  * still supporting some newer functionality of DateField (ie: DateMath on  * explicit strings in addition to "NOW")  *</p>  *<p>  * Users that desire 100% backwards compatibility should consider using  * the Solr 1.2 version of<tt>DateField</tt>  *</p>  *  * @see<a href="https://issues.apache.org/jira/browse/SOLR-552">SOLR-552</a>  * @see<a href="https://issues.apache.org/jira/browse/SOLR-470">SOLR-470</a>  * @see<a href="https://issues.apache.org/jira/browse/SOLR-521">SOLR-521</a>  * @deprecated use {@link DateField}  */
end_comment
begin_class
annotation|@
name|Deprecated
DECL|class|LegacyDateField
specifier|public
specifier|final
class|class
name|LegacyDateField
extends|extends
name|DateField
block|{
comment|/**    * Overrides the super class to short circut and do no enforcing of    * the canonical format    */
DECL|method|toInternal
specifier|public
name|String
name|toInternal
parameter_list|(
name|String
name|val
parameter_list|)
block|{
specifier|final
name|int
name|len
init|=
name|val
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|charAt
argument_list|(
name|len
operator|-
literal|1
argument_list|)
operator|==
name|Z
condition|)
block|{
comment|// check common case first, simple datetime
comment|// NOTE: not parsed to ensure correctness
return|return
name|val
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|len
operator|-
literal|1
argument_list|)
return|;
block|}
return|return
name|toInternal
argument_list|(
name|parseMath
argument_list|(
literal|null
argument_list|,
name|val
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * This method returns a DateFormat which does<b>NOT</b> respect the    * ISO 8601 canonical format with regards to trailing zeros in milliseconds,    * instead if always formats milliseconds to 3 decimal points.    */
DECL|method|getThreadLocalDateFormat
specifier|protected
name|DateFormat
name|getThreadLocalDateFormat
parameter_list|()
block|{
return|return
name|fmtThreadLocal
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|formatDate
specifier|protected
name|String
name|formatDate
parameter_list|(
name|Date
name|d
parameter_list|)
block|{
return|return
name|getThreadLocalDateFormat
argument_list|()
operator|.
name|format
argument_list|(
name|d
argument_list|)
return|;
block|}
DECL|field|fmtThreadLocal
specifier|private
specifier|static
name|ThreadLocalDateFormat
name|fmtThreadLocal
init|=
operator|new
name|ThreadLocalDateFormat
argument_list|()
decl_stmt|;
DECL|class|ThreadLocalDateFormat
specifier|private
specifier|static
class|class
name|ThreadLocalDateFormat
extends|extends
name|ThreadLocal
argument_list|<
name|DateFormat
argument_list|>
block|{
DECL|field|proto
name|DateFormat
name|proto
decl_stmt|;
DECL|method|ThreadLocalDateFormat
specifier|public
name|ThreadLocalDateFormat
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|SimpleDateFormat
name|tmp
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss.SSS"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|tmp
operator|.
name|setTimeZone
argument_list|(
name|UTC
argument_list|)
expr_stmt|;
name|proto
operator|=
name|tmp
expr_stmt|;
block|}
DECL|method|initialValue
specifier|protected
name|DateFormat
name|initialValue
parameter_list|()
block|{
return|return
operator|(
name|DateFormat
operator|)
name|proto
operator|.
name|clone
argument_list|()
return|;
block|}
block|}
block|}
end_class
end_unit
