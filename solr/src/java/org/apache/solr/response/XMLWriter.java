begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.response
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|XML
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|DocList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|DocIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|DocSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Fieldable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_class
DECL|class|XMLWriter
specifier|public
specifier|final
class|class
name|XMLWriter
extends|extends
name|TextResponseWriter
block|{
DECL|field|CURRENT_VERSION
specifier|public
specifier|static
name|float
name|CURRENT_VERSION
init|=
literal|2.2f
decl_stmt|;
DECL|field|XML_START1
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|XML_START1
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
DECL|field|XML_STYLESHEET
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|XML_STYLESHEET
init|=
literal|"<?xml-stylesheet type=\"text/xsl\" href=\"/admin/"
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
DECL|field|XML_STYLESHEET_END
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|XML_STYLESHEET_END
init|=
literal|".xsl\"?>\n"
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
comment|/***   private static final char[] XML_START2_SCHEMA=(   "<response xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"   +" xsi:noNamespaceSchemaLocation=\"http://pi.cnet.com/cnet-search/response.xsd\">\n"           ).toCharArray();   ***/
DECL|field|XML_START2_NOSCHEMA
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|XML_START2_NOSCHEMA
init|=
operator|(
literal|"<response>\n"
operator|)
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
DECL|field|defaultIndent
specifier|private
name|boolean
name|defaultIndent
init|=
literal|false
decl_stmt|;
DECL|field|version
specifier|final
name|int
name|version
decl_stmt|;
comment|// temporary working objects...
comment|// be careful not to use these recursively...
DECL|field|tlst
specifier|private
specifier|final
name|ArrayList
name|tlst
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
DECL|method|writeResponse
specifier|public
specifier|static
name|void
name|writeResponse
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|IOException
block|{
name|XMLWriter
name|xmlWriter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|xmlWriter
operator|=
operator|new
name|XMLWriter
argument_list|(
name|writer
argument_list|,
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeResponse
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|xmlWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|XMLWriter
specifier|public
name|XMLWriter
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
name|super
argument_list|(
name|writer
argument_list|,
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|String
name|version
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
name|float
name|ver
init|=
name|version
operator|==
literal|null
condition|?
name|CURRENT_VERSION
else|:
name|Float
operator|.
name|parseFloat
argument_list|(
name|version
argument_list|)
decl_stmt|;
name|this
operator|.
name|version
operator|=
call|(
name|int
call|)
argument_list|(
name|ver
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
DECL|method|writeResponse
specifier|public
name|void
name|writeResponse
parameter_list|()
throws|throws
name|IOException
block|{
name|writer
operator|.
name|write
argument_list|(
name|XML_START1
argument_list|)
expr_stmt|;
name|String
name|stylesheet
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"stylesheet"
argument_list|)
decl_stmt|;
if|if
condition|(
name|stylesheet
operator|!=
literal|null
operator|&&
name|stylesheet
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|XML_STYLESHEET
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|stylesheet
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|XML_STYLESHEET_END
argument_list|)
expr_stmt|;
block|}
comment|/***     String noSchema = req.getParams().get("noSchema");     // todo - change when schema becomes available?     if (false&& noSchema == null)       writer.write(XML_START2_SCHEMA);     else       writer.write(XML_START2_NOSCHEMA);      ***/
name|writer
operator|.
name|write
argument_list|(
name|XML_START2_NOSCHEMA
argument_list|)
expr_stmt|;
comment|// dump response values
name|NamedList
name|lst
init|=
name|rsp
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|Boolean
name|omitHeader
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
name|CommonParams
operator|.
name|OMIT_HEADER
argument_list|)
decl_stmt|;
if|if
condition|(
name|omitHeader
operator|!=
literal|null
operator|&&
name|omitHeader
condition|)
name|lst
operator|.
name|remove
argument_list|(
literal|"responseHeader"
argument_list|)
expr_stmt|;
name|int
name|sz
init|=
name|lst
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
comment|// special case the response header if the version is 2.1 or less
if|if
condition|(
name|version
operator|<=
literal|2100
operator|&&
name|sz
operator|>
literal|0
condition|)
block|{
name|Object
name|header
init|=
name|lst
operator|.
name|getVal
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|instanceof
name|NamedList
operator|&&
literal|"responseHeader"
operator|.
name|equals
argument_list|(
name|lst
operator|.
name|getName
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"<responseHeader>"
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
name|NamedList
name|nl
init|=
operator|(
name|NamedList
operator|)
name|header
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nl
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|nl
operator|.
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
name|val
init|=
name|nl
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"status"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"QTime"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writePrim
argument_list|(
name|name
argument_list|,
literal|null
argument_list|,
name|val
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeVal
argument_list|(
name|name
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
name|decLevel
argument_list|()
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</responseHeader>"
argument_list|)
expr_stmt|;
name|start
operator|=
literal|1
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|writeVal
argument_list|(
name|lst
operator|.
name|getName
argument_list|(
name|i
argument_list|)
argument_list|,
name|lst
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|"\n</response>\n"
argument_list|)
expr_stmt|;
block|}
comment|/** Writes the XML attribute name/val. A null val means that the attribute is missing. */
DECL|method|writeAttr
specifier|private
name|void
name|writeAttr
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writeAttr
argument_list|(
name|name
argument_list|,
name|val
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|writeAttr
specifier|public
name|void
name|writeAttr
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|,
name|boolean
name|escape
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"=\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|escape
condition|)
block|{
name|XML
operator|.
name|escapeAttributeValue
argument_list|(
name|val
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|startTag
name|void
name|startTag
parameter_list|(
name|String
name|tag
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|closeTag
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|doIndent
condition|)
name|indent
argument_list|()
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|tag
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|writeAttr
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|closeTag
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|closeTag
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|field|fieldnameComparator
specifier|private
specifier|static
specifier|final
name|Comparator
name|fieldnameComparator
init|=
operator|new
name|Comparator
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o
parameter_list|,
name|Object
name|o1
parameter_list|)
block|{
name|Fieldable
name|f1
init|=
operator|(
name|Fieldable
operator|)
name|o
decl_stmt|;
name|Fieldable
name|f2
init|=
operator|(
name|Fieldable
operator|)
name|o1
decl_stmt|;
name|int
name|cmp
init|=
name|f1
operator|.
name|name
argument_list|()
operator|.
name|compareTo
argument_list|(
name|f2
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|cmp
return|;
comment|// note - the sort is stable, so this should not have affected the ordering
comment|// of fields with the same name w.r.t eachother.
block|}
block|}
decl_stmt|;
annotation|@
name|Override
DECL|method|writeDoc
specifier|public
specifier|final
name|void
name|writeDoc
parameter_list|(
name|String
name|name
parameter_list|,
name|Document
name|doc
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|returnFields
parameter_list|,
name|float
name|score
parameter_list|,
name|boolean
name|includeScore
parameter_list|)
throws|throws
name|IOException
block|{
name|startTag
argument_list|(
literal|"doc"
argument_list|,
name|name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
if|if
condition|(
name|includeScore
condition|)
block|{
name|writeFloat
argument_list|(
literal|"score"
argument_list|,
name|score
argument_list|)
expr_stmt|;
block|}
comment|// Lucene Documents have multivalued types as multiple fields
comment|// with the same name.
comment|// The XML needs to represent these as
comment|// an array.  The fastest way to detect multiple fields
comment|// with the same name is to sort them first.
comment|// using global tlst here, so we shouldn't call any other
comment|// function that uses it until we are done.
name|tlst
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|doc
operator|.
name|getFields
argument_list|()
control|)
block|{
name|Fieldable
name|ff
init|=
operator|(
name|Fieldable
operator|)
name|obj
decl_stmt|;
comment|// skip this field if it is not a field to be returned.
if|if
condition|(
name|returnFields
operator|!=
literal|null
operator|&&
operator|!
name|returnFields
operator|.
name|contains
argument_list|(
name|ff
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|tlst
operator|.
name|add
argument_list|(
name|ff
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|tlst
argument_list|,
name|fieldnameComparator
argument_list|)
expr_stmt|;
name|int
name|sz
init|=
name|tlst
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|fidx1
init|=
literal|0
decl_stmt|,
name|fidx2
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|fidx1
operator|<
name|sz
condition|)
block|{
name|Fieldable
name|f1
init|=
operator|(
name|Fieldable
operator|)
name|tlst
operator|.
name|get
argument_list|(
name|fidx1
argument_list|)
decl_stmt|;
name|String
name|fname
init|=
name|f1
operator|.
name|name
argument_list|()
decl_stmt|;
comment|// find the end of fields with this name
name|fidx2
operator|=
name|fidx1
operator|+
literal|1
expr_stmt|;
while|while
condition|(
name|fidx2
operator|<
name|sz
operator|&&
name|fname
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Fieldable
operator|)
name|tlst
operator|.
name|get
argument_list|(
name|fidx2
argument_list|)
operator|)
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|fidx2
operator|++
expr_stmt|;
block|}
comment|/***       // more efficient to use getFieldType instead of       // getField since that way dynamic fields won't have       // to create a SchemaField on the fly.       FieldType ft = schema.getFieldType(fname);       ***/
name|SchemaField
name|sf
init|=
name|schema
operator|.
name|getFieldOrNull
argument_list|(
name|fname
argument_list|)
decl_stmt|;
if|if
condition|(
name|sf
operator|==
literal|null
condition|)
block|{
name|sf
operator|=
operator|new
name|SchemaField
argument_list|(
name|fname
argument_list|,
operator|new
name|TextField
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fidx1
operator|+
literal|1
operator|==
name|fidx2
condition|)
block|{
comment|// single field value
if|if
condition|(
name|version
operator|>=
literal|2100
operator|&&
name|sf
operator|.
name|multiValued
argument_list|()
condition|)
block|{
name|startTag
argument_list|(
literal|"arr"
argument_list|,
name|fname
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doIndent
operator|=
literal|false
expr_stmt|;
name|sf
operator|.
name|write
argument_list|(
name|this
argument_list|,
literal|null
argument_list|,
name|f1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</arr>"
argument_list|)
expr_stmt|;
name|doIndent
operator|=
name|defaultIndent
expr_stmt|;
block|}
else|else
block|{
name|sf
operator|.
name|write
argument_list|(
name|this
argument_list|,
name|f1
operator|.
name|name
argument_list|()
argument_list|,
name|f1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// multiple fields with same name detected
name|startTag
argument_list|(
literal|"arr"
argument_list|,
name|fname
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
name|doIndent
operator|=
literal|false
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|fidx1
init|;
name|i
operator|<
name|fidx2
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|defaultIndent
operator|&&
operator|++
name|cnt
operator|==
literal|4
condition|)
block|{
comment|// only indent every 4th item
name|indent
argument_list|()
expr_stmt|;
name|cnt
operator|=
literal|0
expr_stmt|;
block|}
name|sf
operator|.
name|write
argument_list|(
name|this
argument_list|,
literal|null
argument_list|,
operator|(
name|Fieldable
operator|)
name|tlst
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|decLevel
argument_list|()
expr_stmt|;
comment|// if (doIndent) indent();
name|writer
operator|.
name|write
argument_list|(
literal|"</arr>"
argument_list|)
expr_stmt|;
comment|// doIndent=true;
name|doIndent
operator|=
name|defaultIndent
expr_stmt|;
block|}
name|fidx1
operator|=
name|fidx2
expr_stmt|;
block|}
name|decLevel
argument_list|()
expr_stmt|;
if|if
condition|(
name|doIndent
condition|)
name|indent
argument_list|()
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</doc>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeSolrDocument
specifier|public
name|void
name|writeSolrDocument
parameter_list|(
name|String
name|name
parameter_list|,
name|SolrDocument
name|doc
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|returnFields
parameter_list|,
name|Map
name|pseudoFields
parameter_list|)
throws|throws
name|IOException
block|{
name|startTag
argument_list|(
literal|"doc"
argument_list|,
name|name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|fname
range|:
name|doc
operator|.
name|getFieldNames
argument_list|()
control|)
block|{
if|if
condition|(
name|returnFields
operator|!=
literal|null
operator|&&
operator|!
name|returnFields
operator|.
name|contains
argument_list|(
name|fname
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Object
name|val
init|=
name|doc
operator|.
name|getFieldValue
argument_list|(
name|fname
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|instanceof
name|Collection
condition|)
block|{
name|writeVal
argument_list|(
name|fname
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// single valued... figure out if we should put<arr> tags around it anyway
name|SchemaField
name|sf
init|=
name|schema
operator|.
name|getFieldOrNull
argument_list|(
name|fname
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|>=
literal|2100
operator|&&
name|sf
operator|!=
literal|null
operator|&&
name|sf
operator|.
name|multiValued
argument_list|()
condition|)
block|{
name|startTag
argument_list|(
literal|"arr"
argument_list|,
name|fname
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doIndent
operator|=
literal|false
expr_stmt|;
name|writeVal
argument_list|(
name|fname
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</arr>"
argument_list|)
expr_stmt|;
name|doIndent
operator|=
name|defaultIndent
expr_stmt|;
block|}
else|else
block|{
name|writeVal
argument_list|(
name|fname
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|pseudoFields
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|fname
range|:
name|pseudoFields
operator|.
name|keySet
argument_list|()
control|)
block|{
name|writeVal
argument_list|(
name|fname
operator|.
name|toString
argument_list|()
argument_list|,
name|pseudoFields
operator|.
name|get
argument_list|(
name|fname
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|decLevel
argument_list|()
expr_stmt|;
if|if
condition|(
name|doIndent
condition|)
name|indent
argument_list|()
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</doc>"
argument_list|)
expr_stmt|;
block|}
DECL|interface|DocumentListInfo
specifier|private
specifier|static
interface|interface
name|DocumentListInfo
block|{
DECL|method|getMaxScore
name|Float
name|getMaxScore
parameter_list|()
function_decl|;
DECL|method|getCount
name|int
name|getCount
parameter_list|()
function_decl|;
DECL|method|getNumFound
name|long
name|getNumFound
parameter_list|()
function_decl|;
DECL|method|getStart
name|long
name|getStart
parameter_list|()
function_decl|;
DECL|method|writeDocs
name|void
name|writeDocs
parameter_list|(
name|boolean
name|includeScore
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|method|writeDocuments
specifier|private
specifier|final
name|void
name|writeDocuments
parameter_list|(
name|String
name|name
parameter_list|,
name|DocumentListInfo
name|docs
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|includeScore
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
name|includeScore
operator|=
name|fields
operator|.
name|contains
argument_list|(
literal|"score"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fields
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
operator|(
name|fields
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|includeScore
operator|)
operator|||
name|fields
operator|.
name|contains
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|fields
operator|=
literal|null
expr_stmt|;
comment|// null means return all stored fields
block|}
block|}
name|int
name|sz
init|=
name|docs
operator|.
name|getCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|doIndent
condition|)
name|indent
argument_list|()
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"<result"
argument_list|)
expr_stmt|;
name|writeAttr
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|writeAttr
argument_list|(
literal|"numFound"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|docs
operator|.
name|getNumFound
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writeAttr
argument_list|(
literal|"start"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|docs
operator|.
name|getStart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeScore
operator|&&
name|docs
operator|.
name|getMaxScore
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|writeAttr
argument_list|(
literal|"maxScore"
argument_list|,
name|Float
operator|.
name|toString
argument_list|(
name|docs
operator|.
name|getMaxScore
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sz
operator|==
literal|0
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
block|}
name|incLevel
argument_list|()
expr_stmt|;
name|docs
operator|.
name|writeDocs
argument_list|(
name|includeScore
argument_list|,
name|fields
argument_list|)
expr_stmt|;
name|decLevel
argument_list|()
expr_stmt|;
if|if
condition|(
name|doIndent
condition|)
name|indent
argument_list|()
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</result>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeSolrDocumentList
specifier|public
specifier|final
name|void
name|writeSolrDocumentList
parameter_list|(
name|String
name|name
parameter_list|,
specifier|final
name|SolrDocumentList
name|docs
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|,
name|Map
name|otherFields
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|writeDocuments
argument_list|(
name|name
argument_list|,
operator|new
name|DocumentListInfo
argument_list|()
block|{
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|docs
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|Float
name|getMaxScore
parameter_list|()
block|{
return|return
name|docs
operator|.
name|getMaxScore
argument_list|()
return|;
block|}
specifier|public
name|long
name|getNumFound
parameter_list|()
block|{
return|return
name|docs
operator|.
name|getNumFound
argument_list|()
return|;
block|}
specifier|public
name|long
name|getStart
parameter_list|()
block|{
return|return
name|docs
operator|.
name|getStart
argument_list|()
return|;
block|}
specifier|public
name|void
name|writeDocs
parameter_list|(
name|boolean
name|includeScore
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|SolrDocument
name|doc
range|:
name|docs
control|)
block|{
name|writeSolrDocument
argument_list|(
literal|null
argument_list|,
name|doc
argument_list|,
name|fields
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeDocList
specifier|public
name|void
name|writeDocList
parameter_list|(
name|String
name|name
parameter_list|,
specifier|final
name|DocList
name|ids
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|,
name|Map
name|otherFields
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|writeDocuments
argument_list|(
name|name
argument_list|,
operator|new
name|DocumentListInfo
argument_list|()
block|{
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|ids
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|Float
name|getMaxScore
parameter_list|()
block|{
return|return
name|ids
operator|.
name|maxScore
argument_list|()
return|;
block|}
specifier|public
name|long
name|getNumFound
parameter_list|()
block|{
return|return
name|ids
operator|.
name|matches
argument_list|()
return|;
block|}
specifier|public
name|long
name|getStart
parameter_list|()
block|{
return|return
name|ids
operator|.
name|offset
argument_list|()
return|;
block|}
specifier|public
name|void
name|writeDocs
parameter_list|(
name|boolean
name|includeScore
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrIndexSearcher
name|searcher
init|=
name|req
operator|.
name|getSearcher
argument_list|()
decl_stmt|;
name|DocIterator
name|iterator
init|=
name|ids
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|sz
init|=
name|ids
operator|.
name|size
argument_list|()
decl_stmt|;
name|includeScore
operator|=
name|includeScore
operator|&&
name|ids
operator|.
name|hasScores
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|int
name|id
init|=
name|iterator
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|id
argument_list|,
name|fields
argument_list|)
decl_stmt|;
name|writeDoc
argument_list|(
literal|null
argument_list|,
name|doc
argument_list|,
name|fields
argument_list|,
operator|(
name|includeScore
condition|?
name|iterator
operator|.
name|score
argument_list|()
else|:
literal|0.0f
operator|)
argument_list|,
name|includeScore
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
DECL|method|writeVal
specifier|public
name|void
name|writeVal
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|val
parameter_list|)
throws|throws
name|IOException
block|{
comment|// if there get to be enough types, perhaps hashing on the type
comment|// to get a handler might be faster (but types must be exact to do that...)
comment|// go in order of most common to least common
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|writeNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|String
condition|)
block|{
name|writeStr
argument_list|(
name|name
argument_list|,
operator|(
name|String
operator|)
name|val
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Integer
condition|)
block|{
comment|// it would be slower to pass the int ((Integer)val).intValue()
name|writeInt
argument_list|(
name|name
argument_list|,
name|val
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Boolean
condition|)
block|{
comment|// could be optimized... only two vals
name|writeBool
argument_list|(
name|name
argument_list|,
name|val
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Long
condition|)
block|{
name|writeLong
argument_list|(
name|name
argument_list|,
name|val
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Date
condition|)
block|{
name|writeDate
argument_list|(
name|name
argument_list|,
operator|(
name|Date
operator|)
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Float
condition|)
block|{
comment|// we pass the float instead of using toString() because
comment|// it may need special formatting. same for double.
name|writeFloat
argument_list|(
name|name
argument_list|,
operator|(
operator|(
name|Float
operator|)
name|val
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Double
condition|)
block|{
name|writeDouble
argument_list|(
name|name
argument_list|,
operator|(
operator|(
name|Double
operator|)
name|val
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Document
condition|)
block|{
name|writeDoc
argument_list|(
name|name
argument_list|,
operator|(
name|Document
operator|)
name|val
argument_list|,
name|returnFields
argument_list|,
literal|0.0f
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|DocList
condition|)
block|{
comment|// requires access to IndexReader
name|writeDocList
argument_list|(
name|name
argument_list|,
operator|(
name|DocList
operator|)
name|val
argument_list|,
name|returnFields
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|SolrDocumentList
condition|)
block|{
comment|// requires access to IndexReader
name|writeSolrDocumentList
argument_list|(
name|name
argument_list|,
operator|(
name|SolrDocumentList
operator|)
name|val
argument_list|,
name|returnFields
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|DocSet
condition|)
block|{
comment|// how do we know what fields to read?
comment|// todo: have a DocList/DocSet wrapper that
comment|// restricts the fields to write...?
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Map
condition|)
block|{
name|writeMap
argument_list|(
name|name
argument_list|,
operator|(
name|Map
operator|)
name|val
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|NamedList
condition|)
block|{
name|writeNamedList
argument_list|(
name|name
argument_list|,
operator|(
name|NamedList
operator|)
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Iterable
condition|)
block|{
name|writeArray
argument_list|(
name|name
argument_list|,
operator|(
operator|(
name|Iterable
operator|)
name|val
operator|)
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Object
index|[]
condition|)
block|{
name|writeArray
argument_list|(
name|name
argument_list|,
operator|(
name|Object
index|[]
operator|)
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Iterator
condition|)
block|{
name|writeArray
argument_list|(
name|name
argument_list|,
operator|(
name|Iterator
operator|)
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// default...
name|writeStr
argument_list|(
name|name
argument_list|,
name|val
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|':'
operator|+
name|val
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|//
comment|// Generic compound types
comment|//
DECL|method|writeNamedList
specifier|public
name|void
name|writeNamedList
parameter_list|(
name|String
name|name
parameter_list|,
name|NamedList
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|val
operator|.
name|size
argument_list|()
decl_stmt|;
name|startTag
argument_list|(
literal|"lst"
argument_list|,
name|name
argument_list|,
name|sz
operator|<=
literal|0
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|writeVal
argument_list|(
name|val
operator|.
name|getName
argument_list|(
name|i
argument_list|)
argument_list|,
name|val
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|decLevel
argument_list|()
expr_stmt|;
if|if
condition|(
name|sz
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|doIndent
condition|)
name|indent
argument_list|()
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</lst>"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeMap
specifier|public
name|void
name|writeMap
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
name|map
parameter_list|,
name|boolean
name|excludeOuter
parameter_list|,
name|boolean
name|isFirstVal
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|excludeOuter
condition|)
block|{
name|startTag
argument_list|(
literal|"lst"
argument_list|,
name|name
argument_list|,
name|sz
operator|<=
literal|0
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
name|entry
range|:
operator|(
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|>
operator|)
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Object
name|k
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|v
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// if (sz<indentThreshold) indent();
name|writeVal
argument_list|(
literal|null
operator|==
name|k
condition|?
literal|null
else|:
name|k
operator|.
name|toString
argument_list|()
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|excludeOuter
condition|)
block|{
name|decLevel
argument_list|()
expr_stmt|;
if|if
condition|(
name|sz
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|doIndent
condition|)
name|indent
argument_list|()
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</lst>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|writeArray
specifier|public
name|void
name|writeArray
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
index|[]
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writeArray
argument_list|(
name|name
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|val
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeArray
specifier|public
name|void
name|writeArray
parameter_list|(
name|String
name|name
parameter_list|,
name|Iterator
name|iter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|startTag
argument_list|(
literal|"arr"
argument_list|,
name|name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|writeVal
argument_list|(
literal|null
argument_list|,
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|decLevel
argument_list|()
expr_stmt|;
if|if
condition|(
name|doIndent
condition|)
name|indent
argument_list|()
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</arr>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|startTag
argument_list|(
literal|"arr"
argument_list|,
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|//
comment|// Primitive types
comment|//
annotation|@
name|Override
DECL|method|writeNull
specifier|public
name|void
name|writeNull
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|writePrim
argument_list|(
literal|"null"
argument_list|,
name|name
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeStr
specifier|public
name|void
name|writeStr
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|,
name|boolean
name|escape
parameter_list|)
throws|throws
name|IOException
block|{
name|writePrim
argument_list|(
literal|"str"
argument_list|,
name|name
argument_list|,
name|val
argument_list|,
name|escape
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeInt
specifier|public
name|void
name|writeInt
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writePrim
argument_list|(
literal|"int"
argument_list|,
name|name
argument_list|,
name|val
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeLong
specifier|public
name|void
name|writeLong
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writePrim
argument_list|(
literal|"long"
argument_list|,
name|name
argument_list|,
name|val
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeBool
specifier|public
name|void
name|writeBool
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writePrim
argument_list|(
literal|"bool"
argument_list|,
name|name
argument_list|,
name|val
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeFloat
specifier|public
name|void
name|writeFloat
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writePrim
argument_list|(
literal|"float"
argument_list|,
name|name
argument_list|,
name|val
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeFloat
specifier|public
name|void
name|writeFloat
parameter_list|(
name|String
name|name
parameter_list|,
name|float
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writeFloat
argument_list|(
name|name
argument_list|,
name|Float
operator|.
name|toString
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeDouble
specifier|public
name|void
name|writeDouble
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writePrim
argument_list|(
literal|"double"
argument_list|,
name|name
argument_list|,
name|val
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeDouble
specifier|public
name|void
name|writeDouble
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writeDouble
argument_list|(
name|name
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeDate
specifier|public
name|void
name|writeDate
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writePrim
argument_list|(
literal|"date"
argument_list|,
name|name
argument_list|,
name|val
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// OPT - specific writeInt, writeFloat, methods might be faster since
comment|// there would be less write calls (write("<int name=\"" + name + ... +</int>)
comment|//
DECL|method|writePrim
specifier|private
name|void
name|writePrim
parameter_list|(
name|String
name|tag
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|,
name|boolean
name|escape
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|contentLen
init|=
name|val
operator|==
literal|null
condition|?
literal|0
else|:
name|val
operator|.
name|length
argument_list|()
decl_stmt|;
name|startTag
argument_list|(
name|tag
argument_list|,
name|name
argument_list|,
name|contentLen
operator|==
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|contentLen
operator|==
literal|0
condition|)
return|return;
if|if
condition|(
name|escape
condition|)
block|{
name|XML
operator|.
name|escapeCharData
argument_list|(
name|val
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
name|val
argument_list|,
literal|0
argument_list|,
name|contentLen
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
