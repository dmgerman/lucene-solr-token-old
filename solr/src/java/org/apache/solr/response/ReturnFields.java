begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.response
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|transform
operator|.
name|DocIdAugmenter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|transform
operator|.
name|DocTransformer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|transform
operator|.
name|DocTransformers
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|transform
operator|.
name|ExplainAugmenter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|transform
operator|.
name|ScoreAugmenter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|transform
operator|.
name|ValueAugmenter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|SolrPluginUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * A class representing the return fields  *   * @version $Id: JSONResponseWriter.java 1065304 2011-01-30 15:10:15Z rmuir $  * @since solr 4.0  */
end_comment
begin_class
DECL|class|ReturnFields
specifier|public
class|class
name|ReturnFields
block|{
DECL|field|log
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReturnFields
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SCORE
specifier|public
specifier|static
specifier|final
name|String
name|SCORE
init|=
literal|"score"
decl_stmt|;
DECL|field|DOCID
specifier|public
specifier|static
specifier|final
name|String
name|DOCID
init|=
literal|"_docid_"
decl_stmt|;
DECL|field|SHARD
specifier|public
specifier|static
specifier|final
name|String
name|SHARD
init|=
literal|"_shard_"
decl_stmt|;
DECL|field|EXPLAIN
specifier|public
specifier|static
specifier|final
name|String
name|EXPLAIN
init|=
literal|"_explain_"
decl_stmt|;
DECL|field|fields
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|fields
decl_stmt|;
comment|// includes 'augment' names or null
DECL|field|transformer
specifier|private
name|DocTransformer
name|transformer
decl_stmt|;
DECL|field|wantsScore
specifier|private
name|boolean
name|wantsScore
init|=
literal|false
decl_stmt|;
DECL|method|getReturnFields
specifier|public
specifier|static
name|ReturnFields
name|getReturnFields
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|)
block|{
return|return
name|getReturnFields
argument_list|(
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|)
argument_list|,
name|req
argument_list|)
return|;
block|}
DECL|method|getReturnFields
specifier|public
specifier|static
name|ReturnFields
name|getReturnFields
parameter_list|(
name|String
name|fl
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|)
block|{
name|ReturnFields
name|rf
init|=
operator|new
name|ReturnFields
argument_list|()
decl_stmt|;
name|rf
operator|.
name|wantsScore
operator|=
literal|false
expr_stmt|;
name|rf
operator|.
name|fields
operator|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
comment|// order is important for CSVResponseWriter
name|boolean
name|allFields
init|=
literal|false
decl_stmt|;
name|DocTransformers
name|augmenters
init|=
operator|new
name|DocTransformers
argument_list|()
decl_stmt|;
if|if
condition|(
name|fl
operator|!=
literal|null
condition|)
block|{
comment|// TODO - this could become more efficient if widely used.
name|String
index|[]
name|flst
init|=
name|SolrPluginUtils
operator|.
name|split
argument_list|(
name|fl
argument_list|)
decl_stmt|;
if|if
condition|(
name|flst
operator|.
name|length
operator|>
literal|0
operator|&&
operator|!
operator|(
name|flst
operator|.
name|length
operator|==
literal|1
operator|&&
name|flst
index|[
literal|0
index|]
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|IndexSchema
name|schema
init|=
name|req
operator|.
name|getSchema
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|flst
control|)
block|{
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|allFields
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SCORE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|rf
operator|.
name|fields
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|rf
operator|.
name|wantsScore
operator|=
literal|true
expr_stmt|;
name|augmenters
operator|.
name|addTransformer
argument_list|(
operator|new
name|ScoreAugmenter
argument_list|(
name|SCORE
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rf
operator|.
name|fields
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// Check if it is a real score
name|SchemaField
name|sf
init|=
name|schema
operator|.
name|getFieldOrNull
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|sf
operator|==
literal|null
condition|)
block|{
comment|// not a field name, but possibly return value
if|if
condition|(
name|DOCID
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|augmenters
operator|.
name|addTransformer
argument_list|(
operator|new
name|DocIdAugmenter
argument_list|(
name|DOCID
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SHARD
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|String
name|id
init|=
literal|"getshardid???"
decl_stmt|;
name|augmenters
operator|.
name|addTransformer
argument_list|(
operator|new
name|ValueAugmenter
argument_list|(
name|SHARD
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|EXPLAIN
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|augmenters
operator|.
name|addTransformer
argument_list|(
operator|new
name|ExplainAugmenter
argument_list|(
name|EXPLAIN
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"{!func}"
argument_list|)
condition|)
block|{
comment|// help?  not sure how to parse a ValueSorce
comment|// -- not to mention, we probably want to reuse existing ones!
name|augmenters
operator|.
name|addTransformer
argument_list|(
operator|new
name|ValueAugmenter
argument_list|(
name|name
argument_list|,
literal|"TODO:"
operator|+
name|name
argument_list|)
argument_list|)
expr_stmt|;
comment|//                try {
comment|//                  String func = name.substring( "{!func}".length() );
comment|//                  SolrParams local = null;
comment|//                  FunctionQParser p = new FunctionQParser( func, local, req.getParams(), req );
comment|//                  Query q = p.parse();
comment|//                  ValueSource vs = p.parseValueSource();
comment|//                  AtomicReaderContext ctx = new AtomicReaderContext( req.getSearcher().getIndexReader() );
comment|//                  Map mmm = null; // ?????
comment|//                  DocValues values = p.parseValueSource().getValues( mmm, ctx );
comment|//                  augmenters.addAugmenter( new DocValuesAugmenter( name, values ) );
comment|//                }
comment|//                catch( Exception ex ) {
comment|//                  throw new SolrException( org.apache.solr.common.SolrException.ErrorCode.BAD_REQUEST,
comment|//                      "Unable to parse augmented field: "+name, ex );
comment|//                }
block|}
else|else
block|{
comment|// maybe throw an exception?
comment|//                throw new SolrException( org.apache.solr.common.SolrException.ErrorCode.BAD_REQUEST,
comment|//                    "Unknown Return Field: "+name );
block|}
block|}
block|}
block|}
block|}
block|}
comment|// Legacy behavior? "score" == "*,score"
if|if
condition|(
name|rf
operator|.
name|fields
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|rf
operator|.
name|wantsScore
condition|)
block|{
name|allFields
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|allFields
operator|||
name|rf
operator|.
name|fields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rf
operator|.
name|fields
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|augmenters
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|rf
operator|.
name|transformer
operator|=
name|augmenters
operator|.
name|getTransformer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|augmenters
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|rf
operator|.
name|transformer
operator|=
name|augmenters
expr_stmt|;
block|}
return|return
name|rf
return|;
block|}
DECL|method|getFieldNames
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getFieldNames
parameter_list|()
block|{
return|return
name|fields
return|;
block|}
DECL|method|getWantsScore
specifier|public
name|boolean
name|getWantsScore
parameter_list|()
block|{
return|return
name|wantsScore
return|;
block|}
DECL|method|contains
specifier|public
name|boolean
name|contains
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|fields
operator|==
literal|null
operator|||
name|fields
operator|.
name|contains
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|getTransformer
specifier|public
name|DocTransformer
name|getTransformer
parameter_list|()
block|{
return|return
name|transformer
return|;
block|}
block|}
end_class
end_unit
