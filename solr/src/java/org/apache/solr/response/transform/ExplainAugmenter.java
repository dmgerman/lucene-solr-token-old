begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.response.transform
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|transform
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|SolrPluginUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * Add query explain info directly to Document  *  * @version $Id: JSONResponseWriter.java 1065304 2011-01-30 15:10:15Z rmuir $  * @since solr 4.0  */
end_comment
begin_class
DECL|class|ExplainAugmenter
specifier|public
class|class
name|ExplainAugmenter
extends|extends
name|TransformerWithContext
block|{
DECL|enum|Style
specifier|static
enum|enum
name|Style
block|{
DECL|enum constant|NL
name|NL
block|,
DECL|enum constant|TEXT
name|TEXT
block|,
DECL|enum constant|HTML
name|HTML
block|}
empty_stmt|;
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|style
specifier|final
name|Style
name|style
decl_stmt|;
DECL|method|ExplainAugmenter
specifier|public
name|ExplainAugmenter
parameter_list|(
name|String
name|display
parameter_list|)
block|{
name|this
argument_list|(
name|display
argument_list|,
name|Style
operator|.
name|TEXT
argument_list|)
expr_stmt|;
block|}
DECL|method|ExplainAugmenter
specifier|public
name|ExplainAugmenter
parameter_list|(
name|String
name|display
parameter_list|,
name|Style
name|style
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|display
expr_stmt|;
name|this
operator|.
name|style
operator|=
name|style
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transform
specifier|public
name|void
name|transform
parameter_list|(
name|SolrDocument
name|doc
parameter_list|,
name|int
name|docid
parameter_list|)
block|{
if|if
condition|(
name|context
operator|!=
literal|null
operator|&&
name|context
operator|.
name|query
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Explanation
name|exp
init|=
name|context
operator|.
name|searcher
operator|.
name|explain
argument_list|(
name|context
operator|.
name|query
argument_list|,
name|docid
argument_list|)
decl_stmt|;
if|if
condition|(
name|style
operator|==
name|Style
operator|.
name|NL
condition|)
block|{
name|doc
operator|.
name|setField
argument_list|(
name|name
argument_list|,
name|SolrPluginUtils
operator|.
name|explanationToNamedList
argument_list|(
name|exp
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|style
operator|==
name|Style
operator|.
name|NL
condition|)
block|{
name|doc
operator|.
name|setField
argument_list|(
name|name
argument_list|,
name|exp
operator|.
name|toHtml
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|setField
argument_list|(
name|name
argument_list|,
name|exp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
