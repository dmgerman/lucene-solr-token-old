begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|QueryParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|QueryParser
operator|.
name|Operator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FuzzyQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|NumericRangeQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PrefixQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermRangeQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|WildcardQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|MapSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|LocalSolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|function
operator|.
name|FunctionQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_comment
comment|/**  * Collection of static utilities useful for query parsing.  *  * @version $Id$  */
end_comment
begin_class
DECL|class|QueryParsing
specifier|public
class|class
name|QueryParsing
block|{
DECL|field|OP
specifier|public
specifier|static
specifier|final
name|String
name|OP
init|=
literal|"q.op"
decl_stmt|;
comment|// the SolrParam used to override the QueryParser "default operator"
DECL|field|V
specifier|public
specifier|static
specifier|final
name|String
name|V
init|=
literal|"v"
decl_stmt|;
comment|// value of this parameter
DECL|field|F
specifier|public
specifier|static
specifier|final
name|String
name|F
init|=
literal|"f"
decl_stmt|;
comment|// field that a query or command pertains to
DECL|field|TYPE
specifier|public
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"type"
decl_stmt|;
comment|// type of this query or command
DECL|field|DEFTYPE
specifier|public
specifier|static
specifier|final
name|String
name|DEFTYPE
init|=
literal|"defType"
decl_stmt|;
comment|// default type for any direct subqueries
DECL|field|LOCALPARAM_START
specifier|public
specifier|static
specifier|final
name|String
name|LOCALPARAM_START
init|=
literal|"{!"
decl_stmt|;
DECL|field|LOCALPARAM_END
specifier|public
specifier|static
specifier|final
name|char
name|LOCALPARAM_END
init|=
literal|'}'
decl_stmt|;
DECL|field|DOCID
specifier|public
specifier|static
specifier|final
name|String
name|DOCID
init|=
literal|"_docid_"
decl_stmt|;
comment|/**    * Returns the "prefered" default operator for use by Query Parsers,     * based on the settings in the IndexSchema which may be overridden using     * an optional String override value.    *    * @see IndexSchema#getQueryParserDefaultOperator()    * @see #OP    */
DECL|method|getQueryParserDefaultOperator
specifier|public
specifier|static
name|Operator
name|getQueryParserDefaultOperator
parameter_list|(
specifier|final
name|IndexSchema
name|sch
parameter_list|,
specifier|final
name|String
name|override
parameter_list|)
block|{
name|String
name|val
init|=
name|override
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|val
condition|)
name|val
operator|=
name|sch
operator|.
name|getQueryParserDefaultOperator
argument_list|()
expr_stmt|;
return|return
literal|"AND"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|?
name|Operator
operator|.
name|AND
else|:
name|Operator
operator|.
name|OR
return|;
block|}
comment|/**    * Helper utility for parsing a query using the Lucene QueryParser syntax.    *    * @param qs     query expression in standard Lucene syntax    * @param schema used for default operator (overridden by params) and passed to the query parser for field format analysis information    */
DECL|method|parseQuery
specifier|public
specifier|static
name|Query
name|parseQuery
parameter_list|(
name|String
name|qs
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
block|{
return|return
name|parseQuery
argument_list|(
name|qs
argument_list|,
literal|null
argument_list|,
name|schema
argument_list|)
return|;
block|}
comment|/**    * Helper utility for parsing a query using the Lucene QueryParser syntax.    *    * @param qs           query expression in standard Lucene syntax    * @param defaultField default field used for unqualified search terms in the query expression    * @param schema       used for default operator (overridden by params) and passed to the query parser for field format analysis information    */
DECL|method|parseQuery
specifier|public
specifier|static
name|Query
name|parseQuery
parameter_list|(
name|String
name|qs
parameter_list|,
name|String
name|defaultField
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
block|{
try|try
block|{
name|Query
name|query
init|=
name|schema
operator|.
name|getSolrQueryParser
argument_list|(
name|defaultField
argument_list|)
operator|.
name|parse
argument_list|(
name|qs
argument_list|)
decl_stmt|;
if|if
condition|(
name|SolrCore
operator|.
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|SolrCore
operator|.
name|log
operator|.
name|trace
argument_list|(
literal|"After QueryParser:"
operator|+
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|SolrCore
operator|.
name|log
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Error parsing Lucene query"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Helper utility for parsing a query using the Lucene QueryParser syntax.    *    * @param qs           query expression in standard Lucene syntax    * @param defaultField default field used for unqualified search terms in the query expression    * @param params       used to determine the default operator, overriding the schema specified operator    * @param schema       used for default operator (overridden by params) and passed to the query parser for field format analysis information    */
DECL|method|parseQuery
specifier|public
specifier|static
name|Query
name|parseQuery
parameter_list|(
name|String
name|qs
parameter_list|,
name|String
name|defaultField
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
block|{
try|try
block|{
name|SolrQueryParser
name|parser
init|=
name|schema
operator|.
name|getSolrQueryParser
argument_list|(
name|defaultField
argument_list|)
decl_stmt|;
name|parser
operator|.
name|setDefaultOperator
argument_list|(
name|getQueryParserDefaultOperator
argument_list|(
name|schema
argument_list|,
name|params
operator|.
name|get
argument_list|(
name|QueryParsing
operator|.
name|OP
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|parser
operator|.
name|parse
argument_list|(
name|qs
argument_list|)
decl_stmt|;
if|if
condition|(
name|SolrCore
operator|.
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|SolrCore
operator|.
name|log
operator|.
name|trace
argument_list|(
literal|"After QueryParser:"
operator|+
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|SolrCore
operator|.
name|log
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Query parsing error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// note to self: something needs to detect infinite recursion when parsing queries
DECL|method|parseLocalParams
specifier|static
name|int
name|parseLocalParams
parameter_list|(
name|String
name|txt
parameter_list|,
name|int
name|start
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|target
parameter_list|,
name|SolrParams
name|params
parameter_list|)
throws|throws
name|ParseException
block|{
name|int
name|off
init|=
name|start
decl_stmt|;
if|if
condition|(
operator|!
name|txt
operator|.
name|startsWith
argument_list|(
name|LOCALPARAM_START
argument_list|,
name|off
argument_list|)
condition|)
return|return
name|start
return|;
name|StrParser
name|p
init|=
operator|new
name|StrParser
argument_list|(
name|txt
argument_list|,
name|start
argument_list|,
name|txt
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|p
operator|.
name|pos
operator|+=
literal|2
expr_stmt|;
comment|// skip over "{!"
for|for
control|(
init|;
condition|;
control|)
block|{
comment|/*       if (p.pos>=txt.length()) {         throw new ParseException("Missing '}' parsing local params '" + txt + '"');       }       */
name|char
name|ch
init|=
name|p
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|ch
operator|==
name|LOCALPARAM_END
condition|)
block|{
return|return
name|p
operator|.
name|pos
operator|+
literal|1
return|;
block|}
name|String
name|id
init|=
name|p
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Expected identifier '}' parsing local params '"
operator|+
name|txt
operator|+
literal|'"'
argument_list|)
throw|;
block|}
name|String
name|val
init|=
literal|null
decl_stmt|;
name|ch
operator|=
name|p
operator|.
name|peek
argument_list|()
expr_stmt|;
if|if
condition|(
name|ch
operator|!=
literal|'='
condition|)
block|{
comment|// single word... treat {!func} as type=func for easy lookup
name|val
operator|=
name|id
expr_stmt|;
name|id
operator|=
name|TYPE
expr_stmt|;
block|}
else|else
block|{
comment|// saw equals, so read value
name|p
operator|.
name|pos
operator|++
expr_stmt|;
name|ch
operator|=
name|p
operator|.
name|peek
argument_list|()
expr_stmt|;
name|boolean
name|deref
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'$'
condition|)
block|{
name|p
operator|.
name|pos
operator|++
expr_stmt|;
name|ch
operator|=
name|p
operator|.
name|peek
argument_list|()
expr_stmt|;
name|deref
operator|=
literal|true
expr_stmt|;
comment|// dereference whatever value is read by treating it as a variable name
block|}
if|if
condition|(
name|ch
operator|==
literal|'\"'
operator|||
name|ch
operator|==
literal|'\''
condition|)
block|{
name|val
operator|=
name|p
operator|.
name|getQuotedString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// read unquoted literal ended by whitespace or '}'
comment|// there is no escaping.
name|int
name|valStart
init|=
name|p
operator|.
name|pos
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|p
operator|.
name|pos
operator|>=
name|p
operator|.
name|end
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Missing end to unquoted value starting at "
operator|+
name|valStart
operator|+
literal|" str='"
operator|+
name|txt
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|char
name|c
init|=
name|p
operator|.
name|val
operator|.
name|charAt
argument_list|(
name|p
operator|.
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
name|LOCALPARAM_END
operator|||
name|Character
operator|.
name|isWhitespace
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|val
operator|=
name|p
operator|.
name|val
operator|.
name|substring
argument_list|(
name|valStart
argument_list|,
name|p
operator|.
name|pos
argument_list|)
expr_stmt|;
break|break;
block|}
name|p
operator|.
name|pos
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|deref
condition|)
block|{
comment|// dereference parameter
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|val
operator|=
name|params
operator|.
name|get
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|target
operator|!=
literal|null
condition|)
name|target
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * "foo" returns null    * "{!prefix f=myfield}yes" returns type="prefix",f="myfield",v="yes"    * "{!prefix f=myfield v=$p}" returns type="prefix",f="myfield",v=params.get("p")    */
DECL|method|getLocalParams
specifier|public
specifier|static
name|SolrParams
name|getLocalParams
parameter_list|(
name|String
name|txt
parameter_list|,
name|SolrParams
name|params
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|txt
operator|==
literal|null
operator|||
operator|!
name|txt
operator|.
name|startsWith
argument_list|(
name|LOCALPARAM_START
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|localParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|start
init|=
name|QueryParsing
operator|.
name|parseLocalParams
argument_list|(
name|txt
argument_list|,
literal|0
argument_list|,
name|localParams
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|String
name|val
decl_stmt|;
if|if
condition|(
name|start
operator|>=
name|txt
operator|.
name|length
argument_list|()
condition|)
block|{
comment|// if the rest of the string is empty, check for "v" to provide the value
name|val
operator|=
name|localParams
operator|.
name|get
argument_list|(
name|V
argument_list|)
expr_stmt|;
name|val
operator|=
name|val
operator|==
literal|null
condition|?
literal|""
else|:
name|val
expr_stmt|;
block|}
else|else
block|{
name|val
operator|=
name|txt
operator|.
name|substring
argument_list|(
name|start
argument_list|)
expr_stmt|;
block|}
name|localParams
operator|.
name|put
argument_list|(
name|V
argument_list|,
name|val
argument_list|)
expr_stmt|;
return|return
operator|new
name|MapSolrParams
argument_list|(
name|localParams
argument_list|)
return|;
block|}
comment|/**    * Returns null if the sortSpec is the standard sort desc.    *<p/>    *<p>    * The form of the sort specification string currently parsed is:    *</p>    *<pre>>    * SortSpec ::= SingleSort [, SingleSort]*    * SingleSort ::=<fieldname> SortDirection    * SortDirection ::= top | desc | bottom | asc    *</pre>    * Examples:    *<pre>    *   score desc               #normal sort by score (will return null)    *   weight bottom            #sort by weight ascending    *   weight desc              #sort by weight descending    *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties    *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker    *</pre>    */
DECL|method|parseSort
specifier|public
specifier|static
name|Sort
name|parseSort
parameter_list|(
name|String
name|sortSpec
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
block|{
if|if
condition|(
name|sortSpec
operator|==
literal|null
operator|||
name|sortSpec
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
name|char
index|[]
name|chars
init|=
name|sortSpec
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
name|sortSpec
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|sort
init|=
literal|null
decl_stmt|;
name|String
name|order
init|=
literal|null
decl_stmt|;
name|int
name|functionDepth
init|=
literal|0
decl_stmt|;
name|boolean
name|score
init|=
literal|true
decl_stmt|;
name|List
argument_list|<
name|SortField
argument_list|>
name|lst
init|=
operator|new
name|ArrayList
argument_list|<
name|SortField
argument_list|>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|boolean
name|needOrder
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|chars
operator|.
name|length
condition|)
block|{
if|if
condition|(
name|Character
operator|.
name|isWhitespace
argument_list|(
name|chars
index|[
name|i
index|]
argument_list|)
operator|&&
name|functionDepth
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|buffer
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|//do nothing
block|}
else|else
block|{
if|if
condition|(
name|needOrder
operator|==
literal|false
condition|)
block|{
name|sort
operator|=
name|buffer
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|needOrder
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|order
operator|=
name|buffer
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|needOrder
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|chars
index|[
name|i
index|]
operator|==
literal|'('
operator|&&
name|functionDepth
operator|>=
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|chars
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|functionDepth
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|chars
index|[
name|i
index|]
operator|==
literal|')'
operator|&&
name|functionDepth
operator|>
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|chars
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|functionDepth
operator|--
expr_stmt|;
comment|//close up one layer
block|}
elseif|else
if|if
condition|(
name|chars
index|[
name|i
index|]
operator|==
literal|','
operator|&&
name|functionDepth
operator|==
literal|0
condition|)
block|{
comment|//can either be a separator of sort declarations, or a separator in a function
comment|//we have a separator between sort declarations,
comment|// We may need an order still, but then evaluate it, as we should have everything we need
if|if
condition|(
name|needOrder
operator|==
literal|true
operator|&&
name|buffer
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|order
operator|=
name|buffer
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|needOrder
operator|=
literal|false
expr_stmt|;
block|}
name|score
operator|=
name|processSort
argument_list|(
name|schema
argument_list|,
name|sort
argument_list|,
name|order
argument_list|,
name|lst
argument_list|)
expr_stmt|;
name|sort
operator|=
literal|null
expr_stmt|;
name|order
operator|=
literal|null
expr_stmt|;
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//get ready for the next one, if there is one
block|}
elseif|else
if|if
condition|(
name|chars
index|[
name|i
index|]
operator|==
literal|','
operator|&&
name|functionDepth
operator|>
literal|0
condition|)
block|{
comment|//we are in a function
name|buffer
operator|.
name|append
argument_list|(
name|chars
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//just a regular old char, add it to the buffer
name|buffer
operator|.
name|append
argument_list|(
name|chars
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|buffer
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|needOrder
condition|)
block|{
comment|//see if we have anything left, at most it should be an order
name|order
operator|=
name|buffer
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|needOrder
operator|=
literal|false
expr_stmt|;
block|}
comment|//do some sanity checks
if|if
condition|(
name|functionDepth
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unable to parse sort spec, mismatched parentheses: "
operator|+
name|sortSpec
argument_list|)
throw|;
block|}
if|if
condition|(
name|buffer
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|//there's something wrong, as everything should have been parsed by now
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unable to parse sort spec: "
operator|+
name|sortSpec
argument_list|)
throw|;
block|}
if|if
condition|(
name|needOrder
operator|==
literal|false
operator|&&
name|sort
operator|!=
literal|null
operator|&&
name|sort
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|==
literal|false
operator|&&
name|order
operator|!=
literal|null
operator|&&
name|order
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|==
literal|false
condition|)
block|{
comment|//handle the last declaration
name|score
operator|=
name|processSort
argument_list|(
name|schema
argument_list|,
name|sort
argument_list|,
name|order
argument_list|,
name|lst
argument_list|)
expr_stmt|;
block|}
comment|//If the normal case (by score desc) do nothing
if|if
condition|(
name|lst
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|score
operator|==
literal|true
operator|&&
name|lst
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReverse
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
literal|null
return|;
comment|// do normal scoring...
block|}
return|return
operator|new
name|Sort
argument_list|(
operator|(
name|SortField
index|[]
operator|)
name|lst
operator|.
name|toArray
argument_list|(
operator|new
name|SortField
index|[
name|lst
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
DECL|method|processSort
specifier|private
specifier|static
name|boolean
name|processSort
parameter_list|(
name|IndexSchema
name|schema
parameter_list|,
name|String
name|sort
parameter_list|,
name|String
name|order
parameter_list|,
name|List
argument_list|<
name|SortField
argument_list|>
name|lst
parameter_list|)
block|{
name|boolean
name|score
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|sort
operator|!=
literal|null
operator|&&
name|order
operator|!=
literal|null
condition|)
block|{
name|boolean
name|top
init|=
literal|true
decl_stmt|;
if|if
condition|(
literal|"desc"
operator|.
name|equals
argument_list|(
name|order
argument_list|)
operator|||
literal|"top"
operator|.
name|equals
argument_list|(
name|order
argument_list|)
condition|)
block|{
name|top
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"asc"
operator|.
name|equals
argument_list|(
name|order
argument_list|)
operator|||
literal|"bottom"
operator|.
name|equals
argument_list|(
name|order
argument_list|)
condition|)
block|{
name|top
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown sort order: "
operator|+
name|order
argument_list|)
throw|;
block|}
comment|//we got the order, now deal with the sort
if|if
condition|(
literal|"score"
operator|.
name|equals
argument_list|(
name|sort
argument_list|)
condition|)
block|{
name|score
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|top
condition|)
block|{
name|lst
operator|.
name|add
argument_list|(
name|SortField
operator|.
name|FIELD_SCORE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lst
operator|.
name|add
argument_list|(
operator|new
name|SortField
argument_list|(
literal|null
argument_list|,
name|SortField
operator|.
name|SCORE
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|DOCID
operator|.
name|equals
argument_list|(
name|sort
argument_list|)
condition|)
block|{
name|lst
operator|.
name|add
argument_list|(
operator|new
name|SortField
argument_list|(
literal|null
argument_list|,
name|SortField
operator|.
name|DOC
argument_list|,
name|top
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//See if we have a Field first, then see if it is a function, then throw an exception
comment|// getField could throw an exception if the name isn't found
name|SchemaField
name|f
init|=
literal|null
decl_stmt|;
try|try
block|{
name|f
operator|=
name|schema
operator|.
name|getField
argument_list|(
name|sort
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
comment|//Not an error just yet
block|}
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|f
operator|==
literal|null
operator|||
operator|!
name|f
operator|.
name|indexed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"can not sort on unindexed field: "
operator|+
name|sort
argument_list|)
throw|;
block|}
name|lst
operator|.
name|add
argument_list|(
name|f
operator|.
name|getType
argument_list|()
operator|.
name|getSortField
argument_list|(
name|f
argument_list|,
name|top
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//See if we have a function:
name|FunctionQuery
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|query
operator|=
name|parseFunction
argument_list|(
name|sort
argument_list|,
name|schema
argument_list|)
expr_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|ValueSource
name|valueSource
init|=
name|query
operator|.
name|getValueSource
argument_list|()
decl_stmt|;
comment|//We have a function query
try|try
block|{
name|lst
operator|.
name|add
argument_list|(
name|valueSource
operator|.
name|getSortField
argument_list|(
name|top
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"error getting the sort for this function: "
operator|+
name|sort
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"can not sort on undefined function: "
operator|+
name|sort
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"can not sort on undefined field or function: "
operator|+
name|sort
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
literal|null
condition|)
block|{
comment|//no sort value
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Must declare sort field or function"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|order
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Missing sort order: "
argument_list|)
throw|;
block|}
return|return
name|score
return|;
block|}
comment|///////////////////////////
comment|///////////////////////////
comment|///////////////////////////
DECL|method|writeFieldName
specifier|static
name|FieldType
name|writeFieldName
parameter_list|(
name|String
name|name
parameter_list|,
name|IndexSchema
name|schema
parameter_list|,
name|Appendable
name|out
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
name|FieldType
name|ft
init|=
literal|null
decl_stmt|;
name|ft
operator|=
name|schema
operator|.
name|getFieldTypeNoEx
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|ft
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|"(UNKNOWN FIELD "
operator|+
name|name
operator|+
literal|')'
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
return|return
name|ft
return|;
block|}
DECL|method|writeFieldVal
specifier|static
name|void
name|writeFieldVal
parameter_list|(
name|String
name|val
parameter_list|,
name|FieldType
name|ft
parameter_list|,
name|Appendable
name|out
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|ft
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|out
operator|.
name|append
argument_list|(
name|ft
operator|.
name|indexedToReadable
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|"EXCEPTION(val="
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|out
operator|.
name|append
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @see #toString(Query,IndexSchema)    */
DECL|method|toString
specifier|public
specifier|static
name|void
name|toString
parameter_list|(
name|Query
name|query
parameter_list|,
name|IndexSchema
name|schema
parameter_list|,
name|Appendable
name|out
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|writeBoost
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|query
operator|instanceof
name|TermQuery
condition|)
block|{
name|TermQuery
name|q
init|=
operator|(
name|TermQuery
operator|)
name|query
decl_stmt|;
name|Term
name|t
init|=
name|q
operator|.
name|getTerm
argument_list|()
decl_stmt|;
name|FieldType
name|ft
init|=
name|writeFieldName
argument_list|(
name|t
operator|.
name|field
argument_list|()
argument_list|,
name|schema
argument_list|,
name|out
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|writeFieldVal
argument_list|(
name|t
operator|.
name|text
argument_list|()
argument_list|,
name|ft
argument_list|,
name|out
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|TermRangeQuery
condition|)
block|{
name|TermRangeQuery
name|q
init|=
operator|(
name|TermRangeQuery
operator|)
name|query
decl_stmt|;
name|String
name|fname
init|=
name|q
operator|.
name|getField
argument_list|()
decl_stmt|;
name|FieldType
name|ft
init|=
name|writeFieldName
argument_list|(
name|fname
argument_list|,
name|schema
argument_list|,
name|out
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|out
operator|.
name|append
argument_list|(
name|q
operator|.
name|includesLower
argument_list|()
condition|?
literal|'['
else|:
literal|'{'
argument_list|)
expr_stmt|;
name|String
name|lt
init|=
name|q
operator|.
name|getLowerTerm
argument_list|()
decl_stmt|;
name|String
name|ut
init|=
name|q
operator|.
name|getUpperTerm
argument_list|()
decl_stmt|;
if|if
condition|(
name|lt
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeFieldVal
argument_list|(
name|lt
argument_list|,
name|ft
argument_list|,
name|out
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|append
argument_list|(
literal|" TO "
argument_list|)
expr_stmt|;
if|if
condition|(
name|ut
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeFieldVal
argument_list|(
name|ut
argument_list|,
name|ft
argument_list|,
name|out
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|append
argument_list|(
name|q
operator|.
name|includesUpper
argument_list|()
condition|?
literal|']'
else|:
literal|'}'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|NumericRangeQuery
condition|)
block|{
name|NumericRangeQuery
name|q
init|=
operator|(
name|NumericRangeQuery
operator|)
name|query
decl_stmt|;
name|String
name|fname
init|=
name|q
operator|.
name|getField
argument_list|()
decl_stmt|;
name|FieldType
name|ft
init|=
name|writeFieldName
argument_list|(
name|fname
argument_list|,
name|schema
argument_list|,
name|out
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|out
operator|.
name|append
argument_list|(
name|q
operator|.
name|includesMin
argument_list|()
condition|?
literal|'['
else|:
literal|'{'
argument_list|)
expr_stmt|;
name|Number
name|lt
init|=
name|q
operator|.
name|getMin
argument_list|()
decl_stmt|;
name|Number
name|ut
init|=
name|q
operator|.
name|getMax
argument_list|()
decl_stmt|;
if|if
condition|(
name|lt
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|append
argument_list|(
name|lt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|append
argument_list|(
literal|" TO "
argument_list|)
expr_stmt|;
if|if
condition|(
name|ut
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|append
argument_list|(
name|ut
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|append
argument_list|(
name|q
operator|.
name|includesMax
argument_list|()
condition|?
literal|']'
else|:
literal|'}'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|BooleanQuery
condition|)
block|{
name|BooleanQuery
name|q
init|=
operator|(
name|BooleanQuery
operator|)
name|query
decl_stmt|;
name|boolean
name|needParens
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|q
operator|.
name|getBoost
argument_list|()
operator|!=
literal|1.0
operator|||
name|q
operator|.
name|getMinimumNumberShouldMatch
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|needParens
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|needParens
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
block|}
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|BooleanClause
name|c
range|:
operator|(
name|List
argument_list|<
name|BooleanClause
argument_list|>
operator|)
name|q
operator|.
name|clauses
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|.
name|isProhibited
argument_list|()
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|isRequired
argument_list|()
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'+'
argument_list|)
expr_stmt|;
block|}
name|Query
name|subQuery
init|=
name|c
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|boolean
name|wrapQuery
init|=
literal|false
decl_stmt|;
comment|// TODO: may need to put parens around other types
comment|// of queries too, depending on future syntax.
if|if
condition|(
name|subQuery
operator|instanceof
name|BooleanQuery
condition|)
block|{
name|wrapQuery
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|wrapQuery
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
block|}
name|toString
argument_list|(
name|subQuery
argument_list|,
name|schema
argument_list|,
name|out
argument_list|,
name|flags
argument_list|)
expr_stmt|;
if|if
condition|(
name|wrapQuery
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|needParens
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|.
name|getMinimumNumberShouldMatch
argument_list|()
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'~'
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|q
operator|.
name|getMinimumNumberShouldMatch
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|PrefixQuery
condition|)
block|{
name|PrefixQuery
name|q
init|=
operator|(
name|PrefixQuery
operator|)
name|query
decl_stmt|;
name|Term
name|prefix
init|=
name|q
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
name|FieldType
name|ft
init|=
name|writeFieldName
argument_list|(
name|prefix
operator|.
name|field
argument_list|()
argument_list|,
name|schema
argument_list|,
name|out
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|out
operator|.
name|append
argument_list|(
name|prefix
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|WildcardQuery
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|writeBoost
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|FuzzyQuery
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|writeBoost
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|ConstantScoreQuery
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|writeBoost
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|append
argument_list|(
name|query
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|'('
operator|+
name|query
operator|.
name|toString
argument_list|()
operator|+
literal|')'
argument_list|)
expr_stmt|;
name|writeBoost
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|writeBoost
operator|&&
name|query
operator|.
name|getBoost
argument_list|()
operator|!=
literal|1.0f
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|"^"
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|Float
operator|.
name|toString
argument_list|(
name|query
operator|.
name|getBoost
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Formats a Query for debugging, using the IndexSchema to make    * complex field types readable.    *<p/>    *<p>    * The benefit of using this method instead of calling    *<code>Query.toString</code> directly is that it knows about the data    * types of each field, so any field which is encoded in a particularly    * complex way is still readable. The downside is that it only knows    * about built in Query types, and will not be able to format custom    * Query classes.    *</p>    */
DECL|method|toString
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|Query
name|query
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
block|{
try|try
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|toString
argument_list|(
name|query
argument_list|,
name|schema
argument_list|,
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Simple class to help with parsing a string    *<b>Note: This API is experimental and may change in non backward-compatible ways in the future</b>    */
DECL|class|StrParser
specifier|public
specifier|static
class|class
name|StrParser
block|{
DECL|field|val
name|String
name|val
decl_stmt|;
DECL|field|pos
name|int
name|pos
decl_stmt|;
DECL|field|end
name|int
name|end
decl_stmt|;
DECL|method|StrParser
specifier|public
name|StrParser
parameter_list|(
name|String
name|val
parameter_list|)
block|{
name|this
argument_list|(
name|val
argument_list|,
literal|0
argument_list|,
name|val
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|StrParser
specifier|public
name|StrParser
parameter_list|(
name|String
name|val
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|this
operator|.
name|val
operator|=
name|val
expr_stmt|;
name|this
operator|.
name|pos
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
block|}
DECL|method|eatws
name|void
name|eatws
parameter_list|()
block|{
while|while
condition|(
name|pos
operator|<
name|end
operator|&&
name|Character
operator|.
name|isWhitespace
argument_list|(
name|val
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
argument_list|)
condition|)
name|pos
operator|++
expr_stmt|;
block|}
DECL|method|skip
name|void
name|skip
parameter_list|(
name|int
name|nChars
parameter_list|)
block|{
name|pos
operator|=
name|Math
operator|.
name|max
argument_list|(
name|pos
operator|+
name|nChars
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
DECL|method|opt
name|boolean
name|opt
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|eatws
argument_list|()
expr_stmt|;
name|int
name|slen
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|regionMatches
argument_list|(
name|pos
argument_list|,
name|s
argument_list|,
literal|0
argument_list|,
name|slen
argument_list|)
condition|)
block|{
name|pos
operator|+=
name|slen
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|opt
name|boolean
name|opt
parameter_list|(
name|char
name|ch
parameter_list|)
block|{
name|eatws
argument_list|()
expr_stmt|;
if|if
condition|(
name|val
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
operator|==
name|ch
condition|)
block|{
name|pos
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|expect
name|void
name|expect
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|ParseException
block|{
name|eatws
argument_list|()
expr_stmt|;
name|int
name|slen
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|regionMatches
argument_list|(
name|pos
argument_list|,
name|s
argument_list|,
literal|0
argument_list|,
name|slen
argument_list|)
condition|)
block|{
name|pos
operator|+=
name|slen
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Expected '"
operator|+
name|s
operator|+
literal|"' at position "
operator|+
name|pos
operator|+
literal|" in '"
operator|+
name|val
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
DECL|method|getFloat
name|float
name|getFloat
parameter_list|()
throws|throws
name|ParseException
block|{
name|eatws
argument_list|()
expr_stmt|;
name|char
index|[]
name|arr
init|=
operator|new
name|char
index|[
name|end
operator|-
name|pos
index|]
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|val
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|ch
operator|>=
literal|'0'
operator|&&
name|ch
operator|<=
literal|'9'
operator|)
operator|||
name|ch
operator|==
literal|'+'
operator|||
name|ch
operator|==
literal|'-'
operator|||
name|ch
operator|==
literal|'.'
operator|||
name|ch
operator|==
literal|'e'
operator|||
name|ch
operator|==
literal|'E'
condition|)
block|{
name|pos
operator|++
expr_stmt|;
name|arr
index|[
name|i
index|]
operator|=
name|ch
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
operator|new
name|String
argument_list|(
name|arr
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getDouble
name|double
name|getDouble
parameter_list|()
throws|throws
name|ParseException
block|{
name|eatws
argument_list|()
expr_stmt|;
name|char
index|[]
name|arr
init|=
operator|new
name|char
index|[
name|end
operator|-
name|pos
index|]
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|val
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|ch
operator|>=
literal|'0'
operator|&&
name|ch
operator|<=
literal|'9'
operator|)
operator|||
name|ch
operator|==
literal|'+'
operator|||
name|ch
operator|==
literal|'-'
operator|||
name|ch
operator|==
literal|'.'
operator|||
name|ch
operator|==
literal|'e'
operator|||
name|ch
operator|==
literal|'E'
condition|)
block|{
name|pos
operator|++
expr_stmt|;
name|arr
index|[
name|i
index|]
operator|=
name|ch
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
operator|new
name|String
argument_list|(
name|arr
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getInt
name|int
name|getInt
parameter_list|()
throws|throws
name|ParseException
block|{
name|eatws
argument_list|()
expr_stmt|;
name|char
index|[]
name|arr
init|=
operator|new
name|char
index|[
name|end
operator|-
name|pos
index|]
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|val
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|ch
operator|>=
literal|'0'
operator|&&
name|ch
operator|<=
literal|'9'
operator|)
operator|||
name|ch
operator|==
literal|'+'
operator|||
name|ch
operator|==
literal|'-'
condition|)
block|{
name|pos
operator|++
expr_stmt|;
name|arr
index|[
name|i
index|]
operator|=
name|ch
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
operator|new
name|String
argument_list|(
name|arr
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getId
name|String
name|getId
parameter_list|()
throws|throws
name|ParseException
block|{
name|eatws
argument_list|()
expr_stmt|;
name|int
name|id_start
init|=
name|pos
decl_stmt|;
if|if
condition|(
name|pos
operator|<
name|end
operator|&&
name|Character
operator|.
name|isJavaIdentifierStart
argument_list|(
name|val
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
argument_list|)
condition|)
block|{
name|pos
operator|++
expr_stmt|;
while|while
condition|(
name|pos
operator|<
name|end
condition|)
block|{
name|char
name|ch
init|=
name|val
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Character
operator|.
name|isJavaIdentifierPart
argument_list|(
name|ch
argument_list|)
operator|&&
name|ch
operator|!=
literal|'.'
condition|)
block|{
break|break;
block|}
name|pos
operator|++
expr_stmt|;
block|}
return|return
name|val
operator|.
name|substring
argument_list|(
name|id_start
argument_list|,
name|pos
argument_list|)
return|;
block|}
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Expected identifier at pos "
operator|+
name|pos
operator|+
literal|" str='"
operator|+
name|val
operator|+
literal|"'"
argument_list|)
throw|;
block|}
comment|// return null if not a string
DECL|method|getQuotedString
name|String
name|getQuotedString
parameter_list|()
throws|throws
name|ParseException
block|{
name|eatws
argument_list|()
expr_stmt|;
name|char
name|delim
init|=
name|peekChar
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|delim
operator|==
literal|'\"'
operator|||
name|delim
operator|==
literal|'\''
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|val_start
init|=
operator|++
name|pos
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// needed for escaping
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|pos
operator|>=
name|end
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Missing end quote for string at pos "
operator|+
operator|(
name|val_start
operator|-
literal|1
operator|)
operator|+
literal|" str='"
operator|+
name|val
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|char
name|ch
init|=
name|val
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'\\'
condition|)
block|{
name|pos
operator|++
expr_stmt|;
if|if
condition|(
name|pos
operator|>=
name|end
condition|)
break|break;
name|ch
operator|=
name|val
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|ch
condition|)
block|{
case|case
literal|'n'
case|:
name|ch
operator|=
literal|'\n'
expr_stmt|;
break|break;
case|case
literal|'t'
case|:
name|ch
operator|=
literal|'\t'
expr_stmt|;
break|break;
case|case
literal|'r'
case|:
name|ch
operator|=
literal|'\r'
expr_stmt|;
break|break;
case|case
literal|'b'
case|:
name|ch
operator|=
literal|'\b'
expr_stmt|;
break|break;
case|case
literal|'f'
case|:
name|ch
operator|=
literal|'\f'
expr_stmt|;
break|break;
case|case
literal|'u'
case|:
if|if
condition|(
name|pos
operator|+
literal|4
operator|>=
name|end
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"bad unicode escape \\uxxxx at pos"
operator|+
operator|(
name|val_start
operator|-
literal|1
operator|)
operator|+
literal|" str='"
operator|+
name|val
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|ch
operator|=
operator|(
name|char
operator|)
name|Integer
operator|.
name|parseInt
argument_list|(
name|val
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|,
name|pos
operator|+
literal|5
argument_list|)
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|pos
operator|+=
literal|4
expr_stmt|;
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|ch
operator|==
name|delim
condition|)
block|{
name|pos
operator|++
expr_stmt|;
comment|// skip over the quote
break|break;
block|}
name|sb
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|pos
operator|++
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// next non-whitespace char
DECL|method|peek
name|char
name|peek
parameter_list|()
block|{
name|eatws
argument_list|()
expr_stmt|;
return|return
name|pos
operator|<
name|end
condition|?
name|val
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
else|:
literal|0
return|;
block|}
comment|// next char
DECL|method|peekChar
name|char
name|peekChar
parameter_list|()
block|{
return|return
name|pos
operator|<
name|end
condition|?
name|val
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
else|:
literal|0
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"'"
operator|+
name|val
operator|+
literal|"'"
operator|+
literal|", pos="
operator|+
name|pos
return|;
block|}
block|}
comment|/**    * Builds a list of String which are stringified versions of a list of Queries    */
DECL|method|toString
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|toString
parameter_list|(
name|List
argument_list|<
name|Query
argument_list|>
name|queries
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|out
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|queries
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Query
name|q
range|:
name|queries
control|)
block|{
name|out
operator|.
name|add
argument_list|(
name|QueryParsing
operator|.
name|toString
argument_list|(
name|q
argument_list|,
name|schema
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
comment|/**    * Parse a function, returning a FunctionQuery    *<p/>    *<p>    * Syntax Examples....    *</p>    *<p/>    *<pre>    * // Numeric fields default to correct type    * // (ie: IntFieldSource or FloatFieldSource)    * // Others use explicit ord(...) to generate numeric field value    * myfield    *<p/>    * // OrdFieldSource    * ord(myfield)    *<p/>    * // ReverseOrdFieldSource    * rord(myfield)    *<p/>    * // LinearFloatFunction on numeric field value    * linear(myfield,1,2)    *<p/>    * // MaxFloatFunction of LinearFloatFunction on numeric field value or constant    * max(linear(myfield,1,2),100)    *<p/>    * // ReciprocalFloatFunction on numeric field value    * recip(myfield,1,2,3)    *<p/>    * // ReciprocalFloatFunction on ReverseOrdFieldSource    * recip(rord(myfield),1,2,3)    *<p/>    * // ReciprocalFloatFunction on LinearFloatFunction on ReverseOrdFieldSource    * recip(linear(rord(myfield),1,2),3,4,5)    *</pre>    */
DECL|method|parseFunction
specifier|public
specifier|static
name|FunctionQuery
name|parseFunction
parameter_list|(
name|String
name|func
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
throws|throws
name|ParseException
block|{
name|SolrCore
name|core
init|=
name|SolrCore
operator|.
name|getSolrCore
argument_list|()
decl_stmt|;
return|return
call|(
name|FunctionQuery
call|)
argument_list|(
name|QParser
operator|.
name|getParser
argument_list|(
name|func
argument_list|,
literal|"func"
argument_list|,
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
operator|new
name|HashMap
argument_list|()
argument_list|)
argument_list|)
operator|.
name|parse
argument_list|()
argument_list|)
return|;
comment|// return new FunctionQuery(parseValSource(new StrParser(func), schema));
block|}
block|}
end_class
end_unit
