begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search.function
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|function
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
operator|.
name|AtomicReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|DocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/**  *<code>LinearFloatFunction</code> implements a linear function over  * another {@link org.apache.lucene.queries.function.ValueSource}.  *<br>  * Normally Used as an argument to a {@link org.apache.lucene.queries.function.FunctionQuery}  *  *  */
end_comment
begin_class
DECL|class|RangeMapFloatFunction
specifier|public
class|class
name|RangeMapFloatFunction
extends|extends
name|ValueSource
block|{
DECL|field|source
specifier|protected
specifier|final
name|ValueSource
name|source
decl_stmt|;
DECL|field|min
specifier|protected
specifier|final
name|float
name|min
decl_stmt|;
DECL|field|max
specifier|protected
specifier|final
name|float
name|max
decl_stmt|;
DECL|field|target
specifier|protected
specifier|final
name|float
name|target
decl_stmt|;
DECL|field|defaultVal
specifier|protected
specifier|final
name|Float
name|defaultVal
decl_stmt|;
DECL|method|RangeMapFloatFunction
specifier|public
name|RangeMapFloatFunction
parameter_list|(
name|ValueSource
name|source
parameter_list|,
name|float
name|min
parameter_list|,
name|float
name|max
parameter_list|,
name|float
name|target
parameter_list|,
name|Float
name|def
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
name|this
operator|.
name|target
operator|=
name|target
expr_stmt|;
name|this
operator|.
name|defaultVal
operator|=
name|def
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|description
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
literal|"map("
operator|+
name|source
operator|.
name|description
argument_list|()
operator|+
literal|","
operator|+
name|min
operator|+
literal|","
operator|+
name|max
operator|+
literal|","
operator|+
name|target
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|getValues
specifier|public
name|DocValues
name|getValues
parameter_list|(
name|Map
name|context
parameter_list|,
name|AtomicReaderContext
name|readerContext
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DocValues
name|vals
init|=
name|source
operator|.
name|getValues
argument_list|(
name|context
argument_list|,
name|readerContext
argument_list|)
decl_stmt|;
return|return
operator|new
name|FloatDocValues
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|float
name|floatVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|float
name|val
init|=
name|vals
operator|.
name|floatVal
argument_list|(
name|doc
argument_list|)
decl_stmt|;
return|return
operator|(
name|val
operator|>=
name|min
operator|&&
name|val
operator|<=
name|max
operator|)
condition|?
name|target
else|:
operator|(
name|defaultVal
operator|==
literal|null
condition|?
name|val
else|:
name|defaultVal
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
literal|"map("
operator|+
name|vals
operator|.
name|toString
argument_list|(
name|doc
argument_list|)
operator|+
literal|",min="
operator|+
name|min
operator|+
literal|",max="
operator|+
name|max
operator|+
literal|",target="
operator|+
name|target
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|createWeight
specifier|public
name|void
name|createWeight
parameter_list|(
name|Map
name|context
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
name|source
operator|.
name|createWeight
argument_list|(
name|context
argument_list|,
name|searcher
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|h
init|=
name|source
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|h
operator|^=
operator|(
name|h
operator|<<
literal|10
operator|)
operator||
operator|(
name|h
operator|>>>
literal|23
operator|)
expr_stmt|;
name|h
operator|+=
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|min
argument_list|)
expr_stmt|;
name|h
operator|^=
operator|(
name|h
operator|<<
literal|14
operator|)
operator||
operator|(
name|h
operator|>>>
literal|19
operator|)
expr_stmt|;
name|h
operator|+=
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|max
argument_list|)
expr_stmt|;
name|h
operator|^=
operator|(
name|h
operator|<<
literal|13
operator|)
operator||
operator|(
name|h
operator|>>>
literal|20
operator|)
expr_stmt|;
name|h
operator|+=
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|target
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultVal
operator|!=
literal|null
condition|)
name|h
operator|+=
name|defaultVal
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|h
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|RangeMapFloatFunction
operator|.
name|class
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|RangeMapFloatFunction
name|other
init|=
operator|(
name|RangeMapFloatFunction
operator|)
name|o
decl_stmt|;
return|return
name|this
operator|.
name|min
operator|==
name|other
operator|.
name|min
operator|&&
name|this
operator|.
name|max
operator|==
name|other
operator|.
name|max
operator|&&
name|this
operator|.
name|target
operator|==
name|other
operator|.
name|target
operator|&&
name|this
operator|.
name|source
operator|.
name|equals
argument_list|(
name|other
operator|.
name|source
argument_list|)
operator|&&
operator|(
name|this
operator|.
name|defaultVal
operator|==
name|other
operator|.
name|defaultVal
operator|||
operator|(
name|this
operator|.
name|defaultVal
operator|!=
literal|null
operator|&&
name|this
operator|.
name|defaultVal
operator|.
name|equals
argument_list|(
name|other
operator|.
name|defaultVal
argument_list|)
operator|)
operator|)
return|;
block|}
block|}
end_class
end_unit
