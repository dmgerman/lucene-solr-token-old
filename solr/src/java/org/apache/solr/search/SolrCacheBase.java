begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Common base class of reusable functionality for SolrCaches  */
end_comment
begin_class
DECL|class|SolrCacheBase
specifier|public
specifier|abstract
class|class
name|SolrCacheBase
block|{
comment|/**    * Decides how many things to autowarm based on the size of another cache    */
DECL|class|AutoWarmCountRef
specifier|public
specifier|static
class|class
name|AutoWarmCountRef
block|{
DECL|field|autoWarmCount
specifier|private
specifier|final
name|int
name|autoWarmCount
decl_stmt|;
DECL|field|autoWarmPercentage
specifier|private
specifier|final
name|int
name|autoWarmPercentage
decl_stmt|;
DECL|field|autoWarmByPercentage
specifier|private
specifier|final
name|boolean
name|autoWarmByPercentage
decl_stmt|;
DECL|field|doAutoWarming
specifier|private
specifier|final
name|boolean
name|doAutoWarming
decl_stmt|;
DECL|field|strVal
specifier|private
specifier|final
name|String
name|strVal
decl_stmt|;
DECL|method|AutoWarmCountRef
specifier|public
name|AutoWarmCountRef
parameter_list|(
specifier|final
name|String
name|configValue
parameter_list|)
block|{
try|try
block|{
name|String
name|input
init|=
operator|(
literal|null
operator|==
name|configValue
operator|)
condition|?
literal|"0"
else|:
name|configValue
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// odd undocumented legacy behavior, -1 ment "all" (now "100%")
name|strVal
operator|=
operator|(
literal|"-1"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|)
condition|?
literal|"100%"
else|:
name|input
expr_stmt|;
if|if
condition|(
name|strVal
operator|.
name|indexOf
argument_list|(
literal|"%"
argument_list|)
operator|==
operator|(
name|strVal
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
condition|)
block|{
name|autoWarmCount
operator|=
literal|0
expr_stmt|;
name|autoWarmPercentage
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|strVal
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|strVal
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|autoWarmByPercentage
operator|=
literal|true
expr_stmt|;
name|doAutoWarming
operator|=
operator|(
literal|0
operator|<
name|autoWarmPercentage
operator|)
expr_stmt|;
block|}
else|else
block|{
name|autoWarmCount
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|strVal
argument_list|)
expr_stmt|;
name|autoWarmPercentage
operator|=
literal|0
expr_stmt|;
name|autoWarmByPercentage
operator|=
literal|false
expr_stmt|;
name|doAutoWarming
operator|=
operator|(
literal|0
operator|<
name|autoWarmCount
operator|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't parse autoWarm value: "
operator|+
name|configValue
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|strVal
return|;
block|}
DECL|method|isAutoWarmingOn
specifier|public
name|boolean
name|isAutoWarmingOn
parameter_list|()
block|{
return|return
name|doAutoWarming
return|;
block|}
DECL|method|getWarmCount
specifier|public
name|int
name|getWarmCount
parameter_list|(
specifier|final
name|int
name|previousCacheSize
parameter_list|)
block|{
return|return
name|autoWarmByPercentage
condition|?
operator|(
name|previousCacheSize
operator|*
name|autoWarmPercentage
operator|)
operator|/
literal|100
else|:
name|Math
operator|.
name|min
argument_list|(
name|previousCacheSize
argument_list|,
name|autoWarmCount
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
