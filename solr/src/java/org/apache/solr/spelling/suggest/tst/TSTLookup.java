begin_unit
begin_package
DECL|package|org.apache.solr.spelling.suggest.tst
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|spelling
operator|.
name|suggest
operator|.
name|tst
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|spelling
operator|.
name|suggest
operator|.
name|Lookup
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|spelling
operator|.
name|suggest
operator|.
name|SortedTermFreqIteratorWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|SortedIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TermFreqIterator
import|;
end_import
begin_class
DECL|class|TSTLookup
specifier|public
class|class
name|TSTLookup
extends|extends
name|Lookup
block|{
DECL|field|root
name|TernaryTreeNode
name|root
decl_stmt|;
DECL|field|autocomplete
name|TSTAutocomplete
name|autocomplete
decl_stmt|;
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|config
parameter_list|,
name|SolrCore
name|core
parameter_list|)
block|{   }
annotation|@
name|Override
DECL|method|build
specifier|public
name|void
name|build
parameter_list|(
name|TermFreqIterator
name|tfit
parameter_list|)
throws|throws
name|IOException
block|{
name|root
operator|=
operator|new
name|TernaryTreeNode
argument_list|()
expr_stmt|;
name|autocomplete
operator|=
operator|new
name|TSTAutocomplete
argument_list|()
expr_stmt|;
comment|// buffer first
if|if
condition|(
operator|!
operator|(
name|tfit
operator|instanceof
name|SortedIterator
operator|)
condition|)
block|{
comment|// make sure it's sorted
name|tfit
operator|=
operator|new
name|SortedTermFreqIteratorWrapper
argument_list|(
name|tfit
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Float
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|tfit
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|tokens
operator|.
name|add
argument_list|(
name|tfit
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
operator|new
name|Float
argument_list|(
name|tfit
operator|.
name|freq
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|autocomplete
operator|.
name|balancedTree
argument_list|(
name|tokens
operator|.
name|toArray
argument_list|()
argument_list|,
name|vals
operator|.
name|toArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|add
specifier|public
name|boolean
name|add
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|autocomplete
operator|.
name|insert
argument_list|(
name|root
argument_list|,
name|key
argument_list|,
name|value
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// XXX we don't know if a new node was created
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|Object
name|get
parameter_list|(
name|String
name|key
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"get() is not supported here"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|lookup
specifier|public
name|List
argument_list|<
name|LookupResult
argument_list|>
name|lookup
parameter_list|(
name|String
name|key
parameter_list|,
name|boolean
name|onlyMorePopular
parameter_list|,
name|int
name|num
parameter_list|)
block|{
name|List
argument_list|<
name|TernaryTreeNode
argument_list|>
name|list
init|=
name|autocomplete
operator|.
name|prefixCompletion
argument_list|(
name|root
argument_list|,
name|key
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LookupResult
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|LookupResult
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
operator|||
name|list
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|res
return|;
block|}
name|int
name|maxCnt
init|=
name|Math
operator|.
name|min
argument_list|(
name|num
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|onlyMorePopular
condition|)
block|{
name|LookupPriorityQueue
name|queue
init|=
operator|new
name|LookupPriorityQueue
argument_list|(
name|num
argument_list|)
decl_stmt|;
for|for
control|(
name|TernaryTreeNode
name|ttn
range|:
name|list
control|)
block|{
name|queue
operator|.
name|insertWithOverflow
argument_list|(
operator|new
name|LookupResult
argument_list|(
name|ttn
operator|.
name|token
argument_list|,
operator|(
name|Float
operator|)
name|ttn
operator|.
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|LookupResult
name|lr
range|:
name|queue
operator|.
name|getResults
argument_list|()
control|)
block|{
name|res
operator|.
name|add
argument_list|(
name|lr
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxCnt
condition|;
name|i
operator|++
control|)
block|{
name|TernaryTreeNode
name|ttn
init|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|res
operator|.
name|add
argument_list|(
operator|new
name|LookupResult
argument_list|(
name|ttn
operator|.
name|token
argument_list|,
operator|(
name|Float
operator|)
name|ttn
operator|.
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
annotation|@
name|Override
DECL|method|load
specifier|public
name|boolean
name|load
parameter_list|(
name|File
name|storeDir
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|store
specifier|public
name|boolean
name|store
parameter_list|(
name|File
name|storeDir
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
block|}
end_class
end_unit
