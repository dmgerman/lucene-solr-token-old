begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|DocSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SimpleFacets
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/**  *   * @since solr 4.0  */
end_comment
begin_class
DECL|class|PivotFacetComponent
specifier|public
class|class
name|PivotFacetComponent
extends|extends
name|SearchComponent
block|{
DECL|field|COMPONENT_NAME
specifier|public
specifier|static
specifier|final
name|String
name|COMPONENT_NAME
init|=
literal|"pivot"
decl_stmt|;
DECL|field|PIVOT_KEY
specifier|static
specifier|final
name|String
name|PIVOT_KEY
init|=
literal|"facet_pivot"
decl_stmt|;
comment|/**    * Designed to be overridden by subclasses that provide different faceting implementations.    * TODO: Currently this is returning a SimpleFacets object, but those capabilities would    *       be better as an extracted abstract class or interface.    */
DECL|method|getFacetImplementation
specifier|protected
name|SimpleFacets
name|getFacetImplementation
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|DocSet
name|docs
parameter_list|,
name|SolrParams
name|params
parameter_list|)
block|{
return|return
operator|new
name|SimpleFacets
argument_list|(
name|req
argument_list|,
name|docs
argument_list|,
name|params
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|prepare
specifier|public
name|void
name|prepare
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
name|FacetParams
operator|.
name|FACET
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|rb
operator|.
name|setNeedDocSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rb
operator|.
name|doFacets
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|process
specifier|public
name|void
name|process
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|rb
operator|.
name|doFacets
condition|)
return|return;
name|SolrParams
name|params
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
index|[]
name|pivots
init|=
name|params
operator|.
name|getParams
argument_list|(
name|FacetParams
operator|.
name|FACET_PIVOT
argument_list|)
decl_stmt|;
comment|// example: author,type  (for types by author / types within author)
if|if
condition|(
name|pivots
operator|==
literal|null
condition|)
return|return;
name|int
name|minMatch
init|=
name|params
operator|.
name|getInt
argument_list|(
name|FacetParams
operator|.
name|FACET_PIVOT_MINCOUNT
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SimpleOrderedMap
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
name|pivotResponse
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|pivot
range|:
name|pivots
control|)
block|{
name|String
index|[]
name|fields
init|=
name|pivot
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
comment|// only support two levels for now
if|if
condition|(
name|fields
operator|.
name|length
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Pivot Facet needs at least two fields: "
operator|+
name|pivot
argument_list|)
throw|;
block|}
name|DocSet
name|docs
init|=
name|rb
operator|.
name|getResults
argument_list|()
operator|.
name|docSet
decl_stmt|;
name|String
name|field
init|=
name|fields
index|[
literal|0
index|]
decl_stmt|;
name|String
name|subField
init|=
name|fields
index|[
literal|1
index|]
decl_stmt|;
name|Deque
argument_list|<
name|String
argument_list|>
name|fnames
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|fields
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>
literal|1
condition|;
name|i
operator|--
control|)
block|{
name|fnames
operator|.
name|push
argument_list|(
name|fields
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|SimpleFacets
name|sf
init|=
name|getFacetImplementation
argument_list|(
name|rb
operator|.
name|req
argument_list|,
name|rb
operator|.
name|getResults
argument_list|()
operator|.
name|docSet
argument_list|,
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Integer
argument_list|>
name|superFacets
init|=
name|sf
operator|.
name|getTermCounts
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|pivotResponse
operator|.
name|add
argument_list|(
name|pivot
argument_list|,
name|doPivots
argument_list|(
name|superFacets
argument_list|,
name|field
argument_list|,
name|subField
argument_list|,
name|fnames
argument_list|,
name|rb
argument_list|,
name|docs
argument_list|,
name|minMatch
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|NamedList
name|facetCounts
init|=
operator|(
name|NamedList
operator|)
name|rb
operator|.
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|"facet_counts"
argument_list|)
decl_stmt|;
if|if
condition|(
name|facetCounts
operator|==
literal|null
condition|)
block|{
name|facetCounts
operator|=
operator|new
name|NamedList
argument_list|()
expr_stmt|;
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"facet_counts"
argument_list|,
name|facetCounts
argument_list|)
expr_stmt|;
block|}
name|facetCounts
operator|.
name|add
argument_list|(
name|PIVOT_KEY
argument_list|,
name|pivotResponse
argument_list|)
expr_stmt|;
block|}
comment|/**    * Recursive function to do all the pivots    */
DECL|method|doPivots
specifier|protected
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|doPivots
parameter_list|(
name|NamedList
argument_list|<
name|Integer
argument_list|>
name|superFacets
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|subField
parameter_list|,
name|Deque
argument_list|<
name|String
argument_list|>
name|fnames
parameter_list|,
name|ResponseBuilder
name|rb
parameter_list|,
name|DocSet
name|docs
parameter_list|,
name|int
name|minMatch
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrIndexSearcher
name|searcher
init|=
name|rb
operator|.
name|req
operator|.
name|getSearcher
argument_list|()
decl_stmt|;
comment|// TODO: optimize to avoid converting to an external string and then having to convert back to internal below
name|FieldType
name|ftype
init|=
literal|null
decl_stmt|;
comment|//   SimpleFacets sf = getFacetImplementation(rb.req, docs, rb.req.getParams());
name|String
name|nextField
init|=
name|fnames
operator|.
name|poll
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|(
name|superFacets
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|kv
range|:
name|superFacets
control|)
block|{
comment|// Only sub-facet if parent facet has positive count - still may not be any values for the sub-field though
if|if
condition|(
name|kv
operator|.
name|getValue
argument_list|()
operator|>
name|minMatch
condition|)
block|{
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|pivot
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|pivot
operator|.
name|add
argument_list|(
literal|"field"
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|pivot
operator|.
name|add
argument_list|(
literal|"value"
argument_list|,
name|kv
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|pivot
operator|.
name|add
argument_list|(
literal|"count"
argument_list|,
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|subField
operator|==
literal|null
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
name|pivot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|s
init|=
name|kv
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|ftype
operator|==
literal|null
condition|)
block|{
name|ftype
operator|=
name|searcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
name|Query
name|query
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|ftype
operator|.
name|toInternal
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|DocSet
name|subset
init|=
name|searcher
operator|.
name|getDocSet
argument_list|(
name|query
argument_list|,
name|docs
argument_list|)
decl_stmt|;
name|SimpleFacets
name|sf
init|=
name|getFacetImplementation
argument_list|(
name|rb
operator|.
name|req
argument_list|,
name|subset
argument_list|,
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Integer
argument_list|>
name|nl
init|=
name|sf
operator|.
name|getTermCounts
argument_list|(
name|subField
argument_list|)
decl_stmt|;
if|if
condition|(
name|nl
operator|.
name|size
argument_list|()
operator|>
name|minMatch
condition|)
block|{
name|pivot
operator|.
name|add
argument_list|(
literal|"pivot"
argument_list|,
name|doPivots
argument_list|(
name|nl
argument_list|,
name|subField
argument_list|,
name|nextField
argument_list|,
name|fnames
argument_list|,
name|rb
argument_list|,
name|subset
argument_list|,
name|minMatch
argument_list|)
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
name|pivot
argument_list|)
expr_stmt|;
comment|// only add response if there are some counts
block|}
block|}
block|}
block|}
comment|// put the field back on the list
name|fnames
operator|.
name|push
argument_list|(
name|nextField
argument_list|)
expr_stmt|;
return|return
name|values
return|;
block|}
annotation|@
name|Override
DECL|method|distributedProcess
specifier|public
name|int
name|distributedProcess
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|rb
operator|.
name|doFacets
condition|)
block|{
return|return
name|ResponseBuilder
operator|.
name|STAGE_DONE
return|;
block|}
if|if
condition|(
name|rb
operator|.
name|stage
operator|==
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
condition|)
block|{
name|SolrParams
name|params
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
index|[]
name|pivots
init|=
name|params
operator|.
name|getParams
argument_list|(
name|FacetParams
operator|.
name|FACET_PIVOT
argument_list|)
decl_stmt|;
for|for
control|(
name|ShardRequest
name|sreq
range|:
name|rb
operator|.
name|outgoing
control|)
block|{
if|if
condition|(
operator|(
name|sreq
operator|.
name|purpose
operator|&
name|ShardRequest
operator|.
name|PURPOSE_GET_FIELDS
operator|)
operator|!=
literal|0
operator|&&
name|sreq
operator|.
name|shards
operator|!=
literal|null
operator|&&
name|sreq
operator|.
name|shards
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET_PIVOT
argument_list|,
name|pivots
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET_PIVOT_MINCOUNT
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// keep this at 1 regardless so that it accumulates everything
block|}
block|}
block|}
return|return
name|ResponseBuilder
operator|.
name|STAGE_DONE
return|;
block|}
annotation|@
name|Override
DECL|method|handleResponses
specifier|public
name|void
name|handleResponses
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rb
operator|.
name|doFacets
condition|)
return|return;
if|if
condition|(
operator|(
name|sreq
operator|.
name|purpose
operator|&
name|ShardRequest
operator|.
name|PURPOSE_GET_FACETS
operator|)
operator|!=
literal|0
condition|)
block|{
name|SimpleOrderedMap
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
name|tf
init|=
name|rb
operator|.
name|_pivots
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|tf
condition|)
block|{
name|tf
operator|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|rb
operator|.
name|_pivots
operator|=
name|tf
expr_stmt|;
block|}
for|for
control|(
name|ShardResponse
name|srsp
range|:
name|sreq
operator|.
name|responses
control|)
block|{
name|int
name|shardNum
init|=
name|rb
operator|.
name|getShardNum
argument_list|(
name|srsp
operator|.
name|getShard
argument_list|()
argument_list|)
decl_stmt|;
name|NamedList
name|facet_counts
init|=
operator|(
name|NamedList
operator|)
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"facet_counts"
argument_list|)
decl_stmt|;
comment|// handle facet trees from shards
name|SimpleOrderedMap
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
name|shard_pivots
init|=
operator|(
name|SimpleOrderedMap
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
operator|)
name|facet_counts
operator|.
name|get
argument_list|(
name|PIVOT_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|shard_pivots
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|shard_pivots
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
comment|// TODO -- accumulate the results from each shard
comment|// The following code worked to accumulate facets for an previous
comment|// two level patch... it is here for reference till someone can upgrade
comment|/**             String shard_tree_name = (String) shard_pivots.getName( j );             SimpleOrderedMap<NamedList> shard_tree = (SimpleOrderedMap<NamedList>)shard_pivots.getVal( j );             SimpleOrderedMap<NamedList> facet_tree = tf.get( shard_tree_name );             if ( null == facet_tree) {                facet_tree = new SimpleOrderedMap<NamedList>();                tf.add( shard_tree_name, facet_tree );             }              for( int o = 0; o< shard_tree.size() ; o++ ) {               String shard_outer = (String) shard_tree.getName( o );               NamedList shard_innerList = (NamedList) shard_tree.getVal( o );               NamedList tree_innerList  = (NamedList) facet_tree.get( shard_outer );               if ( null == tree_innerList ) {                  tree_innerList = new NamedList();                 facet_tree.add( shard_outer, tree_innerList );               }                for ( int i = 0 ; i< shard_innerList.size() ; i++ ) {                 String shard_term = (String) shard_innerList.getName( i );                 long shard_count  = ((Number) shard_innerList.getVal(i)).longValue();                 int tree_idx      = tree_innerList.indexOf( shard_term, 0 );                  if ( -1 == tree_idx ) {                   tree_innerList.add( shard_term, shard_count );                 } else {                   long tree_count = ((Number) tree_innerList.getVal( tree_idx )).longValue();                   tree_innerList.setVal( tree_idx, shard_count + tree_count );                 }               } // innerList loop             } // outer loop               **/
block|}
comment|// each tree loop
block|}
block|}
block|}
return|return ;
block|}
annotation|@
name|Override
DECL|method|finishStage
specifier|public
name|void
name|finishStage
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rb
operator|.
name|doFacets
operator|||
name|rb
operator|.
name|stage
operator|!=
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
condition|)
return|return;
comment|// wait until STAGE_GET_FIELDS
comment|// so that "result" is already stored in the response (for aesthetics)
name|SimpleOrderedMap
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
name|tf
init|=
name|rb
operator|.
name|_pivots
decl_stmt|;
comment|// get 'facet_counts' from the response
name|NamedList
name|facetCounts
init|=
operator|(
name|NamedList
operator|)
name|rb
operator|.
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|"facet_counts"
argument_list|)
decl_stmt|;
if|if
condition|(
name|facetCounts
operator|==
literal|null
condition|)
block|{
name|facetCounts
operator|=
operator|new
name|NamedList
argument_list|()
expr_stmt|;
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"facet_counts"
argument_list|,
name|facetCounts
argument_list|)
expr_stmt|;
block|}
name|facetCounts
operator|.
name|add
argument_list|(
name|PIVOT_KEY
argument_list|,
name|tf
argument_list|)
expr_stmt|;
name|rb
operator|.
name|_pivots
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Handle Pivot (multi-level) Faceting"
return|;
block|}
DECL|method|getSourceId
specifier|public
name|String
name|getSourceId
parameter_list|()
block|{
return|return
literal|"$Id:  $"
return|;
block|}
DECL|method|getSource
specifier|public
name|String
name|getSource
parameter_list|()
block|{
return|return
literal|"$URL: $"
return|;
block|}
DECL|method|getVersion
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
literal|"$Revision:  $"
return|;
block|}
block|}
end_class
end_unit
