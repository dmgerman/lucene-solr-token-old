begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|LevensteinDistance
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|StringDistance
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|SuggestWord
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|SuggestWordQueue
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|SpellCheckResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|WhitespaceAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|FlagsAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PayloadAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TypeAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ShardParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SpellingParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrEventListener
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|spelling
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|SolrCoreAware
import|;
end_import
begin_comment
comment|/**  * A SearchComponent implementation which provides support for spell checking  * and suggestions using the Lucene contributed SpellChecker.  *  *<p>  * Refer to http://wiki.apache.org/solr/SpellCheckComponent for more details  *</p>  *   * @since solr 1.3  */
end_comment
begin_class
DECL|class|SpellCheckComponent
specifier|public
class|class
name|SpellCheckComponent
extends|extends
name|SearchComponent
implements|implements
name|SolrCoreAware
implements|,
name|SpellingParams
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SpellCheckComponent
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_ONLY_MORE_POPULAR
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_ONLY_MORE_POPULAR
init|=
literal|false
decl_stmt|;
comment|/**    * Base name for all spell checker query parameters. This name is also used to    * register this component with SearchHandler.    */
DECL|field|COMPONENT_NAME
specifier|public
specifier|static
specifier|final
name|String
name|COMPONENT_NAME
init|=
literal|"spellcheck"
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|field|initParams
specifier|protected
name|NamedList
name|initParams
decl_stmt|;
comment|/**    * Key is the dictionary, value is the SpellChecker for that dictionary name    */
DECL|field|spellCheckers
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|SolrSpellChecker
argument_list|>
name|spellCheckers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|SolrSpellChecker
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|queryConverter
specifier|protected
name|QueryConverter
name|queryConverter
decl_stmt|;
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|this
operator|.
name|initParams
operator|=
name|args
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|prepare
specifier|public
name|void
name|prepare
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrParams
name|params
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|params
operator|.
name|getBool
argument_list|(
name|COMPONENT_NAME
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return;
block|}
name|SolrSpellChecker
name|spellChecker
init|=
name|getSpellChecker
argument_list|(
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|.
name|getBool
argument_list|(
name|SPELLCHECK_BUILD
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|spellChecker
operator|.
name|build
argument_list|(
name|rb
operator|.
name|req
operator|.
name|getCore
argument_list|()
argument_list|,
name|rb
operator|.
name|req
operator|.
name|getSearcher
argument_list|()
argument_list|)
expr_stmt|;
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"command"
argument_list|,
literal|"build"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|params
operator|.
name|getBool
argument_list|(
name|SPELLCHECK_RELOAD
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|spellChecker
operator|.
name|reload
argument_list|(
name|rb
operator|.
name|req
operator|.
name|getCore
argument_list|()
argument_list|,
name|rb
operator|.
name|req
operator|.
name|getSearcher
argument_list|()
argument_list|)
expr_stmt|;
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"command"
argument_list|,
literal|"reload"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|process
specifier|public
name|void
name|process
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrParams
name|params
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|params
operator|.
name|getBool
argument_list|(
name|COMPONENT_NAME
argument_list|,
literal|false
argument_list|)
operator|||
name|spellCheckers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|boolean
name|shardRequest
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|ShardParams
operator|.
name|IS_SHARD
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|q
init|=
name|params
operator|.
name|get
argument_list|(
name|SPELLCHECK_Q
argument_list|)
decl_stmt|;
name|SolrSpellChecker
name|spellChecker
init|=
name|getSpellChecker
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
comment|//we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker
name|tokens
operator|=
name|getTokens
argument_list|(
name|q
argument_list|,
name|spellChecker
operator|.
name|getQueryAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|q
operator|=
name|rb
operator|.
name|getQueryString
argument_list|()
expr_stmt|;
if|if
condition|(
name|q
operator|==
literal|null
condition|)
block|{
name|q
operator|=
name|params
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|)
expr_stmt|;
block|}
name|tokens
operator|=
name|queryConverter
operator|.
name|convert
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tokens
operator|!=
literal|null
operator|&&
name|tokens
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|spellChecker
operator|!=
literal|null
condition|)
block|{
name|int
name|count
init|=
name|params
operator|.
name|getInt
argument_list|(
name|SPELLCHECK_COUNT
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|boolean
name|onlyMorePopular
init|=
name|params
operator|.
name|getBool
argument_list|(
name|SPELLCHECK_ONLY_MORE_POPULAR
argument_list|,
name|DEFAULT_ONLY_MORE_POPULAR
argument_list|)
decl_stmt|;
name|boolean
name|extendedResults
init|=
name|params
operator|.
name|getBool
argument_list|(
name|SPELLCHECK_EXTENDED_RESULTS
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|NamedList
name|response
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
name|IndexReader
name|reader
init|=
name|rb
operator|.
name|req
operator|.
name|getSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
name|boolean
name|collate
init|=
name|params
operator|.
name|getBool
argument_list|(
name|SPELLCHECK_COLLATE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|float
name|accuracy
init|=
name|params
operator|.
name|getFloat
argument_list|(
name|SPELLCHECK_ACCURACY
argument_list|,
name|Float
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
name|SolrParams
name|customParams
init|=
name|getCustomParams
argument_list|(
name|getDictionaryName
argument_list|(
name|params
argument_list|)
argument_list|,
name|params
argument_list|,
name|shardRequest
argument_list|)
decl_stmt|;
name|SpellingOptions
name|options
init|=
operator|new
name|SpellingOptions
argument_list|(
name|tokens
argument_list|,
name|reader
argument_list|,
name|count
argument_list|,
name|onlyMorePopular
argument_list|,
name|extendedResults
argument_list|,
name|accuracy
argument_list|,
name|customParams
argument_list|)
decl_stmt|;
name|SpellingResult
name|spellingResult
init|=
name|spellChecker
operator|.
name|getSuggestions
argument_list|(
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|spellingResult
operator|!=
literal|null
condition|)
block|{
name|NamedList
name|suggestions
init|=
name|toNamedList
argument_list|(
name|shardRequest
argument_list|,
name|spellingResult
argument_list|,
name|q
argument_list|,
name|extendedResults
argument_list|,
name|collate
argument_list|)
decl_stmt|;
if|if
condition|(
name|collate
condition|)
block|{
name|addCollationsToResponse
argument_list|(
name|params
argument_list|,
name|spellingResult
argument_list|,
name|rb
argument_list|,
name|q
argument_list|,
name|suggestions
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|add
argument_list|(
literal|"suggestions"
argument_list|,
name|suggestions
argument_list|)
expr_stmt|;
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"spellcheck"
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|NOT_FOUND
argument_list|,
literal|"Specified dictionary does not exist: "
operator|+
name|getDictionaryName
argument_list|(
name|params
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|addCollationsToResponse
specifier|protected
name|void
name|addCollationsToResponse
parameter_list|(
name|SolrParams
name|params
parameter_list|,
name|SpellingResult
name|spellingResult
parameter_list|,
name|ResponseBuilder
name|rb
parameter_list|,
name|String
name|q
parameter_list|,
name|NamedList
name|response
parameter_list|)
block|{
name|int
name|maxCollations
init|=
name|params
operator|.
name|getInt
argument_list|(
name|SPELLCHECK_MAX_COLLATIONS
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|int
name|maxCollationTries
init|=
name|params
operator|.
name|getInt
argument_list|(
name|SPELLCHECK_MAX_COLLATION_TRIES
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|maxCollationEvaluations
init|=
name|params
operator|.
name|getInt
argument_list|(
name|SPELLCHECK_MAX_COLLATION_EVALUATIONS
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|boolean
name|collationExtendedResults
init|=
name|params
operator|.
name|getBool
argument_list|(
name|SPELLCHECK_COLLATE_EXTENDED_RESULTS
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|shard
init|=
name|params
operator|.
name|getBool
argument_list|(
name|ShardParams
operator|.
name|IS_SHARD
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SpellCheckCollator
name|collator
init|=
operator|new
name|SpellCheckCollator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SpellCheckCollation
argument_list|>
name|collations
init|=
name|collator
operator|.
name|collate
argument_list|(
name|spellingResult
argument_list|,
name|q
argument_list|,
name|rb
argument_list|,
name|maxCollations
argument_list|,
name|maxCollationTries
argument_list|,
name|maxCollationEvaluations
argument_list|)
decl_stmt|;
comment|//by sorting here we guarantee a non-distributed request returns all
comment|//results in the same order as a distributed request would,
comment|//even in cases when the internal rank is the same.
name|Collections
operator|.
name|sort
argument_list|(
name|collations
argument_list|)
expr_stmt|;
for|for
control|(
name|SpellCheckCollation
name|collation
range|:
name|collations
control|)
block|{
if|if
condition|(
name|collationExtendedResults
condition|)
block|{
name|NamedList
name|extendedResult
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|extendedResult
operator|.
name|add
argument_list|(
literal|"collationQuery"
argument_list|,
name|collation
operator|.
name|getCollationQuery
argument_list|()
argument_list|)
expr_stmt|;
name|extendedResult
operator|.
name|add
argument_list|(
literal|"hits"
argument_list|,
name|collation
operator|.
name|getHits
argument_list|()
argument_list|)
expr_stmt|;
name|extendedResult
operator|.
name|add
argument_list|(
literal|"misspellingsAndCorrections"
argument_list|,
name|collation
operator|.
name|getMisspellingsAndCorrections
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxCollationTries
operator|>
literal|0
operator|&&
name|shard
condition|)
block|{
name|extendedResult
operator|.
name|add
argument_list|(
literal|"collationInternalRank"
argument_list|,
name|collation
operator|.
name|getInternalRank
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|add
argument_list|(
literal|"collation"
argument_list|,
name|extendedResult
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|add
argument_list|(
literal|"collation"
argument_list|,
name|collation
operator|.
name|getCollationQuery
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxCollationTries
operator|>
literal|0
operator|&&
name|shard
condition|)
block|{
name|response
operator|.
name|add
argument_list|(
literal|"collationInternalRank"
argument_list|,
name|collation
operator|.
name|getInternalRank
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * For every param that is of the form "spellcheck.[dictionary name].XXXX=YYYY, add    * XXXX=YYYY as a param to the custom param list    * @param params The original SolrParams    * @return The new Params    */
DECL|method|getCustomParams
specifier|protected
name|SolrParams
name|getCustomParams
parameter_list|(
name|String
name|dictionary
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|boolean
name|shardRequest
parameter_list|)
block|{
name|ModifiableSolrParams
name|result
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iter
init|=
name|params
operator|.
name|getParameterNamesIterator
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
name|SpellingParams
operator|.
name|SPELLCHECK_PREFIX
operator|+
literal|"."
operator|+
name|dictionary
operator|+
literal|"."
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|nxt
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|nxt
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|nxt
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|params
operator|.
name|getParams
argument_list|(
name|nxt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|shardRequest
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|ShardParams
operator|.
name|IS_SHARD
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|modifyRequest
specifier|public
name|void
name|modifyRequest
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|SearchComponent
name|who
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|)
block|{
name|SolrParams
name|params
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
comment|// Turn on spellcheck only only when retrieving fields
if|if
condition|(
operator|!
name|params
operator|.
name|getBool
argument_list|(
name|COMPONENT_NAME
argument_list|,
literal|false
argument_list|)
condition|)
return|return;
if|if
condition|(
operator|(
name|sreq
operator|.
name|purpose
operator|&
name|ShardRequest
operator|.
name|PURPOSE_GET_TOP_IDS
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// fetch at least 5 suggestions from each shard
name|int
name|count
init|=
name|sreq
operator|.
name|params
operator|.
name|getInt
argument_list|(
name|SPELLCHECK_COUNT
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|<
literal|5
condition|)
name|count
operator|=
literal|5
expr_stmt|;
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|SPELLCHECK_COUNT
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
literal|"spellcheck"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
literal|"spellcheck"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"deprecation"
block|}
argument_list|)
DECL|method|finishStage
specifier|public
name|void
name|finishStage
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
name|SolrParams
name|params
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|params
operator|.
name|getBool
argument_list|(
name|COMPONENT_NAME
argument_list|,
literal|false
argument_list|)
operator|||
name|rb
operator|.
name|stage
operator|!=
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
condition|)
return|return;
name|boolean
name|extendedResults
init|=
name|params
operator|.
name|getBool
argument_list|(
name|SPELLCHECK_EXTENDED_RESULTS
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|collate
init|=
name|params
operator|.
name|getBool
argument_list|(
name|SPELLCHECK_COLLATE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|collationExtendedResults
init|=
name|params
operator|.
name|getBool
argument_list|(
name|SPELLCHECK_COLLATE_EXTENDED_RESULTS
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|maxCollationTries
init|=
name|params
operator|.
name|getInt
argument_list|(
name|SPELLCHECK_MAX_COLLATION_TRIES
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|maxCollations
init|=
name|params
operator|.
name|getInt
argument_list|(
name|SPELLCHECK_MAX_COLLATIONS
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|origQuery
init|=
name|params
operator|.
name|get
argument_list|(
name|SPELLCHECK_Q
argument_list|)
decl_stmt|;
if|if
condition|(
name|origQuery
operator|==
literal|null
condition|)
block|{
name|origQuery
operator|=
name|rb
operator|.
name|getQueryString
argument_list|()
expr_stmt|;
if|if
condition|(
name|origQuery
operator|==
literal|null
condition|)
block|{
name|origQuery
operator|=
name|params
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|count
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getInt
argument_list|(
name|SPELLCHECK_COUNT
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|float
name|min
init|=
literal|0.5f
decl_stmt|;
name|StringDistance
name|sd
init|=
literal|null
decl_stmt|;
name|int
name|numSug
init|=
name|Math
operator|.
name|max
argument_list|(
name|count
argument_list|,
name|AbstractLuceneSpellChecker
operator|.
name|DEFAULT_SUGGESTION_COUNT
argument_list|)
decl_stmt|;
name|SolrSpellChecker
name|checker
init|=
name|getSpellChecker
argument_list|(
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|checker
operator|instanceof
name|AbstractLuceneSpellChecker
condition|)
block|{
name|AbstractLuceneSpellChecker
name|spellChecker
init|=
operator|(
name|AbstractLuceneSpellChecker
operator|)
name|checker
decl_stmt|;
name|min
operator|=
name|spellChecker
operator|.
name|getAccuracy
argument_list|()
expr_stmt|;
name|sd
operator|=
name|spellChecker
operator|.
name|getStringDistance
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sd
operator|==
literal|null
condition|)
name|sd
operator|=
operator|new
name|LevensteinDistance
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tokens
operator|=
name|getTokens
argument_list|(
name|origQuery
argument_list|,
name|checker
operator|.
name|getQueryAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not get tokens (this should never happen)"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// original token -> corresponding Suggestion object (keep track of start,end)
name|Map
argument_list|<
name|String
argument_list|,
name|SpellCheckResponse
operator|.
name|Suggestion
argument_list|>
name|origVsSuggestion
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SpellCheckResponse
operator|.
name|Suggestion
argument_list|>
argument_list|()
decl_stmt|;
comment|// original token string -> summed up frequency
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|origVsFreq
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|// original token string -> # of shards reporting it as misspelled
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|origVsShards
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|// original token string -> set of alternatives
comment|// must preserve order because collation algorithm can only work in-order
name|Map
argument_list|<
name|String
argument_list|,
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|origVsSuggested
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// alternative string -> corresponding SuggestWord object
name|Map
argument_list|<
name|String
argument_list|,
name|SuggestWord
argument_list|>
name|suggestedVsWord
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SuggestWord
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SpellCheckCollation
argument_list|>
name|collations
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SpellCheckCollation
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|totalNumberShardResponses
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ShardRequest
name|sreq
range|:
name|rb
operator|.
name|finished
control|)
block|{
for|for
control|(
name|ShardResponse
name|srsp
range|:
name|sreq
operator|.
name|responses
control|)
block|{
name|NamedList
name|nl
init|=
operator|(
name|NamedList
operator|)
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"spellcheck"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|srsp
operator|.
name|getShard
argument_list|()
operator|+
literal|" "
operator|+
name|nl
argument_list|)
expr_stmt|;
if|if
condition|(
name|nl
operator|!=
literal|null
condition|)
block|{
name|totalNumberShardResponses
operator|++
expr_stmt|;
name|SpellCheckResponse
name|spellCheckResp
init|=
operator|new
name|SpellCheckResponse
argument_list|(
name|nl
argument_list|)
decl_stmt|;
for|for
control|(
name|SpellCheckResponse
operator|.
name|Suggestion
name|suggestion
range|:
name|spellCheckResp
operator|.
name|getSuggestions
argument_list|()
control|)
block|{
name|origVsSuggestion
operator|.
name|put
argument_list|(
name|suggestion
operator|.
name|getToken
argument_list|()
argument_list|,
name|suggestion
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|suggested
init|=
name|origVsSuggested
operator|.
name|get
argument_list|(
name|suggestion
operator|.
name|getToken
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|suggested
operator|==
literal|null
condition|)
block|{
name|suggested
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|origVsSuggested
operator|.
name|put
argument_list|(
name|suggestion
operator|.
name|getToken
argument_list|()
argument_list|,
name|suggested
argument_list|)
expr_stmt|;
block|}
comment|// sum up original frequency
name|int
name|origFreq
init|=
literal|0
decl_stmt|;
name|Integer
name|o
init|=
name|origVsFreq
operator|.
name|get
argument_list|(
name|suggestion
operator|.
name|getToken
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
name|origFreq
operator|+=
name|o
expr_stmt|;
name|origFreq
operator|+=
name|suggestion
operator|.
name|getOriginalFrequency
argument_list|()
expr_stmt|;
name|origVsFreq
operator|.
name|put
argument_list|(
name|suggestion
operator|.
name|getToken
argument_list|()
argument_list|,
name|origFreq
argument_list|)
expr_stmt|;
comment|//# shards reporting
name|Integer
name|origShards
init|=
name|origVsShards
operator|.
name|get
argument_list|(
name|suggestion
operator|.
name|getToken
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|origShards
operator|==
literal|null
condition|)
block|{
name|origVsShards
operator|.
name|put
argument_list|(
name|suggestion
operator|.
name|getToken
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|origVsShards
operator|.
name|put
argument_list|(
name|suggestion
operator|.
name|getToken
argument_list|()
argument_list|,
operator|++
name|origShards
argument_list|)
expr_stmt|;
block|}
comment|// find best suggestions
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|suggestion
operator|.
name|getNumFound
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|alternative
init|=
name|suggestion
operator|.
name|getAlternatives
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|suggested
operator|.
name|add
argument_list|(
name|alternative
argument_list|)
expr_stmt|;
name|SuggestWord
name|sug
init|=
name|suggestedVsWord
operator|.
name|get
argument_list|(
name|alternative
argument_list|)
decl_stmt|;
if|if
condition|(
name|sug
operator|==
literal|null
condition|)
block|{
name|sug
operator|=
operator|new
name|SuggestWord
argument_list|()
expr_stmt|;
name|suggestedVsWord
operator|.
name|put
argument_list|(
name|alternative
argument_list|,
name|sug
argument_list|)
expr_stmt|;
block|}
name|sug
operator|.
name|string
operator|=
name|alternative
expr_stmt|;
comment|// alternative frequency is present only for extendedResults=true
if|if
condition|(
name|suggestion
operator|.
name|getAlternativeFrequencies
argument_list|()
operator|!=
literal|null
operator|&&
name|suggestion
operator|.
name|getAlternativeFrequencies
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Integer
name|freq
init|=
name|suggestion
operator|.
name|getAlternativeFrequencies
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|freq
operator|!=
literal|null
condition|)
name|sug
operator|.
name|freq
operator|+=
name|freq
expr_stmt|;
block|}
block|}
block|}
name|NamedList
name|suggestions
init|=
operator|(
name|NamedList
operator|)
name|nl
operator|.
name|get
argument_list|(
literal|"suggestions"
argument_list|)
decl_stmt|;
if|if
condition|(
name|suggestions
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|collationList
init|=
name|suggestions
operator|.
name|getAll
argument_list|(
literal|"collation"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|collationRankList
init|=
name|suggestions
operator|.
name|getAll
argument_list|(
literal|"collationInternalRank"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|collationList
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|o
range|:
name|collationList
control|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|SpellCheckCollation
name|coll
init|=
operator|new
name|SpellCheckCollation
argument_list|()
decl_stmt|;
name|coll
operator|.
name|setCollationQuery
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
expr_stmt|;
if|if
condition|(
name|collationRankList
operator|!=
literal|null
operator|&&
name|collationRankList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|coll
operator|.
name|setInternalRank
argument_list|(
operator|(
name|Integer
operator|)
name|collationRankList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|SpellCheckCollation
name|priorColl
init|=
name|collations
operator|.
name|get
argument_list|(
name|coll
operator|.
name|getCollationQuery
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|priorColl
operator|!=
literal|null
condition|)
block|{
name|coll
operator|.
name|setInternalRank
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|coll
operator|.
name|getInternalRank
argument_list|()
argument_list|,
name|priorColl
operator|.
name|getInternalRank
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|collations
operator|.
name|put
argument_list|(
name|coll
operator|.
name|getCollationQuery
argument_list|()
argument_list|,
name|coll
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|NamedList
name|expandedCollation
init|=
operator|(
name|NamedList
operator|)
name|o
decl_stmt|;
name|SpellCheckCollation
name|coll
init|=
operator|new
name|SpellCheckCollation
argument_list|()
decl_stmt|;
name|coll
operator|.
name|setCollationQuery
argument_list|(
operator|(
name|String
operator|)
name|expandedCollation
operator|.
name|get
argument_list|(
literal|"collationQuery"
argument_list|)
argument_list|)
expr_stmt|;
name|coll
operator|.
name|setHits
argument_list|(
operator|(
name|Integer
operator|)
name|expandedCollation
operator|.
name|get
argument_list|(
literal|"hits"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxCollationTries
operator|>
literal|0
condition|)
block|{
name|coll
operator|.
name|setInternalRank
argument_list|(
operator|(
name|Integer
operator|)
name|expandedCollation
operator|.
name|get
argument_list|(
literal|"collationInternalRank"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|coll
operator|.
name|setMisspellingsAndCorrections
argument_list|(
operator|(
name|NamedList
operator|)
name|expandedCollation
operator|.
name|get
argument_list|(
literal|"misspellingsAndCorrections"
argument_list|)
argument_list|)
expr_stmt|;
name|SpellCheckCollation
name|priorColl
init|=
name|collations
operator|.
name|get
argument_list|(
name|coll
operator|.
name|getCollationQuery
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|priorColl
operator|!=
literal|null
condition|)
block|{
name|coll
operator|.
name|setHits
argument_list|(
name|coll
operator|.
name|getHits
argument_list|()
operator|+
name|priorColl
operator|.
name|getHits
argument_list|()
argument_list|)
expr_stmt|;
name|coll
operator|.
name|setInternalRank
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|coll
operator|.
name|getInternalRank
argument_list|()
argument_list|,
name|priorColl
operator|.
name|getInternalRank
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|collations
operator|.
name|put
argument_list|(
name|coll
operator|.
name|getCollationQuery
argument_list|()
argument_list|,
name|coll
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
comment|// all shard responses have been collected
comment|// create token and get top suggestions
name|SpellingResult
name|result
init|=
operator|new
name|SpellingResult
argument_list|(
name|tokens
argument_list|)
decl_stmt|;
comment|//todo: investigate, why does it need tokens beforehand?
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|origVsSuggested
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|original
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|//Only use this suggestion if all shards reported it as misspelled.
name|Integer
name|numShards
init|=
name|origVsShards
operator|.
name|get
argument_list|(
name|original
argument_list|)
decl_stmt|;
if|if
condition|(
name|numShards
operator|<
name|totalNumberShardResponses
condition|)
block|{
continue|continue;
block|}
name|HashSet
argument_list|<
name|String
argument_list|>
name|suggested
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|SuggestWordQueue
name|sugQueue
init|=
operator|new
name|SuggestWordQueue
argument_list|(
name|numSug
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|suggestion
range|:
name|suggested
control|)
block|{
name|SuggestWord
name|sug
init|=
name|suggestedVsWord
operator|.
name|get
argument_list|(
name|suggestion
argument_list|)
decl_stmt|;
name|sug
operator|.
name|score
operator|=
name|sd
operator|.
name|getDistance
argument_list|(
name|original
argument_list|,
name|sug
operator|.
name|string
argument_list|)
expr_stmt|;
if|if
condition|(
name|sug
operator|.
name|score
operator|<
name|min
condition|)
continue|continue;
name|sugQueue
operator|.
name|insertWithOverflow
argument_list|(
name|sug
argument_list|)
expr_stmt|;
if|if
condition|(
name|sugQueue
operator|.
name|size
argument_list|()
operator|==
name|numSug
condition|)
block|{
comment|// if queue full, maintain the minScore score
name|min
operator|=
name|sugQueue
operator|.
name|top
argument_list|()
operator|.
name|score
expr_stmt|;
block|}
block|}
comment|// create token
name|SpellCheckResponse
operator|.
name|Suggestion
name|suggestion
init|=
name|origVsSuggestion
operator|.
name|get
argument_list|(
name|original
argument_list|)
decl_stmt|;
name|Token
name|token
init|=
operator|new
name|Token
argument_list|(
name|original
argument_list|,
name|suggestion
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|suggestion
operator|.
name|getEndOffset
argument_list|()
argument_list|)
decl_stmt|;
comment|// get top 'count' suggestions out of 'sugQueue.size()' candidates
name|SuggestWord
index|[]
name|suggestions
init|=
operator|new
name|SuggestWord
index|[
name|Math
operator|.
name|min
argument_list|(
name|count
argument_list|,
name|sugQueue
operator|.
name|size
argument_list|()
argument_list|)
index|]
decl_stmt|;
comment|// skip the first sugQueue.size() - count elements
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|sugQueue
operator|.
name|size
argument_list|()
operator|-
name|count
condition|;
name|k
operator|++
control|)
name|sugQueue
operator|.
name|pop
argument_list|()
expr_stmt|;
comment|// now collect the top 'count' responses
for|for
control|(
name|int
name|k
init|=
name|Math
operator|.
name|min
argument_list|(
name|count
argument_list|,
name|sugQueue
operator|.
name|size
argument_list|()
argument_list|)
operator|-
literal|1
init|;
name|k
operator|>=
literal|0
condition|;
name|k
operator|--
control|)
block|{
name|suggestions
index|[
name|k
index|]
operator|=
name|sugQueue
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|extendedResults
condition|)
block|{
name|Integer
name|o
init|=
name|origVsFreq
operator|.
name|get
argument_list|(
name|original
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
name|result
operator|.
name|add
argument_list|(
name|token
argument_list|,
name|o
argument_list|)
expr_stmt|;
for|for
control|(
name|SuggestWord
name|word
range|:
name|suggestions
control|)
name|result
operator|.
name|add
argument_list|(
name|token
argument_list|,
name|word
operator|.
name|string
argument_list|,
name|word
operator|.
name|freq
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|words
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|sugQueue
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SuggestWord
name|word
range|:
name|suggestions
control|)
name|words
operator|.
name|add
argument_list|(
name|word
operator|.
name|string
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|token
argument_list|,
name|words
argument_list|)
expr_stmt|;
block|}
block|}
name|NamedList
name|response
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
name|NamedList
name|suggestions
init|=
name|toNamedList
argument_list|(
literal|false
argument_list|,
name|result
argument_list|,
name|origQuery
argument_list|,
name|extendedResults
argument_list|,
name|collate
argument_list|)
decl_stmt|;
if|if
condition|(
name|collate
condition|)
block|{
name|SpellCheckCollation
index|[]
name|sortedCollations
init|=
name|collations
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|SpellCheckCollation
index|[
name|collations
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|sortedCollations
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|maxCollations
operator|&&
name|i
operator|<
name|sortedCollations
operator|.
name|length
condition|)
block|{
name|SpellCheckCollation
name|collation
init|=
name|sortedCollations
index|[
name|i
index|]
decl_stmt|;
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|collationExtendedResults
condition|)
block|{
name|NamedList
name|extendedResult
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|extendedResult
operator|.
name|add
argument_list|(
literal|"collationQuery"
argument_list|,
name|collation
operator|.
name|getCollationQuery
argument_list|()
argument_list|)
expr_stmt|;
name|extendedResult
operator|.
name|add
argument_list|(
literal|"hits"
argument_list|,
name|collation
operator|.
name|getHits
argument_list|()
argument_list|)
expr_stmt|;
name|extendedResult
operator|.
name|add
argument_list|(
literal|"misspellingsAndCorrections"
argument_list|,
name|collation
operator|.
name|getMisspellingsAndCorrections
argument_list|()
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
literal|"collation"
argument_list|,
name|extendedResult
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|suggestions
operator|.
name|add
argument_list|(
literal|"collation"
argument_list|,
name|collation
operator|.
name|getCollationQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|response
operator|.
name|add
argument_list|(
literal|"suggestions"
argument_list|,
name|suggestions
argument_list|)
expr_stmt|;
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"spellcheck"
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
DECL|method|getTokens
specifier|private
name|Collection
argument_list|<
name|Token
argument_list|>
name|getTokens
parameter_list|(
name|String
name|q
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|IOException
block|{
name|Collection
argument_list|<
name|Token
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|>
argument_list|()
decl_stmt|;
name|TokenStream
name|ts
init|=
name|analyzer
operator|.
name|reusableTokenStream
argument_list|(
literal|""
argument_list|,
operator|new
name|StringReader
argument_list|(
name|q
argument_list|)
argument_list|)
decl_stmt|;
name|ts
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// TODO: support custom attributes
name|CharTermAttribute
name|termAtt
init|=
name|ts
operator|.
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|OffsetAttribute
name|offsetAtt
init|=
name|ts
operator|.
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|TypeAttribute
name|typeAtt
init|=
name|ts
operator|.
name|addAttribute
argument_list|(
name|TypeAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|FlagsAttribute
name|flagsAtt
init|=
name|ts
operator|.
name|addAttribute
argument_list|(
name|FlagsAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|PayloadAttribute
name|payloadAtt
init|=
name|ts
operator|.
name|addAttribute
argument_list|(
name|PayloadAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|PositionIncrementAttribute
name|posIncAtt
init|=
name|ts
operator|.
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
name|ts
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|Token
name|token
init|=
operator|new
name|Token
argument_list|()
decl_stmt|;
name|token
operator|.
name|copyBuffer
argument_list|(
name|termAtt
operator|.
name|buffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|termAtt
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|.
name|setOffset
argument_list|(
name|offsetAtt
operator|.
name|startOffset
argument_list|()
argument_list|,
name|offsetAtt
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|.
name|setType
argument_list|(
name|typeAtt
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|.
name|setFlags
argument_list|(
name|flagsAtt
operator|.
name|getFlags
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|.
name|setPayload
argument_list|(
name|payloadAtt
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|.
name|setPositionIncrement
argument_list|(
name|posIncAtt
operator|.
name|getPositionIncrement
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getSpellChecker
specifier|protected
name|SolrSpellChecker
name|getSpellChecker
parameter_list|(
name|SolrParams
name|params
parameter_list|)
block|{
return|return
name|spellCheckers
operator|.
name|get
argument_list|(
name|getDictionaryName
argument_list|(
name|params
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getDictionaryName
specifier|private
name|String
name|getDictionaryName
parameter_list|(
name|SolrParams
name|params
parameter_list|)
block|{
name|String
name|dictName
init|=
name|params
operator|.
name|get
argument_list|(
name|SPELLCHECK_DICT
argument_list|)
decl_stmt|;
if|if
condition|(
name|dictName
operator|==
literal|null
condition|)
block|{
name|dictName
operator|=
name|SolrSpellChecker
operator|.
name|DEFAULT_DICTIONARY_NAME
expr_stmt|;
block|}
return|return
name|dictName
return|;
block|}
comment|/**    * @return the spellchecker registered to a given name    */
DECL|method|getSpellChecker
specifier|public
name|SolrSpellChecker
name|getSpellChecker
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|spellCheckers
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|toNamedList
specifier|protected
name|NamedList
name|toNamedList
parameter_list|(
name|boolean
name|shardRequest
parameter_list|,
name|SpellingResult
name|spellingResult
parameter_list|,
name|String
name|origQuery
parameter_list|,
name|boolean
name|extendedResults
parameter_list|,
name|boolean
name|collate
parameter_list|)
block|{
name|NamedList
name|result
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Token
argument_list|,
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|suggestions
init|=
name|spellingResult
operator|.
name|getSuggestions
argument_list|()
decl_stmt|;
name|boolean
name|hasFreqInfo
init|=
name|spellingResult
operator|.
name|hasTokenFrequencyInfo
argument_list|()
decl_stmt|;
name|boolean
name|isCorrectlySpelled
init|=
literal|false
decl_stmt|;
name|int
name|numSuggestions
init|=
literal|0
decl_stmt|;
for|for
control|(
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|theSuggestion
range|:
name|suggestions
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|theSuggestion
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|numSuggestions
operator|++
expr_stmt|;
block|}
block|}
comment|// will be flipped to false if any of the suggestions are not in the index and hasFreqInfo is true
if|if
condition|(
name|numSuggestions
operator|>
literal|0
condition|)
block|{
name|isCorrectlySpelled
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Token
argument_list|,
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|entry
range|:
name|suggestions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Token
name|inputToken
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|theSuggestions
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|theSuggestions
operator|!=
literal|null
operator|&&
operator|(
name|theSuggestions
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|||
name|shardRequest
operator|)
condition|)
block|{
name|SimpleOrderedMap
name|suggestionList
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
name|suggestionList
operator|.
name|add
argument_list|(
literal|"numFound"
argument_list|,
name|theSuggestions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|suggestionList
operator|.
name|add
argument_list|(
literal|"startOffset"
argument_list|,
name|inputToken
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|suggestionList
operator|.
name|add
argument_list|(
literal|"endOffset"
argument_list|,
name|inputToken
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
comment|// Logical structure of normal (non-extended) results:
comment|// "suggestion":["alt1","alt2"]
comment|//
comment|// Logical structure of the extended results:
comment|// "suggestion":[
comment|//     {"word":"alt1","freq":7},
comment|//     {"word":"alt2","freq":4}
comment|// ]
if|if
condition|(
name|extendedResults
operator|&&
name|hasFreqInfo
condition|)
block|{
name|suggestionList
operator|.
name|add
argument_list|(
literal|"origFreq"
argument_list|,
name|spellingResult
operator|.
name|getTokenFrequency
argument_list|(
name|inputToken
argument_list|)
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|SimpleOrderedMap
argument_list|>
name|sugs
init|=
operator|new
name|ArrayList
argument_list|<
name|SimpleOrderedMap
argument_list|>
argument_list|()
decl_stmt|;
name|suggestionList
operator|.
name|add
argument_list|(
literal|"suggestion"
argument_list|,
name|sugs
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|suggEntry
range|:
name|theSuggestions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|SimpleOrderedMap
name|sugEntry
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
name|sugEntry
operator|.
name|add
argument_list|(
literal|"word"
argument_list|,
name|suggEntry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|sugEntry
operator|.
name|add
argument_list|(
literal|"freq"
argument_list|,
name|suggEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|sugs
operator|.
name|add
argument_list|(
name|sugEntry
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|suggestionList
operator|.
name|add
argument_list|(
literal|"suggestion"
argument_list|,
name|theSuggestions
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasFreqInfo
condition|)
block|{
name|isCorrectlySpelled
operator|=
name|isCorrectlySpelled
operator|&&
name|spellingResult
operator|.
name|getTokenFrequency
argument_list|(
name|inputToken
argument_list|)
operator|>
literal|0
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
operator|new
name|String
argument_list|(
name|inputToken
operator|.
name|buffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|inputToken
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|suggestionList
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasFreqInfo
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
literal|"correctlySpelled"
argument_list|,
name|isCorrectlySpelled
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|extendedResults
operator|&&
name|suggestions
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// if the word is misspelled, its added to suggestions with freqinfo
name|result
operator|.
name|add
argument_list|(
literal|"correctlySpelled"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|inform
specifier|public
name|void
name|inform
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
if|if
condition|(
name|initParams
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing spell checkers"
argument_list|)
expr_stmt|;
name|boolean
name|hasDefault
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|initParams
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|initParams
operator|.
name|getName
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
literal|"spellchecker"
argument_list|)
condition|)
block|{
name|NamedList
name|spellchecker
init|=
operator|(
name|NamedList
operator|)
name|initParams
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|className
init|=
operator|(
name|String
operator|)
name|spellchecker
operator|.
name|get
argument_list|(
literal|"classname"
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|==
literal|null
condition|)
name|className
operator|=
name|IndexBasedSpellChecker
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
name|SolrResourceLoader
name|loader
init|=
name|core
operator|.
name|getResourceLoader
argument_list|()
decl_stmt|;
name|SolrSpellChecker
name|checker
init|=
operator|(
name|SolrSpellChecker
operator|)
name|loader
operator|.
name|newInstance
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|checker
operator|!=
literal|null
condition|)
block|{
name|String
name|dictionary
init|=
name|checker
operator|.
name|init
argument_list|(
name|spellchecker
argument_list|,
name|core
argument_list|)
decl_stmt|;
if|if
condition|(
name|dictionary
operator|!=
literal|null
condition|)
block|{
name|boolean
name|isDefault
init|=
name|dictionary
operator|.
name|equals
argument_list|(
name|SolrSpellChecker
operator|.
name|DEFAULT_DICTIONARY_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDefault
operator|==
literal|true
operator|&&
name|hasDefault
operator|==
literal|false
condition|)
block|{
name|hasDefault
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isDefault
operator|==
literal|true
operator|&&
name|hasDefault
operator|==
literal|true
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"More than one dictionary is missing name."
argument_list|)
throw|;
block|}
name|spellCheckers
operator|.
name|put
argument_list|(
name|dictionary
argument_list|,
name|checker
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|hasDefault
operator|==
literal|false
condition|)
block|{
name|spellCheckers
operator|.
name|put
argument_list|(
name|SolrSpellChecker
operator|.
name|DEFAULT_DICTIONARY_NAME
argument_list|,
name|checker
argument_list|)
expr_stmt|;
name|hasDefault
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"More than one dictionary is missing name."
argument_list|)
throw|;
block|}
block|}
comment|// Register event listeners for this SpellChecker
name|core
operator|.
name|registerFirstSearcherListener
argument_list|(
operator|new
name|SpellCheckerListener
argument_list|(
name|core
argument_list|,
name|checker
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|buildOnCommit
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
operator|(
name|String
operator|)
name|spellchecker
operator|.
name|get
argument_list|(
literal|"buildOnCommit"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|buildOnOptimize
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
operator|(
name|String
operator|)
name|spellchecker
operator|.
name|get
argument_list|(
literal|"buildOnOptimize"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|buildOnCommit
operator|||
name|buildOnOptimize
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Registering newSearcher listener for spellchecker: "
operator|+
name|checker
operator|.
name|getDictionaryName
argument_list|()
argument_list|)
expr_stmt|;
name|core
operator|.
name|registerNewSearcherListener
argument_list|(
operator|new
name|SpellCheckerListener
argument_list|(
name|core
argument_list|,
name|checker
argument_list|,
name|buildOnCommit
argument_list|,
name|buildOnOptimize
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't load spell checker: "
operator|+
name|className
argument_list|)
throw|;
block|}
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|QueryConverter
argument_list|>
name|queryConverters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|QueryConverter
argument_list|>
argument_list|()
decl_stmt|;
name|core
operator|.
name|initPlugins
argument_list|(
name|queryConverters
argument_list|,
name|QueryConverter
operator|.
name|class
argument_list|)
expr_stmt|;
comment|//ensure that there is at least one query converter defined
if|if
condition|(
name|queryConverters
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No queryConverter defined, using default converter"
argument_list|)
expr_stmt|;
name|queryConverters
operator|.
name|put
argument_list|(
literal|"queryConverter"
argument_list|,
operator|new
name|SpellingQueryConverter
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//there should only be one
if|if
condition|(
name|queryConverters
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|queryConverter
operator|=
name|queryConverters
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|IndexSchema
name|schema
init|=
name|core
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|String
name|fieldTypeName
init|=
operator|(
name|String
operator|)
name|initParams
operator|.
name|get
argument_list|(
literal|"queryAnalyzerFieldType"
argument_list|)
decl_stmt|;
name|FieldType
name|fieldType
init|=
name|schema
operator|.
name|getFieldTypes
argument_list|()
operator|.
name|get
argument_list|(
name|fieldTypeName
argument_list|)
decl_stmt|;
name|Analyzer
name|analyzer
init|=
name|fieldType
operator|==
literal|null
condition|?
operator|new
name|WhitespaceAnalyzer
argument_list|(
name|core
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|luceneMatchVersion
argument_list|)
else|:
name|fieldType
operator|.
name|getQueryAnalyzer
argument_list|()
decl_stmt|;
comment|//TODO: There's got to be a better way!  Where's Spring when you need it?
name|queryConverter
operator|.
name|setAnalyzer
argument_list|(
name|analyzer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|SpellCheckerListener
specifier|private
specifier|static
class|class
name|SpellCheckerListener
implements|implements
name|SolrEventListener
block|{
DECL|field|core
specifier|private
specifier|final
name|SolrCore
name|core
decl_stmt|;
DECL|field|checker
specifier|private
specifier|final
name|SolrSpellChecker
name|checker
decl_stmt|;
DECL|field|buildOnCommit
specifier|private
specifier|final
name|boolean
name|buildOnCommit
decl_stmt|;
DECL|field|buildOnOptimize
specifier|private
specifier|final
name|boolean
name|buildOnOptimize
decl_stmt|;
DECL|method|SpellCheckerListener
specifier|public
name|SpellCheckerListener
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|SolrSpellChecker
name|checker
parameter_list|,
name|boolean
name|buildOnCommit
parameter_list|,
name|boolean
name|buildOnOptimize
parameter_list|)
block|{
name|this
operator|.
name|core
operator|=
name|core
expr_stmt|;
name|this
operator|.
name|checker
operator|=
name|checker
expr_stmt|;
name|this
operator|.
name|buildOnCommit
operator|=
name|buildOnCommit
expr_stmt|;
name|this
operator|.
name|buildOnOptimize
operator|=
name|buildOnOptimize
expr_stmt|;
block|}
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{     }
DECL|method|newSearcher
specifier|public
name|void
name|newSearcher
parameter_list|(
name|SolrIndexSearcher
name|newSearcher
parameter_list|,
name|SolrIndexSearcher
name|currentSearcher
parameter_list|)
block|{
if|if
condition|(
name|currentSearcher
operator|==
literal|null
condition|)
block|{
comment|// firstSearcher event
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Loading spell index for spellchecker: "
operator|+
name|checker
operator|.
name|getDictionaryName
argument_list|()
argument_list|)
expr_stmt|;
name|checker
operator|.
name|reload
argument_list|(
name|core
argument_list|,
name|newSearcher
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Exception in reloading spell check index for spellchecker: "
operator|+
name|checker
operator|.
name|getDictionaryName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// newSearcher event
if|if
condition|(
name|buildOnCommit
condition|)
block|{
name|buildSpellIndex
argument_list|(
name|newSearcher
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|buildOnOptimize
condition|)
block|{
if|if
condition|(
name|newSearcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|isOptimized
argument_list|()
condition|)
block|{
name|buildSpellIndex
argument_list|(
name|newSearcher
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Index is not optimized therefore skipping building spell check index for: "
operator|+
name|checker
operator|.
name|getDictionaryName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|buildSpellIndex
specifier|private
name|void
name|buildSpellIndex
parameter_list|(
name|SolrIndexSearcher
name|newSearcher
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Building spell index for spell checker: "
operator|+
name|checker
operator|.
name|getDictionaryName
argument_list|()
argument_list|)
expr_stmt|;
name|checker
operator|.
name|build
argument_list|(
name|core
argument_list|,
name|newSearcher
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Exception in building spell check index for spellchecker: "
operator|+
name|checker
operator|.
name|getDictionaryName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|postCommit
specifier|public
name|void
name|postCommit
parameter_list|()
block|{     }
block|}
DECL|method|getSpellCheckers
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|SolrSpellChecker
argument_list|>
name|getSpellCheckers
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|spellCheckers
argument_list|)
return|;
block|}
comment|// ///////////////////////////////////////////
comment|// / SolrInfoMBean
comment|// //////////////////////////////////////////
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"A Spell Checker component"
return|;
block|}
annotation|@
name|Override
DECL|method|getVersion
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
literal|"$Revision$"
return|;
block|}
annotation|@
name|Override
DECL|method|getSourceId
specifier|public
name|String
name|getSourceId
parameter_list|()
block|{
return|return
literal|"$Id$"
return|;
block|}
annotation|@
name|Override
DECL|method|getSource
specifier|public
name|String
name|getSource
parameter_list|()
block|{
return|return
literal|"$URL$"
return|;
block|}
block|}
end_class
end_unit
