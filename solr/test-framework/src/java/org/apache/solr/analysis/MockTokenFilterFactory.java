begin_unit
begin_package
DECL|package|org.apache.solr.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|TokenFilterFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|CharacterRunAutomaton
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|RegExp
import|;
end_import
begin_comment
comment|/**  * Factory for {@link MockTokenFilter} for testing purposes.  */
end_comment
begin_class
DECL|class|MockTokenFilterFactory
specifier|public
class|class
name|MockTokenFilterFactory
extends|extends
name|TokenFilterFactory
block|{
DECL|field|filter
specifier|final
name|CharacterRunAutomaton
name|filter
decl_stmt|;
DECL|field|enablePositionIncrements
specifier|final
name|boolean
name|enablePositionIncrements
decl_stmt|;
comment|/** Creates a new MockTokenizerFactory */
DECL|method|MockTokenFilterFactory
specifier|public
name|MockTokenFilterFactory
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|String
name|stopset
init|=
name|get
argument_list|(
name|args
argument_list|,
literal|"stopset"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"english"
argument_list|,
literal|"empty"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|stopregex
init|=
name|get
argument_list|(
name|args
argument_list|,
literal|"stopregex"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|stopset
condition|)
block|{
if|if
condition|(
literal|null
operator|!=
name|stopregex
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameters stopset and stopregex cannot both be specified."
argument_list|)
throw|;
block|}
if|if
condition|(
literal|"english"
operator|.
name|equalsIgnoreCase
argument_list|(
name|stopset
argument_list|)
condition|)
block|{
name|filter
operator|=
name|MockTokenFilter
operator|.
name|ENGLISH_STOPSET
expr_stmt|;
block|}
else|else
block|{
comment|// must be "empty"
name|filter
operator|=
name|MockTokenFilter
operator|.
name|EMPTY_STOPSET
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|null
operator|!=
name|stopregex
condition|)
block|{
name|RegExp
name|regex
init|=
operator|new
name|RegExp
argument_list|(
name|stopregex
argument_list|)
decl_stmt|;
name|filter
operator|=
operator|new
name|CharacterRunAutomaton
argument_list|(
name|regex
operator|.
name|toAutomaton
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Configuration Error: either the 'stopset' or the 'stopregex' parameter must be specified."
argument_list|)
throw|;
block|}
name|enablePositionIncrements
operator|=
name|getBoolean
argument_list|(
name|args
argument_list|,
literal|"enablePositionIncrements"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown parameters: "
operator|+
name|args
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|create
specifier|public
name|MockTokenFilter
name|create
parameter_list|(
name|TokenStream
name|stream
parameter_list|)
block|{
return|return
operator|new
name|MockTokenFilter
argument_list|(
name|stream
argument_list|,
name|filter
argument_list|)
return|;
block|}
block|}
end_class
end_unit
