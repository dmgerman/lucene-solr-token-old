begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MergePolicy
operator|.
name|MergeSpecification
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * A {@link MergePolicy} with a no-arg constructor that proxies to a   * wrapped instance retrieved from {@link LuceneTestCase#newMergePolicy}.  * Solr tests utilizing the Lucene randomized test framework can refer   * to this class in solrconfig.xml to get a fully randomized merge policy.  */
end_comment
begin_class
DECL|class|RandomMergePolicy
specifier|public
specifier|final
class|class
name|RandomMergePolicy
extends|extends
name|MergePolicy
block|{
DECL|field|log
specifier|public
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RandomMergePolicy
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**     * Not private so tests can inspect it,     * Not final so it can be set on clone    */
DECL|field|inner
specifier|final
name|MergePolicy
name|inner
decl_stmt|;
DECL|method|RandomMergePolicy
specifier|public
name|RandomMergePolicy
parameter_list|()
block|{
name|this
argument_list|(
name|LuceneTestCase
operator|.
name|newMergePolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|RandomMergePolicy
specifier|private
name|RandomMergePolicy
parameter_list|(
name|MergePolicy
name|inner
parameter_list|)
block|{
name|super
argument_list|(
name|inner
operator|.
name|getNoCFSRatio
argument_list|()
argument_list|,
call|(
name|long
call|)
argument_list|(
name|inner
operator|.
name|getMaxCFSSegmentSizeMB
argument_list|()
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|inner
operator|=
name|inner
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"RandomMergePolicy wrapping {}: {}"
argument_list|,
name|inner
operator|.
name|getClass
argument_list|()
argument_list|,
name|inner
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|inner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|findForcedDeletesMerges
specifier|public
name|MergeSpecification
name|findForcedDeletesMerges
parameter_list|(
name|SegmentInfos
name|segmentInfos
parameter_list|,
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|inner
operator|.
name|findForcedDeletesMerges
argument_list|(
name|segmentInfos
argument_list|,
name|writer
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|findForcedMerges
specifier|public
name|MergeSpecification
name|findForcedMerges
parameter_list|(
name|SegmentInfos
name|segmentInfos
parameter_list|,
name|int
name|maxSegmentCount
parameter_list|,
name|Map
argument_list|<
name|SegmentCommitInfo
argument_list|,
name|Boolean
argument_list|>
name|segmentsToMerge
parameter_list|,
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|inner
operator|.
name|findForcedMerges
argument_list|(
name|segmentInfos
argument_list|,
name|maxSegmentCount
argument_list|,
name|segmentsToMerge
argument_list|,
name|writer
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|findMerges
specifier|public
name|MergeSpecification
name|findMerges
parameter_list|(
name|MergeTrigger
name|mergeTrigger
parameter_list|,
name|SegmentInfos
name|segmentInfos
parameter_list|,
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|inner
operator|.
name|findMerges
argument_list|(
name|mergeTrigger
argument_list|,
name|segmentInfos
argument_list|,
name|writer
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|useCompoundFile
specifier|public
name|boolean
name|useCompoundFile
parameter_list|(
name|SegmentInfos
name|infos
parameter_list|,
name|SegmentCommitInfo
name|mergedInfo
parameter_list|,
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|inner
operator|.
name|useCompoundFile
argument_list|(
name|infos
argument_list|,
name|mergedInfo
argument_list|,
name|writer
argument_list|)
return|;
block|}
block|}
end_class
end_unit
