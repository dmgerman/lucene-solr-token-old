begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|UncaughtExceptionHandler
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|NIOServerCnxnFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|Statement
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|rules
operator|.
name|StatementAdapter
import|;
end_import
begin_class
DECL|class|RevertDefaultThreadHandlerRule
specifier|public
specifier|final
class|class
name|RevertDefaultThreadHandlerRule
implements|implements
name|TestRule
block|{
DECL|field|applied
specifier|private
specifier|final
specifier|static
name|AtomicBoolean
name|applied
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|apply
specifier|public
name|Statement
name|apply
parameter_list|(
name|Statement
name|s
parameter_list|,
name|Description
name|d
parameter_list|)
block|{
return|return
operator|new
name|StatementAdapter
argument_list|(
name|s
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|before
parameter_list|()
throws|throws
name|Throwable
block|{
if|if
condition|(
operator|!
name|applied
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
condition|)
block|{
name|UncaughtExceptionHandler
name|p
init|=
name|Thread
operator|.
name|getDefaultUncaughtExceptionHandler
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Try to initialize a zookeeper class that reinitializes default exception handler.
name|Class
argument_list|<
name|?
argument_list|>
name|cl
init|=
name|NIOServerCnxnFactory
operator|.
name|class
decl_stmt|;
comment|// Make sure static initializers have been called.
name|Class
operator|.
name|forName
argument_list|(
name|cl
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
name|cl
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|p
operator|==
name|Thread
operator|.
name|getDefaultUncaughtExceptionHandler
argument_list|()
condition|)
block|{
comment|//  throw new RuntimeException("Zookeeper no longer resets default thread handler.");
block|}
name|Thread
operator|.
name|setDefaultUncaughtExceptionHandler
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|;
block|}
block|}
end_class
end_unit
