begin_unit
begin_package
DECL|package|org.apache.solr.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|XML
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPath
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpressionException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_class
DECL|class|BaseTestHarness
specifier|abstract
specifier|public
class|class
name|BaseTestHarness
block|{
DECL|field|builderTL
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|DocumentBuilder
argument_list|>
name|builderTL
init|=
operator|new
name|ThreadLocal
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|xpathTL
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|XPath
argument_list|>
name|xpathTL
init|=
operator|new
name|ThreadLocal
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|getXmlDocumentBuilder
specifier|public
specifier|static
name|DocumentBuilder
name|getXmlDocumentBuilder
parameter_list|()
block|{
try|try
block|{
name|DocumentBuilder
name|builder
init|=
name|builderTL
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
name|builderTL
operator|.
name|set
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getXpath
specifier|public
specifier|static
name|XPath
name|getXpath
parameter_list|()
block|{
try|try
block|{
name|XPath
name|xpath
init|=
name|xpathTL
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|xpath
operator|==
literal|null
condition|)
block|{
name|xpath
operator|=
name|XPathFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXPath
argument_list|()
expr_stmt|;
name|xpathTL
operator|.
name|set
argument_list|(
name|xpath
argument_list|)
expr_stmt|;
block|}
return|return
name|xpath
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * A helper method which validates a String against an array of XPath test    * strings.    *    * @param xml The xml String to validate    * @param tests Array of XPath strings to test (in boolean mode) on the xml    * @return null if all good, otherwise the first test that fails.    */
DECL|method|validateXPath
specifier|public
specifier|static
name|String
name|validateXPath
parameter_list|(
name|String
name|xml
parameter_list|,
name|String
modifier|...
name|tests
parameter_list|)
throws|throws
name|XPathExpressionException
throws|,
name|SAXException
block|{
if|if
condition|(
name|tests
operator|==
literal|null
operator|||
name|tests
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|null
return|;
name|Document
name|document
init|=
literal|null
decl_stmt|;
try|try
block|{
name|document
operator|=
name|getXmlDocumentBuilder
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|xml
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Totally weird UTF-8 exception"
argument_list|,
name|e1
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e2
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Totally weird io exception"
argument_list|,
name|e2
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|xp
range|:
name|tests
control|)
block|{
name|xp
operator|=
name|xp
operator|.
name|trim
argument_list|()
expr_stmt|;
name|Boolean
name|bool
init|=
operator|(
name|Boolean
operator|)
name|getXpath
argument_list|()
operator|.
name|evaluate
argument_list|(
name|xp
argument_list|,
name|document
argument_list|,
name|XPathConstants
operator|.
name|BOOLEAN
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bool
condition|)
block|{
return|return
name|xp
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|evaluateXPath
specifier|public
specifier|static
name|Object
name|evaluateXPath
parameter_list|(
name|String
name|xml
parameter_list|,
name|String
name|xpath
parameter_list|,
name|QName
name|returnType
parameter_list|)
throws|throws
name|XPathExpressionException
throws|,
name|SAXException
block|{
if|if
condition|(
literal|null
operator|==
name|xpath
condition|)
return|return
literal|null
return|;
name|Document
name|document
init|=
literal|null
decl_stmt|;
try|try
block|{
name|document
operator|=
name|getXmlDocumentBuilder
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|xml
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Totally weird UTF-8 exception"
argument_list|,
name|e1
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e2
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Totally weird io exception"
argument_list|,
name|e2
argument_list|)
throw|;
block|}
name|xpath
operator|=
name|xpath
operator|.
name|trim
argument_list|()
expr_stmt|;
return|return
name|getXpath
argument_list|()
operator|.
name|evaluate
argument_list|(
name|xpath
operator|.
name|trim
argument_list|()
argument_list|,
name|document
argument_list|,
name|returnType
argument_list|)
return|;
block|}
comment|/**    * A helper that creates an xml&lt;doc&gt; containing all of the    * fields and values specified    *    * @param fieldsAndValues 0 and Even numbered args are fields names odds are field values.    */
DECL|method|makeSimpleDoc
specifier|public
specifier|static
name|String
name|makeSimpleDoc
parameter_list|(
name|String
modifier|...
name|fieldsAndValues
parameter_list|)
block|{
try|try
block|{
name|StringWriter
name|w
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|w
operator|.
name|append
argument_list|(
literal|"<doc>"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldsAndValues
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|XML
operator|.
name|writeXML
argument_list|(
name|w
argument_list|,
literal|"field"
argument_list|,
name|fieldsAndValues
index|[
name|i
operator|+
literal|1
index|]
argument_list|,
literal|"name"
argument_list|,
name|fieldsAndValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|append
argument_list|(
literal|"</doc>"
argument_list|)
expr_stmt|;
return|return
name|w
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"this should never happen with a StringWriter"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Generates a delete by query xml string    * @param q Query that has not already been xml escaped    * @param args The attributes of the delete tag    */
DECL|method|deleteByQuery
specifier|public
specifier|static
name|String
name|deleteByQuery
parameter_list|(
name|String
name|q
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
block|{
try|try
block|{
name|StringWriter
name|r
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|XML
operator|.
name|writeXML
argument_list|(
name|r
argument_list|,
literal|"query"
argument_list|,
name|q
argument_list|)
expr_stmt|;
return|return
name|delete
argument_list|(
name|r
operator|.
name|getBuffer
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"this should never happen with a StringWriter"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Generates a delete by id xml string    * @param id ID that has not already been xml escaped    * @param args The attributes of the delete tag    */
DECL|method|deleteById
specifier|public
specifier|static
name|String
name|deleteById
parameter_list|(
name|String
name|id
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
block|{
try|try
block|{
name|StringWriter
name|r
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|XML
operator|.
name|writeXML
argument_list|(
name|r
argument_list|,
literal|"id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|delete
argument_list|(
name|r
operator|.
name|getBuffer
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"this should never happen with a StringWriter"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Generates a delete xml string    * @param val text that has not already been xml escaped    * @param args 0 and Even numbered args are params, Odd numbered args are XML escaped values.    */
DECL|method|delete
specifier|private
specifier|static
name|String
name|delete
parameter_list|(
name|String
name|val
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
block|{
try|try
block|{
name|StringWriter
name|r
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|XML
operator|.
name|writeUnescapedXML
argument_list|(
name|r
argument_list|,
literal|"delete"
argument_list|,
name|val
argument_list|,
operator|(
name|Object
index|[]
operator|)
name|args
argument_list|)
expr_stmt|;
return|return
name|r
operator|.
name|getBuffer
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"this should never happen with a StringWriter"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Helper that returns an&lt;optimize&gt; String with    * optional key/val pairs.    *    * @param args 0 and Even numbered args are params, Odd numbered args are values.    */
DECL|method|optimize
specifier|public
specifier|static
name|String
name|optimize
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
block|{
return|return
name|simpleTag
argument_list|(
literal|"optimize"
argument_list|,
name|args
argument_list|)
return|;
block|}
DECL|method|simpleTag
specifier|public
specifier|static
name|String
name|simpleTag
parameter_list|(
name|String
name|tag
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
block|{
try|try
block|{
name|StringWriter
name|r
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
comment|// this is annoying
if|if
condition|(
literal|null
operator|==
name|args
operator|||
literal|0
operator|==
name|args
operator|.
name|length
condition|)
block|{
name|XML
operator|.
name|writeXML
argument_list|(
name|r
argument_list|,
name|tag
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XML
operator|.
name|writeXML
argument_list|(
name|r
argument_list|,
name|tag
argument_list|,
literal|null
argument_list|,
operator|(
name|Object
index|[]
operator|)
name|args
argument_list|)
expr_stmt|;
block|}
return|return
name|r
operator|.
name|getBuffer
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"this should never happen with a StringWriter"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Helper that returns an&lt;commit&gt; String with    * optional key/val pairs.    *    * @param args 0 and Even numbered args are params, Odd numbered args are values.    */
DECL|method|commit
specifier|public
specifier|static
name|String
name|commit
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
block|{
return|return
name|simpleTag
argument_list|(
literal|"commit"
argument_list|,
name|args
argument_list|)
return|;
block|}
comment|/** Reloads the core */
DECL|method|reload
specifier|abstract
specifier|public
name|void
name|reload
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/**    * Processes an "update" (add, commit or optimize) and    * returns the response as a String.    *     * This method does NOT commit after the request.    *    * @param xml The XML of the update    * @return The XML response to the update    */
DECL|method|update
specifier|abstract
specifier|public
name|String
name|update
parameter_list|(
name|String
name|xml
parameter_list|)
function_decl|;
comment|/**    * Validates that an "update" (add, commit or optimize) results in success.    *    * :TODO: currently only deals with one add/doc at a time, this will need changed if/when SOLR-2 is resolved    *    * @param xml The XML of the update    * @return null if successful, otherwise the XML response to the update    */
DECL|method|validateUpdate
specifier|public
name|String
name|validateUpdate
parameter_list|(
name|String
name|xml
parameter_list|)
throws|throws
name|SAXException
block|{
return|return
name|checkUpdateStatus
argument_list|(
name|xml
argument_list|,
literal|"0"
argument_list|)
return|;
block|}
comment|/**    * Validates that an "update" (add, commit or optimize) results in success.    *    * :TODO: currently only deals with one add/doc at a time, this will need changed if/when SOLR-2 is resolved    *    * @param xml The XML of the update    * @return null if successful, otherwise the XML response to the update    */
DECL|method|validateErrorUpdate
specifier|public
name|String
name|validateErrorUpdate
parameter_list|(
name|String
name|xml
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
return|return
name|checkUpdateStatus
argument_list|(
name|xml
argument_list|,
literal|"1"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
comment|// return ((SolrException)e).getMessage();
return|return
literal|null
return|;
comment|// success
block|}
block|}
comment|/**    * Validates that an "update" (add, commit or optimize) results in success.    *    * :TODO: currently only deals with one add/doc at a time, this will need changed if/when SOLR-2 is resolved    *    * @param xml The XML of the update    * @return null if successful, otherwise the XML response to the update    */
DECL|method|checkUpdateStatus
specifier|public
name|String
name|checkUpdateStatus
parameter_list|(
name|String
name|xml
parameter_list|,
name|String
name|code
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
name|String
name|res
init|=
name|update
argument_list|(
name|xml
argument_list|)
decl_stmt|;
name|String
name|valid
init|=
name|validateXPath
argument_list|(
name|res
argument_list|,
literal|"//int[@name='status']="
operator|+
name|code
argument_list|)
decl_stmt|;
return|return
operator|(
literal|null
operator|==
name|valid
operator|)
condition|?
literal|null
else|:
name|res
return|;
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"?!? static xpath has bug?"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class
end_unit
