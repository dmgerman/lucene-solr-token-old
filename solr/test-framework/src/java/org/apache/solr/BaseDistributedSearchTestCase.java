begin_unit
begin_package
DECL|package|org.apache.solr
package|package
name|org
operator|.
name|apache
operator|.
name|solr
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|UpdateResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|TrieDateField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * Helper base class for distributed search test cases  *  * @since solr 1.5  */
end_comment
begin_class
DECL|class|BaseDistributedSearchTestCase
specifier|public
specifier|abstract
class|class
name|BaseDistributedSearchTestCase
extends|extends
name|SolrTestCaseJ4
block|{
comment|// TODO: this shouldn't be static. get the random when you need it to avoid sharing.
DECL|field|r
specifier|public
specifier|static
name|Random
name|r
decl_stmt|;
DECL|field|nodeCnt
specifier|private
name|AtomicInteger
name|nodeCnt
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|useExplicitNodeNames
specifier|protected
name|boolean
name|useExplicitNodeNames
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|initialize
specifier|public
specifier|static
name|void
name|initialize
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"SOLR-4147: ibm 64bit has jvm bugs!"
argument_list|,
name|Constants
operator|.
name|JRE_IS_64BIT
operator|&&
name|Constants
operator|.
name|JAVA_VENDOR
operator|.
name|startsWith
argument_list|(
literal|"IBM"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|Random
argument_list|(
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set's the value of the "hostContext" system property to a random path     * like string (which may or may not contain sub-paths).  This is used     * in the default constructor for this test to help ensure no code paths have    * hardcoded assumptions about the servlet context used to run solr.    *<p>    * Test configs may use the<code>${hostContext}</code> variable to access     * this system property.    *</p>    * @see #BaseDistributedSearchTestCase()    * @see #clearHostContext    */
annotation|@
name|BeforeClass
DECL|method|initHostContext
specifier|public
specifier|static
name|void
name|initHostContext
parameter_list|()
block|{
comment|// Can't use randomRealisticUnicodeString because unescaped unicode is
comment|// not allowed in URL paths
comment|// Can't use URLEncoder.encode(randomRealisticUnicodeString) because
comment|// Jetty freaks out and returns 404's when the context uses escapes
name|StringBuilder
name|hostContext
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// half the time we use the root context, the other half...
comment|// Remember: randomSimpleString might be the empty string
name|hostContext
operator|.
name|append
argument_list|(
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|hostContext
operator|.
name|append
argument_list|(
literal|"_"
argument_list|)
expr_stmt|;
block|}
name|hostContext
operator|.
name|append
argument_list|(
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|"/"
operator|.
name|equals
argument_list|(
name|hostContext
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
comment|// if our random string is empty, this might add a trailing slash,
comment|// but our code should be ok with that
name|hostContext
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we got 'lucky' and still just have the root context,
comment|// NOOP: don't try to add a subdir to nothing (ie "//" is bad)
block|}
block|}
comment|// paranoia, we *really* don't want to ever get "//" in a path...
specifier|final
name|String
name|hc
init|=
name|hostContext
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\/+"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Setting hostContext system property: "
operator|+
name|hc
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"hostContext"
argument_list|,
name|hc
argument_list|)
expr_stmt|;
block|}
comment|/**    * Clears the "hostContext" system property    * @see #initHostContext    */
annotation|@
name|AfterClass
DECL|method|clearHostContext
specifier|public
specifier|static
name|void
name|clearHostContext
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"hostContext"
argument_list|)
expr_stmt|;
block|}
DECL|method|getHostContextSuitableForServletContext
specifier|private
specifier|static
name|String
name|getHostContextSuitableForServletContext
parameter_list|()
block|{
name|String
name|ctx
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"hostContext"
argument_list|,
literal|"/solr"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|ctx
argument_list|)
condition|)
name|ctx
operator|=
literal|"/solr"
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|ctx
operator|=
name|ctx
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ctx
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
empty_stmt|;
if|if
condition|(
operator|!
name|ctx
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|ctx
operator|=
literal|"/"
operator|+
name|ctx
expr_stmt|;
return|return
name|ctx
return|;
block|}
comment|/**    * Constructs a test in which the jetty+solr instances as well as the     * solr clients all use the value of the "hostContext" system property.    *<p>    * If the system property is not set, or is set to the empty string     * (neither of which should normally happen unless a subclass explicitly     * modifies the property set by {@link #initHostContext} prior to calling     * this constructor) a servlet context of "/solr" is used. (this is for     * consistency with the default behavior of solr.xml parsing when using     *<code>hostContext="${hostContext:}"</code>    *</p>    *<p>    * If the system property is set to a value which does not begin with a     * "/" (which should normally happen unless a subclass explicitly     * modifies the property set by {@link #initHostContext} prior to calling     * this constructor) a leading "/" will be prepended.    *</p>    *    * @see #initHostContext    */
DECL|method|BaseDistributedSearchTestCase
specifier|protected
name|BaseDistributedSearchTestCase
parameter_list|()
block|{
name|this
argument_list|(
name|getHostContextSuitableForServletContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param context explicit servlet context path to use (eg: "/solr")    */
DECL|method|BaseDistributedSearchTestCase
specifier|protected
name|BaseDistributedSearchTestCase
parameter_list|(
specifier|final
name|String
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|deadServers
operator|=
operator|new
name|String
index|[]
block|{
literal|"[ff01::114]:33332"
operator|+
name|context
block|,
literal|"[ff01::083]:33332"
operator|+
name|context
block|,
literal|"[ff01::213]:33332"
operator|+
name|context
block|}
expr_stmt|;
block|}
DECL|field|shardCount
specifier|protected
name|int
name|shardCount
init|=
literal|4
decl_stmt|;
comment|// the actual number of solr cores that will be created in the cluster
comment|/**    * Sub classes can set this flag in their constructor to true if they    * want to fix the number of shards to 'shardCount'    *    * The default is false which means that test will be executed with    * 1, 2, 3, ....shardCount number of shards repeatedly    */
DECL|field|fixShardCount
specifier|protected
name|boolean
name|fixShardCount
init|=
literal|false
decl_stmt|;
DECL|field|controlJetty
specifier|protected
name|JettySolrRunner
name|controlJetty
decl_stmt|;
DECL|field|clients
specifier|protected
name|List
argument_list|<
name|SolrServer
argument_list|>
name|clients
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|jettys
specifier|protected
name|List
argument_list|<
name|JettySolrRunner
argument_list|>
name|jettys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|context
specifier|protected
name|String
name|context
decl_stmt|;
DECL|field|deadServers
specifier|protected
name|String
index|[]
name|deadServers
decl_stmt|;
DECL|field|shards
specifier|protected
name|String
name|shards
decl_stmt|;
DECL|field|shardsArr
specifier|protected
name|String
index|[]
name|shardsArr
decl_stmt|;
DECL|field|testDir
specifier|protected
name|File
name|testDir
decl_stmt|;
DECL|field|controlClient
specifier|protected
name|SolrServer
name|controlClient
decl_stmt|;
comment|// to stress with higher thread counts and requests, make sure the junit
comment|// xml formatter is not being used (all output will be buffered before
comment|// transformation to xml and cause an OOM exception).
DECL|field|stress
specifier|protected
name|int
name|stress
init|=
name|TEST_NIGHTLY
condition|?
literal|2
else|:
literal|0
decl_stmt|;
DECL|field|verifyStress
specifier|protected
name|boolean
name|verifyStress
init|=
literal|true
decl_stmt|;
DECL|field|nThreads
specifier|protected
name|int
name|nThreads
init|=
literal|3
decl_stmt|;
DECL|field|ORDERED
specifier|public
specifier|static
name|int
name|ORDERED
init|=
literal|1
decl_stmt|;
DECL|field|SKIP
specifier|public
specifier|static
name|int
name|SKIP
init|=
literal|2
decl_stmt|;
DECL|field|SKIPVAL
specifier|public
specifier|static
name|int
name|SKIPVAL
init|=
literal|4
decl_stmt|;
DECL|field|UNORDERED
specifier|public
specifier|static
name|int
name|UNORDERED
init|=
literal|8
decl_stmt|;
DECL|field|flags
specifier|protected
name|int
name|flags
decl_stmt|;
DECL|field|handle
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|handle
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|id
specifier|protected
name|String
name|id
init|=
literal|"id"
decl_stmt|;
DECL|field|log
specifier|public
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BaseDistributedSearchTestCase
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rint
specifier|public
specifier|static
name|RandVal
name|rint
init|=
operator|new
name|RandVal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|val
parameter_list|()
block|{
return|return
name|r
operator|.
name|nextInt
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|field|rlong
specifier|public
specifier|static
name|RandVal
name|rlong
init|=
operator|new
name|RandVal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|val
parameter_list|()
block|{
return|return
name|r
operator|.
name|nextLong
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|field|rfloat
specifier|public
specifier|static
name|RandVal
name|rfloat
init|=
operator|new
name|RandVal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|val
parameter_list|()
block|{
return|return
name|r
operator|.
name|nextFloat
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|field|rdouble
specifier|public
specifier|static
name|RandVal
name|rdouble
init|=
operator|new
name|RandVal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|val
parameter_list|()
block|{
return|return
name|r
operator|.
name|nextDouble
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|field|rdate
specifier|public
specifier|static
name|RandVal
name|rdate
init|=
operator|new
name|RandDate
argument_list|()
decl_stmt|;
comment|/**    * Perform the actual tests here    *    * @throws Exception on error    */
DECL|method|doTest
specifier|public
specifier|abstract
name|void
name|doTest
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|field|fieldNames
specifier|public
specifier|static
name|String
index|[]
name|fieldNames
init|=
operator|new
name|String
index|[]
block|{
literal|"n_ti1"
block|,
literal|"n_f1"
block|,
literal|"n_tf1"
block|,
literal|"n_d1"
block|,
literal|"n_td1"
block|,
literal|"n_l1"
block|,
literal|"n_tl1"
block|,
literal|"n_dt1"
block|,
literal|"n_tdt1"
block|}
decl_stmt|;
DECL|field|randVals
specifier|public
specifier|static
name|RandVal
index|[]
name|randVals
init|=
operator|new
name|RandVal
index|[]
block|{
name|rint
block|,
name|rfloat
block|,
name|rfloat
block|,
name|rdouble
block|,
name|rdouble
block|,
name|rlong
block|,
name|rlong
block|,
name|rdate
block|,
name|rdate
block|}
decl_stmt|;
DECL|method|getFieldNames
specifier|protected
name|String
index|[]
name|getFieldNames
parameter_list|()
block|{
return|return
name|fieldNames
return|;
block|}
DECL|method|getRandValues
specifier|protected
name|RandVal
index|[]
name|getRandValues
parameter_list|()
block|{
return|return
name|randVals
return|;
block|}
comment|/**    * Subclasses can override this to change a test's solr home    * (default is in test-files)    */
DECL|method|getSolrHome
specifier|public
name|String
name|getSolrHome
parameter_list|()
block|{
return|return
name|SolrTestCaseJ4
operator|.
name|TEST_HOME
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrTestCaseJ4
operator|.
name|resetExceptionIgnores
argument_list|()
expr_stmt|;
comment|// ignore anything with ignore_exception in it
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.test.sys.prop1"
argument_list|,
literal|"propone"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.test.sys.prop2"
argument_list|,
literal|"proptwo"
argument_list|)
expr_stmt|;
name|testDir
operator|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|destroyServers
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
DECL|method|createControlJetty
specifier|protected
name|JettySolrRunner
name|createControlJetty
parameter_list|()
throws|throws
name|Exception
block|{
name|JettySolrRunner
name|jetty
init|=
name|createJetty
argument_list|(
operator|new
name|File
argument_list|(
name|getSolrHome
argument_list|()
argument_list|)
argument_list|,
name|testDir
operator|+
literal|"/control/data"
argument_list|,
literal|null
argument_list|,
name|getSolrConfigFile
argument_list|()
argument_list|,
name|getSchemaFile
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|jetty
return|;
block|}
DECL|method|createServers
specifier|protected
name|void
name|createServers
parameter_list|(
name|int
name|numShards
parameter_list|)
throws|throws
name|Exception
block|{
name|controlJetty
operator|=
name|createControlJetty
argument_list|()
expr_stmt|;
name|controlClient
operator|=
name|createNewSolrServer
argument_list|(
name|controlJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|shardsArr
operator|=
operator|new
name|String
index|[
name|numShards
index|]
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numShards
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|JettySolrRunner
name|j
init|=
name|createJetty
argument_list|(
operator|new
name|File
argument_list|(
name|getSolrHome
argument_list|()
argument_list|)
argument_list|,
name|testDir
operator|+
literal|"/shard"
operator|+
name|i
operator|+
literal|"/data"
argument_list|,
literal|null
argument_list|,
name|getSolrConfigFile
argument_list|()
argument_list|,
name|getSchemaFile
argument_list|()
argument_list|)
decl_stmt|;
name|jettys
operator|.
name|add
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|clients
operator|.
name|add
argument_list|(
name|createNewSolrServer
argument_list|(
name|j
operator|.
name|getLocalPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|shardStr
init|=
name|buildUrl
argument_list|(
name|j
operator|.
name|getLocalPort
argument_list|()
argument_list|)
decl_stmt|;
name|shardsArr
index|[
name|i
index|]
operator|=
name|shardStr
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|shardStr
argument_list|)
expr_stmt|;
block|}
name|shards
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
DECL|method|setDistributedParams
specifier|protected
name|void
name|setDistributedParams
parameter_list|(
name|ModifiableSolrParams
name|params
parameter_list|)
block|{
name|params
operator|.
name|set
argument_list|(
literal|"shards"
argument_list|,
name|getShardsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getShardsString
specifier|protected
name|String
name|getShardsString
parameter_list|()
block|{
if|if
condition|(
name|deadServers
operator|==
literal|null
condition|)
return|return
name|shards
return|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|shard
range|:
name|shardsArr
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|int
name|nDeadServers
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|deadServers
operator|.
name|length
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|nDeadServers
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|replicas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|deadServers
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|replicas
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|replicas
operator|.
name|add
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|nDeadServers
operator|+
literal|1
argument_list|)
argument_list|,
name|shard
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nDeadServers
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|'|'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|replicas
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|destroyServers
specifier|protected
name|void
name|destroyServers
parameter_list|()
throws|throws
name|Exception
block|{
name|controlJetty
operator|.
name|stop
argument_list|()
expr_stmt|;
operator|(
operator|(
name|HttpSolrServer
operator|)
name|controlClient
operator|)
operator|.
name|shutdown
argument_list|()
expr_stmt|;
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|jettys
control|)
name|jetty
operator|.
name|stop
argument_list|()
expr_stmt|;
for|for
control|(
name|SolrServer
name|client
range|:
name|clients
control|)
operator|(
operator|(
name|HttpSolrServer
operator|)
name|client
operator|)
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|clients
operator|.
name|clear
argument_list|()
expr_stmt|;
name|jettys
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|createJetty
specifier|public
name|JettySolrRunner
name|createJetty
parameter_list|(
name|File
name|solrHome
parameter_list|,
name|String
name|dataDir
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createJetty
argument_list|(
name|solrHome
argument_list|,
name|dataDir
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createJetty
specifier|public
name|JettySolrRunner
name|createJetty
parameter_list|(
name|File
name|solrHome
parameter_list|,
name|String
name|dataDir
parameter_list|,
name|String
name|shardId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createJetty
argument_list|(
name|solrHome
argument_list|,
name|dataDir
argument_list|,
name|shardId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createJetty
specifier|public
name|JettySolrRunner
name|createJetty
parameter_list|(
name|File
name|solrHome
parameter_list|,
name|String
name|dataDir
parameter_list|,
name|String
name|shardList
parameter_list|,
name|String
name|solrConfigOverride
parameter_list|,
name|String
name|schemaOverride
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createJetty
argument_list|(
name|solrHome
argument_list|,
name|dataDir
argument_list|,
name|shardList
argument_list|,
name|solrConfigOverride
argument_list|,
name|schemaOverride
argument_list|,
name|useExplicitNodeNames
argument_list|)
return|;
block|}
DECL|method|createJetty
specifier|public
name|JettySolrRunner
name|createJetty
parameter_list|(
name|File
name|solrHome
parameter_list|,
name|String
name|dataDir
parameter_list|,
name|String
name|shardList
parameter_list|,
name|String
name|solrConfigOverride
parameter_list|,
name|String
name|schemaOverride
parameter_list|,
name|boolean
name|explicitCoreNodeName
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|stopAtShutdown
init|=
literal|true
decl_stmt|;
name|JettySolrRunner
name|jetty
init|=
operator|new
name|JettySolrRunner
argument_list|(
name|solrHome
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|context
argument_list|,
literal|0
argument_list|,
name|solrConfigOverride
argument_list|,
name|schemaOverride
argument_list|,
name|stopAtShutdown
argument_list|,
name|getExtraServlets
argument_list|()
argument_list|,
name|sslConfig
argument_list|,
name|getExtraRequestFilters
argument_list|()
argument_list|)
decl_stmt|;
name|jetty
operator|.
name|setShards
argument_list|(
name|shardList
argument_list|)
expr_stmt|;
name|jetty
operator|.
name|setDataDir
argument_list|(
name|dataDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|explicitCoreNodeName
condition|)
block|{
name|jetty
operator|.
name|setCoreNodeName
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|nodeCnt
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|jetty
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|jetty
return|;
block|}
comment|/** Override this method to insert extra servlets into the JettySolrRunners that are created using createJetty() */
DECL|method|getExtraServlets
specifier|public
name|SortedMap
argument_list|<
name|ServletHolder
argument_list|,
name|String
argument_list|>
name|getExtraServlets
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/** Override this method to insert extra filters into the JettySolrRunners that are created using createJetty() */
DECL|method|getExtraRequestFilters
specifier|public
name|SortedMap
argument_list|<
name|Class
argument_list|,
name|String
argument_list|>
name|getExtraRequestFilters
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|createNewSolrServer
specifier|protected
name|SolrServer
name|createNewSolrServer
parameter_list|(
name|int
name|port
parameter_list|)
block|{
try|try
block|{
comment|// setup the server...
name|HttpSolrServer
name|s
init|=
operator|new
name|HttpSolrServer
argument_list|(
name|buildUrl
argument_list|(
name|port
argument_list|)
argument_list|)
decl_stmt|;
name|s
operator|.
name|setConnectionTimeout
argument_list|(
name|DEFAULT_CONNECTION_TIMEOUT
argument_list|)
expr_stmt|;
name|s
operator|.
name|setSoTimeout
argument_list|(
literal|90000
argument_list|)
expr_stmt|;
name|s
operator|.
name|setDefaultMaxConnectionsPerHost
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|s
operator|.
name|setMaxTotalConnections
argument_list|(
literal|100
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|buildUrl
specifier|protected
name|String
name|buildUrl
parameter_list|(
name|int
name|port
parameter_list|)
block|{
return|return
name|buildUrl
argument_list|(
name|port
argument_list|,
name|context
argument_list|)
return|;
block|}
DECL|method|addFields
specifier|protected
name|void
name|addFields
parameter_list|(
name|SolrInputDocument
name|doc
parameter_list|,
name|Object
modifier|...
name|fields
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|doc
operator|.
name|addField
argument_list|(
call|(
name|String
call|)
argument_list|(
name|fields
index|[
name|i
index|]
argument_list|)
argument_list|,
name|fields
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add random fields to the documet before indexing
DECL|method|indexr
specifier|protected
name|void
name|indexr
parameter_list|(
name|Object
modifier|...
name|fields
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|addFields
argument_list|(
name|doc
argument_list|,
name|fields
argument_list|)
expr_stmt|;
name|addFields
argument_list|(
name|doc
argument_list|,
literal|"rnd_b"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addRandFields
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|addRandFields
specifier|protected
name|SolrInputDocument
name|addRandFields
parameter_list|(
name|SolrInputDocument
name|sdoc
parameter_list|)
block|{
name|addFields
argument_list|(
name|sdoc
argument_list|,
name|getRandFields
argument_list|(
name|getFieldNames
argument_list|()
argument_list|,
name|getRandValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sdoc
return|;
block|}
DECL|method|index
specifier|protected
name|void
name|index
parameter_list|(
name|Object
modifier|...
name|fields
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|addFields
argument_list|(
name|doc
argument_list|,
name|fields
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|/**    * Indexes the document in both the control client, and a randomly selected client    */
DECL|method|indexDoc
specifier|protected
name|void
name|indexDoc
parameter_list|(
name|SolrInputDocument
name|doc
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|controlClient
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|int
name|which
init|=
operator|(
name|doc
operator|.
name|getField
argument_list|(
name|id
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|&
literal|0x7fffffff
operator|)
operator|%
name|clients
operator|.
name|size
argument_list|()
decl_stmt|;
name|SolrServer
name|client
init|=
name|clients
operator|.
name|get
argument_list|(
name|which
argument_list|)
decl_stmt|;
name|client
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|/**    * Indexes the document in both the control client and the specified client asserting    * that the respones are equivilent    */
DECL|method|indexDoc
specifier|protected
name|UpdateResponse
name|indexDoc
parameter_list|(
name|SolrServer
name|server
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|SolrInputDocument
modifier|...
name|sdocs
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|UpdateResponse
name|controlRsp
init|=
name|add
argument_list|(
name|controlClient
argument_list|,
name|params
argument_list|,
name|sdocs
argument_list|)
decl_stmt|;
name|UpdateResponse
name|specificRsp
init|=
name|add
argument_list|(
name|server
argument_list|,
name|params
argument_list|,
name|sdocs
argument_list|)
decl_stmt|;
name|compareSolrResponses
argument_list|(
name|specificRsp
argument_list|,
name|controlRsp
argument_list|)
expr_stmt|;
return|return
name|specificRsp
return|;
block|}
DECL|method|add
specifier|protected
name|UpdateResponse
name|add
parameter_list|(
name|SolrServer
name|server
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|SolrInputDocument
modifier|...
name|sdocs
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|UpdateRequest
name|ureq
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|ureq
operator|.
name|setParams
argument_list|(
operator|new
name|ModifiableSolrParams
argument_list|(
name|params
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrInputDocument
name|sdoc
range|:
name|sdocs
control|)
block|{
name|ureq
operator|.
name|add
argument_list|(
name|sdoc
argument_list|)
expr_stmt|;
block|}
return|return
name|ureq
operator|.
name|process
argument_list|(
name|server
argument_list|)
return|;
block|}
DECL|method|del
specifier|protected
name|UpdateResponse
name|del
parameter_list|(
name|SolrServer
name|server
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|Object
modifier|...
name|ids
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|UpdateRequest
name|ureq
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|ureq
operator|.
name|setParams
argument_list|(
operator|new
name|ModifiableSolrParams
argument_list|(
name|params
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|id
range|:
name|ids
control|)
block|{
name|ureq
operator|.
name|deleteById
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ureq
operator|.
name|process
argument_list|(
name|server
argument_list|)
return|;
block|}
DECL|method|delQ
specifier|protected
name|UpdateResponse
name|delQ
parameter_list|(
name|SolrServer
name|server
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|String
modifier|...
name|queries
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|UpdateRequest
name|ureq
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|ureq
operator|.
name|setParams
argument_list|(
operator|new
name|ModifiableSolrParams
argument_list|(
name|params
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|q
range|:
name|queries
control|)
block|{
name|ureq
operator|.
name|deleteByQuery
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
return|return
name|ureq
operator|.
name|process
argument_list|(
name|server
argument_list|)
return|;
block|}
DECL|method|index_specific
specifier|protected
name|void
name|index_specific
parameter_list|(
name|int
name|serverNumber
parameter_list|,
name|Object
modifier|...
name|fields
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|doc
operator|.
name|addField
argument_list|(
call|(
name|String
call|)
argument_list|(
name|fields
index|[
name|i
index|]
argument_list|)
argument_list|,
name|fields
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|controlClient
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|SolrServer
name|client
init|=
name|clients
operator|.
name|get
argument_list|(
name|serverNumber
argument_list|)
decl_stmt|;
name|client
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|del
specifier|protected
name|void
name|del
parameter_list|(
name|String
name|q
parameter_list|)
throws|throws
name|Exception
block|{
name|controlClient
operator|.
name|deleteByQuery
argument_list|(
name|q
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrServer
name|client
range|:
name|clients
control|)
block|{
name|client
operator|.
name|deleteByQuery
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
comment|// serial commit...
DECL|method|commit
specifier|protected
name|void
name|commit
parameter_list|()
throws|throws
name|Exception
block|{
name|controlClient
operator|.
name|commit
argument_list|()
expr_stmt|;
for|for
control|(
name|SolrServer
name|client
range|:
name|clients
control|)
block|{
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|queryServer
specifier|protected
name|QueryResponse
name|queryServer
parameter_list|(
name|ModifiableSolrParams
name|params
parameter_list|)
throws|throws
name|SolrServerException
block|{
comment|// query a random server
name|int
name|which
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|clients
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|SolrServer
name|client
init|=
name|clients
operator|.
name|get
argument_list|(
name|which
argument_list|)
decl_stmt|;
name|QueryResponse
name|rsp
init|=
name|client
operator|.
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
return|return
name|rsp
return|;
block|}
comment|/**    * Sets distributed params.    * Returns the QueryResponse from {@link #queryServer},    */
DECL|method|query
specifier|protected
name|QueryResponse
name|query
parameter_list|(
name|Object
modifier|...
name|q
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|query
argument_list|(
literal|true
argument_list|,
name|q
argument_list|)
return|;
block|}
comment|/**    * Sets distributed params.    * Returns the QueryResponse from {@link #queryServer},    */
DECL|method|query
specifier|protected
name|QueryResponse
name|query
parameter_list|(
name|SolrParams
name|params
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|query
argument_list|(
literal|true
argument_list|,
name|params
argument_list|)
return|;
block|}
comment|/**    * Returns the QueryResponse from {@link #queryServer}      */
DECL|method|query
specifier|protected
name|QueryResponse
name|query
parameter_list|(
name|boolean
name|setDistribParams
parameter_list|,
name|Object
index|[]
name|q
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|q
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|params
operator|.
name|add
argument_list|(
name|q
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|q
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|query
argument_list|(
name|setDistribParams
argument_list|,
name|params
argument_list|)
return|;
block|}
comment|/**    * Returns the QueryResponse from {@link #queryServer}      */
DECL|method|query
specifier|protected
name|QueryResponse
name|query
parameter_list|(
name|boolean
name|setDistribParams
parameter_list|,
name|SolrParams
name|p
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|p
argument_list|)
decl_stmt|;
comment|// TODO: look into why passing true causes fails
name|params
operator|.
name|set
argument_list|(
literal|"distrib"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
specifier|final
name|QueryResponse
name|controlRsp
init|=
name|controlClient
operator|.
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|validateControlData
argument_list|(
name|controlRsp
argument_list|)
expr_stmt|;
name|params
operator|.
name|remove
argument_list|(
literal|"distrib"
argument_list|)
expr_stmt|;
if|if
condition|(
name|setDistribParams
condition|)
name|setDistributedParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|queryServer
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|compareResponses
argument_list|(
name|rsp
argument_list|,
name|controlRsp
argument_list|)
expr_stmt|;
if|if
condition|(
name|stress
operator|>
literal|0
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"starting stress..."
argument_list|)
expr_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|nThreads
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|stress
condition|;
name|j
operator|++
control|)
block|{
name|int
name|which
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|clients
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|SolrServer
name|client
init|=
name|clients
operator|.
name|get
argument_list|(
name|which
argument_list|)
decl_stmt|;
try|try
block|{
name|QueryResponse
name|rsp
init|=
name|client
operator|.
name|query
argument_list|(
operator|new
name|ModifiableSolrParams
argument_list|(
name|params
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|verifyStress
condition|)
block|{
name|compareResponses
argument_list|(
name|rsp
argument_list|,
name|controlRsp
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|rsp
return|;
block|}
DECL|method|queryAndCompare
specifier|public
name|QueryResponse
name|queryAndCompare
parameter_list|(
name|SolrParams
name|params
parameter_list|,
name|SolrServer
modifier|...
name|servers
parameter_list|)
throws|throws
name|SolrServerException
block|{
return|return
name|queryAndCompare
argument_list|(
name|params
argument_list|,
name|Arrays
operator|.
expr|<
name|SolrServer
operator|>
name|asList
argument_list|(
name|servers
argument_list|)
argument_list|)
return|;
block|}
DECL|method|queryAndCompare
specifier|public
name|QueryResponse
name|queryAndCompare
parameter_list|(
name|SolrParams
name|params
parameter_list|,
name|Iterable
argument_list|<
name|SolrServer
argument_list|>
name|servers
parameter_list|)
throws|throws
name|SolrServerException
block|{
name|QueryResponse
name|first
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SolrServer
name|server
range|:
name|servers
control|)
block|{
name|QueryResponse
name|rsp
init|=
name|server
operator|.
name|query
argument_list|(
operator|new
name|ModifiableSolrParams
argument_list|(
name|params
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
name|first
operator|=
name|rsp
expr_stmt|;
block|}
else|else
block|{
name|compareResponses
argument_list|(
name|first
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|first
return|;
block|}
DECL|method|eq
specifier|public
specifier|static
name|boolean
name|eq
parameter_list|(
name|String
name|a
parameter_list|,
name|String
name|b
parameter_list|)
block|{
return|return
name|a
operator|==
name|b
operator|||
operator|(
name|a
operator|!=
literal|null
operator|&&
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
operator|)
return|;
block|}
DECL|method|flags
specifier|public
specifier|static
name|int
name|flags
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|handle
parameter_list|,
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
name|handle
operator|==
literal|null
condition|)
return|return
literal|0
return|;
name|Integer
name|f
init|=
name|handle
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|f
operator|==
literal|null
condition|?
literal|0
else|:
name|f
return|;
block|}
DECL|method|compare
specifier|public
specifier|static
name|String
name|compare
parameter_list|(
name|NamedList
name|a
parameter_list|,
name|NamedList
name|b
parameter_list|,
name|int
name|flags
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|handle
parameter_list|)
block|{
comment|//    System.out.println("resp a:" + a);
comment|//    System.out.println("resp b:" + b);
name|boolean
name|ordered
init|=
operator|(
name|flags
operator|&
name|UNORDERED
operator|)
operator|==
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|ordered
condition|)
block|{
name|Map
name|mapA
init|=
operator|new
name|HashMap
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|prev
init|=
name|mapA
operator|.
name|put
argument_list|(
name|a
operator|.
name|getName
argument_list|(
name|i
argument_list|)
argument_list|,
name|a
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
block|}
name|Map
name|mapB
init|=
operator|new
name|HashMap
argument_list|(
name|b
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|b
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|prev
init|=
name|mapB
operator|.
name|put
argument_list|(
name|b
operator|.
name|getName
argument_list|(
name|i
argument_list|)
argument_list|,
name|b
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
block|}
return|return
name|compare
argument_list|(
name|mapA
argument_list|,
name|mapB
argument_list|,
name|flags
argument_list|,
name|handle
argument_list|)
return|;
block|}
name|int
name|posa
init|=
literal|0
decl_stmt|,
name|posb
init|=
literal|0
decl_stmt|;
name|int
name|aSkipped
init|=
literal|0
decl_stmt|,
name|bSkipped
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|posa
operator|>=
name|a
operator|.
name|size
argument_list|()
operator|&&
name|posb
operator|>=
name|b
operator|.
name|size
argument_list|()
condition|)
block|{
break|break;
block|}
name|String
name|namea
init|=
literal|null
decl_stmt|,
name|nameb
init|=
literal|null
decl_stmt|;
name|Object
name|vala
init|=
literal|null
decl_stmt|,
name|valb
init|=
literal|null
decl_stmt|;
name|int
name|flagsa
init|=
literal|0
decl_stmt|,
name|flagsb
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|posa
operator|<
name|a
operator|.
name|size
argument_list|()
condition|)
block|{
name|namea
operator|=
name|a
operator|.
name|getName
argument_list|(
name|posa
argument_list|)
expr_stmt|;
name|vala
operator|=
name|a
operator|.
name|getVal
argument_list|(
name|posa
argument_list|)
expr_stmt|;
name|posa
operator|++
expr_stmt|;
name|flagsa
operator|=
name|flags
argument_list|(
name|handle
argument_list|,
name|namea
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|flagsa
operator|&
name|SKIP
operator|)
operator|!=
literal|0
condition|)
block|{
name|namea
operator|=
literal|null
expr_stmt|;
name|vala
operator|=
literal|null
expr_stmt|;
name|aSkipped
operator|++
expr_stmt|;
continue|continue;
block|}
break|break;
block|}
while|while
condition|(
name|posb
operator|<
name|b
operator|.
name|size
argument_list|()
condition|)
block|{
name|nameb
operator|=
name|b
operator|.
name|getName
argument_list|(
name|posb
argument_list|)
expr_stmt|;
name|valb
operator|=
name|b
operator|.
name|getVal
argument_list|(
name|posb
argument_list|)
expr_stmt|;
name|posb
operator|++
expr_stmt|;
name|flagsb
operator|=
name|flags
argument_list|(
name|handle
argument_list|,
name|nameb
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|flagsb
operator|&
name|SKIP
operator|)
operator|!=
literal|0
condition|)
block|{
name|nameb
operator|=
literal|null
expr_stmt|;
name|valb
operator|=
literal|null
expr_stmt|;
name|bSkipped
operator|++
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|eq
argument_list|(
name|namea
argument_list|,
name|nameb
argument_list|)
condition|)
block|{
break|break;
block|}
return|return
literal|"."
operator|+
name|namea
operator|+
literal|"!="
operator|+
name|nameb
operator|+
literal|" (unordered or missing)"
return|;
comment|// if unordered, continue until we find the right field.
block|}
comment|// ok, namea and nameb should be equal here already.
if|if
condition|(
operator|(
name|flagsa
operator|&
name|SKIPVAL
operator|)
operator|!=
literal|0
condition|)
continue|continue;
comment|// keys matching is enough
name|String
name|cmp
init|=
name|compare
argument_list|(
name|vala
argument_list|,
name|valb
argument_list|,
name|flagsa
argument_list|,
name|handle
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|null
condition|)
return|return
literal|"."
operator|+
name|namea
operator|+
name|cmp
return|;
block|}
if|if
condition|(
name|a
operator|.
name|size
argument_list|()
operator|-
name|aSkipped
operator|!=
name|b
operator|.
name|size
argument_list|()
operator|-
name|bSkipped
condition|)
block|{
return|return
literal|".size()=="
operator|+
name|a
operator|.
name|size
argument_list|()
operator|+
literal|","
operator|+
name|b
operator|.
name|size
argument_list|()
operator|+
literal|" skipped="
operator|+
name|aSkipped
operator|+
literal|","
operator|+
name|bSkipped
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|compare1
specifier|public
specifier|static
name|String
name|compare1
parameter_list|(
name|Map
name|a
parameter_list|,
name|Map
name|b
parameter_list|,
name|int
name|flags
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|handle
parameter_list|)
block|{
name|String
name|cmp
decl_stmt|;
for|for
control|(
name|Object
name|keya
range|:
name|a
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Object
name|vala
init|=
name|a
operator|.
name|get
argument_list|(
name|keya
argument_list|)
decl_stmt|;
name|int
name|flagsa
init|=
name|flags
argument_list|(
name|handle
argument_list|,
name|keya
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|flagsa
operator|&
name|SKIP
operator|)
operator|!=
literal|0
condition|)
continue|continue;
if|if
condition|(
operator|!
name|b
operator|.
name|containsKey
argument_list|(
name|keya
argument_list|)
condition|)
block|{
return|return
literal|"["
operator|+
name|keya
operator|+
literal|"]==null"
return|;
block|}
if|if
condition|(
operator|(
name|flagsa
operator|&
name|SKIPVAL
operator|)
operator|!=
literal|0
condition|)
continue|continue;
name|Object
name|valb
init|=
name|b
operator|.
name|get
argument_list|(
name|keya
argument_list|)
decl_stmt|;
name|cmp
operator|=
name|compare
argument_list|(
name|vala
argument_list|,
name|valb
argument_list|,
name|flagsa
argument_list|,
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|null
condition|)
return|return
literal|"["
operator|+
name|keya
operator|+
literal|"]"
operator|+
name|cmp
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|compare
specifier|public
specifier|static
name|String
name|compare
parameter_list|(
name|Map
name|a
parameter_list|,
name|Map
name|b
parameter_list|,
name|int
name|flags
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|handle
parameter_list|)
block|{
name|String
name|cmp
decl_stmt|;
name|cmp
operator|=
name|compare1
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|flags
argument_list|,
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|null
condition|)
return|return
name|cmp
return|;
return|return
name|compare1
argument_list|(
name|b
argument_list|,
name|a
argument_list|,
name|flags
argument_list|,
name|handle
argument_list|)
return|;
block|}
DECL|method|compare
specifier|public
specifier|static
name|String
name|compare
parameter_list|(
name|SolrDocument
name|a
parameter_list|,
name|SolrDocument
name|b
parameter_list|,
name|int
name|flags
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|handle
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|a
operator|.
name|getFieldValuesMap
argument_list|()
argument_list|,
name|b
operator|.
name|getFieldValuesMap
argument_list|()
argument_list|,
name|flags
argument_list|,
name|handle
argument_list|)
return|;
block|}
DECL|method|compare
specifier|public
specifier|static
name|String
name|compare
parameter_list|(
name|SolrDocumentList
name|a
parameter_list|,
name|SolrDocumentList
name|b
parameter_list|,
name|int
name|flags
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|handle
parameter_list|)
block|{
name|boolean
name|ordered
init|=
operator|(
name|flags
operator|&
name|UNORDERED
operator|)
operator|==
literal|0
decl_stmt|;
name|String
name|cmp
decl_stmt|;
name|int
name|f
init|=
name|flags
argument_list|(
name|handle
argument_list|,
literal|"maxScore"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|f
operator|&
name|SKIPVAL
operator|)
operator|==
literal|0
condition|)
block|{
name|cmp
operator|=
name|compare
argument_list|(
name|a
operator|.
name|getMaxScore
argument_list|()
argument_list|,
name|b
operator|.
name|getMaxScore
argument_list|()
argument_list|,
literal|0
argument_list|,
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|null
condition|)
return|return
literal|".maxScore"
operator|+
name|cmp
return|;
block|}
else|else
block|{
if|if
condition|(
name|b
operator|.
name|getMaxScore
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|a
operator|.
name|getMaxScore
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|".maxScore missing"
return|;
block|}
block|}
block|}
name|cmp
operator|=
name|compare
argument_list|(
name|a
operator|.
name|getNumFound
argument_list|()
argument_list|,
name|b
operator|.
name|getNumFound
argument_list|()
argument_list|,
literal|0
argument_list|,
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|null
condition|)
return|return
literal|".numFound"
operator|+
name|cmp
return|;
name|cmp
operator|=
name|compare
argument_list|(
name|a
operator|.
name|getStart
argument_list|()
argument_list|,
name|b
operator|.
name|getStart
argument_list|()
argument_list|,
literal|0
argument_list|,
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|null
condition|)
return|return
literal|".start"
operator|+
name|cmp
return|;
name|cmp
operator|=
name|compare
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|,
name|b
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|,
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|null
condition|)
return|return
literal|".size()"
operator|+
name|cmp
return|;
comment|// only for completely ordered results (ties might be in a different order)
if|if
condition|(
name|ordered
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|cmp
operator|=
name|compare
argument_list|(
name|a
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|b
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
literal|0
argument_list|,
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|null
condition|)
return|return
literal|"["
operator|+
name|i
operator|+
literal|"]"
operator|+
name|cmp
return|;
block|}
return|return
literal|null
return|;
block|}
comment|// unordered case
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SolrDocument
name|doc
init|=
name|a
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
name|doc
operator|.
name|getFirstValue
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|SolrDocument
name|docb
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
comment|// no id field to correlate... must compare ordered
name|docb
operator|=
name|b
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|b
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|docb
operator|=
name|b
operator|.
name|get
argument_list|(
name|j
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|docb
operator|.
name|getFirstValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
condition|)
break|break;
block|}
block|}
comment|// if (docb == null) return "[id="+key+"]";
name|cmp
operator|=
name|compare
argument_list|(
name|doc
argument_list|,
name|docb
argument_list|,
literal|0
argument_list|,
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|null
condition|)
return|return
literal|"[id="
operator|+
name|key
operator|+
literal|"]"
operator|+
name|cmp
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|compare
specifier|public
specifier|static
name|String
name|compare
parameter_list|(
name|Object
index|[]
name|a
parameter_list|,
name|Object
index|[]
name|b
parameter_list|,
name|int
name|flags
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|handle
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|length
operator|!=
name|b
operator|.
name|length
condition|)
block|{
return|return
literal|".length:"
operator|+
name|a
operator|.
name|length
operator|+
literal|"!="
operator|+
name|b
operator|.
name|length
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|cmp
init|=
name|compare
argument_list|(
name|a
index|[
name|i
index|]
argument_list|,
name|b
index|[
name|i
index|]
argument_list|,
name|flags
argument_list|,
name|handle
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|null
condition|)
return|return
literal|"["
operator|+
name|i
operator|+
literal|"]"
operator|+
name|cmp
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|compare
specifier|public
specifier|static
name|String
name|compare
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|,
name|int
name|flags
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|handle
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
name|b
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|a
operator|==
literal|null
operator|||
name|b
operator|==
literal|null
condition|)
return|return
literal|":"
operator|+
name|a
operator|+
literal|"!="
operator|+
name|b
return|;
if|if
condition|(
name|a
operator|instanceof
name|NamedList
operator|&&
name|b
operator|instanceof
name|NamedList
condition|)
block|{
return|return
name|compare
argument_list|(
operator|(
name|NamedList
operator|)
name|a
argument_list|,
operator|(
name|NamedList
operator|)
name|b
argument_list|,
name|flags
argument_list|,
name|handle
argument_list|)
return|;
block|}
if|if
condition|(
name|a
operator|instanceof
name|SolrDocumentList
operator|&&
name|b
operator|instanceof
name|SolrDocumentList
condition|)
block|{
return|return
name|compare
argument_list|(
operator|(
name|SolrDocumentList
operator|)
name|a
argument_list|,
operator|(
name|SolrDocumentList
operator|)
name|b
argument_list|,
name|flags
argument_list|,
name|handle
argument_list|)
return|;
block|}
if|if
condition|(
name|a
operator|instanceof
name|SolrDocument
operator|&&
name|b
operator|instanceof
name|SolrDocument
condition|)
block|{
return|return
name|compare
argument_list|(
operator|(
name|SolrDocument
operator|)
name|a
argument_list|,
operator|(
name|SolrDocument
operator|)
name|b
argument_list|,
name|flags
argument_list|,
name|handle
argument_list|)
return|;
block|}
if|if
condition|(
name|a
operator|instanceof
name|Map
operator|&&
name|b
operator|instanceof
name|Map
condition|)
block|{
return|return
name|compare
argument_list|(
operator|(
name|Map
operator|)
name|a
argument_list|,
operator|(
name|Map
operator|)
name|b
argument_list|,
name|flags
argument_list|,
name|handle
argument_list|)
return|;
block|}
if|if
condition|(
name|a
operator|instanceof
name|Object
index|[]
operator|&&
name|b
operator|instanceof
name|Object
index|[]
condition|)
block|{
return|return
name|compare
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|a
argument_list|,
operator|(
name|Object
index|[]
operator|)
name|b
argument_list|,
name|flags
argument_list|,
name|handle
argument_list|)
return|;
block|}
if|if
condition|(
name|a
operator|instanceof
name|byte
index|[]
operator|&&
name|b
operator|instanceof
name|byte
index|[]
condition|)
block|{
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|a
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|b
argument_list|)
condition|)
block|{
return|return
literal|":"
operator|+
name|a
operator|+
literal|"!="
operator|+
name|b
return|;
block|}
return|return
literal|null
return|;
block|}
if|if
condition|(
name|a
operator|instanceof
name|List
operator|&&
name|b
operator|instanceof
name|List
condition|)
block|{
return|return
name|compare
argument_list|(
operator|(
operator|(
name|List
operator|)
name|a
operator|)
operator|.
name|toArray
argument_list|()
argument_list|,
operator|(
operator|(
name|List
operator|)
name|b
operator|)
operator|.
name|toArray
argument_list|()
argument_list|,
name|flags
argument_list|,
name|handle
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
operator|)
condition|)
block|{
return|return
literal|":"
operator|+
name|a
operator|+
literal|"!="
operator|+
name|b
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|compareSolrResponses
specifier|protected
name|void
name|compareSolrResponses
parameter_list|(
name|SolrResponse
name|a
parameter_list|,
name|SolrResponse
name|b
parameter_list|)
block|{
comment|// SOLR-3345: Checking QTime value can be skipped as there is no guarantee that the numbers will match.
name|handle
operator|.
name|put
argument_list|(
literal|"QTime"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|String
name|cmp
init|=
name|compare
argument_list|(
name|a
operator|.
name|getResponse
argument_list|()
argument_list|,
name|b
operator|.
name|getResponse
argument_list|()
argument_list|,
name|flags
argument_list|,
name|handle
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Mismatched responses:\n"
operator|+
name|a
operator|+
literal|"\n"
operator|+
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|cmp
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|compareResponses
specifier|protected
name|void
name|compareResponses
parameter_list|(
name|QueryResponse
name|a
parameter_list|,
name|QueryResponse
name|b
parameter_list|)
block|{
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"remove.version.field"
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// we don't care if one has a version and the other doesnt -
comment|// control vs distrib
comment|// TODO: this should prob be done by adding an ignore on _version_ rather than mutating the responses?
if|if
condition|(
name|a
operator|.
name|getResults
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SolrDocument
name|doc
range|:
name|a
operator|.
name|getResults
argument_list|()
control|)
block|{
name|doc
operator|.
name|removeFields
argument_list|(
literal|"_version_"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|b
operator|.
name|getResults
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SolrDocument
name|doc
range|:
name|b
operator|.
name|getResults
argument_list|()
control|)
block|{
name|doc
operator|.
name|removeFields
argument_list|(
literal|"_version_"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|compareSolrResponses
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDistribSearch
specifier|public
name|void
name|testDistribSearch
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|fixShardCount
condition|)
block|{
name|createServers
argument_list|(
name|shardCount
argument_list|)
expr_stmt|;
name|RandVal
operator|.
name|uniqueValues
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
comment|//reset random values
name|doTest
argument_list|()
expr_stmt|;
name|destroyServers
argument_list|()
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|nServers
init|=
literal|1
init|;
name|nServers
operator|<
name|shardCount
condition|;
name|nServers
operator|++
control|)
block|{
name|createServers
argument_list|(
name|nServers
argument_list|)
expr_stmt|;
name|RandVal
operator|.
name|uniqueValues
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
comment|//reset random values
name|doTest
argument_list|()
expr_stmt|;
name|destroyServers
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|getRandFields
specifier|public
specifier|static
name|Object
index|[]
name|getRandFields
parameter_list|(
name|String
index|[]
name|fields
parameter_list|,
name|RandVal
index|[]
name|randVals
parameter_list|)
block|{
name|Object
index|[]
name|o
init|=
operator|new
name|Object
index|[
name|fields
operator|.
name|length
operator|*
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|o
index|[
name|i
operator|*
literal|2
index|]
operator|=
name|fields
index|[
name|i
index|]
expr_stmt|;
name|o
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
operator|=
name|randVals
index|[
name|i
index|]
operator|.
name|uval
argument_list|()
expr_stmt|;
block|}
return|return
name|o
return|;
block|}
comment|/**    * Implementations can pre-test the control data for basic correctness before using it    * as a check for the shard data.  This is useful, for instance, if a test bug is introduced    * causing a spelling index not to get built:  both control& shard data would have no results    * but because they match the test would pass.  This method gives us a chance to ensure something    * exists in the control data.    */
DECL|method|validateControlData
specifier|public
name|void
name|validateControlData
parameter_list|(
name|QueryResponse
name|control
parameter_list|)
throws|throws
name|Exception
block|{
comment|/* no-op */
block|}
DECL|class|RandVal
specifier|public
specifier|static
specifier|abstract
class|class
name|RandVal
block|{
DECL|field|uniqueValues
specifier|public
specifier|static
name|Set
name|uniqueValues
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
DECL|method|val
specifier|public
specifier|abstract
name|Object
name|val
parameter_list|()
function_decl|;
DECL|method|uval
specifier|public
name|Object
name|uval
parameter_list|()
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|Object
name|v
init|=
name|val
argument_list|()
decl_stmt|;
if|if
condition|(
name|uniqueValues
operator|.
name|add
argument_list|(
name|v
argument_list|)
condition|)
return|return
name|v
return|;
block|}
block|}
block|}
DECL|class|RandDate
specifier|public
specifier|static
class|class
name|RandDate
extends|extends
name|RandVal
block|{
DECL|field|df
specifier|public
specifier|static
name|TrieDateField
name|df
init|=
operator|new
name|TrieDateField
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|val
specifier|public
name|Object
name|val
parameter_list|()
block|{
name|long
name|v
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|Date
name|d
init|=
operator|new
name|Date
argument_list|(
name|v
argument_list|)
decl_stmt|;
return|return
name|df
operator|.
name|toExternal
argument_list|(
name|d
argument_list|)
return|;
block|}
block|}
DECL|method|getSolrXml
specifier|protected
name|String
name|getSolrXml
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|setupJettySolrHome
specifier|protected
name|void
name|setupJettySolrHome
parameter_list|(
name|File
name|jettyHome
parameter_list|)
throws|throws
name|IOException
block|{
name|FileUtils
operator|.
name|copyDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|getSolrHome
argument_list|()
argument_list|)
argument_list|,
name|jettyHome
argument_list|)
expr_stmt|;
name|String
name|solrxml
init|=
name|getSolrXml
argument_list|()
decl_stmt|;
if|if
condition|(
name|solrxml
operator|!=
literal|null
condition|)
block|{
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|getSolrHome
argument_list|()
argument_list|,
name|solrxml
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|jettyHome
argument_list|,
literal|"solr.xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
