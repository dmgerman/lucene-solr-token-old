begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr
package|package
name|org
operator|.
name|apache
operator|.
name|solr
package|;
end_package
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettyConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|NoOpResponseParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|UpdateResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreDescriptor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|DirectSolrConnection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|JSONUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|ObjectBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_class
annotation|@
name|SolrTestCaseJ4
operator|.
name|SuppressSSL
comment|//@LuceneTestCase.SuppressCodecs({"Lucene3x","Lucene40","Lucene41","Lucene42","Lucene45","Appending","Asserting"})
DECL|class|SolrTestCaseHS
specifier|public
class|class
name|SolrTestCaseHS
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|SafeVarargs
DECL|method|set
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Set
argument_list|<
name|T
argument_list|>
name|set
parameter_list|(
name|T
modifier|...
name|a
parameter_list|)
block|{
name|LinkedHashSet
argument_list|<
name|T
argument_list|>
name|s
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|T
name|t
range|:
name|a
control|)
block|{
name|s
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
DECL|method|rand
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|rand
parameter_list|(
name|T
modifier|...
name|vals
parameter_list|)
block|{
return|return
name|vals
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|vals
operator|.
name|length
argument_list|)
index|]
return|;
block|}
DECL|method|params
specifier|public
specifier|static
name|ModifiableSolrParams
name|params
parameter_list|(
name|SolrParams
name|params
parameter_list|,
name|String
modifier|...
name|moreParams
parameter_list|)
block|{
name|ModifiableSolrParams
name|msp
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|params
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|moreParams
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|msp
operator|.
name|add
argument_list|(
name|moreParams
index|[
name|i
index|]
argument_list|,
name|moreParams
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|msp
return|;
block|}
DECL|method|toObject
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|toObject
parameter_list|(
name|Doc
name|doc
parameter_list|,
name|IndexSchema
name|schema
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Fld
name|fld
range|:
name|doc
operator|.
name|fields
control|)
block|{
if|if
condition|(
name|fieldNames
operator|!=
literal|null
operator|&&
operator|!
name|fieldNames
operator|.
name|contains
argument_list|(
name|fld
operator|.
name|ftype
operator|.
name|fname
argument_list|)
condition|)
continue|continue;
name|SchemaField
name|sf
init|=
name|schema
operator|.
name|getField
argument_list|(
name|fld
operator|.
name|ftype
operator|.
name|fname
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sf
operator|.
name|multiValued
argument_list|()
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|fld
operator|.
name|ftype
operator|.
name|fname
argument_list|,
name|fld
operator|.
name|vals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|put
argument_list|(
name|fld
operator|.
name|ftype
operator|.
name|fname
argument_list|,
name|fld
operator|.
name|vals
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|createDocObjects
specifier|public
specifier|static
name|Object
name|createDocObjects
parameter_list|(
name|Map
argument_list|<
name|Comparable
argument_list|,
name|Doc
argument_list|>
name|fullModel
parameter_list|,
name|Comparator
name|sort
parameter_list|,
name|int
name|rows
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|)
block|{
name|List
argument_list|<
name|Doc
argument_list|>
name|docList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|fullModel
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|docList
argument_list|,
name|sort
argument_list|)
expr_stmt|;
name|List
name|sortedDocs
init|=
operator|new
name|ArrayList
argument_list|(
name|rows
argument_list|)
decl_stmt|;
for|for
control|(
name|Doc
name|doc
range|:
name|docList
control|)
block|{
if|if
condition|(
name|sortedDocs
operator|.
name|size
argument_list|()
operator|>=
name|rows
condition|)
break|break;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|odoc
init|=
name|toObject
argument_list|(
name|doc
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
argument_list|,
name|fieldNames
argument_list|)
decl_stmt|;
name|sortedDocs
operator|.
name|add
argument_list|(
name|toObject
argument_list|(
name|doc
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
argument_list|,
name|fieldNames
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sortedDocs
return|;
block|}
DECL|method|compare
specifier|public
specifier|static
name|void
name|compare
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|String
name|path
parameter_list|,
name|Object
name|model
parameter_list|,
name|Map
argument_list|<
name|Comparable
argument_list|,
name|Doc
argument_list|>
name|fullModel
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|strResponse
init|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|Object
name|realResponse
init|=
name|ObjectBuilder
operator|.
name|fromJSON
argument_list|(
name|strResponse
argument_list|)
decl_stmt|;
name|String
name|err
init|=
name|JSONTestUtil
operator|.
name|matchObj
argument_list|(
name|path
argument_list|,
name|realResponse
argument_list|,
name|model
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"RESPONSE MISMATCH: "
operator|+
name|err
operator|+
literal|"\n\trequest="
operator|+
name|req
operator|+
literal|"\n\tresult="
operator|+
name|strResponse
operator|+
literal|"\n\texpected="
operator|+
name|JSONUtil
operator|.
name|toJSON
argument_list|(
name|model
argument_list|)
operator|+
literal|"\n\tmodel="
operator|+
name|fullModel
argument_list|)
expr_stmt|;
comment|// re-execute the request... good for putting a breakpoint here for debugging
name|String
name|rsp
init|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|fail
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Pass "null" for the client to query the local server */
DECL|method|assertJQ
specifier|public
specifier|static
name|void
name|assertJQ
parameter_list|(
name|SolrClient
name|client
parameter_list|,
name|SolrParams
name|args
parameter_list|,
name|String
modifier|...
name|tests
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|resp
decl_stmt|;
name|resp
operator|=
name|getJSON
argument_list|(
name|client
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|matchJSON
argument_list|(
name|resp
argument_list|,
name|tests
argument_list|)
expr_stmt|;
block|}
DECL|method|matchJSON
specifier|public
specifier|static
name|void
name|matchJSON
parameter_list|(
name|String
name|response
parameter_list|,
name|String
modifier|...
name|tests
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|test
range|:
name|tests
control|)
block|{
if|if
condition|(
name|test
operator|==
literal|null
operator|||
name|test
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
try|try
block|{
name|failed
operator|=
literal|true
expr_stmt|;
name|String
name|err
init|=
name|JSONTestUtil
operator|.
name|match
argument_list|(
name|response
argument_list|,
name|test
argument_list|,
name|JSONTestUtil
operator|.
name|DEFAULT_DELTA
argument_list|)
decl_stmt|;
name|failed
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"query failed JSON validation. error="
operator|+
name|err
operator|+
literal|"\n expected ="
operator|+
name|test
operator|+
literal|"\n response = "
operator|+
name|response
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|err
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|failed
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"JSON query validation threw an exception."
operator|+
literal|"\n expected ="
operator|+
name|test
operator|+
literal|"\n response = "
operator|+
name|response
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/***   public static void clearNCache() {     SolrQueryRequest req = req();     req.getSearcher().getnCache().clear();  // OFF-HEAP     req.close();   }***/
DECL|method|clearQueryCache
specifier|public
specifier|static
name|void
name|clearQueryCache
parameter_list|()
block|{
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|()
decl_stmt|;
name|req
operator|.
name|getSearcher
argument_list|()
expr_stmt|;
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getQueryResponse
specifier|public
specifier|static
name|String
name|getQueryResponse
parameter_list|(
name|SolrClient
name|client
parameter_list|,
name|String
name|wt
parameter_list|,
name|SolrParams
name|params
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|client
operator|==
literal|null
condition|)
block|{
return|return
name|getQueryResponse
argument_list|(
name|wt
argument_list|,
name|params
argument_list|)
return|;
block|}
name|ModifiableSolrParams
name|p
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|p
operator|.
name|set
argument_list|(
literal|"wt"
argument_list|,
name|wt
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|p
operator|.
name|get
argument_list|(
literal|"qt"
argument_list|)
decl_stmt|;
name|p
operator|.
name|remove
argument_list|(
literal|"qt"
argument_list|)
expr_stmt|;
name|p
operator|.
name|set
argument_list|(
literal|"indent"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|QueryRequest
name|query
init|=
operator|new
name|QueryRequest
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|setPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|setResponseParser
argument_list|(
operator|new
name|NoOpResponseParser
argument_list|(
name|wt
argument_list|)
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|rsp
init|=
name|client
operator|.
name|request
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|String
name|raw
init|=
operator|(
name|String
operator|)
name|rsp
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
decl_stmt|;
return|return
name|raw
return|;
block|}
DECL|method|getQueryResponse
specifier|public
specifier|static
name|String
name|getQueryResponse
parameter_list|(
name|String
name|wt
parameter_list|,
name|SolrParams
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|ModifiableSolrParams
name|p
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|p
operator|.
name|set
argument_list|(
literal|"wt"
argument_list|,
name|wt
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|p
operator|.
name|get
argument_list|(
literal|"qt"
argument_list|)
decl_stmt|;
name|p
operator|.
name|remove
argument_list|(
literal|"qt"
argument_list|)
expr_stmt|;
name|p
operator|.
name|set
argument_list|(
literal|"indent"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|DirectSolrConnection
name|connection
init|=
operator|new
name|DirectSolrConnection
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|raw
init|=
name|connection
operator|.
name|request
argument_list|(
name|path
argument_list|,
name|p
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|raw
return|;
block|}
DECL|method|getJSON
specifier|public
specifier|static
name|String
name|getJSON
parameter_list|(
name|SolrClient
name|client
parameter_list|,
name|SolrParams
name|params
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getQueryResponse
argument_list|(
name|client
argument_list|,
literal|"json"
argument_list|,
name|params
argument_list|)
return|;
block|}
comment|/** Adds a document using the specific client, or to the local test core if null.    * Returns the version.  TODO: work in progress... version not always returned.  */
DECL|method|add
specifier|public
specifier|static
name|Long
name|add
parameter_list|(
name|SolrClient
name|client
parameter_list|,
name|SolrInputDocument
name|sdoc
parameter_list|,
name|ModifiableSolrParams
name|params
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|client
operator|==
literal|null
condition|)
block|{
name|Long
name|version
init|=
name|addAndGetVersion
argument_list|(
name|sdoc
argument_list|,
name|params
argument_list|)
decl_stmt|;
return|return
name|version
return|;
block|}
else|else
block|{
name|UpdateRequest
name|updateRequest
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|updateRequest
operator|.
name|setParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
name|updateRequest
operator|.
name|add
argument_list|(
name|sdoc
argument_list|)
expr_stmt|;
name|UpdateResponse
name|rsp
init|=
name|updateRequest
operator|.
name|process
argument_list|(
name|client
argument_list|)
decl_stmt|;
comment|// TODO - return version
return|return
literal|null
return|;
block|}
block|}
DECL|class|Client
specifier|public
specifier|static
class|class
name|Client
block|{
DECL|field|provider
name|ClientProvider
name|provider
decl_stmt|;
DECL|field|queryDefaults
name|ModifiableSolrParams
name|queryDefaults
decl_stmt|;
DECL|field|tester
specifier|public
name|Tester
name|tester
init|=
operator|new
name|Tester
argument_list|()
decl_stmt|;
DECL|class|Tester
specifier|public
specifier|static
class|class
name|Tester
block|{
DECL|method|assertJQ
specifier|public
name|void
name|assertJQ
parameter_list|(
name|SolrClient
name|client
parameter_list|,
name|SolrParams
name|args
parameter_list|,
name|String
modifier|...
name|tests
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrTestCaseHS
operator|.
name|assertJQ
argument_list|(
name|client
argument_list|,
name|args
argument_list|,
name|tests
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|localClient
specifier|public
specifier|static
name|Client
name|localClient
init|=
operator|new
name|Client
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|method|localClient
specifier|public
specifier|static
name|Client
name|localClient
parameter_list|()
block|{
return|return
operator|new
name|Client
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|)
return|;
block|}
DECL|method|Client
specifier|public
name|Client
parameter_list|(
name|List
argument_list|<
name|SolrClient
argument_list|>
name|clients
parameter_list|,
name|int
name|seed
parameter_list|)
block|{
if|if
condition|(
name|clients
operator|!=
literal|null
condition|)
block|{
name|provider
operator|=
operator|new
name|ClientProvider
argument_list|(
name|clients
argument_list|,
name|seed
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|hash
specifier|public
specifier|static
name|int
name|hash
parameter_list|(
name|int
name|x
parameter_list|)
block|{
comment|// from Thomas Mueller
name|x
operator|=
operator|(
operator|(
name|x
operator|>>>
literal|16
operator|)
operator|^
name|x
operator|)
operator|*
literal|0x45d9f3b
expr_stmt|;
name|x
operator|=
operator|(
operator|(
name|x
operator|>>>
literal|16
operator|)
operator|^
name|x
operator|)
operator|*
literal|0x45d9f3b
expr_stmt|;
name|x
operator|=
operator|(
operator|(
name|x
operator|>>>
literal|16
operator|)
operator|^
name|x
operator|)
expr_stmt|;
return|return
name|x
return|;
block|}
DECL|method|queryDefaults
specifier|public
name|ModifiableSolrParams
name|queryDefaults
parameter_list|()
block|{
if|if
condition|(
name|queryDefaults
operator|==
literal|null
condition|)
block|{
name|queryDefaults
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
block|}
return|return
name|queryDefaults
return|;
block|}
DECL|method|local
specifier|public
name|boolean
name|local
parameter_list|()
block|{
return|return
name|provider
operator|==
literal|null
return|;
block|}
DECL|method|testJQ
specifier|public
name|void
name|testJQ
parameter_list|(
name|SolrParams
name|args
parameter_list|,
name|String
modifier|...
name|tests
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|queryDefaults
operator|!=
literal|null
condition|)
block|{
name|ModifiableSolrParams
name|newParams
init|=
name|params
argument_list|(
name|queryDefaults
argument_list|)
decl_stmt|;
name|newParams
operator|.
name|add
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|args
operator|=
name|newParams
expr_stmt|;
block|}
name|SolrClient
name|client
init|=
name|provider
operator|==
literal|null
condition|?
literal|null
else|:
name|provider
operator|.
name|client
argument_list|(
literal|null
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|tester
operator|.
name|assertJQ
argument_list|(
name|client
argument_list|,
name|args
argument_list|,
name|tests
argument_list|)
expr_stmt|;
block|}
DECL|method|add
specifier|public
name|Long
name|add
parameter_list|(
name|SolrInputDocument
name|sdoc
parameter_list|,
name|ModifiableSolrParams
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrClient
name|client
init|=
name|provider
operator|==
literal|null
condition|?
literal|null
else|:
name|provider
operator|.
name|client
argument_list|(
name|sdoc
argument_list|,
name|params
argument_list|)
decl_stmt|;
return|return
name|SolrTestCaseHS
operator|.
name|add
argument_list|(
name|client
argument_list|,
name|sdoc
argument_list|,
name|params
argument_list|)
return|;
block|}
DECL|method|commit
specifier|public
name|void
name|commit
parameter_list|()
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
if|if
condition|(
name|local
argument_list|()
condition|)
block|{
name|assertU
argument_list|(
name|SolrTestCaseJ4
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|SolrClient
name|client
range|:
name|provider
operator|.
name|all
argument_list|()
control|)
block|{
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|deleteByQuery
specifier|public
name|void
name|deleteByQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|ModifiableSolrParams
name|params
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
if|if
condition|(
name|local
argument_list|()
condition|)
block|{
name|assertU
argument_list|(
name|delQ
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
comment|// todo - handle extra params
return|return;
block|}
for|for
control|(
name|SolrClient
name|client
range|:
name|provider
operator|.
name|all
argument_list|()
control|)
block|{
name|client
operator|.
name|deleteByQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
comment|// todo - handle extra params
block|}
block|}
block|}
DECL|class|ClientProvider
specifier|public
specifier|static
class|class
name|ClientProvider
block|{
DECL|field|idField
specifier|public
specifier|static
name|String
name|idField
init|=
literal|"id"
decl_stmt|;
DECL|field|clients
name|List
argument_list|<
name|SolrClient
argument_list|>
name|clients
decl_stmt|;
DECL|field|r
name|Random
name|r
decl_stmt|;
DECL|field|hashSeed
name|int
name|hashSeed
decl_stmt|;
comment|// thisIsIgnored needed because we need a diff signature
DECL|method|ClientProvider
specifier|public
name|ClientProvider
parameter_list|(
name|List
argument_list|<
name|SolrClient
argument_list|>
name|clients
parameter_list|,
name|int
name|seed
parameter_list|)
block|{
name|this
operator|.
name|hashSeed
operator|=
name|Client
operator|.
name|hash
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|this
operator|.
name|clients
operator|=
name|clients
expr_stmt|;
name|r
operator|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
expr_stmt|;
block|}
DECL|method|client
specifier|public
name|SolrClient
name|client
parameter_list|(
name|SolrInputDocument
name|sdoc
parameter_list|,
name|SolrParams
name|params
parameter_list|)
block|{
name|String
name|idStr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sdoc
operator|!=
literal|null
condition|)
block|{
name|idStr
operator|=
name|sdoc
operator|.
name|getFieldValue
argument_list|(
name|idField
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|idStr
operator|=
name|params
operator|.
name|get
argument_list|(
name|idField
argument_list|)
expr_stmt|;
block|}
name|int
name|hash
decl_stmt|;
if|if
condition|(
name|idStr
operator|!=
literal|null
condition|)
block|{
comment|// make the client chosen the same for a duplicate ID
name|hash
operator|=
name|idStr
operator|.
name|hashCode
argument_list|()
operator|^
name|hashSeed
expr_stmt|;
block|}
else|else
block|{
name|hash
operator|=
name|r
operator|.
name|nextInt
argument_list|()
expr_stmt|;
block|}
return|return
name|clients
operator|.
name|get
argument_list|(
operator|(
name|hash
operator|&
name|Integer
operator|.
name|MAX_VALUE
operator|)
operator|%
name|clients
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
DECL|method|all
specifier|public
name|List
argument_list|<
name|SolrClient
argument_list|>
name|all
parameter_list|()
block|{
return|return
name|clients
return|;
block|}
block|}
comment|//
comment|// Helper to run an internal Jetty instance.
comment|// Example:
comment|//  SolrInstance s1 = new SolrInstance(createTempDir("s1"), "solrconfig-tlog.xml", "schema_latest.xml");
comment|//  s1.start();
comment|//  SolrClient c1 = s1.getSolrJ();
comment|//  assertJQ(c1, params("q", "*:*"), "/response/numFound==3");
comment|//  String json = getJSON(c1, params("q","id:1"));
comment|//  s1.stop();
comment|//
comment|// To manage multiple servers, see SolrInstances
comment|//
DECL|class|SolrInstance
specifier|public
specifier|static
class|class
name|SolrInstance
block|{
DECL|field|log
specifier|private
specifier|static
name|Logger
name|log
init|=
name|SolrTestCaseHS
operator|.
name|log
decl_stmt|;
DECL|field|collection
specifier|private
name|String
name|collection
init|=
literal|"collection1"
decl_stmt|;
DECL|field|port
specifier|private
name|int
name|port
init|=
literal|0
decl_stmt|;
DECL|field|solrconfigFile
specifier|private
name|String
name|solrconfigFile
decl_stmt|;
DECL|field|schemaFile
specifier|private
name|String
name|schemaFile
decl_stmt|;
DECL|field|baseDir
specifier|private
name|File
name|baseDir
decl_stmt|;
DECL|field|jetty
specifier|private
name|JettySolrRunner
name|jetty
decl_stmt|;
DECL|field|solrj
specifier|private
name|SolrClient
name|solrj
decl_stmt|;
DECL|field|homeCreated
specifier|private
name|boolean
name|homeCreated
init|=
literal|false
decl_stmt|;
DECL|method|SolrInstance
specifier|public
name|SolrInstance
parameter_list|(
name|File
name|homeDir
parameter_list|,
name|String
name|solrconfigFile
parameter_list|,
name|String
name|schemaFile
parameter_list|)
block|{
name|this
operator|.
name|baseDir
operator|=
name|homeDir
expr_stmt|;
name|this
operator|.
name|solrconfigFile
operator|=
name|solrconfigFile
expr_stmt|;
name|this
operator|.
name|schemaFile
operator|=
name|schemaFile
expr_stmt|;
block|}
DECL|method|getBaseDir
specifier|public
name|String
name|getBaseDir
parameter_list|()
block|{
return|return
name|baseDir
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getBaseURL
specifier|public
name|String
name|getBaseURL
parameter_list|()
block|{
return|return
operator|(
name|SolrTestCaseJ4
operator|.
name|isSSLMode
argument_list|()
condition|?
literal|"https"
else|:
literal|"http"
operator|)
operator|+
literal|"://127.0.0.1:"
operator|+
name|port
operator|+
literal|"/solr"
return|;
block|}
DECL|method|getCollectionURL
specifier|public
name|String
name|getCollectionURL
parameter_list|()
block|{
return|return
name|getBaseURL
argument_list|()
operator|+
literal|"/"
operator|+
name|collection
return|;
block|}
comment|/** string appropriate for passing in shards param (i.e. missing http://) */
DECL|method|getShardURL
specifier|public
name|String
name|getShardURL
parameter_list|()
block|{
return|return
literal|"127.0.0.1:"
operator|+
name|port
operator|+
literal|"/solr"
operator|+
literal|"/"
operator|+
name|collection
return|;
block|}
DECL|method|getSolrJ
specifier|public
name|SolrClient
name|getSolrJ
parameter_list|()
block|{
if|if
condition|(
name|solrj
operator|==
literal|null
condition|)
block|{
name|solrj
operator|=
operator|new
name|HttpSolrClient
argument_list|(
name|getCollectionURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|solrj
return|;
block|}
comment|/** If it needs to change */
DECL|method|setPort
specifier|public
name|void
name|setPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
DECL|method|createHome
specifier|public
name|void
name|createHome
parameter_list|()
throws|throws
name|Exception
block|{
name|homeCreated
operator|=
literal|true
expr_stmt|;
name|SolrTestCaseJ4
operator|.
name|copySolrHomeToTemp
argument_list|(
name|baseDir
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|copyConfFile
argument_list|(
name|baseDir
argument_list|,
name|collection
argument_list|,
name|solrconfigFile
argument_list|)
expr_stmt|;
name|copyConfFile
argument_list|(
name|baseDir
argument_list|,
name|collection
argument_list|,
name|schemaFile
argument_list|)
expr_stmt|;
name|File
name|collDir
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
name|collection
argument_list|)
decl_stmt|;
try|try
init|(
name|Writer
name|w
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|Files
operator|.
name|newOutputStream
argument_list|(
name|collDir
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"core.properties"
argument_list|)
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|Properties
name|coreProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|coreProps
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"collection1"
argument_list|)
expr_stmt|;
name|coreProps
operator|.
name|put
argument_list|(
literal|"config"
argument_list|,
name|solrconfigFile
argument_list|)
expr_stmt|;
name|coreProps
operator|.
name|put
argument_list|(
literal|"schema"
argument_list|,
name|schemaFile
argument_list|)
expr_stmt|;
name|coreProps
operator|.
name|store
argument_list|(
name|w
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|start
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|homeCreated
condition|)
block|{
name|createHome
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jetty
operator|==
literal|null
condition|)
block|{
name|JettyConfig
name|jettyConfig
init|=
name|JettyConfig
operator|.
name|builder
argument_list|()
operator|.
name|stopAtShutdown
argument_list|(
literal|true
argument_list|)
operator|.
name|setContext
argument_list|(
literal|"/solr"
argument_list|)
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
operator|.
name|withSSLConfig
argument_list|(
name|sslConfig
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Properties
name|nodeProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|nodeProperties
operator|.
name|setProperty
argument_list|(
literal|"solrconfig"
argument_list|,
name|solrconfigFile
argument_list|)
expr_stmt|;
name|nodeProperties
operator|.
name|setProperty
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_SCHEMA
argument_list|,
name|schemaFile
argument_list|)
expr_stmt|;
name|jetty
operator|=
operator|new
name|JettySolrRunner
argument_list|(
name|baseDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|nodeProperties
argument_list|,
name|jettyConfig
argument_list|)
expr_stmt|;
block|}
comment|// silly stuff included from solrconfig.snippet.randomindexconfig.xml
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.tests.maxBufferedDocs"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|100000
argument_list|)
argument_list|)
expr_stmt|;
name|jetty
operator|.
name|start
argument_list|()
expr_stmt|;
name|port
operator|=
name|jetty
operator|.
name|getLocalPort
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"===> Started solr server port="
operator|+
name|port
operator|+
literal|" home="
operator|+
name|getBaseDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|stop
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|jetty
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|solrj
operator|!=
literal|null
condition|)
name|solrj
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|IOUtils
operator|.
name|deleteFilesIfExist
argument_list|(
name|baseDir
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|copyConfFile
specifier|private
specifier|static
name|void
name|copyConfFile
parameter_list|(
name|File
name|dstRoot
parameter_list|,
name|String
name|destCollection
parameter_list|,
name|String
name|file
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|subHome
init|=
operator|new
name|File
argument_list|(
name|dstRoot
argument_list|,
name|destCollection
operator|+
name|File
operator|.
name|separator
operator|+
literal|"conf"
argument_list|)
decl_stmt|;
name|String
name|top
init|=
name|SolrTestCaseJ4
operator|.
name|TEST_HOME
argument_list|()
operator|+
literal|"/collection1/conf"
decl_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|top
argument_list|,
name|file
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|subHome
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|copyConfigFile
specifier|public
name|void
name|copyConfigFile
parameter_list|(
name|File
name|dstRoot
parameter_list|,
name|String
name|destCollection
parameter_list|,
name|String
name|file
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|homeCreated
condition|)
block|{
name|createHome
argument_list|()
expr_stmt|;
block|}
name|File
name|subHome
init|=
operator|new
name|File
argument_list|(
name|dstRoot
argument_list|,
name|destCollection
operator|+
name|File
operator|.
name|separator
operator|+
literal|"conf"
argument_list|)
decl_stmt|;
name|String
name|top
init|=
name|SolrTestCaseJ4
operator|.
name|TEST_HOME
argument_list|()
operator|+
literal|"/collection1/conf"
decl_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|top
argument_list|,
name|file
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|subHome
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//  Manages a number of Solr servers and provides a Client to partition documents and randomly assign query requests.
comment|//  Example:
comment|//        SolrInstances servers = new SolrInstances(3, "solrconfig-tlog.xml","schema_latest.xml");
comment|//        Client = servers.getClient(0);
comment|//        client.add(sdoc("id", "3"), null);
comment|//        client.commit();
comment|//        client.testJQ(params("q", "*:*"), "/response/numFound==3")
comment|//        servers.stop();
comment|//
DECL|class|SolrInstances
specifier|public
specifier|static
class|class
name|SolrInstances
block|{
DECL|field|slist
specifier|public
name|List
argument_list|<
name|SolrInstance
argument_list|>
name|slist
decl_stmt|;
DECL|field|client
specifier|public
name|Client
name|client
decl_stmt|;
DECL|method|SolrInstances
specifier|public
name|SolrInstances
parameter_list|(
name|int
name|numServers
parameter_list|,
name|String
name|solrconfig
parameter_list|,
name|String
name|schema
parameter_list|)
throws|throws
name|Exception
block|{
name|slist
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numServers
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numServers
condition|;
name|i
operator|++
control|)
block|{
name|SolrInstance
name|instance
init|=
operator|new
name|SolrInstance
argument_list|(
name|createTempDir
argument_list|(
literal|"s"
operator|+
name|i
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|,
name|solrconfig
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|slist
operator|.
name|add
argument_list|(
name|instance
argument_list|)
expr_stmt|;
name|instance
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|stop
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|SolrInstance
name|instance
range|:
name|slist
control|)
block|{
name|instance
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|// For params.set("shards", getShards())
DECL|method|getShards
specifier|public
name|String
name|getShards
parameter_list|()
block|{
return|return
name|getShardsParam
argument_list|(
name|slist
argument_list|)
return|;
block|}
DECL|method|getSolrJs
specifier|public
name|List
argument_list|<
name|SolrClient
argument_list|>
name|getSolrJs
parameter_list|()
block|{
name|List
argument_list|<
name|SolrClient
argument_list|>
name|solrjs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|slist
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SolrInstance
name|instance
range|:
name|slist
control|)
block|{
name|solrjs
operator|.
name|add
argument_list|(
name|instance
operator|.
name|getSolrJ
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|solrjs
return|;
block|}
DECL|method|getClient
specifier|public
name|Client
name|getClient
parameter_list|(
name|int
name|seed
parameter_list|)
block|{
if|if
condition|(
name|client
operator|==
literal|null
condition|)
block|{
name|client
operator|=
operator|new
name|Client
argument_list|(
name|getSolrJs
argument_list|()
argument_list|,
name|seed
argument_list|)
expr_stmt|;
block|}
return|return
name|client
return|;
block|}
DECL|method|getShardsParam
specifier|public
specifier|static
name|String
name|getShardsParam
parameter_list|(
name|List
argument_list|<
name|SolrInstance
argument_list|>
name|instances
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|SolrInstance
name|instance
range|:
name|instances
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|instance
operator|.
name|getShardURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class
end_unit
