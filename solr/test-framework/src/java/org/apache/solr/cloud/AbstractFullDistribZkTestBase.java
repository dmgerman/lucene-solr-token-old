begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionProcessor
operator|.
name|CREATE_NODE_SET
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionProcessor
operator|.
name|MAX_SHARDS_PER_NODE
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionProcessor
operator|.
name|NUM_SLICES
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionProcessor
operator|.
name|REPLICATION_FACTOR
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionProcessor
operator|.
name|SHARDS_PROP
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|params
operator|.
name|CoreConnectionPNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|CollectionAdminResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|SolrDispatchFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|DirectUpdateHandler2
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * TODO: we should still test this works as a custom update chain as well as  * what we test now - the default update chain  */
end_comment
begin_class
annotation|@
name|Slow
DECL|class|AbstractFullDistribZkTestBase
specifier|public
specifier|abstract
class|class
name|AbstractFullDistribZkTestBase
extends|extends
name|AbstractDistribZkTestBase
block|{
DECL|field|log
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractFullDistribZkTestBase
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeFullSolrCloudTest
specifier|public
specifier|static
name|void
name|beforeFullSolrCloudTest
parameter_list|()
block|{
comment|// shorten the log output more for this test type
if|if
condition|(
name|formatter
operator|!=
literal|null
condition|)
name|formatter
operator|.
name|setShorterFormat
argument_list|()
expr_stmt|;
block|}
DECL|field|SHARD1
specifier|public
specifier|static
specifier|final
name|String
name|SHARD1
init|=
literal|"shard1"
decl_stmt|;
DECL|field|SHARD2
specifier|public
specifier|static
specifier|final
name|String
name|SHARD2
init|=
literal|"shard2"
decl_stmt|;
DECL|field|printLayoutOnTearDown
specifier|protected
name|boolean
name|printLayoutOnTearDown
init|=
literal|false
decl_stmt|;
DECL|field|t1
name|String
name|t1
init|=
literal|"a_t"
decl_stmt|;
DECL|field|i1
name|String
name|i1
init|=
literal|"a_si"
decl_stmt|;
DECL|field|nint
name|String
name|nint
init|=
literal|"n_i"
decl_stmt|;
DECL|field|tint
name|String
name|tint
init|=
literal|"n_ti"
decl_stmt|;
DECL|field|nfloat
name|String
name|nfloat
init|=
literal|"n_f"
decl_stmt|;
DECL|field|tfloat
name|String
name|tfloat
init|=
literal|"n_tf"
decl_stmt|;
DECL|field|ndouble
name|String
name|ndouble
init|=
literal|"n_d"
decl_stmt|;
DECL|field|tdouble
name|String
name|tdouble
init|=
literal|"n_td"
decl_stmt|;
DECL|field|nlong
name|String
name|nlong
init|=
literal|"n_l"
decl_stmt|;
DECL|field|tlong
name|String
name|tlong
init|=
literal|"other_tl1"
decl_stmt|;
DECL|field|ndate
name|String
name|ndate
init|=
literal|"n_dt"
decl_stmt|;
DECL|field|tdate
name|String
name|tdate
init|=
literal|"n_tdt"
decl_stmt|;
DECL|field|oddField
name|String
name|oddField
init|=
literal|"oddField_s"
decl_stmt|;
DECL|field|missingField
name|String
name|missingField
init|=
literal|"ignore_exception__missing_but_valid_field_t"
decl_stmt|;
DECL|field|invalidField
name|String
name|invalidField
init|=
literal|"ignore_exception__invalid_field_not_in_schema"
decl_stmt|;
DECL|field|sliceCount
specifier|protected
name|int
name|sliceCount
decl_stmt|;
DECL|field|controlClientCloud
specifier|protected
name|CloudSolrServer
name|controlClientCloud
decl_stmt|;
comment|// cloud version of the control client
DECL|field|cloudClient
specifier|protected
specifier|volatile
name|CloudSolrServer
name|cloudClient
decl_stmt|;
DECL|field|cloudJettys
specifier|protected
name|List
argument_list|<
name|CloudJettyRunner
argument_list|>
name|cloudJettys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|shardToJetty
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CloudJettyRunner
argument_list|>
argument_list|>
name|shardToJetty
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|jettyIntCntr
specifier|private
name|AtomicInteger
name|jettyIntCntr
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|chaosMonkey
specifier|protected
name|ChaosMonkey
name|chaosMonkey
decl_stmt|;
DECL|field|shardToLeaderJetty
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|CloudJettyRunner
argument_list|>
name|shardToLeaderJetty
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|cloudInit
specifier|private
name|boolean
name|cloudInit
decl_stmt|;
DECL|field|checkCreatedVsState
specifier|protected
name|boolean
name|checkCreatedVsState
decl_stmt|;
DECL|field|useJettyDataDir
specifier|protected
name|boolean
name|useJettyDataDir
init|=
literal|true
decl_stmt|;
DECL|class|CloudJettyRunner
specifier|public
specifier|static
class|class
name|CloudJettyRunner
block|{
DECL|field|jetty
specifier|public
name|JettySolrRunner
name|jetty
decl_stmt|;
DECL|field|nodeName
specifier|public
name|String
name|nodeName
decl_stmt|;
DECL|field|coreNodeName
specifier|public
name|String
name|coreNodeName
decl_stmt|;
DECL|field|url
specifier|public
name|String
name|url
decl_stmt|;
DECL|field|client
specifier|public
name|CloudSolrServerClient
name|client
decl_stmt|;
DECL|field|info
specifier|public
name|ZkNodeProps
name|info
decl_stmt|;
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|url
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|url
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|CloudJettyRunner
name|other
init|=
operator|(
name|CloudJettyRunner
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|url
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|url
operator|.
name|equals
argument_list|(
name|other
operator|.
name|url
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"CloudJettyRunner [url="
operator|+
name|url
operator|+
literal|"]"
return|;
block|}
block|}
DECL|class|CloudSolrServerClient
specifier|static
class|class
name|CloudSolrServerClient
block|{
DECL|field|solrClient
name|SolrServer
name|solrClient
decl_stmt|;
DECL|field|shardName
name|String
name|shardName
decl_stmt|;
DECL|field|port
name|int
name|port
decl_stmt|;
DECL|field|info
specifier|public
name|ZkNodeProps
name|info
decl_stmt|;
DECL|method|CloudSolrServerClient
specifier|public
name|CloudSolrServerClient
parameter_list|()
block|{}
DECL|method|CloudSolrServerClient
specifier|public
name|CloudSolrServerClient
parameter_list|(
name|SolrServer
name|client
parameter_list|)
block|{
name|this
operator|.
name|solrClient
operator|=
name|client
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|solrClient
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|solrClient
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|CloudSolrServerClient
name|other
init|=
operator|(
name|CloudSolrServerClient
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|solrClient
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|solrClient
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|solrClient
operator|.
name|equals
argument_list|(
name|other
operator|.
name|solrClient
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|// ignoreException(".*");
if|if
condition|(
name|sliceCount
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"numShards"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|sliceCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"numShards"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isSSLMode
argument_list|()
condition|)
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"urlScheme"
argument_list|)
expr_stmt|;
name|ZkStateReader
name|zkStateReader
init|=
operator|new
name|ZkStateReader
argument_list|(
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|AbstractZkTestCase
operator|.
name|TIMEOUT
argument_list|,
name|AbstractZkTestCase
operator|.
name|TIMEOUT
argument_list|)
decl_stmt|;
try|try
block|{
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|create
argument_list|(
name|ZkStateReader
operator|.
name|CLUSTER_PROPS
argument_list|,
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"urlScheme"
argument_list|,
literal|"https"
argument_list|)
argument_list|)
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|zkStateReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"solrcloud.update.delay"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solrcloud.update.delay"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"genericCoreNodeNames"
argument_list|)
expr_stmt|;
block|}
DECL|method|AbstractFullDistribZkTestBase
specifier|public
name|AbstractFullDistribZkTestBase
parameter_list|()
block|{
name|fixShardCount
operator|=
literal|true
expr_stmt|;
name|shardCount
operator|=
literal|4
expr_stmt|;
name|sliceCount
operator|=
literal|2
expr_stmt|;
comment|// TODO: for now, turn off stress because it uses regular clients, and we
comment|// need the cloud client because we kill servers
name|stress
operator|=
literal|0
expr_stmt|;
name|useExplicitNodeNames
operator|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
expr_stmt|;
block|}
DECL|method|getDataDir
specifier|protected
name|String
name|getDataDir
parameter_list|(
name|String
name|dataDir
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|dataDir
return|;
block|}
DECL|method|initCloud
specifier|protected
name|void
name|initCloud
parameter_list|()
throws|throws
name|Exception
block|{
assert|assert
operator|(
name|cloudInit
operator|==
literal|false
operator|)
assert|;
name|cloudInit
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|cloudClient
operator|=
name|createCloudClient
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|ZkStateReader
name|zkStateReader
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|chaosMonkey
operator|=
operator|new
name|ChaosMonkey
argument_list|(
name|zkServer
argument_list|,
name|zkStateReader
argument_list|,
name|DEFAULT_COLLECTION
argument_list|,
name|shardToJetty
argument_list|,
name|shardToLeaderJetty
argument_list|)
expr_stmt|;
block|}
DECL|method|createCloudClient
specifier|protected
name|CloudSolrServer
name|createCloudClient
parameter_list|(
name|String
name|defaultCollection
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|CloudSolrServer
name|server
init|=
operator|new
name|CloudSolrServer
argument_list|(
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|server
operator|.
name|setParallelUpdates
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultCollection
operator|!=
literal|null
condition|)
name|server
operator|.
name|setDefaultCollection
argument_list|(
name|defaultCollection
argument_list|)
expr_stmt|;
name|server
operator|.
name|getLbServer
argument_list|()
operator|.
name|getHttpClient
argument_list|()
operator|.
name|getParams
argument_list|()
operator|.
name|setParameter
argument_list|(
name|CoreConnectionPNames
operator|.
name|CONNECTION_TIMEOUT
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
return|return
name|server
return|;
block|}
annotation|@
name|Override
DECL|method|createServers
specifier|protected
name|void
name|createServers
parameter_list|(
name|int
name|numServers
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"collection"
argument_list|,
literal|"control_collection"
argument_list|)
expr_stmt|;
name|String
name|numShards
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|)
decl_stmt|;
comment|// we want hashes by default for the control, so set to 1 shard as opposed to leaving unset
comment|// System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);
name|System
operator|.
name|setProperty
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|File
name|controlJettyDir
init|=
operator|new
name|File
argument_list|(
name|TEMP_DIR
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"-controljetty-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|setupJettySolrHome
argument_list|(
name|controlJettyDir
argument_list|)
expr_stmt|;
name|controlJetty
operator|=
name|createJetty
argument_list|(
name|controlJettyDir
argument_list|,
name|testDir
operator|+
literal|"/control/data"
argument_list|)
expr_stmt|;
comment|// don't pass shard name... let it default to "shard1"
name|System
operator|.
name|clearProperty
argument_list|(
literal|"collection"
argument_list|)
expr_stmt|;
if|if
condition|(
name|numShards
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|,
name|numShards
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|clearProperty
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|)
expr_stmt|;
block|}
name|controlClient
operator|=
name|createNewSolrServer
argument_list|(
name|controlJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sliceCount
operator|<=
literal|0
condition|)
block|{
comment|// for now, just create the cloud client for the control if we don't create the normal cloud client.
comment|// this can change if more tests need it.
name|controlClientCloud
operator|=
name|createCloudClient
argument_list|(
literal|"control_collection"
argument_list|)
expr_stmt|;
name|controlClientCloud
operator|.
name|connect
argument_list|()
expr_stmt|;
name|waitForCollection
argument_list|(
name|controlClientCloud
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|"control_collection"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// NOTE: we are skipping creation of the chaos monkey by returning here
name|cloudClient
operator|=
name|controlClientCloud
expr_stmt|;
comment|// temporary - some code needs/uses cloudClient
return|return;
block|}
name|initCloud
argument_list|()
expr_stmt|;
name|createJettys
argument_list|(
name|numServers
argument_list|,
name|checkCreatedVsState
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|int
name|cnt
init|=
name|getTotalReplicas
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|cnt
operator|>
literal|0
condition|)
block|{
name|waitForCollection
argument_list|(
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
name|DEFAULT_COLLECTION
argument_list|,
name|sliceCount
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|waitForCollection
specifier|protected
name|void
name|waitForCollection
parameter_list|(
name|ZkStateReader
name|reader
parameter_list|,
name|String
name|collection
parameter_list|,
name|int
name|slices
parameter_list|)
throws|throws
name|Exception
block|{
comment|// wait until shards have started registering...
name|int
name|cnt
init|=
literal|30
decl_stmt|;
while|while
condition|(
operator|!
name|reader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollections
argument_list|()
operator|.
name|contains
argument_list|(
name|collection
argument_list|)
condition|)
block|{
if|if
condition|(
name|cnt
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"timeout waiting for collection in cluster state: collection="
operator|+
name|collection
argument_list|)
throw|;
block|}
name|cnt
operator|--
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
name|cnt
operator|=
literal|30
expr_stmt|;
while|while
condition|(
name|reader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlices
argument_list|(
name|collection
argument_list|)
operator|.
name|size
argument_list|()
operator|<
name|slices
condition|)
block|{
if|if
condition|(
name|cnt
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"timeout waiting for collection shards to come up: collection="
operator|+
name|collection
operator|+
literal|", slices.expected="
operator|+
name|slices
operator|+
literal|" slices.actual= "
operator|+
name|reader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlices
argument_list|(
name|collection
argument_list|)
operator|.
name|size
argument_list|()
operator|+
literal|" slices : "
operator|+
name|reader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlices
argument_list|(
name|collection
argument_list|)
argument_list|)
throw|;
block|}
name|cnt
operator|--
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createJettys
specifier|protected
name|List
argument_list|<
name|JettySolrRunner
argument_list|>
name|createJettys
parameter_list|(
name|int
name|numJettys
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createJettys
argument_list|(
name|numJettys
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * @param checkCreatedVsState    *          if true, make sure the number created (numJettys) matches the    *          number in the cluster state - if you add more jetties this may not    *          be the case    */
DECL|method|createJettys
specifier|protected
name|List
argument_list|<
name|JettySolrRunner
argument_list|>
name|createJettys
parameter_list|(
name|int
name|numJettys
parameter_list|,
name|boolean
name|checkCreatedVsState
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|JettySolrRunner
argument_list|>
name|jettys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SolrServer
argument_list|>
name|clients
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numJettys
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
name|this
operator|.
name|jettyIntCntr
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|File
name|jettyDir
init|=
operator|new
name|File
argument_list|(
name|TEMP_DIR
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"-jetty"
operator|+
name|cnt
operator|+
literal|"-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|jettyDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|setupJettySolrHome
argument_list|(
name|jettyDir
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"create jetty "
operator|+
name|i
argument_list|)
expr_stmt|;
name|JettySolrRunner
name|j
init|=
name|createJetty
argument_list|(
name|jettyDir
argument_list|,
name|useJettyDataDir
condition|?
name|getDataDir
argument_list|(
name|testDir
operator|+
literal|"/jetty"
operator|+
name|cnt
argument_list|)
else|:
literal|null
argument_list|,
literal|null
argument_list|,
literal|"solrconfig.xml"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|jettys
operator|.
name|add
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|SolrServer
name|client
init|=
name|createNewSolrServer
argument_list|(
name|j
operator|.
name|getLocalPort
argument_list|()
argument_list|)
decl_stmt|;
name|clients
operator|.
name|add
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|jettys
operator|.
name|addAll
argument_list|(
name|jettys
argument_list|)
expr_stmt|;
name|this
operator|.
name|clients
operator|.
name|addAll
argument_list|(
name|clients
argument_list|)
expr_stmt|;
name|int
name|numShards
init|=
name|getTotalReplicas
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkCreatedVsState
condition|)
block|{
comment|// now wait until we see that the number of shards in the cluster state
comment|// matches what we expect
name|int
name|retries
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|numShards
operator|!=
name|shardCount
condition|)
block|{
name|numShards
operator|=
name|getTotalReplicas
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
expr_stmt|;
if|if
condition|(
name|numShards
operator|==
name|shardCount
condition|)
break|break;
if|if
condition|(
name|retries
operator|++
operator|==
literal|60
condition|)
block|{
name|printLayoutOnTearDown
operator|=
literal|true
expr_stmt|;
name|fail
argument_list|(
literal|"Shards in the state does not match what we set:"
operator|+
name|numShards
operator|+
literal|" vs "
operator|+
name|shardCount
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
name|ZkStateReader
name|zkStateReader
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
comment|// also make sure we have a leader for each shard
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|sliceCount
condition|;
name|i
operator|++
control|)
block|{
name|zkStateReader
operator|.
name|getLeaderRetry
argument_list|(
name|DEFAULT_COLLECTION
argument_list|,
literal|"shard"
operator|+
name|i
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|numShards
operator|>
literal|0
condition|)
block|{
name|updateMappingsFromZk
argument_list|(
name|this
operator|.
name|jettys
argument_list|,
name|this
operator|.
name|clients
argument_list|)
expr_stmt|;
block|}
comment|// build the shard string
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numJettys
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|JettySolrRunner
name|j
init|=
name|this
operator|.
name|jettys
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|JettySolrRunner
name|j2
init|=
name|this
operator|.
name|jettys
operator|.
name|get
argument_list|(
name|i
operator|+
operator|(
name|numJettys
operator|/
literal|2
operator|-
literal|1
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|buildUrl
argument_list|(
name|j
operator|.
name|getLocalPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"|"
argument_list|)
operator|.
name|append
argument_list|(
name|buildUrl
argument_list|(
name|j2
operator|.
name|getLocalPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|shards
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
return|return
name|jettys
return|;
block|}
DECL|method|startCloudJetty
specifier|protected
name|SolrServer
name|startCloudJetty
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|shard
parameter_list|)
throws|throws
name|Exception
block|{
comment|// TODO: use the collection string!!!!
name|collection
operator|=
name|DEFAULT_COLLECTION
expr_stmt|;
name|int
name|totalReplicas
init|=
name|getTotalReplicas
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|int
name|cnt
init|=
name|this
operator|.
name|jettyIntCntr
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|File
name|jettyDir
init|=
operator|new
name|File
argument_list|(
name|TEMP_DIR
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"-jetty"
operator|+
name|cnt
operator|+
literal|"-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|jettyDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|copyDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|getSolrHome
argument_list|()
argument_list|)
argument_list|,
name|jettyDir
argument_list|)
expr_stmt|;
name|JettySolrRunner
name|j
init|=
name|createJetty
argument_list|(
name|jettyDir
argument_list|,
name|testDir
operator|+
literal|"/jetty"
operator|+
name|cnt
argument_list|,
name|shard
argument_list|,
literal|"solrconfig.xml"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|jettys
operator|.
name|add
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|SolrServer
name|client
init|=
name|createNewSolrServer
argument_list|(
name|j
operator|.
name|getLocalPort
argument_list|()
argument_list|)
decl_stmt|;
name|clients
operator|.
name|add
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|int
name|retries
init|=
literal|60
decl_stmt|;
while|while
condition|(
operator|--
name|retries
operator|>=
literal|0
condition|)
block|{
comment|// total replicas changed.. assume it was us
if|if
condition|(
name|getTotalReplicas
argument_list|(
name|collection
argument_list|)
operator|!=
name|totalReplicas
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|retries
operator|<=
literal|0
condition|)
block|{
name|fail
argument_list|(
literal|"Timeout waiting for "
operator|+
name|j
operator|+
literal|" to appear in clusterstate"
argument_list|)
expr_stmt|;
name|printLayout
argument_list|()
expr_stmt|;
block|}
name|updateMappingsFromZk
argument_list|(
name|this
operator|.
name|jettys
argument_list|,
name|this
operator|.
name|clients
argument_list|)
expr_stmt|;
return|return
name|client
return|;
block|}
comment|/* Total number of replicas (number of cores serving an index to the collection) shown by the cluster state */
DECL|method|getTotalReplicas
specifier|protected
name|int
name|getTotalReplicas
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|ZkStateReader
name|zkStateReader
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|DocCollection
name|coll
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollectionOrNull
argument_list|(
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
name|coll
operator|==
literal|null
condition|)
return|return
literal|0
return|;
comment|// support for when collection hasn't been created yet
name|int
name|cnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Slice
name|slices
range|:
name|coll
operator|.
name|getSlices
argument_list|()
control|)
block|{
name|cnt
operator|+=
name|slices
operator|.
name|getReplicas
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|cnt
return|;
block|}
DECL|method|createJetty
specifier|public
name|JettySolrRunner
name|createJetty
parameter_list|(
name|String
name|dataDir
parameter_list|,
name|String
name|ulogDir
parameter_list|,
name|String
name|shardList
parameter_list|,
name|String
name|solrConfigOverride
parameter_list|)
throws|throws
name|Exception
block|{
name|JettySolrRunner
name|jetty
init|=
operator|new
name|JettySolrRunner
argument_list|(
name|getSolrHome
argument_list|()
argument_list|,
name|context
argument_list|,
literal|0
argument_list|,
name|solrConfigOverride
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|getExtraServlets
argument_list|()
argument_list|,
name|sslConfig
argument_list|,
name|getExtraRequestFilters
argument_list|()
argument_list|)
decl_stmt|;
name|jetty
operator|.
name|setShards
argument_list|(
name|shardList
argument_list|)
expr_stmt|;
name|jetty
operator|.
name|setDataDir
argument_list|(
name|getDataDir
argument_list|(
name|dataDir
argument_list|)
argument_list|)
expr_stmt|;
name|jetty
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|jetty
return|;
block|}
DECL|method|createJetty
specifier|public
name|JettySolrRunner
name|createJetty
parameter_list|(
name|File
name|solrHome
parameter_list|,
name|String
name|dataDir
parameter_list|,
name|String
name|shardList
parameter_list|,
name|String
name|solrConfigOverride
parameter_list|,
name|String
name|schemaOverride
parameter_list|)
throws|throws
name|Exception
block|{
comment|// randomly test a relative solr.home path
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|solrHome
operator|=
name|getRelativeSolrHomePath
argument_list|(
name|solrHome
argument_list|)
expr_stmt|;
block|}
name|JettySolrRunner
name|jetty
init|=
operator|new
name|JettySolrRunner
argument_list|(
name|solrHome
operator|.
name|getPath
argument_list|()
argument_list|,
name|context
argument_list|,
literal|0
argument_list|,
name|solrConfigOverride
argument_list|,
name|schemaOverride
argument_list|,
literal|false
argument_list|,
name|getExtraServlets
argument_list|()
argument_list|,
name|sslConfig
argument_list|,
name|getExtraRequestFilters
argument_list|()
argument_list|)
decl_stmt|;
name|jetty
operator|.
name|setShards
argument_list|(
name|shardList
argument_list|)
expr_stmt|;
name|jetty
operator|.
name|setDataDir
argument_list|(
name|getDataDir
argument_list|(
name|dataDir
argument_list|)
argument_list|)
expr_stmt|;
name|jetty
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|jetty
return|;
block|}
DECL|method|getRelativeSolrHomePath
specifier|private
name|File
name|getRelativeSolrHomePath
parameter_list|(
name|File
name|solrHome
parameter_list|)
block|{
name|String
name|path
init|=
name|SolrResourceLoader
operator|.
name|normalizeDir
argument_list|(
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|base
init|=
operator|new
name|File
argument_list|(
name|solrHome
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|base
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|base
operator|=
name|base
operator|.
name|replaceFirst
argument_list|(
literal|"\\."
argument_list|,
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|.
name|endsWith
argument_list|(
name|File
operator|.
name|separator
operator|+
literal|"."
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
name|int
name|splits
init|=
name|path
operator|.
name|split
argument_list|(
literal|"\\"
operator|+
name|File
operator|.
name|separator
argument_list|)
operator|.
name|length
decl_stmt|;
name|StringBuilder
name|p
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splits
operator|-
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|p
operator|.
name|append
argument_list|(
literal|".."
argument_list|)
operator|.
name|append
argument_list|(
name|File
operator|.
name|separator
argument_list|)
expr_stmt|;
block|}
name|String
name|prefix
init|=
name|FilenameUtils
operator|.
name|getPrefix
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|base
operator|=
name|base
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|solrHome
operator|=
operator|new
name|File
argument_list|(
name|p
operator|.
name|toString
argument_list|()
operator|+
name|base
argument_list|)
expr_stmt|;
return|return
name|solrHome
return|;
block|}
DECL|method|updateMappingsFromZk
specifier|protected
name|void
name|updateMappingsFromZk
parameter_list|(
name|List
argument_list|<
name|JettySolrRunner
argument_list|>
name|jettys
parameter_list|,
name|List
argument_list|<
name|SolrServer
argument_list|>
name|clients
parameter_list|)
throws|throws
name|Exception
block|{
name|updateMappingsFromZk
argument_list|(
name|jettys
argument_list|,
name|clients
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|updateMappingsFromZk
specifier|protected
name|void
name|updateMappingsFromZk
parameter_list|(
name|List
argument_list|<
name|JettySolrRunner
argument_list|>
name|jettys
parameter_list|,
name|List
argument_list|<
name|SolrServer
argument_list|>
name|clients
parameter_list|,
name|boolean
name|allowOverSharding
parameter_list|)
throws|throws
name|Exception
block|{
name|ZkStateReader
name|zkStateReader
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|zkStateReader
operator|.
name|updateClusterState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cloudJettys
operator|.
name|clear
argument_list|()
expr_stmt|;
name|shardToJetty
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|DocCollection
name|coll
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CloudSolrServerClient
argument_list|>
name|theClients
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SolrServer
name|client
range|:
name|clients
control|)
block|{
comment|// find info for this client in zk
name|nextClient
label|:
comment|// we find out state by simply matching ports...
for|for
control|(
name|Slice
name|slice
range|:
name|coll
operator|.
name|getSlices
argument_list|()
control|)
block|{
for|for
control|(
name|Replica
name|replica
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
name|int
name|port
init|=
operator|new
name|URI
argument_list|(
operator|(
operator|(
name|HttpSolrServer
operator|)
name|client
operator|)
operator|.
name|getBaseURL
argument_list|()
argument_list|)
operator|.
name|getPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|)
operator|.
name|contains
argument_list|(
literal|":"
operator|+
name|port
argument_list|)
condition|)
block|{
name|CloudSolrServerClient
name|csc
init|=
operator|new
name|CloudSolrServerClient
argument_list|()
decl_stmt|;
name|csc
operator|.
name|solrClient
operator|=
name|client
expr_stmt|;
name|csc
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|csc
operator|.
name|shardName
operator|=
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
expr_stmt|;
name|csc
operator|.
name|info
operator|=
name|replica
expr_stmt|;
name|theClients
operator|.
name|add
argument_list|(
name|csc
argument_list|)
expr_stmt|;
break|break
name|nextClient
break|;
block|}
block|}
block|}
block|}
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|jettys
control|)
block|{
name|int
name|port
init|=
name|jetty
operator|.
name|getLocalPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|port
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot find the port for jetty"
argument_list|)
throw|;
block|}
name|nextJetty
label|:
for|for
control|(
name|Slice
name|slice
range|:
name|coll
operator|.
name|getSlices
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
argument_list|>
name|entries
init|=
name|slice
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|Replica
name|replica
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|)
operator|.
name|contains
argument_list|(
literal|":"
operator|+
name|port
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|CloudJettyRunner
argument_list|>
name|list
init|=
name|shardToJetty
operator|.
name|get
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|shardToJetty
operator|.
name|put
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isLeader
init|=
name|slice
operator|.
name|getLeader
argument_list|()
operator|==
name|replica
decl_stmt|;
name|CloudJettyRunner
name|cjr
init|=
operator|new
name|CloudJettyRunner
argument_list|()
decl_stmt|;
name|cjr
operator|.
name|jetty
operator|=
name|jetty
expr_stmt|;
name|cjr
operator|.
name|info
operator|=
name|replica
expr_stmt|;
name|cjr
operator|.
name|nodeName
operator|=
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
expr_stmt|;
name|cjr
operator|.
name|coreNodeName
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|cjr
operator|.
name|url
operator|=
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|)
operator|+
literal|"/"
operator|+
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
expr_stmt|;
name|cjr
operator|.
name|client
operator|=
name|findClientByPort
argument_list|(
name|port
argument_list|,
name|theClients
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|cjr
argument_list|)
expr_stmt|;
if|if
condition|(
name|isLeader
condition|)
block|{
name|shardToLeaderJetty
operator|.
name|put
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|cjr
argument_list|)
expr_stmt|;
block|}
name|cloudJettys
operator|.
name|add
argument_list|(
name|cjr
argument_list|)
expr_stmt|;
break|break
name|nextJetty
break|;
block|}
block|}
block|}
block|}
comment|// # of jetties may not match replicas in shard here, because we don't map
comment|// jetties that are not running - every shard should have at least one
comment|// running jetty though
for|for
control|(
name|Slice
name|slice
range|:
name|coll
operator|.
name|getSlices
argument_list|()
control|)
block|{
comment|// check that things look right
name|List
argument_list|<
name|CloudJettyRunner
argument_list|>
name|jetties
init|=
name|shardToJetty
operator|.
name|get
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|allowOverSharding
condition|)
block|{
name|assertNotNull
argument_list|(
literal|"Test setup problem: We found no jetties for shard: "
operator|+
name|slice
operator|.
name|getName
argument_list|()
operator|+
literal|" just:"
operator|+
name|shardToJetty
operator|.
name|keySet
argument_list|()
argument_list|,
name|jetties
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"slice:"
operator|+
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|slice
operator|.
name|getReplicas
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|jetties
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|findClientByPort
specifier|private
name|CloudSolrServerClient
name|findClientByPort
parameter_list|(
name|int
name|port
parameter_list|,
name|List
argument_list|<
name|CloudSolrServerClient
argument_list|>
name|theClients
parameter_list|)
block|{
for|for
control|(
name|CloudSolrServerClient
name|client
range|:
name|theClients
control|)
block|{
if|if
condition|(
name|client
operator|.
name|port
operator|==
name|port
condition|)
block|{
return|return
name|client
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Client with the given port does not exist:"
operator|+
name|port
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setDistributedParams
specifier|protected
name|void
name|setDistributedParams
parameter_list|(
name|ModifiableSolrParams
name|params
parameter_list|)
block|{
if|if
condition|(
name|r
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// don't set shards, let that be figured out from the cloud state
block|}
else|else
block|{
comment|// use shard ids rather than physical locations
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sliceCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"shard"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|set
argument_list|(
literal|"shards"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|indexDoc
specifier|protected
name|void
name|indexDoc
parameter_list|(
name|SolrInputDocument
name|doc
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|UpdateRequest
name|req
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|req
operator|.
name|setParam
argument_list|(
literal|"CONTROL"
argument_list|,
literal|"TRUE"
argument_list|)
expr_stmt|;
name|req
operator|.
name|process
argument_list|(
name|controlClient
argument_list|)
expr_stmt|;
comment|// if we wanted to randomly pick a client - but sometimes they may be
comment|// down...
comment|// boolean pick = random.nextBoolean();
comment|//
comment|// int which = (doc.getField(id).toString().hashCode()& 0x7fffffff) %
comment|// sliceCount;
comment|//
comment|// if (pick&& sliceCount> 1) {
comment|// which = which + ((shardCount / sliceCount) *
comment|// random.nextInt(sliceCount-1));
comment|// }
comment|//
comment|// CommonsHttpSolrServer client = (CommonsHttpSolrServer)
comment|// clients.get(which);
name|UpdateRequest
name|ureq
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|ureq
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// ureq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);
name|ureq
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|index_specific
specifier|protected
name|void
name|index_specific
parameter_list|(
name|int
name|serverNumber
parameter_list|,
name|Object
modifier|...
name|fields
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|doc
operator|.
name|addField
argument_list|(
call|(
name|String
call|)
argument_list|(
name|fields
index|[
name|i
index|]
argument_list|)
argument_list|,
name|fields
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|controlClient
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|HttpSolrServer
name|client
init|=
operator|(
name|HttpSolrServer
operator|)
name|clients
operator|.
name|get
argument_list|(
name|serverNumber
argument_list|)
decl_stmt|;
name|UpdateRequest
name|ureq
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|ureq
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// ureq.setParam("update.chain", DISTRIB_UPDATE_CHAIN);
name|ureq
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
DECL|method|index_specific
specifier|protected
name|void
name|index_specific
parameter_list|(
name|SolrServer
name|client
parameter_list|,
name|Object
modifier|...
name|fields
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|doc
operator|.
name|addField
argument_list|(
call|(
name|String
call|)
argument_list|(
name|fields
index|[
name|i
index|]
argument_list|)
argument_list|,
name|fields
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|UpdateRequest
name|ureq
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|ureq
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// ureq.setParam("update.chain", DISTRIB_UPDATE_CHAIN);
name|ureq
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
comment|// add to control second in case adding to shards fails
name|controlClient
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|del
specifier|protected
name|void
name|del
parameter_list|(
name|String
name|q
parameter_list|)
throws|throws
name|Exception
block|{
name|controlClient
operator|.
name|deleteByQuery
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|deleteByQuery
argument_list|(
name|q
argument_list|)
expr_stmt|;
comment|/***     for (SolrServer client : clients) {       UpdateRequest ureq = new UpdateRequest();       // ureq.setParam("update.chain", DISTRIB_UPDATE_CHAIN);       ureq.deleteByQuery(q).process(client);     }      ***/
block|}
comment|// serial commit...
DECL|method|waitForRecoveriesToFinish
specifier|protected
name|void
name|waitForRecoveriesToFinish
parameter_list|(
name|boolean
name|verbose
parameter_list|)
throws|throws
name|Exception
block|{
name|ZkStateReader
name|zkStateReader
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|super
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|DEFAULT_COLLECTION
argument_list|,
name|zkStateReader
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForRecoveriesToFinish
specifier|protected
name|void
name|waitForRecoveriesToFinish
parameter_list|(
name|String
name|collection
parameter_list|,
name|boolean
name|verbose
parameter_list|)
throws|throws
name|Exception
block|{
name|ZkStateReader
name|zkStateReader
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|super
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|collection
argument_list|,
name|zkStateReader
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForRecoveriesToFinish
specifier|protected
name|void
name|waitForRecoveriesToFinish
parameter_list|(
name|boolean
name|verbose
parameter_list|,
name|int
name|timeoutSeconds
parameter_list|)
throws|throws
name|Exception
block|{
name|ZkStateReader
name|zkStateReader
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|super
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|DEFAULT_COLLECTION
argument_list|,
name|zkStateReader
argument_list|,
name|verbose
argument_list|,
literal|true
argument_list|,
name|timeoutSeconds
argument_list|)
expr_stmt|;
block|}
DECL|method|checkQueries
specifier|protected
name|void
name|checkQueries
parameter_list|()
throws|throws
name|Exception
block|{
name|handle
operator|.
name|put
argument_list|(
literal|"_version_"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"n_tl1 desc"
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"response"
argument_list|,
name|UNORDERED
argument_list|)
expr_stmt|;
comment|// get?ids=a,b,c requests are unordered
name|String
name|ids
init|=
literal|"987654"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|query
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"ids"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|ids
operator|=
name|ids
operator|+
literal|','
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"ids"
argument_list|,
name|ids
argument_list|)
expr_stmt|;
block|}
name|handle
operator|.
name|remove
argument_list|(
literal|"response"
argument_list|)
expr_stmt|;
comment|// random value sort
for|for
control|(
name|String
name|f
range|:
name|fieldNames
control|)
block|{
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|f
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|f
operator|+
literal|" asc"
argument_list|)
expr_stmt|;
block|}
comment|// these queries should be exactly ordered and scores should exactly match
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" asc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"n_tl1 asc"
argument_list|,
literal|"fl"
argument_list|,
literal|"score"
argument_list|)
expr_stmt|;
comment|// test legacy
comment|// behavior -
comment|// "score"=="*,score"
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"n_tl1 desc"
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"maxScore"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|i1
argument_list|)
expr_stmt|;
comment|// does not expect maxScore. So if it comes
comment|// ,ignore it.
comment|// JavaBinCodec.writeSolrDocumentList()
comment|// is agnostic of request params.
name|handle
operator|.
name|remove
argument_list|(
literal|"maxScore"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|i1
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
comment|// even scores should match
comment|// exactly here
name|handle
operator|.
name|put
argument_list|(
literal|"highlighting"
argument_list|,
name|UNORDERED
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"response"
argument_list|,
name|UNORDERED
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"maxScore"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"quick"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"foofoofoo"
argument_list|,
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
comment|// no fields in returned
comment|// docs
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"start"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"score"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"quick"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"start"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"start"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"now their fox sat had put"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"now their fox sat had put"
argument_list|,
literal|"fl"
argument_list|,
literal|"foofoofoo"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"matchesnothing"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
operator|-
literal|1
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
operator|-
literal|1
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
operator|-
literal|1
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
operator|-
literal|1
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"quick"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.offset"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// test faceting multiple things at once
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"quick"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
comment|// test filter tagging, facet exclusion, and naming (multi-select facet
comment|// support)
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"{!key=myquick}quick"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"{!key=myall ex=a}all"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=mykey ex=a}"
operator|+
name|t1
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=other ex=b}"
operator|+
name|t1
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key=again ex=a,b}"
operator|+
name|t1
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=a}id:[1 TO 7]"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=b}id:[3 TO 9]"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!ex=t1}SubjectTerms_mfacet"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=t1}SubjectTerms_mfacet:(test 1)"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// test field that is valid in schema but missing in all shards
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|missingField
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// test field that is valid in schema and missing in some shards
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|oddField
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
name|i1
argument_list|)
expr_stmt|;
comment|// Try to get better coverage for refinement queries by turning off over
comment|// requesting.
comment|// This makes it much more likely that we may not get the top facet values
comment|// and hence
comment|// we turn of that checking.
name|handle
operator|.
name|put
argument_list|(
literal|"facet_fields"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
literal|5
argument_list|,
literal|"facet.shard.limit"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// check a complex key name
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|0
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!key='a b/c \\' \\} foo'}"
operator|+
name|t1
argument_list|,
literal|"facet.limit"
argument_list|,
literal|5
argument_list|,
literal|"facet.shard.limit"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|handle
operator|.
name|remove
argument_list|(
literal|"facet_fields"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"n_tl1 desc"
argument_list|)
expr_stmt|;
comment|// index the same document to two shards and make sure things
comment|// don't blow up.
comment|// assumes first n clients are first n shards
if|if
condition|(
name|clients
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
block|{
name|index
argument_list|(
name|id
argument_list|,
literal|100
argument_list|,
name|i1
argument_list|,
literal|107
argument_list|,
name|t1
argument_list|,
literal|"oh no, a duplicate!"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shardCount
condition|;
name|i
operator|++
control|)
block|{
name|index_specific
argument_list|(
name|i
argument_list|,
name|id
argument_list|,
literal|100
argument_list|,
name|i1
argument_list|,
literal|107
argument_list|,
name|t1
argument_list|,
literal|"oh no, a duplicate!"
argument_list|)
expr_stmt|;
block|}
name|commit
argument_list|()
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"duplicate"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"fox duplicate horses"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|indexAbunchOfDocs
specifier|protected
name|void
name|indexAbunchOfDocs
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|2
argument_list|,
name|i1
argument_list|,
literal|50
argument_list|,
name|t1
argument_list|,
literal|"to come to the aid of their country."
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|3
argument_list|,
name|i1
argument_list|,
literal|2
argument_list|,
name|t1
argument_list|,
literal|"how now brown cow"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|4
argument_list|,
name|i1
argument_list|,
operator|-
literal|100
argument_list|,
name|t1
argument_list|,
literal|"the quick fox jumped over the lazy dog"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|5
argument_list|,
name|i1
argument_list|,
literal|500
argument_list|,
name|t1
argument_list|,
literal|"the quick fox jumped way over the lazy dog"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|6
argument_list|,
name|i1
argument_list|,
operator|-
literal|600
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy sat on a wall"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|7
argument_list|,
name|i1
argument_list|,
literal|123
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy had a great fall"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|8
argument_list|,
name|i1
argument_list|,
literal|876
argument_list|,
name|t1
argument_list|,
literal|"all the kings horses and all the kings men"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|9
argument_list|,
name|i1
argument_list|,
literal|7
argument_list|,
name|t1
argument_list|,
literal|"couldn't put humpty together again"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|10
argument_list|,
name|i1
argument_list|,
literal|4321
argument_list|,
name|t1
argument_list|,
literal|"this too shall pass"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|11
argument_list|,
name|i1
argument_list|,
operator|-
literal|987
argument_list|,
name|t1
argument_list|,
literal|"An eye for eye only ends up making the whole world blind."
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|12
argument_list|,
name|i1
argument_list|,
literal|379
argument_list|,
name|t1
argument_list|,
literal|"Great works are performed, not by strength, but by perseverance."
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|13
argument_list|,
name|i1
argument_list|,
literal|232
argument_list|,
name|t1
argument_list|,
literal|"no eggs on wall, lesson learned"
argument_list|,
name|oddField
argument_list|,
literal|"odd man out"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|14
argument_list|,
literal|"SubjectTerms_mfacet"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mathematical models"
block|,
literal|"mathematical analysis"
block|}
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|15
argument_list|,
literal|"SubjectTerms_mfacet"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"test 1"
block|,
literal|"test 2"
block|,
literal|"test3"
block|}
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|16
argument_list|,
literal|"SubjectTerms_mfacet"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"test 1"
block|,
literal|"test 2"
block|,
literal|"test3"
block|}
argument_list|)
expr_stmt|;
name|String
index|[]
name|vals
init|=
operator|new
name|String
index|[
literal|100
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|vals
index|[
name|i
index|]
operator|=
literal|"test "
operator|+
name|i
expr_stmt|;
block|}
name|indexr
argument_list|(
name|id
argument_list|,
literal|17
argument_list|,
literal|"SubjectTerms_mfacet"
argument_list|,
name|vals
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|100
init|;
name|i
operator|<
literal|150
condition|;
name|i
operator|++
control|)
block|{
name|indexr
argument_list|(
name|id
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Executes a query against each live and active replica of the specified shard     * and aserts that the results are identical.    *    * @see #queryAndCompare    */
DECL|method|queryAndCompareReplicas
specifier|public
name|QueryResponse
name|queryAndCompareReplicas
parameter_list|(
name|SolrParams
name|params
parameter_list|,
name|String
name|shard
parameter_list|)
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|SolrServer
argument_list|>
name|shardClients
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|updateMappingsFromZk
argument_list|(
name|jettys
argument_list|,
name|clients
argument_list|)
expr_stmt|;
name|ZkStateReader
name|zkStateReader
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CloudJettyRunner
argument_list|>
name|solrJetties
init|=
name|shardToJetty
operator|.
name|get
argument_list|(
name|shard
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"no jetties found for shard: "
operator|+
name|shard
argument_list|,
name|solrJetties
argument_list|)
expr_stmt|;
for|for
control|(
name|CloudJettyRunner
name|cjetty
range|:
name|solrJetties
control|)
block|{
name|ZkNodeProps
name|props
init|=
name|cjetty
operator|.
name|info
decl_stmt|;
name|String
name|nodeName
init|=
name|props
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
decl_stmt|;
name|boolean
name|active
init|=
name|props
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
operator|.
name|equals
argument_list|(
name|ZkStateReader
operator|.
name|ACTIVE
argument_list|)
decl_stmt|;
name|boolean
name|live
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|liveNodesContain
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|active
operator|&&
name|live
condition|)
block|{
name|shardClients
operator|.
name|add
argument_list|(
name|cjetty
operator|.
name|client
operator|.
name|solrClient
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|queryAndCompare
argument_list|(
name|params
argument_list|,
name|shardClients
argument_list|)
return|;
block|}
comment|/**    * For each Shard, executes a query against each live and active replica of that shard    * and asserts that the results are identical for each replica of the same shard.      * Because results are not compared between replicas of different shards, this method     * should be safe for comparing the results of any query, even if it contains     * "distrib=false", because the replicas should all be identical.    *    * @see AbstractFullDistribZkTestBase#queryAndCompareReplicas(SolrParams, String)    */
DECL|method|queryAndCompareShards
specifier|public
name|void
name|queryAndCompareShards
parameter_list|(
name|SolrParams
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|updateMappingsFromZk
argument_list|(
name|jettys
argument_list|,
name|clients
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|shards
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|shardToJetty
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|shard
range|:
name|shards
control|)
block|{
name|queryAndCompareReplicas
argument_list|(
name|params
argument_list|,
name|shard
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**     * Returns a non-null string if replicas within the same shard do not have a     * consistent number of documents.     */
DECL|method|checkShardConsistency
specifier|protected
name|void
name|checkShardConsistency
parameter_list|(
name|String
name|shard
parameter_list|)
throws|throws
name|Exception
block|{
name|checkShardConsistency
argument_list|(
name|shard
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**     * Returns a non-null string if replicas within the same shard do not have a     * consistent number of documents.    * If expectFailure==false, the exact differences found will be logged since     * this would be an unexpected failure.    * verbose causes extra debugging into to be displayed, even if everything is     * consistent.    */
DECL|method|checkShardConsistency
specifier|protected
name|String
name|checkShardConsistency
parameter_list|(
name|String
name|shard
parameter_list|,
name|boolean
name|expectFailure
parameter_list|,
name|boolean
name|verbose
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|CloudJettyRunner
argument_list|>
name|solrJetties
init|=
name|shardToJetty
operator|.
name|get
argument_list|(
name|shard
argument_list|)
decl_stmt|;
if|if
condition|(
name|solrJetties
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"shard not found:"
operator|+
name|shard
operator|+
literal|" keys:"
operator|+
name|shardToJetty
operator|.
name|keySet
argument_list|()
argument_list|)
throw|;
block|}
name|long
name|num
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|lastNum
init|=
operator|-
literal|1
decl_stmt|;
name|String
name|failMessage
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"check const of "
operator|+
name|shard
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
name|ZkStateReader
name|zkStateReader
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The client count does not match up with the shard count for slice:"
operator|+
name|shard
argument_list|,
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlice
argument_list|(
name|DEFAULT_COLLECTION
argument_list|,
name|shard
argument_list|)
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|solrJetties
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|CloudJettyRunner
name|lastJetty
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CloudJettyRunner
name|cjetty
range|:
name|solrJetties
control|)
block|{
name|ZkNodeProps
name|props
init|=
name|cjetty
operator|.
name|info
decl_stmt|;
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"client"
operator|+
name|cnt
operator|++
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"PROPS:"
operator|+
name|props
argument_list|)
expr_stmt|;
try|try
block|{
name|SolrParams
name|query
init|=
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"distrib"
argument_list|,
literal|"false"
argument_list|,
literal|"tests"
argument_list|,
literal|"checkShardConsistency"
argument_list|)
decl_stmt|;
comment|// "tests" is just a tag that won't do anything except be echoed in logs
name|num
operator|=
name|cjetty
operator|.
name|client
operator|.
name|solrClient
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error contacting client: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error contacting client: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|boolean
name|live
init|=
literal|false
decl_stmt|;
name|String
name|nodeName
init|=
name|props
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|liveNodesContain
argument_list|(
name|nodeName
argument_list|)
condition|)
block|{
name|live
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" live:"
operator|+
name|live
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" num:"
operator|+
name|num
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|boolean
name|active
init|=
name|props
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
operator|.
name|equals
argument_list|(
name|ZkStateReader
operator|.
name|ACTIVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|active
operator|&&
name|live
condition|)
block|{
if|if
condition|(
name|lastNum
operator|>
operator|-
literal|1
operator|&&
name|lastNum
operator|!=
name|num
operator|&&
name|failMessage
operator|==
literal|null
condition|)
block|{
name|failMessage
operator|=
name|shard
operator|+
literal|" is not consistent.  Got "
operator|+
name|lastNum
operator|+
literal|" from "
operator|+
name|lastJetty
operator|.
name|url
operator|+
literal|"lastClient"
operator|+
literal|" and got "
operator|+
name|num
operator|+
literal|" from "
operator|+
name|cjetty
operator|.
name|url
expr_stmt|;
if|if
condition|(
operator|!
name|expectFailure
operator|||
name|verbose
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"######"
operator|+
name|failMessage
argument_list|)
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"distrib"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"fl"
argument_list|,
literal|"id,_version_"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"rows"
argument_list|,
literal|"100000"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"tests"
argument_list|,
literal|"checkShardConsistency/showDiff"
argument_list|)
expr_stmt|;
name|SolrDocumentList
name|lst1
init|=
name|lastJetty
operator|.
name|client
operator|.
name|solrClient
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
decl_stmt|;
name|SolrDocumentList
name|lst2
init|=
name|cjetty
operator|.
name|client
operator|.
name|solrClient
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
decl_stmt|;
name|showDiff
argument_list|(
name|lst1
argument_list|,
name|lst2
argument_list|,
name|lastJetty
operator|.
name|url
argument_list|,
name|cjetty
operator|.
name|url
argument_list|)
expr_stmt|;
block|}
block|}
name|lastNum
operator|=
name|num
expr_stmt|;
name|lastJetty
operator|=
name|cjetty
expr_stmt|;
block|}
block|}
return|return
name|failMessage
return|;
block|}
DECL|method|showCounts
specifier|public
name|void
name|showCounts
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|theShards
init|=
name|shardToJetty
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|shard
range|:
name|theShards
control|)
block|{
name|List
argument_list|<
name|CloudJettyRunner
argument_list|>
name|solrJetties
init|=
name|shardToJetty
operator|.
name|get
argument_list|(
name|shard
argument_list|)
decl_stmt|;
for|for
control|(
name|CloudJettyRunner
name|cjetty
range|:
name|solrJetties
control|)
block|{
name|ZkNodeProps
name|props
init|=
name|cjetty
operator|.
name|info
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"PROPS:"
operator|+
name|props
argument_list|)
expr_stmt|;
try|try
block|{
name|SolrParams
name|query
init|=
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"distrib"
argument_list|,
literal|"false"
argument_list|,
literal|"tests"
argument_list|,
literal|"checkShardConsistency"
argument_list|)
decl_stmt|;
comment|// "tests" is just a
comment|// tag that won't do
comment|// anything except be
comment|// echoed in logs
name|long
name|num
init|=
name|cjetty
operator|.
name|client
operator|.
name|solrClient
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"DOCS:"
operator|+
name|num
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error contacting client: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error contacting client: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|boolean
name|live
init|=
literal|false
decl_stmt|;
name|String
name|nodeName
init|=
name|props
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
decl_stmt|;
name|ZkStateReader
name|zkStateReader
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|liveNodesContain
argument_list|(
name|nodeName
argument_list|)
condition|)
block|{
name|live
operator|=
literal|true
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" live:"
operator|+
name|live
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|enableAutoSoftCommit
specifier|protected
name|void
name|enableAutoSoftCommit
parameter_list|(
name|int
name|time
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Turning on auto soft commit: "
operator|+
name|time
argument_list|)
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|CloudJettyRunner
argument_list|>
name|jettyList
range|:
name|shardToJetty
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|CloudJettyRunner
name|jetty
range|:
name|jettyList
control|)
block|{
name|CoreContainer
name|cores
init|=
operator|(
operator|(
name|SolrDispatchFilter
operator|)
name|jetty
operator|.
name|jetty
operator|.
name|getDispatchFilter
argument_list|()
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getCores
argument_list|()
decl_stmt|;
for|for
control|(
name|SolrCore
name|core
range|:
name|cores
operator|.
name|getCores
argument_list|()
control|)
block|{
operator|(
operator|(
name|DirectUpdateHandler2
operator|)
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|)
operator|.
name|getSoftCommitTracker
argument_list|()
operator|.
name|setTimeUpperBound
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|toStr
specifier|private
name|String
name|toStr
parameter_list|(
name|SolrDocumentList
name|lst
parameter_list|,
name|int
name|maxSz
parameter_list|)
block|{
if|if
condition|(
name|lst
operator|.
name|size
argument_list|()
operator|<=
name|maxSz
condition|)
return|return
name|lst
operator|.
name|toString
argument_list|()
return|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"SolrDocumentList[sz="
operator|+
name|lst
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lst
operator|.
name|size
argument_list|()
operator|!=
name|lst
operator|.
name|getNumFound
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" numFound="
operator|+
name|lst
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|lst
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|maxSz
operator|/
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" , [...] , "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|lst
operator|.
name|subList
argument_list|(
name|lst
operator|.
name|size
argument_list|()
operator|-
name|maxSz
operator|/
literal|2
argument_list|,
name|lst
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|checkForLegalDiff
name|boolean
name|checkForLegalDiff
parameter_list|(
name|SolrDocumentList
name|a
parameter_list|,
name|SolrDocumentList
name|b
parameter_list|,
name|String
name|aName
parameter_list|,
name|String
name|bName
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|addFails
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|deleteFails
parameter_list|)
block|{
comment|// System.err.println("######"+aName+ ": " + toStr(a,10));
comment|//  System.err.println("######"+bName+ ": " + toStr(b,10));
comment|//System.err.println("###### sizes=" + a.size() + "," + b.size());
name|boolean
name|legal
init|=
literal|true
decl_stmt|;
name|Set
argument_list|<
name|SolrDocument
argument_list|>
name|setA
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SolrDocument
name|sdoc
range|:
name|a
control|)
block|{
name|setA
operator|.
name|add
argument_list|(
name|sdoc
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|SolrDocument
argument_list|>
name|setB
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SolrDocument
name|sdoc
range|:
name|b
control|)
block|{
name|setB
operator|.
name|add
argument_list|(
name|sdoc
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|SolrDocument
argument_list|>
name|onlyInA
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|setA
argument_list|)
decl_stmt|;
name|onlyInA
operator|.
name|removeAll
argument_list|(
name|setB
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|SolrDocument
argument_list|>
name|onlyInB
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|setB
argument_list|)
decl_stmt|;
name|onlyInB
operator|.
name|removeAll
argument_list|(
name|setA
argument_list|)
expr_stmt|;
if|if
condition|(
name|onlyInA
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|SolrDocument
name|doc
range|:
name|onlyInA
control|)
block|{
if|if
condition|(
operator|!
name|addFails
operator|.
name|contains
argument_list|(
name|doc
operator|.
name|getFirstValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
condition|)
block|{
name|legal
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"###### Only in "
operator|+
name|aName
operator|+
literal|": "
operator|+
name|onlyInA
operator|+
literal|", but this is expected because we found an add fail for "
operator|+
name|doc
operator|.
name|getFirstValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|onlyInB
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|SolrDocument
name|doc
range|:
name|onlyInB
control|)
block|{
if|if
condition|(
operator|!
name|deleteFails
operator|.
name|contains
argument_list|(
name|doc
operator|.
name|getFirstValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
condition|)
block|{
name|legal
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"###### Only in "
operator|+
name|bName
operator|+
literal|": "
operator|+
name|onlyInB
operator|+
literal|", but this is expected because we found a delete fail for "
operator|+
name|doc
operator|.
name|getFirstValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|legal
return|;
block|}
DECL|method|showDiff
name|Set
argument_list|<
name|Map
argument_list|>
name|showDiff
parameter_list|(
name|SolrDocumentList
name|a
parameter_list|,
name|SolrDocumentList
name|b
parameter_list|,
name|String
name|aName
parameter_list|,
name|String
name|bName
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"######"
operator|+
name|aName
operator|+
literal|": "
operator|+
name|toStr
argument_list|(
name|a
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"######"
operator|+
name|bName
operator|+
literal|": "
operator|+
name|toStr
argument_list|(
name|b
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"###### sizes="
operator|+
name|a
operator|.
name|size
argument_list|()
operator|+
literal|","
operator|+
name|b
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Map
argument_list|>
name|setA
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SolrDocument
name|sdoc
range|:
name|a
control|)
block|{
name|setA
operator|.
name|add
argument_list|(
operator|new
name|HashMap
argument_list|(
name|sdoc
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Map
argument_list|>
name|setB
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SolrDocument
name|sdoc
range|:
name|b
control|)
block|{
name|setB
operator|.
name|add
argument_list|(
operator|new
name|HashMap
argument_list|(
name|sdoc
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Map
argument_list|>
name|onlyInA
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|setA
argument_list|)
decl_stmt|;
name|onlyInA
operator|.
name|removeAll
argument_list|(
name|setB
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Map
argument_list|>
name|onlyInB
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|setB
argument_list|)
decl_stmt|;
name|onlyInB
operator|.
name|removeAll
argument_list|(
name|setA
argument_list|)
expr_stmt|;
if|if
condition|(
name|onlyInA
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"###### Only in "
operator|+
name|aName
operator|+
literal|": "
operator|+
name|onlyInA
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|onlyInB
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"###### Only in "
operator|+
name|bName
operator|+
literal|": "
operator|+
name|onlyInB
argument_list|)
expr_stmt|;
block|}
name|onlyInA
operator|.
name|addAll
argument_list|(
name|onlyInB
argument_list|)
expr_stmt|;
return|return
name|onlyInA
return|;
block|}
comment|/* Checks both shard replcia consistency and against the control shard.   * The test will be failed if differences are found.   */
DECL|method|checkShardConsistency
specifier|protected
name|void
name|checkShardConsistency
parameter_list|()
throws|throws
name|Exception
block|{
name|checkShardConsistency
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/* Checks shard consistency and optionally checks against the control shard.    * The test will be failed if differences are found.    */
DECL|method|checkShardConsistency
specifier|protected
name|void
name|checkShardConsistency
parameter_list|(
name|boolean
name|checkVsControl
parameter_list|,
name|boolean
name|verbose
parameter_list|)
throws|throws
name|Exception
block|{
name|checkShardConsistency
argument_list|(
name|checkVsControl
argument_list|,
name|verbose
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/* Checks shard consistency and optionally checks against the control shard.    * The test will be failed if differences are found.    */
DECL|method|checkShardConsistency
specifier|protected
name|void
name|checkShardConsistency
parameter_list|(
name|boolean
name|checkVsControl
parameter_list|,
name|boolean
name|verbose
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|addFails
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|deleteFails
parameter_list|)
throws|throws
name|Exception
block|{
name|updateMappingsFromZk
argument_list|(
name|jettys
argument_list|,
name|clients
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|theShards
init|=
name|shardToJetty
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|String
name|failMessage
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|shard
range|:
name|theShards
control|)
block|{
name|String
name|shardFailMessage
init|=
name|checkShardConsistency
argument_list|(
name|shard
argument_list|,
literal|false
argument_list|,
name|verbose
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardFailMessage
operator|!=
literal|null
operator|&&
name|failMessage
operator|==
literal|null
condition|)
block|{
name|failMessage
operator|=
name|shardFailMessage
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failMessage
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
name|failMessage
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|checkVsControl
condition|)
return|return;
name|SolrParams
name|q
init|=
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"tests"
argument_list|,
literal|"checkShardConsistency(vsControl)"
argument_list|)
decl_stmt|;
comment|// add a tag to aid in debugging via logs
name|SolrDocumentList
name|controlDocList
init|=
name|controlClient
operator|.
name|query
argument_list|(
name|q
argument_list|)
operator|.
name|getResults
argument_list|()
decl_stmt|;
name|long
name|controlDocs
init|=
name|controlDocList
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|SolrDocumentList
name|cloudDocList
init|=
name|cloudClient
operator|.
name|query
argument_list|(
name|q
argument_list|)
operator|.
name|getResults
argument_list|()
decl_stmt|;
name|long
name|cloudClientDocs
init|=
name|cloudDocList
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
comment|// now check that the right # are on each shard
name|theShards
operator|=
name|shardToJetty
operator|.
name|keySet
argument_list|()
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|theShards
control|)
block|{
name|int
name|times
init|=
name|shardToJetty
operator|.
name|get
argument_list|(
name|s
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|times
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|CloudJettyRunner
name|cjetty
init|=
name|shardToJetty
operator|.
name|get
argument_list|(
name|s
argument_list|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ZkNodeProps
name|props
init|=
name|cjetty
operator|.
name|info
decl_stmt|;
name|SolrServer
name|client
init|=
name|cjetty
operator|.
name|client
operator|.
name|solrClient
decl_stmt|;
name|boolean
name|active
init|=
name|props
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
operator|.
name|equals
argument_list|(
name|ZkStateReader
operator|.
name|ACTIVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|active
condition|)
block|{
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"distrib"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|long
name|results
init|=
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
operator|new
name|ZkCoreNodeProps
argument_list|(
name|props
argument_list|)
operator|.
name|getCoreUrl
argument_list|()
operator|+
literal|" : "
operator|+
name|results
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"shard:"
operator|+
name|props
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|cnt
operator|+=
name|results
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// if we have a problem, try the next one
if|if
condition|(
name|i
operator|==
name|times
operator|-
literal|1
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|controlDocs
operator|!=
name|cnt
operator|||
name|cloudClientDocs
operator|!=
name|controlDocs
condition|)
block|{
name|String
name|msg
init|=
literal|"document count mismatch.  control="
operator|+
name|controlDocs
operator|+
literal|" sum(shards)="
operator|+
name|cnt
operator|+
literal|" cloudClient="
operator|+
name|cloudClientDocs
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|boolean
name|shouldFail
init|=
name|compareResults
argument_list|(
name|controlDocs
argument_list|,
name|cloudClientDocs
argument_list|,
name|addFails
argument_list|,
name|deleteFails
argument_list|)
decl_stmt|;
if|if
condition|(
name|shouldFail
condition|)
block|{
name|fail
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|compareResults
specifier|protected
name|boolean
name|compareResults
parameter_list|(
name|long
name|controlDocs
parameter_list|,
name|long
name|cloudClientDocs
parameter_list|)
throws|throws
name|SolrServerException
block|{
return|return
name|compareResults
argument_list|(
name|controlDocs
argument_list|,
name|cloudClientDocs
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|compareResults
specifier|protected
name|boolean
name|compareResults
parameter_list|(
name|long
name|controlDocs
parameter_list|,
name|long
name|cloudClientDocs
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|addFails
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|deleteFails
parameter_list|)
throws|throws
name|SolrServerException
block|{
name|boolean
name|shouldFail
init|=
literal|false
decl_stmt|;
name|SolrParams
name|q
decl_stmt|;
name|SolrDocumentList
name|controlDocList
decl_stmt|;
name|SolrDocumentList
name|cloudDocList
decl_stmt|;
comment|// re-execute the query getting ids
name|q
operator|=
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"100000"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"tests"
argument_list|,
literal|"checkShardConsistency(vsControl)/getIds"
argument_list|)
expr_stmt|;
comment|// add a tag to aid in debugging via logs
name|controlDocList
operator|=
name|controlClient
operator|.
name|query
argument_list|(
name|q
argument_list|)
operator|.
name|getResults
argument_list|()
expr_stmt|;
if|if
condition|(
name|controlDocs
operator|!=
name|controlDocList
operator|.
name|getNumFound
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Something changed! control now "
operator|+
name|controlDocList
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
name|cloudDocList
operator|=
name|cloudClient
operator|.
name|query
argument_list|(
name|q
argument_list|)
operator|.
name|getResults
argument_list|()
expr_stmt|;
if|if
condition|(
name|cloudClientDocs
operator|!=
name|cloudDocList
operator|.
name|getNumFound
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Something changed! cloudClient now "
operator|+
name|cloudDocList
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
if|if
condition|(
name|addFails
operator|!=
literal|null
operator|||
name|deleteFails
operator|!=
literal|null
condition|)
block|{
name|boolean
name|legal
init|=
name|checkForLegalDiff
argument_list|(
name|controlDocList
argument_list|,
name|cloudDocList
argument_list|,
literal|"controlDocList"
argument_list|,
literal|"cloudDocList"
argument_list|,
name|addFails
argument_list|,
name|deleteFails
argument_list|)
decl_stmt|;
if|if
condition|(
name|legal
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|Set
argument_list|<
name|Map
argument_list|>
name|differences
init|=
name|showDiff
argument_list|(
name|controlDocList
argument_list|,
name|cloudDocList
argument_list|,
literal|"controlDocList"
argument_list|,
literal|"cloudDocList"
argument_list|)
decl_stmt|;
comment|// get versions for the mismatched ids
name|boolean
name|foundId
init|=
literal|false
decl_stmt|;
name|StringBuilder
name|ids
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"id:("
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
name|doc
range|:
name|differences
control|)
block|{
name|ids
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|doc
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|foundId
operator|=
literal|true
expr_stmt|;
block|}
name|ids
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|foundId
condition|)
block|{
comment|// get versions for those ids that don't match
name|q
operator|=
name|params
argument_list|(
literal|"q"
argument_list|,
name|ids
operator|.
name|toString
argument_list|()
argument_list|,
literal|"rows"
argument_list|,
literal|"100000"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,_version_"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|,
literal|"tests"
argument_list|,
literal|"checkShardConsistency(vsControl)/getVers"
argument_list|)
expr_stmt|;
comment|// add a tag to aid in
comment|// debugging via logs
name|SolrDocumentList
name|a
init|=
name|controlClient
operator|.
name|query
argument_list|(
name|q
argument_list|)
operator|.
name|getResults
argument_list|()
decl_stmt|;
name|SolrDocumentList
name|b
init|=
name|cloudClient
operator|.
name|query
argument_list|(
name|q
argument_list|)
operator|.
name|getResults
argument_list|()
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"controlClient :"
operator|+
name|a
operator|+
literal|"\n\tcloudClient :"
operator|+
name|b
argument_list|)
expr_stmt|;
block|}
return|return
name|shouldFail
return|;
block|}
DECL|method|getClient
specifier|protected
name|SolrServer
name|getClient
parameter_list|(
name|String
name|nodeName
parameter_list|)
block|{
for|for
control|(
name|CloudJettyRunner
name|cjetty
range|:
name|cloudJettys
control|)
block|{
name|CloudSolrServerClient
name|client
init|=
name|cjetty
operator|.
name|client
decl_stmt|;
if|if
condition|(
name|client
operator|.
name|shardName
operator|.
name|equals
argument_list|(
name|nodeName
argument_list|)
condition|)
block|{
return|return
name|client
operator|.
name|solrClient
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|assertDocCounts
specifier|protected
name|void
name|assertDocCounts
parameter_list|(
name|boolean
name|verbose
parameter_list|)
throws|throws
name|Exception
block|{
comment|// TODO: as we create the clients, we should build a map from shard to
comment|// node/client
comment|// and node/client to shard?
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"control docs:"
operator|+
name|controlClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
name|long
name|controlCount
init|=
name|controlClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
comment|// do some really inefficient mapping...
name|ZkStateReader
name|zk
init|=
operator|new
name|ZkStateReader
argument_list|(
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|,
literal|10000
argument_list|,
name|AbstractZkTestCase
operator|.
name|TIMEOUT
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
literal|null
decl_stmt|;
name|ClusterState
name|clusterState
decl_stmt|;
try|try
block|{
name|zk
operator|.
name|createClusterStateWatchersAndUpdate
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|zk
operator|.
name|getClusterState
argument_list|()
expr_stmt|;
name|slices
operator|=
name|clusterState
operator|.
name|getSlicesMap
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|zk
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|slices
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not find collection "
operator|+
name|DEFAULT_COLLECTION
operator|+
literal|" in "
operator|+
name|clusterState
operator|.
name|getCollections
argument_list|()
argument_list|)
throw|;
block|}
for|for
control|(
name|CloudJettyRunner
name|cjetty
range|:
name|cloudJettys
control|)
block|{
name|CloudSolrServerClient
name|client
init|=
name|cjetty
operator|.
name|client
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slice
range|:
name|slices
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|theShards
init|=
name|slice
operator|.
name|getValue
argument_list|()
operator|.
name|getReplicasMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|shard
range|:
name|theShards
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|shardName
init|=
operator|new
name|URI
argument_list|(
operator|(
operator|(
name|HttpSolrServer
operator|)
name|client
operator|.
name|solrClient
operator|)
operator|.
name|getBaseURL
argument_list|()
argument_list|)
operator|.
name|getPort
argument_list|()
operator|+
literal|"_solr_"
decl_stmt|;
if|if
condition|(
name|verbose
operator|&&
name|shard
operator|.
name|getKey
argument_list|()
operator|.
name|endsWith
argument_list|(
name|shardName
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"shard:"
operator|+
name|slice
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|shard
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ZkStateReader
name|zkStateReader
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|long
name|count
init|=
literal|0
decl_stmt|;
name|String
name|currentState
init|=
name|cjetty
operator|.
name|info
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentState
operator|!=
literal|null
operator|&&
name|currentState
operator|.
name|equals
argument_list|(
name|ZkStateReader
operator|.
name|ACTIVE
argument_list|)
operator|&&
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|liveNodesContain
argument_list|(
name|cjetty
operator|.
name|info
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
argument_list|)
condition|)
block|{
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"distrib"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|count
operator|=
name|client
operator|.
name|solrClient
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"client docs:"
operator|+
name|count
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"control docs:"
operator|+
name|controlClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Doc Counts do not add up"
argument_list|,
name|controlCount
argument_list|,
name|cloudClient
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|queryServer
specifier|protected
name|QueryResponse
name|queryServer
parameter_list|(
name|ModifiableSolrParams
name|params
parameter_list|)
throws|throws
name|SolrServerException
block|{
if|if
condition|(
name|r
operator|.
name|nextBoolean
argument_list|()
condition|)
name|params
operator|.
name|set
argument_list|(
literal|"collection"
argument_list|,
name|DEFAULT_COLLECTION
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|cloudClient
operator|.
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
return|return
name|rsp
return|;
block|}
DECL|class|StopableThread
specifier|static
specifier|abstract
class|class
name|StopableThread
extends|extends
name|Thread
block|{
DECL|method|StopableThread
specifier|public
name|StopableThread
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|safeStop
specifier|public
specifier|abstract
name|void
name|safeStop
parameter_list|()
function_decl|;
block|}
DECL|class|StopableSearchThread
class|class
name|StopableSearchThread
extends|extends
name|StopableThread
block|{
DECL|field|stop
specifier|private
specifier|volatile
name|boolean
name|stop
init|=
literal|false
decl_stmt|;
DECL|field|queryFails
specifier|protected
specifier|final
name|AtomicInteger
name|queryFails
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|QUERIES
specifier|private
name|String
index|[]
name|QUERIES
init|=
operator|new
name|String
index|[]
block|{
literal|"to come"
block|,
literal|"their country"
block|,
literal|"aid"
block|,
literal|"co*"
block|}
decl_stmt|;
DECL|method|StopableSearchThread
specifier|public
name|StopableSearchThread
parameter_list|()
block|{
name|super
argument_list|(
literal|"StopableSearchThread"
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Random
name|random
init|=
name|random
argument_list|()
decl_stmt|;
name|int
name|numSearches
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
operator|&&
operator|!
name|stop
condition|)
block|{
name|numSearches
operator|++
expr_stmt|;
try|try
block|{
comment|//to come to the aid of their country.
name|cloudClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
name|QUERIES
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|QUERIES
operator|.
name|length
argument_list|)
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"QUERY REQUEST FAILED:"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|SolrServerException
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ROOT CAUSE:"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SolrServerException
operator|)
name|e
operator|)
operator|.
name|getRootCause
argument_list|()
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|queryFails
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|4000
argument_list|)
operator|+
literal|300
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"num searches done:"
operator|+
name|numSearches
operator|+
literal|" with "
operator|+
name|queryFails
operator|+
literal|" fails"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|safeStop
specifier|public
name|void
name|safeStop
parameter_list|()
block|{
name|stop
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getFails
specifier|public
name|int
name|getFails
parameter_list|()
block|{
return|return
name|queryFails
operator|.
name|get
argument_list|()
return|;
block|}
block|}
empty_stmt|;
DECL|method|waitForThingsToLevelOut
specifier|public
name|void
name|waitForThingsToLevelOut
parameter_list|(
name|int
name|waitForRecTimeSeconds
parameter_list|)
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Wait for recoveries to finish - wait "
operator|+
name|waitForRecTimeSeconds
operator|+
literal|" for each attempt"
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
name|boolean
name|retry
init|=
literal|false
decl_stmt|;
do|do
block|{
name|waitForRecoveriesToFinish
argument_list|(
name|VERBOSE
argument_list|,
name|waitForRecTimeSeconds
argument_list|)
expr_stmt|;
try|try
block|{
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|// we don't care if this commit fails on some nodes
block|}
name|updateMappingsFromZk
argument_list|(
name|jettys
argument_list|,
name|clients
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|theShards
init|=
name|shardToJetty
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|String
name|failMessage
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|shard
range|:
name|theShards
control|)
block|{
name|failMessage
operator|=
name|checkShardConsistency
argument_list|(
name|shard
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|failMessage
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"shard inconsistency - waiting ..."
argument_list|)
expr_stmt|;
name|retry
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|retry
operator|=
literal|false
expr_stmt|;
block|}
name|cnt
operator|++
expr_stmt|;
if|if
condition|(
name|cnt
operator|>
literal|20
condition|)
break|break;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|retry
condition|)
do|;
block|}
DECL|method|waitForNoShardInconsistency
specifier|public
name|void
name|waitForNoShardInconsistency
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Wait for no shard inconsistency"
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
name|boolean
name|retry
init|=
literal|false
decl_stmt|;
do|do
block|{
try|try
block|{
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|// we don't care if this commit fails on some nodes
block|}
name|updateMappingsFromZk
argument_list|(
name|jettys
argument_list|,
name|clients
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|theShards
init|=
name|shardToJetty
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|String
name|failMessage
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|shard
range|:
name|theShards
control|)
block|{
name|failMessage
operator|=
name|checkShardConsistency
argument_list|(
name|shard
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|failMessage
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"shard inconsistency - waiting ..."
argument_list|)
expr_stmt|;
name|retry
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|retry
operator|=
literal|false
expr_stmt|;
block|}
name|cnt
operator|++
expr_stmt|;
if|if
condition|(
name|cnt
operator|>
literal|20
condition|)
break|break;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|retry
condition|)
do|;
block|}
DECL|method|doQuery
name|void
name|doQuery
parameter_list|(
name|String
name|expectedDocs
parameter_list|,
name|String
modifier|...
name|queryParams
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|expectedIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|expectedDocs
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|QueryResponse
name|rsp
init|=
name|cloudClient
operator|.
name|query
argument_list|(
name|params
argument_list|(
name|queryParams
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|obtainedIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SolrDocument
name|doc
range|:
name|rsp
operator|.
name|getResults
argument_list|()
control|)
block|{
name|obtainedIds
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|doc
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedIds
argument_list|,
name|obtainedIds
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|VERBOSE
operator|||
name|printLayoutOnTearDown
condition|)
block|{
name|super
operator|.
name|printLayout
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|commondCloudSolrServer
operator|!=
literal|null
condition|)
block|{
name|commondCloudSolrServer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|controlClient
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|HttpSolrServer
operator|)
name|controlClient
operator|)
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cloudClient
operator|!=
literal|null
condition|)
block|{
name|cloudClient
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|controlClientCloud
operator|!=
literal|null
condition|)
block|{
name|controlClientCloud
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"zkHost"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"numShards"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|commit
specifier|protected
name|void
name|commit
parameter_list|()
throws|throws
name|Exception
block|{
name|controlClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|cloudClient
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|destroyServers
specifier|protected
name|void
name|destroyServers
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|controlJetty
operator|!=
literal|null
condition|)
block|{
name|ChaosMonkey
operator|.
name|stop
argument_list|(
name|controlJetty
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|jettys
control|)
block|{
try|try
block|{
name|ChaosMonkey
operator|.
name|stop
argument_list|(
name|jetty
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|clients
operator|.
name|clear
argument_list|()
expr_stmt|;
name|jettys
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|createCollection
specifier|protected
name|CollectionAdminResponse
name|createCollection
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|int
name|numShards
parameter_list|,
name|int
name|replicationFactor
parameter_list|,
name|int
name|maxShardsPerNode
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
return|return
name|createCollection
argument_list|(
literal|null
argument_list|,
name|collectionName
argument_list|,
name|numShards
argument_list|,
name|replicationFactor
argument_list|,
name|maxShardsPerNode
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createCollection
specifier|protected
name|CollectionAdminResponse
name|createCollection
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|collectionInfos
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|collectionProps
parameter_list|,
name|SolrServer
name|client
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
return|return
name|createCollection
argument_list|(
name|collectionInfos
argument_list|,
name|collectionName
argument_list|,
name|collectionProps
argument_list|,
name|client
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|// TODO: Use CollectionAdminRequest#createCollection() instead of a raw request
DECL|method|createCollection
specifier|protected
name|CollectionAdminResponse
name|createCollection
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|collectionInfos
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|collectionProps
parameter_list|,
name|SolrServer
name|client
parameter_list|,
name|String
name|confSetName
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|collectionProps
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
name|params
operator|.
name|set
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Integer
name|numShards
init|=
operator|(
name|Integer
operator|)
name|collectionProps
operator|.
name|get
argument_list|(
name|NUM_SLICES
argument_list|)
decl_stmt|;
if|if
condition|(
name|numShards
operator|==
literal|null
condition|)
block|{
name|String
name|shardNames
init|=
operator|(
name|String
operator|)
name|collectionProps
operator|.
name|get
argument_list|(
name|SHARDS_PROP
argument_list|)
decl_stmt|;
name|numShards
operator|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|shardNames
argument_list|,
literal|','
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|Integer
name|replicationFactor
init|=
operator|(
name|Integer
operator|)
name|collectionProps
operator|.
name|get
argument_list|(
name|REPLICATION_FACTOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|numShards
operator|==
literal|null
condition|)
block|{
name|numShards
operator|=
operator|(
name|Integer
operator|)
name|OverseerCollectionProcessor
operator|.
name|COLL_PROPS
operator|.
name|get
argument_list|(
name|REPLICATION_FACTOR
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|confSetName
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
literal|"collection.configName"
argument_list|,
name|confSetName
argument_list|)
expr_stmt|;
block|}
name|int
name|clientIndex
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|numShards
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|replicationFactor
argument_list|)
expr_stmt|;
if|if
condition|(
name|collectionInfos
operator|!=
literal|null
condition|)
block|{
name|collectionInfos
operator|.
name|put
argument_list|(
name|collectionName
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|SolrRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|CollectionAdminResponse
name|res
init|=
operator|new
name|CollectionAdminResponse
argument_list|()
decl_stmt|;
if|if
condition|(
name|client
operator|==
literal|null
condition|)
block|{
specifier|final
name|String
name|baseUrl
init|=
name|getBaseUrl
argument_list|(
operator|(
name|HttpSolrServer
operator|)
name|clients
operator|.
name|get
argument_list|(
name|clientIndex
argument_list|)
argument_list|)
decl_stmt|;
name|SolrServer
name|server
init|=
name|createNewSolrServer
argument_list|(
literal|""
argument_list|,
name|baseUrl
argument_list|)
decl_stmt|;
name|res
operator|.
name|setResponse
argument_list|(
name|server
operator|.
name|request
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|res
operator|.
name|setResponse
argument_list|(
name|client
operator|.
name|request
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
DECL|method|runCollectionAdminCommand
specifier|protected
name|void
name|runCollectionAdminCommand
parameter_list|(
name|ModifiableSolrParams
name|params
parameter_list|)
block|{
empty_stmt|;
block|}
DECL|method|createCollection
specifier|protected
name|CollectionAdminResponse
name|createCollection
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|collectionInfos
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|int
name|numShards
parameter_list|,
name|int
name|replicationFactor
parameter_list|,
name|int
name|maxShardsPerNode
parameter_list|,
name|SolrServer
name|client
parameter_list|,
name|String
name|createNodeSetStr
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
return|return
name|createCollection
argument_list|(
name|collectionInfos
argument_list|,
name|collectionName
argument_list|,
name|ZkNodeProps
operator|.
name|makeMap
argument_list|(
name|NUM_SLICES
argument_list|,
name|numShards
argument_list|,
name|REPLICATION_FACTOR
argument_list|,
name|replicationFactor
argument_list|,
name|CREATE_NODE_SET
argument_list|,
name|createNodeSetStr
argument_list|,
name|MAX_SHARDS_PER_NODE
argument_list|,
name|maxShardsPerNode
argument_list|)
argument_list|,
name|client
argument_list|)
return|;
block|}
DECL|method|createCollection
specifier|protected
name|CollectionAdminResponse
name|createCollection
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|collectionInfos
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|int
name|numShards
parameter_list|,
name|int
name|replicationFactor
parameter_list|,
name|int
name|maxShardsPerNode
parameter_list|,
name|SolrServer
name|client
parameter_list|,
name|String
name|createNodeSetStr
parameter_list|,
name|String
name|configName
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
return|return
name|createCollection
argument_list|(
name|collectionInfos
argument_list|,
name|collectionName
argument_list|,
name|ZkNodeProps
operator|.
name|makeMap
argument_list|(
name|NUM_SLICES
argument_list|,
name|numShards
argument_list|,
name|REPLICATION_FACTOR
argument_list|,
name|replicationFactor
argument_list|,
name|CREATE_NODE_SET
argument_list|,
name|createNodeSetStr
argument_list|,
name|MAX_SHARDS_PER_NODE
argument_list|,
name|maxShardsPerNode
argument_list|)
argument_list|,
name|client
argument_list|,
name|configName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createNewSolrServer
specifier|protected
name|SolrServer
name|createNewSolrServer
parameter_list|(
name|int
name|port
parameter_list|)
block|{
try|try
block|{
comment|// setup the server...
name|String
name|baseUrl
init|=
name|buildUrl
argument_list|(
name|port
argument_list|)
decl_stmt|;
name|String
name|url
init|=
name|baseUrl
operator|+
operator|(
name|baseUrl
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
literal|""
else|:
literal|"/"
operator|)
operator|+
name|DEFAULT_COLLECTION
decl_stmt|;
name|HttpSolrServer
name|s
init|=
operator|new
name|HttpSolrServer
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|s
operator|.
name|setConnectionTimeout
argument_list|(
name|DEFAULT_CONNECTION_TIMEOUT
argument_list|)
expr_stmt|;
name|s
operator|.
name|setSoTimeout
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
name|s
operator|.
name|setDefaultMaxConnectionsPerHost
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|s
operator|.
name|setMaxTotalConnections
argument_list|(
literal|100
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|createNewSolrServer
specifier|protected
name|SolrServer
name|createNewSolrServer
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|baseUrl
parameter_list|)
block|{
try|try
block|{
comment|// setup the server...
name|HttpSolrServer
name|s
init|=
operator|new
name|HttpSolrServer
argument_list|(
name|baseUrl
operator|+
literal|"/"
operator|+
name|collection
argument_list|)
decl_stmt|;
name|s
operator|.
name|setConnectionTimeout
argument_list|(
name|DEFAULT_CONNECTION_TIMEOUT
argument_list|)
expr_stmt|;
name|s
operator|.
name|setDefaultMaxConnectionsPerHost
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|s
operator|.
name|setMaxTotalConnections
argument_list|(
literal|100
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|getBaseUrl
specifier|protected
name|String
name|getBaseUrl
parameter_list|(
name|HttpSolrServer
name|client
parameter_list|)
block|{
return|return
name|client
operator|.
name|getBaseURL
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|client
operator|.
name|getBaseURL
argument_list|()
operator|.
name|length
argument_list|()
operator|-
name|DEFAULT_COLLECTION
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|getDoc
specifier|protected
name|SolrInputDocument
name|getDoc
parameter_list|(
name|Object
modifier|...
name|fields
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|addFields
argument_list|(
name|doc
argument_list|,
name|fields
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
DECL|method|checkCollectionExpectations
specifier|private
name|String
name|checkCollectionExpectations
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|numShardsNumReplicaList
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|nodesAllowedToRunShards
parameter_list|)
block|{
name|ClusterState
name|clusterState
init|=
name|getCommonCloudSolrServer
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|int
name|expectedSlices
init|=
name|numShardsNumReplicaList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// The Math.min thing is here, because we expect replication-factor to be reduced to if there are not enough live nodes to spread all shards of a collection over different nodes
name|int
name|expectedShardsPerSlice
init|=
name|numShardsNumReplicaList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|int
name|expectedTotalShards
init|=
name|expectedSlices
operator|*
name|expectedShardsPerSlice
decl_stmt|;
comment|//      Map<String,DocCollection> collections = clusterState
comment|//          .getCollectionStates();
if|if
condition|(
name|clusterState
operator|.
name|hasCollection
argument_list|(
name|collectionName
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
operator|.
name|getSlicesMap
argument_list|()
decl_stmt|;
comment|// did we find expectedSlices slices/shards?
if|if
condition|(
name|slices
operator|.
name|size
argument_list|()
operator|!=
name|expectedSlices
condition|)
block|{
return|return
literal|"Found new collection "
operator|+
name|collectionName
operator|+
literal|", but mismatch on number of slices. Expected: "
operator|+
name|expectedSlices
operator|+
literal|", actual: "
operator|+
name|slices
operator|.
name|size
argument_list|()
return|;
block|}
name|int
name|totalShards
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|sliceName
range|:
name|slices
operator|.
name|keySet
argument_list|()
control|)
block|{
for|for
control|(
name|Replica
name|replica
range|:
name|slices
operator|.
name|get
argument_list|(
name|sliceName
argument_list|)
operator|.
name|getReplicas
argument_list|()
control|)
block|{
if|if
condition|(
name|nodesAllowedToRunShards
operator|!=
literal|null
operator|&&
operator|!
name|nodesAllowedToRunShards
operator|.
name|contains
argument_list|(
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|"Shard "
operator|+
name|replica
operator|.
name|getName
argument_list|()
operator|+
literal|" created on node "
operator|+
name|replica
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" not allowed to run shards for the created collection "
operator|+
name|collectionName
return|;
block|}
block|}
name|totalShards
operator|+=
name|slices
operator|.
name|get
argument_list|(
name|sliceName
argument_list|)
operator|.
name|getReplicas
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|totalShards
operator|!=
name|expectedTotalShards
condition|)
block|{
return|return
literal|"Found new collection "
operator|+
name|collectionName
operator|+
literal|" with correct number of slices, but mismatch on number of shards. Expected: "
operator|+
name|expectedTotalShards
operator|+
literal|", actual: "
operator|+
name|totalShards
return|;
block|}
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
literal|"Could not find new collection "
operator|+
name|collectionName
return|;
block|}
block|}
DECL|method|checkForCollection
specifier|protected
name|void
name|checkForCollection
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|numShardsNumReplicaList
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|nodesAllowedToRunShards
parameter_list|)
throws|throws
name|Exception
block|{
comment|// check for an expectedSlices new collection - we poll the state
name|long
name|timeoutAt
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|120000
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|String
name|checkResult
init|=
literal|"Didnt get to perform a single check"
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeoutAt
condition|)
block|{
name|checkResult
operator|=
name|checkCollectionExpectations
argument_list|(
name|collectionName
argument_list|,
name|numShardsNumReplicaList
argument_list|,
name|nodesAllowedToRunShards
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkResult
operator|==
literal|null
condition|)
block|{
name|success
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|super
operator|.
name|printLayout
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|checkResult
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|commondCloudSolrServer
specifier|private
name|CloudSolrServer
name|commondCloudSolrServer
decl_stmt|;
DECL|method|getCommonCloudSolrServer
specifier|protected
name|CloudSolrServer
name|getCommonCloudSolrServer
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|commondCloudSolrServer
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|commondCloudSolrServer
operator|=
operator|new
name|CloudSolrServer
argument_list|(
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|commondCloudSolrServer
operator|.
name|getLbServer
argument_list|()
operator|.
name|setConnectionTimeout
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
name|commondCloudSolrServer
operator|.
name|setParallelUpdates
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|commondCloudSolrServer
operator|.
name|setDefaultCollection
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
expr_stmt|;
name|commondCloudSolrServer
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|commondCloudSolrServer
return|;
block|}
DECL|method|getUrlFromZk
specifier|public
specifier|static
name|String
name|getUrlFromZk
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|String
name|collection
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collection
argument_list|)
operator|.
name|getSlicesMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|slices
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Could not find collection:"
operator|+
name|collection
argument_list|)
throw|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|entry
range|:
name|slices
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Slice
name|slice
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|shards
init|=
name|slice
operator|.
name|getReplicasMap
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
argument_list|>
name|shardEntries
init|=
name|shards
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|shardEntry
range|:
name|shardEntries
control|)
block|{
specifier|final
name|ZkNodeProps
name|node
init|=
name|shardEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|clusterState
operator|.
name|liveNodesContain
argument_list|(
name|node
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|ZkCoreNodeProps
operator|.
name|getCoreUrl
argument_list|(
name|node
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|)
argument_list|,
name|collection
argument_list|)
return|;
comment|//new ZkCoreNodeProps(node).getCoreUrl();
block|}
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not find a live node for collection:"
operator|+
name|collection
argument_list|)
throw|;
block|}
DECL|method|waitForNon403or404or503
specifier|public
specifier|static
name|void
name|waitForNon403or404or503
parameter_list|(
name|HttpSolrServer
name|collectionClient
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrException
name|exp
init|=
literal|null
decl_stmt|;
name|long
name|timeoutAt
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|30000
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeoutAt
condition|)
block|{
name|boolean
name|missing
init|=
literal|false
decl_stmt|;
try|try
block|{
name|collectionClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|e
operator|.
name|code
argument_list|()
operator|==
literal|403
operator|||
name|e
operator|.
name|code
argument_list|()
operator|==
literal|503
operator|||
name|e
operator|.
name|code
argument_list|()
operator|==
literal|404
operator|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
name|exp
operator|=
name|e
expr_stmt|;
name|missing
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|missing
condition|)
block|{
return|return;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"Could not find the new collection - "
operator|+
name|exp
operator|.
name|code
argument_list|()
operator|+
literal|" : "
operator|+
name|collectionClient
operator|.
name|getBaseURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
