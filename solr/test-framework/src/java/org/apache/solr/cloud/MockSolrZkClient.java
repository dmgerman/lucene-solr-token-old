begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import
begin_comment
comment|// does not yet mock zkclient at all
end_comment
begin_class
DECL|class|MockSolrZkClient
specifier|public
class|class
name|MockSolrZkClient
extends|extends
name|SolrZkClient
block|{
DECL|method|MockSolrZkClient
specifier|public
name|MockSolrZkClient
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|exists
specifier|public
name|Boolean
name|exists
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
name|boolean
name|retryOnConnLoss
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getData
specifier|public
name|byte
index|[]
name|getData
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|Watcher
name|watcher
parameter_list|,
specifier|final
name|Stat
name|stat
parameter_list|,
name|boolean
name|retryOnConnLoss
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
literal|null
return|;
block|}
block|}
end_class
end_unit
