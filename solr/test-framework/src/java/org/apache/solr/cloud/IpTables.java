begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/**  * To use, tests must be able to run iptables, eg sudo chmod u+s iptables  */
end_comment
begin_class
DECL|class|IpTables
specifier|public
class|class
name|IpTables
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|ENABLED
specifier|private
specifier|static
specifier|final
name|boolean
name|ENABLED
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"solr.tests.use.iptables"
argument_list|)
decl_stmt|;
DECL|field|BLOCK_PORTS
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|BLOCK_PORTS
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|blockPort
specifier|public
specifier|static
name|void
name|blockPort
parameter_list|(
name|int
name|port
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|ENABLED
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Block port with iptables: "
operator|+
name|port
argument_list|)
expr_stmt|;
name|BLOCK_PORTS
operator|.
name|add
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|runCmd
argument_list|(
operator|(
literal|"iptables -A INPUT -p tcp --dport "
operator|+
name|port
operator|+
literal|" -j DROP"
operator|)
operator|.
name|split
argument_list|(
literal|"\\s"
argument_list|)
argument_list|)
expr_stmt|;
name|runCmd
argument_list|(
operator|(
literal|"iptables -A OUTPUT -p tcp --dport "
operator|+
name|port
operator|+
literal|" -j DROP"
operator|)
operator|.
name|split
argument_list|(
literal|"\\s"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|unblockPort
specifier|public
specifier|static
name|void
name|unblockPort
parameter_list|(
name|int
name|port
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|ENABLED
operator|&&
name|BLOCK_PORTS
operator|.
name|contains
argument_list|(
name|port
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Unblock port with iptables: "
operator|+
name|port
argument_list|)
expr_stmt|;
name|runCmd
argument_list|(
operator|(
literal|"iptables -D INPUT -p tcp --dport "
operator|+
name|port
operator|+
literal|" -j DROP"
operator|)
operator|.
name|split
argument_list|(
literal|"\\s"
argument_list|)
argument_list|)
expr_stmt|;
name|runCmd
argument_list|(
operator|(
literal|"iptables -D OUTPUT -p tcp --dport "
operator|+
name|port
operator|+
literal|" -j DROP"
operator|)
operator|.
name|split
argument_list|(
literal|"\\s"
argument_list|)
argument_list|)
expr_stmt|;
name|BLOCK_PORTS
operator|.
name|remove
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|unblockAllPorts
specifier|public
specifier|static
name|void
name|unblockAllPorts
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|ENABLED
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Unblocking any ports previously blocked with iptables..."
argument_list|)
expr_stmt|;
specifier|final
name|Integer
index|[]
name|ports
init|=
name|BLOCK_PORTS
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|BLOCK_PORTS
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|Integer
name|port
range|:
name|ports
control|)
block|{
name|IpTables
operator|.
name|unblockPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|runCmd
specifier|private
specifier|static
name|void
name|runCmd
parameter_list|(
name|String
modifier|...
name|cmd
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|int
name|exitCode
init|=
operator|new
name|ProcessBuilder
argument_list|(
name|cmd
argument_list|)
operator|.
name|inheritIO
argument_list|()
operator|.
name|start
argument_list|()
operator|.
name|waitFor
argument_list|()
decl_stmt|;
if|if
condition|(
name|exitCode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"iptables process did not exit successfully, exit code was: "
operator|+
name|exitCode
argument_list|)
throw|;
block|}
block|}
block|}
end_class
end_unit
