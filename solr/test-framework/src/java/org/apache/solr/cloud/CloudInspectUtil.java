begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|CloudInspectUtil
specifier|public
class|class
name|CloudInspectUtil
block|{
DECL|field|log
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CloudInspectUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * When a and b are known to be different, this method tells if the difference    * is legal given the adds and deletes that failed from b.    *     * @param a first list of docs    * @param b second list of docs    * @param aName label for first list of docs    * @param bName  label for second list of docs    * @param bAddFails null or list of the ids of adds that failed for b    * @param bDeleteFails null or list of the ids of deletes that failed for b    * @return true if the difference in a and b is legal    */
DECL|method|checkIfDiffIsLegal
specifier|public
specifier|static
name|boolean
name|checkIfDiffIsLegal
parameter_list|(
name|SolrDocumentList
name|a
parameter_list|,
name|SolrDocumentList
name|b
parameter_list|,
name|String
name|aName
parameter_list|,
name|String
name|bName
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|bAddFails
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|bDeleteFails
parameter_list|)
block|{
name|boolean
name|legal
init|=
literal|true
decl_stmt|;
name|Set
argument_list|<
name|Map
argument_list|>
name|setA
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SolrDocument
name|sdoc
range|:
name|a
control|)
block|{
name|setA
operator|.
name|add
argument_list|(
operator|new
name|HashMap
argument_list|(
name|sdoc
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Map
argument_list|>
name|setB
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SolrDocument
name|sdoc
range|:
name|b
control|)
block|{
name|setB
operator|.
name|add
argument_list|(
operator|new
name|HashMap
argument_list|(
name|sdoc
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Map
argument_list|>
name|onlyInA
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|setA
argument_list|)
decl_stmt|;
name|onlyInA
operator|.
name|removeAll
argument_list|(
name|setB
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Map
argument_list|>
name|onlyInB
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|setB
argument_list|)
decl_stmt|;
name|onlyInB
operator|.
name|removeAll
argument_list|(
name|setA
argument_list|)
expr_stmt|;
if|if
condition|(
name|onlyInA
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|onlyInB
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No difference between list a and b"
argument_list|)
throw|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"###### Only in "
operator|+
name|aName
operator|+
literal|": "
operator|+
name|onlyInA
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"###### Only in "
operator|+
name|bName
operator|+
literal|": "
operator|+
name|onlyInB
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
name|doc
range|:
name|onlyInA
control|)
block|{
if|if
condition|(
name|bAddFails
operator|==
literal|null
operator|||
operator|!
name|bAddFails
operator|.
name|contains
argument_list|(
name|doc
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
condition|)
block|{
name|legal
operator|=
literal|false
expr_stmt|;
comment|// System.err.println("###### Only in " + aName + ": " + doc.get("id"));
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"###### Only in "
operator|+
name|aName
operator|+
literal|": "
operator|+
name|doc
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
operator|+
literal|", but this is expected because we found an add fail for "
operator|+
name|doc
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
name|doc
range|:
name|onlyInB
control|)
block|{
if|if
condition|(
name|bDeleteFails
operator|==
literal|null
operator|||
operator|!
name|bDeleteFails
operator|.
name|contains
argument_list|(
name|doc
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
condition|)
block|{
name|legal
operator|=
literal|false
expr_stmt|;
comment|// System.err.println("###### Only in " + bName + ": " + doc.get("id"));
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"###### Only in "
operator|+
name|bName
operator|+
literal|": "
operator|+
name|doc
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
operator|+
literal|", but this is expected because we found a delete fail for "
operator|+
name|doc
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|legal
return|;
block|}
comment|/**    * Shows the difference between two lists of documents.    *     * @param a the first list    * @param b the second list    * @param aName label for the first list    * @param bName label for the second list    * @return the documents only in list a    */
DECL|method|showDiff
specifier|public
specifier|static
name|Set
argument_list|<
name|Map
argument_list|>
name|showDiff
parameter_list|(
name|SolrDocumentList
name|a
parameter_list|,
name|SolrDocumentList
name|b
parameter_list|,
name|String
name|aName
parameter_list|,
name|String
name|bName
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"######"
operator|+
name|aName
operator|+
literal|": "
operator|+
name|toStr
argument_list|(
name|a
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"######"
operator|+
name|bName
operator|+
literal|": "
operator|+
name|toStr
argument_list|(
name|b
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"###### sizes="
operator|+
name|a
operator|.
name|size
argument_list|()
operator|+
literal|","
operator|+
name|b
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Map
argument_list|>
name|setA
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SolrDocument
name|sdoc
range|:
name|a
control|)
block|{
name|setA
operator|.
name|add
argument_list|(
operator|new
name|HashMap
argument_list|(
name|sdoc
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Map
argument_list|>
name|setB
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SolrDocument
name|sdoc
range|:
name|b
control|)
block|{
name|setB
operator|.
name|add
argument_list|(
operator|new
name|HashMap
argument_list|(
name|sdoc
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Map
argument_list|>
name|onlyInA
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|setA
argument_list|)
decl_stmt|;
name|onlyInA
operator|.
name|removeAll
argument_list|(
name|setB
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Map
argument_list|>
name|onlyInB
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|setB
argument_list|)
decl_stmt|;
name|onlyInB
operator|.
name|removeAll
argument_list|(
name|setA
argument_list|)
expr_stmt|;
if|if
condition|(
name|onlyInA
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"###### Only in "
operator|+
name|aName
operator|+
literal|": "
operator|+
name|onlyInA
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|onlyInB
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"###### Only in "
operator|+
name|bName
operator|+
literal|": "
operator|+
name|onlyInB
argument_list|)
expr_stmt|;
block|}
name|onlyInA
operator|.
name|addAll
argument_list|(
name|onlyInB
argument_list|)
expr_stmt|;
return|return
name|onlyInA
return|;
block|}
DECL|method|toStr
specifier|private
specifier|static
name|String
name|toStr
parameter_list|(
name|SolrDocumentList
name|lst
parameter_list|,
name|int
name|maxSz
parameter_list|)
block|{
if|if
condition|(
name|lst
operator|.
name|size
argument_list|()
operator|<=
name|maxSz
condition|)
return|return
name|lst
operator|.
name|toString
argument_list|()
return|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"SolrDocumentList[sz="
operator|+
name|lst
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lst
operator|.
name|size
argument_list|()
operator|!=
name|lst
operator|.
name|getNumFound
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" numFound="
operator|+
name|lst
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|lst
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|maxSz
operator|/
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" , [...] , "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|lst
operator|.
name|subList
argument_list|(
name|lst
operator|.
name|size
argument_list|()
operator|-
name|maxSz
operator|/
literal|2
argument_list|,
name|lst
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Compares the results of the control and cloud clients.    *     * @return true if the compared results are illegal.    */
DECL|method|compareResults
specifier|public
specifier|static
name|boolean
name|compareResults
parameter_list|(
name|SolrServer
name|controlServer
parameter_list|,
name|SolrServer
name|cloudServer
parameter_list|)
throws|throws
name|SolrServerException
block|{
return|return
name|compareResults
argument_list|(
name|controlServer
argument_list|,
name|cloudServer
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Compares the results of the control and cloud clients.    *     * @return true if the compared results are illegal.    */
DECL|method|compareResults
specifier|public
specifier|static
name|boolean
name|compareResults
parameter_list|(
name|SolrServer
name|controlServer
parameter_list|,
name|SolrServer
name|cloudServer
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|addFails
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|deleteFails
parameter_list|)
throws|throws
name|SolrServerException
block|{
name|SolrParams
name|q
init|=
name|SolrTestCaseJ4
operator|.
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"tests"
argument_list|,
literal|"checkShardConsistency(vsControl)"
argument_list|)
decl_stmt|;
comment|// add a tag to aid in debugging via logs
name|SolrDocumentList
name|controlDocList
init|=
name|controlServer
operator|.
name|query
argument_list|(
name|q
argument_list|)
operator|.
name|getResults
argument_list|()
decl_stmt|;
name|long
name|controlDocs
init|=
name|controlDocList
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
name|SolrDocumentList
name|cloudDocList
init|=
name|cloudServer
operator|.
name|query
argument_list|(
name|q
argument_list|)
operator|.
name|getResults
argument_list|()
decl_stmt|;
name|long
name|cloudClientDocs
init|=
name|cloudDocList
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
comment|// re-execute the query getting ids
name|q
operator|=
name|SolrTestCaseJ4
operator|.
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"100000"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"tests"
argument_list|,
literal|"checkShardConsistency(vsControl)/getIds"
argument_list|)
expr_stmt|;
comment|// add a tag to aid in debugging via logs
name|controlDocList
operator|=
name|controlServer
operator|.
name|query
argument_list|(
name|q
argument_list|)
operator|.
name|getResults
argument_list|()
expr_stmt|;
if|if
condition|(
name|controlDocs
operator|!=
name|controlDocList
operator|.
name|getNumFound
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Something changed! control now "
operator|+
name|controlDocList
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
name|cloudDocList
operator|=
name|cloudServer
operator|.
name|query
argument_list|(
name|q
argument_list|)
operator|.
name|getResults
argument_list|()
expr_stmt|;
if|if
condition|(
name|cloudClientDocs
operator|!=
name|cloudDocList
operator|.
name|getNumFound
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Something changed! cloudClient now "
operator|+
name|cloudDocList
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
if|if
condition|(
name|controlDocs
operator|!=
name|cloudClientDocs
operator|&&
operator|(
name|addFails
operator|!=
literal|null
operator|||
name|deleteFails
operator|!=
literal|null
operator|)
condition|)
block|{
name|boolean
name|legal
init|=
name|CloudInspectUtil
operator|.
name|checkIfDiffIsLegal
argument_list|(
name|controlDocList
argument_list|,
name|cloudDocList
argument_list|,
literal|"controlDocList"
argument_list|,
literal|"cloudDocList"
argument_list|,
name|addFails
argument_list|,
name|deleteFails
argument_list|)
decl_stmt|;
if|if
condition|(
name|legal
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|Set
argument_list|<
name|Map
argument_list|>
name|differences
init|=
name|CloudInspectUtil
operator|.
name|showDiff
argument_list|(
name|controlDocList
argument_list|,
name|cloudDocList
argument_list|,
literal|"controlDocList"
argument_list|,
literal|"cloudDocList"
argument_list|)
decl_stmt|;
comment|// get versions for the mismatched ids
name|boolean
name|foundId
init|=
literal|false
decl_stmt|;
name|StringBuilder
name|ids
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"id:("
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
name|doc
range|:
name|differences
control|)
block|{
name|ids
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|doc
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|foundId
operator|=
literal|true
expr_stmt|;
block|}
name|ids
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|foundId
condition|)
block|{
comment|// get versions for those ids that don't match
name|q
operator|=
name|SolrTestCaseJ4
operator|.
name|params
argument_list|(
literal|"q"
argument_list|,
name|ids
operator|.
name|toString
argument_list|()
argument_list|,
literal|"rows"
argument_list|,
literal|"100000"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,_version_"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|,
literal|"tests"
argument_list|,
literal|"checkShardConsistency(vsControl)/getVers"
argument_list|)
expr_stmt|;
comment|// add a tag to aid in
comment|// debugging via logs
name|SolrDocumentList
name|a
init|=
name|controlServer
operator|.
name|query
argument_list|(
name|q
argument_list|)
operator|.
name|getResults
argument_list|()
decl_stmt|;
name|SolrDocumentList
name|b
init|=
name|cloudServer
operator|.
name|query
argument_list|(
name|q
argument_list|)
operator|.
name|getResults
argument_list|()
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"controlClient :"
operator|+
name|a
operator|+
literal|"\n\tcloudClient :"
operator|+
name|b
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
