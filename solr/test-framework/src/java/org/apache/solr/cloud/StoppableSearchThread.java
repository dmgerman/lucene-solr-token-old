begin_unit
begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_class
DECL|class|StoppableSearchThread
class|class
name|StoppableSearchThread
extends|extends
name|AbstractFullDistribZkTestBase
operator|.
name|StoppableThread
block|{
DECL|field|log
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractFullDistribZkTestBase
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|cloudClient
specifier|private
specifier|final
name|CloudSolrClient
name|cloudClient
decl_stmt|;
DECL|field|stop
specifier|private
specifier|volatile
name|boolean
name|stop
init|=
literal|false
decl_stmt|;
DECL|field|queryFails
specifier|protected
specifier|final
name|AtomicInteger
name|queryFails
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|QUERIES
specifier|private
name|String
index|[]
name|QUERIES
init|=
operator|new
name|String
index|[]
block|{
literal|"to come"
block|,
literal|"their country"
block|,
literal|"aid"
block|,
literal|"co*"
block|}
decl_stmt|;
DECL|method|StoppableSearchThread
specifier|public
name|StoppableSearchThread
parameter_list|(
name|CloudSolrClient
name|cloudClient
parameter_list|)
block|{
name|super
argument_list|(
literal|"StoppableSearchThread"
argument_list|)
expr_stmt|;
name|this
operator|.
name|cloudClient
operator|=
name|cloudClient
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Random
name|random
init|=
name|LuceneTestCase
operator|.
name|random
argument_list|()
decl_stmt|;
name|int
name|numSearches
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
operator|&&
operator|!
name|stop
condition|)
block|{
name|numSearches
operator|++
expr_stmt|;
try|try
block|{
comment|//to come to the aid of their country.
name|cloudClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
name|QUERIES
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|QUERIES
operator|.
name|length
argument_list|)
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"QUERY REQUEST FAILED:"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|SolrServerException
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ROOT CAUSE:"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SolrServerException
operator|)
name|e
operator|)
operator|.
name|getRootCause
argument_list|()
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|queryFails
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|4000
argument_list|)
operator|+
literal|300
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"num searches done:"
operator|+
name|numSearches
operator|+
literal|" with "
operator|+
name|queryFails
operator|+
literal|" fails"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|safeStop
specifier|public
name|void
name|safeStop
parameter_list|()
block|{
name|stop
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getFails
specifier|public
name|int
name|getFails
parameter_list|()
block|{
return|return
name|queryFails
operator|.
name|get
argument_list|()
return|;
block|}
block|}
end_class
end_unit
