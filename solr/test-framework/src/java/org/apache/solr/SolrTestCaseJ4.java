begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr
package|package
name|org
operator|.
name|apache
operator|.
name|solr
package|;
end_package
begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|ConsoleHandler
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Handler
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpressionException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|Charsets
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|QuickPatchThreadsFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|util
operator|.
name|ClientUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|IpTables
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|XML
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|ConfigSolr
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|ConfigSolrXmlOld
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreDescriptor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|JsonUpdateRequestHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|LocalSolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|DirectSolrConnection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|AbstractSolrTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RevertDefaultThreadHandlerRule
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TestHarness
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|RuleChain
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|CharArr
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|JSONUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|ObjectBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|RandomizedContext
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakFilters
import|;
end_import
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|rules
operator|.
name|SystemPropertiesRestoreRule
import|;
end_import
begin_comment
comment|/**  * A junit4 Solr test harness that extends LuceneTestCaseJ4. To change which core is used when loading the schema and solrconfig.xml, simply  * invoke the {@link #initCore(String, String, String, String)} method.  *   * Unlike {@link AbstractSolrTestCase}, a new core is not created for each test method.  */
end_comment
begin_class
annotation|@
name|ThreadLeakFilters
argument_list|(
name|defaultFilters
operator|=
literal|true
argument_list|,
name|filters
operator|=
block|{
name|SolrIgnoredThreadsFilter
operator|.
name|class
block|,
name|QuickPatchThreadsFilter
operator|.
name|class
block|}
argument_list|)
DECL|class|SolrTestCaseJ4
specifier|public
specifier|abstract
class|class
name|SolrTestCaseJ4
extends|extends
name|LuceneTestCase
block|{
DECL|field|coreName
specifier|private
specifier|static
name|String
name|coreName
init|=
name|ConfigSolrXmlOld
operator|.
name|DEFAULT_DEFAULT_CORE_NAME
decl_stmt|;
DECL|field|DEFAULT_CONNECTION_TIMEOUT
specifier|public
specifier|static
name|int
name|DEFAULT_CONNECTION_TIMEOUT
init|=
literal|30000
decl_stmt|;
comment|// default socket connection timeout in ms
annotation|@
name|ClassRule
DECL|field|solrClassRules
specifier|public
specifier|static
name|TestRule
name|solrClassRules
init|=
name|RuleChain
operator|.
name|outerRule
argument_list|(
operator|new
name|SystemPropertiesRestoreRule
argument_list|()
argument_list|)
operator|.
name|around
argument_list|(
operator|new
name|RevertDefaultThreadHandlerRule
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|solrTestRules
specifier|public
name|TestRule
name|solrTestRules
init|=
name|RuleChain
operator|.
name|outerRule
argument_list|(
operator|new
name|SystemPropertiesRestoreRule
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|beforeClass
specifier|private
specifier|static
name|void
name|beforeClass
parameter_list|()
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"jetty.testMode"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"enable.update.log"
argument_list|,
name|usually
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"tests.shardhandler.randomSeed"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.clustering.enabled"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|setupLogging
argument_list|()
expr_stmt|;
name|startTrackingSearchers
argument_list|()
expr_stmt|;
name|startTrackingZkClients
argument_list|()
expr_stmt|;
name|ignoreException
argument_list|(
literal|"ignore_exception"
argument_list|)
expr_stmt|;
name|newRandomConfig
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|afterClass
specifier|private
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteCore
argument_list|()
expr_stmt|;
name|resetExceptionIgnores
argument_list|()
expr_stmt|;
name|endTrackingSearchers
argument_list|()
expr_stmt|;
name|endTrackingZkClients
argument_list|()
expr_stmt|;
name|resetFactory
argument_list|()
expr_stmt|;
name|coreName
operator|=
name|ConfigSolrXmlOld
operator|.
name|DEFAULT_DEFAULT_CORE_NAME
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"jetty.testMode"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"tests.shardhandler.randomSeed"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"enable.update.log"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"useCompoundFile"
argument_list|)
expr_stmt|;
name|IpTables
operator|.
name|unblockAllPorts
argument_list|()
expr_stmt|;
block|}
DECL|field|changedFactory
specifier|private
specifier|static
name|boolean
name|changedFactory
init|=
literal|false
decl_stmt|;
DECL|field|savedFactory
specifier|private
specifier|static
name|String
name|savedFactory
decl_stmt|;
comment|/** Use a different directory factory.  Passing "null" sets to an FS-based factory */
DECL|method|useFactory
specifier|public
specifier|static
name|void
name|useFactory
parameter_list|(
name|String
name|factory
parameter_list|)
throws|throws
name|Exception
block|{
comment|// allow calling more than once so a subclass can override a base class
if|if
condition|(
operator|!
name|changedFactory
condition|)
block|{
name|savedFactory
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"solr.DirectoryFactory"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
name|factory
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|75
condition|?
literal|"solr.NRTCachingDirectoryFactory"
else|:
literal|"solr.StandardDirectoryFactory"
expr_stmt|;
comment|// test the default most of the time
block|}
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.directoryFactory"
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|changedFactory
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|resetFactory
specifier|public
specifier|static
name|void
name|resetFactory
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|changedFactory
condition|)
return|return;
name|changedFactory
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|savedFactory
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.directoryFactory"
argument_list|,
name|savedFactory
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.directoryFactory"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Call this from @BeforeClass to set up the test harness and update handler with no cores.    *    * @param solrHome The solr home directory.    * @param xmlStr - the text of an XML file to use. If null, use the what's the absolute minimal file.    * @throws Exception Lost of file-type things can go wrong.    */
DECL|method|setupNoCoreTest
specifier|public
specifier|static
name|void
name|setupNoCoreTest
parameter_list|(
name|File
name|solrHome
parameter_list|,
name|String
name|xmlStr
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|tmpFile
init|=
operator|new
name|File
argument_list|(
name|solrHome
argument_list|,
name|ConfigSolr
operator|.
name|SOLR_XML_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|xmlStr
operator|==
literal|null
condition|)
block|{
name|xmlStr
operator|=
literal|"<solr></solr>"
expr_stmt|;
block|}
name|FileUtils
operator|.
name|write
argument_list|(
name|tmpFile
argument_list|,
name|xmlStr
argument_list|,
name|IOUtils
operator|.
name|CHARSET_UTF_8
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SolrResourceLoader
name|loader
init|=
operator|new
name|SolrResourceLoader
argument_list|(
name|solrHome
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|h
operator|=
operator|new
name|TestHarness
argument_list|(
name|loader
argument_list|,
name|ConfigSolr
operator|.
name|fromFile
argument_list|(
name|loader
argument_list|,
operator|new
name|File
argument_list|(
name|solrHome
argument_list|,
literal|"solr.xml"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|lrf
operator|=
name|h
operator|.
name|getRequestFactory
argument_list|(
literal|"standard"
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|,
name|CommonParams
operator|.
name|VERSION
argument_list|,
literal|"2.2"
argument_list|)
expr_stmt|;
block|}
comment|/** sets system properties based on     * {@link #newIndexWriterConfig(org.apache.lucene.util.Version, org.apache.lucene.analysis.Analyzer)}    *     * configs can use these system properties to vary the indexwriter settings    */
DECL|method|newRandomConfig
specifier|public
specifier|static
name|void
name|newRandomConfig
parameter_list|()
block|{
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"useCompoundFile"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iwc
operator|.
name|getUseCompoundFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.tests.maxBufferedDocs"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iwc
operator|.
name|getMaxBufferedDocs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.tests.ramBufferSizeMB"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iwc
operator|.
name|getRAMBufferSizeMB
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.tests.mergeScheduler"
argument_list|,
name|iwc
operator|.
name|getMergeScheduler
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// don't ask iwc.getMaxThreadStates(), sometimes newIWC uses
comment|// RandomDocumentsWriterPerThreadPool and all hell breaks loose
name|int
name|maxIndexingThreads
init|=
name|rarely
argument_list|(
name|random
argument_list|()
argument_list|)
condition|?
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|20
argument_list|)
comment|// crazy value
else|:
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
decl_stmt|;
comment|// reasonable value
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.tests.maxIndexingThreads"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|maxIndexingThreads
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"###Starting "
operator|+
name|getTestName
argument_list|()
argument_list|)
expr_stmt|;
comment|// returns<unknown>???
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"###Ending "
operator|+
name|getTestName
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
DECL|field|formatter
specifier|public
specifier|static
name|SolrLogFormatter
name|formatter
decl_stmt|;
DECL|method|setupLogging
specifier|public
specifier|static
name|void
name|setupLogging
parameter_list|()
block|{
name|boolean
name|register
init|=
literal|false
decl_stmt|;
name|Handler
index|[]
name|handlers
init|=
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
operator|.
name|getLogger
argument_list|(
literal|""
argument_list|)
operator|.
name|getHandlers
argument_list|()
decl_stmt|;
name|ConsoleHandler
name|consoleHandler
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Handler
name|handler
range|:
name|handlers
control|)
block|{
if|if
condition|(
name|handler
operator|instanceof
name|ConsoleHandler
condition|)
block|{
name|consoleHandler
operator|=
operator|(
name|ConsoleHandler
operator|)
name|handler
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|consoleHandler
operator|==
literal|null
condition|)
block|{
name|consoleHandler
operator|=
operator|new
name|ConsoleHandler
argument_list|()
expr_stmt|;
name|register
operator|=
literal|true
expr_stmt|;
block|}
name|consoleHandler
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|formatter
operator|=
operator|new
name|SolrLogFormatter
argument_list|()
expr_stmt|;
name|consoleHandler
operator|.
name|setFormatter
argument_list|(
name|formatter
argument_list|)
expr_stmt|;
if|if
condition|(
name|register
condition|)
block|{
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
operator|.
name|getLogger
argument_list|(
literal|""
argument_list|)
operator|.
name|addHandler
argument_list|(
name|consoleHandler
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setLoggingLevel
specifier|public
specifier|static
name|void
name|setLoggingLevel
parameter_list|(
name|Level
name|level
parameter_list|)
block|{
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
name|logger
init|=
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
operator|.
name|getLogger
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|logger
operator|.
name|setLevel
argument_list|(
name|level
argument_list|)
expr_stmt|;
block|}
comment|/** Call initCore in @BeforeClass to instantiate a solr core in your test class.    * deleteCore will be called for you via SolrTestCaseJ4 @AfterClass */
DECL|method|initCore
specifier|public
specifier|static
name|void
name|initCore
parameter_list|(
name|String
name|config
parameter_list|,
name|String
name|schema
parameter_list|)
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
name|config
argument_list|,
name|schema
argument_list|,
name|TEST_HOME
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Call initCore in @BeforeClass to instantiate a solr core in your test class.    * deleteCore will be called for you via SolrTestCaseJ4 @AfterClass */
DECL|method|initCore
specifier|public
specifier|static
name|void
name|initCore
parameter_list|(
name|String
name|config
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|solrHome
parameter_list|)
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|solrHome
argument_list|)
expr_stmt|;
name|configString
operator|=
name|config
expr_stmt|;
name|schemaString
operator|=
name|schema
expr_stmt|;
name|testSolrHome
operator|=
name|solrHome
expr_stmt|;
if|if
condition|(
name|solrHome
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.solr.home"
argument_list|,
name|solrHome
argument_list|)
expr_stmt|;
block|}
name|initCore
argument_list|()
expr_stmt|;
block|}
comment|/** Call initCore in @BeforeClass to instantiate a solr core in your test class.    * deleteCore will be called for you via SolrTestCaseJ4 @AfterClass */
DECL|method|initCore
specifier|public
specifier|static
name|void
name|initCore
parameter_list|(
name|String
name|config
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|solrHome
parameter_list|,
name|String
name|pCoreName
parameter_list|)
throws|throws
name|Exception
block|{
name|coreName
operator|=
name|pCoreName
expr_stmt|;
name|initCore
argument_list|(
name|config
argument_list|,
name|schema
argument_list|,
name|solrHome
argument_list|)
expr_stmt|;
block|}
DECL|field|numOpens
specifier|static
name|long
name|numOpens
decl_stmt|;
DECL|field|numCloses
specifier|static
name|long
name|numCloses
decl_stmt|;
DECL|method|startTrackingSearchers
specifier|public
specifier|static
name|void
name|startTrackingSearchers
parameter_list|()
block|{
name|numOpens
operator|=
name|SolrIndexSearcher
operator|.
name|numOpens
operator|.
name|getAndSet
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|numCloses
operator|=
name|SolrIndexSearcher
operator|.
name|numCloses
operator|.
name|getAndSet
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|numOpens
operator|!=
literal|0
operator|||
name|numCloses
operator|!=
literal|0
condition|)
block|{
comment|// NOTE: some other tests don't use this base class and hence won't reset the counts.
name|log
operator|.
name|warn
argument_list|(
literal|"startTrackingSearchers: numOpens="
operator|+
name|numOpens
operator|+
literal|" numCloses="
operator|+
name|numCloses
argument_list|)
expr_stmt|;
name|numOpens
operator|=
name|numCloses
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|field|zkClientNumOpens
specifier|static
name|long
name|zkClientNumOpens
decl_stmt|;
DECL|field|zkClientNumCloses
specifier|static
name|long
name|zkClientNumCloses
decl_stmt|;
DECL|method|startTrackingZkClients
specifier|public
specifier|static
name|void
name|startTrackingZkClients
parameter_list|()
block|{
name|zkClientNumOpens
operator|=
name|SolrZkClient
operator|.
name|numOpens
operator|.
name|get
argument_list|()
expr_stmt|;
name|zkClientNumCloses
operator|=
name|SolrZkClient
operator|.
name|numCloses
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
DECL|method|endTrackingSearchers
specifier|public
specifier|static
name|void
name|endTrackingSearchers
parameter_list|()
block|{
name|long
name|endNumOpens
init|=
name|SolrIndexSearcher
operator|.
name|numOpens
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|endNumCloses
init|=
name|SolrIndexSearcher
operator|.
name|numCloses
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// wait a bit in case any ending threads have anything to release
name|int
name|retries
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|endNumOpens
operator|-
name|numOpens
operator|!=
name|endNumCloses
operator|-
name|numCloses
condition|)
block|{
if|if
condition|(
name|retries
operator|++
operator|>
literal|120
condition|)
block|{
break|break;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
name|endNumOpens
operator|=
name|SolrIndexSearcher
operator|.
name|numOpens
operator|.
name|get
argument_list|()
expr_stmt|;
name|endNumCloses
operator|=
name|SolrIndexSearcher
operator|.
name|numCloses
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|SolrIndexSearcher
operator|.
name|numOpens
operator|.
name|getAndSet
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|SolrIndexSearcher
operator|.
name|numCloses
operator|.
name|getAndSet
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|endNumOpens
operator|-
name|numOpens
operator|!=
name|endNumCloses
operator|-
name|numCloses
condition|)
block|{
name|String
name|msg
init|=
literal|"ERROR: SolrIndexSearcher opens="
operator|+
operator|(
name|endNumOpens
operator|-
name|numOpens
operator|)
operator|+
literal|" closes="
operator|+
operator|(
name|endNumCloses
operator|-
name|numCloses
operator|)
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
comment|// if its TestReplicationHandler, ignore it. the test is broken and gets no love
if|if
condition|(
literal|"TestReplicationHandler"
operator|.
name|equals
argument_list|(
name|RandomizedContext
operator|.
name|current
argument_list|()
operator|.
name|getTargetClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"TestReplicationHandler wants to fail!: "
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|endTrackingZkClients
specifier|public
specifier|static
name|void
name|endTrackingZkClients
parameter_list|()
block|{
name|long
name|endNumOpens
init|=
name|SolrZkClient
operator|.
name|numOpens
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|endNumCloses
init|=
name|SolrZkClient
operator|.
name|numCloses
operator|.
name|get
argument_list|()
decl_stmt|;
name|SolrZkClient
operator|.
name|numOpens
operator|.
name|getAndSet
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|SolrZkClient
operator|.
name|numCloses
operator|.
name|getAndSet
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|endNumOpens
operator|-
name|zkClientNumOpens
operator|!=
name|endNumCloses
operator|-
name|zkClientNumCloses
condition|)
block|{
name|String
name|msg
init|=
literal|"ERROR: SolrZkClient opens="
operator|+
operator|(
name|endNumOpens
operator|-
name|zkClientNumOpens
operator|)
operator|+
literal|" closes="
operator|+
operator|(
name|endNumCloses
operator|-
name|zkClientNumCloses
operator|)
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Causes an exception matching the regex pattern to not be logged. */
DECL|method|ignoreException
specifier|public
specifier|static
name|void
name|ignoreException
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|SolrException
operator|.
name|ignorePatterns
operator|==
literal|null
condition|)
name|SolrException
operator|.
name|ignorePatterns
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|SolrException
operator|.
name|ignorePatterns
operator|.
name|add
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
DECL|method|unIgnoreException
specifier|public
specifier|static
name|void
name|unIgnoreException
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|SolrException
operator|.
name|ignorePatterns
operator|!=
literal|null
condition|)
name|SolrException
operator|.
name|ignorePatterns
operator|.
name|remove
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
DECL|method|resetExceptionIgnores
specifier|public
specifier|static
name|void
name|resetExceptionIgnores
parameter_list|()
block|{
name|SolrException
operator|.
name|ignorePatterns
operator|=
literal|null
expr_stmt|;
name|ignoreException
argument_list|(
literal|"ignore_exception"
argument_list|)
expr_stmt|;
comment|// always ignore "ignore_exception"
block|}
DECL|method|getClassName
specifier|protected
specifier|static
name|String
name|getClassName
parameter_list|()
block|{
return|return
name|getTestClass
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
DECL|method|getSimpleClassName
specifier|protected
specifier|static
name|String
name|getSimpleClassName
parameter_list|()
block|{
return|return
name|getTestClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
DECL|field|configString
specifier|protected
specifier|static
name|String
name|configString
decl_stmt|;
DECL|field|schemaString
specifier|protected
specifier|static
name|String
name|schemaString
decl_stmt|;
DECL|field|testSolrHome
specifier|protected
specifier|static
name|String
name|testSolrHome
decl_stmt|;
DECL|field|solrConfig
specifier|protected
specifier|static
name|SolrConfig
name|solrConfig
decl_stmt|;
comment|/**    * Harness initialized by initTestHarness.    *    *<p>    * For use in test methods as needed.    *</p>    */
DECL|field|h
specifier|protected
specifier|static
name|TestHarness
name|h
decl_stmt|;
comment|/**    * LocalRequestFactory initialized by initTestHarness using sensible    * defaults.    *    *<p>    * For use in test methods as needed.    *</p>    */
DECL|field|lrf
specifier|protected
specifier|static
name|TestHarness
operator|.
name|LocalRequestFactory
name|lrf
decl_stmt|;
comment|/**    * Subclasses must define this method to return the name of the    * schema.xml they wish to use.    */
DECL|method|getSchemaFile
specifier|public
specifier|static
name|String
name|getSchemaFile
parameter_list|()
block|{
return|return
name|schemaString
return|;
block|}
comment|/**    * Subclasses must define this method to return the name of the    * solrconfig.xml they wish to use.    */
DECL|method|getSolrConfigFile
specifier|public
specifier|static
name|String
name|getSolrConfigFile
parameter_list|()
block|{
return|return
name|configString
return|;
block|}
comment|/**    * The directory used to story the index managed by the TestHarness h    */
DECL|field|dataDir
specifier|protected
specifier|static
name|File
name|dataDir
decl_stmt|;
comment|// hack due to File dataDir
DECL|field|hdfsDataDir
specifier|protected
specifier|static
name|String
name|hdfsDataDir
decl_stmt|;
comment|/**    * Initializes things your test might need    *    *<ul>    *<li>Creates a dataDir in the "java.io.tmpdir"</li>    *<li>initializes the TestHarness h using this data directory, and getSchemaPath()</li>    *<li>initializes the LocalRequestFactory lrf using sensible defaults.</li>    *</ul>    *    */
DECL|field|log
specifier|public
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SolrTestCaseJ4
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|factoryProp
specifier|private
specifier|static
name|String
name|factoryProp
decl_stmt|;
DECL|method|createTempDir
specifier|public
specifier|static
name|void
name|createTempDir
parameter_list|()
block|{
name|String
name|cname
init|=
name|getSimpleClassName
argument_list|()
decl_stmt|;
name|dataDir
operator|=
operator|new
name|File
argument_list|(
name|TEMP_DIR
argument_list|,
literal|"solrtest-"
operator|+
name|cname
operator|+
literal|"-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|dataDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Creating dataDir: "
operator|+
name|dataDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|initCore
specifier|public
specifier|static
name|void
name|initCore
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"####initCore"
argument_list|)
expr_stmt|;
name|ignoreException
argument_list|(
literal|"ignore_exception"
argument_list|)
expr_stmt|;
name|factoryProp
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"solr.directoryFactory"
argument_list|)
expr_stmt|;
if|if
condition|(
name|factoryProp
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.directoryFactory"
argument_list|,
literal|"solr.RAMDirectoryFactory"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dataDir
operator|==
literal|null
condition|)
block|{
name|createTempDir
argument_list|()
expr_stmt|;
block|}
comment|// other  methods like starting a jetty instance need these too
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.test.sys.prop1"
argument_list|,
literal|"propone"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.test.sys.prop2"
argument_list|,
literal|"proptwo"
argument_list|)
expr_stmt|;
name|String
name|configFile
init|=
name|getSolrConfigFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|configFile
operator|!=
literal|null
condition|)
block|{
name|createCore
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"####initCore end"
argument_list|)
expr_stmt|;
block|}
DECL|method|createCore
specifier|public
specifier|static
name|void
name|createCore
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|testSolrHome
argument_list|)
expr_stmt|;
name|solrConfig
operator|=
name|TestHarness
operator|.
name|createConfig
argument_list|(
name|testSolrHome
argument_list|,
name|coreName
argument_list|,
name|getSolrConfigFile
argument_list|()
argument_list|)
expr_stmt|;
name|h
operator|=
operator|new
name|TestHarness
argument_list|(
name|coreName
argument_list|,
name|hdfsDataDir
operator|==
literal|null
condition|?
name|dataDir
operator|.
name|getAbsolutePath
argument_list|()
else|:
name|hdfsDataDir
argument_list|,
name|solrConfig
argument_list|,
name|getSchemaFile
argument_list|()
argument_list|)
expr_stmt|;
name|lrf
operator|=
name|h
operator|.
name|getRequestFactory
argument_list|(
literal|"standard"
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|,
name|CommonParams
operator|.
name|VERSION
argument_list|,
literal|"2.2"
argument_list|)
expr_stmt|;
block|}
DECL|method|createCoreContainer
specifier|public
specifier|static
name|CoreContainer
name|createCoreContainer
parameter_list|(
name|String
name|solrHome
parameter_list|,
name|String
name|solrXML
parameter_list|)
block|{
name|testSolrHome
operator|=
name|checkNotNull
argument_list|(
name|solrHome
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataDir
operator|==
literal|null
condition|)
name|createTempDir
argument_list|()
expr_stmt|;
name|h
operator|=
operator|new
name|TestHarness
argument_list|(
name|solrHome
argument_list|,
name|solrXML
argument_list|)
expr_stmt|;
name|lrf
operator|=
name|h
operator|.
name|getRequestFactory
argument_list|(
literal|"standard"
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|,
name|CommonParams
operator|.
name|VERSION
argument_list|,
literal|"2.2"
argument_list|)
expr_stmt|;
return|return
name|h
operator|.
name|getCoreContainer
argument_list|()
return|;
block|}
DECL|method|createDefaultCoreContainer
specifier|public
specifier|static
name|CoreContainer
name|createDefaultCoreContainer
parameter_list|(
name|String
name|solrHome
parameter_list|)
block|{
name|testSolrHome
operator|=
name|checkNotNull
argument_list|(
name|solrHome
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataDir
operator|==
literal|null
condition|)
name|createTempDir
argument_list|()
expr_stmt|;
name|h
operator|=
operator|new
name|TestHarness
argument_list|(
literal|"collection1"
argument_list|,
name|dataDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"solrconfig.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
name|lrf
operator|=
name|h
operator|.
name|getRequestFactory
argument_list|(
literal|"standard"
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|,
name|CommonParams
operator|.
name|VERSION
argument_list|,
literal|"2.2"
argument_list|)
expr_stmt|;
return|return
name|h
operator|.
name|getCoreContainer
argument_list|()
return|;
block|}
DECL|method|hasInitException
specifier|public
specifier|static
name|boolean
name|hasInitException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
name|entry
range|:
name|h
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getCoreInitFailures
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
name|message
argument_list|)
operator|!=
operator|-
literal|1
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|hasInitException
specifier|public
specifier|static
name|boolean
name|hasInitException
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
name|exceptionType
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
name|entry
range|:
name|h
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getCoreInitFailures
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|exceptionType
operator|.
name|isAssignableFrom
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/** Subclasses that override setUp can optionally call this method    * to log the fact that their setUp process has ended.    */
DECL|method|postSetUp
specifier|public
name|void
name|postSetUp
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"####POSTSETUP "
operator|+
name|getTestName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Subclasses that override tearDown can optionally call this method    * to log the fact that the tearDown process has started.  This is necessary    * since subclasses will want to call super.tearDown() at the *end* of their    * tearDown method.    */
DECL|method|preTearDown
specifier|public
name|void
name|preTearDown
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"####PRETEARDOWN "
operator|+
name|getTestName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Shuts down the test harness, and makes the best attempt possible    * to delete dataDir, unless the system property "solr.test.leavedatadir"    * is set.    */
DECL|method|deleteCore
specifier|public
specifier|static
name|void
name|deleteCore
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"###deleteCore"
argument_list|)
expr_stmt|;
if|if
condition|(
name|h
operator|!=
literal|null
condition|)
block|{
name|h
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dataDir
operator|!=
literal|null
condition|)
block|{
name|String
name|skip
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"solr.test.leavedatadir"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|skip
operator|&&
literal|0
operator|!=
name|skip
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"NOTE: per solr.test.leavedatadir, dataDir will not be removed: "
operator|+
name|dataDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|recurseDelete
argument_list|(
name|dataDir
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"!!!! WARNING: best effort to remove "
operator|+
name|dataDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" FAILED !!!!!"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|factoryProp
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.directoryFactory"
argument_list|)
expr_stmt|;
block|}
name|dataDir
operator|=
literal|null
expr_stmt|;
name|solrConfig
operator|=
literal|null
expr_stmt|;
name|h
operator|=
literal|null
expr_stmt|;
name|lrf
operator|=
literal|null
expr_stmt|;
name|configString
operator|=
name|schemaString
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Validates an update XML String is successful    */
DECL|method|assertU
specifier|public
specifier|static
name|void
name|assertU
parameter_list|(
name|String
name|update
parameter_list|)
block|{
name|assertU
argument_list|(
literal|null
argument_list|,
name|update
argument_list|)
expr_stmt|;
block|}
comment|/** Validates an update XML String is successful    */
DECL|method|assertU
specifier|public
specifier|static
name|void
name|assertU
parameter_list|(
name|String
name|message
parameter_list|,
name|String
name|update
parameter_list|)
block|{
name|checkUpdateU
argument_list|(
name|message
argument_list|,
name|update
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** Validates an update XML String failed    */
DECL|method|assertFailedU
specifier|public
specifier|static
name|void
name|assertFailedU
parameter_list|(
name|String
name|update
parameter_list|)
block|{
name|assertFailedU
argument_list|(
literal|null
argument_list|,
name|update
argument_list|)
expr_stmt|;
block|}
comment|/** Validates an update XML String failed    */
DECL|method|assertFailedU
specifier|public
specifier|static
name|void
name|assertFailedU
parameter_list|(
name|String
name|message
parameter_list|,
name|String
name|update
parameter_list|)
block|{
name|checkUpdateU
argument_list|(
name|message
argument_list|,
name|update
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/** Checks the success or failure of an update message    */
DECL|method|checkUpdateU
specifier|private
specifier|static
name|void
name|checkUpdateU
parameter_list|(
name|String
name|message
parameter_list|,
name|String
name|update
parameter_list|,
name|boolean
name|shouldSucceed
parameter_list|)
block|{
try|try
block|{
name|String
name|m
init|=
operator|(
literal|null
operator|==
name|message
operator|)
condition|?
literal|""
else|:
name|message
operator|+
literal|" "
decl_stmt|;
if|if
condition|(
name|shouldSucceed
condition|)
block|{
name|String
name|res
init|=
name|h
operator|.
name|validateUpdate
argument_list|(
name|update
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
name|fail
argument_list|(
name|m
operator|+
literal|"update was not successful: "
operator|+
name|res
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|res
init|=
name|h
operator|.
name|validateErrorUpdate
argument_list|(
name|update
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
name|fail
argument_list|(
name|m
operator|+
literal|"update succeeded, but should have failed: "
operator|+
name|res
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid XML"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** Validates a query matches some XPath test expressions and closes the query */
DECL|method|assertQ
specifier|public
specifier|static
name|void
name|assertQ
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|String
modifier|...
name|tests
parameter_list|)
block|{
name|assertQ
argument_list|(
literal|null
argument_list|,
name|req
argument_list|,
name|tests
argument_list|)
expr_stmt|;
block|}
comment|/** Validates a query matches some XPath test expressions and closes the query */
DECL|method|assertQ
specifier|public
specifier|static
name|void
name|assertQ
parameter_list|(
name|String
name|message
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|,
name|String
modifier|...
name|tests
parameter_list|)
block|{
try|try
block|{
name|String
name|m
init|=
operator|(
literal|null
operator|==
name|message
operator|)
condition|?
literal|""
else|:
name|message
operator|+
literal|" "
decl_stmt|;
name|String
name|response
init|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
literal|"facet"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|// add a test to ensure that faceting did not throw an exception
comment|// internally, where it would be added to facet_counts/exception
name|String
index|[]
name|allTests
init|=
operator|new
name|String
index|[
name|tests
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|tests
argument_list|,
literal|0
argument_list|,
name|allTests
argument_list|,
literal|1
argument_list|,
name|tests
operator|.
name|length
argument_list|)
expr_stmt|;
name|allTests
index|[
literal|0
index|]
operator|=
literal|"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]"
expr_stmt|;
name|tests
operator|=
name|allTests
expr_stmt|;
block|}
name|String
name|results
init|=
name|h
operator|.
name|validateXPath
argument_list|(
name|response
argument_list|,
name|tests
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|results
condition|)
block|{
name|String
name|msg
init|=
literal|"REQUEST FAILED: xpath="
operator|+
name|results
operator|+
literal|"\n\txml response was: "
operator|+
name|response
operator|+
literal|"\n\trequest was:"
operator|+
name|req
operator|.
name|getParamString
argument_list|()
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"XPath is invalid"
argument_list|,
name|e1
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"REQUEST FAILED: "
operator|+
name|req
operator|.
name|getParamString
argument_list|()
argument_list|,
name|e2
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Exception during query"
argument_list|,
name|e2
argument_list|)
throw|;
block|}
block|}
comment|/** Makes a query request and returns the JSON string response */
DECL|method|JQ
specifier|public
specifier|static
name|String
name|JQ
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|"json"
operator|.
name|equals
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"wt"
argument_list|,
literal|"xml"
argument_list|)
argument_list|)
operator|||
name|params
operator|.
name|get
argument_list|(
literal|"indent"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|ModifiableSolrParams
name|newParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|newParams
operator|.
name|set
argument_list|(
literal|"wt"
argument_list|,
literal|"json"
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|.
name|get
argument_list|(
literal|"indent"
argument_list|)
operator|==
literal|null
condition|)
name|newParams
operator|.
name|set
argument_list|(
literal|"indent"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|req
operator|.
name|setParams
argument_list|(
name|newParams
argument_list|)
expr_stmt|;
block|}
name|String
name|response
decl_stmt|;
name|boolean
name|failed
init|=
literal|true
decl_stmt|;
try|try
block|{
name|response
operator|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|false
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|failed
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"REQUEST FAILED: "
operator|+
name|req
operator|.
name|getParamString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|response
return|;
block|}
comment|/**    * Validates a query matches some JSON test expressions using the default double delta tolerance.    * @see JSONTestUtil#DEFAULT_DELTA    * @see #assertJQ(SolrQueryRequest,double,String...)    */
DECL|method|assertJQ
specifier|public
specifier|static
name|void
name|assertJQ
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|String
modifier|...
name|tests
parameter_list|)
throws|throws
name|Exception
block|{
name|assertJQ
argument_list|(
name|req
argument_list|,
name|JSONTestUtil
operator|.
name|DEFAULT_DELTA
argument_list|,
name|tests
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validates a query matches some JSON test expressions and closes the    * query. The text expression is of the form path:JSON.  To facilitate    * easy embedding in Java strings, the JSON tests can have double quotes    * replaced with single quotes.    *<p>    * Please use this with care: this makes it easy to match complete    * structures, but doing so can result in fragile tests if you are    * matching more than what you want to test.    *</p>    * @param req Solr request to execute    * @param delta tolerance allowed in comparing float/double values    * @param tests JSON path expression + '==' + expected value    */
DECL|method|assertJQ
specifier|public
specifier|static
name|void
name|assertJQ
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|double
name|delta
parameter_list|,
name|String
modifier|...
name|tests
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrParams
name|params
init|=
literal|null
decl_stmt|;
try|try
block|{
name|params
operator|=
name|req
operator|.
name|getParams
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
literal|"json"
operator|.
name|equals
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"wt"
argument_list|,
literal|"xml"
argument_list|)
argument_list|)
operator|||
name|params
operator|.
name|get
argument_list|(
literal|"indent"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|ModifiableSolrParams
name|newParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|newParams
operator|.
name|set
argument_list|(
literal|"wt"
argument_list|,
literal|"json"
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|.
name|get
argument_list|(
literal|"indent"
argument_list|)
operator|==
literal|null
condition|)
name|newParams
operator|.
name|set
argument_list|(
literal|"indent"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|req
operator|.
name|setParams
argument_list|(
name|newParams
argument_list|)
expr_stmt|;
block|}
name|String
name|response
decl_stmt|;
name|boolean
name|failed
init|=
literal|true
decl_stmt|;
try|try
block|{
name|response
operator|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|false
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|failed
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"REQUEST FAILED: "
operator|+
name|req
operator|.
name|getParamString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|test
range|:
name|tests
control|)
block|{
if|if
condition|(
name|test
operator|==
literal|null
operator|||
name|test
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
name|String
name|testJSON
init|=
name|json
argument_list|(
name|test
argument_list|)
decl_stmt|;
try|try
block|{
name|failed
operator|=
literal|true
expr_stmt|;
name|String
name|err
init|=
name|JSONTestUtil
operator|.
name|match
argument_list|(
name|response
argument_list|,
name|testJSON
argument_list|,
name|delta
argument_list|)
decl_stmt|;
name|failed
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"query failed JSON validation. error="
operator|+
name|err
operator|+
literal|"\n expected ="
operator|+
name|testJSON
operator|+
literal|"\n response = "
operator|+
name|response
operator|+
literal|"\n request = "
operator|+
name|req
operator|.
name|getParamString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|err
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|failed
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"JSON query validation threw an exception."
operator|+
literal|"\n expected ="
operator|+
name|testJSON
operator|+
literal|"\n response = "
operator|+
name|response
operator|+
literal|"\n request = "
operator|+
name|req
operator|.
name|getParamString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
comment|// restore the params
if|if
condition|(
name|params
operator|!=
literal|null
operator|&&
name|params
operator|!=
name|req
operator|.
name|getParams
argument_list|()
condition|)
name|req
operator|.
name|setParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Makes sure a query throws a SolrException with the listed response code */
DECL|method|assertQEx
specifier|public
specifier|static
name|void
name|assertQEx
parameter_list|(
name|String
name|message
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|,
name|int
name|code
parameter_list|)
block|{
try|try
block|{
name|ignoreException
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|sex
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|code
argument_list|,
name|sex
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Exception during query"
argument_list|,
name|e2
argument_list|)
throw|;
block|}
finally|finally
block|{
name|unIgnoreException
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertQEx
specifier|public
specifier|static
name|void
name|assertQEx
parameter_list|(
name|String
name|message
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrException
operator|.
name|ErrorCode
name|code
parameter_list|)
block|{
try|try
block|{
name|ignoreException
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|code
operator|.
name|code
argument_list|,
name|e
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Exception during query"
argument_list|,
name|e2
argument_list|)
throw|;
block|}
finally|finally
block|{
name|unIgnoreException
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @see TestHarness#optimize    */
DECL|method|optimize
specifier|public
specifier|static
name|String
name|optimize
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
block|{
return|return
name|TestHarness
operator|.
name|optimize
argument_list|(
name|args
argument_list|)
return|;
block|}
comment|/**    * @see TestHarness#commit    */
DECL|method|commit
specifier|public
specifier|static
name|String
name|commit
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
block|{
return|return
name|TestHarness
operator|.
name|commit
argument_list|(
name|args
argument_list|)
return|;
block|}
comment|/**    * Generates a simple&lt;add&gt;&lt;doc&gt;... XML String with no options    *    * @param fieldsAndValues 0th and Even numbered args are fields names odds are field values.    * @see #add    * @see #doc    */
DECL|method|adoc
specifier|public
specifier|static
name|String
name|adoc
parameter_list|(
name|String
modifier|...
name|fieldsAndValues
parameter_list|)
block|{
name|XmlDoc
name|d
init|=
name|doc
argument_list|(
name|fieldsAndValues
argument_list|)
decl_stmt|;
return|return
name|add
argument_list|(
name|d
argument_list|)
return|;
block|}
comment|/**    * Generates a simple&lt;add&gt;&lt;doc&gt;... XML String with no options    */
DECL|method|adoc
specifier|public
specifier|static
name|String
name|adoc
parameter_list|(
name|SolrInputDocument
name|sdoc
parameter_list|)
block|{
name|StringWriter
name|out
init|=
operator|new
name|StringWriter
argument_list|(
literal|512
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|append
argument_list|(
literal|"<add>"
argument_list|)
expr_stmt|;
name|ClientUtils
operator|.
name|writeXML
argument_list|(
name|sdoc
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
literal|"</add>"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Inexplicable IO error from StringWriter"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Generates an&lt;add&gt;&lt;doc&gt;... XML String with options    * on the add.    *    * @param doc the Document to add    * @param args 0th and Even numbered args are param names, Odds are param values.    * @see #add    * @see #doc    */
DECL|method|add
specifier|public
specifier|static
name|String
name|add
parameter_list|(
name|XmlDoc
name|doc
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
block|{
try|try
block|{
name|StringWriter
name|r
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
comment|// this is annoying
if|if
condition|(
literal|null
operator|==
name|args
operator|||
literal|0
operator|==
name|args
operator|.
name|length
condition|)
block|{
name|r
operator|.
name|write
argument_list|(
literal|"<add>"
argument_list|)
expr_stmt|;
name|r
operator|.
name|write
argument_list|(
name|doc
operator|.
name|xml
argument_list|)
expr_stmt|;
name|r
operator|.
name|write
argument_list|(
literal|"</add>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XML
operator|.
name|writeUnescapedXML
argument_list|(
name|r
argument_list|,
literal|"add"
argument_list|,
name|doc
operator|.
name|xml
argument_list|,
operator|(
name|Object
index|[]
operator|)
name|args
argument_list|)
expr_stmt|;
block|}
return|return
name|r
operator|.
name|getBuffer
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"this should never happen with a StringWriter"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Generates a&lt;delete&gt;... XML string for an ID    *    * @see TestHarness#deleteById    */
DECL|method|delI
specifier|public
specifier|static
name|String
name|delI
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
name|TestHarness
operator|.
name|deleteById
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/**    * Generates a&lt;delete&gt;... XML string for an query    *    * @see TestHarness#deleteByQuery    */
DECL|method|delQ
specifier|public
specifier|static
name|String
name|delQ
parameter_list|(
name|String
name|q
parameter_list|)
block|{
return|return
name|TestHarness
operator|.
name|deleteByQuery
argument_list|(
name|q
argument_list|)
return|;
block|}
comment|/**    * Generates a simple&lt;doc&gt;... XML String with no options    *    * @param fieldsAndValues 0th and Even numbered args are fields names, Odds are field values.    * @see TestHarness#makeSimpleDoc    */
DECL|method|doc
specifier|public
specifier|static
name|XmlDoc
name|doc
parameter_list|(
name|String
modifier|...
name|fieldsAndValues
parameter_list|)
block|{
name|XmlDoc
name|d
init|=
operator|new
name|XmlDoc
argument_list|()
decl_stmt|;
name|d
operator|.
name|xml
operator|=
name|TestHarness
operator|.
name|makeSimpleDoc
argument_list|(
name|fieldsAndValues
argument_list|)
expr_stmt|;
return|return
name|d
return|;
block|}
DECL|method|params
specifier|public
specifier|static
name|ModifiableSolrParams
name|params
parameter_list|(
name|String
modifier|...
name|params
parameter_list|)
block|{
name|ModifiableSolrParams
name|msp
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|msp
operator|.
name|add
argument_list|(
name|params
index|[
name|i
index|]
argument_list|,
name|params
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|msp
return|;
block|}
DECL|method|map
specifier|public
specifier|static
name|Map
name|map
parameter_list|(
name|Object
modifier|...
name|params
parameter_list|)
block|{
name|LinkedHashMap
name|ret
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|Object
name|o
init|=
name|ret
operator|.
name|put
argument_list|(
name|params
index|[
name|i
index|]
argument_list|,
name|params
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
decl_stmt|;
comment|// TODO: handle multi-valued map?
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Generates a SolrQueryRequest using the LocalRequestFactory    * @see #lrf    */
DECL|method|req
specifier|public
specifier|static
name|SolrQueryRequest
name|req
parameter_list|(
name|String
modifier|...
name|q
parameter_list|)
block|{
return|return
name|lrf
operator|.
name|makeRequest
argument_list|(
name|q
argument_list|)
return|;
block|}
comment|/**    * Generates a SolrQueryRequest using the LocalRequestFactory    * @see #lrf    */
DECL|method|req
specifier|public
specifier|static
name|SolrQueryRequest
name|req
parameter_list|(
name|String
index|[]
name|params
parameter_list|,
name|String
modifier|...
name|moreParams
parameter_list|)
block|{
name|String
index|[]
name|allParams
init|=
name|moreParams
decl_stmt|;
if|if
condition|(
name|params
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|int
name|len
init|=
name|params
operator|.
name|length
operator|+
name|moreParams
operator|.
name|length
decl_stmt|;
name|allParams
operator|=
operator|new
name|String
index|[
name|len
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|params
argument_list|,
literal|0
argument_list|,
name|allParams
argument_list|,
literal|0
argument_list|,
name|params
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|moreParams
argument_list|,
literal|0
argument_list|,
name|allParams
argument_list|,
name|params
operator|.
name|length
argument_list|,
name|moreParams
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|lrf
operator|.
name|makeRequest
argument_list|(
name|allParams
argument_list|)
return|;
block|}
comment|/**    * Generates a SolrQueryRequest    */
DECL|method|req
specifier|public
specifier|static
name|SolrQueryRequest
name|req
parameter_list|(
name|SolrParams
name|params
parameter_list|,
name|String
modifier|...
name|moreParams
parameter_list|)
block|{
name|ModifiableSolrParams
name|mp
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|params
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|moreParams
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|mp
operator|.
name|add
argument_list|(
name|moreParams
index|[
name|i
index|]
argument_list|,
name|moreParams
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
argument_list|,
name|mp
argument_list|)
return|;
block|}
comment|/** Necessary to make method signatures un-ambiguous */
DECL|class|XmlDoc
specifier|public
specifier|static
class|class
name|XmlDoc
block|{
DECL|field|xml
specifier|public
name|String
name|xml
decl_stmt|;
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|xml
return|;
block|}
block|}
DECL|method|recurseDelete
specifier|public
specifier|static
name|boolean
name|recurseDelete
parameter_list|(
name|File
name|f
parameter_list|)
block|{
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
for|for
control|(
name|File
name|sub
range|:
name|f
operator|.
name|listFiles
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|recurseDelete
argument_list|(
name|sub
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"!!!! WARNING: best effort to remove "
operator|+
name|sub
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" FAILED !!!!!"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
name|f
operator|.
name|delete
argument_list|()
return|;
block|}
DECL|method|clearIndex
specifier|public
name|void
name|clearIndex
parameter_list|()
block|{
name|assertU
argument_list|(
name|delQ
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Send JSON update commands */
DECL|method|updateJ
specifier|public
specifier|static
name|String
name|updateJ
parameter_list|(
name|String
name|json
parameter_list|,
name|SolrParams
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|==
literal|null
condition|)
block|{
name|args
operator|=
name|params
argument_list|(
literal|"wt"
argument_list|,
literal|"json"
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ModifiableSolrParams
name|newArgs
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|newArgs
operator|.
name|get
argument_list|(
literal|"wt"
argument_list|)
operator|==
literal|null
condition|)
name|newArgs
operator|.
name|set
argument_list|(
literal|"wt"
argument_list|,
literal|"json"
argument_list|)
expr_stmt|;
if|if
condition|(
name|newArgs
operator|.
name|get
argument_list|(
literal|"indent"
argument_list|)
operator|==
literal|null
condition|)
name|newArgs
operator|.
name|set
argument_list|(
literal|"indent"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|args
operator|=
name|newArgs
expr_stmt|;
block|}
name|DirectSolrConnection
name|connection
init|=
operator|new
name|DirectSolrConnection
argument_list|(
name|core
argument_list|)
decl_stmt|;
name|SolrRequestHandler
name|handler
init|=
name|core
operator|.
name|getRequestHandler
argument_list|(
literal|"/update/json"
argument_list|)
decl_stmt|;
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
name|handler
operator|=
operator|new
name|JsonUpdateRequestHandler
argument_list|()
expr_stmt|;
name|handler
operator|.
name|init
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|connection
operator|.
name|request
argument_list|(
name|handler
argument_list|,
name|args
argument_list|,
name|json
argument_list|)
return|;
block|}
DECL|method|sdoc
specifier|public
specifier|static
name|SolrInputDocument
name|sdoc
parameter_list|(
name|Object
modifier|...
name|fieldsAndValues
parameter_list|)
block|{
name|SolrInputDocument
name|sd
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldsAndValues
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|sd
operator|.
name|addField
argument_list|(
operator|(
name|String
operator|)
name|fieldsAndValues
index|[
name|i
index|]
argument_list|,
name|fieldsAndValues
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|sd
return|;
block|}
DECL|method|sdocs
specifier|public
specifier|static
name|List
argument_list|<
name|SolrInputDocument
argument_list|>
name|sdocs
parameter_list|(
name|SolrInputDocument
modifier|...
name|docs
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|docs
argument_list|)
return|;
block|}
comment|/** Converts "test JSON" and returns standard JSON.    *  Currently this only consists of changing unescaped single quotes to double quotes,    *  and escaped single quotes to single quotes.    *    * The primary purpose is to be able to easily embed JSON strings in a JAVA string    * with the best readability.    *    * This transformation is automatically applied to JSON test srings (like assertJQ).    */
DECL|method|json
specifier|public
specifier|static
name|String
name|json
parameter_list|(
name|String
name|testJSON
parameter_list|)
block|{
name|testJSON
operator|=
name|nonEscapedSingleQuotePattern
operator|.
name|matcher
argument_list|(
name|testJSON
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
name|testJSON
operator|=
name|escapedSingleQuotePattern
operator|.
name|matcher
argument_list|(
name|testJSON
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
return|return
name|testJSON
return|;
block|}
DECL|field|nonEscapedSingleQuotePattern
specifier|private
specifier|static
name|Pattern
name|nonEscapedSingleQuotePattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(?<!\\\\)\'"
argument_list|)
decl_stmt|;
DECL|field|escapedSingleQuotePattern
specifier|private
specifier|static
name|Pattern
name|escapedSingleQuotePattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\\\\'"
argument_list|)
decl_stmt|;
comment|/** Creates JSON from a SolrInputDocument.  Doesn't currently handle boosts. */
DECL|method|json
specifier|public
specifier|static
name|String
name|json
parameter_list|(
name|SolrInputDocument
name|doc
parameter_list|)
block|{
name|CharArr
name|out
init|=
operator|new
name|CharArr
argument_list|()
decl_stmt|;
try|try
block|{
name|out
operator|.
name|append
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|boolean
name|firstField
init|=
literal|true
decl_stmt|;
for|for
control|(
name|SolrInputField
name|sfield
range|:
name|doc
control|)
block|{
if|if
condition|(
name|firstField
condition|)
name|firstField
operator|=
literal|false
expr_stmt|;
else|else
name|out
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|JSONUtil
operator|.
name|writeString
argument_list|(
name|sfield
operator|.
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|,
name|sfield
operator|.
name|getName
argument_list|()
operator|.
name|length
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
name|sfield
operator|.
name|getValueCount
argument_list|()
operator|>
literal|1
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
name|boolean
name|firstVal
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Object
name|val
range|:
name|sfield
control|)
block|{
if|if
condition|(
name|firstVal
condition|)
name|firstVal
operator|=
literal|false
expr_stmt|;
else|else
name|out
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|JSONUtil
operator|.
name|toJSON
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|append
argument_list|(
name|JSONUtil
operator|.
name|toJSON
argument_list|(
name|sfield
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// should never happen
block|}
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Creates a JSON add command from a SolrInputDocument list.  Doesn't currently handle boosts. */
DECL|method|jsonAdd
specifier|public
specifier|static
name|String
name|jsonAdd
parameter_list|(
name|SolrInputDocument
modifier|...
name|docs
parameter_list|)
block|{
name|CharArr
name|out
init|=
operator|new
name|CharArr
argument_list|()
decl_stmt|;
try|try
block|{
name|out
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
name|boolean
name|firstField
init|=
literal|true
decl_stmt|;
for|for
control|(
name|SolrInputDocument
name|doc
range|:
name|docs
control|)
block|{
if|if
condition|(
name|firstField
condition|)
name|firstField
operator|=
literal|false
expr_stmt|;
else|else
name|out
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|json
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// should never happen
block|}
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Creates a JSON delete command from an id list */
DECL|method|jsonDelId
specifier|public
specifier|static
name|String
name|jsonDelId
parameter_list|(
name|Object
modifier|...
name|ids
parameter_list|)
block|{
name|CharArr
name|out
init|=
operator|new
name|CharArr
argument_list|()
decl_stmt|;
try|try
block|{
name|out
operator|.
name|append
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Object
name|id
range|:
name|ids
control|)
block|{
if|if
condition|(
name|first
condition|)
name|first
operator|=
literal|false
expr_stmt|;
else|else
name|out
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
literal|"\"delete\":{\"id\":"
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|JSONUtil
operator|.
name|toJSON
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// should never happen
block|}
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Creates a JSON deleteByQuery command */
DECL|method|jsonDelQ
specifier|public
specifier|static
name|String
name|jsonDelQ
parameter_list|(
name|String
modifier|...
name|queries
parameter_list|)
block|{
name|CharArr
name|out
init|=
operator|new
name|CharArr
argument_list|()
decl_stmt|;
try|try
block|{
name|out
operator|.
name|append
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Object
name|q
range|:
name|queries
control|)
block|{
if|if
condition|(
name|first
condition|)
name|first
operator|=
literal|false
expr_stmt|;
else|else
name|out
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
literal|"\"delete\":{\"query\":"
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|JSONUtil
operator|.
name|toJSON
argument_list|(
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// should never happen
block|}
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|addAndGetVersion
specifier|public
specifier|static
name|Long
name|addAndGetVersion
parameter_list|(
name|SolrInputDocument
name|sdoc
parameter_list|,
name|SolrParams
name|params
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|params
operator|==
literal|null
operator|||
name|params
operator|.
name|get
argument_list|(
literal|"versions"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|ModifiableSolrParams
name|mparams
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|mparams
operator|.
name|set
argument_list|(
literal|"versions"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|params
operator|=
name|mparams
expr_stmt|;
block|}
name|String
name|response
init|=
name|updateJ
argument_list|(
name|jsonAdd
argument_list|(
name|sdoc
argument_list|)
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|Map
name|rsp
init|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|fromJSON
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|List
name|lst
init|=
operator|(
name|List
operator|)
name|rsp
operator|.
name|get
argument_list|(
literal|"adds"
argument_list|)
decl_stmt|;
if|if
condition|(
name|lst
operator|==
literal|null
operator|||
name|lst
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
return|return
operator|(
name|Long
operator|)
name|lst
operator|.
name|get
argument_list|(
literal|1
argument_list|)
return|;
block|}
DECL|method|deleteAndGetVersion
specifier|public
specifier|static
name|Long
name|deleteAndGetVersion
parameter_list|(
name|String
name|id
parameter_list|,
name|SolrParams
name|params
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|params
operator|==
literal|null
operator|||
name|params
operator|.
name|get
argument_list|(
literal|"versions"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|ModifiableSolrParams
name|mparams
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|mparams
operator|.
name|set
argument_list|(
literal|"versions"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|params
operator|=
name|mparams
expr_stmt|;
block|}
name|String
name|response
init|=
name|updateJ
argument_list|(
name|jsonDelId
argument_list|(
name|id
argument_list|)
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|Map
name|rsp
init|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|fromJSON
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|List
name|lst
init|=
operator|(
name|List
operator|)
name|rsp
operator|.
name|get
argument_list|(
literal|"deletes"
argument_list|)
decl_stmt|;
if|if
condition|(
name|lst
operator|==
literal|null
operator|||
name|lst
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
return|return
operator|(
name|Long
operator|)
name|lst
operator|.
name|get
argument_list|(
literal|1
argument_list|)
return|;
block|}
DECL|method|deleteByQueryAndGetVersion
specifier|public
specifier|static
name|Long
name|deleteByQueryAndGetVersion
parameter_list|(
name|String
name|q
parameter_list|,
name|SolrParams
name|params
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|params
operator|==
literal|null
operator|||
name|params
operator|.
name|get
argument_list|(
literal|"versions"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|ModifiableSolrParams
name|mparams
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|mparams
operator|.
name|set
argument_list|(
literal|"versions"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|params
operator|=
name|mparams
expr_stmt|;
block|}
name|String
name|response
init|=
name|updateJ
argument_list|(
name|jsonDelQ
argument_list|(
name|q
argument_list|)
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|Map
name|rsp
init|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|fromJSON
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|List
name|lst
init|=
operator|(
name|List
operator|)
name|rsp
operator|.
name|get
argument_list|(
literal|"deleteByQuery"
argument_list|)
decl_stmt|;
if|if
condition|(
name|lst
operator|==
literal|null
operator|||
name|lst
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
return|return
operator|(
name|Long
operator|)
name|lst
operator|.
name|get
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|/////////////////////////////////////////////////////////////////////////////////////
comment|//////////////////////////// random document / index creation ///////////////////////
comment|/////////////////////////////////////////////////////////////////////////////////////
DECL|class|Vals
specifier|public
specifier|abstract
specifier|static
class|class
name|Vals
block|{
DECL|method|get
specifier|public
specifier|abstract
name|Comparable
name|get
parameter_list|()
function_decl|;
DECL|method|toJSON
specifier|public
name|String
name|toJSON
parameter_list|(
name|Comparable
name|val
parameter_list|)
block|{
return|return
name|JSONUtil
operator|.
name|toJSON
argument_list|(
name|val
argument_list|)
return|;
block|}
DECL|method|between
specifier|protected
name|int
name|between
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
return|return
name|min
operator|!=
name|max
condition|?
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|max
operator|-
name|min
operator|+
literal|1
argument_list|)
operator|+
name|min
else|:
name|min
return|;
block|}
block|}
DECL|class|IVals
specifier|public
specifier|abstract
specifier|static
class|class
name|IVals
extends|extends
name|Vals
block|{
DECL|method|getInt
specifier|public
specifier|abstract
name|int
name|getInt
parameter_list|()
function_decl|;
block|}
DECL|class|IRange
specifier|public
specifier|static
class|class
name|IRange
extends|extends
name|IVals
block|{
DECL|field|min
specifier|final
name|int
name|min
decl_stmt|;
DECL|field|max
specifier|final
name|int
name|max
decl_stmt|;
DECL|method|IRange
specifier|public
name|IRange
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getInt
specifier|public
name|int
name|getInt
parameter_list|()
block|{
return|return
name|between
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|Comparable
name|get
parameter_list|()
block|{
return|return
name|getInt
argument_list|()
return|;
block|}
block|}
DECL|class|IValsPercent
specifier|public
specifier|static
class|class
name|IValsPercent
extends|extends
name|IVals
block|{
DECL|field|percentAndValue
specifier|final
name|int
index|[]
name|percentAndValue
decl_stmt|;
DECL|method|IValsPercent
specifier|public
name|IValsPercent
parameter_list|(
name|int
modifier|...
name|percentAndValue
parameter_list|)
block|{
name|this
operator|.
name|percentAndValue
operator|=
name|percentAndValue
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getInt
specifier|public
name|int
name|getInt
parameter_list|()
block|{
name|int
name|r
init|=
name|between
argument_list|(
literal|0
argument_list|,
literal|99
argument_list|)
decl_stmt|;
name|int
name|cumulative
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|percentAndValue
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|cumulative
operator|+=
name|percentAndValue
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|r
operator|<
name|cumulative
condition|)
block|{
return|return
name|percentAndValue
index|[
name|i
operator|+
literal|1
index|]
return|;
block|}
block|}
return|return
name|percentAndValue
index|[
name|percentAndValue
operator|.
name|length
operator|-
literal|1
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|Comparable
name|get
parameter_list|()
block|{
return|return
name|getInt
argument_list|()
return|;
block|}
block|}
DECL|class|FVal
specifier|public
specifier|static
class|class
name|FVal
extends|extends
name|Vals
block|{
DECL|field|min
specifier|final
name|float
name|min
decl_stmt|;
DECL|field|max
specifier|final
name|float
name|max
decl_stmt|;
DECL|method|FVal
specifier|public
name|FVal
parameter_list|(
name|float
name|min
parameter_list|,
name|float
name|max
parameter_list|)
block|{
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
block|}
DECL|method|getFloat
specifier|public
name|float
name|getFloat
parameter_list|()
block|{
if|if
condition|(
name|min
operator|>=
name|max
condition|)
return|return
name|min
return|;
return|return
name|min
operator|+
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
operator|*
operator|(
name|max
operator|-
name|min
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|Comparable
name|get
parameter_list|()
block|{
return|return
name|getFloat
argument_list|()
return|;
block|}
block|}
DECL|class|SVal
specifier|public
specifier|static
class|class
name|SVal
extends|extends
name|Vals
block|{
DECL|field|start
name|char
name|start
decl_stmt|;
DECL|field|end
name|char
name|end
decl_stmt|;
DECL|field|minLength
name|int
name|minLength
decl_stmt|;
DECL|field|maxLength
name|int
name|maxLength
decl_stmt|;
DECL|method|SVal
specifier|public
name|SVal
parameter_list|()
block|{
name|this
argument_list|(
literal|'a'
argument_list|,
literal|'z'
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
DECL|method|SVal
specifier|public
name|SVal
parameter_list|(
name|char
name|start
parameter_list|,
name|char
name|end
parameter_list|,
name|int
name|minLength
parameter_list|,
name|int
name|maxLength
parameter_list|)
block|{
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
name|this
operator|.
name|minLength
operator|=
name|minLength
expr_stmt|;
name|this
operator|.
name|maxLength
operator|=
name|maxLength
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|Comparable
name|get
parameter_list|()
block|{
name|char
index|[]
name|arr
init|=
operator|new
name|char
index|[
name|between
argument_list|(
name|minLength
argument_list|,
name|maxLength
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|arr
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|between
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|arr
argument_list|)
return|;
block|}
block|}
DECL|field|ZERO_ONE
specifier|public
specifier|static
specifier|final
name|IRange
name|ZERO_ONE
init|=
operator|new
name|IRange
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|ZERO_TWO
specifier|public
specifier|static
specifier|final
name|IRange
name|ZERO_TWO
init|=
operator|new
name|IRange
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
DECL|field|ONE_ONE
specifier|public
specifier|static
specifier|final
name|IRange
name|ONE_ONE
init|=
operator|new
name|IRange
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|class|Doc
specifier|public
specifier|static
class|class
name|Doc
implements|implements
name|Comparable
block|{
DECL|field|id
specifier|public
name|Comparable
name|id
decl_stmt|;
DECL|field|fields
specifier|public
name|List
argument_list|<
name|Fld
argument_list|>
name|fields
decl_stmt|;
DECL|field|order
specifier|public
name|int
name|order
decl_stmt|;
comment|// the order this document was added to the index
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Doc("
operator|+
name|order
operator|+
literal|"):"
operator|+
name|fields
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|id
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|Doc
operator|)
condition|)
return|return
literal|false
return|;
name|Doc
name|other
init|=
operator|(
name|Doc
operator|)
name|o
decl_stmt|;
return|return
name|this
operator|==
name|other
operator|||
name|id
operator|!=
literal|null
operator|&&
name|id
operator|.
name|equals
argument_list|(
name|other
operator|.
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|Doc
operator|)
condition|)
return|return
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|-
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
name|Doc
name|other
init|=
operator|(
name|Doc
operator|)
name|o
decl_stmt|;
return|return
name|this
operator|.
name|id
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|id
argument_list|)
return|;
block|}
DECL|method|getValues
specifier|public
name|List
argument_list|<
name|Comparable
argument_list|>
name|getValues
parameter_list|(
name|String
name|field
parameter_list|)
block|{
for|for
control|(
name|Fld
name|fld
range|:
name|fields
control|)
block|{
if|if
condition|(
name|fld
operator|.
name|ftype
operator|.
name|fname
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
return|return
name|fld
operator|.
name|vals
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getFirstValue
specifier|public
name|Comparable
name|getFirstValue
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|List
argument_list|<
name|Comparable
argument_list|>
name|vals
init|=
name|getValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
name|vals
operator|==
literal|null
operator|||
name|vals
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|vals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|toObject
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|toObject
parameter_list|(
name|IndexSchema
name|schema
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Fld
name|fld
range|:
name|fields
control|)
block|{
name|SchemaField
name|sf
init|=
name|schema
operator|.
name|getField
argument_list|(
name|fld
operator|.
name|ftype
operator|.
name|fname
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sf
operator|.
name|multiValued
argument_list|()
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|fld
operator|.
name|ftype
operator|.
name|fname
argument_list|,
name|fld
operator|.
name|vals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|put
argument_list|(
name|fld
operator|.
name|ftype
operator|.
name|fname
argument_list|,
name|fld
operator|.
name|vals
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
DECL|class|Fld
specifier|public
specifier|static
class|class
name|Fld
block|{
DECL|field|ftype
specifier|public
name|FldType
name|ftype
decl_stmt|;
DECL|field|vals
specifier|public
name|List
argument_list|<
name|Comparable
argument_list|>
name|vals
decl_stmt|;
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|ftype
operator|.
name|fname
operator|+
literal|"="
operator|+
operator|(
name|vals
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
name|vals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
else|:
name|vals
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
block|}
DECL|class|FldType
specifier|protected
class|class
name|FldType
block|{
DECL|field|fname
specifier|public
name|String
name|fname
decl_stmt|;
DECL|field|numValues
specifier|public
name|IVals
name|numValues
decl_stmt|;
DECL|field|vals
specifier|public
name|Vals
name|vals
decl_stmt|;
DECL|method|FldType
specifier|public
name|FldType
parameter_list|(
name|String
name|fname
parameter_list|,
name|Vals
name|vals
parameter_list|)
block|{
name|this
argument_list|(
name|fname
argument_list|,
name|ZERO_ONE
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
DECL|method|FldType
specifier|public
name|FldType
parameter_list|(
name|String
name|fname
parameter_list|,
name|IVals
name|numValues
parameter_list|,
name|Vals
name|vals
parameter_list|)
block|{
name|this
operator|.
name|fname
operator|=
name|fname
expr_stmt|;
name|this
operator|.
name|numValues
operator|=
name|numValues
expr_stmt|;
name|this
operator|.
name|vals
operator|=
name|vals
expr_stmt|;
block|}
DECL|method|createValue
specifier|public
name|Comparable
name|createValue
parameter_list|()
block|{
return|return
name|vals
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|createValues
specifier|public
name|List
argument_list|<
name|Comparable
argument_list|>
name|createValues
parameter_list|()
block|{
name|int
name|nVals
init|=
name|numValues
operator|.
name|getInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|nVals
operator|<=
literal|0
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|Comparable
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<
name|Comparable
argument_list|>
argument_list|(
name|nVals
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nVals
condition|;
name|i
operator|++
control|)
name|vals
operator|.
name|add
argument_list|(
name|createValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|vals
return|;
block|}
DECL|method|createField
specifier|public
name|Fld
name|createField
parameter_list|()
block|{
name|List
argument_list|<
name|Comparable
argument_list|>
name|vals
init|=
name|createValues
argument_list|()
decl_stmt|;
if|if
condition|(
name|vals
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Fld
name|fld
init|=
operator|new
name|Fld
argument_list|()
decl_stmt|;
name|fld
operator|.
name|ftype
operator|=
name|this
expr_stmt|;
name|fld
operator|.
name|vals
operator|=
name|vals
expr_stmt|;
return|return
name|fld
return|;
block|}
block|}
DECL|method|indexDocs
specifier|public
name|Map
argument_list|<
name|Comparable
argument_list|,
name|Doc
argument_list|>
name|indexDocs
parameter_list|(
name|List
argument_list|<
name|FldType
argument_list|>
name|descriptor
parameter_list|,
name|Map
argument_list|<
name|Comparable
argument_list|,
name|Doc
argument_list|>
name|model
parameter_list|,
name|int
name|nDocs
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|model
operator|==
literal|null
condition|)
block|{
name|model
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|Comparable
argument_list|,
name|Doc
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|// commit an average of 10 times for large sets, or 10% of the time for small sets
name|int
name|commitOneOutOf
init|=
name|Math
operator|.
name|max
argument_list|(
name|nDocs
operator|/
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nDocs
condition|;
name|i
operator|++
control|)
block|{
name|Doc
name|doc
init|=
name|createDoc
argument_list|(
name|descriptor
argument_list|)
decl_stmt|;
comment|// doc.order = order++;
name|updateJ
argument_list|(
name|toJSON
argument_list|(
name|doc
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|model
operator|.
name|put
argument_list|(
name|doc
operator|.
name|id
argument_list|,
name|doc
argument_list|)
expr_stmt|;
comment|// commit 10% of the time
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|commitOneOutOf
argument_list|)
operator|==
literal|0
condition|)
block|{
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// duplicate 10% of the docs
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|updateJ
argument_list|(
name|toJSON
argument_list|(
name|doc
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|model
operator|.
name|put
argument_list|(
name|doc
operator|.
name|id
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
comment|// optimize 10% of the time
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|assertU
argument_list|(
name|optimize
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertU
argument_list|(
name|commit
argument_list|(
literal|"softCommit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// merging segments no longer selects just adjacent segments hence ids (doc.order) can be shuffled.
comment|// we need to look at the index to determine the order.
name|String
name|responseStr
init|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"sort"
argument_list|,
literal|"_docid_ asc"
argument_list|,
literal|"rows"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|model
operator|.
name|size
argument_list|()
operator|*
literal|2
argument_list|)
argument_list|,
literal|"wt"
argument_list|,
literal|"json"
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|response
init|=
name|ObjectBuilder
operator|.
name|fromJSON
argument_list|(
name|responseStr
argument_list|)
decl_stmt|;
name|response
operator|=
operator|(
operator|(
name|Map
operator|)
name|response
operator|)
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
expr_stmt|;
name|response
operator|=
operator|(
operator|(
name|Map
operator|)
name|response
operator|)
operator|.
name|get
argument_list|(
literal|"docs"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|docList
init|=
operator|(
name|List
argument_list|<
name|Map
argument_list|>
operator|)
name|response
decl_stmt|;
name|int
name|order
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
name|doc
range|:
name|docList
control|)
block|{
name|Object
name|id
init|=
name|doc
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|Doc
name|modelDoc
init|=
name|model
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|modelDoc
operator|==
literal|null
condition|)
continue|continue;
comment|// may be some docs in the index that aren't modeled
name|modelDoc
operator|.
name|order
operator|=
name|order
operator|++
expr_stmt|;
block|}
comment|// make sure we updated the order of all docs in the model
name|assertEquals
argument_list|(
name|order
argument_list|,
name|model
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|model
return|;
block|}
DECL|method|createDoc
specifier|public
specifier|static
name|Doc
name|createDoc
parameter_list|(
name|List
argument_list|<
name|FldType
argument_list|>
name|descriptor
parameter_list|)
block|{
name|Doc
name|doc
init|=
operator|new
name|Doc
argument_list|()
decl_stmt|;
name|doc
operator|.
name|fields
operator|=
operator|new
name|ArrayList
argument_list|<
name|Fld
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|FldType
name|ftype
range|:
name|descriptor
control|)
block|{
name|Fld
name|fld
init|=
name|ftype
operator|.
name|createField
argument_list|()
decl_stmt|;
if|if
condition|(
name|fld
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|fields
operator|.
name|add
argument_list|(
name|fld
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"id"
operator|.
name|equals
argument_list|(
name|ftype
operator|.
name|fname
argument_list|)
condition|)
name|doc
operator|.
name|id
operator|=
name|fld
operator|.
name|vals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|doc
return|;
block|}
DECL|method|createSort
specifier|public
specifier|static
name|Comparator
argument_list|<
name|Doc
argument_list|>
name|createSort
parameter_list|(
name|IndexSchema
name|schema
parameter_list|,
name|List
argument_list|<
name|FldType
argument_list|>
name|fieldTypes
parameter_list|,
name|String
index|[]
name|out
parameter_list|)
block|{
name|StringBuilder
name|sortSpec
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|nSorts
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Comparator
argument_list|<
name|Doc
argument_list|>
argument_list|>
name|comparators
init|=
operator|new
name|ArrayList
argument_list|<
name|Comparator
argument_list|<
name|Doc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nSorts
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sortSpec
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|int
name|which
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|fieldTypes
operator|.
name|size
argument_list|()
operator|+
literal|2
argument_list|)
decl_stmt|;
name|boolean
name|asc
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|which
operator|==
name|fieldTypes
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// sort by score
name|sortSpec
operator|.
name|append
argument_list|(
literal|"score"
argument_list|)
operator|.
name|append
argument_list|(
name|asc
condition|?
literal|" asc"
else|:
literal|" desc"
argument_list|)
expr_stmt|;
name|comparators
operator|.
name|add
argument_list|(
name|createComparator
argument_list|(
literal|"score"
argument_list|,
name|asc
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|which
operator|==
name|fieldTypes
operator|.
name|size
argument_list|()
operator|+
literal|1
condition|)
block|{
comment|// sort by docid
name|sortSpec
operator|.
name|append
argument_list|(
literal|"_docid_"
argument_list|)
operator|.
name|append
argument_list|(
name|asc
condition|?
literal|" asc"
else|:
literal|" desc"
argument_list|)
expr_stmt|;
name|comparators
operator|.
name|add
argument_list|(
name|createComparator
argument_list|(
literal|"_docid_"
argument_list|,
name|asc
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|field
init|=
name|fieldTypes
operator|.
name|get
argument_list|(
name|which
argument_list|)
operator|.
name|fname
decl_stmt|;
name|sortSpec
operator|.
name|append
argument_list|(
name|field
argument_list|)
operator|.
name|append
argument_list|(
name|asc
condition|?
literal|" asc"
else|:
literal|" desc"
argument_list|)
expr_stmt|;
name|SchemaField
name|sf
init|=
name|schema
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|comparators
operator|.
name|add
argument_list|(
name|createComparator
argument_list|(
name|field
argument_list|,
name|asc
argument_list|,
name|sf
operator|.
name|sortMissingLast
argument_list|()
argument_list|,
name|sf
operator|.
name|sortMissingFirst
argument_list|()
argument_list|,
operator|!
operator|(
name|sf
operator|.
name|sortMissingLast
argument_list|()
operator|||
name|sf
operator|.
name|sortMissingFirst
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|out
index|[
literal|0
index|]
operator|=
name|sortSpec
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|sortSpec
operator|.
name|toString
argument_list|()
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|comparators
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// default sort is by score desc
name|comparators
operator|.
name|add
argument_list|(
name|createComparator
argument_list|(
literal|"score"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|createComparator
argument_list|(
name|comparators
argument_list|)
return|;
block|}
DECL|method|createComparator
specifier|public
specifier|static
name|Comparator
argument_list|<
name|Doc
argument_list|>
name|createComparator
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
specifier|final
name|boolean
name|asc
parameter_list|,
specifier|final
name|boolean
name|sortMissingLast
parameter_list|,
specifier|final
name|boolean
name|sortMissingFirst
parameter_list|,
specifier|final
name|boolean
name|sortMissingAsZero
parameter_list|)
block|{
specifier|final
name|int
name|mul
init|=
name|asc
condition|?
literal|1
else|:
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
literal|"_docid_"
argument_list|)
condition|)
block|{
return|return
operator|new
name|Comparator
argument_list|<
name|Doc
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Doc
name|o1
parameter_list|,
name|Doc
name|o2
parameter_list|)
block|{
return|return
operator|(
name|o1
operator|.
name|order
operator|-
name|o2
operator|.
name|order
operator|)
operator|*
name|mul
return|;
block|}
block|}
return|;
block|}
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
literal|"score"
argument_list|)
condition|)
block|{
return|return
name|createComparator
argument_list|(
literal|"score_f"
argument_list|,
name|asc
argument_list|,
name|sortMissingLast
argument_list|,
name|sortMissingFirst
argument_list|,
name|sortMissingAsZero
argument_list|)
return|;
block|}
return|return
operator|new
name|Comparator
argument_list|<
name|Doc
argument_list|>
argument_list|()
block|{
specifier|private
name|Comparable
name|zeroVal
parameter_list|(
name|Comparable
name|template
parameter_list|)
block|{
if|if
condition|(
name|template
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|template
operator|instanceof
name|String
condition|)
return|return
literal|null
return|;
comment|// fast-path for string
if|if
condition|(
name|template
operator|instanceof
name|Integer
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|template
operator|instanceof
name|Long
condition|)
return|return
operator|(
name|long
operator|)
literal|0
return|;
if|if
condition|(
name|template
operator|instanceof
name|Float
condition|)
return|return
operator|(
name|float
operator|)
literal|0
return|;
if|if
condition|(
name|template
operator|instanceof
name|Double
condition|)
return|return
operator|(
name|double
operator|)
literal|0
return|;
if|if
condition|(
name|template
operator|instanceof
name|Short
condition|)
return|return
operator|(
name|short
operator|)
literal|0
return|;
if|if
condition|(
name|template
operator|instanceof
name|Byte
condition|)
return|return
operator|(
name|byte
operator|)
literal|0
return|;
if|if
condition|(
name|template
operator|instanceof
name|Character
condition|)
return|return
operator|(
name|char
operator|)
literal|0
return|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Doc
name|o1
parameter_list|,
name|Doc
name|o2
parameter_list|)
block|{
name|Comparable
name|v1
init|=
name|o1
operator|.
name|getFirstValue
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|Comparable
name|v2
init|=
name|o2
operator|.
name|getFirstValue
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|v1
operator|=
name|v1
operator|==
literal|null
condition|?
name|zeroVal
argument_list|(
name|v2
argument_list|)
else|:
name|v1
expr_stmt|;
name|v2
operator|=
name|v2
operator|==
literal|null
condition|?
name|zeroVal
argument_list|(
name|v1
argument_list|)
else|:
name|v2
expr_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|v1
operator|==
name|v2
condition|)
block|{
name|c
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v1
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|sortMissingLast
condition|)
name|c
operator|=
name|mul
expr_stmt|;
elseif|else
if|if
condition|(
name|sortMissingFirst
condition|)
name|c
operator|=
operator|-
name|mul
expr_stmt|;
else|else
name|c
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v2
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|sortMissingLast
condition|)
name|c
operator|=
operator|-
name|mul
expr_stmt|;
elseif|else
if|if
condition|(
name|sortMissingFirst
condition|)
name|c
operator|=
name|mul
expr_stmt|;
else|else
name|c
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|c
operator|=
name|v1
operator|.
name|compareTo
argument_list|(
name|v2
argument_list|)
expr_stmt|;
block|}
name|c
operator|=
name|c
operator|*
name|mul
expr_stmt|;
return|return
name|c
return|;
block|}
block|}
return|;
block|}
DECL|method|createComparator
specifier|public
specifier|static
name|Comparator
argument_list|<
name|Doc
argument_list|>
name|createComparator
parameter_list|(
specifier|final
name|List
argument_list|<
name|Comparator
argument_list|<
name|Doc
argument_list|>
argument_list|>
name|comparators
parameter_list|)
block|{
return|return
operator|new
name|Comparator
argument_list|<
name|Doc
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Doc
name|o1
parameter_list|,
name|Doc
name|o2
parameter_list|)
block|{
name|int
name|c
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Comparator
argument_list|<
name|Doc
argument_list|>
name|comparator
range|:
name|comparators
control|)
block|{
name|c
operator|=
name|comparator
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|!=
literal|0
condition|)
return|return
name|c
return|;
block|}
return|return
name|o1
operator|.
name|order
operator|-
name|o2
operator|.
name|order
return|;
block|}
block|}
return|;
block|}
DECL|method|toJSON
specifier|public
specifier|static
name|String
name|toJSON
parameter_list|(
name|Doc
name|doc
parameter_list|)
block|{
name|CharArr
name|out
init|=
operator|new
name|CharArr
argument_list|()
decl_stmt|;
try|try
block|{
name|out
operator|.
name|append
argument_list|(
literal|"{\"add\":{\"doc\":{"
argument_list|)
expr_stmt|;
name|boolean
name|firstField
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Fld
name|fld
range|:
name|doc
operator|.
name|fields
control|)
block|{
if|if
condition|(
name|firstField
condition|)
name|firstField
operator|=
literal|false
expr_stmt|;
else|else
name|out
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|JSONUtil
operator|.
name|writeString
argument_list|(
name|fld
operator|.
name|ftype
operator|.
name|fname
argument_list|,
literal|0
argument_list|,
name|fld
operator|.
name|ftype
operator|.
name|fname
operator|.
name|length
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
name|fld
operator|.
name|vals
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
block|}
name|boolean
name|firstVal
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Comparable
name|val
range|:
name|fld
operator|.
name|vals
control|)
block|{
if|if
condition|(
name|firstVal
condition|)
name|firstVal
operator|=
literal|false
expr_stmt|;
else|else
name|out
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|JSONUtil
operator|.
name|toJSON
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fld
operator|.
name|vals
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|append
argument_list|(
literal|"}}}"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// should never happen
block|}
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Return a Map from field value to a list of document ids */
DECL|method|invertField
specifier|public
name|Map
argument_list|<
name|Comparable
argument_list|,
name|List
argument_list|<
name|Comparable
argument_list|>
argument_list|>
name|invertField
parameter_list|(
name|Map
argument_list|<
name|Comparable
argument_list|,
name|Doc
argument_list|>
name|model
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|Map
argument_list|<
name|Comparable
argument_list|,
name|List
argument_list|<
name|Comparable
argument_list|>
argument_list|>
name|value_to_id
init|=
operator|new
name|HashMap
argument_list|<
name|Comparable
argument_list|,
name|List
argument_list|<
name|Comparable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// invert field
for|for
control|(
name|Comparable
name|key
range|:
name|model
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Doc
name|doc
init|=
name|model
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Comparable
argument_list|>
name|vals
init|=
name|doc
operator|.
name|getValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|vals
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|Comparable
name|val
range|:
name|vals
control|)
block|{
name|List
argument_list|<
name|Comparable
argument_list|>
name|ids
init|=
name|value_to_id
operator|.
name|get
argument_list|(
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
name|ids
operator|==
literal|null
condition|)
block|{
name|ids
operator|=
operator|new
name|ArrayList
argument_list|<
name|Comparable
argument_list|>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|value_to_id
operator|.
name|put
argument_list|(
name|val
argument_list|,
name|ids
argument_list|)
expr_stmt|;
block|}
name|ids
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|value_to_id
return|;
block|}
comment|/** Gets a resource from the context classloader as {@link File}. This method should only be used,    * if a real file is needed. To get a stream, code should prefer    * {@link Class#getResourceAsStream} using {@code this.getClass()}.    */
DECL|method|getFile
specifier|public
specifier|static
name|File
name|getFile
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|name
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|file
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|/* more friendly than NPE */
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot find resource: "
operator|+
operator|new
name|File
argument_list|(
name|name
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|TEST_HOME
specifier|public
specifier|static
name|String
name|TEST_HOME
parameter_list|()
block|{
return|return
name|getFile
argument_list|(
literal|"solr/collection1"
argument_list|)
operator|.
name|getParent
argument_list|()
return|;
block|}
DECL|method|getRootCause
specifier|public
specifier|static
name|Throwable
name|getRootCause
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Throwable
name|result
init|=
name|t
decl_stmt|;
for|for
control|(
name|Throwable
name|cause
init|=
name|t
init|;
literal|null
operator|!=
name|cause
condition|;
name|cause
operator|=
name|cause
operator|.
name|getCause
argument_list|()
control|)
block|{
name|result
operator|=
name|cause
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|assertXmlFile
specifier|public
specifier|static
name|void
name|assertXmlFile
parameter_list|(
specifier|final
name|File
name|file
parameter_list|,
name|String
modifier|...
name|xpath
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
try|try
block|{
name|String
name|xml
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|file
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|String
name|results
init|=
name|TestHarness
operator|.
name|validateXPath
argument_list|(
name|xml
argument_list|,
name|xpath
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|results
condition|)
block|{
name|String
name|msg
init|=
literal|"File XPath failure: file="
operator|+
name|file
operator|.
name|getPath
argument_list|()
operator|+
literal|" xpath="
operator|+
name|results
operator|+
literal|"\n\nxml was: "
operator|+
name|xml
decl_stmt|;
name|fail
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e2
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"XPath is invalid"
argument_list|,
name|e2
argument_list|)
throw|;
block|}
block|}
comment|/**    * Fails if the number of documents in the given SolrDocumentList differs    * from the given number of expected values, or if any of the values in the    * given field don't match the expected values in the same order.    */
DECL|method|assertFieldValues
specifier|public
specifier|static
name|void
name|assertFieldValues
parameter_list|(
name|SolrDocumentList
name|documents
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Object
modifier|...
name|expectedValues
parameter_list|)
block|{
if|if
condition|(
name|documents
operator|.
name|size
argument_list|()
operator|!=
name|expectedValues
operator|.
name|length
condition|)
block|{
name|fail
argument_list|(
literal|"Number of documents ("
operator|+
name|documents
operator|.
name|size
argument_list|()
operator|+
literal|") is different from number of expected values ("
operator|+
name|expectedValues
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|docNum
init|=
literal|1
init|;
name|docNum
operator|<=
name|documents
operator|.
name|size
argument_list|()
condition|;
operator|++
name|docNum
control|)
block|{
name|SolrDocument
name|doc
init|=
name|documents
operator|.
name|get
argument_list|(
name|docNum
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Object
name|expected
init|=
name|expectedValues
index|[
name|docNum
operator|-
literal|1
index|]
decl_stmt|;
name|Object
name|actual
init|=
name|doc
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|expected
operator|&&
literal|null
operator|!=
name|actual
condition|)
block|{
if|if
condition|(
operator|!
name|expected
operator|.
name|equals
argument_list|(
name|actual
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Unexpected "
operator|+
name|fieldName
operator|+
literal|" field value in document #"
operator|+
name|docNum
operator|+
literal|": expected=["
operator|+
name|expected
operator|+
literal|"], actual=["
operator|+
name|actual
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|copyMinConf
specifier|public
specifier|static
name|void
name|copyMinConf
parameter_list|(
name|File
name|dstRoot
parameter_list|)
throws|throws
name|IOException
block|{
name|copyMinConf
argument_list|(
name|dstRoot
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// Creates a minimal conf dir. Optionally adding in a core.properties file from the string passed in
comment|// the string to write to the core.properties file may be null in which case nothing is done with it.
comment|// propertiesContent may be an empty string, which will actually work.
DECL|method|copyMinConf
specifier|public
specifier|static
name|void
name|copyMinConf
parameter_list|(
name|File
name|dstRoot
parameter_list|,
name|String
name|propertiesContent
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|subHome
init|=
operator|new
name|File
argument_list|(
name|dstRoot
argument_list|,
literal|"conf"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dstRoot
operator|.
name|exists
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Failed to make subdirectory "
argument_list|,
name|dstRoot
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|propertiesContent
operator|!=
literal|null
condition|)
block|{
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
operator|new
name|File
argument_list|(
name|dstRoot
argument_list|,
literal|"core.properties"
argument_list|)
argument_list|,
name|propertiesContent
argument_list|,
name|Charsets
operator|.
name|UTF_8
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|top
init|=
name|SolrTestCaseJ4
operator|.
name|TEST_HOME
argument_list|()
operator|+
literal|"/collection1/conf"
decl_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|top
argument_list|,
literal|"schema-tiny.xml"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|subHome
argument_list|,
literal|"schema.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|top
argument_list|,
literal|"solrconfig-minimal.xml"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|subHome
argument_list|,
literal|"solrconfig.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|top
argument_list|,
literal|"solrconfig.snippet.randomindexconfig.xml"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|subHome
argument_list|,
literal|"solrconfig.snippet.randomindexconfig.xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Creates minimal full setup, including the old solr.xml file that used to be hard coded in ConfigSolrXmlOld
comment|// TODO: remove for 5.0
DECL|method|copyMinFullSetup
specifier|public
specifier|static
name|void
name|copyMinFullSetup
parameter_list|(
name|File
name|dstRoot
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|dstRoot
operator|.
name|exists
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Failed to make subdirectory "
argument_list|,
name|dstRoot
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|File
name|xmlF
init|=
operator|new
name|File
argument_list|(
name|SolrTestCaseJ4
operator|.
name|TEST_HOME
argument_list|()
argument_list|,
literal|"solr.xml"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|xmlF
argument_list|,
operator|new
name|File
argument_list|(
name|dstRoot
argument_list|,
literal|"solr.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|copyMinConf
argument_list|(
name|dstRoot
argument_list|)
expr_stmt|;
block|}
comment|// Creates a consistent configuration, _including_ solr.xml at dstRoot. Creates collection1/conf and copies
comment|// the stock files in there. Seems to be indicated for some tests when we remove the default, hard-coded
comment|// solr.xml from being automatically synthesized from SolrConfigXmlOld.DEFAULT_SOLR_XML.
DECL|method|copySolrHomeToTemp
specifier|public
specifier|static
name|void
name|copySolrHomeToTemp
parameter_list|(
name|File
name|dstRoot
parameter_list|,
name|String
name|collection
parameter_list|)
throws|throws
name|IOException
block|{
name|copySolrHomeToTemp
argument_list|(
name|dstRoot
argument_list|,
name|collection
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|copySolrHomeToTemp
specifier|public
specifier|static
name|void
name|copySolrHomeToTemp
parameter_list|(
name|File
name|dstRoot
parameter_list|,
name|String
name|collection
parameter_list|,
name|boolean
name|newStyle
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|dstRoot
operator|.
name|exists
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Failed to make subdirectory "
argument_list|,
name|dstRoot
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newStyle
condition|)
block|{
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|SolrTestCaseJ4
operator|.
name|TEST_HOME
argument_list|()
argument_list|,
literal|"solr-no-core.xml"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|dstRoot
argument_list|,
literal|"solr.xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|SolrTestCaseJ4
operator|.
name|TEST_HOME
argument_list|()
argument_list|,
literal|"solr.xml"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|dstRoot
argument_list|,
literal|"solr.xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|File
name|subHome
init|=
operator|new
name|File
argument_list|(
name|dstRoot
argument_list|,
name|collection
operator|+
name|File
operator|.
name|separator
operator|+
literal|"conf"
argument_list|)
decl_stmt|;
name|String
name|top
init|=
name|SolrTestCaseJ4
operator|.
name|TEST_HOME
argument_list|()
operator|+
literal|"/collection1/conf"
decl_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|top
argument_list|,
literal|"currency.xml"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|subHome
argument_list|,
literal|"currency.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|top
argument_list|,
literal|"mapping-ISOLatin1Accent.txt"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|subHome
argument_list|,
literal|"mapping-ISOLatin1Accent.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|top
argument_list|,
literal|"old_synonyms.txt"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|subHome
argument_list|,
literal|"old_synonyms.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|top
argument_list|,
literal|"open-exchange-rates.json"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|subHome
argument_list|,
literal|"open-exchange-rates.json"
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|top
argument_list|,
literal|"protwords.txt"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|subHome
argument_list|,
literal|"protwords.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|top
argument_list|,
literal|"schema.xml"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|subHome
argument_list|,
literal|"schema.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|top
argument_list|,
literal|"solrconfig.snippet.randomindexconfig.xml"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|subHome
argument_list|,
literal|"solrconfig.snippet.randomindexconfig.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|top
argument_list|,
literal|"solrconfig.xml"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|subHome
argument_list|,
literal|"solrconfig.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|top
argument_list|,
literal|"stopwords.txt"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|subHome
argument_list|,
literal|"stopwords.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|top
argument_list|,
literal|"synonyms.txt"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|subHome
argument_list|,
literal|"synonyms.txt"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|buildCoreDescriptor
specifier|public
specifier|static
name|CoreDescriptorBuilder
name|buildCoreDescriptor
parameter_list|(
name|CoreContainer
name|container
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|instancedir
parameter_list|)
block|{
return|return
operator|new
name|CoreDescriptorBuilder
argument_list|(
name|container
argument_list|,
name|name
argument_list|,
name|instancedir
argument_list|)
return|;
block|}
DECL|class|CoreDescriptorBuilder
specifier|public
specifier|static
class|class
name|CoreDescriptorBuilder
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|instanceDir
specifier|final
name|String
name|instanceDir
decl_stmt|;
DECL|field|container
specifier|final
name|CoreContainer
name|container
decl_stmt|;
DECL|field|properties
specifier|final
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
DECL|method|CoreDescriptorBuilder
specifier|public
name|CoreDescriptorBuilder
parameter_list|(
name|CoreContainer
name|container
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|instancedir
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|instanceDir
operator|=
name|instancedir
expr_stmt|;
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
block|}
DECL|method|withSchema
specifier|public
name|CoreDescriptorBuilder
name|withSchema
parameter_list|(
name|String
name|schema
parameter_list|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_SCHEMA
argument_list|,
name|schema
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withConfig
specifier|public
name|CoreDescriptorBuilder
name|withConfig
parameter_list|(
name|String
name|config
parameter_list|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_CONFIG
argument_list|,
name|config
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withDataDir
specifier|public
name|CoreDescriptorBuilder
name|withDataDir
parameter_list|(
name|String
name|datadir
parameter_list|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_DATADIR
argument_list|,
name|datadir
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build
specifier|public
name|CoreDescriptor
name|build
parameter_list|()
block|{
return|return
operator|new
name|CoreDescriptor
argument_list|(
name|container
argument_list|,
name|name
argument_list|,
name|instanceDir
argument_list|,
name|properties
argument_list|)
return|;
block|}
DECL|method|isTransient
specifier|public
name|CoreDescriptorBuilder
name|isTransient
parameter_list|(
name|boolean
name|isTransient
parameter_list|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_TRANSIENT
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|isTransient
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|loadOnStartup
specifier|public
name|CoreDescriptorBuilder
name|loadOnStartup
parameter_list|(
name|boolean
name|loadOnStartup
parameter_list|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_LOADONSTARTUP
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|loadOnStartup
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
block|}
end_class
end_unit
