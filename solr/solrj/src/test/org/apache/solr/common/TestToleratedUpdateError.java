begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.common
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|ToleratedUpdateError
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|ToleratedUpdateError
operator|.
name|CmdType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_comment
comment|/** Basic testing of the serialization/encapsulation code in ToleratedUpdateError */
end_comment
begin_class
DECL|class|TestToleratedUpdateError
specifier|public
class|class
name|TestToleratedUpdateError
extends|extends
name|LuceneTestCase
block|{
DECL|field|ALL_TYPES
specifier|private
specifier|final
specifier|static
name|CmdType
index|[]
name|ALL_TYPES
init|=
name|EnumSet
operator|.
name|allOf
argument_list|(
name|CmdType
operator|.
name|class
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|CmdType
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
DECL|method|testBasics
specifier|public
name|void
name|testBasics
parameter_list|()
block|{
name|assertFalse
argument_list|(
operator|(
operator|new
name|ToleratedUpdateError
argument_list|(
name|CmdType
operator|.
name|ADD
argument_list|,
literal|"doc1"
argument_list|,
literal|"some error"
argument_list|)
operator|)
operator|.
name|equals
argument_list|(
operator|new
name|ToleratedUpdateError
argument_list|(
name|CmdType
operator|.
name|ADD
argument_list|,
literal|"doc2"
argument_list|,
literal|"some error"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
operator|new
name|ToleratedUpdateError
argument_list|(
name|CmdType
operator|.
name|ADD
argument_list|,
literal|"doc1"
argument_list|,
literal|"some error"
argument_list|)
operator|)
operator|.
name|equals
argument_list|(
operator|new
name|ToleratedUpdateError
argument_list|(
name|CmdType
operator|.
name|ADD
argument_list|,
literal|"doc1"
argument_list|,
literal|"some errorxx"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
operator|new
name|ToleratedUpdateError
argument_list|(
name|CmdType
operator|.
name|ADD
argument_list|,
literal|"doc1"
argument_list|,
literal|"some error"
argument_list|)
operator|)
operator|.
name|equals
argument_list|(
operator|new
name|ToleratedUpdateError
argument_list|(
name|CmdType
operator|.
name|DELID
argument_list|,
literal|"doc1"
argument_list|,
literal|"some error"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseMetadataErrorHandling
specifier|public
name|void
name|testParseMetadataErrorHandling
parameter_list|()
block|{
name|assertNull
argument_list|(
name|ToleratedUpdateError
operator|.
name|parseMetadataIfToleratedUpdateError
argument_list|(
literal|"some other key"
argument_list|,
literal|"some value"
argument_list|)
argument_list|)
expr_stmt|;
comment|// see if someone tries to trick us into having an NPE...
name|ToleratedUpdateError
name|valid
init|=
operator|new
name|ToleratedUpdateError
argument_list|(
name|CmdType
operator|.
name|ADD
argument_list|,
literal|"doc2"
argument_list|,
literal|"some error"
argument_list|)
decl_stmt|;
name|String
name|badKey
init|=
name|valid
operator|.
name|getMetadataKey
argument_list|()
operator|.
name|replace
argument_list|(
literal|":"
argument_list|,
literal|"X"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|ToleratedUpdateError
operator|.
name|parseMetadataIfToleratedUpdateError
argument_list|(
name|badKey
argument_list|,
name|valid
operator|.
name|getMetadataValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseMapErrorChecking
specifier|public
name|void
name|testParseMapErrorChecking
parameter_list|()
block|{
name|SimpleOrderedMap
argument_list|<
name|String
argument_list|>
name|bogus
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|ToleratedUpdateError
operator|.
name|parseMap
argument_list|(
name|bogus
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"map should not be parsable"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Map does not represent a ToleratedUpdateError"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bogus
operator|.
name|add
argument_list|(
literal|"id"
argument_list|,
literal|"some id"
argument_list|)
expr_stmt|;
name|bogus
operator|.
name|add
argument_list|(
literal|"message"
argument_list|,
literal|"some message"
argument_list|)
expr_stmt|;
try|try
block|{
name|ToleratedUpdateError
operator|.
name|parseMap
argument_list|(
name|bogus
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"map should still not be parsable"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Map does not represent a ToleratedUpdateError"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bogus
operator|.
name|add
argument_list|(
literal|"type"
argument_list|,
literal|"not a real type"
argument_list|)
expr_stmt|;
try|try
block|{
name|ToleratedUpdateError
operator|.
name|parseMap
argument_list|(
name|bogus
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"invalid type should not be parsable"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid type"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParseMap
specifier|public
name|void
name|testParseMap
parameter_list|()
block|{
comment|// trivial
name|SimpleOrderedMap
name|valid
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|valid
operator|.
name|add
argument_list|(
literal|"type"
argument_list|,
name|CmdType
operator|.
name|ADD
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|valid
operator|.
name|add
argument_list|(
literal|"id"
argument_list|,
literal|"some id"
argument_list|)
expr_stmt|;
name|valid
operator|.
name|add
argument_list|(
literal|"message"
argument_list|,
literal|"some message"
argument_list|)
expr_stmt|;
name|ToleratedUpdateError
name|in
init|=
name|ToleratedUpdateError
operator|.
name|parseMap
argument_list|(
name|valid
argument_list|)
decl_stmt|;
name|compare
argument_list|(
name|in
argument_list|,
name|MAP_COPPIER
argument_list|)
expr_stmt|;
name|compare
argument_list|(
name|in
argument_list|,
name|METADATA_COPPIER
argument_list|)
expr_stmt|;
comment|// randomized
name|int
name|numIters
init|=
name|atLeast
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIters
condition|;
name|i
operator|++
control|)
block|{
name|valid
operator|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|valid
operator|.
name|add
argument_list|(
literal|"type"
argument_list|,
name|ALL_TYPES
index|[
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|ALL_TYPES
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|valid
operator|.
name|add
argument_list|(
literal|"id"
argument_list|,
name|TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|valid
operator|.
name|add
argument_list|(
literal|"message"
argument_list|,
name|TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|=
name|ToleratedUpdateError
operator|.
name|parseMap
argument_list|(
name|valid
argument_list|)
expr_stmt|;
name|compare
argument_list|(
name|in
argument_list|,
name|MAP_COPPIER
argument_list|)
expr_stmt|;
name|compare
argument_list|(
name|in
argument_list|,
name|METADATA_COPPIER
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkRoundTripComparisons
specifier|public
name|void
name|checkRoundTripComparisons
parameter_list|(
name|Coppier
name|coppier
parameter_list|)
block|{
comment|// some simple basics
for|for
control|(
name|ToleratedUpdateError
name|in
range|:
operator|new
name|ToleratedUpdateError
index|[]
block|{
operator|new
name|ToleratedUpdateError
argument_list|(
name|CmdType
operator|.
name|ADD
argument_list|,
literal|"doc1"
argument_list|,
literal|"some error"
argument_list|)
block|,
operator|new
name|ToleratedUpdateError
argument_list|(
name|CmdType
operator|.
name|DELID
argument_list|,
literal|"doc1"
argument_list|,
literal|"some diff error"
argument_list|)
block|,
operator|new
name|ToleratedUpdateError
argument_list|(
name|CmdType
operator|.
name|DELQ
argument_list|,
literal|"-field:yakko other_field:wakko"
argument_list|,
literal|"some other error"
argument_list|)
block|,       }
control|)
block|{
name|compare
argument_list|(
name|in
argument_list|,
name|coppier
argument_list|)
expr_stmt|;
block|}
comment|// randomized testing of non trivial keys/values
name|int
name|numIters
init|=
name|atLeast
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIters
condition|;
name|i
operator|++
control|)
block|{
name|ToleratedUpdateError
name|in
init|=
operator|new
name|ToleratedUpdateError
argument_list|(
name|ALL_TYPES
index|[
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|ALL_TYPES
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
argument_list|,
name|TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|compare
argument_list|(
name|in
argument_list|,
name|coppier
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMetadataRoundTripComparisons
specifier|public
name|void
name|testMetadataRoundTripComparisons
parameter_list|(
name|Coppier
name|coppier
parameter_list|)
block|{
name|checkRoundTripComparisons
argument_list|(
name|METADATA_COPPIER
argument_list|)
expr_stmt|;
block|}
DECL|method|testMapRoundTripComparisons
specifier|public
name|void
name|testMapRoundTripComparisons
parameter_list|()
block|{
name|checkRoundTripComparisons
argument_list|(
name|MAP_COPPIER
argument_list|)
expr_stmt|;
block|}
comment|/** trivial sanity check */
DECL|method|testMaxErrorsValueConversion
specifier|public
name|void
name|testMaxErrorsValueConversion
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|ToleratedUpdateError
operator|.
name|getUserFriendlyMaxErrors
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|ToleratedUpdateError
operator|.
name|getUserFriendlyMaxErrors
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|ToleratedUpdateError
operator|.
name|getEffectiveMaxErrors
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|ToleratedUpdateError
operator|.
name|getEffectiveMaxErrors
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|val
range|:
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|10
block|,
literal|42
block|,
literal|600000
block|}
control|)
block|{
name|assertEquals
argument_list|(
name|val
argument_list|,
name|ToleratedUpdateError
operator|.
name|getEffectiveMaxErrors
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|val
argument_list|,
name|ToleratedUpdateError
operator|.
name|getUserFriendlyMaxErrors
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|compare
specifier|public
name|void
name|compare
parameter_list|(
name|ToleratedUpdateError
name|in
parameter_list|,
name|Coppier
name|coppier
parameter_list|)
block|{
name|ToleratedUpdateError
name|out
init|=
name|coppier
operator|.
name|copy
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|compare
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|compare
specifier|public
name|void
name|compare
parameter_list|(
name|ToleratedUpdateError
name|in
parameter_list|,
name|ToleratedUpdateError
name|out
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|out
operator|.
name|getType
argument_list|()
argument_list|,
name|in
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|out
operator|.
name|getId
argument_list|()
argument_list|,
name|in
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|out
operator|.
name|getMessage
argument_list|()
argument_list|,
name|in
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|out
operator|.
name|hashCode
argument_list|()
argument_list|,
name|in
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|,
name|in
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|in
operator|.
name|getMetadataKey
argument_list|()
argument_list|,
name|out
operator|.
name|getMetadataKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|in
operator|.
name|getMetadataValue
argument_list|()
argument_list|,
name|out
operator|.
name|getMetadataValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|out
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
DECL|class|Coppier
specifier|private
specifier|static
specifier|abstract
class|class
name|Coppier
block|{
DECL|method|copy
specifier|public
specifier|abstract
name|ToleratedUpdateError
name|copy
parameter_list|(
name|ToleratedUpdateError
name|in
parameter_list|)
function_decl|;
block|}
DECL|field|MAP_COPPIER
specifier|private
specifier|static
specifier|final
name|Coppier
name|MAP_COPPIER
init|=
operator|new
name|Coppier
argument_list|()
block|{
specifier|public
name|ToleratedUpdateError
name|copy
parameter_list|(
name|ToleratedUpdateError
name|in
parameter_list|)
block|{
return|return
name|ToleratedUpdateError
operator|.
name|parseMap
argument_list|(
name|in
operator|.
name|getSimpleMap
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|METADATA_COPPIER
specifier|private
specifier|static
specifier|final
name|Coppier
name|METADATA_COPPIER
init|=
operator|new
name|Coppier
argument_list|()
block|{
specifier|public
name|ToleratedUpdateError
name|copy
parameter_list|(
name|ToleratedUpdateError
name|in
parameter_list|)
block|{
return|return
name|ToleratedUpdateError
operator|.
name|parseMetadataIfToleratedUpdateError
argument_list|(
name|in
operator|.
name|getMetadataKey
argument_list|()
argument_list|,
name|in
operator|.
name|getMetadataValue
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
block|}
end_class
end_unit
