begin_unit
begin_package
DECL|package|org.apache.solr.common.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|RetryUtil
operator|.
name|RetryCmd
import|;
end_import
begin_class
DECL|class|TestRetryUtil
specifier|public
class|class
name|TestRetryUtil
extends|extends
name|SolrTestCaseJ4
block|{
DECL|method|testRetryOnThrowable
specifier|public
name|void
name|testRetryOnThrowable
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|AtomicInteger
name|executes
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|RetryUtil
operator|.
name|retryOnThrowable
argument_list|(
name|SolrException
operator|.
name|class
argument_list|,
literal|10000
argument_list|,
literal|10
argument_list|,
operator|new
name|RetryCmd
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|Throwable
block|{
name|int
name|calls
init|=
name|executes
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|calls
operator|<=
literal|2
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Bad Stuff Happened"
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|executes
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|AtomicInteger
name|executes2
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|boolean
name|caughtSolrException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|RetryUtil
operator|.
name|retryOnThrowable
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
literal|10000
argument_list|,
literal|10
argument_list|,
operator|new
name|RetryCmd
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|Throwable
block|{
name|int
name|calls
init|=
name|executes2
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|calls
operator|<=
literal|2
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Bad Stuff Happened"
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|caughtSolrException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|caughtSolrException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|executes2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|AtomicInteger
name|executes3
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|caughtSolrException
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|RetryUtil
operator|.
name|retryOnThrowable
argument_list|(
name|SolrException
operator|.
name|class
argument_list|,
literal|1000
argument_list|,
literal|10
argument_list|,
operator|new
name|RetryCmd
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|Throwable
block|{
name|executes3
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Bad Stuff Happened"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|caughtSolrException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|executes3
operator|.
name|get
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
