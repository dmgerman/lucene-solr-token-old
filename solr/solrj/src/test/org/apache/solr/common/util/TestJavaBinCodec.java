begin_unit
begin_package
DECL|package|org.apache.solr.common.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|EnumFieldValue
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|ConcurrentLRUCache
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|CharArr
import|;
end_import
begin_class
DECL|class|TestJavaBinCodec
specifier|public
class|class
name|TestJavaBinCodec
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|SOLRJ_JAVABIN_BACKCOMPAT_BIN
specifier|private
specifier|static
specifier|final
name|String
name|SOLRJ_JAVABIN_BACKCOMPAT_BIN
init|=
literal|"/solrj/javabin_backcompat.bin"
decl_stmt|;
DECL|field|BIN_FILE_LOCATION
specifier|private
specifier|final
name|String
name|BIN_FILE_LOCATION
init|=
literal|"./solr/solrj/src/test-files/solrj/javabin_backcompat.bin"
decl_stmt|;
DECL|field|SOLRJ_JAVABIN_BACKCOMPAT_BIN_CHILD_DOCS
specifier|private
specifier|static
specifier|final
name|String
name|SOLRJ_JAVABIN_BACKCOMPAT_BIN_CHILD_DOCS
init|=
literal|"/solrj/javabin_backcompat_child_docs.bin"
decl_stmt|;
DECL|field|BIN_FILE_LOCATION_CHILD_DOCS
specifier|private
specifier|final
name|String
name|BIN_FILE_LOCATION_CHILD_DOCS
init|=
literal|"./solr/solrj/src/test-files/solrj/javabin_backcompat_child_docs.bin"
decl_stmt|;
DECL|method|testStrings
specifier|public
name|void
name|testStrings
parameter_list|()
throws|throws
name|Exception
block|{
name|JavaBinCodec
name|javabin
init|=
operator|new
name|JavaBinCodec
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
operator|*
name|RANDOM_MULTIPLIER
condition|;
name|i
operator|++
control|)
block|{
name|String
name|s
init|=
name|TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|javabin
operator|.
name|marshal
argument_list|(
name|s
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
name|javabin
operator|.
name|unmarshal
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|s
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|generateSolrDocumentWithChildDocs
specifier|private
name|SolrDocument
name|generateSolrDocumentWithChildDocs
parameter_list|()
block|{
name|SolrDocument
name|parentDocument
init|=
operator|new
name|SolrDocument
argument_list|()
decl_stmt|;
name|parentDocument
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|parentDocument
operator|.
name|addField
argument_list|(
literal|"subject"
argument_list|,
literal|"parentDocument"
argument_list|)
expr_stmt|;
name|SolrDocument
name|childDocument
init|=
operator|new
name|SolrDocument
argument_list|()
decl_stmt|;
name|childDocument
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|childDocument
operator|.
name|addField
argument_list|(
literal|"cat"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|SolrDocument
name|secondKid
init|=
operator|new
name|SolrDocument
argument_list|()
decl_stmt|;
name|secondKid
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"22"
argument_list|)
expr_stmt|;
name|secondKid
operator|.
name|addField
argument_list|(
literal|"cat"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|SolrDocument
name|grandChildDocument
init|=
operator|new
name|SolrDocument
argument_list|()
decl_stmt|;
name|grandChildDocument
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|childDocument
operator|.
name|addChildDocument
argument_list|(
name|grandChildDocument
argument_list|)
expr_stmt|;
name|parentDocument
operator|.
name|addChildDocument
argument_list|(
name|childDocument
argument_list|)
expr_stmt|;
name|parentDocument
operator|.
name|addChildDocument
argument_list|(
name|secondKid
argument_list|)
expr_stmt|;
return|return
name|parentDocument
return|;
block|}
DECL|method|generateAllDataTypes
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|generateAllDataTypes
parameter_list|()
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|types
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|//NULL
name|types
operator|.
name|add
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|(
name|double
operator|)
literal|3
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|-
literal|4
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|(
name|long
operator|)
operator|-
literal|5
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|(
name|long
operator|)
literal|5
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|(
name|long
operator|)
literal|50
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|(
name|float
operator|)
literal|6
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|SolrDocument
name|doc
init|=
operator|new
name|SolrDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|SolrDocumentList
name|solrDocs
init|=
operator|new
name|SolrDocumentList
argument_list|()
decl_stmt|;
name|solrDocs
operator|.
name|setMaxScore
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
name|solrDocs
operator|.
name|setNumFound
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|solrDocs
operator|.
name|setStart
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|solrDocs
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|solrDocs
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|}
argument_list|)
expr_stmt|;
comment|// TODO?
comment|// List<String> list = new ArrayList<String>();
comment|// list.add("one");
comment|// types.add(list.iterator());
name|types
operator|.
name|add
argument_list|(
operator|(
name|byte
operator|)
literal|15
argument_list|)
expr_stmt|;
comment|//END
name|SolrInputDocument
name|idoc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|idoc
operator|.
name|addField
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|idoc
argument_list|)
expr_stmt|;
name|SolrInputDocument
name|parentDoc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|parentDoc
operator|.
name|addField
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|SolrInputDocument
name|childDoc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|childDoc
operator|.
name|addField
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|parentDoc
operator|.
name|addChildDocument
argument_list|(
name|childDoc
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|parentDoc
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|EnumFieldValue
argument_list|(
literal|1
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|//Map.Entry
name|types
operator|.
name|add
argument_list|(
call|(
name|byte
call|)
argument_list|(
literal|1
operator|<<
literal|5
argument_list|)
argument_list|)
expr_stmt|;
comment|//TAG_AND_LEN
name|types
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|(
name|long
operator|)
literal|2
argument_list|)
expr_stmt|;
name|SimpleOrderedMap
name|simpleOrderedMap
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
name|simpleOrderedMap
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|,
literal|"barbar"
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|simpleOrderedMap
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|String
argument_list|>
name|nl
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|nl
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|,
literal|"barbar"
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|nl
argument_list|)
expr_stmt|;
return|return
name|types
return|;
block|}
annotation|@
name|Test
DECL|method|testBackCompat
specifier|public
name|void
name|testBackCompat
parameter_list|()
throws|throws
name|IOException
block|{
name|JavaBinCodec
name|javabin
init|=
operator|new
name|JavaBinCodec
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|readIterator
parameter_list|(
name|DataInputInputStream
name|fis
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|super
operator|.
name|readIterator
argument_list|(
name|fis
argument_list|)
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|SOLRJ_JAVABIN_BACKCOMPAT_BIN
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|unmarshaledObj
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|javabin
operator|.
name|unmarshal
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|matchObj
init|=
name|generateAllDataTypes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|unmarshaledObj
operator|.
name|size
argument_list|()
argument_list|,
name|matchObj
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|unmarshaledObj
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|unmarshaledObj
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|byte
index|[]
operator|&&
name|matchObj
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|byte
index|[]
name|b1
init|=
operator|(
name|byte
index|[]
operator|)
name|unmarshaledObj
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b2
init|=
operator|(
name|byte
index|[]
operator|)
name|matchObj
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|unmarshaledObj
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|SolrDocument
operator|&&
name|matchObj
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|SolrDocument
condition|)
block|{
name|assertTrue
argument_list|(
name|compareSolrDocument
argument_list|(
name|unmarshaledObj
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|matchObj
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|unmarshaledObj
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|SolrDocumentList
operator|&&
name|matchObj
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|SolrDocumentList
condition|)
block|{
name|assertTrue
argument_list|(
name|compareSolrDocumentList
argument_list|(
name|unmarshaledObj
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|matchObj
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|unmarshaledObj
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|SolrInputDocument
operator|&&
name|matchObj
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|SolrInputDocument
condition|)
block|{
name|assertTrue
argument_list|(
name|compareSolrInputDocument
argument_list|(
name|unmarshaledObj
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|matchObj
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|unmarshaledObj
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|SolrInputField
operator|&&
name|matchObj
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|SolrInputField
condition|)
block|{
name|assertTrue
argument_list|(
name|assertSolrInputFieldEquals
argument_list|(
name|unmarshaledObj
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|matchObj
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|unmarshaledObj
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|matchObj
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|testBackCompatForSolrDocumentWithChildDocs
specifier|public
name|void
name|testBackCompatForSolrDocumentWithChildDocs
parameter_list|()
throws|throws
name|IOException
block|{
name|JavaBinCodec
name|javabin
init|=
operator|new
name|JavaBinCodec
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|readIterator
parameter_list|(
name|DataInputInputStream
name|fis
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|super
operator|.
name|readIterator
argument_list|(
name|fis
argument_list|)
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|SOLRJ_JAVABIN_BACKCOMPAT_BIN_CHILD_DOCS
argument_list|)
decl_stmt|;
name|SolrDocument
name|sdoc
init|=
operator|(
name|SolrDocument
operator|)
name|javabin
operator|.
name|unmarshal
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|SolrDocument
name|matchSolrDoc
init|=
name|generateSolrDocumentWithChildDocs
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|compareSolrDocument
argument_list|(
name|sdoc
argument_list|,
name|matchSolrDoc
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|testForwardCompat
specifier|public
name|void
name|testForwardCompat
parameter_list|()
throws|throws
name|IOException
block|{
name|JavaBinCodec
name|javabin
init|=
operator|new
name|JavaBinCodec
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|Object
name|data
init|=
name|generateAllDataTypes
argument_list|()
decl_stmt|;
try|try
block|{
name|javabin
operator|.
name|marshal
argument_list|(
name|data
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|byte
index|[]
name|newFormatBytes
init|=
name|os
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|SOLRJ_JAVABIN_BACKCOMPAT_BIN
argument_list|)
decl_stmt|;
name|byte
index|[]
name|currentFormatBytes
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|is
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|currentFormatBytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|//ignore the first byte. It is version information
name|assertEquals
argument_list|(
name|newFormatBytes
index|[
name|i
index|]
argument_list|,
name|currentFormatBytes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|testForwardCompatForSolrDocumentWithChildDocs
specifier|public
name|void
name|testForwardCompatForSolrDocumentWithChildDocs
parameter_list|()
throws|throws
name|IOException
block|{
name|JavaBinCodec
name|javabin
init|=
operator|new
name|JavaBinCodec
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|SolrDocument
name|sdoc
init|=
name|generateSolrDocumentWithChildDocs
argument_list|()
decl_stmt|;
try|try
block|{
name|javabin
operator|.
name|marshal
argument_list|(
name|sdoc
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|byte
index|[]
name|newFormatBytes
init|=
name|os
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|SOLRJ_JAVABIN_BACKCOMPAT_BIN_CHILD_DOCS
argument_list|)
decl_stmt|;
name|byte
index|[]
name|currentFormatBytes
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|is
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|currentFormatBytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|//ignore the first byte. It is version information
name|assertEquals
argument_list|(
name|newFormatBytes
index|[
name|i
index|]
argument_list|,
name|currentFormatBytes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|testResponseChildDocuments
specifier|public
name|void
name|testResponseChildDocuments
parameter_list|()
throws|throws
name|IOException
block|{
name|JavaBinCodec
name|javabin
init|=
operator|new
name|JavaBinCodec
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|javabin
operator|.
name|marshal
argument_list|(
name|generateSolrDocumentWithChildDocs
argument_list|()
argument_list|,
name|baos
argument_list|)
expr_stmt|;
name|SolrDocument
name|result
init|=
operator|(
name|SolrDocument
operator|)
name|javabin
operator|.
name|unmarshal
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"parentDocument"
argument_list|,
name|result
operator|.
name|getFieldValue
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|hasChildDocuments
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SolrDocument
argument_list|>
name|childDocuments
init|=
name|result
operator|.
name|getChildDocuments
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|childDocuments
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|childDocuments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|childDocuments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|childDocuments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|childDocuments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldValue
argument_list|(
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|childDocuments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"22"
argument_list|,
name|childDocuments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|childDocuments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getFieldValue
argument_list|(
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|childDocuments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|hasChildDocuments
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|childDocuments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getChildDocuments
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|childDocuments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|hasChildDocuments
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SolrDocument
argument_list|>
name|grandChildDocuments
init|=
name|childDocuments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getChildDocuments
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|grandChildDocuments
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|grandChildDocuments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|grandChildDocuments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|grandChildDocuments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|grandChildDocuments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|hasChildDocuments
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|grandChildDocuments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getChildDocuments
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStringCaching
specifier|public
name|void
name|testStringCaching
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
name|ZkNodeProps
operator|.
name|makeMap
argument_list|(
literal|"key1"
argument_list|,
literal|"val1"
argument_list|,
literal|"key2"
argument_list|,
literal|"val2"
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|os1
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
operator|new
name|JavaBinCodec
argument_list|()
operator|.
name|marshal
argument_list|(
name|m
argument_list|,
name|os1
argument_list|)
expr_stmt|;
name|Map
name|m1
init|=
operator|(
name|Map
operator|)
operator|new
name|JavaBinCodec
argument_list|()
operator|.
name|unmarshal
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|os1
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|os2
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
operator|new
name|JavaBinCodec
argument_list|()
operator|.
name|marshal
argument_list|(
name|m
argument_list|,
name|os2
argument_list|)
expr_stmt|;
name|Map
name|m2
init|=
operator|(
name|Map
operator|)
operator|new
name|JavaBinCodec
argument_list|()
operator|.
name|unmarshal
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|os2
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
name|l1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|m1
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|List
name|l2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|m2
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|l1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|l2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|l1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|==
name|l2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l1
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|l2
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|l1
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|==
name|l2
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|JavaBinCodec
operator|.
name|StringCache
name|stringCache
init|=
operator|new
name|JavaBinCodec
operator|.
name|StringCache
argument_list|(
operator|new
name|Cache
argument_list|<
name|JavaBinCodec
operator|.
name|StringBytes
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|private
name|HashMap
argument_list|<
name|JavaBinCodec
operator|.
name|StringBytes
argument_list|,
name|String
argument_list|>
name|cache
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|put
parameter_list|(
name|JavaBinCodec
operator|.
name|StringBytes
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{
return|return
name|cache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|JavaBinCodec
operator|.
name|StringBytes
name|key
parameter_list|)
block|{
return|return
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|remove
parameter_list|(
name|JavaBinCodec
operator|.
name|StringBytes
name|key
parameter_list|)
block|{
return|return
name|cache
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|m1
operator|=
operator|(
name|Map
operator|)
operator|new
name|JavaBinCodec
argument_list|(
literal|null
argument_list|,
name|stringCache
argument_list|)
operator|.
name|unmarshal
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|os1
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m2
operator|=
operator|(
name|Map
operator|)
operator|new
name|JavaBinCodec
argument_list|(
literal|null
argument_list|,
name|stringCache
argument_list|)
operator|.
name|unmarshal
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|os2
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|l1
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|m1
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|l2
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|m2
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|l2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|==
name|l2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l1
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|l2
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l1
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|==
name|l2
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|genBinaryFiles
specifier|public
name|void
name|genBinaryFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|JavaBinCodec
name|javabin
init|=
operator|new
name|JavaBinCodec
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|Object
name|data
init|=
name|generateAllDataTypes
argument_list|()
decl_stmt|;
name|javabin
operator|.
name|marshal
argument_list|(
name|data
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|byte
index|[]
name|out
init|=
name|os
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|FileOutputStream
name|fs
init|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|BIN_FILE_LOCATION
argument_list|)
argument_list|)
decl_stmt|;
name|BufferedOutputStream
name|bos
init|=
operator|new
name|BufferedOutputStream
argument_list|(
name|fs
argument_list|)
decl_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|bos
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//Binary file with child documents
name|javabin
operator|=
operator|new
name|JavaBinCodec
argument_list|()
expr_stmt|;
name|SolrDocument
name|sdoc
init|=
name|generateSolrDocumentWithChildDocs
argument_list|()
decl_stmt|;
name|os
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|javabin
operator|.
name|marshal
argument_list|(
name|sdoc
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|fs
operator|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|BIN_FILE_LOCATION_CHILD_DOCS
argument_list|)
argument_list|)
expr_stmt|;
name|bos
operator|=
operator|new
name|BufferedOutputStream
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|bos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testPerf
specifier|private
name|void
name|testPerf
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|ArrayList
argument_list|<
name|JavaBinCodec
operator|.
name|StringBytes
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|JavaBinCodec
operator|.
name|StringBytes
argument_list|,
name|String
argument_list|>
name|cache
init|=
literal|null
decl_stmt|;
comment|/* cache = new ConcurrentLRUCache<JavaBinCodec.StringBytes,String>(10000, 9000, 10000, 1000, false, true, null){       @Override       public String put(JavaBinCodec.StringBytes key, String val) {         l.add(key);         return super.put(key, val);       }     };*/
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|gc
argument_list|()
expr_stmt|;
name|printMem
argument_list|(
literal|"before cache init"
argument_list|)
expr_stmt|;
name|Cache
argument_list|<
name|JavaBinCodec
operator|.
name|StringBytes
argument_list|,
name|String
argument_list|>
name|cache1
init|=
operator|new
name|Cache
argument_list|<
name|JavaBinCodec
operator|.
name|StringBytes
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|private
name|HashMap
argument_list|<
name|JavaBinCodec
operator|.
name|StringBytes
argument_list|,
name|String
argument_list|>
name|cache
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|put
parameter_list|(
name|JavaBinCodec
operator|.
name|StringBytes
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{
name|l
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|cache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|JavaBinCodec
operator|.
name|StringBytes
name|key
parameter_list|)
block|{
return|return
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|remove
parameter_list|(
name|JavaBinCodec
operator|.
name|StringBytes
name|key
parameter_list|)
block|{
return|return
name|cache
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|final
name|JavaBinCodec
operator|.
name|StringCache
name|STRING_CACHE
init|=
operator|new
name|JavaBinCodec
operator|.
name|StringCache
argument_list|(
name|cache1
argument_list|)
decl_stmt|;
comment|//    STRING_CACHE = new JavaBinCodec.StringCache(cache);
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
name|JavaBinCodec
operator|.
name|StringBytes
name|stringBytes
init|=
operator|new
name|JavaBinCodec
operator|.
name|StringBytes
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|String
name|s
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|end
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|maxSize
init|=
name|end
operator|*
literal|4
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
operator|||
name|bytes
operator|.
name|length
operator|<
name|maxSize
condition|)
name|bytes
operator|=
operator|new
name|byte
index|[
name|maxSize
index|]
expr_stmt|;
name|int
name|sz
init|=
name|ByteUtils
operator|.
name|UTF16toUTF8
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|end
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|STRING_CACHE
operator|.
name|get
argument_list|(
name|stringBytes
operator|.
name|reset
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|sz
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|printMem
argument_list|(
literal|"after cache init"
argument_list|)
expr_stmt|;
name|long
name|ms
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|int
name|ITERS
init|=
literal|1000000
decl_stmt|;
name|int
name|THREADS
init|=
literal|10
decl_stmt|;
name|runInThreads
argument_list|(
name|THREADS
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|JavaBinCodec
operator|.
name|StringBytes
name|stringBytes1
init|=
operator|new
name|JavaBinCodec
operator|.
name|StringBytes
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ITERS
condition|;
name|i
operator|++
control|)
block|{
name|JavaBinCodec
operator|.
name|StringBytes
name|b
init|=
name|l
operator|.
name|get
argument_list|(
name|i
operator|%
name|l
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|stringBytes1
operator|.
name|reset
argument_list|(
name|b
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|STRING_CACHE
operator|.
name|get
argument_list|(
name|stringBytes1
argument_list|)
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"error"
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|printMem
argument_list|(
literal|"after cache test"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"time taken by LRUCACHE "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|ms
operator|)
argument_list|)
expr_stmt|;
name|ms
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|runInThreads
argument_list|(
name|THREADS
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|String
name|a
init|=
literal|null
decl_stmt|;
name|CharArr
name|arr
init|=
operator|new
name|CharArr
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ITERS
condition|;
name|i
operator|++
control|)
block|{
name|JavaBinCodec
operator|.
name|StringBytes
name|sb
init|=
name|l
operator|.
name|get
argument_list|(
name|i
operator|%
name|l
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|arr
operator|.
name|reset
argument_list|()
expr_stmt|;
name|ByteUtils
operator|.
name|UTF8toUTF16
argument_list|(
name|sb
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|sb
operator|.
name|bytes
operator|.
name|length
argument_list|,
name|arr
argument_list|)
expr_stmt|;
name|a
operator|=
name|arr
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|printMem
argument_list|(
literal|"after new string test"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"time taken by string creation "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|ms
operator|)
argument_list|)
expr_stmt|;
block|}
DECL|method|runInThreads
specifier|private
specifier|static
name|void
name|runInThreads
parameter_list|(
name|int
name|count
parameter_list|,
name|Runnable
name|runnable
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|ArrayList
argument_list|<
name|Thread
argument_list|>
name|t
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
name|t
operator|.
name|add
argument_list|(
operator|new
name|Thread
argument_list|(
name|runnable
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|t
control|)
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|t
control|)
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
DECL|method|printMem
specifier|static
name|void
name|printMem
parameter_list|(
name|String
name|head
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"*************"
operator|+
name|head
operator|+
literal|"***********"
argument_list|)
expr_stmt|;
name|int
name|mb
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|//Getting the runtime reference from system
name|Runtime
name|runtime
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
decl_stmt|;
comment|//Print used memory
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Used Memory:"
operator|+
operator|(
name|runtime
operator|.
name|totalMemory
argument_list|()
operator|-
name|runtime
operator|.
name|freeMemory
argument_list|()
operator|)
operator|/
name|mb
argument_list|)
expr_stmt|;
comment|//Print free memory
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Free Memory:"
operator|+
name|runtime
operator|.
name|freeMemory
argument_list|()
operator|/
name|mb
argument_list|)
expr_stmt|;
block|}
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
comment|// TestJavaBinCodec test = new TestJavaBinCodec();
comment|// test.genBinaryFiles();
try|try
block|{
name|doDecodePerf
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// common-case ascii
DECL|method|str
specifier|static
name|String
name|str
parameter_list|(
name|Random
name|r
parameter_list|,
name|int
name|sz
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
name|sz
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|128
operator|-
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|doDecodePerf
specifier|public
specifier|static
name|void
name|doDecodePerf
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|arg
init|=
literal|0
decl_stmt|;
name|int
name|nThreads
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
name|arg
operator|++
index|]
argument_list|)
decl_stmt|;
name|int
name|nBuffers
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
name|arg
operator|++
index|]
argument_list|)
decl_stmt|;
specifier|final
name|long
name|iter
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|args
index|[
name|arg
operator|++
index|]
argument_list|)
decl_stmt|;
name|int
name|cacheSz
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
name|arg
operator|++
index|]
argument_list|)
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
index|[]
name|buffers
init|=
operator|new
name|byte
index|[
name|nBuffers
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|bufnum
init|=
literal|0
init|;
name|bufnum
operator|<
name|nBuffers
condition|;
name|bufnum
operator|++
control|)
block|{
name|SolrDocument
name|sdoc
init|=
operator|new
name|SolrDocument
argument_list|()
decl_stmt|;
name|sdoc
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
literal|"my_id_"
operator|+
name|bufnum
argument_list|)
expr_stmt|;
name|sdoc
operator|.
name|put
argument_list|(
literal|"author"
argument_list|,
name|str
argument_list|(
name|r
argument_list|,
literal|10
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sdoc
operator|.
name|put
argument_list|(
literal|"address"
argument_list|,
name|str
argument_list|(
name|r
argument_list|,
literal|20
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sdoc
operator|.
name|put
argument_list|(
literal|"license"
argument_list|,
name|str
argument_list|(
name|r
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|sdoc
operator|.
name|put
argument_list|(
literal|"title"
argument_list|,
name|str
argument_list|(
name|r
argument_list|,
literal|5
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sdoc
operator|.
name|put
argument_list|(
literal|"modified_dt"
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
literal|1000000
argument_list|)
argument_list|)
expr_stmt|;
name|sdoc
operator|.
name|put
argument_list|(
literal|"creation_dt"
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
literal|1000000
argument_list|)
argument_list|)
expr_stmt|;
name|sdoc
operator|.
name|put
argument_list|(
literal|"birthdate_dt"
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
literal|1000000
argument_list|)
argument_list|)
expr_stmt|;
name|sdoc
operator|.
name|put
argument_list|(
literal|"clean"
argument_list|,
name|r
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|sdoc
operator|.
name|put
argument_list|(
literal|"dirty"
argument_list|,
name|r
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|sdoc
operator|.
name|put
argument_list|(
literal|"employed"
argument_list|,
name|r
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|sdoc
operator|.
name|put
argument_list|(
literal|"priority"
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|sdoc
operator|.
name|put
argument_list|(
literal|"dependents"
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|sdoc
operator|.
name|put
argument_list|(
literal|"level"
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
literal|101
argument_list|)
argument_list|)
expr_stmt|;
name|sdoc
operator|.
name|put
argument_list|(
literal|"education_level"
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
comment|// higher level of reuse for string values
name|sdoc
operator|.
name|put
argument_list|(
literal|"state"
argument_list|,
literal|"S"
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|sdoc
operator|.
name|put
argument_list|(
literal|"country"
argument_list|,
literal|"Country"
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|sdoc
operator|.
name|put
argument_list|(
literal|"some_boolean"
argument_list|,
literal|""
operator|+
name|r
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|sdoc
operator|.
name|put
argument_list|(
literal|"another_boolean"
argument_list|,
literal|""
operator|+
name|r
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|JavaBinCodec
name|javabin
init|=
operator|new
name|JavaBinCodec
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|javabin
operator|.
name|marshal
argument_list|(
name|sdoc
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
name|buffers
index|[
name|bufnum
index|]
operator|=
name|os
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
name|int
name|ret
init|=
literal|0
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ConcurrentLRUCache
name|underlyingCache
init|=
name|cacheSz
operator|>
literal|0
condition|?
operator|new
name|ConcurrentLRUCache
argument_list|<>
argument_list|(
name|cacheSz
argument_list|,
name|cacheSz
operator|-
name|cacheSz
operator|/
literal|10
argument_list|,
name|cacheSz
argument_list|,
name|cacheSz
operator|/
literal|10
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
else|:
literal|null
decl_stmt|;
comment|// the cache in the first version of the patch was 10000,9000,10000,1000,false,true,null
specifier|final
name|JavaBinCodec
operator|.
name|StringCache
name|stringCache
init|=
name|underlyingCache
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|JavaBinCodec
operator|.
name|StringCache
argument_list|(
name|underlyingCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|nThreads
operator|<=
literal|0
condition|)
block|{
name|ret
operator|+=
name|doDecode
argument_list|(
name|buffers
argument_list|,
name|iter
argument_list|,
name|stringCache
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|runInThreads
argument_list|(
name|nThreads
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|doDecode
argument_list|(
name|buffers
argument_list|,
name|iter
argument_list|,
name|stringCache
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|n
init|=
name|iter
operator|*
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|nThreads
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ret="
operator|+
name|ret
operator|+
literal|" THROUGHPUT="
operator|+
operator|(
name|n
operator|*
literal|1000
operator|/
operator|(
name|end
operator|-
name|start
operator|)
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|underlyingCache
operator|!=
literal|null
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"cache: hits="
operator|+
name|underlyingCache
operator|.
name|getStats
argument_list|()
operator|.
name|getCumulativeHits
argument_list|()
operator|+
literal|" lookups="
operator|+
name|underlyingCache
operator|.
name|getStats
argument_list|()
operator|.
name|getCumulativeLookups
argument_list|()
operator|+
literal|" size="
operator|+
name|underlyingCache
operator|.
name|getStats
argument_list|()
operator|.
name|getCurrentSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|doDecode
specifier|public
specifier|static
name|int
name|doDecode
parameter_list|(
name|byte
index|[]
index|[]
name|buffers
parameter_list|,
name|long
name|iter
parameter_list|,
name|JavaBinCodec
operator|.
name|StringCache
name|stringCache
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
name|int
name|bufnum
init|=
operator|-
literal|1
decl_stmt|;
name|InputStream
name|empty
init|=
operator|new
name|InputStream
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
decl_stmt|;
while|while
condition|(
operator|--
name|iter
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
operator|++
name|bufnum
operator|>=
name|buffers
operator|.
name|length
condition|)
name|bufnum
operator|=
literal|0
expr_stmt|;
name|byte
index|[]
name|buf
init|=
name|buffers
index|[
name|bufnum
index|]
decl_stmt|;
name|JavaBinCodec
name|javabin
init|=
operator|new
name|JavaBinCodec
argument_list|(
literal|null
argument_list|,
name|stringCache
argument_list|)
decl_stmt|;
name|FastInputStream
name|in
init|=
operator|new
name|FastInputStream
argument_list|(
name|empty
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
name|javabin
operator|.
name|unmarshal
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|SolrDocument
condition|)
block|{
name|ret
operator|+=
operator|(
operator|(
name|SolrDocument
operator|)
name|o
operator|)
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
block|}
end_class
end_unit
