begin_unit
begin_package
DECL|package|org.apache.solr.common.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractZkTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|ZkTestServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Id
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|auth
operator|.
name|DigestAuthenticationProvider
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_class
DECL|class|SolrZkClientTest
specifier|public
class|class
name|SolrZkClientTest
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|ROOT
specifier|private
specifier|static
specifier|final
name|String
name|ROOT
init|=
literal|"/"
decl_stmt|;
DECL|field|PATH
specifier|private
specifier|static
specifier|final
name|String
name|PATH
init|=
literal|"/collections/collection1"
decl_stmt|;
DECL|field|zkServer
specifier|protected
name|ZkTestServer
name|zkServer
decl_stmt|;
DECL|field|aclClient
name|SolrZkClient
name|aclClient
decl_stmt|;
DECL|field|credentialsClient
name|SolrZkClient
name|credentialsClient
decl_stmt|;
DECL|field|defaultClient
name|SolrZkClient
name|defaultClient
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
specifier|final
name|String
name|SCHEME
init|=
literal|"digest"
decl_stmt|;
specifier|final
name|String
name|AUTH
init|=
literal|"user:pass"
decl_stmt|;
name|String
name|zkDir
init|=
name|createTempDir
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"ZooKeeper dataDir:"
operator|+
name|zkDir
argument_list|)
expr_stmt|;
name|zkServer
operator|=
operator|new
name|ZkTestServer
argument_list|(
name|zkDir
argument_list|)
expr_stmt|;
name|zkServer
operator|.
name|run
argument_list|()
expr_stmt|;
try|try
init|(
name|SolrZkClient
name|client
init|=
operator|new
name|SolrZkClient
argument_list|(
name|zkServer
operator|.
name|getZkHost
argument_list|()
argument_list|,
name|AbstractZkTestCase
operator|.
name|TIMEOUT
argument_list|)
init|)
block|{
comment|// Set up chroot
name|client
operator|.
name|makePath
argument_list|(
literal|"/solr"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|defaultClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|AbstractZkTestCase
operator|.
name|TIMEOUT
argument_list|)
expr_stmt|;
name|defaultClient
operator|.
name|makePath
argument_list|(
name|PATH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|aclClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|AbstractZkTestCase
operator|.
name|TIMEOUT
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ZkACLProvider
name|createZkACLProvider
parameter_list|()
block|{
return|return
operator|new
name|DefaultZkACLProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ACL
argument_list|>
name|createGlobalACLsToAdd
parameter_list|()
block|{
try|try
block|{
name|Id
name|id
init|=
operator|new
name|Id
argument_list|(
name|SCHEME
argument_list|,
name|DigestAuthenticationProvider
operator|.
name|generateDigest
argument_list|(
name|AUTH
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|ACL
argument_list|(
name|ZooDefs
operator|.
name|Perms
operator|.
name|ALL
argument_list|,
name|id
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
block|}
expr_stmt|;
name|credentialsClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|AbstractZkTestCase
operator|.
name|TIMEOUT
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ZkCredentialsProvider
name|createZkCredentialsToAddAutomatically
parameter_list|()
block|{
return|return
operator|new
name|DefaultZkCredentialsProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Collection
argument_list|<
name|ZkCredentials
argument_list|>
name|createCredentials
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|ZkCredentials
argument_list|(
name|SCHEME
argument_list|,
name|AUTH
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|aclClient
operator|.
name|close
argument_list|()
expr_stmt|;
name|credentialsClient
operator|.
name|close
argument_list|()
expr_stmt|;
name|defaultClient
operator|.
name|close
argument_list|()
expr_stmt|;
name|zkServer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleUpdateACLs
specifier|public
name|void
name|testSimpleUpdateACLs
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|assertTrue
argument_list|(
literal|"Initial create was in secure mode; please check the test"
argument_list|,
name|canRead
argument_list|(
name|defaultClient
argument_list|,
name|PATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Credentialed client should always be able to read"
argument_list|,
name|canRead
argument_list|(
name|credentialsClient
argument_list|,
name|PATH
argument_list|)
argument_list|)
expr_stmt|;
comment|// convert to secure
name|aclClient
operator|.
name|updateACLs
argument_list|(
name|ROOT
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Default client should not be able to read root in secure mode"
argument_list|,
name|canRead
argument_list|(
name|defaultClient
argument_list|,
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Default client should not be able to read children in secure mode"
argument_list|,
name|canRead
argument_list|(
name|defaultClient
argument_list|,
name|PATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Credentialed client should always be able to read root in secure mode"
argument_list|,
name|canRead
argument_list|(
name|credentialsClient
argument_list|,
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Credentialed client should always be able to read in secure mode"
argument_list|,
name|canRead
argument_list|(
name|credentialsClient
argument_list|,
name|PATH
argument_list|)
argument_list|)
expr_stmt|;
comment|// convert to non-secure
name|credentialsClient
operator|.
name|updateACLs
argument_list|(
name|ROOT
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Default client should work again after clearing ACLs"
argument_list|,
name|canRead
argument_list|(
name|defaultClient
argument_list|,
name|PATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Credentialed client should always be able to read"
argument_list|,
name|canRead
argument_list|(
name|credentialsClient
argument_list|,
name|PATH
argument_list|)
argument_list|)
expr_stmt|;
comment|// convert a subtree to secure
name|aclClient
operator|.
name|updateACLs
argument_list|(
literal|"/collections"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Default client should read unaffected paths"
argument_list|,
name|canRead
argument_list|(
name|defaultClient
argument_list|,
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Default client should not read secure children"
argument_list|,
name|canRead
argument_list|(
name|defaultClient
argument_list|,
name|PATH
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|canRead
specifier|private
specifier|static
name|boolean
name|canRead
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
try|try
block|{
name|zkClient
operator|.
name|getData
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoAuthException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class
end_unit
