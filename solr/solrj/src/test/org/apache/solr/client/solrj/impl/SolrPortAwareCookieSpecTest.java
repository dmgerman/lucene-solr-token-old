begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.impl
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|cookie
operator|.
name|CookieAttributeHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|cookie
operator|.
name|CookieOrigin
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|cookie
operator|.
name|MalformedCookieException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|cookie
operator|.
name|BasicClientCookie
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|// Test cases imported from TestNetscapeCookieAttribHandlers of HttpClient project
end_comment
begin_class
DECL|class|SolrPortAwareCookieSpecTest
specifier|public
class|class
name|SolrPortAwareCookieSpecTest
block|{
annotation|@
name|Test
DECL|method|testDomainHostPortValidate
specifier|public
name|void
name|testDomainHostPortValidate
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|BasicClientCookie
name|cookie
init|=
operator|new
name|BasicClientCookie
argument_list|(
literal|"name"
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
specifier|final
name|CookieOrigin
name|origin
init|=
operator|new
name|CookieOrigin
argument_list|(
literal|"somehost"
argument_list|,
literal|80
argument_list|,
literal|"/"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|CookieAttributeHandler
name|h
init|=
operator|new
name|SolrPortAwareCookieSpecFactory
operator|.
name|PortAwareDomainHandler
argument_list|()
decl_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|"somehost:80"
argument_list|)
expr_stmt|;
name|h
operator|.
name|validate
argument_list|(
name|cookie
argument_list|,
name|origin
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|"somehost:1234"
argument_list|)
expr_stmt|;
try|try
block|{
name|h
operator|.
name|validate
argument_list|(
name|cookie
argument_list|,
name|origin
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"MalformedCookieException should have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|MalformedCookieException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testDomainHostPortMatch
specifier|public
name|void
name|testDomainHostPortMatch
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|BasicClientCookie
name|cookie
init|=
operator|new
name|BasicClientCookie
argument_list|(
literal|"name"
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
specifier|final
name|CookieOrigin
name|origin
init|=
operator|new
name|CookieOrigin
argument_list|(
literal|"myhost"
argument_list|,
literal|80
argument_list|,
literal|"/"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|CookieAttributeHandler
name|h
init|=
operator|new
name|SolrPortAwareCookieSpecFactory
operator|.
name|PortAwareDomainHandler
argument_list|()
decl_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|"myhost"
argument_list|)
expr_stmt|;
try|try
block|{
name|h
operator|.
name|match
argument_list|(
name|cookie
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"IllegalArgumentException should have been thrown, since origin is null."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
name|cookie
operator|.
name|setDomain
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|h
operator|.
name|match
argument_list|(
name|cookie
argument_list|,
name|origin
argument_list|)
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|"otherhost"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|h
operator|.
name|match
argument_list|(
name|cookie
argument_list|,
name|origin
argument_list|)
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|"myhost"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|h
operator|.
name|match
argument_list|(
name|cookie
argument_list|,
name|origin
argument_list|)
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|"myhost:80"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|h
operator|.
name|match
argument_list|(
name|cookie
argument_list|,
name|origin
argument_list|)
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|"myhost:8080"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|h
operator|.
name|match
argument_list|(
name|cookie
argument_list|,
name|origin
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDomainValidate1
specifier|public
name|void
name|testDomainValidate1
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|BasicClientCookie
name|cookie
init|=
operator|new
name|BasicClientCookie
argument_list|(
literal|"name"
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
specifier|final
name|CookieOrigin
name|origin
init|=
operator|new
name|CookieOrigin
argument_list|(
literal|"somehost"
argument_list|,
literal|80
argument_list|,
literal|"/"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|CookieAttributeHandler
name|h
init|=
operator|new
name|SolrPortAwareCookieSpecFactory
operator|.
name|PortAwareDomainHandler
argument_list|()
decl_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|"somehost"
argument_list|)
expr_stmt|;
name|h
operator|.
name|validate
argument_list|(
name|cookie
argument_list|,
name|origin
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|"otherhost"
argument_list|)
expr_stmt|;
try|try
block|{
name|h
operator|.
name|validate
argument_list|(
name|cookie
argument_list|,
name|origin
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"MalformedCookieException should have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|MalformedCookieException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testDomainValidate2
specifier|public
name|void
name|testDomainValidate2
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|BasicClientCookie
name|cookie
init|=
operator|new
name|BasicClientCookie
argument_list|(
literal|"name"
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
specifier|final
name|CookieOrigin
name|origin
init|=
operator|new
name|CookieOrigin
argument_list|(
literal|"www.somedomain.com"
argument_list|,
literal|80
argument_list|,
literal|"/"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|CookieAttributeHandler
name|h
init|=
operator|new
name|SolrPortAwareCookieSpecFactory
operator|.
name|PortAwareDomainHandler
argument_list|()
decl_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|".somedomain.com"
argument_list|)
expr_stmt|;
name|h
operator|.
name|validate
argument_list|(
name|cookie
argument_list|,
name|origin
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|".otherdomain.com"
argument_list|)
expr_stmt|;
try|try
block|{
name|h
operator|.
name|validate
argument_list|(
name|cookie
argument_list|,
name|origin
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"MalformedCookieException should have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|MalformedCookieException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
name|cookie
operator|.
name|setDomain
argument_list|(
literal|"www.otherdomain.com"
argument_list|)
expr_stmt|;
try|try
block|{
name|h
operator|.
name|validate
argument_list|(
name|cookie
argument_list|,
name|origin
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"MalformedCookieException should have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|MalformedCookieException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testDomainValidate3
specifier|public
name|void
name|testDomainValidate3
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|BasicClientCookie
name|cookie
init|=
operator|new
name|BasicClientCookie
argument_list|(
literal|"name"
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
specifier|final
name|CookieOrigin
name|origin
init|=
operator|new
name|CookieOrigin
argument_list|(
literal|"www.a.com"
argument_list|,
literal|80
argument_list|,
literal|"/"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|CookieAttributeHandler
name|h
init|=
operator|new
name|SolrPortAwareCookieSpecFactory
operator|.
name|PortAwareDomainHandler
argument_list|()
decl_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|".a.com"
argument_list|)
expr_stmt|;
name|h
operator|.
name|validate
argument_list|(
name|cookie
argument_list|,
name|origin
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|".com"
argument_list|)
expr_stmt|;
try|try
block|{
name|h
operator|.
name|validate
argument_list|(
name|cookie
argument_list|,
name|origin
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"MalformedCookieException should have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|MalformedCookieException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testDomainValidate4
specifier|public
name|void
name|testDomainValidate4
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|BasicClientCookie
name|cookie
init|=
operator|new
name|BasicClientCookie
argument_list|(
literal|"name"
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
specifier|final
name|CookieOrigin
name|origin
init|=
operator|new
name|CookieOrigin
argument_list|(
literal|"www.a.b.c"
argument_list|,
literal|80
argument_list|,
literal|"/"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|CookieAttributeHandler
name|h
init|=
operator|new
name|SolrPortAwareCookieSpecFactory
operator|.
name|PortAwareDomainHandler
argument_list|()
decl_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|".a.b.c"
argument_list|)
expr_stmt|;
name|h
operator|.
name|validate
argument_list|(
name|cookie
argument_list|,
name|origin
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|".b.c"
argument_list|)
expr_stmt|;
try|try
block|{
name|h
operator|.
name|validate
argument_list|(
name|cookie
argument_list|,
name|origin
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"MalformedCookieException should have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|MalformedCookieException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testDomainMatch1
specifier|public
name|void
name|testDomainMatch1
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|BasicClientCookie
name|cookie
init|=
operator|new
name|BasicClientCookie
argument_list|(
literal|"name"
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
specifier|final
name|CookieOrigin
name|origin
init|=
operator|new
name|CookieOrigin
argument_list|(
literal|"www.somedomain.com"
argument_list|,
literal|80
argument_list|,
literal|"/"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|CookieAttributeHandler
name|h
init|=
operator|new
name|SolrPortAwareCookieSpecFactory
operator|.
name|PortAwareDomainHandler
argument_list|()
decl_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|h
operator|.
name|match
argument_list|(
name|cookie
argument_list|,
name|origin
argument_list|)
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|".somedomain.com"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|h
operator|.
name|match
argument_list|(
name|cookie
argument_list|,
name|origin
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDomainMatch2
specifier|public
name|void
name|testDomainMatch2
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|BasicClientCookie
name|cookie
init|=
operator|new
name|BasicClientCookie
argument_list|(
literal|"name"
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
specifier|final
name|CookieOrigin
name|origin
init|=
operator|new
name|CookieOrigin
argument_list|(
literal|"www.whatever.somedomain.com"
argument_list|,
literal|80
argument_list|,
literal|"/"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|CookieAttributeHandler
name|h
init|=
operator|new
name|SolrPortAwareCookieSpecFactory
operator|.
name|PortAwareDomainHandler
argument_list|()
decl_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|".somedomain.com"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|h
operator|.
name|match
argument_list|(
name|cookie
argument_list|,
name|origin
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDomainInvalidInput
specifier|public
name|void
name|testDomainInvalidInput
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CookieAttributeHandler
name|h
init|=
operator|new
name|SolrPortAwareCookieSpecFactory
operator|.
name|PortAwareDomainHandler
argument_list|()
decl_stmt|;
try|try
block|{
name|h
operator|.
name|match
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"IllegalArgumentException must have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|h
operator|.
name|match
argument_list|(
operator|new
name|BasicClientCookie
argument_list|(
literal|"name"
argument_list|,
literal|"value"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"IllegalArgumentException must have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
end_class
end_unit
