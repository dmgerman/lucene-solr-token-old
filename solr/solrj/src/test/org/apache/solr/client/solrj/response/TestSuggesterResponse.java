begin_unit
begin_package
DECL|package|org.apache.solr.client.solrj.response
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrJettyTestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/**  * Test for SuggesterComponent's response in Solrj  *  */
end_comment
begin_class
DECL|class|TestSuggesterResponse
specifier|public
class|class
name|TestSuggesterResponse
extends|extends
name|SolrJettyTestBase
block|{
annotation|@
name|BeforeClass
DECL|method|beforeTest
specifier|public
specifier|static
name|void
name|beforeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|()
expr_stmt|;
block|}
DECL|field|field
specifier|static
name|String
name|field
init|=
literal|"cat"
decl_stmt|;
annotation|@
name|Test
DECL|method|testSuggesterResponseObject
specifier|public
name|void
name|testSuggesterResponseObject
parameter_list|()
throws|throws
name|Exception
block|{
name|getSolrClient
argument_list|()
expr_stmt|;
name|addSampleDocs
argument_list|()
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/suggest"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"suggest.dictionary"
argument_list|,
literal|"mySuggester"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"suggest.q"
argument_list|,
literal|"Com"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"suggest.build"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QueryRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|QueryResponse
name|queryResponse
init|=
name|request
operator|.
name|process
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|SuggesterResponse
name|response
init|=
name|queryResponse
operator|.
name|getSuggesterResponse
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Suggestion
argument_list|>
argument_list|>
name|dictionary2suggestions
init|=
name|response
operator|.
name|getSuggestions
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|dictionary2suggestions
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
literal|"mySuggester"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Suggestion
argument_list|>
name|mySuggester
init|=
name|dictionary2suggestions
operator|.
name|get
argument_list|(
literal|"mySuggester"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Computational framework"
argument_list|,
name|mySuggester
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mySuggester
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getWeight
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|mySuggester
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Computer"
argument_list|,
name|mySuggester
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mySuggester
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getWeight
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|mySuggester
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSuggesterResponseTerms
specifier|public
name|void
name|testSuggesterResponseTerms
parameter_list|()
throws|throws
name|Exception
block|{
name|getSolrClient
argument_list|()
expr_stmt|;
name|addSampleDocs
argument_list|()
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/suggest"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"suggest.dictionary"
argument_list|,
literal|"mySuggester"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"suggest.q"
argument_list|,
literal|"Com"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"suggest.build"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QueryRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|QueryResponse
name|queryResponse
init|=
name|request
operator|.
name|process
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|SuggesterResponse
name|response
init|=
name|queryResponse
operator|.
name|getSuggesterResponse
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|dictionary2suggestions
init|=
name|response
operator|.
name|getSuggestedTerms
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|dictionary2suggestions
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
literal|"mySuggester"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|mySuggester
init|=
name|dictionary2suggestions
operator|.
name|get
argument_list|(
literal|"mySuggester"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Computational framework"
argument_list|,
name|mySuggester
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Computer"
argument_list|,
name|mySuggester
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptySuggesterResponse
specifier|public
name|void
name|testEmptySuggesterResponse
parameter_list|()
throws|throws
name|Exception
block|{
name|getSolrClient
argument_list|()
expr_stmt|;
name|addSampleDocs
argument_list|()
expr_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/suggest"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"suggest.dictionary"
argument_list|,
literal|"mySuggester"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"suggest.q"
argument_list|,
literal|"Empty"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"suggest.build"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QueryRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|QueryResponse
name|queryResponse
init|=
name|request
operator|.
name|process
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|SuggesterResponse
name|response
init|=
name|queryResponse
operator|.
name|getSuggesterResponse
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|dictionary2suggestions
init|=
name|response
operator|.
name|getSuggestedTerms
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|dictionary2suggestions
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
literal|"mySuggester"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|mySuggester
init|=
name|dictionary2suggestions
operator|.
name|get
argument_list|(
literal|"mySuggester"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mySuggester
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addSampleDocs
specifier|private
name|void
name|addSampleDocs
parameter_list|()
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|client
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|setField
argument_list|(
literal|"id"
argument_list|,
literal|"111"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setField
argument_list|(
name|field
argument_list|,
literal|"Computer"
argument_list|)
expr_stmt|;
name|SolrInputDocument
name|doc2
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc2
operator|.
name|setField
argument_list|(
literal|"id"
argument_list|,
literal|"222"
argument_list|)
expr_stmt|;
name|doc2
operator|.
name|setField
argument_list|(
name|field
argument_list|,
literal|"Computational framework"
argument_list|)
expr_stmt|;
name|SolrInputDocument
name|doc3
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc3
operator|.
name|setField
argument_list|(
literal|"id"
argument_list|,
literal|"333"
argument_list|)
expr_stmt|;
name|doc3
operator|.
name|setField
argument_list|(
name|field
argument_list|,
literal|"Laptop"
argument_list|)
expr_stmt|;
name|client
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|client
operator|.
name|add
argument_list|(
name|doc2
argument_list|)
expr_stmt|;
name|client
operator|.
name|add
argument_list|(
name|doc3
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
