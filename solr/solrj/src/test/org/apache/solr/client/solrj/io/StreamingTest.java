begin_unit
begin_package
DECL|package|org.apache.solr.client.solrj.io
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractFullDistribZkTestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractZkTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_comment
comment|/**  *  All base tests will be done with CloudSolrStream. Under the covers CloudSolrStream uses SolrStream so  *  SolrStream will get fully exercised through these tests.  *  **/
end_comment
begin_class
annotation|@
name|Slow
annotation|@
name|LuceneTestCase
operator|.
name|SuppressCodecs
argument_list|(
block|{
literal|"Lucene3x"
block|,
literal|"Lucene40"
block|,
literal|"Lucene41"
block|,
literal|"Lucene42"
block|,
literal|"Lucene45"
block|}
argument_list|)
DECL|class|StreamingTest
specifier|public
class|class
name|StreamingTest
extends|extends
name|AbstractFullDistribZkTestBase
block|{
DECL|field|SOLR_HOME
specifier|private
specifier|static
specifier|final
name|String
name|SOLR_HOME
init|=
name|getFile
argument_list|(
literal|"solrj"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"solr"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
static|static
block|{
name|schemaString
operator|=
literal|"schema-streaming.xml"
expr_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|beforeSuperClass
specifier|public
specifier|static
name|void
name|beforeSuperClass
parameter_list|()
block|{
name|AbstractZkTestCase
operator|.
name|SOLRHOME
operator|=
operator|new
name|File
argument_list|(
name|SOLR_HOME
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterSuperClass
specifier|public
specifier|static
name|void
name|afterSuperClass
parameter_list|()
block|{    }
DECL|method|getCloudSolrConfig
specifier|protected
name|String
name|getCloudSolrConfig
parameter_list|()
block|{
return|return
literal|"solrconfig-streaming.xml"
return|;
block|}
annotation|@
name|Override
DECL|method|getSolrHome
specifier|public
name|String
name|getSolrHome
parameter_list|()
block|{
return|return
name|SOLR_HOME
return|;
block|}
DECL|method|SOLR_HOME
specifier|public
specifier|static
name|String
name|SOLR_HOME
parameter_list|()
block|{
return|return
name|SOLR_HOME
return|;
block|}
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|// we expect this time of exception as shards go up and down...
comment|//ignoreException(".*");
name|System
operator|.
name|setProperty
argument_list|(
literal|"numShards"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|sliceCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|resetExceptionIgnores
argument_list|()
expr_stmt|;
block|}
DECL|method|StreamingTest
specifier|public
name|StreamingTest
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|sliceCount
operator|=
literal|2
expr_stmt|;
block|}
DECL|method|testUniqueStream
specifier|private
name|void
name|testUniqueStream
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Test CloudSolrStream and UniqueStream
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|Map
name|params
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f asc,a_i asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|UniqueStream
name|ustream
init|=
operator|new
name|UniqueStream
argument_list|(
name|stream
argument_list|,
operator|new
name|AscFieldComp
argument_list|(
literal|"a_f"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|ustream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|4
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testHashJoinStream
specifier|private
name|void
name|testHashJoinStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|,
literal|"join_i"
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|,
literal|"join_i"
argument_list|,
literal|"2000"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello7"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
comment|//Test one-to-one
name|Map
name|paramsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 1 3 4) "
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s desc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|streamA
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
decl_stmt|;
name|Map
name|fieldMappings
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|fieldMappings
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
literal|"streamB.id"
argument_list|)
expr_stmt|;
name|Map
name|paramsB
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(2)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_f,join_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s desc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|streamB
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsB
argument_list|)
decl_stmt|;
name|streamB
operator|.
name|setFieldMappings
argument_list|(
name|fieldMappings
argument_list|)
expr_stmt|;
name|String
index|[]
name|keys
init|=
block|{
literal|"a_f"
block|}
decl_stmt|;
name|HashJoinStream
name|fstream
init|=
operator|new
name|HashJoinStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
name|keys
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|fstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"join_i"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|//Test one-to-many
name|paramsA
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 1 3 4) "
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s desc"
argument_list|)
expr_stmt|;
name|streamA
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
expr_stmt|;
name|fieldMappings
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|fieldMappings
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
literal|"streamB.id"
argument_list|)
expr_stmt|;
name|paramsB
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(2 6)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_f,join_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s desc"
argument_list|)
expr_stmt|;
name|streamB
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsB
argument_list|)
expr_stmt|;
name|streamB
operator|.
name|setFieldMappings
argument_list|(
name|fieldMappings
argument_list|)
expr_stmt|;
name|fstream
operator|=
operator|new
name|HashJoinStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
name|keys
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|fstream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"join_i"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"join_i"
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
comment|//Test many-to-one
name|paramsA
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 2 1 3 4) "
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s desc"
argument_list|)
expr_stmt|;
name|streamA
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
expr_stmt|;
name|fieldMappings
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|fieldMappings
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
literal|"streamB.id"
argument_list|)
expr_stmt|;
name|paramsB
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(6)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_f,join_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s desc"
argument_list|)
expr_stmt|;
name|streamB
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsB
argument_list|)
expr_stmt|;
name|streamB
operator|.
name|setFieldMappings
argument_list|(
name|fieldMappings
argument_list|)
expr_stmt|;
name|fstream
operator|=
operator|new
name|HashJoinStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
name|keys
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|fstream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"join_i"
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"join_i"
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
comment|//Test many-to-many
name|paramsA
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 7 1 3 4) "
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s desc"
argument_list|)
expr_stmt|;
name|streamA
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
expr_stmt|;
name|fieldMappings
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|fieldMappings
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
literal|"streamB.id"
argument_list|)
expr_stmt|;
name|paramsB
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(6 2)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_f,join_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s desc"
argument_list|)
expr_stmt|;
name|streamB
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsB
argument_list|)
expr_stmt|;
name|streamB
operator|.
name|setFieldMappings
argument_list|(
name|fieldMappings
argument_list|)
expr_stmt|;
name|fstream
operator|=
operator|new
name|HashJoinStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
name|keys
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|fstream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|4
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|7
argument_list|,
literal|7
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"join_i"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"join_i"
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"join_i"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|"join_i"
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testMergeJoinStream
specifier|private
name|void
name|testMergeJoinStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|,
literal|"join_i"
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|,
literal|"join_i"
argument_list|,
literal|"2000"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello7"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
comment|//Test one-to-one
name|Map
name|paramsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 1 3 4) "
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f desc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|streamA
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
decl_stmt|;
name|Map
name|fieldMappings
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|fieldMappings
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
literal|"streamB.id"
argument_list|)
expr_stmt|;
name|Map
name|paramsB
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(2)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_f,join_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f desc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|streamB
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsB
argument_list|)
decl_stmt|;
name|streamB
operator|.
name|setFieldMappings
argument_list|(
name|fieldMappings
argument_list|)
expr_stmt|;
name|String
index|[]
name|keys
init|=
block|{
literal|"a_f"
block|}
decl_stmt|;
name|MergeJoinStream
name|fstream
init|=
operator|new
name|MergeJoinStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
operator|new
name|DescFieldComp
argument_list|(
literal|"a_f"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|fstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"join_i"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|//Test one-to-many
name|paramsA
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 1 3 4) "
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f desc"
argument_list|)
expr_stmt|;
name|streamA
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
expr_stmt|;
name|fieldMappings
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|fieldMappings
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
literal|"streamB.id"
argument_list|)
expr_stmt|;
name|paramsB
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(2 6)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_f,join_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f desc"
argument_list|)
expr_stmt|;
name|streamB
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsB
argument_list|)
expr_stmt|;
name|streamB
operator|.
name|setFieldMappings
argument_list|(
name|fieldMappings
argument_list|)
expr_stmt|;
name|fstream
operator|=
operator|new
name|MergeJoinStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
operator|new
name|DescFieldComp
argument_list|(
literal|"a_f"
argument_list|)
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|fstream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"join_i"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"join_i"
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
comment|//Test many-to-one
name|paramsA
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 2 1 3 4) "
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f desc"
argument_list|)
expr_stmt|;
name|streamA
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
expr_stmt|;
name|fieldMappings
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|fieldMappings
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
literal|"streamB.id"
argument_list|)
expr_stmt|;
name|paramsB
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(6)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_f,join_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f desc"
argument_list|)
expr_stmt|;
name|streamB
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsB
argument_list|)
expr_stmt|;
name|streamB
operator|.
name|setFieldMappings
argument_list|(
name|fieldMappings
argument_list|)
expr_stmt|;
name|fstream
operator|=
operator|new
name|MergeJoinStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
operator|new
name|DescFieldComp
argument_list|(
literal|"a_f"
argument_list|)
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|fstream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"join_i"
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"join_i"
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
comment|//Test many-to-many
name|paramsA
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 7 1 3 4) "
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f desc"
argument_list|)
expr_stmt|;
name|streamA
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
expr_stmt|;
name|fieldMappings
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|fieldMappings
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
literal|"streamB.id"
argument_list|)
expr_stmt|;
name|paramsB
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(6 2)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_f,join_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f desc"
argument_list|)
expr_stmt|;
name|streamB
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsB
argument_list|)
expr_stmt|;
name|streamB
operator|.
name|setFieldMappings
argument_list|(
name|fieldMappings
argument_list|)
expr_stmt|;
name|fstream
operator|=
operator|new
name|MergeJoinStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
operator|new
name|DescFieldComp
argument_list|(
literal|"a_f"
argument_list|)
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|fstream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|4
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|7
argument_list|,
literal|7
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"join_i"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"join_i"
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"join_i"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|"join_i"
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testParallelMergeJoinStream
specifier|private
name|void
name|testParallelMergeJoinStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|,
literal|"join_i"
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|,
literal|"join_i"
argument_list|,
literal|"2000"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello7"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
comment|//Test one-to-one
name|Map
name|paramsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 1 3 4) "
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f desc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_f"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|streamA
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
decl_stmt|;
name|Map
name|fieldMappings
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|fieldMappings
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
literal|"streamB.id"
argument_list|)
expr_stmt|;
name|Map
name|paramsB
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(2)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_f,join_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f desc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_f"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|streamB
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsB
argument_list|)
decl_stmt|;
name|streamB
operator|.
name|setFieldMappings
argument_list|(
name|fieldMappings
argument_list|)
expr_stmt|;
name|String
index|[]
name|keys
init|=
block|{
literal|"a_f"
block|}
decl_stmt|;
name|MergeJoinStream
name|mstream
init|=
operator|new
name|MergeJoinStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
operator|new
name|DescFieldComp
argument_list|(
literal|"a_f"
argument_list|)
argument_list|)
decl_stmt|;
name|ParallelStream
name|fstream
init|=
operator|new
name|ParallelStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|mstream
argument_list|,
literal|2
argument_list|,
operator|new
name|DescFieldComp
argument_list|(
literal|"a_f"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|fstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"join_i"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|//Test one-to-many
name|paramsA
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 1 3 4) "
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f desc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_f"
argument_list|)
expr_stmt|;
name|streamA
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
expr_stmt|;
name|fieldMappings
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|fieldMappings
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
literal|"streamB.id"
argument_list|)
expr_stmt|;
name|paramsB
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(2 6)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_f,join_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f desc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_f"
argument_list|)
expr_stmt|;
name|streamB
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsB
argument_list|)
expr_stmt|;
name|streamB
operator|.
name|setFieldMappings
argument_list|(
name|fieldMappings
argument_list|)
expr_stmt|;
name|mstream
operator|=
operator|new
name|MergeJoinStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
operator|new
name|DescFieldComp
argument_list|(
literal|"a_f"
argument_list|)
argument_list|)
expr_stmt|;
name|fstream
operator|=
operator|new
name|ParallelStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|mstream
argument_list|,
literal|2
argument_list|,
operator|new
name|DescFieldComp
argument_list|(
literal|"a_f"
argument_list|)
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|fstream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"join_i"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"join_i"
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
comment|//Test many-to-one
name|paramsA
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 2 1 3 4) "
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f desc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_f"
argument_list|)
expr_stmt|;
name|streamA
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
expr_stmt|;
name|fieldMappings
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|fieldMappings
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
literal|"streamB.id"
argument_list|)
expr_stmt|;
name|paramsB
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(6)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_f,join_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f desc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_f"
argument_list|)
expr_stmt|;
name|streamB
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsB
argument_list|)
expr_stmt|;
name|streamB
operator|.
name|setFieldMappings
argument_list|(
name|fieldMappings
argument_list|)
expr_stmt|;
name|mstream
operator|=
operator|new
name|MergeJoinStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
operator|new
name|DescFieldComp
argument_list|(
literal|"a_f"
argument_list|)
argument_list|)
expr_stmt|;
name|fstream
operator|=
operator|new
name|ParallelStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|mstream
argument_list|,
literal|2
argument_list|,
operator|new
name|DescFieldComp
argument_list|(
literal|"a_f"
argument_list|)
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|fstream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"join_i"
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"join_i"
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
comment|//Test many-to-many
name|paramsA
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 7 1 3 4) "
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f desc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_f"
argument_list|)
expr_stmt|;
name|streamA
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
expr_stmt|;
name|fieldMappings
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|fieldMappings
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
literal|"streamB.id"
argument_list|)
expr_stmt|;
name|paramsB
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(6 2)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_f,join_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f desc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_f"
argument_list|)
expr_stmt|;
name|streamB
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsB
argument_list|)
expr_stmt|;
name|streamB
operator|.
name|setFieldMappings
argument_list|(
name|fieldMappings
argument_list|)
expr_stmt|;
name|mstream
operator|=
operator|new
name|MergeJoinStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
operator|new
name|DescFieldComp
argument_list|(
literal|"a_f"
argument_list|)
argument_list|)
expr_stmt|;
name|fstream
operator|=
operator|new
name|ParallelStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|mstream
argument_list|,
literal|2
argument_list|,
operator|new
name|DescFieldComp
argument_list|(
literal|"a_f"
argument_list|)
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|fstream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|4
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|7
argument_list|,
literal|7
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"join_i"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"join_i"
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"join_i"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|"join_i"
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testRankStream
specifier|private
name|void
name|testRankStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|Map
name|params
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|RankStream
name|rstream
init|=
operator|new
name|RankStream
argument_list|(
name|stream
argument_list|,
literal|3
argument_list|,
operator|new
name|DescFieldComp
argument_list|(
literal|"a_i"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|rstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testRollupStream
specifier|private
name|void
name|testRollupStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"100"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|Bucket
index|[]
name|buckets
init|=
block|{
operator|new
name|Bucket
argument_list|(
literal|"a_s"
argument_list|)
block|}
decl_stmt|;
name|Metric
index|[]
name|metrics
init|=
block|{
operator|new
name|SumMetric
argument_list|(
literal|"a_i"
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|MeanMetric
argument_list|(
literal|"a_i"
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|CountMetric
argument_list|()
block|,
operator|new
name|MinMetric
argument_list|(
literal|"a_i"
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|MaxMetric
argument_list|(
literal|"a_i"
argument_list|,
literal|false
argument_list|)
block|}
decl_stmt|;
name|Map
name|params
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|RollupStream
name|rstream
init|=
operator|new
name|RollupStream
argument_list|(
name|stream
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
name|rstream
operator|.
name|open
argument_list|()
expr_stmt|;
name|Tuple
name|tuple
init|=
name|rstream
operator|.
name|read
argument_list|()
decl_stmt|;
name|String
name|b
init|=
operator|(
name|String
operator|)
name|tuple
operator|.
name|get
argument_list|(
literal|"buckets"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|values
init|=
operator|(
name|List
argument_list|<
name|Double
argument_list|>
operator|)
name|tuple
operator|.
name|get
argument_list|(
literal|"metricValues"
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|b
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|==
literal|102.0d
operator|)
assert|;
assert|assert
operator|(
name|values
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|==
literal|51.0d
operator|)
assert|;
assert|assert
operator|(
name|values
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|==
literal|2.0d
operator|)
assert|;
assert|assert
operator|(
name|values
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|==
literal|2.0d
operator|)
assert|;
assert|assert
operator|(
name|values
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|==
literal|100.0d
operator|)
assert|;
name|tuple
operator|=
name|rstream
operator|.
name|read
argument_list|()
expr_stmt|;
name|b
operator|=
operator|(
name|String
operator|)
name|tuple
operator|.
name|get
argument_list|(
literal|"buckets"
argument_list|)
expr_stmt|;
name|values
operator|=
operator|(
name|List
argument_list|<
name|Double
argument_list|>
operator|)
name|tuple
operator|.
name|get
argument_list|(
literal|"metricValues"
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|b
operator|.
name|equals
argument_list|(
literal|"hello1"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|==
literal|3.0d
operator|)
assert|;
assert|assert
operator|(
name|values
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|==
literal|1.0d
operator|)
assert|;
assert|assert
operator|(
name|values
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|==
literal|3.0d
operator|)
assert|;
assert|assert
operator|(
name|values
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|==
literal|1.0d
operator|)
assert|;
assert|assert
operator|(
name|values
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|==
literal|1.0d
operator|)
assert|;
name|tuple
operator|=
name|rstream
operator|.
name|read
argument_list|()
expr_stmt|;
name|b
operator|=
operator|(
name|String
operator|)
name|tuple
operator|.
name|get
argument_list|(
literal|"buckets"
argument_list|)
expr_stmt|;
name|values
operator|=
operator|(
name|List
argument_list|<
name|Double
argument_list|>
operator|)
name|tuple
operator|.
name|get
argument_list|(
literal|"metricValues"
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|b
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|==
literal|7.0d
operator|)
assert|;
assert|assert
operator|(
name|values
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|==
literal|3.5d
operator|)
assert|;
assert|assert
operator|(
name|values
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|==
literal|2.0d
operator|)
assert|;
assert|assert
operator|(
name|values
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|==
literal|3.0d
operator|)
assert|;
assert|assert
operator|(
name|values
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|==
literal|4.0d
operator|)
assert|;
name|tuple
operator|=
name|rstream
operator|.
name|read
argument_list|()
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|EOF
operator|)
assert|;
name|rstream
operator|.
name|close
argument_list|()
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testParallelRollupStream
specifier|private
name|void
name|testParallelRollupStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"100"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|Bucket
index|[]
name|buckets
init|=
block|{
operator|new
name|Bucket
argument_list|(
literal|"a_s"
argument_list|)
block|}
decl_stmt|;
name|Metric
index|[]
name|metrics
init|=
block|{
operator|new
name|SumMetric
argument_list|(
literal|"a_i"
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|MeanMetric
argument_list|(
literal|"a_i"
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|CountMetric
argument_list|()
block|,
operator|new
name|MinMetric
argument_list|(
literal|"a_i"
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|MaxMetric
argument_list|(
literal|"a_i"
argument_list|,
literal|false
argument_list|)
block|}
decl_stmt|;
name|Map
name|params
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_s"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|RollupStream
name|rostream
init|=
operator|new
name|RollupStream
argument_list|(
name|stream
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
name|ParallelStream
name|rstream
init|=
operator|new
name|ParallelStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|rostream
argument_list|,
literal|2
argument_list|,
operator|new
name|AscFieldComp
argument_list|(
literal|"buckets"
argument_list|)
argument_list|)
decl_stmt|;
name|rstream
operator|.
name|open
argument_list|()
expr_stmt|;
name|Tuple
name|tuple
init|=
name|rstream
operator|.
name|read
argument_list|()
decl_stmt|;
name|String
name|b
init|=
operator|(
name|String
operator|)
name|tuple
operator|.
name|get
argument_list|(
literal|"buckets"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|values
init|=
operator|(
name|List
argument_list|<
name|Double
argument_list|>
operator|)
name|tuple
operator|.
name|get
argument_list|(
literal|"metricValues"
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|b
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|==
literal|102.0d
operator|)
assert|;
assert|assert
operator|(
name|values
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|==
literal|51.0d
operator|)
assert|;
assert|assert
operator|(
name|values
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|==
literal|2.0d
operator|)
assert|;
assert|assert
operator|(
name|values
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|==
literal|2.0d
operator|)
assert|;
assert|assert
operator|(
name|values
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|==
literal|100.0d
operator|)
assert|;
name|tuple
operator|=
name|rstream
operator|.
name|read
argument_list|()
expr_stmt|;
name|b
operator|=
operator|(
name|String
operator|)
name|tuple
operator|.
name|get
argument_list|(
literal|"buckets"
argument_list|)
expr_stmt|;
name|values
operator|=
operator|(
name|List
argument_list|<
name|Double
argument_list|>
operator|)
name|tuple
operator|.
name|get
argument_list|(
literal|"metricValues"
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|b
operator|.
name|equals
argument_list|(
literal|"hello1"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|==
literal|3.0d
operator|)
assert|;
assert|assert
operator|(
name|values
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|==
literal|1.0d
operator|)
assert|;
assert|assert
operator|(
name|values
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|==
literal|3.0d
operator|)
assert|;
assert|assert
operator|(
name|values
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|==
literal|1.0d
operator|)
assert|;
assert|assert
operator|(
name|values
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|==
literal|1.0d
operator|)
assert|;
name|tuple
operator|=
name|rstream
operator|.
name|read
argument_list|()
expr_stmt|;
name|b
operator|=
operator|(
name|String
operator|)
name|tuple
operator|.
name|get
argument_list|(
literal|"buckets"
argument_list|)
expr_stmt|;
name|values
operator|=
operator|(
name|List
argument_list|<
name|Double
argument_list|>
operator|)
name|tuple
operator|.
name|get
argument_list|(
literal|"metricValues"
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|b
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|==
literal|7.0d
operator|)
assert|;
assert|assert
operator|(
name|values
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|==
literal|3.5d
operator|)
assert|;
assert|assert
operator|(
name|values
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|==
literal|2.0d
operator|)
assert|;
assert|assert
operator|(
name|values
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|==
literal|3.0d
operator|)
assert|;
assert|assert
operator|(
name|values
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|==
literal|4.0d
operator|)
assert|;
name|tuple
operator|=
name|rstream
operator|.
name|read
argument_list|()
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|EOF
operator|)
assert|;
name|rstream
operator|.
name|close
argument_list|()
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testMetricStream
specifier|private
name|void
name|testMetricStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"100"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|Bucket
index|[]
name|buckets
init|=
block|{
operator|new
name|Bucket
argument_list|(
literal|"a_s"
argument_list|)
block|}
decl_stmt|;
name|Metric
index|[]
name|metrics
init|=
block|{
operator|new
name|SumMetric
argument_list|(
literal|"a_i"
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|MeanMetric
argument_list|(
literal|"a_i"
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|CountMetric
argument_list|()
block|,
operator|new
name|MinMetric
argument_list|(
literal|"a_i"
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|MaxMetric
argument_list|(
literal|"a_i"
argument_list|,
literal|false
argument_list|)
block|}
decl_stmt|;
name|Map
name|params
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|MetricStream
name|mstream
init|=
operator|new
name|MetricStream
argument_list|(
name|stream
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|,
literal|"metric1"
argument_list|,
operator|new
name|DescBucketComp
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|getTuples
argument_list|(
name|mstream
argument_list|)
expr_stmt|;
name|BucketMetrics
index|[]
name|bucketMetrics
init|=
name|mstream
operator|.
name|getBucketMetrics
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|bucketMetrics
operator|.
name|length
operator|==
literal|3
operator|)
assert|;
comment|//Bucket should be is descending order based on Metric 0, which is the SumMetric.
assert|assert
operator|(
name|bucketMetrics
index|[
literal|0
index|]
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|bucketMetrics
index|[
literal|1
index|]
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|bucketMetrics
index|[
literal|2
index|]
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hello1"
argument_list|)
operator|)
assert|;
name|assertMetric
argument_list|(
name|bucketMetrics
index|[
literal|0
index|]
operator|.
name|getMetrics
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|102.0d
argument_list|)
expr_stmt|;
comment|//Test the first Metric of the first BucketMetrics
name|assertMetric
argument_list|(
name|bucketMetrics
index|[
literal|0
index|]
operator|.
name|getMetrics
argument_list|()
index|[
literal|1
index|]
argument_list|,
literal|51.0d
argument_list|)
expr_stmt|;
comment|//Test the second Metric of the first BucketMetrics
name|assertMetric
argument_list|(
name|bucketMetrics
index|[
literal|0
index|]
operator|.
name|getMetrics
argument_list|()
index|[
literal|2
index|]
argument_list|,
literal|2.0d
argument_list|)
expr_stmt|;
comment|//Test the third Metric of the first BucketMetrics
name|assertMetric
argument_list|(
name|bucketMetrics
index|[
literal|0
index|]
operator|.
name|getMetrics
argument_list|()
index|[
literal|3
index|]
argument_list|,
literal|2.0d
argument_list|)
expr_stmt|;
comment|//Test the fourth Metric of the first BucketMetrics
name|assertMetric
argument_list|(
name|bucketMetrics
index|[
literal|0
index|]
operator|.
name|getMetrics
argument_list|()
index|[
literal|4
index|]
argument_list|,
literal|100.0d
argument_list|)
expr_stmt|;
comment|//Test the fifth Metric of the first BucketMetrics
name|assertMetric
argument_list|(
name|bucketMetrics
index|[
literal|1
index|]
operator|.
name|getMetrics
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|7.0d
argument_list|)
expr_stmt|;
name|assertMetric
argument_list|(
name|bucketMetrics
index|[
literal|2
index|]
operator|.
name|getMetrics
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|3.0d
argument_list|)
expr_stmt|;
name|params
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|mstream
operator|=
operator|new
name|MetricStream
argument_list|(
name|stream
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|,
literal|"metric1"
argument_list|,
operator|new
name|AscBucketComp
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getTuples
argument_list|(
name|mstream
argument_list|)
expr_stmt|;
name|bucketMetrics
operator|=
name|mstream
operator|.
name|getBucketMetrics
argument_list|()
expr_stmt|;
name|assertMetric
argument_list|(
name|bucketMetrics
index|[
literal|0
index|]
operator|.
name|getMetrics
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|3.0d
argument_list|)
expr_stmt|;
comment|//Test the first Metric of the first BucketMetrics
name|assertMetric
argument_list|(
name|bucketMetrics
index|[
literal|0
index|]
operator|.
name|getMetrics
argument_list|()
index|[
literal|1
index|]
argument_list|,
literal|1.0d
argument_list|)
expr_stmt|;
comment|//Test the second Metric of the first BucketMetrics
name|assertMetric
argument_list|(
name|bucketMetrics
index|[
literal|0
index|]
operator|.
name|getMetrics
argument_list|()
index|[
literal|2
index|]
argument_list|,
literal|3.0d
argument_list|)
expr_stmt|;
comment|//Test the third Metric of the first BucketMetrics
name|assertMetric
argument_list|(
name|bucketMetrics
index|[
literal|0
index|]
operator|.
name|getMetrics
argument_list|()
index|[
literal|3
index|]
argument_list|,
literal|1.0d
argument_list|)
expr_stmt|;
comment|//Test the fourth Metric of the first BucketMetrics
name|assertMetric
argument_list|(
name|bucketMetrics
index|[
literal|0
index|]
operator|.
name|getMetrics
argument_list|()
index|[
literal|4
index|]
argument_list|,
literal|1.0d
argument_list|)
expr_stmt|;
comment|//Test the fifth Metric of the first BucketMetrics
name|assertMetric
argument_list|(
name|bucketMetrics
index|[
literal|1
index|]
operator|.
name|getMetrics
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|7.0d
argument_list|)
expr_stmt|;
name|assertMetric
argument_list|(
name|bucketMetrics
index|[
literal|2
index|]
operator|.
name|getMetrics
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|102.0d
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1000"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|//Add a fourth record.
name|commit
argument_list|()
expr_stmt|;
comment|//Test desc comp with more buckets then priority queue can hold.
name|params
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|mstream
operator|=
operator|new
name|MetricStream
argument_list|(
name|stream
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|,
literal|"metric1"
argument_list|,
operator|new
name|DescBucketComp
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|getTuples
argument_list|(
name|mstream
argument_list|)
expr_stmt|;
name|bucketMetrics
operator|=
name|mstream
operator|.
name|getBucketMetrics
argument_list|()
expr_stmt|;
assert|assert
operator|(
name|bucketMetrics
operator|.
name|length
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|bucketMetrics
index|[
literal|0
index|]
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|bucketMetrics
index|[
literal|1
index|]
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|bucketMetrics
index|[
literal|2
index|]
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
operator|)
assert|;
comment|//Test asc comp with more buckets then priority queue can hold.
name|params
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|mstream
operator|=
operator|new
name|MetricStream
argument_list|(
name|stream
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|,
literal|"metric1"
argument_list|,
operator|new
name|AscBucketComp
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|getTuples
argument_list|(
name|mstream
argument_list|)
expr_stmt|;
name|bucketMetrics
operator|=
name|mstream
operator|.
name|getBucketMetrics
argument_list|()
expr_stmt|;
assert|assert
operator|(
name|bucketMetrics
operator|.
name|length
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|bucketMetrics
index|[
literal|0
index|]
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hello1"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|bucketMetrics
index|[
literal|1
index|]
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|bucketMetrics
index|[
literal|2
index|]
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
operator|)
assert|;
comment|//Test with no buckets
name|params
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|mstream
operator|=
operator|new
name|MetricStream
argument_list|(
name|stream
argument_list|,
name|metrics
argument_list|,
literal|"metric1"
argument_list|)
expr_stmt|;
name|getTuples
argument_list|(
name|mstream
argument_list|)
expr_stmt|;
name|bucketMetrics
operator|=
name|mstream
operator|.
name|getBucketMetrics
argument_list|()
expr_stmt|;
assert|assert
operator|(
name|bucketMetrics
operator|.
name|length
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|bucketMetrics
index|[
literal|0
index|]
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"metrics"
argument_list|)
operator|)
assert|;
name|assertMetric
argument_list|(
name|bucketMetrics
index|[
literal|0
index|]
operator|.
name|getMetrics
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|1112.0d
argument_list|)
expr_stmt|;
comment|//Test the first Metric of the first BucketMetrics
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testParallelMetricStream
specifier|private
name|void
name|testParallelMetricStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"100"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|Bucket
index|[]
name|buckets
init|=
block|{
operator|new
name|Bucket
argument_list|(
literal|"a_s"
argument_list|)
block|}
decl_stmt|;
name|Metric
index|[]
name|metrics
init|=
block|{
operator|new
name|SumMetric
argument_list|(
literal|"a_i"
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|MeanMetric
argument_list|(
literal|"a_i"
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|CountMetric
argument_list|()
block|,
operator|new
name|MinMetric
argument_list|(
literal|"a_i"
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|MaxMetric
argument_list|(
literal|"a_i"
argument_list|,
literal|false
argument_list|)
block|}
decl_stmt|;
name|Map
name|params
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_i"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|MetricStream
name|mstream
init|=
operator|new
name|MetricStream
argument_list|(
name|stream
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|,
literal|"metric1"
argument_list|,
operator|new
name|DescBucketComp
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|ParallelStream
name|pstream
init|=
operator|new
name|ParallelStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|mstream
argument_list|,
literal|2
argument_list|,
operator|new
name|AscFieldComp
argument_list|(
literal|"a_i"
argument_list|)
argument_list|)
decl_stmt|;
name|getTuples
argument_list|(
name|pstream
argument_list|)
expr_stmt|;
name|BucketMetrics
index|[]
name|bucketMetrics
init|=
name|mstream
operator|.
name|getBucketMetrics
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|bucketMetrics
operator|.
name|length
operator|==
literal|3
operator|)
assert|;
comment|//Bucket should be is descending order based on Metric 0, which is the SumMetric.
assert|assert
operator|(
name|bucketMetrics
index|[
literal|0
index|]
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|bucketMetrics
index|[
literal|1
index|]
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|bucketMetrics
index|[
literal|2
index|]
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hello1"
argument_list|)
operator|)
assert|;
name|assertMetric
argument_list|(
name|bucketMetrics
index|[
literal|0
index|]
operator|.
name|getMetrics
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|102.0d
argument_list|)
expr_stmt|;
comment|//Test the first Metric of the first BucketMetrics
name|assertMetric
argument_list|(
name|bucketMetrics
index|[
literal|0
index|]
operator|.
name|getMetrics
argument_list|()
index|[
literal|1
index|]
argument_list|,
literal|51.0d
argument_list|)
expr_stmt|;
comment|//Test the second Metric of the first BucketMetrics
name|assertMetric
argument_list|(
name|bucketMetrics
index|[
literal|0
index|]
operator|.
name|getMetrics
argument_list|()
index|[
literal|2
index|]
argument_list|,
literal|2.0d
argument_list|)
expr_stmt|;
comment|//Test the third Metric of the first BucketMetrics
name|assertMetric
argument_list|(
name|bucketMetrics
index|[
literal|0
index|]
operator|.
name|getMetrics
argument_list|()
index|[
literal|3
index|]
argument_list|,
literal|2.0d
argument_list|)
expr_stmt|;
comment|//Test the fourth Metric of the first BucketMetrics
name|assertMetric
argument_list|(
name|bucketMetrics
index|[
literal|0
index|]
operator|.
name|getMetrics
argument_list|()
index|[
literal|4
index|]
argument_list|,
literal|100.0d
argument_list|)
expr_stmt|;
comment|//Test the fifth Metric of the first BucketMetrics
name|assertMetric
argument_list|(
name|bucketMetrics
index|[
literal|1
index|]
operator|.
name|getMetrics
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|7.0d
argument_list|)
expr_stmt|;
name|assertMetric
argument_list|(
name|bucketMetrics
index|[
literal|2
index|]
operator|.
name|getMetrics
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|3.0d
argument_list|)
expr_stmt|;
name|params
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|mstream
operator|=
operator|new
name|MetricStream
argument_list|(
name|stream
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|,
literal|"metric1"
argument_list|,
operator|new
name|AscBucketComp
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getTuples
argument_list|(
name|mstream
argument_list|)
expr_stmt|;
name|bucketMetrics
operator|=
name|mstream
operator|.
name|getBucketMetrics
argument_list|()
expr_stmt|;
name|assertMetric
argument_list|(
name|bucketMetrics
index|[
literal|0
index|]
operator|.
name|getMetrics
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|3.0d
argument_list|)
expr_stmt|;
comment|//Test the first Metric of the first BucketMetrics
name|assertMetric
argument_list|(
name|bucketMetrics
index|[
literal|0
index|]
operator|.
name|getMetrics
argument_list|()
index|[
literal|1
index|]
argument_list|,
literal|1.0d
argument_list|)
expr_stmt|;
comment|//Test the second Metric of the first BucketMetrics
name|assertMetric
argument_list|(
name|bucketMetrics
index|[
literal|0
index|]
operator|.
name|getMetrics
argument_list|()
index|[
literal|2
index|]
argument_list|,
literal|3.0d
argument_list|)
expr_stmt|;
comment|//Test the third Metric of the first BucketMetrics
name|assertMetric
argument_list|(
name|bucketMetrics
index|[
literal|0
index|]
operator|.
name|getMetrics
argument_list|()
index|[
literal|3
index|]
argument_list|,
literal|1.0d
argument_list|)
expr_stmt|;
comment|//Test the fourth Metric of the first BucketMetrics
name|assertMetric
argument_list|(
name|bucketMetrics
index|[
literal|0
index|]
operator|.
name|getMetrics
argument_list|()
index|[
literal|4
index|]
argument_list|,
literal|1.0d
argument_list|)
expr_stmt|;
comment|//Test the fifth Metric of the first BucketMetrics
name|assertMetric
argument_list|(
name|bucketMetrics
index|[
literal|1
index|]
operator|.
name|getMetrics
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|7.0d
argument_list|)
expr_stmt|;
name|assertMetric
argument_list|(
name|bucketMetrics
index|[
literal|2
index|]
operator|.
name|getMetrics
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|102.0d
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1000"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|//Add a fourth record.
name|commit
argument_list|()
expr_stmt|;
comment|//Test desc comp with more buckets then priority queue can hold.
name|params
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|mstream
operator|=
operator|new
name|MetricStream
argument_list|(
name|stream
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|,
literal|"metric1"
argument_list|,
operator|new
name|DescBucketComp
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|getTuples
argument_list|(
name|mstream
argument_list|)
expr_stmt|;
name|bucketMetrics
operator|=
name|mstream
operator|.
name|getBucketMetrics
argument_list|()
expr_stmt|;
assert|assert
operator|(
name|bucketMetrics
operator|.
name|length
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|bucketMetrics
index|[
literal|0
index|]
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|bucketMetrics
index|[
literal|1
index|]
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|bucketMetrics
index|[
literal|2
index|]
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
operator|)
assert|;
comment|//Test asc comp with more buckets then priority queue can hold.
name|params
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|mstream
operator|=
operator|new
name|MetricStream
argument_list|(
name|stream
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|,
literal|"metric1"
argument_list|,
operator|new
name|AscBucketComp
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|getTuples
argument_list|(
name|mstream
argument_list|)
expr_stmt|;
name|bucketMetrics
operator|=
name|mstream
operator|.
name|getBucketMetrics
argument_list|()
expr_stmt|;
assert|assert
operator|(
name|bucketMetrics
operator|.
name|length
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|bucketMetrics
index|[
literal|0
index|]
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hello1"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|bucketMetrics
index|[
literal|1
index|]
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|bucketMetrics
index|[
literal|2
index|]
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
operator|)
assert|;
comment|//Test with no buckets
name|params
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|mstream
operator|=
operator|new
name|MetricStream
argument_list|(
name|stream
argument_list|,
name|metrics
argument_list|,
literal|"metric1"
argument_list|)
expr_stmt|;
name|getTuples
argument_list|(
name|mstream
argument_list|)
expr_stmt|;
name|bucketMetrics
operator|=
name|mstream
operator|.
name|getBucketMetrics
argument_list|()
expr_stmt|;
assert|assert
operator|(
name|bucketMetrics
operator|.
name|length
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|bucketMetrics
index|[
literal|0
index|]
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"metrics"
argument_list|)
operator|)
assert|;
name|assertMetric
argument_list|(
name|bucketMetrics
index|[
literal|0
index|]
operator|.
name|getMetrics
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|1112.0d
argument_list|)
expr_stmt|;
comment|//Test the first Metric of the first BucketMetrics
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testGroupByStream
specifier|private
name|void
name|testGroupByStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
comment|//Test CloudSolrStream and SumStream over an int field
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|Map
name|paramsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
decl_stmt|;
name|GroupByStream
name|gstream
init|=
operator|new
name|GroupByStream
argument_list|(
name|stream
argument_list|,
operator|new
name|AscFieldComp
argument_list|(
literal|"a_s"
argument_list|)
argument_list|,
operator|new
name|DescFieldComp
argument_list|(
literal|"a_i"
argument_list|)
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|gstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertGroupOrder
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testFilterStream
specifier|private
name|void
name|testFilterStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
comment|//Test CloudSolrStream and SumStream over an int field
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|Map
name|paramsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|streamA
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
decl_stmt|;
name|Map
name|paramsB
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 2)"
argument_list|,
literal|"fl"
argument_list|,
literal|"a_s"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|streamB
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsB
argument_list|)
decl_stmt|;
name|FilterStream
name|fstream
init|=
operator|new
name|FilterStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
operator|new
name|AscFieldComp
argument_list|(
literal|"a_s"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|fstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testParallelStream
specifier|private
name|void
name|testParallelStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|Map
name|paramsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_s"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|streamA
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
decl_stmt|;
name|Map
name|paramsB
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 2)"
argument_list|,
literal|"fl"
argument_list|,
literal|"a_s"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_s"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|streamB
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsB
argument_list|)
decl_stmt|;
name|FilterStream
name|fstream
init|=
operator|new
name|FilterStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
operator|new
name|AscFieldComp
argument_list|(
literal|"a_s"
argument_list|)
argument_list|)
decl_stmt|;
name|ParallelStream
name|pstream
init|=
operator|new
name|ParallelStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|fstream
argument_list|,
literal|2
argument_list|,
operator|new
name|AscFieldComp
argument_list|(
literal|"a_s"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testParallelStreamSingleWorker
specifier|private
name|void
name|testParallelStreamSingleWorker
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|Map
name|paramsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_s"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|streamA
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
decl_stmt|;
name|Map
name|paramsB
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 2)"
argument_list|,
literal|"fl"
argument_list|,
literal|"a_s"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_s"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|streamB
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsB
argument_list|)
decl_stmt|;
name|FilterStream
name|fstream
init|=
operator|new
name|FilterStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
operator|new
name|AscFieldComp
argument_list|(
literal|"a_s"
argument_list|)
argument_list|)
decl_stmt|;
name|ParallelStream
name|pstream
init|=
operator|new
name|ParallelStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|fstream
argument_list|,
literal|1
argument_list|,
operator|new
name|AscFieldComp
argument_list|(
literal|"a_s"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testParallelHashJoinStream
specifier|private
name|void
name|testParallelHashJoinStream
parameter_list|()
block|{    }
DECL|method|testParallelGroupByStream
specifier|private
name|void
name|testParallelGroupByStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|Map
name|params
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_s"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|GroupByStream
name|gstream
init|=
operator|new
name|GroupByStream
argument_list|(
name|stream
argument_list|,
operator|new
name|AscFieldComp
argument_list|(
literal|"a_s"
argument_list|)
argument_list|,
operator|new
name|AscFieldComp
argument_list|(
literal|"a_i"
argument_list|)
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|ParallelStream
name|pstream
init|=
operator|new
name|ParallelStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|gstream
argument_list|,
literal|2
argument_list|,
operator|new
name|AscFieldComp
argument_list|(
literal|"a_s"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertGroupOrder
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testTuple
specifier|private
name|void
name|testTuple
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5.1"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"a"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"b"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"1"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"2"
argument_list|,
literal|"f_multi"
argument_list|,
literal|"1.2"
argument_list|,
literal|"f_multi"
argument_list|,
literal|"1.3"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|Map
name|params
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f,s_multi,i_multi,f_multi"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_s"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|s
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
operator|)
assert|;
name|long
name|l
init|=
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|l
operator|==
literal|0
operator|)
assert|;
name|double
name|d
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|d
operator|==
literal|5.1
operator|)
assert|;
name|List
argument_list|<
name|String
argument_list|>
name|stringList
init|=
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|stringList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|stringList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
name|List
argument_list|<
name|Long
argument_list|>
name|longList
init|=
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|longList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|longValue
argument_list|()
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|longList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|longValue
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|List
argument_list|<
name|Double
argument_list|>
name|doubleList
init|=
name|tuple
operator|.
name|getDoubles
argument_list|(
literal|"f_multi"
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|doubleList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1.2
operator|)
assert|;
assert|assert
operator|(
name|doubleList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1.3
operator|)
assert|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testMergeStream
specifier|private
name|void
name|testMergeStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
comment|//Test ascending
name|Map
name|paramsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(4 1)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|streamA
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
decl_stmt|;
name|Map
name|paramsB
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 2 3)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|streamB
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsB
argument_list|)
decl_stmt|;
name|MergeStream
name|mstream
init|=
operator|new
name|MergeStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
operator|new
name|AscFieldComp
argument_list|(
literal|"a_i"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|mstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|//Test descending
name|paramsA
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(4 1)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i desc"
argument_list|)
expr_stmt|;
name|streamA
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
expr_stmt|;
name|paramsB
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 2 3)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i desc"
argument_list|)
expr_stmt|;
name|streamB
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsB
argument_list|)
expr_stmt|;
name|mstream
operator|=
operator|new
name|MergeStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
operator|new
name|DescFieldComp
argument_list|(
literal|"a_i"
argument_list|)
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|mstream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//Test compound sort
name|paramsA
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(2 4 1)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f asc,a_i asc"
argument_list|)
expr_stmt|;
name|streamA
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
expr_stmt|;
name|paramsB
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 3)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f asc,a_i asc"
argument_list|)
expr_stmt|;
name|streamB
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsB
argument_list|)
expr_stmt|;
name|mstream
operator|=
operator|new
name|MergeStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
operator|new
name|MultiComp
argument_list|(
operator|new
name|AscFieldComp
argument_list|(
literal|"a_f"
argument_list|)
argument_list|,
operator|new
name|AscFieldComp
argument_list|(
literal|"a_i"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|mstream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|paramsA
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(2 4 1)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f asc,a_i desc"
argument_list|)
expr_stmt|;
name|streamA
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsA
argument_list|)
expr_stmt|;
name|paramsB
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 3)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f asc,a_i desc"
argument_list|)
expr_stmt|;
name|streamB
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|paramsB
argument_list|)
expr_stmt|;
name|mstream
operator|=
operator|new
name|MergeStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
operator|new
name|MultiComp
argument_list|(
operator|new
name|AscFieldComp
argument_list|(
literal|"a_f"
argument_list|)
argument_list|,
operator|new
name|DescFieldComp
argument_list|(
literal|"a_i"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|mstream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|streamTests
specifier|public
name|void
name|streamTests
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|handle
operator|.
name|clear
argument_list|()
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"timestamp"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|waitForThingsToLevelOut
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|Map
name|params
init|=
literal|null
decl_stmt|;
comment|//Basic CloudSolrStream Test with Ascending Sort
name|params
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i desc"
argument_list|)
expr_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|stream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//With Descending Sort
name|params
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|//Test compound sort
name|params
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f asc,a_i desc"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|params
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f asc,a_i asc"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|testTuple
argument_list|()
expr_stmt|;
name|testUniqueStream
argument_list|()
expr_stmt|;
name|testMetricStream
argument_list|()
expr_stmt|;
name|testRollupStream
argument_list|()
expr_stmt|;
name|testRankStream
argument_list|()
expr_stmt|;
name|testFilterStream
argument_list|()
expr_stmt|;
name|testGroupByStream
argument_list|()
expr_stmt|;
name|testHashJoinStream
argument_list|()
expr_stmt|;
name|testMergeJoinStream
argument_list|()
expr_stmt|;
name|testMergeStream
argument_list|()
expr_stmt|;
name|testParallelStreamSingleWorker
argument_list|()
expr_stmt|;
name|testParallelStream
argument_list|()
expr_stmt|;
name|testParallelRollupStream
argument_list|()
expr_stmt|;
name|testParallelMetricStream
argument_list|()
expr_stmt|;
name|testParallelGroupByStream
argument_list|()
expr_stmt|;
name|testParallelHashJoinStream
argument_list|()
expr_stmt|;
name|testParallelMergeJoinStream
argument_list|()
expr_stmt|;
block|}
DECL|method|mapParams
specifier|protected
name|Map
name|mapParams
parameter_list|(
name|String
modifier|...
name|vals
parameter_list|)
block|{
name|Map
name|params
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|String
name|k
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|val
range|:
name|vals
control|)
block|{
if|if
condition|(
name|k
operator|==
literal|null
condition|)
block|{
name|k
operator|=
name|val
expr_stmt|;
block|}
else|else
block|{
name|params
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|k
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|params
return|;
block|}
DECL|method|getTuples
specifier|protected
name|List
argument_list|<
name|Tuple
argument_list|>
name|getTuples
parameter_list|(
name|TupleStream
name|tupleStream
parameter_list|)
throws|throws
name|IOException
block|{
name|tupleStream
operator|.
name|open
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Tuple
name|t
init|=
name|tupleStream
operator|.
name|read
argument_list|()
init|;
operator|!
name|t
operator|.
name|EOF
condition|;
name|t
operator|=
name|tupleStream
operator|.
name|read
argument_list|()
control|)
block|{
name|tuples
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|tupleStream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|tuples
return|;
block|}
DECL|method|assertOrder
specifier|protected
name|boolean
name|assertOrder
parameter_list|(
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
parameter_list|,
name|int
modifier|...
name|ids
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|val
range|:
name|ids
control|)
block|{
name|Tuple
name|t
init|=
name|tuples
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Long
name|tip
init|=
operator|(
name|Long
operator|)
name|t
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tip
operator|.
name|intValue
argument_list|()
operator|!=
name|val
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Found value:"
operator|+
name|tip
operator|.
name|intValue
argument_list|()
operator|+
literal|" expecting:"
operator|+
name|val
argument_list|)
throw|;
block|}
operator|++
name|i
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertGroupOrder
specifier|protected
name|boolean
name|assertGroupOrder
parameter_list|(
name|Tuple
name|tuple
parameter_list|,
name|int
modifier|...
name|ids
parameter_list|)
throws|throws
name|Exception
block|{
name|List
name|group
init|=
operator|(
name|List
operator|)
name|tuple
operator|.
name|get
argument_list|(
literal|"tuples"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|val
range|:
name|ids
control|)
block|{
name|Map
name|t
init|=
operator|(
name|Map
operator|)
name|group
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Long
name|tip
init|=
operator|(
name|Long
operator|)
name|t
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tip
operator|.
name|intValue
argument_list|()
operator|!=
name|val
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Found value:"
operator|+
name|tip
operator|.
name|intValue
argument_list|()
operator|+
literal|" expecting:"
operator|+
name|val
argument_list|)
throw|;
block|}
operator|++
name|i
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertLong
specifier|public
name|boolean
name|assertLong
parameter_list|(
name|Tuple
name|tuple
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|long
name|l
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|lv
init|=
operator|(
name|long
operator|)
name|tuple
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|lv
operator|!=
name|l
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Longs not equal:"
operator|+
name|l
operator|+
literal|" : "
operator|+
name|lv
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertMetric
specifier|public
name|boolean
name|assertMetric
parameter_list|(
name|Metric
name|metric
parameter_list|,
name|double
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|Double
name|d
init|=
name|metric
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|.
name|doubleValue
argument_list|()
operator|!=
name|value
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unexpected Metric "
operator|+
name|d
operator|+
literal|"!="
operator|+
name|value
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|indexr
specifier|protected
name|void
name|indexr
parameter_list|(
name|Object
modifier|...
name|fields
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|doc
init|=
name|getDoc
argument_list|(
name|fields
argument_list|)
decl_stmt|;
name|indexDoc
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
