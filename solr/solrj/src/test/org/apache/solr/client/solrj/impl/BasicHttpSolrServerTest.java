begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.impl
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrJettyTestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
operator|.
name|METHOD
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|ExternalPaths
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|BasicHttpSolrServerTest
specifier|public
class|class
name|BasicHttpSolrServerTest
extends|extends
name|SolrJettyTestBase
block|{
DECL|class|RedirectServlet
specifier|public
specifier|static
class|class
name|RedirectServlet
extends|extends
name|HttpServlet
block|{
annotation|@
name|Override
DECL|method|doGet
specifier|protected
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|resp
operator|.
name|sendRedirect
argument_list|(
literal|"/solr/select?"
operator|+
name|req
operator|.
name|getQueryString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SlowServlet
specifier|public
specifier|static
class|class
name|SlowServlet
extends|extends
name|HttpServlet
block|{
annotation|@
name|Override
DECL|method|doGet
specifier|protected
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
block|}
block|}
DECL|class|DebugServlet
specifier|public
specifier|static
class|class
name|DebugServlet
extends|extends
name|HttpServlet
block|{
DECL|method|clear
specifier|public
specifier|static
name|void
name|clear
parameter_list|()
block|{
name|lastMethod
operator|=
literal|null
expr_stmt|;
name|headers
operator|=
literal|null
expr_stmt|;
name|parameters
operator|=
literal|null
expr_stmt|;
block|}
DECL|field|lastMethod
specifier|public
specifier|static
name|String
name|lastMethod
init|=
literal|null
decl_stmt|;
DECL|field|headers
specifier|public
specifier|static
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
literal|null
decl_stmt|;
DECL|field|parameters
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|parameters
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|doGet
specifier|protected
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|lastMethod
operator|=
literal|"get"
expr_stmt|;
name|recordRequest
argument_list|(
name|req
argument_list|,
name|resp
argument_list|)
expr_stmt|;
block|}
DECL|method|setHeaders
specifier|private
name|void
name|setHeaders
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
name|Enumeration
argument_list|<
name|String
argument_list|>
name|headerNames
init|=
name|req
operator|.
name|getHeaderNames
argument_list|()
decl_stmt|;
name|headers
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
while|while
condition|(
name|headerNames
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
specifier|final
name|String
name|name
init|=
name|headerNames
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|req
operator|.
name|getHeader
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setParameters
specifier|private
name|void
name|setParameters
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
name|parameters
operator|=
name|req
operator|.
name|getParameterMap
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doPost
specifier|protected
name|void
name|doPost
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|lastMethod
operator|=
literal|"post"
expr_stmt|;
name|recordRequest
argument_list|(
name|req
argument_list|,
name|resp
argument_list|)
expr_stmt|;
block|}
DECL|method|recordRequest
specifier|private
name|void
name|recordRequest
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
block|{
name|setHeaders
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|setParameters
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|BeforeClass
DECL|method|beforeTest
specifier|public
specifier|static
name|void
name|beforeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|createJetty
argument_list|(
name|ExternalPaths
operator|.
name|EXAMPLE_HOME
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|jetty
operator|.
name|getDispatchFilter
argument_list|()
operator|.
name|getServletHandler
argument_list|()
operator|.
name|addServletWithMapping
argument_list|(
name|RedirectServlet
operator|.
name|class
argument_list|,
literal|"/redirect/*"
argument_list|)
expr_stmt|;
name|jetty
operator|.
name|getDispatchFilter
argument_list|()
operator|.
name|getServletHandler
argument_list|()
operator|.
name|addServletWithMapping
argument_list|(
name|SlowServlet
operator|.
name|class
argument_list|,
literal|"/slow/*"
argument_list|)
expr_stmt|;
name|jetty
operator|.
name|getDispatchFilter
argument_list|()
operator|.
name|getServletHandler
argument_list|()
operator|.
name|addServletWithMapping
argument_list|(
name|DebugServlet
operator|.
name|class
argument_list|,
literal|"/debug/*"
argument_list|)
expr_stmt|;
block|}
comment|// what is this actually testing? this test WILL randomly fail.
comment|// not a good unit test!
annotation|@
name|Test
DECL|method|testConnectionRefused
specifier|public
name|void
name|testConnectionRefused
parameter_list|()
throws|throws
name|MalformedURLException
block|{
name|int
name|unusedPort
init|=
name|findUnusedPort
argument_list|()
decl_stmt|;
comment|// XXX even if fwe found an unused port
comment|// it might not be unused anymore
name|HttpSolrServer
name|server
init|=
operator|new
name|HttpSolrServer
argument_list|(
literal|"http://127.0.0.1:"
operator|+
name|unusedPort
operator|+
literal|"/solr"
argument_list|)
decl_stmt|;
name|server
operator|.
name|setConnectionTimeout
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|SolrQuery
name|q
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
try|try
block|{
name|QueryResponse
name|response
init|=
name|server
operator|.
name|query
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
name|assumeFalse
argument_list|(
literal|"blackholed!"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"IOException occured when talking to server"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"refused"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTimeout
specifier|public
name|void
name|testTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|HttpSolrServer
name|server
init|=
operator|new
name|HttpSolrServer
argument_list|(
literal|"http://127.0.0.1:"
operator|+
name|jetty
operator|.
name|getLocalPort
argument_list|()
operator|+
literal|"/solr/slow/foo"
argument_list|)
decl_stmt|;
name|SolrQuery
name|q
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|server
operator|.
name|setSoTimeout
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
try|try
block|{
name|QueryResponse
name|response
init|=
name|server
operator|.
name|query
argument_list|(
name|q
argument_list|,
name|METHOD
operator|.
name|GET
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"No exception thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Timeout"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQuery
specifier|public
name|void
name|testQuery
parameter_list|()
block|{
name|DebugServlet
operator|.
name|clear
argument_list|()
expr_stmt|;
name|HttpSolrServer
name|server
init|=
operator|new
name|HttpSolrServer
argument_list|(
literal|"http://127.0.0.1:"
operator|+
name|jetty
operator|.
name|getLocalPort
argument_list|()
operator|+
literal|"/solr/debug/foo"
argument_list|)
decl_stmt|;
name|SolrQuery
name|q
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setParam
argument_list|(
literal|"a"
argument_list|,
literal|"\u1234"
argument_list|)
expr_stmt|;
try|try
block|{
name|server
operator|.
name|query
argument_list|(
name|q
argument_list|,
name|METHOD
operator|.
name|GET
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{}
comment|//default method
name|assertEquals
argument_list|(
literal|"get"
argument_list|,
name|DebugServlet
operator|.
name|lastMethod
argument_list|)
expr_stmt|;
comment|//agent
name|assertEquals
argument_list|(
literal|"Solr["
operator|+
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"] 1.0"
argument_list|,
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"User-Agent"
argument_list|)
argument_list|)
expr_stmt|;
comment|//default wt
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"javabin"
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|//default version
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|VERSION
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getParser
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|VERSION
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|//agent
name|assertEquals
argument_list|(
literal|"Solr["
operator|+
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"] 1.0"
argument_list|,
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"User-Agent"
argument_list|)
argument_list|)
expr_stmt|;
comment|//keepalive
name|assertEquals
argument_list|(
literal|"keep-alive"
argument_list|,
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"Connection"
argument_list|)
argument_list|)
expr_stmt|;
comment|//content-type
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"Content-Type"
argument_list|)
argument_list|)
expr_stmt|;
comment|//param encoding
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\u1234"
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|//POST
name|DebugServlet
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|server
operator|.
name|query
argument_list|(
name|q
argument_list|,
name|METHOD
operator|.
name|POST
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{}
name|assertEquals
argument_list|(
literal|"post"
argument_list|,
name|DebugServlet
operator|.
name|lastMethod
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Solr["
operator|+
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"] 1.0"
argument_list|,
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"User-Agent"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"javabin"
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|VERSION
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getParser
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|VERSION
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\u1234"
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Solr["
operator|+
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"] 1.0"
argument_list|,
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"User-Agent"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"keep-alive"
argument_list|,
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"Connection"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"application/x-www-form-urlencoded; charset=UTF-8"
argument_list|,
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"Content-Type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UTF-8"
argument_list|,
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"Content-Charset"
argument_list|)
argument_list|)
expr_stmt|;
comment|//XML/GET
name|server
operator|.
name|setParser
argument_list|(
operator|new
name|XMLResponseParser
argument_list|()
argument_list|)
expr_stmt|;
name|DebugServlet
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|server
operator|.
name|query
argument_list|(
name|q
argument_list|,
name|METHOD
operator|.
name|GET
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{}
name|assertEquals
argument_list|(
literal|"get"
argument_list|,
name|DebugServlet
operator|.
name|lastMethod
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Solr["
operator|+
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"] 1.0"
argument_list|,
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"User-Agent"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xml"
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|VERSION
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getParser
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|VERSION
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\u1234"
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Solr["
operator|+
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"] 1.0"
argument_list|,
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"User-Agent"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"keep-alive"
argument_list|,
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"Connection"
argument_list|)
argument_list|)
expr_stmt|;
comment|//XML/POST
name|server
operator|.
name|setParser
argument_list|(
operator|new
name|XMLResponseParser
argument_list|()
argument_list|)
expr_stmt|;
name|DebugServlet
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|server
operator|.
name|query
argument_list|(
name|q
argument_list|,
name|METHOD
operator|.
name|POST
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{}
name|assertEquals
argument_list|(
literal|"post"
argument_list|,
name|DebugServlet
operator|.
name|lastMethod
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Solr["
operator|+
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"] 1.0"
argument_list|,
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"User-Agent"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xml"
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|VERSION
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getParser
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|VERSION
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\u1234"
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Solr["
operator|+
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"] 1.0"
argument_list|,
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"User-Agent"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"keep-alive"
argument_list|,
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"Connection"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"application/x-www-form-urlencoded; charset=UTF-8"
argument_list|,
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"Content-Type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UTF-8"
argument_list|,
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"Content-Charset"
argument_list|)
argument_list|)
expr_stmt|;
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelete
specifier|public
name|void
name|testDelete
parameter_list|()
block|{
name|DebugServlet
operator|.
name|clear
argument_list|()
expr_stmt|;
name|HttpSolrServer
name|server
init|=
operator|new
name|HttpSolrServer
argument_list|(
literal|"http://127.0.0.1:"
operator|+
name|jetty
operator|.
name|getLocalPort
argument_list|()
operator|+
literal|"/solr/debug/foo"
argument_list|)
decl_stmt|;
try|try
block|{
name|server
operator|.
name|deleteById
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{}
comment|//default method
name|assertEquals
argument_list|(
literal|"post"
argument_list|,
name|DebugServlet
operator|.
name|lastMethod
argument_list|)
expr_stmt|;
comment|//agent
name|assertEquals
argument_list|(
literal|"Solr["
operator|+
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"] 1.0"
argument_list|,
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"User-Agent"
argument_list|)
argument_list|)
expr_stmt|;
comment|//default wt
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"javabin"
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|//default version
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|VERSION
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getParser
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|VERSION
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|//agent
name|assertEquals
argument_list|(
literal|"Solr["
operator|+
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"] 1.0"
argument_list|,
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"User-Agent"
argument_list|)
argument_list|)
expr_stmt|;
comment|//keepalive
name|assertEquals
argument_list|(
literal|"keep-alive"
argument_list|,
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"Connection"
argument_list|)
argument_list|)
expr_stmt|;
comment|//XML
name|server
operator|.
name|setParser
argument_list|(
operator|new
name|XMLResponseParser
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|server
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{}
name|assertEquals
argument_list|(
literal|"post"
argument_list|,
name|DebugServlet
operator|.
name|lastMethod
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Solr["
operator|+
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"] 1.0"
argument_list|,
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"User-Agent"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xml"
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|VERSION
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getParser
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|VERSION
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Solr["
operator|+
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"] 1.0"
argument_list|,
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"User-Agent"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"keep-alive"
argument_list|,
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"Connection"
argument_list|)
argument_list|)
expr_stmt|;
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdate
specifier|public
name|void
name|testUpdate
parameter_list|()
block|{
name|DebugServlet
operator|.
name|clear
argument_list|()
expr_stmt|;
name|HttpSolrServer
name|server
init|=
operator|new
name|HttpSolrServer
argument_list|(
literal|"http://127.0.0.1:"
operator|+
name|jetty
operator|.
name|getLocalPort
argument_list|()
operator|+
literal|"/solr/debug/foo"
argument_list|)
decl_stmt|;
name|UpdateRequest
name|req
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|add
argument_list|(
operator|new
name|SolrInputDocument
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|setParam
argument_list|(
literal|"a"
argument_list|,
literal|"\u1234"
argument_list|)
expr_stmt|;
try|try
block|{
name|server
operator|.
name|request
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{}
comment|//default method
name|assertEquals
argument_list|(
literal|"post"
argument_list|,
name|DebugServlet
operator|.
name|lastMethod
argument_list|)
expr_stmt|;
comment|//agent
name|assertEquals
argument_list|(
literal|"Solr["
operator|+
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"] 1.0"
argument_list|,
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"User-Agent"
argument_list|)
argument_list|)
expr_stmt|;
comment|//default wt
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"javabin"
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|//default version
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|VERSION
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getParser
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|VERSION
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|//content type
name|assertEquals
argument_list|(
literal|"application/xml; charset=UTF-8"
argument_list|,
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"Content-Type"
argument_list|)
argument_list|)
expr_stmt|;
comment|//parameter encoding
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\u1234"
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|//XML response
name|server
operator|.
name|setParser
argument_list|(
operator|new
name|XMLResponseParser
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|server
operator|.
name|request
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{}
name|assertEquals
argument_list|(
literal|"post"
argument_list|,
name|DebugServlet
operator|.
name|lastMethod
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Solr["
operator|+
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"] 1.0"
argument_list|,
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"User-Agent"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xml"
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|VERSION
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getParser
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|VERSION
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"application/xml; charset=UTF-8"
argument_list|,
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"Content-Type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\u1234"
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|//javabin request
name|server
operator|.
name|setParser
argument_list|(
operator|new
name|BinaryResponseParser
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|setRequestWriter
argument_list|(
operator|new
name|BinaryRequestWriter
argument_list|()
argument_list|)
expr_stmt|;
name|DebugServlet
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|server
operator|.
name|request
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{}
name|assertEquals
argument_list|(
literal|"post"
argument_list|,
name|DebugServlet
operator|.
name|lastMethod
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Solr["
operator|+
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"] 1.0"
argument_list|,
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"User-Agent"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"javabin"
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|VERSION
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|server
operator|.
name|getParser
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|VERSION
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"application/javabin"
argument_list|,
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"Content-Type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\u1234"
argument_list|,
name|DebugServlet
operator|.
name|parameters
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRedirect
specifier|public
name|void
name|testRedirect
parameter_list|()
throws|throws
name|Exception
block|{
name|HttpSolrServer
name|server
init|=
operator|new
name|HttpSolrServer
argument_list|(
literal|"http://127.0.0.1:"
operator|+
name|jetty
operator|.
name|getLocalPort
argument_list|()
operator|+
literal|"/solr/redirect/foo"
argument_list|)
decl_stmt|;
name|SolrQuery
name|q
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
comment|// default = false
try|try
block|{
name|QueryResponse
name|response
init|=
name|server
operator|.
name|query
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"redirect"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|setFollowRedirects
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|QueryResponse
name|response
init|=
name|server
operator|.
name|query
argument_list|(
name|q
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Exception was thrown:"
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCompression
specifier|public
name|void
name|testCompression
parameter_list|()
throws|throws
name|Exception
block|{
name|HttpSolrServer
name|server
init|=
operator|new
name|HttpSolrServer
argument_list|(
literal|"http://127.0.0.1:"
operator|+
name|jetty
operator|.
name|getLocalPort
argument_list|()
operator|+
literal|"/solr/debug/foo"
argument_list|)
decl_stmt|;
name|SolrQuery
name|q
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
comment|// verify request header gets set
name|DebugServlet
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|server
operator|.
name|query
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{}
name|assertNull
argument_list|(
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"Accept-Encoding"
argument_list|)
argument_list|)
expr_stmt|;
name|server
operator|.
name|setAllowCompression
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|server
operator|.
name|query
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{}
name|assertNotNull
argument_list|(
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"Accept-Encoding"
argument_list|)
argument_list|)
expr_stmt|;
name|server
operator|.
name|setAllowCompression
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|server
operator|.
name|query
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{}
name|assertNull
argument_list|(
name|DebugServlet
operator|.
name|headers
operator|.
name|get
argument_list|(
literal|"Accept-Encoding"
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify server compresses output
name|HttpGet
name|get
init|=
operator|new
name|HttpGet
argument_list|(
literal|"http://127.0.0.1:"
operator|+
name|jetty
operator|.
name|getLocalPort
argument_list|()
operator|+
literal|"/solr/select?q=foo&wt=xml"
argument_list|)
decl_stmt|;
name|get
operator|.
name|setHeader
argument_list|(
literal|"Accept-Encoding"
argument_list|,
literal|"gzip"
argument_list|)
expr_stmt|;
name|HttpClient
name|client
init|=
name|HttpClientUtil
operator|.
name|createClient
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|HttpEntity
name|entity
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HttpResponse
name|response
init|=
name|client
operator|.
name|execute
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|entity
operator|=
name|response
operator|.
name|getEntity
argument_list|()
expr_stmt|;
name|Header
name|ceheader
init|=
name|entity
operator|.
name|getContentEncoding
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"gzip"
argument_list|,
name|ceheader
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|entity
operator|.
name|getContent
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|client
operator|.
name|getConnectionManager
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// verify compressed response can be handled
name|server
operator|=
operator|new
name|HttpSolrServer
argument_list|(
literal|"http://127.0.0.1:"
operator|+
name|jetty
operator|.
name|getLocalPort
argument_list|()
operator|+
literal|"/solr"
argument_list|)
expr_stmt|;
name|server
operator|.
name|setAllowCompression
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|q
operator|=
operator|new
name|SolrQuery
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|QueryResponse
name|response
init|=
name|server
operator|.
name|query
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetParametersExternalClient
specifier|public
name|void
name|testSetParametersExternalClient
parameter_list|()
block|{
name|HttpClient
name|client
init|=
name|HttpClientUtil
operator|.
name|createClient
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|HttpSolrServer
name|server
init|=
operator|new
name|HttpSolrServer
argument_list|(
literal|"http://127.0.0.1/"
argument_list|,
name|client
argument_list|)
decl_stmt|;
try|try
block|{
name|server
operator|.
name|setMaxTotalConnections
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Operation should not succeed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{}
try|try
block|{
name|server
operator|.
name|setDefaultMaxConnectionsPerHost
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Operation should not succeed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{}
name|client
operator|.
name|getConnectionManager
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetRawStream
specifier|public
name|void
name|testGetRawStream
parameter_list|()
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|HttpClient
name|client
init|=
name|HttpClientUtil
operator|.
name|createClient
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|HttpSolrServer
name|server
init|=
operator|new
name|HttpSolrServer
argument_list|(
literal|"http://127.0.0.1:"
operator|+
name|jetty
operator|.
name|getLocalPort
argument_list|()
operator|+
literal|"/solr"
argument_list|,
name|client
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|QueryRequest
name|req
init|=
operator|new
name|QueryRequest
argument_list|()
decl_stmt|;
name|NamedList
name|response
init|=
name|server
operator|.
name|request
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|InputStream
name|stream
init|=
operator|(
name|InputStream
operator|)
name|response
operator|.
name|get
argument_list|(
literal|"stream"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|client
operator|.
name|getConnectionManager
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|findUnusedPort
specifier|private
name|int
name|findUnusedPort
parameter_list|()
block|{
for|for
control|(
name|int
name|port
init|=
literal|0
init|;
name|port
operator|<
literal|65535
condition|;
name|port
operator|++
control|)
block|{
name|Socket
name|s
init|=
operator|new
name|Socket
argument_list|()
decl_stmt|;
try|try
block|{
name|s
operator|.
name|bind
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|int
name|availablePort
init|=
name|s
operator|.
name|getLocalPort
argument_list|()
decl_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|availablePort
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not find unused TCP port."
argument_list|)
throw|;
block|}
block|}
end_class
end_unit
