begin_unit
begin_package
DECL|package|org.apache.solr.client.solrj.impl
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|CloudSolrClientMultiConstructorTest
specifier|public
class|class
name|CloudSolrClientMultiConstructorTest
extends|extends
name|LuceneTestCase
block|{
comment|/*    * NOTE: If you only include one String argument, it will NOT use the    * constructor with the variable argument list, which is the one that    * we are testing here.    */
DECL|field|hosts
name|Collection
argument_list|<
name|String
argument_list|>
name|hosts
decl_stmt|;
annotation|@
name|Test
DECL|method|testWithChroot
specifier|public
name|void
name|testWithChroot
parameter_list|()
block|{
name|boolean
name|setOrList
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|int
name|numOfZKServers
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|boolean
name|withChroot
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
specifier|final
name|String
name|chroot
init|=
literal|"/mychroot"
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|CloudSolrClient
name|client
decl_stmt|;
if|if
condition|(
name|setOrList
condition|)
block|{
comment|/*         A LinkedHashSet is required here for testing, or we can't guarantee         the order of entries in the final string.        */
name|hosts
operator|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|hosts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfZKServers
condition|;
name|i
operator|++
control|)
block|{
name|String
name|ZKString
init|=
literal|"host"
operator|+
name|i
operator|+
literal|":2181"
decl_stmt|;
name|hosts
operator|.
name|add
argument_list|(
name|ZKString
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ZKString
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|numOfZKServers
operator|-
literal|1
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|withChroot
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|chroot
argument_list|)
expr_stmt|;
name|client
operator|=
operator|new
name|CloudSolrClient
argument_list|(
name|hosts
argument_list|,
literal|"/mychroot"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|client
operator|=
operator|new
name|CloudSolrClient
argument_list|(
name|hosts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|client
operator|.
name|getZkHost
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testBadChroot
specifier|public
name|void
name|testBadChroot
parameter_list|()
block|{
name|hosts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|hosts
operator|.
name|add
argument_list|(
literal|"host1:2181"
argument_list|)
expr_stmt|;
operator|new
name|CloudSolrClient
argument_list|(
name|hosts
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
