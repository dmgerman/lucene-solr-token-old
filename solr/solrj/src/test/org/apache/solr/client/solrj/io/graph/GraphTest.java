begin_unit
begin_package
DECL|package|org.apache.solr.client.solrj.io.graph
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|graph
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|SolrClientCache
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamingTest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|TupleStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractDistribZkTestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|SolrCloudTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/**  *  All base tests will be done with CloudSolrStream. Under the covers CloudSolrStream uses SolrStream so  *  SolrStream will get fully exercised through these tests.  *  **/
end_comment
begin_class
annotation|@
name|LuceneTestCase
operator|.
name|Slow
annotation|@
name|LuceneTestCase
operator|.
name|SuppressCodecs
argument_list|(
block|{
literal|"Lucene3x"
block|,
literal|"Lucene40"
block|,
literal|"Lucene41"
block|,
literal|"Lucene42"
block|,
literal|"Lucene45"
block|}
argument_list|)
DECL|class|GraphTest
specifier|public
class|class
name|GraphTest
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|COLLECTION
specifier|private
specifier|static
specifier|final
name|String
name|COLLECTION
init|=
literal|"collection1"
decl_stmt|;
DECL|field|id
specifier|private
specifier|static
specifier|final
name|String
name|id
init|=
literal|"id"
decl_stmt|;
DECL|field|TIMEOUT
specifier|private
specifier|static
specifier|final
name|int
name|TIMEOUT
init|=
literal|30
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupCluster
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|configureCluster
argument_list|(
literal|2
argument_list|)
operator|.
name|addConfig
argument_list|(
literal|"conf"
argument_list|,
name|getFile
argument_list|(
literal|"solrj"
argument_list|)
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"solr"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"configsets"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"streaming"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"conf"
argument_list|)
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|COLLECTION
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|COLLECTION
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|cleanIndex
specifier|public
name|void
name|cleanIndex
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTION
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testShortestPathStream
specifier|public
name|void
name|testShortestPathStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"from_s"
argument_list|,
literal|"jim"
argument_list|,
literal|"to_s"
argument_list|,
literal|"mike"
argument_list|,
literal|"predicate_s"
argument_list|,
literal|"knows"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"from_s"
argument_list|,
literal|"jim"
argument_list|,
literal|"to_s"
argument_list|,
literal|"dave"
argument_list|,
literal|"predicate_s"
argument_list|,
literal|"knows"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"from_s"
argument_list|,
literal|"jim"
argument_list|,
literal|"to_s"
argument_list|,
literal|"stan"
argument_list|,
literal|"predicate_s"
argument_list|,
literal|"knows"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"from_s"
argument_list|,
literal|"dave"
argument_list|,
literal|"to_s"
argument_list|,
literal|"stan"
argument_list|,
literal|"predicate_s"
argument_list|,
literal|"knows"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"from_s"
argument_list|,
literal|"dave"
argument_list|,
literal|"to_s"
argument_list|,
literal|"bill"
argument_list|,
literal|"predicate_s"
argument_list|,
literal|"knows"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"from_s"
argument_list|,
literal|"dave"
argument_list|,
literal|"to_s"
argument_list|,
literal|"mike"
argument_list|,
literal|"predicate_s"
argument_list|,
literal|"knows"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"20"
argument_list|,
literal|"from_s"
argument_list|,
literal|"dave"
argument_list|,
literal|"to_s"
argument_list|,
literal|"alex"
argument_list|,
literal|"predicate_s"
argument_list|,
literal|"knows"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"21"
argument_list|,
literal|"from_s"
argument_list|,
literal|"alex"
argument_list|,
literal|"to_s"
argument_list|,
literal|"steve"
argument_list|,
literal|"predicate_s"
argument_list|,
literal|"knows"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"from_s"
argument_list|,
literal|"stan"
argument_list|,
literal|"to_s"
argument_list|,
literal|"alice"
argument_list|,
literal|"predicate_s"
argument_list|,
literal|"knows"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"from_s"
argument_list|,
literal|"stan"
argument_list|,
literal|"to_s"
argument_list|,
literal|"mary"
argument_list|,
literal|"predicate_s"
argument_list|,
literal|"knows"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"from_s"
argument_list|,
literal|"stan"
argument_list|,
literal|"to_s"
argument_list|,
literal|"dave"
argument_list|,
literal|"predicate_s"
argument_list|,
literal|"knows"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"10"
argument_list|,
literal|"from_s"
argument_list|,
literal|"mary"
argument_list|,
literal|"to_s"
argument_list|,
literal|"mike"
argument_list|,
literal|"predicate_s"
argument_list|,
literal|"knows"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"11"
argument_list|,
literal|"from_s"
argument_list|,
literal|"mary"
argument_list|,
literal|"to_s"
argument_list|,
literal|"max"
argument_list|,
literal|"predicate_s"
argument_list|,
literal|"knows"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"12"
argument_list|,
literal|"from_s"
argument_list|,
literal|"mary"
argument_list|,
literal|"to_s"
argument_list|,
literal|"jim"
argument_list|,
literal|"predicate_s"
argument_list|,
literal|"knows"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"13"
argument_list|,
literal|"from_s"
argument_list|,
literal|"mary"
argument_list|,
literal|"to_s"
argument_list|,
literal|"steve"
argument_list|,
literal|"predicate_s"
argument_list|,
literal|"knows"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTION
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|paths
init|=
literal|null
decl_stmt|;
name|ShortestPathStream
name|stream
init|=
literal|null
decl_stmt|;
name|String
name|zkHost
init|=
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|StreamContext
name|context
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|cache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|SolrParams
name|sParams
init|=
name|StreamingTest
operator|.
name|mapParams
argument_list|(
literal|"fq"
argument_list|,
literal|"predicate_s:knows"
argument_list|)
decl_stmt|;
name|stream
operator|=
operator|new
name|ShortestPathStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
literal|"jim"
argument_list|,
literal|"steve"
argument_list|,
literal|"from_s"
argument_list|,
literal|"to_s"
argument_list|,
name|sParams
argument_list|,
literal|20
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|paths
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|Tuple
name|tuple
range|:
name|tuples
control|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"path"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|paths
operator|.
name|contains
argument_list|(
literal|"[jim, dave, alex, steve]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|paths
operator|.
name|contains
argument_list|(
literal|"[jim, stan, mary, steve]"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Test with batch size of 1
name|sParams
operator|=
name|StreamingTest
operator|.
name|mapParams
argument_list|(
literal|"fq"
argument_list|,
literal|"predicate_s:knows"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|ShortestPathStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
literal|"jim"
argument_list|,
literal|"steve"
argument_list|,
literal|"from_s"
argument_list|,
literal|"to_s"
argument_list|,
name|sParams
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|paths
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|Tuple
name|tuple
range|:
name|tuples
control|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"path"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|paths
operator|.
name|contains
argument_list|(
literal|"[jim, dave, alex, steve]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|paths
operator|.
name|contains
argument_list|(
literal|"[jim, stan, mary, steve]"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Test with bad predicate
name|sParams
operator|=
name|StreamingTest
operator|.
name|mapParams
argument_list|(
literal|"fq"
argument_list|,
literal|"predicate_s:crap"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|ShortestPathStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
literal|"jim"
argument_list|,
literal|"steve"
argument_list|,
literal|"from_s"
argument_list|,
literal|"to_s"
argument_list|,
name|sParams
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|paths
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|//Test with depth 2
name|sParams
operator|=
name|StreamingTest
operator|.
name|mapParams
argument_list|(
literal|"fq"
argument_list|,
literal|"predicate_s:knows"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|ShortestPathStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
literal|"jim"
argument_list|,
literal|"steve"
argument_list|,
literal|"from_s"
argument_list|,
literal|"to_s"
argument_list|,
name|sParams
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|paths
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|//Take out alex
name|sParams
operator|=
name|StreamingTest
operator|.
name|mapParams
argument_list|(
literal|"fq"
argument_list|,
literal|"predicate_s:knows NOT to_s:alex"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|ShortestPathStream
argument_list|(
name|zkHost
argument_list|,
literal|"collection1"
argument_list|,
literal|"jim"
argument_list|,
literal|"steve"
argument_list|,
literal|"from_s"
argument_list|,
literal|"to_s"
argument_list|,
name|sParams
argument_list|,
literal|10
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|paths
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|Tuple
name|tuple
range|:
name|tuples
control|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"path"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|paths
operator|.
name|contains
argument_list|(
literal|"[jim, stan, mary, steve]"
argument_list|)
argument_list|)
expr_stmt|;
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getTuples
specifier|protected
name|List
argument_list|<
name|Tuple
argument_list|>
name|getTuples
parameter_list|(
name|TupleStream
name|tupleStream
parameter_list|)
throws|throws
name|IOException
block|{
name|tupleStream
operator|.
name|open
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|Tuple
name|t
init|=
name|tupleStream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|EOF
condition|)
block|{
break|break;
block|}
else|else
block|{
name|tuples
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
name|tupleStream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|tuples
return|;
block|}
DECL|method|assertLong
specifier|public
name|boolean
name|assertLong
parameter_list|(
name|Tuple
name|tuple
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|long
name|l
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|lv
init|=
operator|(
name|long
operator|)
name|tuple
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|lv
operator|!=
name|l
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Longs not equal:"
operator|+
name|l
operator|+
literal|" : "
operator|+
name|lv
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
