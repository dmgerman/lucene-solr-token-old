begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.io.stream
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import
begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|ComparatorOrder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|FieldComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|CountMetric
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|MaxMetric
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|MeanMetric
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|MinMetric
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractDistribZkTestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|SolrCloudTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/** */
end_comment
begin_class
annotation|@
name|LuceneTestCase
operator|.
name|SuppressCodecs
argument_list|(
block|{
literal|"Lucene3x"
block|,
literal|"Lucene40"
block|,
literal|"Lucene41"
block|,
literal|"Lucene42"
block|,
literal|"Lucene45"
block|}
argument_list|)
DECL|class|JDBCStreamTest
specifier|public
class|class
name|JDBCStreamTest
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|COLLECTION
specifier|private
specifier|static
specifier|final
name|String
name|COLLECTION
init|=
literal|"jdbc"
decl_stmt|;
DECL|field|TIMEOUT
specifier|private
specifier|static
specifier|final
name|int
name|TIMEOUT
init|=
literal|30
decl_stmt|;
DECL|field|id
specifier|private
specifier|static
specifier|final
name|String
name|id
init|=
literal|"id"
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupCluster
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|configureCluster
argument_list|(
literal|4
argument_list|)
operator|.
name|addConfig
argument_list|(
literal|"conf"
argument_list|,
name|getFile
argument_list|(
literal|"solrj"
argument_list|)
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"solr"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"configsets"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"streaming"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"conf"
argument_list|)
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|COLLECTION
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|COLLECTION
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|setupDatabase
specifier|public
specifier|static
name|void
name|setupDatabase
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Initialize Database
comment|// Ok, so.....hsqldb is doing something totally weird so I thought I'd take a moment to explain it.
comment|// According to http://www.hsqldb.org/doc/1.8/guide/guide.html#N101EF, section "Components of SQL Expressions", clause "name",
comment|// "When an SQL statement is issued, any lowercase characters in unquoted identifiers are converted to uppercase."
comment|// :(   Like seriously....
comment|// So, for this reason and to simplify writing these tests I've decided that in all statements all table and column names
comment|// will be in UPPERCASE. This is to ensure things look and behave consistently. Note that this is not a requirement of the
comment|// JDBCStream and is only a carryover from the driver we are testing with.
name|Class
operator|.
name|forName
argument_list|(
literal|"org.hsqldb.jdbcDriver"
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:hsqldb:mem:."
argument_list|)
decl_stmt|;
name|Statement
name|statement
init|=
name|connection
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"create table COUNTRIES(CODE varchar(3) not null primary key, COUNTRY_NAME varchar(50), DELETED char(1) default 'N')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"create table PEOPLE(ID int not null primary key, NAME varchar(50), COUNTRY_CODE char(2), DELETED char(1) default 'N')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"create table PEOPLE_SPORTS(ID int not null primary key, PERSON_ID int, SPORT_NAME varchar(50), DELETED char(1) default 'N')"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|teardownDatabase
specifier|public
specifier|static
name|void
name|teardownDatabase
parameter_list|()
throws|throws
name|SQLException
block|{
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:hsqldb:mem:."
argument_list|)
decl_stmt|;
name|Statement
name|statement
init|=
name|connection
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"shutdown"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|cleanIndex
specifier|public
name|void
name|cleanIndex
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTION
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|cleanDatabase
specifier|public
name|void
name|cleanDatabase
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Clear database
try|try
init|(
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:hsqldb:mem:."
argument_list|)
init|;
name|Statement
name|statement
operator|=
name|connection
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"delete from COUNTRIES WHERE 1=1"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"delete from PEOPLE WHERE 1=1"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"delete from PEOPLE_SPORTS WHERE 1=1"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testJDBCSelect
specifier|public
name|void
name|testJDBCSelect
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Load Database Data
try|try
init|(
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:hsqldb:mem:."
argument_list|)
init|;
name|Statement
name|statement
operator|=
name|connection
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')"
argument_list|)
expr_stmt|;
block|}
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
comment|// Simple 1
name|stream
operator|=
operator|new
name|JDBCStream
argument_list|(
literal|"jdbc:hsqldb:mem:."
argument_list|,
literal|"select CODE,COUNTRY_NAME from COUNTRIES order by CODE"
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"CODE"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|4
operator|)
assert|;
name|assertOrderOf
argument_list|(
name|tuples
argument_list|,
literal|"CODE"
argument_list|,
literal|"NL"
argument_list|,
literal|"NO"
argument_list|,
literal|"NP"
argument_list|,
literal|"US"
argument_list|)
expr_stmt|;
name|assertOrderOf
argument_list|(
name|tuples
argument_list|,
literal|"COUNTRY_NAME"
argument_list|,
literal|"Netherlands"
argument_list|,
literal|"Norway"
argument_list|,
literal|"Nepal"
argument_list|,
literal|"United States"
argument_list|)
expr_stmt|;
comment|// Simple 2
name|stream
operator|=
operator|new
name|JDBCStream
argument_list|(
literal|"jdbc:hsqldb:mem:."
argument_list|,
literal|"select CODE,COUNTRY_NAME from COUNTRIES order by COUNTRY_NAME"
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"COUNTRY_NAME"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertOrderOf
argument_list|(
name|tuples
argument_list|,
literal|"CODE"
argument_list|,
literal|"NP"
argument_list|,
literal|"NL"
argument_list|,
literal|"NO"
argument_list|,
literal|"US"
argument_list|)
expr_stmt|;
name|assertOrderOf
argument_list|(
name|tuples
argument_list|,
literal|"COUNTRY_NAME"
argument_list|,
literal|"Nepal"
argument_list|,
literal|"Netherlands"
argument_list|,
literal|"Norway"
argument_list|,
literal|"United States"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJDBCJoin
specifier|public
name|void
name|testJDBCJoin
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Load Database Data
try|try
init|(
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:hsqldb:mem:."
argument_list|)
init|;
name|Statement
name|statement
operator|=
name|connection
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','NI')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NG')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NF')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NE')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','NC')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','NL')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NZ')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','NR')"
argument_list|)
expr_stmt|;
block|}
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
comment|// Simple 1
name|stream
operator|=
operator|new
name|JDBCStream
argument_list|(
literal|"jdbc:hsqldb:mem:."
argument_list|,
literal|"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE where COUNTRIES.CODE = 'NL' order by PEOPLE.ID"
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"ID"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertOrderOf
argument_list|(
name|tuples
argument_list|,
literal|"ID"
argument_list|,
literal|11
argument_list|,
literal|17
argument_list|,
literal|19
argument_list|)
expr_stmt|;
name|assertOrderOf
argument_list|(
name|tuples
argument_list|,
literal|"NAME"
argument_list|,
literal|"Emma"
argument_list|,
literal|"Mia"
argument_list|,
literal|"Olivia"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJDBCSolrMerge
specifier|public
name|void
name|testJDBCSolrMerge
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Load Database Data
try|try
init|(
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:hsqldb:mem:."
argument_list|)
init|;
name|Statement
name|statement
operator|=
name|connection
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('AL', 'Algeria')"
argument_list|)
expr_stmt|;
block|}
comment|// Load Solr
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"code_s"
argument_list|,
literal|"GB"
argument_list|,
literal|"name_s"
argument_list|,
literal|"Great Britian"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"code_s"
argument_list|,
literal|"CA"
argument_list|,
literal|"name_s"
argument_list|,
literal|"Canada"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTION
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTION
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
comment|// Simple 1
name|TupleStream
name|jdbcStream
init|=
operator|new
name|JDBCStream
argument_list|(
literal|"jdbc:hsqldb:mem:."
argument_list|,
literal|"select CODE,COUNTRY_NAME from COUNTRIES order by CODE"
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"CODE"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|TupleStream
name|selectStream
init|=
operator|new
name|SelectStream
argument_list|(
name|jdbcStream
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"CODE"
argument_list|,
literal|"code_s"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"COUNTRY_NAME"
argument_list|,
literal|"name_s"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|TupleStream
name|searchStream
init|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"search("
operator|+
name|COLLECTION
operator|+
literal|", fl=\"code_s,name_s\",q=\"*:*\",sort=\"code_s asc\")"
argument_list|)
decl_stmt|;
name|TupleStream
name|mergeStream
init|=
operator|new
name|MergeStream
argument_list|(
operator|new
name|FieldComparator
argument_list|(
literal|"code_s"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|,
operator|new
name|TupleStream
index|[]
block|{
name|selectStream
block|,
name|searchStream
block|}
argument_list|)
decl_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|mergeStream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertOrderOf
argument_list|(
name|tuples
argument_list|,
literal|"code_s"
argument_list|,
literal|"AL"
argument_list|,
literal|"CA"
argument_list|,
literal|"GB"
argument_list|,
literal|"NL"
argument_list|,
literal|"NO"
argument_list|,
literal|"NP"
argument_list|,
literal|"US"
argument_list|)
expr_stmt|;
name|assertOrderOf
argument_list|(
name|tuples
argument_list|,
literal|"name_s"
argument_list|,
literal|"Algeria"
argument_list|,
literal|"Canada"
argument_list|,
literal|"Great Britian"
argument_list|,
literal|"Netherlands"
argument_list|,
literal|"Norway"
argument_list|,
literal|"Nepal"
argument_list|,
literal|"United States"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJDBCSolrInnerJoinExpression
specifier|public
name|void
name|testJDBCSolrInnerJoinExpression
parameter_list|()
throws|throws
name|Exception
block|{
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTION
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"select"
argument_list|,
name|SelectStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"innerJoin"
argument_list|,
name|InnerJoinStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"jdbc"
argument_list|,
name|JDBCStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Load Database Data
try|try
init|(
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:hsqldb:mem:."
argument_list|)
init|;
name|Statement
name|statement
operator|=
name|connection
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')"
argument_list|)
expr_stmt|;
block|}
comment|// Load solr data
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"rating_f"
argument_list|,
literal|"3.5"
argument_list|,
literal|"personId_i"
argument_list|,
literal|"11"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"rating_f"
argument_list|,
literal|"5"
argument_list|,
literal|"personId_i"
argument_list|,
literal|"12"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"rating_f"
argument_list|,
literal|"2.2"
argument_list|,
literal|"personId_i"
argument_list|,
literal|"13"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"rating_f"
argument_list|,
literal|"4.3"
argument_list|,
literal|"personId_i"
argument_list|,
literal|"14"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"rating_f"
argument_list|,
literal|"3.5"
argument_list|,
literal|"personId_i"
argument_list|,
literal|"15"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"rating_f"
argument_list|,
literal|"3"
argument_list|,
literal|"personId_i"
argument_list|,
literal|"16"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"rating_f"
argument_list|,
literal|"3"
argument_list|,
literal|"personId_i"
argument_list|,
literal|"17"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"rating_f"
argument_list|,
literal|"4"
argument_list|,
literal|"personId_i"
argument_list|,
literal|"18"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"rating_f"
argument_list|,
literal|"4.1"
argument_list|,
literal|"personId_i"
argument_list|,
literal|"19"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"10"
argument_list|,
literal|"rating_f"
argument_list|,
literal|"4.8"
argument_list|,
literal|"personId_i"
argument_list|,
literal|"20"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTION
argument_list|)
expr_stmt|;
name|String
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
comment|// Basic test
name|expression
operator|=
literal|"innerJoin("
operator|+
literal|"  select("
operator|+
literal|"    search("
operator|+
name|COLLECTION
operator|+
literal|", fl=\"personId_i,rating_f\", q=\"rating_f:*\", sort=\"personId_i asc\"),"
operator|+
literal|"    personId_i as personId,"
operator|+
literal|"    rating_f as rating"
operator|+
literal|"  ),"
operator|+
literal|"  select("
operator|+
literal|"    jdbc(connection=\"jdbc:hsqldb:mem:.\", sql=\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\", sort=\"ID asc\"),"
operator|+
literal|"    ID as personId,"
operator|+
literal|"    NAME as personName,"
operator|+
literal|"    COUNTRY_NAME as country"
operator|+
literal|"  ),"
operator|+
literal|"  on=\"personId\""
operator|+
literal|")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertOrderOf
argument_list|(
name|tuples
argument_list|,
literal|"personId"
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|,
literal|16
argument_list|,
literal|17
argument_list|,
literal|18
argument_list|,
literal|19
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|assertOrderOf
argument_list|(
name|tuples
argument_list|,
literal|"rating"
argument_list|,
literal|3.5d
argument_list|,
literal|5d
argument_list|,
literal|2.2d
argument_list|,
literal|4.3d
argument_list|,
literal|3.5d
argument_list|,
literal|3d
argument_list|,
literal|3d
argument_list|,
literal|4d
argument_list|,
literal|4.1d
argument_list|,
literal|4.8d
argument_list|)
expr_stmt|;
name|assertOrderOf
argument_list|(
name|tuples
argument_list|,
literal|"personName"
argument_list|,
literal|"Emma"
argument_list|,
literal|"Grace"
argument_list|,
literal|"Hailey"
argument_list|,
literal|"Isabella"
argument_list|,
literal|"Lily"
argument_list|,
literal|"Madison"
argument_list|,
literal|"Mia"
argument_list|,
literal|"Natalie"
argument_list|,
literal|"Olivia"
argument_list|,
literal|"Samantha"
argument_list|)
expr_stmt|;
name|assertOrderOf
argument_list|(
name|tuples
argument_list|,
literal|"country"
argument_list|,
literal|"Netherlands"
argument_list|,
literal|"United States"
argument_list|,
literal|"Netherlands"
argument_list|,
literal|"Netherlands"
argument_list|,
literal|"Netherlands"
argument_list|,
literal|"United States"
argument_list|,
literal|"United States"
argument_list|,
literal|"Netherlands"
argument_list|,
literal|"Netherlands"
argument_list|,
literal|"United States"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJDBCSolrInnerJoinExpressionWithProperties
specifier|public
name|void
name|testJDBCSolrInnerJoinExpressionWithProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTION
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"select"
argument_list|,
name|SelectStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"innerJoin"
argument_list|,
name|InnerJoinStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"jdbc"
argument_list|,
name|JDBCStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Load Database Data
try|try
init|(
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:hsqldb:mem:."
argument_list|)
init|;
name|Statement
name|statement
operator|=
name|connection
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')"
argument_list|)
expr_stmt|;
block|}
comment|// Load solr data
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"rating_f"
argument_list|,
literal|"3.5"
argument_list|,
literal|"personId_i"
argument_list|,
literal|"11"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"rating_f"
argument_list|,
literal|"5"
argument_list|,
literal|"personId_i"
argument_list|,
literal|"12"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"rating_f"
argument_list|,
literal|"2.2"
argument_list|,
literal|"personId_i"
argument_list|,
literal|"13"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"rating_f"
argument_list|,
literal|"4.3"
argument_list|,
literal|"personId_i"
argument_list|,
literal|"14"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"rating_f"
argument_list|,
literal|"3.5"
argument_list|,
literal|"personId_i"
argument_list|,
literal|"15"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"rating_f"
argument_list|,
literal|"3"
argument_list|,
literal|"personId_i"
argument_list|,
literal|"16"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"rating_f"
argument_list|,
literal|"3"
argument_list|,
literal|"personId_i"
argument_list|,
literal|"17"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"rating_f"
argument_list|,
literal|"4"
argument_list|,
literal|"personId_i"
argument_list|,
literal|"18"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"rating_f"
argument_list|,
literal|"4.1"
argument_list|,
literal|"personId_i"
argument_list|,
literal|"19"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"10"
argument_list|,
literal|"rating_f"
argument_list|,
literal|"4.8"
argument_list|,
literal|"personId_i"
argument_list|,
literal|"20"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTION
argument_list|)
expr_stmt|;
name|String
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
comment|// Basic test
comment|// the test here is the setting of the property get_column_name=true. In hsqldb if this value is set to true then the use of an
comment|// as clause in a select will have no effect. As such even though we have PEOPLE.ID as PERSONID we will still expect the column
comment|// name to come out as ID and not PERSONID
name|expression
operator|=
literal|"innerJoin("
operator|+
literal|"  select("
operator|+
literal|"    search("
operator|+
name|COLLECTION
operator|+
literal|", fl=\"personId_i,rating_f\", q=\"rating_f:*\", sort=\"personId_i asc\"),"
operator|+
literal|"    personId_i as personId,"
operator|+
literal|"    rating_f as rating"
operator|+
literal|"  ),"
operator|+
literal|"  select("
operator|+
literal|"    jdbc(connection=\"jdbc:hsqldb:mem:.\", sql=\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\", sort=\"ID asc\", get_column_name=true),"
operator|+
literal|"    ID as personId,"
operator|+
literal|"    NAME as personName,"
operator|+
literal|"    COUNTRY_NAME as country"
operator|+
literal|"  ),"
operator|+
literal|"  on=\"personId\""
operator|+
literal|")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertOrderOf
argument_list|(
name|tuples
argument_list|,
literal|"personId"
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|,
literal|16
argument_list|,
literal|17
argument_list|,
literal|18
argument_list|,
literal|19
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|assertOrderOf
argument_list|(
name|tuples
argument_list|,
literal|"rating"
argument_list|,
literal|3.5d
argument_list|,
literal|5d
argument_list|,
literal|2.2d
argument_list|,
literal|4.3d
argument_list|,
literal|3.5d
argument_list|,
literal|3d
argument_list|,
literal|3d
argument_list|,
literal|4d
argument_list|,
literal|4.1d
argument_list|,
literal|4.8d
argument_list|)
expr_stmt|;
name|assertOrderOf
argument_list|(
name|tuples
argument_list|,
literal|"personName"
argument_list|,
literal|"Emma"
argument_list|,
literal|"Grace"
argument_list|,
literal|"Hailey"
argument_list|,
literal|"Isabella"
argument_list|,
literal|"Lily"
argument_list|,
literal|"Madison"
argument_list|,
literal|"Mia"
argument_list|,
literal|"Natalie"
argument_list|,
literal|"Olivia"
argument_list|,
literal|"Samantha"
argument_list|)
expr_stmt|;
name|assertOrderOf
argument_list|(
name|tuples
argument_list|,
literal|"country"
argument_list|,
literal|"Netherlands"
argument_list|,
literal|"United States"
argument_list|,
literal|"Netherlands"
argument_list|,
literal|"Netherlands"
argument_list|,
literal|"Netherlands"
argument_list|,
literal|"United States"
argument_list|,
literal|"United States"
argument_list|,
literal|"Netherlands"
argument_list|,
literal|"Netherlands"
argument_list|,
literal|"United States"
argument_list|)
expr_stmt|;
comment|// Basic test
comment|// the test here is the setting of the property get_column_name=false. In hsqldb if this value is set to false then the use of an
comment|// as clause in a select will have effect. As such we have PEOPLE.ID as PERSONID we will still expect the column name to come out
comment|// PERSONID and not ID
name|expression
operator|=
literal|"innerJoin("
operator|+
literal|"  select("
operator|+
literal|"    search("
operator|+
name|COLLECTION
operator|+
literal|", fl=\"personId_i,rating_f\", q=\"rating_f:*\", sort=\"personId_i asc\"),"
operator|+
literal|"    personId_i as personId,"
operator|+
literal|"    rating_f as rating"
operator|+
literal|"  ),"
operator|+
literal|"  select("
operator|+
literal|"    jdbc(connection=\"jdbc:hsqldb:mem:.\", sql=\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\", sort=\"PERSONID asc\", get_column_name=false),"
operator|+
literal|"    PERSONID as personId,"
operator|+
literal|"    NAME as personName,"
operator|+
literal|"    COUNTRY_NAME as country"
operator|+
literal|"  ),"
operator|+
literal|"  on=\"personId\""
operator|+
literal|")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertOrderOf
argument_list|(
name|tuples
argument_list|,
literal|"personId"
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|,
literal|16
argument_list|,
literal|17
argument_list|,
literal|18
argument_list|,
literal|19
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|assertOrderOf
argument_list|(
name|tuples
argument_list|,
literal|"rating"
argument_list|,
literal|3.5d
argument_list|,
literal|5d
argument_list|,
literal|2.2d
argument_list|,
literal|4.3d
argument_list|,
literal|3.5d
argument_list|,
literal|3d
argument_list|,
literal|3d
argument_list|,
literal|4d
argument_list|,
literal|4.1d
argument_list|,
literal|4.8d
argument_list|)
expr_stmt|;
name|assertOrderOf
argument_list|(
name|tuples
argument_list|,
literal|"personName"
argument_list|,
literal|"Emma"
argument_list|,
literal|"Grace"
argument_list|,
literal|"Hailey"
argument_list|,
literal|"Isabella"
argument_list|,
literal|"Lily"
argument_list|,
literal|"Madison"
argument_list|,
literal|"Mia"
argument_list|,
literal|"Natalie"
argument_list|,
literal|"Olivia"
argument_list|,
literal|"Samantha"
argument_list|)
expr_stmt|;
name|assertOrderOf
argument_list|(
name|tuples
argument_list|,
literal|"country"
argument_list|,
literal|"Netherlands"
argument_list|,
literal|"United States"
argument_list|,
literal|"Netherlands"
argument_list|,
literal|"Netherlands"
argument_list|,
literal|"Netherlands"
argument_list|,
literal|"United States"
argument_list|,
literal|"United States"
argument_list|,
literal|"Netherlands"
argument_list|,
literal|"Netherlands"
argument_list|,
literal|"United States"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJDBCSolrInnerJoinRollupExpression
specifier|public
name|void
name|testJDBCSolrInnerJoinRollupExpression
parameter_list|()
throws|throws
name|Exception
block|{
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTION
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"select"
argument_list|,
name|SelectStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"hashJoin"
argument_list|,
name|HashJoinStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"rollup"
argument_list|,
name|RollupStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"jdbc"
argument_list|,
name|JDBCStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"max"
argument_list|,
name|MaxMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"min"
argument_list|,
name|MinMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"avg"
argument_list|,
name|MeanMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"count"
argument_list|,
name|CountMetric
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Load Database Data
try|try
init|(
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:hsqldb:mem:."
argument_list|)
init|;
name|Statement
name|statement
operator|=
name|connection
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')"
argument_list|)
expr_stmt|;
block|}
comment|// Load solr data
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"rating_f"
argument_list|,
literal|"3.5"
argument_list|,
literal|"personId_i"
argument_list|,
literal|"11"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"rating_f"
argument_list|,
literal|"2.2"
argument_list|,
literal|"personId_i"
argument_list|,
literal|"13"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"rating_f"
argument_list|,
literal|"4.3"
argument_list|,
literal|"personId_i"
argument_list|,
literal|"14"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"rating_f"
argument_list|,
literal|"3.5"
argument_list|,
literal|"personId_i"
argument_list|,
literal|"15"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"rating_f"
argument_list|,
literal|"4"
argument_list|,
literal|"personId_i"
argument_list|,
literal|"18"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"rating_f"
argument_list|,
literal|"4.1"
argument_list|,
literal|"personId_i"
argument_list|,
literal|"19"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"rating_f"
argument_list|,
literal|"5"
argument_list|,
literal|"personId_i"
argument_list|,
literal|"12"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"rating_f"
argument_list|,
literal|"3"
argument_list|,
literal|"personId_i"
argument_list|,
literal|"16"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"rating_f"
argument_list|,
literal|"3"
argument_list|,
literal|"personId_i"
argument_list|,
literal|"17"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"10"
argument_list|,
literal|"rating_f"
argument_list|,
literal|"4.8"
argument_list|,
literal|"personId_i"
argument_list|,
literal|"20"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTION
argument_list|)
expr_stmt|;
name|String
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
comment|// Basic test
name|expression
operator|=
literal|"rollup("
operator|+
literal|"  hashJoin("
operator|+
literal|"    hashed=select("
operator|+
literal|"      search("
operator|+
name|COLLECTION
operator|+
literal|", fl=\"personId_i,rating_f\", q=\"rating_f:*\", sort=\"personId_i asc\"),"
operator|+
literal|"      personId_i as personId,"
operator|+
literal|"      rating_f as rating"
operator|+
literal|"    ),"
operator|+
literal|"    select("
operator|+
literal|"      jdbc(connection=\"jdbc:hsqldb:mem:.\", sql=\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by COUNTRIES.COUNTRY_NAME\", sort=\"COUNTRIES.COUNTRY_NAME asc\"),"
operator|+
literal|"      ID as personId,"
operator|+
literal|"      NAME as personName,"
operator|+
literal|"      COUNTRY_NAME as country"
operator|+
literal|"    ),"
operator|+
literal|"    on=\"personId\""
operator|+
literal|"  ),"
operator|+
literal|"  over=\"country\","
operator|+
literal|"  max(rating),"
operator|+
literal|"  min(rating),"
operator|+
literal|"  avg(rating),"
operator|+
literal|"  count(*)"
operator|+
literal|")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Netherlands"
argument_list|,
name|tuple
operator|.
name|getString
argument_list|(
literal|"country"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|4.3D
operator|==
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(rating)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|2.2D
operator|==
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(rating)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|3.6D
operator|==
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(rating)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|6D
operator|==
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"United States"
argument_list|,
name|tuple
operator|.
name|getString
argument_list|(
literal|"country"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|5D
operator|==
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(rating)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|3D
operator|==
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(rating)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|3.95D
operator|==
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(rating)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|4D
operator|==
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getTuples
specifier|protected
name|List
argument_list|<
name|Tuple
argument_list|>
name|getTuples
parameter_list|(
name|TupleStream
name|tupleStream
parameter_list|)
throws|throws
name|IOException
block|{
name|tupleStream
operator|.
name|open
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
operator|new
name|ArrayList
argument_list|<
name|Tuple
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Tuple
name|t
init|=
name|tupleStream
operator|.
name|read
argument_list|()
init|;
operator|!
name|t
operator|.
name|EOF
condition|;
name|t
operator|=
name|tupleStream
operator|.
name|read
argument_list|()
control|)
block|{
name|tuples
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|tupleStream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|tuples
return|;
block|}
DECL|method|assertOrderOf
specifier|protected
name|boolean
name|assertOrderOf
parameter_list|(
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|int
modifier|...
name|values
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|val
range|:
name|values
control|)
block|{
name|Tuple
name|t
init|=
name|tuples
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Long
name|tip
init|=
operator|(
name|Long
operator|)
name|t
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tip
operator|.
name|intValue
argument_list|()
operator|!=
name|val
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Found value:"
operator|+
name|tip
operator|.
name|intValue
argument_list|()
operator|+
literal|" expecting:"
operator|+
name|val
argument_list|)
throw|;
block|}
operator|++
name|i
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertOrderOf
specifier|protected
name|boolean
name|assertOrderOf
parameter_list|(
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|double
modifier|...
name|values
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|double
name|val
range|:
name|values
control|)
block|{
name|Tuple
name|t
init|=
name|tuples
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|double
name|tip
init|=
operator|(
name|double
operator|)
name|t
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tip
operator|!=
name|val
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Found value:"
operator|+
name|tip
operator|+
literal|" expecting:"
operator|+
name|val
argument_list|)
throw|;
block|}
operator|++
name|i
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertOrderOf
specifier|protected
name|boolean
name|assertOrderOf
parameter_list|(
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|String
modifier|...
name|values
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|val
range|:
name|values
control|)
block|{
name|Tuple
name|t
init|=
name|tuples
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|val
condition|)
block|{
if|if
condition|(
literal|null
operator|!=
name|t
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Found value:"
operator|+
operator|(
name|String
operator|)
name|t
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
operator|+
literal|" expecting:null"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|String
name|tip
init|=
operator|(
name|String
operator|)
name|t
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tip
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Found value:"
operator|+
name|tip
operator|+
literal|" expecting:"
operator|+
name|val
argument_list|)
throw|;
block|}
block|}
operator|++
name|i
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertFields
specifier|protected
name|boolean
name|assertFields
parameter_list|(
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
parameter_list|,
name|String
modifier|...
name|fields
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Tuple
name|tuple
range|:
name|tuples
control|)
block|{
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
operator|!
name|tuple
operator|.
name|fields
operator|.
name|containsKey
argument_list|(
name|field
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Expected field '%s' not found"
argument_list|,
name|field
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertNotFields
specifier|protected
name|boolean
name|assertNotFields
parameter_list|(
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
parameter_list|,
name|String
modifier|...
name|fields
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Tuple
name|tuple
range|:
name|tuples
control|)
block|{
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|tuple
operator|.
name|fields
operator|.
name|containsKey
argument_list|(
name|field
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Unexpected field '%s' found"
argument_list|,
name|field
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertLong
specifier|public
name|boolean
name|assertLong
parameter_list|(
name|Tuple
name|tuple
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|long
name|l
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|lv
init|=
operator|(
name|long
operator|)
name|tuple
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|lv
operator|!=
name|l
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Longs not equal:"
operator|+
name|l
operator|+
literal|" : "
operator|+
name|lv
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertString
specifier|public
name|boolean
name|assertString
parameter_list|(
name|Tuple
name|tuple
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|String
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|actual
init|=
operator|(
name|String
operator|)
name|tuple
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
literal|null
operator|==
name|expected
operator|&&
literal|null
operator|!=
name|actual
operator|)
operator|||
operator|(
literal|null
operator|!=
name|expected
operator|&&
literal|null
operator|==
name|actual
operator|)
operator|||
operator|(
literal|null
operator|!=
name|expected
operator|&&
operator|!
name|expected
operator|.
name|equals
argument_list|(
name|actual
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Longs not equal:"
operator|+
name|expected
operator|+
literal|" : "
operator|+
name|actual
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
