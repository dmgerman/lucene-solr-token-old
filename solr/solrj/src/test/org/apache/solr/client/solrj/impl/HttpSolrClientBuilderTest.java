begin_unit
begin_package
DECL|package|org.apache.solr.client.solrj.impl
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClientBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|ResponseParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
operator|.
name|Builder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Unit tests for {@link Builder}.  */
end_comment
begin_class
DECL|class|HttpSolrClientBuilderTest
specifier|public
class|class
name|HttpSolrClientBuilderTest
extends|extends
name|LuceneTestCase
block|{
DECL|field|ANY_BASE_SOLR_URL
specifier|private
specifier|static
specifier|final
name|String
name|ANY_BASE_SOLR_URL
init|=
literal|"ANY_BASE_SOLR_URL"
decl_stmt|;
DECL|field|ANY_HTTP_CLIENT
specifier|private
specifier|static
specifier|final
name|HttpClient
name|ANY_HTTP_CLIENT
init|=
name|HttpClientBuilder
operator|.
name|create
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|ANY_RESPONSE_PARSER
specifier|private
specifier|static
specifier|final
name|ResponseParser
name|ANY_RESPONSE_PARSER
init|=
operator|new
name|NoOpResponseParser
argument_list|()
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testBaseSolrUrlIsRequired
specifier|public
name|void
name|testBaseSolrUrlIsRequired
parameter_list|()
block|{
operator|new
name|Builder
argument_list|(
literal|null
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProvidesBaseSolrUrlToClient
specifier|public
name|void
name|testProvidesBaseSolrUrlToClient
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|HttpSolrClient
name|createdClient
init|=
operator|new
name|HttpSolrClient
operator|.
name|Builder
argument_list|(
name|ANY_BASE_SOLR_URL
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|assertTrue
argument_list|(
name|createdClient
operator|.
name|getBaseURL
argument_list|()
operator|.
name|equals
argument_list|(
name|ANY_BASE_SOLR_URL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testProvidesHttpClientToClient
specifier|public
name|void
name|testProvidesHttpClientToClient
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|HttpSolrClient
name|createdClient
init|=
operator|new
name|Builder
argument_list|(
name|ANY_BASE_SOLR_URL
argument_list|)
operator|.
name|withHttpClient
argument_list|(
name|ANY_HTTP_CLIENT
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|assertTrue
argument_list|(
name|createdClient
operator|.
name|getHttpClient
argument_list|()
operator|.
name|equals
argument_list|(
name|ANY_HTTP_CLIENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testProvidesResponseParserToClient
specifier|public
name|void
name|testProvidesResponseParserToClient
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|HttpSolrClient
name|createdClient
init|=
operator|new
name|Builder
argument_list|(
name|ANY_BASE_SOLR_URL
argument_list|)
operator|.
name|withResponseParser
argument_list|(
name|ANY_RESPONSE_PARSER
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|assertTrue
argument_list|(
name|createdClient
operator|.
name|getParser
argument_list|()
operator|.
name|equals
argument_list|(
name|ANY_RESPONSE_PARSER
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDefaultsToBinaryResponseParserWhenNoneProvided
specifier|public
name|void
name|testDefaultsToBinaryResponseParserWhenNoneProvided
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|HttpSolrClient
name|createdClient
init|=
operator|new
name|Builder
argument_list|(
name|ANY_BASE_SOLR_URL
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
specifier|final
name|ResponseParser
name|usedParser
init|=
name|createdClient
operator|.
name|getParser
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|usedParser
operator|instanceof
name|BinaryResponseParser
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
