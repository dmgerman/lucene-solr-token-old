begin_unit
begin_package
DECL|package|org.apache.solr.client.solrj.impl
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|MiniSolrCloudCluster
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_class
DECL|class|TestCloudSolrClientConnections
specifier|public
class|class
name|TestCloudSolrClientConnections
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|Test
DECL|method|testCloudClientCanConnectAfterClusterComesUp
specifier|public
name|void
name|testCloudClientCanConnectAfterClusterComesUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Start by creating a cluster with no jetties
name|File
name|solrXml
init|=
name|getFile
argument_list|(
literal|"solrj"
argument_list|)
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"solr/solr.xml"
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|MiniSolrCloudCluster
name|cluster
init|=
operator|new
name|MiniSolrCloudCluster
argument_list|(
literal|0
argument_list|,
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
argument_list|,
name|solrXml
argument_list|,
name|buildJettyConfig
argument_list|(
literal|"/solr"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|CloudSolrClient
name|client
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|List
name|listReq
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|List
argument_list|()
decl_stmt|;
try|try
block|{
name|client
operator|.
name|request
argument_list|(
name|listReq
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Requests to a non-running cluster should throw a SolrException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Unexpected message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"cluster not found/not ready"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|startJettySolrRunner
argument_list|()
expr_stmt|;
name|client
operator|.
name|connect
argument_list|(
literal|20
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// should work now!
name|client
operator|.
name|request
argument_list|(
name|listReq
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
