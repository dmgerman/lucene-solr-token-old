begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.io.stream
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|SolrClientCache
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|ops
operator|.
name|ConcatOperation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|ops
operator|.
name|GroupOperation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|ComparatorOrder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|FieldComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|ops
operator|.
name|ReplaceOperation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpression
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|Bucket
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|CountMetric
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|MaxMetric
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|MeanMetric
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|MinMetric
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|SumMetric
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractFullDistribZkTestBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractZkTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/**  *  All base tests will be done with CloudSolrStream. Under the covers CloudSolrStream uses SolrStream so  *  SolrStream will get fully exercised through these tests.  *  **/
end_comment
begin_class
annotation|@
name|Slow
annotation|@
name|LuceneTestCase
operator|.
name|SuppressCodecs
argument_list|(
block|{
literal|"Lucene3x"
block|,
literal|"Lucene40"
block|,
literal|"Lucene41"
block|,
literal|"Lucene42"
block|,
literal|"Lucene45"
block|}
argument_list|)
DECL|class|StreamExpressionTest
specifier|public
class|class
name|StreamExpressionTest
extends|extends
name|AbstractFullDistribZkTestBase
block|{
DECL|field|SOLR_HOME
specifier|private
specifier|static
specifier|final
name|String
name|SOLR_HOME
init|=
name|getFile
argument_list|(
literal|"solrj"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"solr"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
static|static
block|{
name|schemaString
operator|=
literal|"schema-streaming.xml"
expr_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|beforeSuperClass
specifier|public
specifier|static
name|void
name|beforeSuperClass
parameter_list|()
block|{
name|AbstractZkTestCase
operator|.
name|SOLRHOME
operator|=
operator|new
name|File
argument_list|(
name|SOLR_HOME
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterSuperClass
specifier|public
specifier|static
name|void
name|afterSuperClass
parameter_list|()
block|{    }
DECL|method|getCloudSolrConfig
specifier|protected
name|String
name|getCloudSolrConfig
parameter_list|()
block|{
return|return
literal|"solrconfig-streaming.xml"
return|;
block|}
annotation|@
name|Override
DECL|method|getSolrHome
specifier|public
name|String
name|getSolrHome
parameter_list|()
block|{
return|return
name|SOLR_HOME
return|;
block|}
DECL|method|SOLR_HOME
specifier|public
specifier|static
name|String
name|SOLR_HOME
parameter_list|()
block|{
return|return
name|SOLR_HOME
return|;
block|}
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|// we expect this time of exception as shards go up and down...
comment|//ignoreException(".*");
name|System
operator|.
name|setProperty
argument_list|(
literal|"numShards"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|sliceCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|resetExceptionIgnores
argument_list|()
expr_stmt|;
block|}
DECL|method|StreamExpressionTest
specifier|public
name|StreamExpressionTest
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|sliceCount
operator|=
literal|2
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAll
specifier|public
name|void
name|testAll
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|cloudClient
argument_list|)
expr_stmt|;
name|handle
operator|.
name|clear
argument_list|()
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"timestamp"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|waitForRecoveriesToFinish
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|testCloudSolrStream
argument_list|()
expr_stmt|;
name|testCloudSolrStreamWithZkHost
argument_list|()
expr_stmt|;
name|testMergeStream
argument_list|()
expr_stmt|;
name|testRankStream
argument_list|()
expr_stmt|;
name|testReducerStream
argument_list|()
expr_stmt|;
name|testUniqueStream
argument_list|()
expr_stmt|;
name|testSortStream
argument_list|()
expr_stmt|;
name|testRollupStream
argument_list|()
expr_stmt|;
name|testStatsStream
argument_list|()
expr_stmt|;
name|testNulls
argument_list|()
expr_stmt|;
name|testTopicStream
argument_list|()
expr_stmt|;
name|testDaemonStream
argument_list|()
expr_stmt|;
name|testParallelUniqueStream
argument_list|()
expr_stmt|;
name|testParallelReducerStream
argument_list|()
expr_stmt|;
name|testParallelRankStream
argument_list|()
expr_stmt|;
name|testParallelMergeStream
argument_list|()
expr_stmt|;
name|testParallelRollupStream
argument_list|()
expr_stmt|;
name|testInnerJoinStream
argument_list|()
expr_stmt|;
name|testLeftOuterJoinStream
argument_list|()
expr_stmt|;
name|testHashJoinStream
argument_list|()
expr_stmt|;
name|testOuterHashJoinStream
argument_list|()
expr_stmt|;
name|testSelectStream
argument_list|()
expr_stmt|;
name|testFacetStream
argument_list|()
expr_stmt|;
name|testSubFacetStream
argument_list|()
expr_stmt|;
name|testUpdateStream
argument_list|()
expr_stmt|;
name|testParallelUpdateStream
argument_list|()
expr_stmt|;
name|testParallelDaemonUpdateStream
argument_list|()
expr_stmt|;
name|testIntersectStream
argument_list|()
expr_stmt|;
name|testParallelIntersectStream
argument_list|()
expr_stmt|;
name|testComplementStream
argument_list|()
expr_stmt|;
name|testParallelComplementStream
argument_list|()
expr_stmt|;
block|}
DECL|method|testCloudSolrStream
specifier|private
name|void
name|testCloudSolrStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
decl_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|CloudSolrStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
comment|// Basic test
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"a_i"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Basic w/aliases
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\", aliases=\"a_i=alias.a_i, a_s=name\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"alias.a_i"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertString
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"name"
argument_list|,
literal|"hello0"
argument_list|)
expr_stmt|;
comment|// Basic filtered test
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search(collection1, q=\"id:(0 3 4)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"a_i"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testCloudSolrStreamWithZkHost
specifier|private
name|void
name|testCloudSolrStreamWithZkHost
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
decl_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|CloudSolrStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
comment|// Basic test
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search(collection1, zkHost="
operator|+
name|zkServer
operator|.
name|getZkAddress
argument_list|()
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"a_i"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Basic w/aliases
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\", aliases=\"a_i=alias.a_i, a_s=name\", zkHost="
operator|+
name|zkServer
operator|.
name|getZkAddress
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"alias.a_i"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertString
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"name"
argument_list|,
literal|"hello0"
argument_list|)
expr_stmt|;
comment|// Basic filtered test
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search(collection1, q=\"id:(0 3 4)\", fl=\"id,a_s,a_i,a_f\", zkHost="
operator|+
name|zkServer
operator|.
name|getZkAddress
argument_list|()
operator|+
literal|", sort=\"a_f asc, a_i asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"a_i"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testUniqueStream
specifier|private
name|void
name|testUniqueStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"unique"
argument_list|,
name|UniqueStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Basic test
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"unique(search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\"), over=\"a_f\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|UniqueStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|4
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Basic test desc
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"unique(search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f desc, a_i desc\"), over=\"a_f\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|UniqueStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|4
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Basic w/multi comp
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"unique(search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\"), over=\"a_f, a_i\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|UniqueStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// full factory w/multi comp
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"unique(search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\"), over=\"a_f, a_i\")"
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testSortStream
specifier|private
name|void
name|testSortStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"sort"
argument_list|,
name|SortStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Basic test
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"sort(search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\"), by=\"a_i asc\")"
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Basic test desc
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"sort(search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\"), by=\"a_i desc\")"
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Basic w/multi comp
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"sort(search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\"), by=\"a_i asc, a_f desc\")"
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testNulls
specifier|private
name|void
name|testNulls
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaa"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbb"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"100"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"200"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|Tuple
name|tuple
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Basic test
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f, s_multi, i_multi\", qt=\"/export\", sort=\"a_i asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"hello4"
operator|.
name|equals
argument_list|(
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
operator|(
name|long
operator|)
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|strings
init|=
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|strings
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aaa"
argument_list|,
name|strings
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bbb"
argument_list|,
name|strings
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|longs
init|=
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|longs
argument_list|)
expr_stmt|;
comment|//test sort (asc) with null string field. Null should sort to the top.
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f, s_multi, i_multi\", qt=\"/export\", sort=\"a_s asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|//test sort(desc) with null string field.  Null should sort to the bottom.
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f, s_multi, i_multi\", qt=\"/export\", sort=\"a_s desc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testMergeStream
specifier|private
name|void
name|testMergeStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"unique"
argument_list|,
name|UniqueStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"merge"
argument_list|,
name|MergeStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Basic test
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"merge("
operator|+
literal|"search(collection1, q=\"id:(0 3 4)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\"),"
operator|+
literal|"search(collection1, q=\"id:(1)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\"),"
operator|+
literal|"on=\"a_f asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|MergeStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|4
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Basic test desc
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"merge("
operator|+
literal|"search(collection1, q=\"id:(0 3 4)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f desc\"),"
operator|+
literal|"search(collection1, q=\"id:(1)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f desc\"),"
operator|+
literal|"on=\"a_f desc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|MergeStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|4
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Basic w/multi comp
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"merge("
operator|+
literal|"search(collection1, q=\"id:(0 3 4)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_s asc\"),"
operator|+
literal|"search(collection1, q=\"id:(1 2)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_s asc\"),"
operator|+
literal|"on=\"a_f asc, a_s asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|MergeStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// full factory w/multi comp
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"merge("
operator|+
literal|"search(collection1, q=\"id:(0 3 4)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_s asc\"),"
operator|+
literal|"search(collection1, q=\"id:(1 2)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_s asc\"),"
operator|+
literal|"on=\"a_f asc, a_s asc\")"
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// full factory w/multi streams
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"merge("
operator|+
literal|"search(collection1, q=\"id:(0 4)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_s asc\"),"
operator|+
literal|"search(collection1, q=\"id:(1)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_s asc\"),"
operator|+
literal|"search(collection1, q=\"id:(2)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_s asc\"),"
operator|+
literal|"on=\"a_f asc\")"
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|4
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testRankStream
specifier|private
name|void
name|testRankStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"unique"
argument_list|,
name|UniqueStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"top"
argument_list|,
name|RankStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Basic test
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"top("
operator|+
literal|"n=3,"
operator|+
literal|"search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\"),"
operator|+
literal|"sort=\"a_f asc, a_i asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|RankStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Basic test desc
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"top("
operator|+
literal|"n=2,"
operator|+
literal|"unique("
operator|+
literal|"search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f desc\"),"
operator|+
literal|"over=\"a_f\"),"
operator|+
literal|"sort=\"a_f desc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|RankStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// full factory
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"top("
operator|+
literal|"n=4,"
operator|+
literal|"unique("
operator|+
literal|"search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\"),"
operator|+
literal|"over=\"a_f\"),"
operator|+
literal|"sort=\"a_f asc\")"
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|4
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// full factory, switch order
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"top("
operator|+
literal|"n=4,"
operator|+
literal|"unique("
operator|+
literal|"search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f desc, a_i desc\"),"
operator|+
literal|"over=\"a_f\"),"
operator|+
literal|"sort=\"a_f asc\")"
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|4
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testReducerStream
specifier|private
name|void
name|testReducerStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|Tuple
name|t0
decl_stmt|,
name|t1
decl_stmt|,
name|t2
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|maps0
decl_stmt|,
name|maps1
decl_stmt|,
name|maps2
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"reduce"
argument_list|,
name|ReducerStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"group"
argument_list|,
name|GroupOperation
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// basic
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"reduce("
operator|+
literal|"search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_s asc, a_f asc\"),"
operator|+
literal|"by=\"a_s\","
operator|+
literal|"group(sort=\"a_f desc\", n=\"4\"))"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|t0
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|maps0
operator|=
name|t0
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
name|assertMaps
argument_list|(
name|maps0
argument_list|,
literal|9
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|t1
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|maps1
operator|=
name|t1
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
name|assertMaps
argument_list|(
name|maps1
argument_list|,
literal|8
argument_list|,
literal|7
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|t2
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|maps2
operator|=
name|t2
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
name|assertMaps
argument_list|(
name|maps2
argument_list|,
literal|6
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// basic w/spaces
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"reduce("
operator|+
literal|"search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_s asc, a_f       asc\"),"
operator|+
literal|"by=\"a_s\","
operator|+
literal|"group(sort=\"a_i asc\", n=\"2\"))"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|t0
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|maps0
operator|=
name|t0
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|maps0
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|assertMaps
argument_list|(
name|maps0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|t1
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|maps1
operator|=
name|t1
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
name|assertMaps
argument_list|(
name|maps1
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|t2
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|maps2
operator|=
name|t2
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
name|assertMaps
argument_list|(
name|maps2
argument_list|,
literal|4
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testDaemonStream
specifier|private
name|void
name|testDaemonStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"rollup"
argument_list|,
name|RollupStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"sum"
argument_list|,
name|SumMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"min"
argument_list|,
name|MinMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"max"
argument_list|,
name|MaxMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"avg"
argument_list|,
name|MeanMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"count"
argument_list|,
name|CountMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"daemon"
argument_list|,
name|DaemonStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|DaemonStream
name|daemonStream
decl_stmt|;
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"daemon(rollup("
operator|+
literal|"search(collection1, q=\"*:*\", fl=\"a_i,a_s\", sort=\"a_s asc\"),"
operator|+
literal|"over=\"a_s\","
operator|+
literal|"sum(a_i)"
operator|+
literal|"), id=\"test\", runInterval=\"1000\", queueSize=\"9\")"
argument_list|)
expr_stmt|;
name|daemonStream
operator|=
operator|(
name|DaemonStream
operator|)
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
comment|//Test Long and Double Sums
name|daemonStream
operator|.
name|open
argument_list|()
expr_stmt|;
comment|// This will start the daemon thread
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Tuple
name|tuple
init|=
name|daemonStream
operator|.
name|read
argument_list|()
decl_stmt|;
comment|// Reads from the queue
name|String
name|bucket
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
decl_stmt|;
name|Double
name|sumi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
decl_stmt|;
comment|//System.out.println("#################################### Bucket 1:"+bucket);
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|17.0D
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|daemonStream
operator|.
name|read
argument_list|()
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
comment|//System.out.println("#################################### Bucket 2:"+bucket);
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|38.0D
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|daemonStream
operator|.
name|read
argument_list|()
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
comment|//System.out.println("#################################### Bucket 3:"+bucket);
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|15
argument_list|)
expr_stmt|;
block|}
comment|//Now lets wait until the internal queue fills up
while|while
condition|(
name|daemonStream
operator|.
name|remainingCapacity
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{        }
block|}
comment|//OK capacity is full, let's index a new doc
name|indexr
argument_list|(
name|id
argument_list|,
literal|"10"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
comment|//Now lets clear the existing docs in the queue 9, plus 3 more to get passed the run that was blocked. The next run should
comment|//have the tuples with the updated count.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|12
condition|;
name|i
operator|++
control|)
block|{
name|daemonStream
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
comment|//And rerun the loop. It should have a new count for hello0
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Tuple
name|tuple
init|=
name|daemonStream
operator|.
name|read
argument_list|()
decl_stmt|;
comment|// Reads from the queue
name|String
name|bucket
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
decl_stmt|;
name|Double
name|sumi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
decl_stmt|;
comment|//System.out.println("#################################### Bucket 1:"+bucket);
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|18.0D
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|daemonStream
operator|.
name|read
argument_list|()
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
comment|//System.out.println("#################################### Bucket 2:"+bucket);
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|38.0D
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|daemonStream
operator|.
name|read
argument_list|()
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
comment|//System.out.println("#################################### Bucket 3:"+bucket);
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|15
argument_list|)
expr_stmt|;
block|}
name|daemonStream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//This should stop the daemon thread
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testRollupStream
specifier|private
name|void
name|testRollupStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"rollup"
argument_list|,
name|RollupStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"sum"
argument_list|,
name|SumMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"min"
argument_list|,
name|MinMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"max"
argument_list|,
name|MaxMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"avg"
argument_list|,
name|MeanMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"count"
argument_list|,
name|CountMetric
operator|.
name|class
argument_list|)
decl_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"rollup("
operator|+
literal|"search(collection1, q=*:*, fl=\"a_s,a_i,a_f\", sort=\"a_s asc\"),"
operator|+
literal|"over=\"a_s\","
operator|+
literal|"sum(a_i),"
operator|+
literal|"sum(a_f),"
operator|+
literal|"min(a_i),"
operator|+
literal|"min(a_f),"
operator|+
literal|"max(a_i),"
operator|+
literal|"max(a_f),"
operator|+
literal|"avg(a_i),"
operator|+
literal|"avg(a_f),"
operator|+
literal|"count(*),"
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
comment|//Test Long and Double Sums
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|bucket
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
decl_stmt|;
name|Double
name|sumi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|sumf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|mini
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|minf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|maxi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|maxf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|avgi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|avgf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|count
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|17.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|18.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|0.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|14.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|10.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.25D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|38.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|26.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|13.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|6.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|15
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|5.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testStatsStream
specifier|private
name|void
name|testStatsStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"stats"
argument_list|,
name|StatsStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"sum"
argument_list|,
name|SumMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"min"
argument_list|,
name|MinMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"max"
argument_list|,
name|MaxMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"avg"
argument_list|,
name|MeanMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"count"
argument_list|,
name|CountMetric
operator|.
name|class
argument_list|)
decl_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"stats(collection1, q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
comment|//Test Long and Double Sums
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Double
name|sumi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|sumf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|mini
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|minf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|maxi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|maxf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|avgi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|avgf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|count
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|70
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|55.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|0.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|14.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|10.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|5.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|10
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testParallelUniqueStream
specifier|private
name|void
name|testParallelUniqueStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|StreamFactory
name|streamFactory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"unique"
argument_list|,
name|UniqueStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"top"
argument_list|,
name|RankStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"group"
argument_list|,
name|ReducerStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|ParallelStream
name|pstream
init|=
operator|(
name|ParallelStream
operator|)
name|streamFactory
operator|.
name|constructStream
argument_list|(
literal|"parallel(collection1, unique(search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\", partitionKeys=\"a_f\"), over=\"a_f\"), workers=\"2\", zkHost=\""
operator|+
name|zkHost
operator|+
literal|"\", sort=\"a_f asc\")"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|//Test the eofTuples
name|Map
argument_list|<
name|String
argument_list|,
name|Tuple
argument_list|>
name|eofTuples
init|=
name|pstream
operator|.
name|getEofTuples
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|eofTuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
comment|//There should be an EOF tuple for each worker.
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testParallelReducerStream
specifier|private
name|void
name|testParallelReducerStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|StreamFactory
name|streamFactory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"group"
argument_list|,
name|GroupOperation
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"reduce"
argument_list|,
name|ReducerStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|ParallelStream
name|pstream
init|=
operator|(
name|ParallelStream
operator|)
name|streamFactory
operator|.
name|constructStream
argument_list|(
literal|"parallel(collection1,"
operator|+
literal|"reduce("
operator|+
literal|"search(collection1, q=\"*:*\", fl=\"id,a_s,a_i,a_f\", sort=\"a_s asc,a_f asc\", partitionKeys=\"a_s\"), "
operator|+
literal|"by=\"a_s\","
operator|+
literal|"group(sort=\"a_i asc\", n=\"5\")), "
operator|+
literal|"workers=\"2\", zkHost=\""
operator|+
name|zkHost
operator|+
literal|"\", sort=\"a_s asc\")"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|Tuple
name|t0
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|maps0
init|=
name|t0
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|assertMaps
argument_list|(
name|maps0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|Tuple
name|t1
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|maps1
init|=
name|t1
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|assertMaps
argument_list|(
name|maps1
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|Tuple
name|t2
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|maps2
init|=
name|t2
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|assertMaps
argument_list|(
name|maps2
argument_list|,
literal|4
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|pstream
operator|=
operator|(
name|ParallelStream
operator|)
name|streamFactory
operator|.
name|constructStream
argument_list|(
literal|"parallel(collection1, "
operator|+
literal|"reduce("
operator|+
literal|"search(collection1, q=\"*:*\", fl=\"id,a_s,a_i,a_f\", sort=\"a_s desc,a_f asc\", partitionKeys=\"a_s\"), "
operator|+
literal|"by=\"a_s\", "
operator|+
literal|"group(sort=\"a_i desc\", n=\"5\")),"
operator|+
literal|"workers=\"2\", zkHost=\""
operator|+
name|zkHost
operator|+
literal|"\", sort=\"a_s desc\")"
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|t0
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|maps0
operator|=
name|t0
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
name|assertMaps
argument_list|(
name|maps0
argument_list|,
literal|6
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|t1
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|maps1
operator|=
name|t1
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
name|assertMaps
argument_list|(
name|maps1
argument_list|,
literal|8
argument_list|,
literal|7
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|t2
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|maps2
operator|=
name|t2
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
name|assertMaps
argument_list|(
name|maps2
argument_list|,
literal|9
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testParallelRankStream
specifier|private
name|void
name|testParallelRankStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"5"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"6"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"7"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"8"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"9"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"10"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|StreamFactory
name|streamFactory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"unique"
argument_list|,
name|UniqueStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"top"
argument_list|,
name|RankStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"group"
argument_list|,
name|ReducerStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|ParallelStream
name|pstream
init|=
operator|(
name|ParallelStream
operator|)
name|streamFactory
operator|.
name|constructStream
argument_list|(
literal|"parallel("
operator|+
literal|"collection1, "
operator|+
literal|"top("
operator|+
literal|"search(collection1, q=\"*:*\", fl=\"id,a_s,a_i\", sort=\"a_i asc\", partitionKeys=\"a_i\"), "
operator|+
literal|"n=\"11\", "
operator|+
literal|"sort=\"a_i desc\"), workers=\"2\", zkHost=\""
operator|+
name|zkHost
operator|+
literal|"\", sort=\"a_i desc\")"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|10
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|10
argument_list|,
literal|9
argument_list|,
literal|8
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testParallelMergeStream
specifier|private
name|void
name|testParallelMergeStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"8"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"7"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"100"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|StreamFactory
name|streamFactory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"unique"
argument_list|,
name|UniqueStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"top"
argument_list|,
name|RankStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"group"
argument_list|,
name|ReducerStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"merge"
argument_list|,
name|MergeStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//Test ascending
name|ParallelStream
name|pstream
init|=
operator|(
name|ParallelStream
operator|)
name|streamFactory
operator|.
name|constructStream
argument_list|(
literal|"parallel(collection1, merge(search(collection1, q=\"id:(4 1 8 7 9)\", fl=\"id,a_s,a_i\", sort=\"a_i asc\", partitionKeys=\"a_i\"), search(collection1, q=\"id:(0 2 3 6)\", fl=\"id,a_s,a_i\", sort=\"a_i asc\", partitionKeys=\"a_i\"), on=\"a_i asc\"), workers=\"2\", zkHost=\""
operator|+
name|zkHost
operator|+
literal|"\", sort=\"a_i asc\")"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|9
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|)
expr_stmt|;
comment|//Test descending
name|pstream
operator|=
operator|(
name|ParallelStream
operator|)
name|streamFactory
operator|.
name|constructStream
argument_list|(
literal|"parallel(collection1, merge(search(collection1, q=\"id:(4 1 8 9)\", fl=\"id,a_s,a_i\", sort=\"a_i desc\", partitionKeys=\"a_i\"), search(collection1, q=\"id:(0 2 3 6)\", fl=\"id,a_s,a_i\", sort=\"a_i desc\", partitionKeys=\"a_i\"), on=\"a_i desc\"), workers=\"2\", zkHost=\""
operator|+
name|zkHost
operator|+
literal|"\", sort=\"a_i desc\")"
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|8
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|9
argument_list|,
literal|8
argument_list|,
literal|6
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testParallelRollupStream
specifier|private
name|void
name|testParallelRollupStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"rollup"
argument_list|,
name|RollupStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"sum"
argument_list|,
name|SumMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"min"
argument_list|,
name|MinMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"max"
argument_list|,
name|MaxMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"avg"
argument_list|,
name|MeanMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"count"
argument_list|,
name|CountMetric
operator|.
name|class
argument_list|)
decl_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"parallel(collection1,"
operator|+
literal|"rollup("
operator|+
literal|"search(collection1, q=*:*, fl=\"a_s,a_i,a_f\", sort=\"a_s asc\", partitionKeys=\"a_s\"),"
operator|+
literal|"over=\"a_s\","
operator|+
literal|"sum(a_i),"
operator|+
literal|"sum(a_f),"
operator|+
literal|"min(a_i),"
operator|+
literal|"min(a_f),"
operator|+
literal|"max(a_i),"
operator|+
literal|"max(a_f),"
operator|+
literal|"avg(a_i),"
operator|+
literal|"avg(a_f),"
operator|+
literal|"count(*)"
operator|+
literal|"),"
operator|+
literal|"workers=\"2\", zkHost=\""
operator|+
name|zkServer
operator|.
name|getZkAddress
argument_list|()
operator|+
literal|"\", sort=\"a_s asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
comment|//Test Long and Double Sums
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|bucket
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
decl_stmt|;
name|Double
name|sumi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|sumf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|mini
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|minf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|maxi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|maxf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|avgi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|avgf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|count
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|17.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|18.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|0.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|14.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|10.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.25D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|38.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|26.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|13.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|6.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|15
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|5.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testInnerJoinStream
specifier|private
name|void
name|testInnerJoinStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_1"
argument_list|)
expr_stmt|;
comment|// 8, 9
name|indexr
argument_list|(
name|id
argument_list|,
literal|"15"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_1"
argument_list|)
expr_stmt|;
comment|// 8, 9
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_3"
argument_list|)
expr_stmt|;
comment|// 10
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_4"
argument_list|)
expr_stmt|;
comment|// 11
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"c"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_5"
argument_list|)
expr_stmt|;
comment|// 12
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"2"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"d"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"3"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"e"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_7"
argument_list|)
expr_stmt|;
comment|// 14
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_1"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
comment|// 1,15
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_2"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
comment|// 1,15
name|indexr
argument_list|(
name|id
argument_list|,
literal|"10"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_3"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// 3
name|indexr
argument_list|(
name|id
argument_list|,
literal|"11"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_4"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// 4
name|indexr
argument_list|(
name|id
argument_list|,
literal|"12"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"c"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_5"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// 5
name|indexr
argument_list|(
name|id
argument_list|,
literal|"13"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"2"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"dad"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_6"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"14"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"3"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"e"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_7"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
comment|// 7
name|commit
argument_list|()
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"innerJoin"
argument_list|,
name|InnerJoinStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Basic test
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"innerJoin("
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc, id asc\"),"
operator|+
literal|"search(collection1, q=\"side_s:right\", fl=\"join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc\"),"
operator|+
literal|"on=\"join1_i=join1_i, join2_s=join2_s\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|InnerJoinStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|8
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|7
argument_list|)
expr_stmt|;
comment|// Basic desc
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"innerJoin("
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i desc, join2_s asc\"),"
operator|+
literal|"search(collection1, q=\"side_s:right\", fl=\"join1_i,join2_s,ident_s\", sort=\"join1_i desc, join2_s asc\"),"
operator|+
literal|"on=\"join1_i=join1_i, join2_s=join2_s\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|InnerJoinStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|8
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|7
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|)
expr_stmt|;
comment|// Results in both searches, no join matches
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"innerJoin("
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"ident_s asc\"),"
operator|+
literal|"search(collection1, q=\"side_s:right\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"ident_s asc\", aliases=\"id=right.id, join1_i=right.join1_i, join2_s=right.join2_s, ident_s=right.ident_s\"),"
operator|+
literal|"on=\"ident_s=right.ident_s\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|InnerJoinStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
assert|;
comment|// Differing field names
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"innerJoin("
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc, id asc\"),"
operator|+
literal|"search(collection1, q=\"side_s:right\", fl=\"join3_i,join2_s,ident_s\", sort=\"join3_i asc, join2_s asc\", aliases=\"join3_i=aliasesField\"),"
operator|+
literal|"on=\"join1_i=aliasesField, join2_s=join2_s\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|InnerJoinStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|8
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testLeftOuterJoinStream
specifier|private
name|void
name|testLeftOuterJoinStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_1"
argument_list|)
expr_stmt|;
comment|// 8, 9
name|indexr
argument_list|(
name|id
argument_list|,
literal|"15"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_1"
argument_list|)
expr_stmt|;
comment|// 8, 9
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_3"
argument_list|)
expr_stmt|;
comment|// 10
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_4"
argument_list|)
expr_stmt|;
comment|// 11
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"c"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_5"
argument_list|)
expr_stmt|;
comment|// 12
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"2"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"d"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"3"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"e"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_7"
argument_list|)
expr_stmt|;
comment|// 14
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_1"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
comment|// 1,15
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_2"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
comment|// 1,15
name|indexr
argument_list|(
name|id
argument_list|,
literal|"10"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_3"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// 3
name|indexr
argument_list|(
name|id
argument_list|,
literal|"11"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_4"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// 4
name|indexr
argument_list|(
name|id
argument_list|,
literal|"12"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"c"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_5"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// 5
name|indexr
argument_list|(
name|id
argument_list|,
literal|"13"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"2"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"dad"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_6"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"14"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"3"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"e"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_7"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
comment|// 7
name|commit
argument_list|()
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"leftOuterJoin"
argument_list|,
name|LeftOuterJoinStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Basic test
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"leftOuterJoin("
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc, id asc\"),"
operator|+
literal|"search(collection1, q=\"side_s:right\", fl=\"join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc\"),"
operator|+
literal|"on=\"join1_i=join1_i, join2_s=join2_s\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|LeftOuterJoinStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|10
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|)
expr_stmt|;
comment|// Basic desc
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"leftOuterJoin("
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i desc, join2_s asc\"),"
operator|+
literal|"search(collection1, q=\"side_s:right\", fl=\"join1_i,join2_s,ident_s\", sort=\"join1_i desc, join2_s asc\"),"
operator|+
literal|"on=\"join1_i=join1_i, join2_s=join2_s\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|LeftOuterJoinStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|10
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Results in both searches, no join matches
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"leftOuterJoin("
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"ident_s asc\"),"
operator|+
literal|"search(collection1, q=\"side_s:right\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"ident_s asc\", aliases=\"id=right.id, join1_i=right.join1_i, join2_s=right.join2_s, ident_s=right.ident_s\"),"
operator|+
literal|"on=\"ident_s=right.ident_s\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|LeftOuterJoinStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|8
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|)
expr_stmt|;
comment|// Differing field names
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"leftOuterJoin("
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc, id asc\"),"
operator|+
literal|"search(collection1, q=\"side_s:right\", fl=\"join3_i,join2_s,ident_s\", sort=\"join3_i asc, join2_s asc\", aliases=\"join3_i=aliasesField\"),"
operator|+
literal|"on=\"join1_i=aliasesField, join2_s=join2_s\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|LeftOuterJoinStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|10
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testHashJoinStream
specifier|private
name|void
name|testHashJoinStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_1"
argument_list|)
expr_stmt|;
comment|// 8, 9
name|indexr
argument_list|(
name|id
argument_list|,
literal|"15"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_1"
argument_list|)
expr_stmt|;
comment|// 8, 9
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_3"
argument_list|)
expr_stmt|;
comment|// 10
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_4"
argument_list|)
expr_stmt|;
comment|// 11
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"c"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_5"
argument_list|)
expr_stmt|;
comment|// 12
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"2"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"d"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"3"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"e"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_7"
argument_list|)
expr_stmt|;
comment|// 14
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_1"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
comment|// 1,15
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_2"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
comment|// 1,15
name|indexr
argument_list|(
name|id
argument_list|,
literal|"10"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_3"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// 3
name|indexr
argument_list|(
name|id
argument_list|,
literal|"11"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_4"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// 4
name|indexr
argument_list|(
name|id
argument_list|,
literal|"12"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"c"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_5"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// 5
name|indexr
argument_list|(
name|id
argument_list|,
literal|"13"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"2"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"dad"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_6"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"14"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"3"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"e"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_7"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
comment|// 7
name|commit
argument_list|()
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"hashJoin"
argument_list|,
name|HashJoinStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Basic test
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"hashJoin("
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc, id asc\"),"
operator|+
literal|"hashed=search(collection1, q=\"side_s:right\", fl=\"join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc\"),"
operator|+
literal|"on=\"join1_i, join2_s\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|HashJoinStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|8
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|7
argument_list|)
expr_stmt|;
comment|// Basic desc
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"hashJoin("
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i desc, join2_s asc\"),"
operator|+
literal|"hashed=search(collection1, q=\"side_s:right\", fl=\"join1_i,join2_s,ident_s\", sort=\"join1_i desc, join2_s asc\"),"
operator|+
literal|"on=\"join1_i, join2_s\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|HashJoinStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|8
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|7
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|)
expr_stmt|;
comment|// Results in both searches, no join matches
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"hashJoin("
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"ident_s asc\"),"
operator|+
literal|"hashed=search(collection1, q=\"side_s:right\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"ident_s asc\"),"
operator|+
literal|"on=\"ident_s\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|HashJoinStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
assert|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testOuterHashJoinStream
specifier|private
name|void
name|testOuterHashJoinStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_1"
argument_list|)
expr_stmt|;
comment|// 8, 9
name|indexr
argument_list|(
name|id
argument_list|,
literal|"15"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_1"
argument_list|)
expr_stmt|;
comment|// 8, 9
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_3"
argument_list|)
expr_stmt|;
comment|// 10
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_4"
argument_list|)
expr_stmt|;
comment|// 11
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"c"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_5"
argument_list|)
expr_stmt|;
comment|// 12
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"2"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"d"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"3"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"e"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_7"
argument_list|)
expr_stmt|;
comment|// 14
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_1"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
comment|// 1,15
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_2"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
comment|// 1,15
name|indexr
argument_list|(
name|id
argument_list|,
literal|"10"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_3"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// 3
name|indexr
argument_list|(
name|id
argument_list|,
literal|"11"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_4"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// 4
name|indexr
argument_list|(
name|id
argument_list|,
literal|"12"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"c"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_5"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// 5
name|indexr
argument_list|(
name|id
argument_list|,
literal|"13"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"2"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"dad"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_6"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"14"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"3"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"e"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_7"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
comment|// 7
name|commit
argument_list|()
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"outerHashJoin"
argument_list|,
name|OuterHashJoinStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Basic test
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"outerHashJoin("
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc, id asc\"),"
operator|+
literal|"hashed=search(collection1, q=\"side_s:right\", fl=\"join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc\"),"
operator|+
literal|"on=\"join1_i, join2_s\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|OuterHashJoinStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|10
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|)
expr_stmt|;
comment|// Basic desc
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"outerHashJoin("
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i desc, join2_s asc\"),"
operator|+
literal|"hashed=search(collection1, q=\"side_s:right\", fl=\"join1_i,join2_s,ident_s\", sort=\"join1_i desc, join2_s asc\"),"
operator|+
literal|"on=\"join1_i, join2_s\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|OuterHashJoinStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|10
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Results in both searches, no join matches
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"outerHashJoin("
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"ident_s asc\"),"
operator|+
literal|"hashed=search(collection1, q=\"side_s:right\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"ident_s asc\"),"
operator|+
literal|"on=\"ident_s\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|OuterHashJoinStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|8
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testSelectStream
specifier|private
name|void
name|testSelectStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_1"
argument_list|)
expr_stmt|;
comment|// 8, 9
name|indexr
argument_list|(
name|id
argument_list|,
literal|"15"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_1"
argument_list|)
expr_stmt|;
comment|// 8, 9
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_3"
argument_list|)
expr_stmt|;
comment|// 10
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_4"
argument_list|)
expr_stmt|;
comment|// 11
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"c"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_5"
argument_list|)
expr_stmt|;
comment|// 12
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"2"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"d"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"3"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"e"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_7"
argument_list|)
expr_stmt|;
comment|// 14
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_1"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
comment|// 1,15
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_2"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
comment|// 1,15
name|indexr
argument_list|(
name|id
argument_list|,
literal|"10"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_3"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// 3
name|indexr
argument_list|(
name|id
argument_list|,
literal|"11"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_4"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// 4
name|indexr
argument_list|(
name|id
argument_list|,
literal|"12"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"c"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_5"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// 5
name|indexr
argument_list|(
name|id
argument_list|,
literal|"13"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"2"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"dad"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_6"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"14"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"3"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"e"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_7"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
comment|// 7
name|commit
argument_list|()
expr_stmt|;
name|String
name|clause
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"innerJoin"
argument_list|,
name|InnerJoinStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"select"
argument_list|,
name|SelectStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"replace"
argument_list|,
name|ReplaceOperation
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"concat"
argument_list|,
name|ConcatOperation
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Basic test
name|clause
operator|=
literal|"select("
operator|+
literal|"id, join1_i as join1, join2_s as join2, ident_s as identity,"
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc, id asc\")"
operator|+
literal|")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertFields
argument_list|(
name|tuples
argument_list|,
literal|"id"
argument_list|,
literal|"join1"
argument_list|,
literal|"join2"
argument_list|,
literal|"identity"
argument_list|)
expr_stmt|;
name|assertNotFields
argument_list|(
name|tuples
argument_list|,
literal|"join1_i"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"ident_s"
argument_list|)
expr_stmt|;
comment|// Basic with replacements test
name|clause
operator|=
literal|"select("
operator|+
literal|"id, join1_i as join1, join2_s as join2, ident_s as identity,"
operator|+
literal|"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),"
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc, id asc\")"
operator|+
literal|")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertFields
argument_list|(
name|tuples
argument_list|,
literal|"id"
argument_list|,
literal|"join1"
argument_list|,
literal|"join2"
argument_list|,
literal|"identity"
argument_list|)
expr_stmt|;
name|assertNotFields
argument_list|(
name|tuples
argument_list|,
literal|"join1_i"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"ident_s"
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"join1"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"join1"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"join1"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|,
literal|"join1"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|assertString
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|,
literal|"join1"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
comment|// Basic with replacements and concat test
name|clause
operator|=
literal|"select("
operator|+
literal|"id, join1_i as join1, join2_s as join2, ident_s as identity,"
operator|+
literal|"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),"
operator|+
literal|"concat(fields=\"identity,join1\", as=\"newIdentity\",delim=\"-\"),"
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc, id asc\")"
operator|+
literal|")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertFields
argument_list|(
name|tuples
argument_list|,
literal|"id"
argument_list|,
literal|"join1"
argument_list|,
literal|"join2"
argument_list|,
literal|"identity"
argument_list|,
literal|"newIdentity"
argument_list|)
expr_stmt|;
name|assertNotFields
argument_list|(
name|tuples
argument_list|,
literal|"join1_i"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"ident_s"
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"join1"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|assertString
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"newIdentity"
argument_list|,
literal|"left_1-12"
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"join1"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|assertString
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"newIdentity"
argument_list|,
literal|"left_1-12"
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"join1"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|assertString
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"newIdentity"
argument_list|,
literal|"left_2-12"
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|,
literal|"join1"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|assertString
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|,
literal|"newIdentity"
argument_list|,
literal|"left_7-12"
argument_list|)
expr_stmt|;
name|assertString
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|,
literal|"join1"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|assertString
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|,
literal|"newIdentity"
argument_list|,
literal|"left_6-d"
argument_list|)
expr_stmt|;
comment|// Inner stream test
name|clause
operator|=
literal|"innerJoin("
operator|+
literal|"select("
operator|+
literal|"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,"
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc, id asc\")"
operator|+
literal|"),"
operator|+
literal|"select("
operator|+
literal|"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,"
operator|+
literal|"search(collection1, q=\"side_s:right\", fl=\"join3_i,join2_s,ident_s\", sort=\"join3_i asc, join2_s asc\"),"
operator|+
literal|"),"
operator|+
literal|"on=\"left.join1=right.join1, left.join2=right.join2\""
operator|+
literal|")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertFields
argument_list|(
name|tuples
argument_list|,
literal|"id"
argument_list|,
literal|"left.join1"
argument_list|,
literal|"left.join2"
argument_list|,
literal|"left.ident"
argument_list|,
literal|"right.join1"
argument_list|,
literal|"right.join2"
argument_list|,
literal|"right.ident"
argument_list|)
expr_stmt|;
comment|// Wrapped select test
name|clause
operator|=
literal|"select("
operator|+
literal|"id, left.ident, right.ident,"
operator|+
literal|"innerJoin("
operator|+
literal|"select("
operator|+
literal|"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,"
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc, id asc\")"
operator|+
literal|"),"
operator|+
literal|"select("
operator|+
literal|"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,"
operator|+
literal|"search(collection1, q=\"side_s:right\", fl=\"join3_i,join2_s,ident_s\", sort=\"join3_i asc, join2_s asc\"),"
operator|+
literal|"),"
operator|+
literal|"on=\"left.join1=right.join1, left.join2=right.join2\""
operator|+
literal|")"
operator|+
literal|")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertFields
argument_list|(
name|tuples
argument_list|,
literal|"id"
argument_list|,
literal|"left.ident"
argument_list|,
literal|"right.ident"
argument_list|)
expr_stmt|;
name|assertNotFields
argument_list|(
name|tuples
argument_list|,
literal|"left.join1"
argument_list|,
literal|"left.join2"
argument_list|,
literal|"right.join1"
argument_list|,
literal|"right.join2"
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testFacetStream
specifier|private
name|void
name|testFacetStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|clause
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"facet"
argument_list|,
name|FacetStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"sum"
argument_list|,
name|SumMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"min"
argument_list|,
name|MinMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"max"
argument_list|,
name|MaxMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"avg"
argument_list|,
name|MeanMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"count"
argument_list|,
name|CountMetric
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Basic test
name|clause
operator|=
literal|"facet("
operator|+
literal|"collection1, "
operator|+
literal|"q=\"*:*\", "
operator|+
literal|"fl=\"a_s,a_i,a_f\", "
operator|+
literal|"sort=\"a_s asc\", "
operator|+
literal|"buckets=\"a_s\", "
operator|+
literal|"bucketSorts=\"sum(a_i) asc\", "
operator|+
literal|"bucketSizeLimit=100, "
operator|+
literal|"sum(a_i), sum(a_f), "
operator|+
literal|"min(a_i), min(a_f), "
operator|+
literal|"max(a_i), max(a_f), "
operator|+
literal|"avg(a_i), avg(a_f), "
operator|+
literal|"count(*)"
operator|+
literal|")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
comment|//Test Long and Double Sums
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|bucket
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
decl_stmt|;
name|Double
name|sumi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|sumf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|mini
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|minf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|maxi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|maxf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|avgi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|avgf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|count
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|15
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|5.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|17.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|18.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|0.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|14.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|10.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.25D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|38.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|26.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|13.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|6.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
comment|//Reverse the Sort.
name|clause
operator|=
literal|"facet("
operator|+
literal|"collection1, "
operator|+
literal|"q=\"*:*\", "
operator|+
literal|"fl=\"a_s,a_i,a_f\", "
operator|+
literal|"sort=\"a_s asc\", "
operator|+
literal|"buckets=\"a_s\", "
operator|+
literal|"bucketSorts=\"sum(a_i) desc\", "
operator|+
literal|"bucketSizeLimit=100, "
operator|+
literal|"sum(a_i), sum(a_f), "
operator|+
literal|"min(a_i), min(a_f), "
operator|+
literal|"max(a_i), max(a_f), "
operator|+
literal|"avg(a_i), avg(a_f), "
operator|+
literal|"count(*)"
operator|+
literal|")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
comment|//Test Long and Double Sums
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|38.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|26.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|13.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|6.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|17.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|18.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|0.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|14.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|10.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.25D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|15
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|5.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|//Test index sort
name|clause
operator|=
literal|"facet("
operator|+
literal|"collection1, "
operator|+
literal|"q=\"*:*\", "
operator|+
literal|"fl=\"a_s,a_i,a_f\", "
operator|+
literal|"sort=\"a_s asc\", "
operator|+
literal|"buckets=\"a_s\", "
operator|+
literal|"bucketSorts=\"a_s desc\", "
operator|+
literal|"bucketSizeLimit=100, "
operator|+
literal|"sum(a_i), sum(a_f), "
operator|+
literal|"min(a_i), min(a_f), "
operator|+
literal|"max(a_i), max(a_f), "
operator|+
literal|"avg(a_i), avg(a_f), "
operator|+
literal|"count(*)"
operator|+
literal|")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|15
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|5.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|38.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|26.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|13.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|6.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|17.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|18.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|0.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|14.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|10.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.25D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
comment|//Test index sort
name|clause
operator|=
literal|"facet("
operator|+
literal|"collection1, "
operator|+
literal|"q=\"*:*\", "
operator|+
literal|"fl=\"a_s,a_i,a_f\", "
operator|+
literal|"sort=\"a_s asc\", "
operator|+
literal|"buckets=\"a_s\", "
operator|+
literal|"bucketSorts=\"a_s asc\", "
operator|+
literal|"bucketSizeLimit=100, "
operator|+
literal|"sum(a_i), sum(a_f), "
operator|+
literal|"min(a_i), min(a_f), "
operator|+
literal|"max(a_i), max(a_f), "
operator|+
literal|"avg(a_i), avg(a_f), "
operator|+
literal|"count(*)"
operator|+
literal|")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|17.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|18.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|0.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|14.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|10.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.25D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|38.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|26.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|13.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|6.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|15
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|5.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testSubFacetStream
specifier|private
name|void
name|testSubFacetStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|String
name|clause
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"facet"
argument_list|,
name|FacetStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"sum"
argument_list|,
name|SumMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"min"
argument_list|,
name|MinMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"max"
argument_list|,
name|MaxMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"avg"
argument_list|,
name|MeanMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"count"
argument_list|,
name|CountMetric
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Basic test
name|clause
operator|=
literal|"facet("
operator|+
literal|"collection1, "
operator|+
literal|"q=\"*:*\", "
operator|+
literal|"buckets=\"level1_s, level2_s\", "
operator|+
literal|"bucketSorts=\"sum(a_i) desc, sum(a_i) desc)\", "
operator|+
literal|"bucketSizeLimit=100, "
operator|+
literal|"sum(a_i), count(*)"
operator|+
literal|")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|)
assert|;
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|bucket1
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
decl_stmt|;
name|String
name|bucket2
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
decl_stmt|;
name|Double
name|sumi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|count
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|35
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|15
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|11
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|clause
operator|=
literal|"facet("
operator|+
literal|"collection1, "
operator|+
literal|"q=\"*:*\", "
operator|+
literal|"buckets=\"level1_s, level2_s\", "
operator|+
literal|"bucketSorts=\"level1_s desc, level2_s desc)\", "
operator|+
literal|"bucketSizeLimit=100, "
operator|+
literal|"sum(a_i), count(*)"
operator|+
literal|")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|11
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|35
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|15
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testTopicStream
specifier|private
name|void
name|testTopicStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"topic"
argument_list|,
name|TopicStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"daemon"
argument_list|,
name|DaemonStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|SolrClientCache
name|cache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
try|try
block|{
comment|//Store checkpoints in the same index as the main documents. This perfectly valid
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"topic(collection1, collection1, q=\"a_s:hello\", fl=\"id\", id=\"1000000\", checkpointEvery=3)"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|StreamContext
name|context
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
comment|//Should be zero because the checkpoints will be set to the highest vesion on the shards.
name|assertEquals
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
comment|//Now check to see if the checkpoints are present
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search(collection1, q=\"id:1000000\", fl=\"id, checkpoint_ss, _version_\", sort=\"id asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|checkpoints
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStrings
argument_list|(
literal|"checkpoint_ss"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|checkpoints
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Long
name|version1
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"_version_"
argument_list|)
decl_stmt|;
comment|//Index a few more documents
name|indexr
argument_list|(
name|id
argument_list|,
literal|"10"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"11"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"topic(collection1, collection1, fl=\"id\", q=\"a_s:hello\", id=\"1000000\", checkpointEvery=2)"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
try|try
block|{
name|stream
operator|.
name|open
argument_list|()
expr_stmt|;
name|Tuple
name|tuple1
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|long
operator|)
name|tuple1
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
argument_list|,
literal|10l
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
comment|// Checkpoint should not have changed.
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search(collection1, q=\"id:1000000\", fl=\"id, checkpoint_ss, _version_\", sort=\"id asc\")"
argument_list|)
expr_stmt|;
name|TupleStream
name|cstream
init|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|cstream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|cstream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkpoints
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStrings
argument_list|(
literal|"checkpoint_ss"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|checkpoints
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Long
name|version2
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"_version_"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|version1
argument_list|,
name|version2
argument_list|)
expr_stmt|;
name|Tuple
name|tuple2
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|long
operator|)
name|tuple2
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
argument_list|,
literal|11l
argument_list|)
expr_stmt|;
comment|//Checkpoint should have changed.
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search(collection1, q=\"id:1000000\", fl=\"id, checkpoint_ss, _version_\", sort=\"id asc\")"
argument_list|)
expr_stmt|;
name|cstream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|cstream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|cstream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkpoints
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStrings
argument_list|(
literal|"checkpoint_ss"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|checkpoints
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Long
name|version3
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"_version_"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|version3
operator|>
name|version2
argument_list|)
expr_stmt|;
name|Tuple
name|tuple3
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|tuple3
operator|.
name|EOF
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//Test with the DaemonStream
name|DaemonStream
name|dstream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"daemon(topic(collection1, collection1, fl=\"id\", q=\"a_s:hello\", id=\"1000000\", checkpointEvery=2), id=\"test\", runInterval=\"1000\", queueSize=\"9\")"
argument_list|)
expr_stmt|;
name|dstream
operator|=
operator|(
name|DaemonStream
operator|)
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|dstream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|//Index a few more documents
name|indexr
argument_list|(
name|id
argument_list|,
literal|"12"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"13"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
comment|//Start reading from the DaemonStream
name|Tuple
name|tuple
init|=
literal|null
decl_stmt|;
name|dstream
operator|.
name|open
argument_list|()
expr_stmt|;
name|tuple
operator|=
name|dstream
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
operator|(
name|long
operator|)
name|tuple
operator|.
name|getLong
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|dstream
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|13
argument_list|,
operator|(
name|long
operator|)
name|tuple
operator|.
name|getLong
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
comment|// We want to see if the version has been updated after reading two tuples
comment|//Index a few more documents
name|indexr
argument_list|(
name|id
argument_list|,
literal|"14"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"15"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
comment|//Read from the same DaemonStream stream
name|tuple
operator|=
name|dstream
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
operator|(
name|long
operator|)
name|tuple
operator|.
name|getLong
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|dstream
operator|.
name|read
argument_list|()
expr_stmt|;
comment|// This should trigger a checkpoint as it's the 4th read from the stream.
name|assertEquals
argument_list|(
literal|15
argument_list|,
operator|(
name|long
operator|)
name|tuple
operator|.
name|getLong
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|dstream
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|tuple
operator|=
name|dstream
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|tuple
operator|.
name|EOF
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dstream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testUpdateStream
specifier|private
name|void
name|testUpdateStream
parameter_list|()
throws|throws
name|Exception
block|{
name|CloudSolrClient
name|destinationCollectionClient
init|=
name|createCloudClient
argument_list|(
literal|"destinationCollection"
argument_list|)
decl_stmt|;
name|createCollection
argument_list|(
literal|"destinationCollection"
argument_list|,
name|destinationCollectionClient
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"4"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa1"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb1"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"44"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"77"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa2"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb2"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"444"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"777"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa3"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb3"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"4444"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"7777"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa4"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb4"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"44444"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"77777"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|waitForRecoveriesToFinish
argument_list|(
literal|"destinationCollection"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|Tuple
name|t
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withCollectionZkHost
argument_list|(
literal|"destinationCollection"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"update"
argument_list|,
name|UpdateStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//Copy all docs to destinationCollection
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"update(destinationCollection, batchSize=5, search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f,s_multi,i_multi\", sort=\"a_f asc, a_i asc\"))"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|UpdateStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|destinationCollectionClient
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|//Ensure that all UpdateStream tuples indicate the correct number of copied/indexed docs
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|t
operator|.
name|EOF
operator|==
literal|false
operator|)
assert|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|"batchIndexed"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Ensure that destinationCollection actually has the new docs.
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search(destinationCollection, q=*:*, fl=\"id,a_s,a_i,a_f,s_multi,i_multi\", sort=\"a_i asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|0
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|0
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|0.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa"
argument_list|,
literal|"bbbb"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello1"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|1.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa4"
argument_list|,
literal|"bbbb4"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"44444"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"77777"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello2"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|0.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa1"
argument_list|,
literal|"bbbb1"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"44"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"77"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|3.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa2"
argument_list|,
literal|"bbbb2"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"444"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"777"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|4.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa3"
argument_list|,
literal|"bbbb3"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"4444"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"7777"
argument_list|)
argument_list|)
expr_stmt|;
name|destinationCollectionClient
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|destinationCollectionClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|destinationCollectionClient
operator|.
name|close
argument_list|()
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testParallelUpdateStream
specifier|private
name|void
name|testParallelUpdateStream
parameter_list|()
throws|throws
name|Exception
block|{
name|CloudSolrClient
name|destinationCollectionClient
init|=
name|createCloudClient
argument_list|(
literal|"parallelDestinationCollection"
argument_list|)
decl_stmt|;
name|createCollection
argument_list|(
literal|"parallelDestinationCollection"
argument_list|,
name|destinationCollectionClient
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"4"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa1"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb1"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"44"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"77"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa2"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb2"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"444"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"777"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa3"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb3"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"4444"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"7777"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa4"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb4"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"44444"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"77777"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|waitForRecoveriesToFinish
argument_list|(
literal|"parallelDestinationCollection"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|Tuple
name|t
decl_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withCollectionZkHost
argument_list|(
literal|"parallelDestinationCollection"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"update"
argument_list|,
name|UpdateStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//Copy all docs to destinationCollection
name|String
name|updateExpression
init|=
literal|"update(parallelDestinationCollection, batchSize=2, search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f,s_multi,i_multi\", sort=\"a_f asc, a_i asc\", partitionKeys=\"a_f\"))"
decl_stmt|;
name|TupleStream
name|parallelUpdateStream
init|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"parallel(collection1, "
operator|+
name|updateExpression
operator|+
literal|", workers=\"2\", zkHost=\""
operator|+
name|zkHost
operator|+
literal|"\", sort=\"batchNumber asc\")"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|parallelUpdateStream
argument_list|)
decl_stmt|;
name|destinationCollectionClient
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|//Ensure that all UpdateStream tuples indicate the correct number of copied/indexed docs
name|long
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Tuple
name|tuple
range|:
name|tuples
control|)
block|{
name|count
operator|+=
name|tuple
operator|.
name|getLong
argument_list|(
literal|"batchIndexed"
argument_list|)
expr_stmt|;
block|}
assert|assert
operator|(
name|count
operator|==
literal|5
operator|)
assert|;
comment|//Ensure that destinationCollection actually has the new docs.
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search(parallelDestinationCollection, q=*:*, fl=\"id,a_s,a_i,a_f,s_multi,i_multi\", sort=\"a_i asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|0
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|0
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|0.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa"
argument_list|,
literal|"bbbb"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello1"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|1.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa4"
argument_list|,
literal|"bbbb4"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"44444"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"77777"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello2"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|0.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa1"
argument_list|,
literal|"bbbb1"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"44"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"77"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|3.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa2"
argument_list|,
literal|"bbbb2"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"444"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"777"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|4.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa3"
argument_list|,
literal|"bbbb3"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"4444"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"7777"
argument_list|)
argument_list|)
expr_stmt|;
name|destinationCollectionClient
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|destinationCollectionClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|destinationCollectionClient
operator|.
name|close
argument_list|()
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testParallelDaemonUpdateStream
specifier|private
name|void
name|testParallelDaemonUpdateStream
parameter_list|()
throws|throws
name|Exception
block|{
name|CloudSolrClient
name|destinationCollectionClient
init|=
name|createCloudClient
argument_list|(
literal|"parallelDestinationCollection1"
argument_list|)
decl_stmt|;
name|createCollection
argument_list|(
literal|"parallelDestinationCollection1"
argument_list|,
name|destinationCollectionClient
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"4"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa1"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb1"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"44"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"77"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa2"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb2"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"444"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"777"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa3"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb3"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"4444"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"7777"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa4"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb4"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"44444"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"77777"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|waitForRecoveriesToFinish
argument_list|(
literal|"parallelDestinationCollection1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|Tuple
name|t
decl_stmt|;
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withCollectionZkHost
argument_list|(
literal|"parallelDestinationCollection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"update"
argument_list|,
name|UpdateStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"daemon"
argument_list|,
name|DaemonStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//Copy all docs to destinationCollection
name|String
name|updateExpression
init|=
literal|"daemon(update(parallelDestinationCollection1, batchSize=2, search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f,s_multi,i_multi\", sort=\"a_f asc, a_i asc\", partitionKeys=\"a_f\")), runInterval=\"1000\", id=\"test\")"
decl_stmt|;
name|TupleStream
name|parallelUpdateStream
init|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"parallel(collection1, "
operator|+
name|updateExpression
operator|+
literal|", workers=\"2\", zkHost=\""
operator|+
name|zkHost
operator|+
literal|"\", sort=\"batchNumber asc\")"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|parallelUpdateStream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
comment|//Lets sleep long enough for daemon updates to run.
comment|//Lets stop the daemons
name|Map
name|params
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"action"
argument_list|,
literal|"list"
argument_list|)
expr_stmt|;
name|int
name|workersComplete
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CloudJettyRunner
name|jetty
range|:
name|this
operator|.
name|cloudJettys
control|)
block|{
name|int
name|iterations
init|=
literal|0
decl_stmt|;
name|INNER
label|:
while|while
condition|(
name|iterations
operator|==
literal|0
condition|)
block|{
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|solrStream
operator|.
name|open
argument_list|()
expr_stmt|;
name|Tuple
name|tupleResponse
init|=
name|solrStream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|tupleResponse
operator|.
name|EOF
condition|)
block|{
name|solrStream
operator|.
name|close
argument_list|()
expr_stmt|;
break|break
name|INNER
break|;
block|}
else|else
block|{
name|long
name|l
init|=
name|tupleResponse
operator|.
name|getLong
argument_list|(
literal|"iterations"
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|>
literal|0
condition|)
block|{
operator|++
name|workersComplete
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{              }
block|}
name|iterations
operator|=
operator|(
name|int
operator|)
name|l
expr_stmt|;
name|solrStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
assert|assert
operator|(
name|workersComplete
operator|==
literal|2
operator|)
assert|;
name|destinationCollectionClient
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|//Lets stop the daemons
name|params
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"action"
argument_list|,
literal|"stop"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
for|for
control|(
name|CloudJettyRunner
name|jetty
range|:
name|this
operator|.
name|cloudJettys
control|)
block|{
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|solrStream
operator|.
name|open
argument_list|()
expr_stmt|;
name|Tuple
name|tupleResponse
init|=
name|solrStream
operator|.
name|read
argument_list|()
decl_stmt|;
name|solrStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|params
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"action"
argument_list|,
literal|"list"
argument_list|)
expr_stmt|;
name|workersComplete
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|CloudJettyRunner
name|jetty
range|:
name|this
operator|.
name|cloudJettys
control|)
block|{
name|long
name|stopTime
init|=
literal|0
decl_stmt|;
name|INNER
label|:
while|while
condition|(
name|stopTime
operator|==
literal|0
condition|)
block|{
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|solrStream
operator|.
name|open
argument_list|()
expr_stmt|;
name|Tuple
name|tupleResponse
init|=
name|solrStream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|tupleResponse
operator|.
name|EOF
condition|)
block|{
name|solrStream
operator|.
name|close
argument_list|()
expr_stmt|;
break|break
name|INNER
break|;
block|}
else|else
block|{
name|stopTime
operator|=
name|tupleResponse
operator|.
name|getLong
argument_list|(
literal|"stopTime"
argument_list|)
expr_stmt|;
if|if
condition|(
name|stopTime
operator|>
literal|0
condition|)
block|{
operator|++
name|workersComplete
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{              }
block|}
name|solrStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|assertTrue
argument_list|(
name|workersComplete
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|//Ensure that destinationCollection actually has the new docs.
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search(parallelDestinationCollection1, q=*:*, fl=\"id,a_s,a_i,a_f,s_multi,i_multi\", sort=\"a_i asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|0
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|0
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|0.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa"
argument_list|,
literal|"bbbb"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello1"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|1.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa4"
argument_list|,
literal|"bbbb4"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"44444"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"77777"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello2"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|0.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa1"
argument_list|,
literal|"bbbb1"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"44"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"77"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|3.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa2"
argument_list|,
literal|"bbbb2"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"444"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"777"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|4.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa3"
argument_list|,
literal|"bbbb3"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"4444"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"7777"
argument_list|)
argument_list|)
expr_stmt|;
name|destinationCollectionClient
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|destinationCollectionClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|destinationCollectionClient
operator|.
name|close
argument_list|()
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testIntersectStream
specifier|private
name|void
name|testIntersectStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setAB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setAB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"intersect"
argument_list|,
name|IntersectStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// basic
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"intersect("
operator|+
literal|"search(collection1, q=a_s:(setA || setAB), fl=\"id,a_s,a_i\", sort=\"a_i asc, a_s asc\"),"
operator|+
literal|"search(collection1, q=a_s:(setB || setAB), fl=\"id,a_s,a_i\", sort=\"a_i asc\"),"
operator|+
literal|"on=\"a_i\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|IntersectStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testParallelIntersectStream
specifier|private
name|void
name|testParallelIntersectStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setAB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setAB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|StreamFactory
name|streamFactory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"intersect"
argument_list|,
name|IntersectStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// basic
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
specifier|final
name|TupleStream
name|stream
init|=
name|streamFactory
operator|.
name|constructStream
argument_list|(
literal|"parallel("
operator|+
literal|"collection1, "
operator|+
literal|"intersect("
operator|+
literal|"search(collection1, q=a_s:(setA || setAB), fl=\"id,a_s,a_i\", sort=\"a_i asc, a_s asc\", partitionKeys=\"a_i\"),"
operator|+
literal|"search(collection1, q=a_s:(setB || setAB), fl=\"id,a_s,a_i\", sort=\"a_i asc\", partitionKeys=\"a_i\"),"
operator|+
literal|"on=\"a_i\"),"
operator|+
literal|"workers=\"2\", zkHost=\""
operator|+
name|zkHost
operator|+
literal|"\", sort=\"a_i asc\")"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|stream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testComplementStream
specifier|private
name|void
name|testComplementStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setAB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setAB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"complement"
argument_list|,
name|ComplementStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// basic
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"complement("
operator|+
literal|"search(collection1, q=a_s:(setA || setAB), fl=\"id,a_s,a_i\", sort=\"a_i asc, a_s asc\"),"
operator|+
literal|"search(collection1, q=a_s:(setB || setAB), fl=\"id,a_s,a_i\", sort=\"a_i asc\"),"
operator|+
literal|"on=\"a_i\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|ComplementStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testParallelComplementStream
specifier|private
name|void
name|testParallelComplementStream
parameter_list|()
throws|throws
name|Exception
block|{
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setAB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setAB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|StreamFactory
name|streamFactory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"complement"
argument_list|,
name|ComplementStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|zkHost
init|=
name|zkServer
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
specifier|final
name|TupleStream
name|stream
init|=
name|streamFactory
operator|.
name|constructStream
argument_list|(
literal|"parallel("
operator|+
literal|"collection1, "
operator|+
literal|"complement("
operator|+
literal|"search(collection1, q=a_s:(setA || setAB), fl=\"id,a_s,a_i\", sort=\"a_i asc, a_s asc\", partitionKeys=\"a_i\"),"
operator|+
literal|"search(collection1, q=a_s:(setB || setAB), fl=\"id,a_s,a_i\", sort=\"a_i asc\", partitionKeys=\"a_i\"),"
operator|+
literal|"on=\"a_i\"),"
operator|+
literal|"workers=\"2\", zkHost=\""
operator|+
name|zkHost
operator|+
literal|"\", sort=\"a_i asc\")"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|stream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|getTuples
specifier|protected
name|List
argument_list|<
name|Tuple
argument_list|>
name|getTuples
parameter_list|(
name|TupleStream
name|tupleStream
parameter_list|)
throws|throws
name|IOException
block|{
name|tupleStream
operator|.
name|open
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
operator|new
name|ArrayList
argument_list|<
name|Tuple
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Tuple
name|t
init|=
name|tupleStream
operator|.
name|read
argument_list|()
init|;
operator|!
name|t
operator|.
name|EOF
condition|;
name|t
operator|=
name|tupleStream
operator|.
name|read
argument_list|()
control|)
block|{
name|tuples
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|tupleStream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|tuples
return|;
block|}
DECL|method|assertOrder
specifier|protected
name|boolean
name|assertOrder
parameter_list|(
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
parameter_list|,
name|int
modifier|...
name|ids
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|assertOrderOf
argument_list|(
name|tuples
argument_list|,
literal|"id"
argument_list|,
name|ids
argument_list|)
return|;
block|}
DECL|method|assertOrderOf
specifier|protected
name|boolean
name|assertOrderOf
parameter_list|(
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|int
modifier|...
name|ids
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|val
range|:
name|ids
control|)
block|{
name|Tuple
name|t
init|=
name|tuples
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Long
name|tip
init|=
operator|(
name|Long
operator|)
name|t
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tip
operator|.
name|intValue
argument_list|()
operator|!=
name|val
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Found value:"
operator|+
name|tip
operator|.
name|intValue
argument_list|()
operator|+
literal|" expecting:"
operator|+
name|val
argument_list|)
throw|;
block|}
operator|++
name|i
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertMapOrder
specifier|protected
name|boolean
name|assertMapOrder
parameter_list|(
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
parameter_list|,
name|int
modifier|...
name|ids
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|val
range|:
name|ids
control|)
block|{
name|Tuple
name|t
init|=
name|tuples
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|tip
init|=
name|t
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|int
name|id
init|=
operator|(
name|int
operator|)
name|tip
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
name|val
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Found value:"
operator|+
name|id
operator|+
literal|" expecting:"
operator|+
name|val
argument_list|)
throw|;
block|}
operator|++
name|i
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertFields
specifier|protected
name|boolean
name|assertFields
parameter_list|(
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
parameter_list|,
name|String
modifier|...
name|fields
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Tuple
name|tuple
range|:
name|tuples
control|)
block|{
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
operator|!
name|tuple
operator|.
name|fields
operator|.
name|containsKey
argument_list|(
name|field
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Expected field '%s' not found"
argument_list|,
name|field
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertNotFields
specifier|protected
name|boolean
name|assertNotFields
parameter_list|(
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
parameter_list|,
name|String
modifier|...
name|fields
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Tuple
name|tuple
range|:
name|tuples
control|)
block|{
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|tuple
operator|.
name|fields
operator|.
name|containsKey
argument_list|(
name|field
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Unexpected field '%s' found"
argument_list|,
name|field
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertGroupOrder
specifier|protected
name|boolean
name|assertGroupOrder
parameter_list|(
name|Tuple
name|tuple
parameter_list|,
name|int
modifier|...
name|ids
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|?
argument_list|>
name|group
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|tuple
operator|.
name|get
argument_list|(
literal|"tuples"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|val
range|:
name|ids
control|)
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|t
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|group
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Long
name|tip
init|=
operator|(
name|Long
operator|)
name|t
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tip
operator|.
name|intValue
argument_list|()
operator|!=
name|val
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Found value:"
operator|+
name|tip
operator|.
name|intValue
argument_list|()
operator|+
literal|" expecting:"
operator|+
name|val
argument_list|)
throw|;
block|}
operator|++
name|i
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertLong
specifier|public
name|boolean
name|assertLong
parameter_list|(
name|Tuple
name|tuple
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|long
name|l
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|lv
init|=
operator|(
name|long
operator|)
name|tuple
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|lv
operator|!=
name|l
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Longs not equal:"
operator|+
name|l
operator|+
literal|" : "
operator|+
name|lv
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertString
specifier|public
name|boolean
name|assertString
parameter_list|(
name|Tuple
name|tuple
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|String
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|actual
init|=
operator|(
name|String
operator|)
name|tuple
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
literal|null
operator|==
name|expected
operator|&&
literal|null
operator|!=
name|actual
operator|)
operator|||
operator|(
literal|null
operator|!=
name|expected
operator|&&
literal|null
operator|==
name|actual
operator|)
operator|||
operator|(
literal|null
operator|!=
name|expected
operator|&&
operator|!
name|expected
operator|.
name|equals
argument_list|(
name|actual
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Longs not equal:"
operator|+
name|expected
operator|+
literal|" : "
operator|+
name|actual
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertMaps
specifier|protected
name|boolean
name|assertMaps
parameter_list|(
name|List
argument_list|<
name|Map
argument_list|>
name|maps
parameter_list|,
name|int
modifier|...
name|ids
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|maps
operator|.
name|size
argument_list|()
operator|!=
name|ids
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Expected id count != actual map count:"
operator|+
name|ids
operator|.
name|length
operator|+
literal|":"
operator|+
name|maps
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|val
range|:
name|ids
control|)
block|{
name|Map
name|t
init|=
name|maps
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Long
name|tip
init|=
operator|(
name|Long
operator|)
name|t
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tip
operator|.
name|intValue
argument_list|()
operator|!=
name|val
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Found value:"
operator|+
name|tip
operator|.
name|intValue
argument_list|()
operator|+
literal|" expecting:"
operator|+
name|val
argument_list|)
throw|;
block|}
operator|++
name|i
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertList
specifier|private
name|boolean
name|assertList
parameter_list|(
name|List
name|list
parameter_list|,
name|Object
modifier|...
name|vals
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|!=
name|vals
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Lists are not the same size:"
operator|+
name|list
operator|.
name|size
argument_list|()
operator|+
literal|" : "
operator|+
name|vals
operator|.
name|length
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|a
init|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
name|b
init|=
name|vals
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"List items not equals:"
operator|+
name|a
operator|+
literal|" : "
operator|+
name|b
argument_list|)
throw|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|indexr
specifier|protected
name|void
name|indexr
parameter_list|(
name|Object
modifier|...
name|fields
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|doc
init|=
name|getDoc
argument_list|(
name|fields
argument_list|)
decl_stmt|;
name|indexDoc
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
